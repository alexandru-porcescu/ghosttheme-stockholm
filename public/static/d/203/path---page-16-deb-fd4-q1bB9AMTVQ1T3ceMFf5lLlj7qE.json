{"data":{"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867370c","title":"Lynx Roundup, September 28th","slug":"lynx-roundup-september-28th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/90@2x.jpg","excerpt":"Deep Learning & Dopamine!  Crowdsourced Neuroscience!  Easier workflow from Pandas to scikit!","custom_excerpt":"Deep Learning & Dopamine!  Crowdsourced Neuroscience!  Easier workflow from Pandas to scikit!","created_at_pretty":"27 September, 2018","published_at_pretty":"28 September, 2018","updated_at_pretty":"17 October, 2018","created_at":"2018-09-26T21:48:25.000-04:00","published_at":"2018-09-28T07:00:00.000-04:00","updated_at":"2018-10-16T23:41:37.000-04:00","meta_title":"Lynx Roundup, September 28th | Hackers and Slackers","meta_description":"Deep Learning & Dopamine!  Crowdsourced Neuroscience!  Easier workflow from Pandas to scikit!","og_description":"Deep Learning & Dopamine!  Crowdsourced Neuroscience!  Easier workflow from Pandas to scikit!","og_image":"https://hackersandslackers.com/content/images/lynx/90@2x.jpg","og_title":"Lynx Roundup, September 28th","twitter_description":"Deep Learning & Dopamine!  Crowdsourced Neuroscience!  Easier workflow from Pandas to scikit!","twitter_image":"https://hackersandslackers.com/content/images/lynx/90@2x.jpg","twitter_title":"Lynx Roundup, September 28th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://venturebeat.com/2018/05/14/googles-deepmind-is-using-neural-nets-to-explore-dopamines-role-in-learning/\n\nhttps://qz.com/1279913/artificial-intelligence-is-learning-to-see-in-the-dark/\n\nhttps://medicalxpress.com/news/2018-05-crowdsource-brain-gamers-neuron.html\n\nhttp://ideolalia.com/2018/08/28/artifex.html\n\nhttps://scipython.com/blog/types-of-plasma/\n\nhttps://www.facebook.com/diplytech/videos/vb.173678916107053/1196539270487674/?type=2&theater\n[https://www.facebook.com/diplytech/videos/vb.173678916107053/1196539270487674/?type=2&theater]\n\nhttps://medium.com/dunder-data/from-pandas-to-scikit-learn-a-new-exciting-workflow-e88e2271ef62","html":"<p></p><p><a href=\"https://venturebeat.com/2018/05/14/googles-deepmind-is-using-neural-nets-to-explore-dopamines-role-in-learning/\">https://venturebeat.com/2018/05/14/googles-deepmind-is-using-neural-nets-to-explore-dopamines-role-in-learning/</a></p><p><a href=\"https://qz.com/1279913/artificial-intelligence-is-learning-to-see-in-the-dark/\">https://qz.com/1279913/artificial-intelligence-is-learning-to-see-in-the-dark/</a></p><p><a href=\"https://medicalxpress.com/news/2018-05-crowdsource-brain-gamers-neuron.html\">https://medicalxpress.com/news/2018-05-crowdsource-brain-gamers-neuron.html</a></p><p><a href=\"http://ideolalia.com/2018/08/28/artifex.html\">http://ideolalia.com/2018/08/28/artifex.html</a></p><p><a href=\"https://scipython.com/blog/types-of-plasma/\">https://scipython.com/blog/types-of-plasma/</a></p><p><a href=\"https://www.facebook.com/diplytech/videos/vb.173678916107053/1196539270487674/?type=2&amp;theater\">https://www.facebook.com/diplytech/videos/vb.173678916107053/1196539270487674/?type=2&amp;theater</a></p><p><a href=\"https://medium.com/dunder-data/from-pandas-to-scikit-learn-a-new-exciting-workflow-e88e2271ef62\">https://medium.com/dunder-data/from-pandas-to-scikit-learn-a-new-exciting-workflow-e88e2271ef62</a></p>","url":"https://hackersandslackers.com/lynx-roundup-september-28th/","uuid":"860cc516-86fb-484c-8e2f-1768fec82fd3","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5bac36e95ee4c83af27dda76"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673718","title":"Reading and Writing to CSVs in Python","slug":"reading-and-writing-to-csvs-in-python","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/09/csvpython2@2x.jpg","excerpt":"Playing with tabular data the native Python way.","custom_excerpt":"Playing with tabular data the native Python way.","created_at_pretty":"27 September, 2018","published_at_pretty":"27 September, 2018","updated_at_pretty":"05 November, 2018","created_at":"2018-09-27T13:22:47.000-04:00","published_at":"2018-09-27T18:35:00.000-04:00","updated_at":"2018-11-05T07:55:10.000-05:00","meta_title":"Reading and Writing to CSVs in Python | Hackers and Slackers","meta_description":"Using native Python libraries to interact with tabular data. Pandas not included.\n\n\n\n\n\n\n\n\nar \n\n","og_description":"Using native Python libraries to interact with tabular data. Pandas not included.","og_image":"https://hackersandslackers.com/content/images/2018/09/csvpython2@2x.jpg","og_title":"Reading and Writing to CSVs in Python | Hackers and Slackers","twitter_description":"Using native Python libraries to interact with tabular data. Pandas not included.","twitter_image":"https://hackersandslackers.com/content/images/2018/09/csvpython2@2x.jpg","twitter_title":"Reading and Writing to CSVs in Python | Hackers and Slackers","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Data Engineering","slug":"dataengineering","description":"The systematic collection and transformation of data via the creation of tools and pipelines.","feature_image":null,"meta_description":null,"meta_title":"Data Engineering | Hackers and Slackers","visibility":"public"}],"plaintext":"Tables. Cells. Two-dimensional data. We here at Hackers & Slackers know how to\ntalk dirty, but there's one word we'll be missing from our vocabulary today:\nPandas.Before the remaining audience closes their browser windows in fury, hear\nme out. We love Pandas; so much so that tend to recklessly gunsling this 30mb\nlibrary to perform simple tasks. This isn't always a wise choice. I get it:\nyou're here for data, not software engineering best practices. We all are, but\nin a landscape where engineers and scientists already produce polarizing code\nquality, we're all just a single bloated lambda function away from looking like\n idiots and taking a hit to our credibility. This is a silly predicament when\nthere are plenty of built-in Python libraries at our disposable which work\nperfectly fine. Python’s built in CSV library can cover quite a bit of data\nmanipulation use cases to achieve the same results of large scientific libraries\njust as easily.\n\nBasic CSV Interaction\nRegardless of whether you're reading or writing to CSVs, there are a couple\nlines of code which will stay mostly the same between the two. \n\n# read_csv.py\nimport csv\n\nwith open('hackers.csv', 'r', newline='') as myCsvFile:\n     reader = csv.reader(myCsvFile, delimiter=',', quotechar='|')\n\nBefore accomplishing anything, we've stated some critical things in these two\nlines of code:\n\n * All interactions with our CSV will only be valid as long as they live within\n   the with.open  block (comparable to managing database connections).\n * We'll be interacting with a file in our directory called hackers.csv, for\n   which we only need read (or r) permissions\n * We create a reader  object, which is again comparable to managing database \n   cursors  if you're familiar.\n * We have the ability to set the delimiter of our CSV (a curious feature,\n   considering the meaning of C  in the acronym CSV.\n\nIterating Rows\nAn obvious use case you probably have in mind would be to loop through each row\nto see what sort of values we're dealing with. Your first inclination might be\nto do something like this:\n\n# read_csv.py\nimport csv\n\nwith open('hackers.csv', 'r', newline='') as myCsvFile:\n    reader = csv.reader(myCsvFile, delimiter=',', quotechar='|')\n\tfor row in reader.readlines():\n\t\tprint('row = ', row)\n\nThat's fine and all, but row  in this case returns a simple list - this is\nobviously problem if you want to access the values of certain columns by column \nname,  as opposed to numeric index (I bet you do). Well, we've got you covered:\n\n# read_csv.py\nimport csv\n\nwith open('hackers.csv', 'r', newline='') as myCsvFile:\n    reader = csv.DictReader(myCsvFile)\n\tfor row in reader.readlines():\n\t\tprint(row['column_name_1'], row['column_name_2'])\n\nChanging reader  to DictReader  outputs a dictionary  per CSV row, as opposed to\na simple list. Are things starting to feel a little Panda-like yet?\n\nBonus: Printing all Keys and Their Values\nLet's get a little weird just for fun. Since our rows are dict objects now, we\ncan print our entire CSV as a series of dicts like so:\n\n# read_csv.py\nimport csv\n\nwith open('hackers.csv', 'r', newline='') as myCsvFile:\n    reader = csv.DictReader(myCsvFile)\n\tfor row in loc_reader:\n            for (k, v) in row.items():\n\t\t\t\tprint(k, ':', v)\n\nSkipping Headers\nAs we read information from CSVs to be repurposed for, say, API calls, we \nprobably  don't want to iterate over the first row of our CSV: this will output\nour key values alone, which would be useless in this context. Consider this:\n\n# read_csv.py\nimport csv\n\nwith open('hackers.csv', 'r') as myCsvFile:\n\tnext(myCsvFile)\n\tfor row in myCsvFile.readlines():\n\t\tprint(row)\n\nWhoa! A different approach.... but somehow just as simple? In this case, we\nleave out reader  altogether (which still works!) but more importantly, we\nintroduce next(). next(myCsvFile)  immediately skips to the next line in a CSV,\nso in our case, we simply skip line one before going into our For loop. Amazing.\n\nWriting to CSVs\nWriting to CSVs isn't much different than reading from them. In fact, almost all\nthe same principles apply, where instances of the word \"read\" are more or less\nreplaced with\" write. Huh. \n\n# write_csv.py\nimport csv\n\nwith open('hackers.csv', 'w') as myCsvFile:\n    columns = ['column_name_1', 'column_name_2']\n    writer = csv.DictWriter(myCsvFile, fieldnames=columns)\n\n    writer.writeheader()\n    writer.writerow({'column_name_1': 'Mark', 'column_name_2': 'Twain'})\n    writer.writerow({'column_name_1': 'Foo', 'column_name_2: 'Bar'})\n\nWe're writing a brand new CSV here: 'hackers.csv' doesn't technically exist yet,\nbut that doesn't stop Python from not giving a shit. Python knows what you mean.\nPython has your back.\n\nHere, we set our headers as a fixed list set by the column  variable. This is a\nstatic way of creating headers, but the same can be done dynamically by passing\nthe keys  of a dict, or whatever it is you like to do. \n\nwriter.writeheader()  knows what we're saying thanks to the aforementioned \nfieldnames  we passed to our writer earlier. Good for you, writer.\n\nBut how do we write rows, you might ask? Why, with writer.writerow(), of course!\nBecause we use DictWriter  similarly to how we used DictReader  earlier, we can\nmap values to our CSV with simple column references. Easy.","html":"<p>Tables. Cells. Two-dimensional data. We here at Hackers &amp; Slackers know how to talk dirty, but there's one word we'll be missing from our vocabulary today: Pandas.Before the remaining audience closes their browser windows in fury, hear me out. We love Pandas; so much so that tend to recklessly gunsling this 30mb library to perform simple tasks. This isn't always a wise choice. I get it: you're here for data, not software engineering best practices. We all are, but in a landscape where engineers and scientists already produce polarizing code quality, we're all just a single bloated lambda function away from looking like  idiots and taking a hit to our credibility. This is a silly predicament when there are plenty of built-in Python libraries at our disposable which work perfectly fine. Python’s built in CSV library can cover quite a bit of data manipulation use cases to achieve the same results of large scientific libraries just as easily.</p><h2 id=\"basic-csv-interaction\">Basic CSV Interaction</h2><p>Regardless of whether you're reading or writing to CSVs, there are a couple lines of code which will stay mostly the same between the two. </p><pre><code># read_csv.py\nimport csv\n\nwith open('hackers.csv', 'r', newline='') as myCsvFile:\n     reader = csv.reader(myCsvFile, delimiter=',', quotechar='|')</code></pre><p>Before accomplishing anything, we've stated some critical things in these two lines of code:</p><ul><li>All interactions with our CSV will only be valid as long as they live within the <code>with.open</code> block (comparable to managing database connections).</li><li>We'll be interacting with a file in our directory called <code>hackers.csv</code>, for which we only need read (or <code>r</code>) permissions</li><li>We create a <code>reader</code> object, which is again comparable to managing database <code>cursors</code> if you're familiar.</li><li>We have the ability to set the delimiter of our CSV (a curious feature, considering the meaning of <strong>C</strong> in the acronym <strong>CSV.</strong></li></ul><h3 id=\"iterating-rows\">Iterating Rows</h3><p>An obvious use case you probably have in mind would be to loop through each row to see what sort of values we're dealing with. Your first inclination might be to do something like this:</p><pre><code># read_csv.py\nimport csv\n\nwith open('hackers.csv', 'r', newline='') as myCsvFile:\n    reader = csv.reader(myCsvFile, delimiter=',', quotechar='|')\n\tfor row in reader.readlines():\n\t\tprint('row = ', row)</code></pre><p>That's fine and all, but <code>row</code> in this case returns a simple list - this is obviously problem if you want to access the values of certain columns by column <em>name,</em> as opposed to <em>numeric index </em>(I bet you do). Well, we've got you covered:</p><pre><code># read_csv.py\nimport csv\n\nwith open('hackers.csv', 'r', newline='') as myCsvFile:\n    reader = csv.DictReader(myCsvFile)\n\tfor row in reader.readlines():\n\t\tprint(row['column_name_1'], row['column_name_2'])</code></pre><p>Changing <code>reader</code> to <code>DictReader</code> outputs a <em>dictionary</em> per CSV row, as opposed to a simple list. Are things starting to feel a little Panda-like yet?</p><h4 id=\"bonus-printing-all-keys-and-their-values\">Bonus: Printing all Keys and Their Values</h4><p>Let's get a little weird just for fun. Since our rows are dict objects now, we can print our entire CSV as a series of dicts like so:</p><pre><code># read_csv.py\nimport csv\n\nwith open('hackers.csv', 'r', newline='') as myCsvFile:\n    reader = csv.DictReader(myCsvFile)\n\tfor row in loc_reader:\n            for (k, v) in row.items():\n\t\t\t\tprint(k, ':', v)</code></pre><h3 id=\"skipping-headers\">Skipping Headers</h3><p>As we read information from CSVs to be repurposed for, say, API calls, we <em>probably</em> don't want to iterate over the first row of our CSV: this will output our key values alone, which would be useless in this context. Consider this:</p><pre><code># read_csv.py\nimport csv\n\nwith open('hackers.csv', 'r') as myCsvFile:\n\tnext(myCsvFile)\n\tfor row in myCsvFile.readlines():\n\t\tprint(row)</code></pre><p>Whoa! A different approach.... but somehow just as simple? In this case, we leave out <code>reader</code> altogether (which still works!) but more importantly, we introduce <code>next()</code>. <code>next(myCsvFile)</code> immediately skips to the next line in a CSV, so in our case, we simply skip line one before going into our For loop. Amazing.</p><h2 id=\"writing-to-csvs\">Writing to CSVs</h2><p>Writing to CSVs isn't much different than reading from them. In fact, almost all the same principles apply, where instances of the word \"read\" are more or less replaced with\" write. Huh. </p><pre><code># write_csv.py\nimport csv\n\nwith open('hackers.csv', 'w') as myCsvFile:\n    columns = ['column_name_1', 'column_name_2']\n    writer = csv.DictWriter(myCsvFile, fieldnames=columns)\n\n    writer.writeheader()\n    writer.writerow({'column_name_1': 'Mark', 'column_name_2': 'Twain'})\n    writer.writerow({'column_name_1': 'Foo', 'column_name_2: 'Bar'})</code></pre><p>We're writing a brand new CSV here: 'hackers.csv' doesn't technically exist yet, but that doesn't stop Python from not giving a shit. Python knows what you mean. Python has your back.</p><p>Here, we set our headers as a fixed list set by the <code>column</code> variable. This is a static way of creating headers, but the same can be done dynamically by passing the <code>keys</code> of a dict, or whatever it is you like to do. </p><p><code>writer.writeheader()</code> knows what we're saying thanks to the aforementioned <code>fieldnames</code> we passed to our writer earlier. Good for you, writer.</p><p>But how do we write rows, you might ask? Why, with <code>writer.writerow()</code>, of course! Because we use <code>DictWriter</code> similarly to how we used <code>DictReader</code> earlier, we can map values to our CSV with simple column references. Easy.</p>","url":"https://hackersandslackers.com/reading-and-writing-to-csvs-in-python/","uuid":"eb4f019f-e135-49d2-a568-f03f1e622d62","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5bad11e75ee4c83af27dda9e"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867370b","title":"Lynx Roundup, September 27th","slug":"lynx-roundup-september-27th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/04/102-1.jpg","excerpt":"How to contribute to Open Source!  Tracking illegal fishing!  Flat Earth Math!","custom_excerpt":"How to contribute to Open Source!  Tracking illegal fishing!  Flat Earth Math!","created_at_pretty":"27 September, 2018","published_at_pretty":"27 September, 2018","updated_at_pretty":"10 April, 2019","created_at":"2018-09-26T21:45:10.000-04:00","published_at":"2018-09-27T07:00:00.000-04:00","updated_at":"2019-04-10T10:43:12.000-04:00","meta_title":"Lynx Roundup, September 27th | Hackers and Slackers","meta_description":"How to contribute to Open Source!  Tracking illegal fishing!  Flat Earth Math!","og_description":"How to contribute to Open Source!  Tracking illegal fishing!  Flat Earth Math!","og_image":"https://hackersandslackers.com/content/images/2019/04/102-1-2.jpg","og_title":"Lynx Roundup, September 27th","twitter_description":"How to contribute to Open Source!  Tracking illegal fishing!  Flat Earth Math!","twitter_image":"https://hackersandslackers.com/content/images/2019/04/102-1-1.jpg","twitter_title":"Lynx Roundup, September 27th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://medium.com/@altjsus/how-to-start-to-contribute-to-opensource-properly-step-1-6fa3c19749b3\n\nhttps://www.forbes.com/sites/rachelcrowell/2018/08/31/researchers-solve-first-problem-from-mathematical-physics-wish-list/\n\nhttps://eos.org/articles/illegal-seafood-supply-chains-can-now-be-tracked-by-satellite\n\nhttps://neurosciencenews.com/neurobiology-thinking-9772/\n\nhttps://medium.com/sameer-saxena/python-implementation-of-machine-learning-course-d7ef6073bd33\n\nhttps://www.r-bloggers.com/flat-earth-mathematics-in-the-r-language/\n\nhttps://www.datainnovation.org/2018/05/how-policymakers-can-foster-algorithmic-accountability/","html":"<p></p><p><a href=\"https://medium.com/@altjsus/how-to-start-to-contribute-to-opensource-properly-step-1-6fa3c19749b3\">https://medium.com/@altjsus/how-to-start-to-contribute-to-opensource-properly-step-1-6fa3c19749b3</a></p><p><a href=\"https://www.forbes.com/sites/rachelcrowell/2018/08/31/researchers-solve-first-problem-from-mathematical-physics-wish-list/\">https://www.forbes.com/sites/rachelcrowell/2018/08/31/researchers-solve-first-problem-from-mathematical-physics-wish-list/</a></p><p><a href=\"https://eos.org/articles/illegal-seafood-supply-chains-can-now-be-tracked-by-satellite\">https://eos.org/articles/illegal-seafood-supply-chains-can-now-be-tracked-by-satellite</a></p><p><a href=\"https://neurosciencenews.com/neurobiology-thinking-9772/\">https://neurosciencenews.com/neurobiology-thinking-9772/</a></p><p><a href=\"https://medium.com/sameer-saxena/python-implementation-of-machine-learning-course-d7ef6073bd33\">https://medium.com/sameer-saxena/python-implementation-of-machine-learning-course-d7ef6073bd33</a></p><p><a href=\"https://www.r-bloggers.com/flat-earth-mathematics-in-the-r-language/\">https://www.r-bloggers.com/flat-earth-mathematics-in-the-r-language/</a></p><p><a href=\"https://www.datainnovation.org/2018/05/how-policymakers-can-foster-algorithmic-accountability/\">https://www.datainnovation.org/2018/05/how-policymakers-can-foster-algorithmic-accountability/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-september-27th/","uuid":"0f1b12e4-dbe4-4c54-8280-c9b1a1151ff3","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5bac36265ee4c83af27dda73"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867370a","title":"Lynx Roundup, September 26th","slug":"lynx-roundup-september-26th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/89@2x.jpg","excerpt":"Data Science at Uber!  Math & Music!  ROC Curves & Precision/Recall Curves!","custom_excerpt":"Data Science at Uber!  Math & Music!  ROC Curves & Precision/Recall Curves!","created_at_pretty":"27 September, 2018","published_at_pretty":"27 September, 2018","updated_at_pretty":"17 October, 2018","created_at":"2018-09-26T21:40:47.000-04:00","published_at":"2018-09-26T21:42:50.000-04:00","updated_at":"2018-10-16T23:40:50.000-04:00","meta_title":"Lynx Roundup, September 26th | Hackers and Slackers","meta_description":"Data Science at Uber!  Math & Music!  ROC Curves & Precision/Recall Curves!","og_description":"Data Science at Uber!  Math & Music!  ROC Curves & Precision/Recall Curves!","og_image":"https://hackersandslackers.com/content/images/lynx/89@2x.jpg","og_title":"Lynx Roundup, September 26th","twitter_description":"Data Science at Uber!  Math & Music!  ROC Curves & Precision/Recall Curves!","twitter_image":"https://hackersandslackers.com/content/images/lynx/89@2x.jpg","twitter_title":"Lynx Roundup, September 26th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://github.com/iodide-project/pyodide\n\nhttps://github.com/ironmussa/Optimus\n\nhttps://eng.uber.com/databook/\n\nhttps://arxiv.org/abs/1808.03322\n\nhttps://machinelearningmastery.com/roc-curves-and-precision-recall-curves-for-classification-in-python/\n\nhttps://enlight.nyc/random-forest\n\nhttps://blogs.scientificamerican.com/roots-of-unity/how-math-helped-me-learn-early-music/","html":"<p></p><p><a href=\"https://github.com/iodide-project/pyodide\">https://github.com/iodide-project/pyodide</a></p><p><a href=\"https://github.com/ironmussa/Optimus\">https://github.com/ironmussa/Optimus</a></p><p><a href=\"https://eng.uber.com/databook/\">https://eng.uber.com/databook/</a></p><p><a href=\"https://arxiv.org/abs/1808.03322\">https://arxiv.org/abs/1808.03322</a></p><p><a href=\"https://machinelearningmastery.com/roc-curves-and-precision-recall-curves-for-classification-in-python/\">https://machinelearningmastery.com/roc-curves-and-precision-recall-curves-for-classification-in-python/</a></p><p><a href=\"https://enlight.nyc/random-forest\">https://enlight.nyc/random-forest</a></p><p><a href=\"https://blogs.scientificamerican.com/roots-of-unity/how-math-helped-me-learn-early-music/\">https://blogs.scientificamerican.com/roots-of-unity/how-math-helped-me-learn-early-music/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-september-26th/","uuid":"e39b45ff-135f-4570-b821-78d2a706350a","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5bac351f5ee4c83af27dda70"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673708","title":"Lynx Roundup, September 25th","slug":"lynx-roundup-september-25th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/114@2x.jpg","excerpt":"Cracked software!  Sophisticated software!  Pandas tricks!","custom_excerpt":"Cracked software!  Sophisticated software!  Pandas tricks!","created_at_pretty":"19 September, 2018","published_at_pretty":"25 September, 2018","updated_at_pretty":"17 October, 2018","created_at":"2018-09-19T01:43:24.000-04:00","published_at":"2018-09-25T07:00:00.000-04:00","updated_at":"2018-10-17T08:31:43.000-04:00","meta_title":"Lynx Roundup, September 25th | Hackers and Slackers","meta_description":"Cracked software!  Sophisticated software!  Pandas tricks!","og_description":"Cracked software!  Sophisticated software!  Pandas tricks!","og_image":"https://hackersandslackers.com/content/images/lynx/114@2x.jpg","og_title":"Lynx Roundup, September 25th","twitter_description":"Cracked software!  Sophisticated software!  Pandas tricks!","twitter_image":"https://hackersandslackers.com/content/images/lynx/114@2x.jpg","twitter_title":"Lynx Roundup, September 25th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.quora.com/How-are-cracked-versions-of-software-created-and-why-are-developers-not-able-to-prevent-it\n\n\n\nhttps://www.quora.com/What-is-the-most-sophisticated-piece-of-software-code-ever-written\n\n\n\nhttps://www.quora.com/What-are-the-main-differences-between-a-principal-component-analysis-and-a-factor-analysis\n\n\n\nhttps://peerj.com/articles/5518/\n\n\n\nhttps://realpython.com/python-pandas-tricks/\n\n\n\nhttps://github.com/trekhleb/learn-python/blob/master/README.md\n\n\n\nOur beautiful fellow workers are out here with comrades from @techworkersco\n[https://twitter.com/techworkersco?ref_src=twsrc%5Etfw], @MobToMeltICE\n[https://twitter.com/MobToMeltICE?ref_src=twsrc%5Etfw], and others in front of \n@tableau [https://twitter.com/tableau?ref_src=twsrc%5Etfw]  to ask them to stop\nworking with ICE! pic.twitter.com/jZwQYdsdkh [https://t.co/jZwQYdsdkh]\n\n— Seattle IWW (@SeattleIWW) August 30, 2018\n[https://twitter.com/SeattleIWW/status/1035244554801176576?ref_src=twsrc%5Etfw]","html":"<p></p><p><a href=\"https://www.quora.com/How-are-cracked-versions-of-software-created-and-why-are-developers-not-able-to-prevent-it\">https://www.quora.com/How-are-cracked-versions-of-software-created-and-why-are-developers-not-able-to-prevent-it</a></p><p></p><p><a href=\"https://www.quora.com/What-is-the-most-sophisticated-piece-of-software-code-ever-written\">https://www.quora.com/What-is-the-most-sophisticated-piece-of-software-code-ever-written</a></p><p></p><p><a href=\"https://www.quora.com/What-are-the-main-differences-between-a-principal-component-analysis-and-a-factor-analysis\">https://www.quora.com/What-are-the-main-differences-between-a-principal-component-analysis-and-a-factor-analysis</a></p><p></p><p><a href=\"https://peerj.com/articles/5518/\">https://peerj.com/articles/5518/</a></p><p></p><p><a href=\"https://realpython.com/python-pandas-tricks/\">https://realpython.com/python-pandas-tricks/</a></p><p></p><p><a href=\"https://github.com/trekhleb/learn-python/blob/master/README.md\">https://github.com/trekhleb/learn-python/blob/master/README.md</a></p><p></p><figure class=\"kg-card kg-embed-card\"><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Our beautiful fellow workers are out here with comrades from <a href=\"https://twitter.com/techworkersco?ref_src=twsrc%5Etfw\">@techworkersco</a>, <a href=\"https://twitter.com/MobToMeltICE?ref_src=twsrc%5Etfw\">@MobToMeltICE</a>, and others in front of <a href=\"https://twitter.com/tableau?ref_src=twsrc%5Etfw\">@tableau</a> to ask them to stop working with ICE! <a href=\"https://t.co/jZwQYdsdkh\">pic.twitter.com/jZwQYdsdkh</a></p>&mdash; Seattle IWW (@SeattleIWW) <a href=\"https://twitter.com/SeattleIWW/status/1035244554801176576?ref_src=twsrc%5Etfw\">August 30, 2018</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</figure>","url":"https://hackersandslackers.com/lynx-roundup-september-25th/","uuid":"1d2d5829-1fec-42c0-8407-5b15a347940e","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5ba1e1fc4cb12061ced46c9d"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673709","title":"Using Random Forests for Feature Selection with Categorical Features","slug":"random-forests-for-feature-selection","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/09/codesnippertsomething@2x.jpg","excerpt":"Python helper functions for adding feature importance, and displaying them as a single variable.","custom_excerpt":"Python helper functions for adding feature importance, and displaying them as a single variable.","created_at_pretty":"24 September, 2018","published_at_pretty":"24 September, 2018","updated_at_pretty":"14 April, 2019","created_at":"2018-09-23T20:23:32.000-04:00","published_at":"2018-09-24T07:30:00.000-04:00","updated_at":"2019-04-14T14:35:02.000-04:00","meta_title":"Using Random Forests for Feature Selection | Hackers and Slackers","meta_description":"Helper functions in Python to gauge  importance of Categorical Features for Random Forests in Scikit-learn","og_description":"Helper functions in Python to gauge  importance of Categorical Features for Random Forests in Scikit-learn","og_image":"https://hackersandslackers.com/content/images/2018/09/codesnippertsomething@2x.jpg","og_title":"Using Random Forests for Feature Selection","twitter_description":"Helper functions in Python to gauge  importance of Categorical Features for Random Forests in Scikit-learn","twitter_image":"https://hackersandslackers.com/content/images/2018/09/codesnippertsomething@2x.jpg","twitter_title":"Using Random Forests for Feature Selection","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Code Snippet Corner","slug":"codesnippetcorner","description":"Real-world examples of Python being used to solve complex data problems, primarily using Jupyter notebooks.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o-1.jpg","meta_description":"Real-world examples of Python being used to solve complex data problems.","meta_title":"Python Code Snippet Corner","visibility":"public"},"tags":[{"name":"Code Snippet Corner","slug":"codesnippetcorner","description":"Real-world examples of Python being used to solve complex data problems, primarily using Jupyter notebooks.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o-1.jpg","meta_description":"Real-world examples of Python being used to solve complex data problems.","meta_title":"Python Code Snippet Corner","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Data Science","slug":"datascience","description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","feature_image":null,"meta_description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","meta_title":"Data Science | Hackers and Slackers","visibility":"public"},{"name":"Machine Learning","slug":"machine-learning","description":"The latest developments in machine learning tools and technology available to data scientists.","feature_image":null,"meta_description":"The latest developments in machine learning tools and technology available to data scientists.","meta_title":"Machine Learning | Hackers and Slackers","visibility":"public"},{"name":"#Code Snippet Corner","slug":"code-snippet-corner","description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o_o.jpg","meta_description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","meta_title":"Python Code Snippet Corner","visibility":"internal"}],"plaintext":"Notebook here\n[https://github.com/mattalhonte/random_forest_categorical_feature_imprtance/blob/master/Categorical%20Feature%20Importance.ipynb]\n.  Helper functions here\n[https://github.com/mattalhonte/random_forest_categorical_feature_imprtance/blob/master/foresthelpers/featureimportance.py]\n.\n\nOne of the best features of Random Forests is that it has built-in Feature\nSelection.  Explicability is one of the things we often lose when we go from\ntraditional statistics to Machine Learning, but Random Forests lets us actually\nget some insight into our dataset instead of just having to treat our model as a\nblack box.\n\nOne problem, though - it doesn't work that well for categorical features.  Since\nyou'll generally have to One-Hot Encode a categorical feature (for instance,\nturn something with 7 categories into 7 variables that are a \"True/False\"),\nyou'll wind up with a bunch of small features.  This gets tough to read,\nespecially if you're dealing with a lot of categories.  It also makes that\nfeature look less important than it is - rather than appearing near the top,\nyou'll maybe have 17 weak-seeming features near the bottom - which gets worse if\nyou're filtering it so that you only see features above a certain threshold.\n\nSoo, here's some helper functions for adding up their importance and displaying\nthem as a single variable.  I did have to \"reinvent the wheel\" a bit and roll my\nmy own One-Hot function, rather than using Scikit's builtin one.\n\nFirst, let's grab a dataset.  I'm using this\n[https://www.kaggle.com/c/avazu-ctr-prediction]  Kaggle dataset because it has a\ngood number of categorical predictors.  I'm also only using the first 500 rows\nbecause the whole dataset is like ~ 1 GB.\n\nimport pandas as pd\n\ndf = pd.read_csv(\"train.csv\", \n                   nrows=500)\n\n\nLet's just use the Categorical variables as our predictors because that's what\nwe're focusing on, but in actual usage you don't have to make them the same.\n\npredVars = [\n    \"site_category\",\n    \"app_category\",\n    \"device_model\",\n    \"device_type\",\n    \"device_conn_type\",\n]\n\nX = (df\n     .dropna()\n     [predVars]\n     .pipe((fh.oneHotEncodeMultipleVars, \"df\"),\n           varList = predVars) #Change this if you don't have solely categoricals\n    )\n\nlabels = X.columns\n\ny = (df\n     .dropna()\n     [\"click\"]\n     .values)\n\n\nLet's use log_loss  as our metric, because I saw this\n[https://blog.myyellowroad.com/using-categorical-data-in-machine-learning-with-python-from-dummy-variables-to-deep-category-66041f734512] \n blog post that used it for this dataset.\n\nfrom sklearn.ensemble import RandomForestClassifierfrom sklearn.metrics import log_loss\nfi.displayFeatureImportances(X,y,labels,log_loss,{\"n_estimators\": 18,\"oob_score\": True},)\nScore is 3.6297600214665064 \n\n\nVariable\n Importance\n 0\n device_model\n 0.843122\n 1\n site_category\n 0.083392\n 2\n app_category\n 0.037216\n 3\n device_type\n 0.025057\n 4\n device_conn_type\n 0.011213","html":"<p><em>Notebook <a href=\"https://github.com/mattalhonte/random_forest_categorical_feature_imprtance/blob/master/Categorical%20Feature%20Importance.ipynb\">here</a>.  Helper functions <a href=\"https://github.com/mattalhonte/random_forest_categorical_feature_imprtance/blob/master/foresthelpers/featureimportance.py\">here</a>.</em></p><p>One of the best features of Random Forests is that it has built-in Feature Selection.  Explicability is one of the things we often lose when we go from traditional statistics to Machine Learning, but Random Forests lets us actually get some insight into our dataset instead of just having to treat our model as a black box.</p><p>One problem, though - it doesn't work that well for categorical features.  Since you'll generally have to One-Hot Encode a categorical feature (for instance, turn something with 7 categories into 7 variables that are a \"True/False\"), you'll wind up with a bunch of small features.  This gets tough to read, especially if you're dealing with a lot of categories.  It also makes that feature look less important than it is - rather than appearing near the top, you'll maybe have 17 weak-seeming features near the bottom - which gets worse if you're filtering it so that you only see features above a certain threshold.</p><p>Soo, here's some helper functions for adding up their importance and displaying them as a single variable.  I did have to \"reinvent the wheel\" a bit and roll my my own One-Hot function, rather than using Scikit's builtin one.</p><p>First, let's grab a dataset.  I'm using <a href=\"https://www.kaggle.com/c/avazu-ctr-prediction\">this</a> Kaggle dataset because it has a good number of categorical predictors.  I'm also only using the first 500 rows because the whole dataset is like ~ 1 GB.</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">import pandas as pd\n\ndf = pd.read_csv(&quot;train.csv&quot;, \n                   nrows=500)\n</code></pre>\n<!--kg-card-end: markdown--><p>Let's just use the Categorical variables as our predictors because that's what we're focusing on, but in actual usage you don't have to make them the same.</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">predVars = [\n    &quot;site_category&quot;,\n    &quot;app_category&quot;,\n    &quot;device_model&quot;,\n    &quot;device_type&quot;,\n    &quot;device_conn_type&quot;,\n]\n\nX = (df\n     .dropna()\n     [predVars]\n     .pipe((fh.oneHotEncodeMultipleVars, &quot;df&quot;),\n           varList = predVars) #Change this if you don't have solely categoricals\n    )\n\nlabels = X.columns\n\ny = (df\n     .dropna()\n     [&quot;click&quot;]\n     .values)\n</code></pre>\n<!--kg-card-end: markdown--><p>Let's use <code>log_loss</code> as our metric, because I saw <a href=\"https://blog.myyellowroad.com/using-categorical-data-in-machine-learning-with-python-from-dummy-variables-to-deep-category-66041f734512\">this</a> blog post that used it for this dataset.</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">from sklearn.ensemble import RandomForestClassifierfrom sklearn.metrics import log_loss\nfi.displayFeatureImportances(X,y,labels,log_loss,{&quot;n_estimators&quot;: 18,&quot;oob_score&quot;: True},)\nScore is 3.6297600214665064 \n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: html--><div class=\"tableContainer\">\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Variable</th>\n      <th>Importance</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>device_model</td>\n      <td>0.843122</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>site_category</td>\n      <td>0.083392</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>app_category</td>\n      <td>0.037216</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>device_type</td>\n      <td>0.025057</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>device_conn_type</td>\n      <td>0.011213</td>\n    </tr>\n  </tbody>\n</table>\n</div><!--kg-card-end: html-->","url":"https://hackersandslackers.com/random-forests-for-feature-selection/","uuid":"26ebccb3-ab41-44cf-8d57-bf995100b088","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5ba82e84a1cf0b13cf2e9886"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673707","title":"Lynx Roundup, September 24th","slug":"lynx-roundup-september-24th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/94@2x.jpg","excerpt":"Useful Python tricks!  Turing Machines!  The first programming language!","custom_excerpt":"Useful Python tricks!  Turing Machines!  The first programming language!","created_at_pretty":"19 September, 2018","published_at_pretty":"24 September, 2018","updated_at_pretty":"22 October, 2018","created_at":"2018-09-18T23:58:50.000-04:00","published_at":"2018-09-24T07:00:00.000-04:00","updated_at":"2018-10-22T17:22:50.000-04:00","meta_title":"Lynx Roundup, September 24th | Hackers and Slackers","meta_description":"Useful Python tricks!  Turing Machines!  The first programming language!","og_description":"Useful Python tricks!  Turing Machines!  The first programming language!","og_image":"https://hackersandslackers.com/content/images/lynx/94@2x.jpg","og_title":"Lynx Roundup, September 24th","twitter_description":"Useful Python tricks!  Turing Machines!  The first programming language!","twitter_image":"https://hackersandslackers.com/content/images/lynx/94@2x.jpg","twitter_title":"Lynx Roundup, September 24th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.ostechnix.com/bat-a-cat-clone-with-syntax-highlighting-and-git-integration/\n\n\n\nhttps://github.com/maiavictor/abstract-calculus\n\n\n\nhttps://blogs.scientificamerican.com/observations/the-power-of-anomalies/\n\n\n\nhttps://medium.freecodecamp.org/an-a-z-of-useful-python-tricks-b467524ee747\n\n\n\nhttp://www.sfexaminer.com/category/the-city/sf-news-columns/nato-green/\n\n\n\nhttps://www.quora.com/If-a-programming-language-is-also-written-in-a-programming-language-how-was-the-first-programming-language-written\n\n\n\nhttps://www.quora.com/What-is-the-significance-of-the-Turing-Machine","html":"<p></p><p><a href=\"https://www.ostechnix.com/bat-a-cat-clone-with-syntax-highlighting-and-git-integration/\">https://www.ostechnix.com/bat-a-cat-clone-with-syntax-highlighting-and-git-integration/</a></p><p></p><p><a href=\"https://github.com/maiavictor/abstract-calculus\">https://github.com/maiavictor/abstract-calculus</a></p><p></p><p><a href=\"https://blogs.scientificamerican.com/observations/the-power-of-anomalies/\">https://blogs.scientificamerican.com/observations/the-power-of-anomalies/</a></p><p></p><p><a href=\"https://medium.freecodecamp.org/an-a-z-of-useful-python-tricks-b467524ee747\">https://medium.freecodecamp.org/an-a-z-of-useful-python-tricks-b467524ee747</a></p><p></p><p><a href=\"http://www.sfexaminer.com/category/the-city/sf-news-columns/nato-green/\">http://www.sfexaminer.com/category/the-city/sf-news-columns/nato-green/</a></p><p></p><p><a href=\"https://www.quora.com/If-a-programming-language-is-also-written-in-a-programming-language-how-was-the-first-programming-language-written\">https://www.quora.com/If-a-programming-language-is-also-written-in-a-programming-language-how-was-the-first-programming-language-written</a></p><p></p><p><a href=\"https://www.quora.com/What-is-the-significance-of-the-Turing-Machine\">https://www.quora.com/What-is-the-significance-of-the-Turing-Machine</a></p>","url":"https://hackersandslackers.com/lynx-roundup-september-24th/","uuid":"506d39e7-3238-46bf-95a9-db163ac91087","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5ba1c97ae172635d4ba51554"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673706","title":"Lynx Roundup, September 23rd","slug":"lynx-roundup-september-23rd","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/02/92-1@2x.jpg","excerpt":"Dealing with outliers in ML!  Training big Random Forests without big iron!  Nice maps of cloud layouts!","custom_excerpt":"Dealing with outliers in ML!  Training big Random Forests without big iron!  Nice maps of cloud layouts!","created_at_pretty":"19 September, 2018","published_at_pretty":"23 September, 2018","updated_at_pretty":"14 February, 2019","created_at":"2018-09-18T23:00:33.000-04:00","published_at":"2018-09-23T07:00:00.000-04:00","updated_at":"2019-02-14T05:06:17.000-05:00","meta_title":"Dealing with outliers in ML!  Training big Random Forests without big iron!  Nice maps of cloud layouts! | Hackers And Slackers","meta_description":"Dealing with outliers in ML!  Training big Random Forests without big iron!  Nice maps of cloud layouts!","og_description":"Dealing with outliers in ML!  Training big Random Forests without big iron!  Nice maps of cloud layouts!","og_image":"https://hackersandslackers.com/content/images/2019/02/92-1@2x.jpg","og_title":"Lynx Roundup, September 23rd","twitter_description":"Dealing with outliers in ML!  Training big Random Forests without big iron!  Nice maps of cloud layouts!","twitter_image":"https://hackersandslackers.com/content/images/2019/02/92-1@2x.jpg","twitter_title":"Lynx Roundup, September 23rd","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"Training Big Random Forests with Little Resources\n[https://arxiv.org/pdf/1802.06394.pdf]\n\n\n\n\n\nhttps://arcentry.com/blog/announcing-the-arcentry-api/\n\n\n\n\n\nhttps://tech.gadventures.com/modern-functions-in-python-3-80208c44ce47\n\n\n\n\n\nhttps://medium.freecodecamp.org/how-to-set-up-pyspark-for-your-jupyter-notebook-7399dd3cb389\n\n\n\n\n\npic.twitter.com/7Fhru5HbQb [https://t.co/7Fhru5HbQb]\n\n— kitties mp4 (@kittiesmp4) August 28, 2018\n[https://twitter.com/kittiesmp4/status/1034243523892191234?ref_src=twsrc%5Etfw]\n\n\n\nhttps://medium.com/open-graphql/create-a-multiuser-graphql-crud-l-app-in-10-minutes-with-the-new-aws-amplify-cli-and-in-a-few-73aef3d49545\n\n\n\n\n\nhttps://www.kdnuggets.com/2018/08/make-machine-learning-models-robust-outliers.html","html":"<p></p><p><a href=\"https://arxiv.org/pdf/1802.06394.pdf\">Training Big Random Forests with Little Resources</a></p><p></p><p></p><p><a href=\"https://arcentry.com/blog/announcing-the-arcentry-api/\">https://arcentry.com/blog/announcing-the-arcentry-api/</a></p><p></p><p></p><p><a href=\"https://tech.gadventures.com/modern-functions-in-python-3-80208c44ce47\">https://tech.gadventures.com/modern-functions-in-python-3-80208c44ce47</a></p><p></p><p></p><p><a href=\"https://medium.freecodecamp.org/how-to-set-up-pyspark-for-your-jupyter-notebook-7399dd3cb389\">https://medium.freecodecamp.org/how-to-set-up-pyspark-for-your-jupyter-notebook-7399dd3cb389</a></p><p></p><p></p><figure class=\"kg-card kg-embed-card\"><blockquote class=\"twitter-tweet\"><p lang=\"und\" dir=\"ltr\"><a href=\"https://t.co/7Fhru5HbQb\">pic.twitter.com/7Fhru5HbQb</a></p>&mdash; kitties mp4 (@kittiesmp4) <a href=\"https://twitter.com/kittiesmp4/status/1034243523892191234?ref_src=twsrc%5Etfw\">August 28, 2018</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</figure><p></p><p></p><p><a href=\"https://medium.com/open-graphql/create-a-multiuser-graphql-crud-l-app-in-10-minutes-with-the-new-aws-amplify-cli-and-in-a-few-73aef3d49545\">https://medium.com/open-graphql/create-a-multiuser-graphql-crud-l-app-in-10-minutes-with-the-new-aws-amplify-cli-and-in-a-few-73aef3d49545</a></p><p></p><p></p><p><a href=\"https://www.kdnuggets.com/2018/08/make-machine-learning-models-robust-outliers.html\">https://www.kdnuggets.com/2018/08/make-machine-learning-models-robust-outliers.html</a></p>","url":"https://hackersandslackers.com/lynx-roundup-september-23rd/","uuid":"af27d85d-2141-4470-aa31-3c9140898a69","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5ba1bbd1e172635d4ba51551"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673705","title":"Lynx Roundup, September 22nd","slug":"lynx-roundup-september-22nd","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/84@2x.jpg","excerpt":"Feature engineering!  Visualizing Random Forests!  How to add Machine Learning to your project!","custom_excerpt":"Feature engineering!  Visualizing Random Forests!  How to add Machine Learning to your project!","created_at_pretty":"19 September, 2018","published_at_pretty":"22 September, 2018","updated_at_pretty":"17 October, 2018","created_at":"2018-09-18T22:57:15.000-04:00","published_at":"2018-09-22T07:00:00.000-04:00","updated_at":"2018-10-17T08:34:05.000-04:00","meta_title":"Lynx Roundup, September 22nd | Hackers and Slackers","meta_description":"Feature engineering!  Visualizing Random Forests!  How to add Machine Learning to your project!","og_description":"Feature engineering!  Visualizing Random Forests!  How to add Machine Learning to your project!","og_image":"https://hackersandslackers.com/content/images/lynx/84@2x.jpg","og_title":"Lynx Roundup, September 22nd","twitter_description":"Feature engineering!  Visualizing Random Forests!  How to add Machine Learning to your project!","twitter_image":"https://hackersandslackers.com/content/images/lynx/84@2x.jpg","twitter_title":"Lynx Roundup, September 22nd","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"Feature Engineering - Getting most out of data for predictive models - TDC 2017\n[https://www.slideshare.net/gabrielspmoreira/feature-engineering-getting-most-out-of-data-for-predictive-models-tdc-2017] \n from Gabriel Moreira [https://www.slideshare.net/gabrielspmoreira]  \n\n\n\nhttps://towardsdatascience.com/multi-class-text-classification-with-pyspark-7d78d022ed35\n\n\n\n\n\nhttps://github.com/kkyon/databot\n\n\n\nhttps://medium.com/the-lever/no-machine-learning-in-your-product-start-here-2df776d10a5c\n\n\n\n\n\nhttps://aysent.github.io/2015/11/08/random-forest-leaf-visualization.html\n\n\n\n\n\nhttps://thenewstack.io/redis-how-probabilistic-data-structures-support-state-of-the-art-apps/\n\n\n\n\n\nhttps://medium.com/@svarlamov/the-7-minute-programmer-workout-8f811fb90589","html":"<p></p><figure class=\"kg-card kg-embed-card\"><iframe src=\"https://www.slideshare.net/slideshow/embed_code/key/djpVSOEuCAFzhV\" width=\"427\" height=\"356\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen> </iframe> <div style=\"margin-bottom:5px\"> <strong> <a href=\"https://www.slideshare.net/gabrielspmoreira/feature-engineering-getting-most-out-of-data-for-predictive-models-tdc-2017\" title=\"Feature Engineering - Getting most out of data for predictive models - TDC 2017\" target=\"_blank\">Feature Engineering - Getting most out of data for predictive models - TDC 2017</a> </strong> from <strong><a href=\"https://www.slideshare.net/gabrielspmoreira\" target=\"_blank\">Gabriel Moreira</a></strong> </div>\n\n</figure><p></p><p></p><p><a href=\"https://towardsdatascience.com/multi-class-text-classification-with-pyspark-7d78d022ed35\">https://towardsdatascience.com/multi-class-text-classification-with-pyspark-7d78d022ed35</a></p><p></p><p></p><p><a href=\"https://github.com/kkyon/databot\">https://github.com/kkyon/databot</a></p><p></p><p><a href=\"https://medium.com/the-lever/no-machine-learning-in-your-product-start-here-2df776d10a5c\">https://medium.com/the-lever/no-machine-learning-in-your-product-start-here-2df776d10a5c</a></p><p></p><p></p><p><a href=\"https://aysent.github.io/2015/11/08/random-forest-leaf-visualization.html\">https://aysent.github.io/2015/11/08/random-forest-leaf-visualization.html</a></p><p></p><p></p><p><a href=\"https://thenewstack.io/redis-how-probabilistic-data-structures-support-state-of-the-art-apps/\">https://thenewstack.io/redis-how-probabilistic-data-structures-support-state-of-the-art-apps/</a></p><p></p><p></p><p><a href=\"https://medium.com/@svarlamov/the-7-minute-programmer-workout-8f811fb90589\">https://medium.com/@svarlamov/the-7-minute-programmer-workout-8f811fb90589</a></p>","url":"https://hackersandslackers.com/lynx-roundup-september-22nd/","uuid":"c6bbb47c-430e-497d-aaad-6a0c356edfc4","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5ba1bb0be172635d4ba5154e"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673704","title":"Lynx Roundup, September 21st","slug":"lynx-roundup-september-21st","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/02/88-1@2x.jpg","excerpt":"Google for colors!  Interview with a guy who's been making power electronics for 50 years!  Multi-class text classification!","custom_excerpt":"Google for colors!  Interview with a guy who's been making power electronics for 50 years!  Multi-class text classification!","created_at_pretty":"19 September, 2018","published_at_pretty":"21 September, 2018","updated_at_pretty":"14 February, 2019","created_at":"2018-09-18T22:53:16.000-04:00","published_at":"2018-09-21T07:00:00.000-04:00","updated_at":"2019-02-14T05:06:51.000-05:00","meta_title":"Lynx Roundup, September 21st | Hackers and Slackers","meta_description":"Google for colors!  Interview with a guy who's been making power electronics for 50 years!  Multi-class text classification!","og_description":"Google for colors!  Interview with a guy who's been making power electronics for 50 years!  Multi-class text classification!","og_image":"https://hackersandslackers.com/content/images/2019/02/88-1@2x.jpg","og_title":"Lynx Roundup, September 21st","twitter_description":"Google for colors!  Interview with a guy who's been making power electronics for 50 years!  Multi-class text classification!","twitter_image":"https://hackersandslackers.com/content/images/2019/02/88-1@2x.jpg","twitter_title":"Lynx Roundup, September 21st","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.oreilly.com/ideas/sea-change-what-happens-when-jupyter-becomes-pervasive-at-a-university\n\n\n\n\n\nhttps://picular.co/\n\n\n\n\n\nhttps://danielmullen.info/projects/\n\n\n\n\n\n“To get started, I suggest coming up with a simple but reasonable model for\nmissingness, then simulate fake complete data followed by a fake missingness\npattern, and check that you can recover your missing-data model and your\ncomplete data model in that fake-data situation. You can then proceed from\nthere. But if you can’t even do it with fake data, you’re sunk.”\n[https://andrewgelman.com/2018/08/27/get-started-suggest-coming-simple-reasonable-model-missingness-simulate-fake-complete-data-followed-fake-missingness-pattern-check-can-recover-mi/]\n\n\n\n\n\nhttps://medium.com/wintoncentre/bizarre-conclusions-from-alcohol-study-853ea236992e\n\n\n\n\n\nhttps://www.powerelectronics.com/industry/my-50-years-power-electronics\n\n\n\n\n\nhttps://www.kdnuggets.com/2018/08/multi-class-text-classification-scikit-learn.html","html":"<p></p><p><a href=\"https://www.oreilly.com/ideas/sea-change-what-happens-when-jupyter-becomes-pervasive-at-a-university\">https://www.oreilly.com/ideas/sea-change-what-happens-when-jupyter-becomes-pervasive-at-a-university</a></p><p></p><p></p><p><a href=\"https://picular.co/\">https://picular.co/</a></p><p></p><p></p><p><a href=\"https://danielmullen.info/projects/\">https://danielmullen.info/projects/</a></p><p></p><p></p><figure class=\"kg-card kg-embed-card\"><blockquote class=\"wp-embedded-content\"><a href=\"https://andrewgelman.com/2018/08/27/get-started-suggest-coming-simple-reasonable-model-missingness-simulate-fake-complete-data-followed-fake-missingness-pattern-check-can-recover-mi/\">&#8220;To get started, I suggest coming up with a simple but reasonable model for missingness, then simulate fake complete data followed by a fake missingness pattern, and check that you can recover your missing-data model and your complete data model in that fake-data situation.  You can then proceed from there.  But if you can&#8217;t even do it with fake data, you&#8217;re sunk.&#8221;</a></blockquote>\n<script type=\"text/javascript\">\n<!--//--><![CDATA[//><!--\n\t\t!function(a,b){\"use strict\";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf(\"MSIE 10\"),h=!!navigator.userAgent.match(/Trident.*rv:11\\./),i=b.querySelectorAll(\"iframe.wp-embedded-content\");for(c=0;c<i.length;c++){if(d=i[c],!d.getAttribute(\"data-secret\"))f=Math.random().toString(36).substr(2,10),d.src+=\"#?secret=\"+f,d.setAttribute(\"data-secret\",f);if(g||h)a=d.cloneNode(!0),a.removeAttribute(\"security\"),d.parentNode.replaceChild(a,d)}}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret=\"'+d.secret+'\"]'),k=b.querySelectorAll('blockquote[data-secret=\"'+d.secret+'\"]');for(e=0;e<k.length;e++)k[e].style.display=\"none\";for(e=0;e<j.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.removeAttribute(\"style\"),\"height\"===d.message){if(g=parseInt(d.value,10),g>1e3)g=1e3;else if(~~g<200)g=200;f.height=g}if(\"link\"===d.message)if(h=b.createElement(\"a\"),i=b.createElement(\"a\"),h.href=f.getAttribute(\"src\"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener(\"message\",a.wp.receiveEmbedMessage,!1),b.addEventListener(\"DOMContentLoaded\",c,!1),a.addEventListener(\"load\",c,!1)}(window,document);\n//--><!]]>\n</script><iframe sandbox=\"allow-scripts\" security=\"restricted\" src=\"https://andrewgelman.com/2018/08/27/get-started-suggest-coming-simple-reasonable-model-missingness-simulate-fake-complete-data-followed-fake-missingness-pattern-check-can-recover-mi/embed/\" width=\"600\" height=\"338\" title=\"&#8220;&#8220;To get started, I suggest coming up with a simple but reasonable model for missingness, then simulate fake complete data followed by a fake missingness pattern, and check that you can recover your missing-data model and your complete data model in that fake-data situation.  You can then proceed from there.  But if you can&#8217;t even do it with fake data, you&#8217;re sunk.&#8221;&#8221; &#8212; Statistical Modeling, Causal Inference, and Social Science\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" class=\"wp-embedded-content\"></iframe></figure><p></p><p></p><p></p><p><a href=\"https://medium.com/wintoncentre/bizarre-conclusions-from-alcohol-study-853ea236992e\">https://medium.com/wintoncentre/bizarre-conclusions-from-alcohol-study-853ea236992e</a></p><p></p><p></p><p><a href=\"https://www.powerelectronics.com/industry/my-50-years-power-electronics\">https://www.powerelectronics.com/industry/my-50-years-power-electronics</a></p><p></p><p></p><p><a href=\"https://www.kdnuggets.com/2018/08/multi-class-text-classification-scikit-learn.html\">https://www.kdnuggets.com/2018/08/multi-class-text-classification-scikit-learn.html</a></p>","url":"https://hackersandslackers.com/lynx-roundup-september-21st/","uuid":"f40f248e-d2b4-4901-b45f-8d89c8b6f151","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5ba1ba1ce172635d4ba5154b"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673703","title":"Lynx Roundup, September 20th","slug":"lynx-roundup-september-20th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/87@2x.jpg","excerpt":"Map projections!  Jupyter stuff!  A new kind of neuron!","custom_excerpt":"Map projections!  Jupyter stuff!  A new kind of neuron!","created_at_pretty":"19 September, 2018","published_at_pretty":"20 September, 2018","updated_at_pretty":"20 September, 2018","created_at":"2018-09-18T22:43:29.000-04:00","published_at":"2018-09-20T13:00:00.000-04:00","updated_at":"2018-09-20T13:00:00.000-04:00","meta_title":"Lynx Roundup, September 20th | Hackers and Slackers","meta_description":"Map projections!  Jupyter stuff!  A new kind of neuron!","og_description":"Map projections!  Jupyter stuff!  A new kind of neuron!","og_image":"https://hackersandslackers.com/content/images/lynx/87@2x.jpg","og_title":"Lynx Roundup, September 20th","twitter_description":"Map projections!  Jupyter stuff!  A new kind of neuron!","twitter_image":"https://hackersandslackers.com/content/images/lynx/87@2x.jpg","twitter_title":"Lynx Roundup, September 20th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"What is this weird Twitter army of Amazon drones cheerfully defending warehouse\nwork?\n[https://techcrunch.com/2018/08/23/what-is-this-weird-twitter-army-of-amazon-drones-cheerfully-defending-warehouse-work/]\n\n\n\nhttp://willcrichton.net/notes/lessons-from-jupytercon/\n\n\n\n\n\nEqual Earth map projection\n[https://www.johndcook.com/blog/2018/08/10/equal-earth-projection/]\n\n\n\nhttps://www.wired.com/story/meet-the-rosehip-cell-a-new-kind-of-neuron\n\n\n\n\n\nPareto’s 80-20 rule\n[https://www.johndcook.com/blog/2018/08/27/pareto-80-20-rule/]\n\nEarlier this week, I was at the Second Joint Congress on Evolutionary Biology\n[https://www.evolutionmontpellier2018.org/]  (Evol2018). It was overwhelming,\nbut very educational. \n\nMany of the talks were about very specific evolutionary mechanisms in very\nspecific model organisms. This diversity of questions and approaches to answers\nreminded me of the importance of bouquets of heuristic models in biology. But\nwhat made this particularly overwhelming for me as a non-biologist was the lack\nof unifying formal framework to make sense of what was happening. Without the\nencyclopedic knowledge of a good naturalist, I had a very difficult time linking\ntopics to each other. I was experiencing the pluralistic nature of biology. This\nwas stressed by Laura Nuño De La Rosa [https://lauranrg.wordpress.com/]‘s slide\nthat contrasts the pluralism of biology with the theory reduction of physics:\n\n  [https://egtheory.files.wordpress.com/2018/08/ndlr_slide.jpg]\n\nThat’s right, to highlight the pluralism, there were great talks from\nphilosophers of biology along side all the experimental and theoretical biology\nat Evol2018.\n\nAs I’ve discussed before, I think that theoretical computer science can provide\nthe unifying formal framework that biology needs\n[https://egtheory.wordpress.com/2013/09/09/cstheory-of-biology/]. In particular,\nthe cstheory approach to reductions is the more robust (compared to physics)\nnotion of ‘theory reduction’ that a pluralistic discipline like evolutionary\nbiology could benefit from. However, I still don’t have any idea of how such a\nformal framework would look in practice. Hence, throughout Evol2018 I needed\nrefuge from the overwhelming overstimulation of organisms and mechanisms that\nwere foreign to me. \n\nOne of the places I sought refuge was in talks on computational studies. There,\nI heard speakers emphasize several times that they weren’t “just simulating\nevolution” but that their programs were evolution (or evolving) in a computer.\nNot only were they looking at evolution in a computer, but this model organism\ngave them an advantage over other systems because of its transparency: they\ncould track every lineage, every offspring, every mutation, and every random\nevent. Plus, computation is cheaper and easier than culturing E.coli, brewing\nyeast, or raising fruit flies. And just like those model organisms,\ncomputational models could test evolutionary hypotheses and generate new ones.\n\nThis defensive emphasis surprised me. It suggested that these researchers have\noften been questioned on the usefulness of their simulations for the study of\nevolution. \n\nIn this post, I want to reflect on some reasons for such questioning. \n\n\n\nLet’s rewind to a time before computers. To a time before Darwin’s evolution by\nnatural selection. Just to stress that this debate could have been had (and to\nsome extent, has been had) before either computers or evolution. Let’s rewind to\nthe time of Thomas Hobbes. \n\nWhen Hobbes was writing, clocks and watches were some of the best examples of\ntechnology; and the hottest idea was the new science of mechanistic physics.\nExcept Hobbes wanted to write about politics — more than that, he wanted to\nwrite a science of politics. The problem was that by looking at the\ncommonwealth, he saw the importance of its form and the relative unimportance of\nits matter. If he was a pure Aristotelian, this would be no issue, but he\naccepted the new science’s eliminate of form as an explanatory tool. For the\nmechanistic physics, formal cause was not seen as an acceptable mode of\nexplanation. \n\nThis forced Hobbes to distinguish between two kinds of knowledge. First, there\nwas knowledge of things that we have made ourselves — for him, the central\nexamples of this were geometry and the state. Second, there was knowledge of\nthings that we did not make — i.e., the domain of mechanistic physics. In the\ncase of physics, we could not deconstruct the machine because different\nmechanisms can produce the same effect. Thus, if we tried to reason from effects\nto causes, we could only arrive at reasonable conjectures and hypotheses. But\nfor the state, we could  know the causes because we had constructed them\nourselves. With this move, Hobbes could avoid the problem of underdetermination.\n\nThis is also the move that a computational modeler employs. By explicitly\nspecifying all the rules that the digital organism follows, she is making its\nworld. Thus, she can then dismantle the machine and understand all of its parts\nand how they contribute to the effect of interest. Unlike Hobbes, she has the\nextra advantage of not having had the State build around her and being able to\ndismantle her simulation at will. Of course, in practice, just like Hobbes, most\ncomputer modelers usually don’t fully understand the code they’ve written.\nStill, this powerful determination is the computational modeler’s cake.\n\nUnfortunately, the modeler wants to eat her cake, too. By appealing to multiple\nrealizability, the modeler can claim that evolution does not need to be realized\nin DNA but can also be in silico. In other words, that evolution is\nunderdetermined. She will usually proceed further by saying that a big advantage\nof a computational model is that it can be run in conditions that aren’t easily\naccessible to wet-lab experiments. In other words, she wants to assume a set of\nrules — which are underdetermined by a set of intuitions of real experiments —\nand then extrapolate their effects to carry out unreal experiments.\n\nI think it is this tension between having your cake and eating it that causes\nthe criticisms of “just a simulation”. All the advantages of peering\nunder-the-hood come from determination, but all the applicability to\nnon-simulations comes from underdetermination. And since we don’t usually\ninherently care about in silico  organisms, we have to embrace the\nunderdeterminism for the sake of applicability. Once we do that, all the power\nof peering under-the-hood disappears: since the detailed mechanisms are just\nconjectural. This is made worse by the curse of computing\n[https://egtheory.wordpress.com/2013/05/14/curse-of-computing/]  in big\nsimulations, where the modeler doesn’t actually understand all the details of\nthe mechanism they implemented — for example, when the organisms are arbitrary\nprograms in some simple specification language.\n\nSome of this critique can be avoided by replacing in silico  with in logico. And\nI think computational modelers often offer this defence, too. For this, let’s\nturn again to Hobbes. \n\nAfter sidestepping the problem of underdetermination, Hobbes could imagine the\nState as a giant watch or more general automaton. But he did not see the gears\nof that watch as the humans that make up society. Instead he compares artificial\nconstructs like “wealth of the population” to strength of the automaton,\ncounselors to memory, and reward/punishment to nerves. In this way, he was not\nimplementing the State through physical processes (which would then make its\nstudy the extension of physical mechanics) but through conceptual human-made\nprocesses.\n\nWe can do a similar move with simulations. We can recognize that the physical\nworld is separate from our descriptions of it. And that evolution is our way of\nmaking sense of the order and diversity in the physical world. As such,\nevolution is a concept which we can implement with other concepts. A computer\nsimulation is then just the physical model of those concepts. Much like a clock\nwas — for a long time — often used as a physical model of our astronomical\nhypotheses. This is the same sort of separation of theory and reality that I\ntried to do with Post’s variant of the Church-Turing thesis\n[https://egtheory.wordpress.com/2014/09/11/transcendental-idealism-and-posts-variant-of-the-church-turing-thesis/]\n. And this provide a way to interpret evolutionary simulations as \nimplementations of theory\n[https://egtheory.wordpress.com/2018/07/14/heuristics-and-abstraction/].\n\nI think that modelers make the above argument when they point out that what\nmatters is not the DNA/RNA/squishy-stuff of biology, but some set of logical\nprocess-based rules that defines the applicability of evolution. However, I\nthink that when we make this argument, we have to be mindful of the\nunderdetermination of our theory. In particular, that our goal is to improve how\nthe theory is determined. In practice, I think that this can only be done if we\nprovide an opportunity to directly link to systems of interest. We want our\nprocesses to have operationalizations that apply both in our computational model\nand other model organisms or natural organisms. For me, this can mean giving up\nsome of the peaking under the hood in favor of an effective theory rather than\na\nreductive one\n[https://egtheory.wordpress.com/2018/07/17/jms-reductive-vs-effective/].\n\nOf course, the above considerations are not limited to computer models. Model\norganisms in conditions designed for the purpose of a particular experiment are\nboth conceptual and physical systems. And although computer models are also both\nconceptual and physical systems, these two aspects of them are usually easier to\ndisentangle than for model organisms. This means that the above considerations\ncould be repeated for experimental systems, but more care would be required.\n\n\n\n\n\nhttps://www.oreilly.com/ideas/jupyter-notebooks-and-the-intersection-of-data-science-and-data-engineering","html":"<p></p><figure class=\"kg-card kg-embed-card\"><blockquote class=\"wp-embedded-content\"><a href=\"https://techcrunch.com/2018/08/23/what-is-this-weird-twitter-army-of-amazon-drones-cheerfully-defending-warehouse-work/\">What is this weird Twitter army of Amazon drones cheerfully defending warehouse work?</a></blockquote>\n<script type=\"text/javascript\">\n<!--//--><![CDATA[//><!--\n\t\t!function(a,b){\"use strict\";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf(\"MSIE 10\"),h=!!navigator.userAgent.match(/Trident.*rv:11\\./),i=b.querySelectorAll(\"iframe.wp-embedded-content\");for(c=0;c<i.length;c++){if(d=i[c],!d.getAttribute(\"data-secret\"))f=Math.random().toString(36).substr(2,10),d.src+=\"#?secret=\"+f,d.setAttribute(\"data-secret\",f);if(g||h)a=d.cloneNode(!0),a.removeAttribute(\"security\"),d.parentNode.replaceChild(a,d)}}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret=\"'+d.secret+'\"]'),k=b.querySelectorAll('blockquote[data-secret=\"'+d.secret+'\"]');for(e=0;e<k.length;e++)k[e].style.display=\"none\";for(e=0;e<j.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.removeAttribute(\"style\"),\"height\"===d.message){if(g=parseInt(d.value,10),g>1e3)g=1e3;else if(~~g<200)g=200;f.height=g}if(\"link\"===d.message)if(h=b.createElement(\"a\"),i=b.createElement(\"a\"),h.href=f.getAttribute(\"src\"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener(\"message\",a.wp.receiveEmbedMessage,!1),b.addEventListener(\"DOMContentLoaded\",c,!1),a.addEventListener(\"load\",c,!1)}(window,document);\n//--><!]]>\n</script><iframe sandbox=\"allow-scripts\" security=\"restricted\" src=\"https://techcrunch.com/2018/08/23/what-is-this-weird-twitter-army-of-amazon-drones-cheerfully-defending-warehouse-work/embed/\" width=\"600\" height=\"338\" title=\"&#8220;What is this weird Twitter army of Amazon drones cheerfully defending warehouse work?&#8221; &#8212; TechCrunch\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" class=\"wp-embedded-content\"></iframe></figure><p></p><p></p><p><a href=\"http://willcrichton.net/notes/lessons-from-jupytercon/\">http://willcrichton.net/notes/lessons-from-jupytercon/</a></p><p></p><p></p><figure class=\"kg-card kg-embed-card\"><blockquote class=\"wp-embedded-content\"><a href=\"https://www.johndcook.com/blog/2018/08/10/equal-earth-projection/\">Equal Earth map projection</a></blockquote>\n<script type=\"text/javascript\">\n<!--//--><![CDATA[//><!--\n\t\t!function(a,b){\"use strict\";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf(\"MSIE 10\"),h=!!navigator.userAgent.match(/Trident.*rv:11\\./),i=b.querySelectorAll(\"iframe.wp-embedded-content\");for(c=0;c<i.length;c++){if(d=i[c],!d.getAttribute(\"data-secret\"))f=Math.random().toString(36).substr(2,10),d.src+=\"#?secret=\"+f,d.setAttribute(\"data-secret\",f);if(g||h)a=d.cloneNode(!0),a.removeAttribute(\"security\"),d.parentNode.replaceChild(a,d)}}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret=\"'+d.secret+'\"]'),k=b.querySelectorAll('blockquote[data-secret=\"'+d.secret+'\"]');for(e=0;e<k.length;e++)k[e].style.display=\"none\";for(e=0;e<j.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.removeAttribute(\"style\"),\"height\"===d.message){if(g=parseInt(d.value,10),g>1e3)g=1e3;else if(~~g<200)g=200;f.height=g}if(\"link\"===d.message)if(h=b.createElement(\"a\"),i=b.createElement(\"a\"),h.href=f.getAttribute(\"src\"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener(\"message\",a.wp.receiveEmbedMessage,!1),b.addEventListener(\"DOMContentLoaded\",c,!1),a.addEventListener(\"load\",c,!1)}(window,document);\n//--><!]]>\n</script><iframe sandbox=\"allow-scripts\" security=\"restricted\" src=\"https://www.johndcook.com/blog/2018/08/10/equal-earth-projection/embed/\" width=\"600\" height=\"338\" title=\"&#8220;Equal Earth map projection&#8221; &#8212; John D. Cook\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" class=\"wp-embedded-content\"></iframe></figure><p></p><p></p><p><a href=\"https://www.wired.com/story/meet-the-rosehip-cell-a-new-kind-of-neuron\">https://www.wired.com/story/meet-the-rosehip-cell-a-new-kind-of-neuron</a></p><p></p><p></p><figure class=\"kg-card kg-embed-card\"><blockquote class=\"wp-embedded-content\"><a href=\"https://www.johndcook.com/blog/2018/08/27/pareto-80-20-rule/\">Pareto&#8217;s 80-20 rule</a></blockquote>\n<script type=\"text/javascript\">\n<!--//--><![CDATA[//><!--\n\t\t!function(a,b){\"use strict\";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf(\"MSIE 10\"),h=!!navigator.userAgent.match(/Trident.*rv:11\\./),i=b.querySelectorAll(\"iframe.wp-embedded-content\");for(c=0;c<i.length;c++){if(d=i[c],!d.getAttribute(\"data-secret\"))f=Math.random().toString(36).substr(2,10),d.src+=\"#?secret=\"+f,d.setAttribute(\"data-secret\",f);if(g||h)a=d.cloneNode(!0),a.removeAttribute(\"security\"),d.parentNode.replaceChild(a,d)}}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret=\"'+d.secret+'\"]'),k=b.querySelectorAll('blockquote[data-secret=\"'+d.secret+'\"]');for(e=0;e<k.length;e++)k[e].style.display=\"none\";for(e=0;e<j.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.removeAttribute(\"style\"),\"height\"===d.message){if(g=parseInt(d.value,10),g>1e3)g=1e3;else if(~~g<200)g=200;f.height=g}if(\"link\"===d.message)if(h=b.createElement(\"a\"),i=b.createElement(\"a\"),h.href=f.getAttribute(\"src\"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener(\"message\",a.wp.receiveEmbedMessage,!1),b.addEventListener(\"DOMContentLoaded\",c,!1),a.addEventListener(\"load\",c,!1)}(window,document);\n//--><!]]>\n</script><iframe sandbox=\"allow-scripts\" security=\"restricted\" src=\"https://www.johndcook.com/blog/2018/08/27/pareto-80-20-rule/embed/\" width=\"600\" height=\"338\" title=\"&#8220;Pareto&#8217;s 80-20 rule&#8221; &#8212; John D. Cook\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" class=\"wp-embedded-content\"></iframe></figure><p></p><figure class=\"kg-card kg-embed-card\"><p>Earlier this week, I was at the <a href=\"https://www.evolutionmontpellier2018.org/\">Second Joint Congress on Evolutionary Biology</a> (Evol2018). It was overwhelming, but very educational. </p>\n<p>Many of the talks were about very specific evolutionary mechanisms in very specific model organisms. This diversity of questions and approaches to answers reminded me of the importance of bouquets of heuristic models in biology. But what made this particularly overwhelming for me as a non-biologist was the lack of unifying formal framework to make sense of what was happening. Without the encyclopedic knowledge of a good naturalist, I had a very difficult time linking topics to each other. I was experiencing the pluralistic nature of biology. This was stressed by <a href=\"https://lauranrg.wordpress.com/\">Laura Nuño De La Rosa</a>&#8216;s slide that contrasts the pluralism of biology with the theory reduction of physics:</p>\n<p><a href=\"https://egtheory.files.wordpress.com/2018/08/ndlr_slide.jpg\"><img data-attachment-id=\"13821\" data-permalink=\"https://egtheory.wordpress.com/2018/08/25/hobbes-on-simulations/ndlr_slide/\" data-orig-file=\"https://egtheory.files.wordpress.com/2018/08/ndlr_slide.jpg\" data-orig-size=\"1486,1218\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;2.4&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;iPad&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;1534847086&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;4.28&quot;,&quot;iso&quot;:&quot;50&quot;,&quot;shutter_speed&quot;:&quot;0.033333333333333&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"NDLR_Slide\" data-image-description=\"\" data-medium-file=\"https://egtheory.files.wordpress.com/2018/08/ndlr_slide.jpg?w=300\" data-large-file=\"https://egtheory.files.wordpress.com/2018/08/ndlr_slide.jpg?w=1024\" src=\"https://egtheory.files.wordpress.com/2018/08/ndlr_slide.jpg?w=1024&#038;h=839\" alt=\"\" class=\"alignright size-large wp-image-13821\" srcset=\"https://egtheory.files.wordpress.com/2018/08/ndlr_slide.jpg?w=1024&amp;h=839 1024w, https://egtheory.files.wordpress.com/2018/08/ndlr_slide.jpg?w=150&amp;h=123 150w, https://egtheory.files.wordpress.com/2018/08/ndlr_slide.jpg?w=300&amp;h=246 300w, https://egtheory.files.wordpress.com/2018/08/ndlr_slide.jpg?w=768&amp;h=629 768w, https://egtheory.files.wordpress.com/2018/08/ndlr_slide.jpg 1486w\" sizes=\"(max-width: 1024px) 100vw, 1024px\"></a></p>\n<p>That&#8217;s right, to highlight the pluralism, there were great talks from philosophers of biology along side all the experimental and theoretical biology at Evol2018.</p>\n<p>As I&#8217;ve discussed before, I think that <a href=\"https://egtheory.wordpress.com/2013/09/09/cstheory-of-biology/\">theoretical computer science can provide the unifying formal framework that biology needs</a>. In particular, the cstheory approach to reductions is the more robust (compared to physics) notion of &#8216;theory reduction&#8217; that a pluralistic discipline like evolutionary biology could benefit from. However, I still don&#8217;t have any idea of how such a formal framework would look in practice. Hence, throughout Evol2018 I needed refuge from the overwhelming overstimulation of organisms and mechanisms that were foreign to me. </p>\n<p>One of the places I sought refuge was in talks on computational studies. There, I heard speakers emphasize several times that they weren&#8217;t &#8220;just simulating evolution&#8221; but that their programs were evolution (or evolving) in a computer. Not only were they looking at evolution in a computer, but this model organism gave them an advantage over other systems because of its transparency: they could track every lineage, every offspring, every mutation, and every random event. Plus, computation is cheaper and easier than culturing E.coli, brewing yeast, or raising fruit flies. And just like those model organisms, computational models could test evolutionary hypotheses and generate new ones.</p>\n<p>This defensive emphasis surprised me. It suggested that these researchers have often been questioned on the usefulness of their simulations for the study of evolution. </p>\n<p>In this post, I want to reflect on some reasons for such questioning. </p>\n<p><!--more--></p>\n<p>Let&#8217;s rewind to a time before computers. To a time before Darwin&#8217;s evolution by natural selection. Just to stress that this debate could have been had (and to some extent, has been had) before either computers or evolution. Let&#8217;s rewind to the time of Thomas Hobbes. </p>\n<p>When Hobbes was writing, clocks and watches were some of the best examples of technology; and the hottest idea was the new science of mechanistic physics. Except Hobbes wanted to write about politics &#8212; more than that, he wanted to write a science of politics. The problem was that by looking at the commonwealth, he saw the importance of its form and the  relative unimportance of its matter. If he was a pure Aristotelian, this would be no issue, but he accepted the new science&#8217;s eliminate of form as an explanatory tool. For the mechanistic physics, formal cause was not seen as an acceptable mode of explanation. </p>\n<p>This forced Hobbes to distinguish between two kinds of knowledge. First, there was knowledge of things that we have made ourselves &#8212; for him, the central examples of this were geometry and the state. Second, there was knowledge of things that we did not make &#8212; i.e., the domain of mechanistic physics. In the case of physics, we could not deconstruct the machine because different mechanisms can produce the same effect. Thus, if we tried to reason from effects to causes, we could only arrive at reasonable conjectures and hypotheses. But for the state, we <i>could</i> know the causes because we had constructed them ourselves. With this move, Hobbes could avoid the problem of underdetermination.</p>\n<p>This is also the move that a computational modeler employs. By explicitly specifying all the rules that the digital organism follows, she is making its world. Thus, she can then dismantle the machine and understand all of its parts and how they contribute to the effect of interest. Unlike Hobbes, she has the extra advantage of not having had the State build around her and being able to dismantle her simulation at will. Of course, in practice, just like Hobbes, most computer modelers usually don&#8217;t fully understand the code they&#8217;ve written. Still, this powerful determination is the computational modeler&#8217;s cake.</p>\n<p>Unfortunately, the modeler wants to eat her cake, too. By appealing to multiple realizability, the modeler can claim that evolution does not need to be realized in DNA but can also be <i>in silico</i>. In other words, that evolution is underdetermined. She will usually proceed further by saying that a big advantage of a computational model is that it can be run in conditions that aren&#8217;t easily accessible to wet-lab experiments. In other words, she wants to assume a set of rules &#8212; which are underdetermined by a set of intuitions of real experiments &#8212; and then extrapolate their effects to carry out unreal experiments.</p>\n<p>I think it is this tension between having your cake and eating it that causes the criticisms of &#8220;just a simulation&#8221;. All the advantages of peering under-the-hood come from determination, but all the applicability to non-simulations comes from underdetermination. And since we don&#8217;t usually inherently care about <i>in silico</i> organisms, we have to embrace the underdeterminism for the sake of applicability. Once we do that, all the power of peering under-the-hood disappears: since the detailed mechanisms are just conjectural. This is made worse by the <a href=\"https://egtheory.wordpress.com/2013/05/14/curse-of-computing/\">curse of computing</a> in big simulations, where the modeler doesn&#8217;t actually understand all the details of the mechanism they implemented &#8212; for example, when the organisms are arbitrary programs in some simple specification language.</p>\n<p>Some of this critique can be avoided by replacing <i>in silico</i> with <i>in logico</i>. And I think computational modelers often offer this defence, too. For this, let&#8217;s turn again to Hobbes. </p>\n<p>After sidestepping the problem of underdetermination, Hobbes could imagine the State as a giant watch or more general automaton. But he did not see the gears of that watch as the humans that make up society. Instead he compares artificial constructs like &#8220;wealth of the population&#8221; to strength of the automaton, counselors to memory, and reward/punishment to nerves. In this way, he was not implementing the State through physical processes (which would then make its study the extension of physical mechanics) but through conceptual human-made processes.</p>\n<p>We can do a similar move with simulations. We can recognize that the physical world is separate from our descriptions of it. And that evolution is our way of making sense of the order and diversity in the physical world. As such, evolution is a concept which we can implement with other concepts. A computer simulation is then just the physical model of those concepts. Much like a clock was &#8212; for a long time &#8212; often used as a physical model of our astronomical hypotheses. This is the same sort of separation of theory and reality that I tried to do with <a href=\"https://egtheory.wordpress.com/2014/09/11/transcendental-idealism-and-posts-variant-of-the-church-turing-thesis/\">Post&#8217;s variant of the Church-Turing thesis</a>. And this provide a way to interpret evolutionary simulations as <a href=\"https://egtheory.wordpress.com/2018/07/14/heuristics-and-abstraction/\">implementations of theory</a>.</p>\n<p>I think that modelers make the above argument when they point out that what matters is not the DNA/RNA/squishy-stuff of biology, but some set of logical process-based rules that defines the applicability of evolution. However, I think that when we make this argument, we have to be mindful of the underdetermination of our theory. In particular, that our goal is to improve how the theory is determined. In practice, I think that this can only be done if we provide an opportunity to directly link to systems of interest. We want our processes to have operationalizations that apply both in our computational model and other model organisms or natural organisms. For me, this can mean giving up some of the peaking under the hood in favor of <a href=\"https://egtheory.wordpress.com/2018/07/17/jms-reductive-vs-effective/\">an effective theory rather than a reductive one</a>.</p>\n<p>Of course, the above considerations are not limited to computer models. Model organisms in conditions designed for the purpose of a particular experiment are both conceptual and physical systems. And although computer models are also both conceptual and physical systems, these two aspects of them are usually easier to disentangle than for model organisms. This means that the above considerations could be repeated for experimental systems, but more care would be required.</p>\n</figure><p></p><p></p><p><a href=\"https://www.oreilly.com/ideas/jupyter-notebooks-and-the-intersection-of-data-science-and-data-engineering\">https://www.oreilly.com/ideas/jupyter-notebooks-and-the-intersection-of-data-science-and-data-engineering</a></p>","url":"https://hackersandslackers.com/lynx-roundup-september-20th/","uuid":"9c5d96fa-9ba5-4f91-a03e-45e8d37bf6f2","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5ba1b7d178afd65c7f626dd0"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673701","title":"Flask Routing & Sessions: A Subtle Symphony","slug":"the-art-of-building-flask-routes","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/09/flaskroutes@2x.jpg","excerpt":"With great flexibility comes great responsibility .","custom_excerpt":"With great flexibility comes great responsibility .","created_at_pretty":"17 September, 2018","published_at_pretty":"19 September, 2018","updated_at_pretty":"17 November, 2018","created_at":"2018-09-17T05:05:03.000-04:00","published_at":"2018-09-19T08:58:00.000-04:00","updated_at":"2018-11-16T20:57:42.000-05:00","meta_title":"Flask Routing & Sessions: A Subtle Symphony | Hackers and Slackers","meta_description":"There's nothing wrong with being a worker drone repeating worthless projects and contributing nothing to humanity. I'd personally prefer using Flask.","og_description":"There's nothing wrong with being a worker drone repeating worthless projects and contributing nothing to humanity. I'd personally prefer using Flask.","og_image":"https://hackersandslackers.com/content/images/2018/09/flaskroutes@2x.jpg","og_title":"Flask Routing & Sessions: A Subtle Symphony | Hackers and Slackers","twitter_description":"There's nothing wrong with being a worker drone repeating worthless projects and contributing nothing to humanity. I'd personally prefer using Flask.","twitter_image":"https://hackersandslackers.com/content/images/2018/09/flaskroutes@2x.jpg","twitter_title":"Flask Routing & Sessions: A Subtle Symphony | Hackers and Slackers","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"},{"name":"#Building Flask Apps","slug":"building-flask-apps","description":"Python’s fast-growing and flexible microframework. Can handle apps as simple as API endpoints, to monoliths remininiscent of Django.","feature_image":"https://hackersandslackers.com/content/images/2019/03/flask-gettingstarted.jpg","meta_description":"Python’s fastest growing, most flexible, and perhaps most Pythonic framework.","meta_title":"Building Flask Apps","visibility":"internal"}],"plaintext":"It isn't often you find somebody sad or miserable enough to detail the inner\nworkings of web framework features, such as sessions or routing. This is\nunderstandably so; we use frameworks because presumably hate dealing with these\nthings from scratch. This is especially so when it comes to Flask, which only\nreleased version 1.0 a few months ago, introducing breaking changes rendering\nprevious documentation more-or-less worthless. \n\nGoogling some of Flask's critical features mostly returns one-liners from the\napp's authors (half of which are useless, as they are for older versions of\nFlask). Stack Overflow threads mostly sit in silence, and even Kite\n[https://kite.com/], AKA \"The smart copilot for programmers\" returns blank pages\nof documentation, akin to the blank stare of a clueless Golden Retriever.\n\nIn retrospect, it was probably a poor choice for me to pick up 4 separate\nFlask-based projects during this time.\n\nWe're in a historic place in time where a team of developers put together\nsomething beautiful, yet somehow feels undersold. It seems as though the niche\nmarket of \"those who can't do, teach\" remains untapped for Flask, as the usual\nsuspects have yet to \"do\". This leaves newcomers like myself to hack away for\ntheir own survival in the meantime. I've only just turned that mental corner\nwhere Flask's quirks are as comforting as home-cooked meal, as opposed to\nfrustrating single-word methods containing 6 words of documentation on average.\n\nThe good news is I am still technically alive, after spending weeks building\nFlask applications mostly through trial and error. The bad news is that I've\nbecome Mr. Robot  in the process. That said, if there will ever be an ideal\nmoment in my life to write about Flask, now is the time. As reality slowly slips\naway in 1s and 0s, I may as well pass along  what I've learned.\n\nBroad Strokes\nIt only takes a couple minutes into explaining what Flask is when you realize\nthat Flask, at its core, is overwhelmingly just the “V” in “MVC”. Jinja handles\nthe templates, and something like SQLAlchemy will likely handle your models.\nFlask has an abundance of third-party libraries to handle business logic, but it\nis the core Flask package that we all agreed to gather around. This speaks\nvolumes about the quality of Flask’s simple yet powerful request handling.\n\nI'll  break down as many of Flask's out-of-the-box features, focusing on what\nmatters most (in my opinion). Take a look at some of the Flask libraries we'll\nbe playing around with:\n\n# app.py\nfrom flask import Flask, render_template, request, redirect, Session, g\nimport os\n\nConfiguring Our App\nAs always, we create our app with app = Flask(name). Equally uninteresting is\nour configuration setup, which we'll import via a class in config.py:\n\n# app.py\nfrom flask import Flask, render_template, request, redirect, Session, g\nimport config\nimport os\n\n# Our app\napp = Flask(__name__)\n\n# Load our config variables\napp.config.from_object('config.ProductionConfig')\n\nA number of things in our config are absolutely essential for sessions to work.\nBelow is an example config file:\n\n# config.py\nimport os\n\nclass ProductionConfig():\n    \"\"\"Set app config vars.\"\"\"\n    SECRET_KEY = os.urandom(24)\n    SESSION_TYPE = null\n    SESSION_COOKIE_NAME = 'session name'\n    SESSION_PERMANENT = True\n    PERMANENT_SESSION_LIFETIME = timedelta(days=31) (2678400 seconds)\n\nSECRET_KEY  is critical: this variable needs to exist in out config for sessions\nto function properly. The best way to handle is is by generating a key as seen\nabove.\n\nSESSION_TYPE  allows us to specify where our session data should be stored. This\nis set null by default, but Flask supports a number of options:\n\n * RedisSessionInterface:  Uses the Redis key-value store as a session backend. \n * MemcachedSessionInterface:  Uses the Memcached as a session backend. \n * FileSystemSessionInterface:  werkzeug.contrib.cache.FileSystemCache  as a\n   session backend.\n * MongoDBSessionInterface:  Uses MongoDB as a backend \n   [http://api.mongodb.org/python/current/index.html]via pymongo\n * SqlAlchemySessionInterface:  Uses SQLAlchemy, or rather Flask-SQLAlchemy\n   [https://pythonhosted.org/Flask-SQLAlchemy/]\n\nThere are plenty more variables you can set if you want to take a look here\n[http://flask.pocoo.org/docs/1.0/config/].\n\nSessions and Contexts\nUnlike cookie-based sessions, Flask sessions are handled and stored on the\nserver-side. A session object is simply a dict which is accessible throughout\nthe application a global level, referring to a single 'logged-in user'. As long\nas the session is active, any context of our app will be able to retrieve,\nmodify, or delete the values held in this session object,\n\n# Save a value to the user's session.\nsession['username'] = 'MyUsername' \n\n# IMPORTANT: \"True\" forces our changes to be recognized.\nsession.modified = True: \n\n# Retrieve session values at any time, anywhere \nsession.get('username') = True\n\nSeeing as how sessions are accessible globally, it is also important to note\nthat sessions can last a very long time; pretty much self explanatory given the \nSESSION_PERMANENT = True  configuration option.  It's a good idea to set a\nsession timeout period, or better yet, close them by the user's own request.\nClearing a session is as simple as resetting the session dictionary values back\nto None  by using the pop  method: session.pop('value', None).\n\nThe Application Context\nBesides undying global sessions,  Flask also provides us with a feature with an\nobject more suitable for storing and passing temporary values between app\ncontexts. This object known simply as g. While  technically an abbreviation for\n\"global\",g  is really just a convenient place to store temporarily store values\nwhich you can always depend on to be by your side.\n\n# app.py\nfrom Flask import g\n\nIt's important to note that values assigned to g  only exist within the context\nthey were created by default. For example, if we store information to the object\ndue to some user interaction on the dashboard, these values are lost once the\nuser moves to another part of our app. That said, values assigned to g  can\ntechnically be passed between contexts if we return g.value. This distinction\nbetween always-alive sessions  and every dying g  should be indicative of what\nreach respective object does.  Spoiler alert: sensitive (or contextually\nuseless) data should be stored temporarily with g, where values which will\ncontinuously be useful in determining the functionality of our should should\nreside in session.\n\nInterestingly enough, Flask has a decorator  specifically for terminating values\nsaved to g  in the case we'd want to ensure the swift and total annihilation of\nsuch data. For instance, if we were to assign a database connection to g  using\ng.db = connect_to_database(), we'd want to make sure that connection is closed\nas fast as possible before we forget:\n\n# app.py\ndef db_stuff():\n    g.db = database_connection()\n    g.db.somequeryorwhatever\n    return g.db\n\n@app.teardown_appcontext\ndef teardown_db():\n    db = g.pop('db', None)\n\nRoutes & Decorators\nWe're surely familiar with the concepts behind routing users to deserved views\nby now. Before we look at the juicy stuff, consider this boring route for a\nboring product, where the homepage is a dashboard:\n\n# app.py\n@app.route('/', methods=['GET', 'POST', 'OPTIONS'])\ndef dashboard():\n    \"\"\"Boring route.\"\"\"\n    return render_template('/dashboard.html')\n\nOh snap, our landing page is a /dashboard?  How will we know which user's\ndashboard to display when they visit the dashboard, or any other page for that\nmatter? If only there were a way to intercept every request a user makes to our\napp?\n\nFlask comes with a bunch of insanely useful decorators. Python decorators are\nfunctions which either 'wrap'  other functions in additional logic, or in our\ncase, intercept functions to do with them what we what. Flask has a vast\nplethora of logic decorators, ranging from detecting first-time visitors,\nhandling exceptions, executing logic before/after page loads, etc. Even the\nroute we set above is a decorator!\n\n@flask.before_request\nAdding before_request  to our app allows us to run logic prior to the\naforementioned request. With this power, we can do things like treat users\ndifferently (such as recognized or anonymous users), or just execute some sort\nof unique logic upon page load. \n\nIn this simple case, we check to see if a visitor has an active session every\ntime they hit a route. This way, if a user's session expired between before\nhitting a route in our app, we can prompt them to log in... or whatever. \n\nbefore_request doesn't accept any value parameters - the handler is mostly\nintended to perform tasks such as making a database query necessary for our app\nto run, or make sure users are still logged in.\n\n# app.py\n@app.before_request\ndef before_request():\n    \"\"\"Handle multiple users.\"\"\"\n    if 'username' in session:\n        return render_template('/dashboard.html')\n    else:\n        return render_template('/login.html')\n\n@flask.url_value_preprocessor\nUnlike before_request, url_value_preprocessor  does  accept incoming data. This\nallows us to handle data being posted to any part of our app before we even\nbother serving up views. Not only does this provide a convenient separation of\nconcerns, but also helps us avoid callback hell, which yes, can happen in Python\ntoo.\n\nLet's say we're accepting a POST request, where we create a view for our user's\npersonal details. When the user passes us their email address, we decide to\nretrieve the user's records by hitting an API, and passing the results to the\nview.\n\nWithout modularizing our code, we'd have to handle things like waiting on API\ncalls in the same functions as  our routes. Not only is this shitty repetitive\ncode, but running numerous API calls and rendering a view all at once is going\nto eventually break. Go ahead and ask the NodeJS guys. They'll know.\n\n# app.py\n@app.url_value_preprocessor\ndef url_value_preprocessor(endpoint, values):\n    \"\"\"Handle data sent to any route.\"\"\"\n       if request.args:\n           email = request.args.get('email')\n           r = requests.post(endpoint, headers=headers, data=email)\n           session['usermetadata'] = r\n           session.modified = True\n           return session\n\nYou're Only Getting Started\nWe've only covered small percentage of convenient tools Flask offers us. Go\nahead and see how many decorators [http://flask.pocoo.org/docs/1.0/api/]   you\ncan fuck with. Yeah dude, shit is legit - and we haven't even talked about the\nFlask-Login package yet.\n\nThe beauty of lightweight frameworks is that they focus on the problems that\ndrive us to web frameworks in the first place. Flask is clearly designed to\nhandle serving views, standing up APIs, and handling user management\neffectively. Contrast this with frameworks like Django, which forces rigid app\nsetup in what can commonly be an  hour-long setup or greater. I'll truthfully\nalways have a place in my heart for Django as the fathers of Python MVC: I would\ncan say with confidence that without the creation of Django (as well as the\nofficial $10 dollar intro book from Barnes and Noble) I never would have\ntransitioned from an obnoxious product manager  personality to the kind of guy\nwho owns multiple Python t-shirts. Hmm. Now that I think about it, maybe I\nshould've stayed an office tool as opposed to solving all these complex\nproblems. oh well.\n\nFlask is indicative of a new direction of framework design - or rather lack\nthereof. Programmers who know what they're doing  can express themselves outside\nof traditional boundaries set by other frameworks, surely designed to keep\nidiots from ruining everything. There's nothing wrong with being a worker drone\nrepeating the same worthless projects,  using same libraries, and essentially\ncontributing nothing to humanity. I'd personally prefer to take the freedom and\nspeed of Flask any day.","html":"<p>It isn't often you find somebody sad or miserable enough to detail the inner workings of web framework features, such as sessions or routing. This is understandably so; we use frameworks because presumably hate dealing with these things from scratch. This is especially so when it comes to Flask, which only released version 1.0 a few months ago, introducing breaking changes rendering previous documentation more-or-less worthless. </p><p>Googling some of Flask's critical features mostly returns one-liners from the app's authors (half of which are useless, as they are for older versions of Flask). Stack Overflow threads mostly sit in silence, and even <a href=\"https://kite.com/\">Kite</a>, AKA <em>\"The smart copilot for programmers\" </em>returns blank pages of documentation, akin to the blank stare of a clueless Golden Retriever.</p><p><strong><em>In retrospect, it was probably a poor choice for me to pick up 4 separate Flask-based projects during this time.</em></strong></p><p>We're in a historic place in time where a team of developers put together something beautiful, yet somehow feels undersold. It seems as though the niche market of \"those who can't do, teach\" remains untapped for Flask, as the usual suspects have yet to \"do\". This leaves newcomers like myself to hack away for their own survival in the meantime. I've only just turned that mental corner where Flask's quirks are as comforting as home-cooked meal, as opposed to frustrating single-word methods containing 6 words of documentation on average.</p><p>The good news is I am still technically alive, after spending weeks building Flask applications mostly through trial and error. The bad news is that I've become <em>Mr. Robot</em> in the process. That said, if there will ever be an ideal moment in my life to write about Flask, now is the time. As reality slowly slips away in 1s and 0s, I may as well pass along  what I've learned.</p><h2 id=\"broad-strokes\">Broad Strokes</h2><p>It only takes a couple minutes into explaining what Flask is when you realize that Flask, at its core, is overwhelmingly just the “V” in “MVC”. Jinja handles the templates, and something like SQLAlchemy will likely handle your models. Flask has an abundance of third-party libraries to handle business logic, but it is the core Flask package that we all agreed to gather around. This speaks volumes about the quality of Flask’s simple yet powerful request handling.</p><p>I'll  break down as many of Flask's out-of-the-box features, focusing on what matters most (in my opinion). Take a look at some of the Flask libraries we'll be playing around with:</p><pre><code># app.py\nfrom flask import Flask, render_template, request, redirect, Session, g\nimport os</code></pre><h2 id=\"configuring-our-app\">Configuring Our App</h2><p>As always, we create our app with <code>app = Flask(name)</code><em>. </em>Equally uninteresting is our configuration setup, which we'll import via a class in <code>config.py</code>:</p><pre><code># app.py\nfrom flask import Flask, render_template, request, redirect, Session, g\nimport config\nimport os\n\n# Our app\napp = Flask(__name__)\n\n# Load our config variables\napp.config.from_object('config.ProductionConfig')</code></pre><p>A number of things in our config are absolutely essential for sessions to work. Below is an example config file:</p><pre><code># config.py\nimport os\n\nclass ProductionConfig():\n    \"\"\"Set app config vars.\"\"\"\n    SECRET_KEY = os.urandom(24)\n    SESSION_TYPE = null\n    SESSION_COOKIE_NAME = 'session name'\n    SESSION_PERMANENT = True\n    PERMANENT_SESSION_LIFETIME = timedelta(days=31) (2678400 seconds)</code></pre><p><strong>SECRET_KEY</strong> is critical: this variable needs to exist in out config for sessions to function properly. The best way to handle is is by generating a key as seen above.</p><p><strong>SESSION_TYPE</strong> allows us to specify where our session data should be stored. This is set null by default, but Flask supports a number of options:</p><ul><li><a href=\"https://pythonhosted.org/Flask-Session/#flask.ext.session.RedisSessionInterface\">RedisSessionInterface</a>:<strong> </strong>Uses the Redis key-value store as a session backend. </li><li><a href=\"https://pythonhosted.org/Flask-Session/#flask.ext.session.MemcachedSessionInterface\">MemcachedSessionInterface</a>:<strong> </strong>Uses the Memcached as a session backend. </li><li><a href=\"https://pythonhosted.org/Flask-Session/#flask.ext.session.FileSystemSessionInterface\">FileSystemSessionInterface</a>:<strong> </strong><code>werkzeug.contrib.cache.FileSystemCache</code> as a session backend.</li><li><a href=\"https://pythonhosted.org/Flask-Session/#flask.ext.session.MongoDBSessionInterface\">MongoDBSessionInterface</a>:<strong> </strong>Uses MongoDB as a backend<a href=\"http://api.mongodb.org/python/current/index.html\"> </a>via <code>pymongo</code></li><li><a href=\"https://pythonhosted.org/Flask-Session/#flask.ext.session.SqlAlchemySessionInterface\">SqlAlchemySessionInterface</a>:<strong> </strong>Uses SQLAlchemy, or rather <a href=\"https://pythonhosted.org/Flask-SQLAlchemy/\">Flask-SQLAlchemy</a></li></ul><p>There are plenty more variables you can set if you want to take a look <a href=\"http://flask.pocoo.org/docs/1.0/config/\">here</a>.</p><h2 id=\"sessions-and-contexts\">Sessions and Contexts</h2><p>Unlike cookie-based sessions, Flask sessions are handled and stored on the server-side. A session object is simply a dict which is accessible throughout the application a global level, referring to a single 'logged-in user'. As long as the session is active, any context of our app will be able to retrieve, modify, or delete the values held in this session object,</p><pre><code># Save a value to the user's session.\nsession['username'] = 'MyUsername' \n\n# IMPORTANT: \"True\" forces our changes to be recognized.\nsession.modified = True: \n\n# Retrieve session values at any time, anywhere \nsession.get('username') = True</code></pre><p>Seeing as how sessions are accessible globally, it is also important to note that sessions can last a very long time; pretty much self explanatory given the <code>SESSION_PERMANENT = True</code> configuration option.  It's a good idea to set a session timeout period, or better yet, close them by the user's own request. Clearing a session is as simple as resetting the session dictionary values back to <em>None</em> by using the <strong>pop</strong> method: <code>session.pop('value', None)</code>.</p><h3 id=\"the-application-context\">The Application Context</h3><p>Besides undying global sessions,  Flask also provides us with a feature with an object more suitable for storing and passing temporary values between app contexts. This object known simply as <code>g</code>. While<strong> </strong>technically an abbreviation for \"global\",  <code>g</code> is really just a convenient place to store temporarily store values which you can always depend on to be by your side.</p><pre><code># app.py\nfrom Flask import g</code></pre><p>It's important to note that values assigned to <code>g</code> <em>only exist within the context they were created </em>by default. For example, if we store information to the object due to some user interaction on the dashboard, these values are lost once the user moves to another part of our app. That said, values assigned to <code>g</code> can technically be passed between contexts if we <code>return g.value</code>. This distinction between always-alive <em>sessions</em> and every dying <em>g</em> should be indicative of what reach respective object does.  Spoiler alert: sensitive (or contextually useless) data should be stored temporarily with <code>g</code>, where values which will continuously be useful in determining the functionality of our should should reside in <code>session</code><em>.</em></p><p>Interestingly enough, Flask has a <em>decorator</em> specifically for terminating values saved to <code>g</code> in the case we'd want to ensure the swift and total annihilation of such data. For instance, if we were to assign a database connection to <code>g</code> using  <code>g.db = connect_to_database()</code>, we'd want to make sure that connection is closed as fast as possible before we forget:</p><pre><code># app.py\ndef db_stuff():\n    g.db = database_connection()\n    g.db.somequeryorwhatever\n    return g.db\n\n@app.teardown_appcontext\ndef teardown_db():\n    db = g.pop('db', None)</code></pre><h2 id=\"routes-decorators\">Routes &amp; Decorators</h2><p>We're surely familiar with the concepts behind routing users to deserved views by now. Before we look at the juicy stuff, consider this boring route for a boring product, where the homepage is a dashboard:</p><pre><code># app.py\n@app.route('/', methods=['GET', 'POST', 'OPTIONS'])\ndef dashboard():\n    \"\"\"Boring route.\"\"\"\n    return render_template('/dashboard.html')</code></pre><p>Oh snap, our landing page is a /<em>dashboard?</em> How will we know which user's dashboard to display when they visit the dashboard, or any other page for that matter? If only there were a way to intercept every request a user makes to our app?</p><p>Flask comes with a bunch of insanely useful <strong><em>decorators</em></strong>. Python decorators are functions which either 'wrap'  other functions in additional logic, or in our case, intercept functions to do with them what we what. Flask has a vast plethora of logic decorators, ranging from detecting first-time visitors, handling exceptions, executing logic before/after page loads, etc. Even the route we set above is a decorator!</p><h3 id=\"-flask-before_request\">@flask.before_request</h3><p>Adding <strong>before_request</strong> to our app allows us to run logic prior to the aforementioned request. With this power, we can do things like treat users differently (such as recognized or anonymous users), or just execute some sort of unique logic upon page load. </p><p>In this simple case, we check to see if a visitor has an active session every time they hit a route. This way, if a user's session expired between before hitting a route in our app, we can prompt them to log in... or whatever. </p><p><strong>before_request </strong>doesn't accept any value parameters - the handler is mostly intended to perform tasks such as making a database query necessary for our app to run, or make sure users are still logged in.</p><pre><code># app.py\n@app.before_request\ndef before_request():\n    \"\"\"Handle multiple users.\"\"\"\n    if 'username' in session:\n        return render_template('/dashboard.html')\n    else:\n        return render_template('/login.html')</code></pre><h3 id=\"-flask-url_value_preprocessor\">@flask.url_value_preprocessor</h3><p>Unlike <em>before_request</em><strong>, url_value_preprocessor</strong> <em>does</em> accept incoming data. This allows us to handle data being posted to any part of our app before we even bother serving up views. Not only does this provide a convenient separation of concerns, but also helps us avoid <em>callback hell, </em>which yes, can happen in Python too.</p><p>Let's say we're accepting a POST request, where we create a view for our user's personal details. When the user passes us their email address, we decide to retrieve the user's records by hitting an API, and passing the results to the view.</p><p>Without modularizing our code, we'd have to handle things like waiting on API calls in the same functions as  our routes. Not only is this shitty repetitive code, but running numerous API calls and rendering a view all at once is going to eventually break. Go ahead and ask the NodeJS guys. They'll know.</p><pre><code># app.py\n@app.url_value_preprocessor\ndef url_value_preprocessor(endpoint, values):\n    \"\"\"Handle data sent to any route.\"\"\"\n       if request.args:\n           email = request.args.get('email')\n           r = requests.post(endpoint, headers=headers, data=email)\n           session['usermetadata'] = r\n           session.modified = True\n           return session</code></pre><h2 id=\"you-re-only-getting-started\">You're Only Getting Started</h2><p>We've only covered small percentage of convenient tools Flask offers us. Go ahead and see <a href=\"http://flask.pocoo.org/docs/1.0/api/\">how many decorators</a>  you can fuck with. Yeah dude, shit is legit - and we haven't even talked about the Flask-Login package yet.</p><p>The beauty of lightweight frameworks is that they focus on the problems that drive us to web frameworks in the first place. Flask is clearly designed to handle serving views, standing up APIs, and handling user management effectively. Contrast this with frameworks like <strong>Django</strong>, which forces rigid app setup in what can commonly be an  hour-long setup or greater. I'll truthfully always have a place in my heart for Django as the fathers of Python MVC: I would can say with confidence that without the creation of Django (as well as the official $10 dollar intro book from Barnes and Noble) I never would have transitioned from an obnoxious product manager  personality to the kind of guy who owns multiple Python t-shirts. Hmm. Now that I think about it, maybe I should've stayed an office tool as opposed to solving all these complex problems. oh well.</p><p>Flask is indicative of a new direction of framework design - or rather lack thereof. Programmers who <em>know what they're doing</em> can express themselves outside of traditional boundaries set by other frameworks, surely designed to keep idiots from ruining everything. There's nothing wrong with being a worker drone repeating the same worthless projects,  using same libraries, and essentially contributing nothing to humanity. I'd personally prefer to take the freedom and speed of Flask any day.</p><p></p>","url":"https://hackersandslackers.com/the-art-of-building-flask-routes/","uuid":"67a6407a-5804-4bd0-812d-219561e2488a","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b9f6e3ff79bcf0717187d8b"}}]}},"pageContext":{"pageNumber":15,"humanPageNumber":16,"skip":180,"limit":12,"numberOfPages":33,"previousPagePath":"/page/15","nextPagePath":"/page/17"}}