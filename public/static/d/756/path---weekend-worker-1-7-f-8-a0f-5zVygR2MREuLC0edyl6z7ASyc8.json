{"data":{"ghostPost":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673685","title":"Weekend Worker #1","slug":"weekend-worker-1","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/06/xodz@2x.jpg","excerpt":"Implementing an automatic backup system.","custom_excerpt":"Implementing an automatic backup system.","created_at_pretty":"24 June, 2018","published_at_pretty":"24 June, 2018","updated_at_pretty":"25 July, 2018","created_at":"2018-06-24T11:13:12.000-04:00","published_at":"2018-06-24T11:57:06.000-04:00","updated_at":"2018-07-24T22:06:03.000-04:00","meta_title":"Weekend Worker #1 | Hackers and Slackers","meta_description":"Implementing an automatic backup system","og_description":"Implementing an automatic backup system","og_image":"https://hackersandslackers.com/content/images/2018/06/xodz@2x.jpg","og_title":"Weekend Worker #1","twitter_description":"Implementing an automatic backup system","twitter_image":"https://hackersandslackers.com/content/images/2018/06/xodz@2x.jpg","twitter_title":"Weekend Worker #1","authors":[{"name":"Ryan Rosado","slug":"xodz","bio":"World renowned DJ who got his start from being famous on the internet. Averages 3 headshots per second in daily life and pays for all and essentials in bitcoin.","profile_image":"https://hackersandslackers.com/content/images/2019/03/ryan2.jpg","twitter":"@Zawdz","facebook":null,"website":"http://twitch.tv/xodz/videos/all"}],"primary_author":{"name":"Ryan Rosado","slug":"xodz","bio":"World renowned DJ who got his start from being famous on the internet. Averages 3 headshots per second in daily life and pays for all and essentials in bitcoin.","profile_image":"https://hackersandslackers.com/content/images/2019/03/ryan2.jpg","twitter":"@Zawdz","facebook":null,"website":"http://twitch.tv/xodz/videos/all"},"primary_tag":{"name":"DevOps","slug":"devops","description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","feature_image":null,"meta_description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","meta_title":"DevOps: Networking And Server Configuration | Hackers and Slackers","visibility":"public"},"tags":[{"name":"DevOps","slug":"devops","description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","feature_image":null,"meta_description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","meta_title":"DevOps: Networking And Server Configuration | Hackers and Slackers","visibility":"public"}],"plaintext":"Hello and Welcome, this is the first installment of \"Weekend Worker\" series.\n\nToday as a Weekend Worker i'll be implementing an automatic backup system to\nbackup each individual client website.\n\nWe'll be using the following technologies:\n\n * Linux cron job\n * Bash\n * Ansible\n * Docker\n * AWS ECS\n * VNC server\n\nAnd we'll setup our dev environment on our home Windows desktop with the\nfollowing tools:\n\n * Ansible for Windows (to launch dev tests)\n * Visual Studio Code (for editing and pushing updates)\n * Git (so our remote prod server can grab the code updates)\n * VNCviewer (to access prod remotely)\n * Bitbucket (for source control)\n\nPreparing the Env:\n\nDownload Visual Studio Code\nDownload Git Bash from git-scm\nUse terminal window within Visual Studio Code, travel to repository location and\ninitiate git & pull from master. (not within scope of this document)\nat same location, we need Ansible-playbook to work so we will get Ansible for\nWindows.\n\nOn second thought, we won't install Ansible for Windows. We will just run the\nAnsible-playbook on our remote system - after we push and pull the updates from\nsource control. We can use the --check flag or dev inventory for testing.\n\nStarting the Work:\nCurrently, my client's websites exist within a docker container per website.\n\nThe plan is to have a cron job to run an ansible-playbook which will create a\nDocker Image out of each customer's Docker Container. The Docker Image will be\npushed to AWS ECS Docker Registry regularly.\n\nWe will have a loop in our Ansible scripts so the backup is individually applied\nto each item (website) in our Inventory file.\n\nCron will run the bash script to initiate the ansible-playbook run.\n\nFirst we will follow this document to allow Ansible to prepare our connectivity\nand authenticate with AWS ECS\nhttps://dedisource.com/docs/display/Public/Ansible+amazon-ecr-credential-helper+module\n\nThen, we will need to convert these steps to Ansible script actions using the\nAnsible Command module\nhttps://dedisource.com/docs/display/Public/Backup+container+to+registry\n\nLastly, when we have the Ansible Scripts working to Enable Connection to ECS\n[https://dedisource.com/docs/display/Public/Enable+Connection+to+AWS+ECS], \nPackage Docker Container to Image\n[https://dedisource.com/docs/display/Public/Package+Docker+Container+to+Image],\nTag Image and Push to AWS ECS registry\n[https://dedisource.com/docs/display/Public/Tag+Image+and+Push+to+AWS+ECS+registry]\n\nWe will Set Cron Job for Shell Script\n[https://dedisource.com/docs/display/Public/Cron+Job+for+Shell+Script]  to run\nonce per day. We will have the Bash Shell Script to Launch Ansible Playbook\n[https://dedisource.com/docs/display/Public/Bash+Shell+Script+to+Launch+Ansible+Playbook]\n\nAnd that will about do it for us today.\n\nThanks","html":"<p>Hello and Welcome, this is the first installment of &quot;Weekend Worker&quot; series.</p>\n<p>Today as a Weekend Worker i'll be implementing an automatic backup system to backup each individual client website.</p>\n<p>We'll be using the following technologies:</p>\n<ul>\n<li>Linux cron job</li>\n<li>Bash</li>\n<li>Ansible</li>\n<li>Docker</li>\n<li>AWS ECS</li>\n<li>VNC server</li>\n</ul>\n<p>And we'll setup our dev environment on our home Windows desktop with the following tools:</p>\n<ul>\n<li>Ansible for Windows (to launch dev tests)</li>\n<li>Visual Studio Code (for editing and pushing updates)</li>\n<li>Git (so our remote prod server can grab the code updates)</li>\n<li>VNCviewer (to access prod remotely)</li>\n<li>Bitbucket (for source control)</li>\n</ul>\n<p>Preparing the Env:</p>\n<p>Download Visual Studio Code<br>\nDownload Git Bash from git-scm<br>\nUse terminal window within Visual Studio Code, travel to repository location and initiate git &amp; pull from master. (not within scope of this document)<br>\nat same location, we need Ansible-playbook to work so we will get Ansible for Windows.</p>\n<p>On second thought, we won't install Ansible for Windows. We will just run the Ansible-playbook on our remote system - after we push and pull the updates from source control. We can use the --check flag or dev inventory for testing.</p>\n<p>Starting the Work:<br>\nCurrently, my client's websites exist within a docker container per website.</p>\n<p>The plan is to have a cron job to run an ansible-playbook which will create a Docker Image out of each customer's Docker Container. The Docker Image will be pushed to AWS ECS Docker Registry regularly.</p>\n<p>We will have a loop in our Ansible scripts so the backup is individually applied to each item (website) in our Inventory file.</p>\n<p>Cron will run the bash script to initiate the ansible-playbook run.</p>\n<p>First we will follow this document to allow Ansible to prepare our connectivity and authenticate with AWS ECS<br>\n<a href=\"https://dedisource.com/docs/display/Public/Ansible+amazon-ecr-credential-helper+module\">https://dedisource.com/docs/display/Public/Ansible+amazon-ecr-credential-helper+module</a></p>\n<p>Then, we will need to convert these steps to Ansible script actions using the Ansible Command module<br>\n<a href=\"https://dedisource.com/docs/display/Public/Backup+container+to+registry\">https://dedisource.com/docs/display/Public/Backup+container+to+registry</a></p>\n<p>Lastly, when we have the Ansible Scripts working to <a href=\"https://dedisource.com/docs/display/Public/Enable+Connection+to+AWS+ECS\">Enable Connection to ECS</a>, <a href=\"https://dedisource.com/docs/display/Public/Package+Docker+Container+to+Image\">Package Docker Container to Image</a>,<br>\n<a href=\"https://dedisource.com/docs/display/Public/Tag+Image+and+Push+to+AWS+ECS+registry\">Tag Image and Push to AWS ECS registry</a></p>\n<p>We will <a href=\"https://dedisource.com/docs/display/Public/Cron+Job+for+Shell+Script\">Set Cron Job for Shell Script</a> to run once per day. We will have the <a href=\"https://dedisource.com/docs/display/Public/Bash+Shell+Script+to+Launch+Ansible+Playbook\">Bash Shell Script to Launch Ansible Playbook</a></p>\n<p>And that will about do it for us today.</p>\n<p>Thanks</p>\n","url":"https://hackersandslackers.com/weekend-worker-1/","uuid":"008bc16f-28fa-4825-bb9f-5d77a5be63df","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b2fb5085e55265a190ee2ae"}},"pageContext":{"slug":"weekend-worker-1"}}