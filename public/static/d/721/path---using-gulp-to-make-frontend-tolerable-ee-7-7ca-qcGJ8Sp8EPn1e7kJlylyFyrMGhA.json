{"data":{"ghostPost":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673660","title":"Using Gulp: Tasks to Make Frontend Tolerable","slug":"using-gulp-to-make-frontend-tolerable","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/gulp-1.jpg","excerpt":"Optimize your frontend code with Gulp: the task runner to make you production-ready.","custom_excerpt":"Optimize your frontend code with Gulp: the task runner to make you production-ready.","created_at_pretty":"30 May, 2018","published_at_pretty":"30 May, 2018","updated_at_pretty":"28 March, 2019","created_at":"2018-05-29T23:28:01.000-04:00","published_at":"2018-05-30T12:40:20.000-04:00","updated_at":"2019-03-28T05:58:57.000-04:00","meta_title":"Using Gulp to Make Frontend Tolerable | Hackers and Slackers","meta_description":"Automate tasks for production deployment such as compiling your CSS and JS","og_description":"Optimize your frontend code with Gulp: the task runner to make you production-ready.","og_image":"https://hackersandslackers.com/content/images/2019/03/gulp-1.jpg","og_title":"Using Gulp to Make Frontend Tolerable","twitter_description":"Automate the lame stuff","twitter_image":"https://hackersandslackers.com/content/images/2019/03/gulp-1.jpg","twitter_title":"Using Gulp to Make Frontend Tolerable","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},"tags":[{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},{"name":"ExpressJS","slug":"expressjs","description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch as a simplistic Express app can evolve into a beautiful monstrosity.","feature_image":null,"meta_description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch a simplistic Express app can evolve into a beautiful monstrosity.","meta_title":"ExpressJS Framework | Hackers and Slackers","visibility":"public"},{"name":"Frontend","slug":"frontend","description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","feature_image":null,"meta_description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","meta_title":"Frontend Development | Hackers and Slackers","visibility":"public"},{"name":"JavaScript","slug":"javascript","description":"JavaScript covering both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","feature_image":null,"meta_description":"JavaScript topics, both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","meta_title":"Javascript Tutorials | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"}],"plaintext":"NOTE:  This tutorial was written for Gulp versions <4.0.0. Check out this post\n[https://hackersandslackers.com/upgrading-to-gulp-4/]  for Gulp >4.0.0\n\n\n--------------------------------------------------------------------------------\n\nPerhaps the whole obligatory-Gulp-tutorial on [Some Coding Blog] thing has\nbecome a bit cliché at this point. Haters may do as they will, but I 'll take\nany opportunity to jam as many SEO keywords I can get at this point. You know\nthe ones: Gulp, ExpressJS, NodeJS, or perhaps even React Vue frontend Ubuntu\nframework API social cloud data entrepreneur community. \n\nRegardless, we all need our own copy+paste references from time-to-time, or even\nworse: when we copy/paste our gulpfile.js from project to project and forget\nwhat they actually do. I won't tell anybody.\n\nQuick 101\nNodeJS developers use Gulp to automate necessary processes before moving their\nfrontend code to production. This includes minifying files to make them run\nfaster, and to also make them unreadable to people who would otherwise make fun\nof your mediocre Javascript which you were forced to crank out on a short\ntimeline.\n\nGeneral Workflow\nLet's say you're running a basic Express app. As opposed to developing and\nstoring files in a directory such as /public, Gulp enables us to develop in one\ndirectory, and compile to another. That means we can keep our horrible\nuncompressed and uncompiled  source in a folder such as /src, and output them to\na directory such as /dist, which would be our public-facing output. An Express\nfile structure utilizing this would look something like this:\n\n  |- src/\n      |- js/ \n      |- scss/\n  |- dist/\n      |- js/ \n      |- css/\n      |- img/\n      |- fonts/\n  |- views\n      |- index.hbs\n  |- routes\n      |- index.js\n  |- gulpfile.js\n  |- node_modules/\n  |- package.json\n  |- app.js\n\n\nInstallation\nFirst install the gulp CLI:\n\nnpm install --global gulp-cli\n\n\nNext, enter your project folder and install gulp while saving it as  a project\ndependency.\n\nnpm install --save gulp\n\n\nHow it Works\nGulp doesn't do much on its own; the true magic lies within its vast library of\nplugins. Each individual plugin typically covers a simple task, such as\ncompiling LESS or SASS files, or minifying client-side JavaScript and CSS. The\nlimited scope of plugins entails a bit of setup in our gulpfile to chain said\ntasks together, but it also makes Gulp highly customizable to cater to your\nspecific needs.\n\nThe Gulpfile\nGulp works by invoking a file called gulpfile.js in your main directory, which\nyou'll need to create and set up yourself (sorry). The file is divided into two\nmain parts: requiring (importing) plugins, and defining which tasks to run when\ngulp is invoked. A basic worthless gulpfile might look something like:\n\nvar gulp = require('gulp');\n\ngulp.task('default', function () {\n  console.log('Sup World!');\n});\n\n\nTo make this file useful, we'll need to install more plugins and set up tasks\nfor them.\n\nEssential Plugins\nLet's look at what each one does. Keep in mind there are thousands of Gulp\nplugins, so let's just touch on the big hitters here.\n\nKeep in mind to install any of these plugins, you'll simply need to run the npm\ninstallation in your project directory:\n\nnpm install --save [plugin name]\n\n\ngulp-uglify\nMinifies Javascript or CSS files, and outputs the result into the directory of\nyour choice. This plugin can be reused across filetypes, as we'll demonstrate in\na moment.\n\ngulp-concat\nCombines minified files into a single file. This is essential for browser\nperformance as it reduces the number of http requests being made every time your\npage loads.\n\ngulp-rename\nRenames files (such as those produced by gulp-concat).\n\ngulp-sass / gulp-less\nCompiles your Sass or Less files into CSS and outputs to the directory of your\nchoice.\n\ngulp-minify-css\nMinifies CSS, as you might imagine. This can chained to gulp-sass or gulp-less\nto minify the CSS files those tasks produce.\n\ngulp-autoprefixer\nThank god for this. Autoprefixer finds CSS styles and adds the browser-specific\nequivalents to your CSS, so you don't need to write the same style 10 times for\nevery horrible browser in existence. This means you can write styles such as:\n\nbackground: linear-gradient(to bottom, white, black);\n\n\nAnd have them output as:\n\nbackground: -webkit-gradient(linear, left top, left bottom, from(white), to(black));\nbackground: -webkit-linear-gradient(top, white, black);\nbackground: -o-linear-gradient(top, white, black);\nbackground: linear-gradient(to bottom, white, black);\n\n\ngulp-watch\nAllows Gulp to listen for changes being made to source files, so that it may\nfire an event upon file change, such as:\n\ngulp-livereload\nCompiles the changes made in directories being watched via gulp-watch\nautomatically while you work.\n\nNext Level Pro Shit\nWhile these plugins aren't 'essential', they are really cool and helpful.\n\ngulp-sourcemaps\nAn obnoxious side effect of minifying and concating your files is when it comes\ntime to debug errors on the frontend. Errors occurring at \"line 235\" are pretty\nuseless considering your error codes are referring to the compiled files,\nwithout granting a hint as to where the problematic code may have come from in\nthe first place. gulp-sourcemaps resolves this by adding commenting paths to\nwhich source files your code originated from.\n\ngulp-browser-sync\nBy leveraging BrowserSync [https://browsersync.io/], this plugin immediately\nrefreshes an open browser which links to files just changed by gulp. This means\nyou can code, compile, and see the results in real time. This takes a bit extra\neffort to set up, so be sure to check their documentation\n[https://browsersync.io/docs].\n\ngulp-load-plugins\nNormally when creating our gulpfile, we need to start off by requiring our\nplugins via something like this:\n\nvar gulp = require('gulp'),\n    del = require('del'),\n    concat = require('gulp-concat'),\n    rename = require('gulp-rename'),\n    uglify = require('gulp-uglify'),\n    sass = require('gulp-sass'),\n    watch = require('gulp-watch'),\n    livereload = require('gulp-livereload'),\n    minifyCss = require('gulp-minify-css'),\n    autoprefixer = require('gulp-autoprefixer');\n\n\ngulp-load-plugins  instead checks your package.json for any Gulp plugins and\nimmediately requires them, thus saving you a few precious minutes. The output\ninstead looks like:\n\nvar $ = require('gulp-load-plugins')();\n\n\nBuilding The Gulpfile\nNow that we have all these dope plugins, we can finally build our gulpfile.\nHere's an example (without using gulp-load-plugins  for now):\n\nvar gulp = require('gulp'),\n    del = require('del'),\n    concat = require('gulp-concat'),\n    rename = require('gulp-rename'),\n    uglify = require('gulp-uglify'),\n    sass = require('gulp-sass'),\n    watch = require('gulp-watch'),\n    livereload = require('gulp-livereload'),\n    minifyCss = require('gulp-minify-css'),\n    autoprefixer = require('gulp-autoprefixer');\n\ngulp.task('styles', function() {\n    return gulp.src('src/sass/*.scss')\n        .pipe(sass({outputStyle: 'expanded', unix_newlines: true, linefeed: \"lf\"}).on('error', sass.logError))\n        .pipe(autoprefixer())\n        .pipe(minifyCss({\n            keepSpecialComments: 1\n        }))\n        .pipe(rename(\"theme.min.css\"))\n        .pipe(gulp.dest('./assets/css/'));\n});\n\n\ngulp.task('scripts', function() {\n    return gulp.src(['src/js/plugin/*.js', 'src/js/base.js'])\n        .pipe(uglify())\n        .pipe(concat('theme.min.js'))\n        .pipe(gulp.dest('assets/js'));\n});\n\n\ngulp.task('ghost_config', ['scripts'], function() {\n    return gulp.src(['src/js/config.js', 'assets/js/theme.min.js'])\n        .pipe(concat('theme.min.js'))\n        .pipe(gulp.dest('assets/js'));\n});\n\n\ngulp.task('default', function() {\n    gulp.start('styles', 'scripts', 'ghost_config', 'watch');\n});\n\n\ngulp.task('watch', function() {\n    gulp.watch('src/sass/*.scss', ['styles']);\n    gulp.watch('src/js/*.js', ['scripts', 'ghost_config']);\n    livereload.listen();\n    gulp.watch(['*']).on('change', livereload.changed);\n});\n\n\n\nJust by looking at the file itself, you may be able to dissect what's happening.\nAfter we require our plugins, we define our tasks,  which are essentially\nindividual jobs consisting of one or more gulp plugins depending on how you've\nchained them.\n\nHere's the general terminology to help clear things up:\n\n * gulp.task: Defines a task consisting of one of more plugin actions.\n * gulp.src:  Specifies the folder containing source files.\n * gulp.dest: Defines the folder to output compiled files to.\n * pipe(): Allows multiple events to be chained together in a single task.\n\nWrapping up\nOnce your file is ready to go, simply run the grunt  command in your project\ndirectory. You should see Gulp output the status of each task you've set, as\nwell as any errors which may have occurred.\n\nIn short, just use Gulp. The scientific community has come to a consensus that\nGulp is objectively superior to its counterpart, Grunt. Ask Matt, he's a\nscientist.\n\nPeace fam!","html":"<p><em><strong>NOTE</strong>:  This tutorial was written for Gulp versions &lt;4.0.0. Check out <a href=\"https://hackersandslackers.com/upgrading-to-gulp-4/\">this post</a> for Gulp &gt;4.0.0</em></p><!--kg-card-begin: hr--><hr><!--kg-card-end: hr--><p>Perhaps the whole obligatory-Gulp-tutorial on [Some Coding Blog] thing has become a bit cliché at this point. Haters may do as they will, but I 'll take any opportunity to jam as many SEO keywords I can get at this point. You know the ones: Gulp, ExpressJS, NodeJS, or perhaps even React Vue frontend Ubuntu framework API social cloud data entrepreneur community. </p><p>Regardless, we all need our own copy+paste references from time-to-time, or even worse: when we copy/paste our gulpfile.js from project to project and forget what they actually do. I won't tell anybody.</p><h2 id=\"quick-101\">Quick 101</h2><p>NodeJS developers use Gulp to automate necessary processes before moving their frontend code to production. This includes minifying files to make them run faster, and to also make them unreadable to people who would otherwise make fun of your mediocre Javascript which you were forced to crank out on a short timeline.</p><h3 id=\"general-workflow\">General Workflow</h3><p>Let's say you're running a basic Express app. As opposed to developing and storing files in a directory such as /public, Gulp enables us to develop in one directory, and compile to another. That means we can keep our horrible uncompressed and uncompiled  source in a folder such as /src, and output them to a directory such as /dist, which would be our public-facing output. An Express file structure utilizing this would look something like this:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">  |- src/\n      |- js/ \n      |- scss/\n  |- dist/\n      |- js/ \n      |- css/\n      |- img/\n      |- fonts/\n  |- views\n      |- index.hbs\n  |- routes\n      |- index.js\n  |- gulpfile.js\n  |- node_modules/\n  |- package.json\n  |- app.js\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"installation\">Installation</h3><p>First install the gulp CLI:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">npm install --global gulp-cli\n</code></pre>\n<!--kg-card-end: markdown--><p>Next, enter your project folder and install gulp while saving it as  a project dependency.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">npm install --save gulp\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"how-it-works\">How it Works</h2><p>Gulp doesn't do much on its own; the true magic lies within its vast library of plugins. Each individual plugin typically covers a simple task, such as compiling LESS or SASS files, or minifying client-side JavaScript and CSS. The limited scope of plugins entails a bit of setup in our gulpfile to chain said tasks together, but it also makes Gulp highly customizable to cater to your specific needs.</p><h3 id=\"the-gulpfile\">The Gulpfile</h3><p>Gulp works by invoking a file called gulpfile.js in your main directory, which you'll need to create and set up yourself (sorry). The file is divided into two main parts: requiring (importing) plugins, and defining which tasks to run when gulp is invoked. A basic worthless gulpfile might look something like:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">var gulp = require('gulp');\n\ngulp.task('default', function () {\n  console.log('Sup World!');\n});\n</code></pre>\n<!--kg-card-end: markdown--><p>To make this file useful, we'll need to install more plugins and set up tasks for them.</p><h2 id=\"essential-plugins\">Essential Plugins</h2><p>Let's look at what each one does. Keep in mind there are thousands of Gulp plugins, so let's just touch on the big hitters here.</p><p>Keep in mind to install any of these plugins, you'll simply need to run the npm installation in your project directory:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">npm install --save [plugin name]\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"gulp-uglify\">gulp-uglify</h3><p>Minifies Javascript or CSS files, and outputs the result into the directory of your choice. This plugin can be reused across filetypes, as we'll demonstrate in a moment.</p><h3 id=\"gulp-concat\">gulp-concat</h3><p>Combines minified files into a single file. This is essential for browser performance as it reduces the number of http requests being made every time your page loads.</p><h3 id=\"gulp-rename\">gulp-rename</h3><p>Renames files (such as those produced by gulp-concat).</p><h3 id=\"gulp-sass-gulp-less\">gulp-sass / gulp-less</h3><p>Compiles your Sass or Less files into CSS and outputs to the directory of your choice.</p><h3 id=\"gulp-minify-css\">gulp-minify-css</h3><p>Minifies CSS, as you might imagine. This can chained to gulp-sass or gulp-less to minify the CSS files those tasks produce.</p><h3 id=\"gulp-autoprefixer\">gulp-autoprefixer</h3><p>Thank god for this. Autoprefixer finds CSS styles and adds the browser-specific equivalents to your CSS, so you don't need to write the same style 10 times for every horrible browser in existence. This means you can write styles such as:</p><!--kg-card-begin: markdown--><pre><code class=\"language-css\">background: linear-gradient(to bottom, white, black);\n</code></pre>\n<!--kg-card-end: markdown--><p>And have them output as:</p><!--kg-card-begin: markdown--><pre><code class=\"language-css\">background: -webkit-gradient(linear, left top, left bottom, from(white), to(black));\nbackground: -webkit-linear-gradient(top, white, black);\nbackground: -o-linear-gradient(top, white, black);\nbackground: linear-gradient(to bottom, white, black);\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"gulp-watch\">gulp-watch</h3><p>Allows Gulp to listen for changes being made to source files, so that it may fire an event upon file change, such as:</p><h3 id=\"gulp-livereload\">gulp-livereload</h3><p>Compiles the changes made in directories being watched via gulp-watch automatically while you work.</p><h2 id=\"next-level-pro-shit\">Next Level Pro Shit</h2><p>While these plugins aren't 'essential', they are really cool and helpful.</p><h3 id=\"gulp-sourcemaps\">gulp-sourcemaps</h3><p>An obnoxious side effect of minifying and concating your files is when it comes time to debug errors on the frontend. Errors occurring at \"line 235\" are pretty useless considering your error codes are referring to the compiled files, without granting a hint as to where the problematic code may have come from in the first place. gulp-sourcemaps resolves this by adding commenting paths to which source files your code originated from.</p><h3 id=\"gulp-browser-sync\">gulp-browser-sync</h3><p>By leveraging <a href=\"https://browsersync.io/\">BrowserSync</a>, this plugin immediately refreshes an open browser which links to files just changed by gulp. This means you can code, compile, and see the results in real time. This takes a bit extra effort to set up, so be sure to check their <a href=\"https://browsersync.io/docs\">documentation</a>.</p><h3 id=\"gulp-load-plugins\">gulp-load-plugins</h3><p>Normally when creating our gulpfile, we need to start off by requiring our plugins via something like this:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">var gulp = require('gulp'),\n    del = require('del'),\n    concat = require('gulp-concat'),\n    rename = require('gulp-rename'),\n    uglify = require('gulp-uglify'),\n    sass = require('gulp-sass'),\n    watch = require('gulp-watch'),\n    livereload = require('gulp-livereload'),\n    minifyCss = require('gulp-minify-css'),\n    autoprefixer = require('gulp-autoprefixer');\n</code></pre>\n<!--kg-card-end: markdown--><p><strong>gulp-load-plugins</strong> instead checks your package.json for any Gulp plugins and immediately requires them, thus saving you a few precious minutes. The output instead looks like:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">var $ = require('gulp-load-plugins')();\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"building-the-gulpfile\">Building The Gulpfile</h2><p>Now that we have all these dope plugins, we can finally build our gulpfile. Here's an example (without using <strong>gulp-load-plugins</strong> for now):</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">var gulp = require('gulp'),\n    del = require('del'),\n    concat = require('gulp-concat'),\n    rename = require('gulp-rename'),\n    uglify = require('gulp-uglify'),\n    sass = require('gulp-sass'),\n    watch = require('gulp-watch'),\n    livereload = require('gulp-livereload'),\n    minifyCss = require('gulp-minify-css'),\n    autoprefixer = require('gulp-autoprefixer');\n\ngulp.task('styles', function() {\n    return gulp.src('src/sass/*.scss')\n        .pipe(sass({outputStyle: 'expanded', unix_newlines: true, linefeed: &quot;lf&quot;}).on('error', sass.logError))\n        .pipe(autoprefixer())\n        .pipe(minifyCss({\n            keepSpecialComments: 1\n        }))\n        .pipe(rename(&quot;theme.min.css&quot;))\n        .pipe(gulp.dest('./assets/css/'));\n});\n\n\ngulp.task('scripts', function() {\n    return gulp.src(['src/js/plugin/*.js', 'src/js/base.js'])\n        .pipe(uglify())\n        .pipe(concat('theme.min.js'))\n        .pipe(gulp.dest('assets/js'));\n});\n\n\ngulp.task('ghost_config', ['scripts'], function() {\n    return gulp.src(['src/js/config.js', 'assets/js/theme.min.js'])\n        .pipe(concat('theme.min.js'))\n        .pipe(gulp.dest('assets/js'));\n});\n\n\ngulp.task('default', function() {\n    gulp.start('styles', 'scripts', 'ghost_config', 'watch');\n});\n\n\ngulp.task('watch', function() {\n    gulp.watch('src/sass/*.scss', ['styles']);\n    gulp.watch('src/js/*.js', ['scripts', 'ghost_config']);\n    livereload.listen();\n    gulp.watch(['*']).on('change', livereload.changed);\n});\n\n</code></pre>\n<!--kg-card-end: markdown--><p>Just by looking at the file itself, you may be able to dissect what's happening. After we require our plugins, we define our <em>tasks,</em> which are essentially individual jobs consisting of one or more gulp plugins depending on how you've chained them.</p><p>Here's the general terminology to help clear things up:</p><ul><li><strong>gulp.task</strong>: Defines a task consisting of one of more plugin actions.</li><li><strong>gulp.src</strong>:  Specifies the folder containing source files.</li><li><strong>gulp.dest</strong>: Defines the folder to output compiled files to.</li><li><strong>pipe()</strong>: Allows multiple events to be chained together in a single task.</li></ul><h2 id=\"wrapping-up\">Wrapping up</h2><p>Once your file is ready to go, simply run the <strong>grunt</strong> command in your project directory. You should see Gulp output the status of each task you've set, as well as any errors which may have occurred.</p><p>In short, just use Gulp. The scientific community has come to a consensus that Gulp is objectively superior to its counterpart, Grunt. Ask Matt, he's a scientist.</p><p>Peace fam!</p>","url":"https://hackersandslackers.com/using-gulp-to-make-frontend-tolerable/","uuid":"f0ec0903-cd67-4663-b872-9ecdf9ffc557","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b0e1a41e88ecf2fbeb3f5fa"}},"pageContext":{"slug":"using-gulp-to-make-frontend-tolerable"}}