{"data":{"ghostTag":{"slug":"devops","name":"DevOps","visibility":"public","feature_image":null,"description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","meta_title":"DevOps: Networking And Server Configuration | Hackers and Slackers","meta_description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp."},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673641","title":"Accessing Self-Hosted MySQL  Externally","slug":"accessing-mysql-from-external-domains","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/mysql2-2.jpg","excerpt":"Connecting to MySQL instances hosted on a VPS.","custom_excerpt":"Connecting to MySQL instances hosted on a VPS.","created_at_pretty":"22 April, 2018","published_at_pretty":"22 April, 2018","updated_at_pretty":"28 March, 2019","created_at":"2018-04-22T16:27:48.000-04:00","published_at":"2018-04-22T17:20:18.000-04:00","updated_at":"2019-03-28T04:54:42.000-04:00","meta_title":"Accessing MySQL Externally | Hackers and Slackers","meta_description":"How to configure a remote instance of MySQL to accept external connections.","og_description":"How to configure a remote instance of MySQL to accept external connections.","og_image":"https://hackersandslackers.com/content/images/2019/03/mysql2-2.jpg","og_title":"Accessing MySQL Externally","twitter_description":"How to configure a remote instance of MySQL to accept external connections.","twitter_image":"https://hackersandslackers.com/content/images/2019/03/mysql2-2.jpg","twitter_title":"Accessing MySQL Externally","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"MySQL","slug":"mysql","description":"Database configuration, building queries, and cloud hosting options for MySQL.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/mysqlrevamp_o.jpg","meta_description":"Database configuration, building queries, and cloud hosting options for MySQL.","meta_title":"Working with MySQL | Hackers and Slackers","visibility":"public"},"tags":[{"name":"MySQL","slug":"mysql","description":"Database configuration, building queries, and cloud hosting options for MySQL.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/mysqlrevamp_o.jpg","meta_description":"Database configuration, building queries, and cloud hosting options for MySQL.","meta_title":"Working with MySQL | Hackers and Slackers","visibility":"public"},{"name":"DevOps","slug":"devops","description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","feature_image":null,"meta_description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","meta_title":"DevOps: Networking And Server Configuration | Hackers and Slackers","visibility":"public"},{"name":"SQL","slug":"sql","description":"Configure relational databases, brush up on your query language syntax, or find third-party services to interact with your data.","feature_image":"https://res-1.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/sql-tag.jpg","meta_description":"Configure relational databases, brush up on your query language syntax, or find third-party services to interact with your data.","meta_title":"Working with SQL | Hackers and Slackers","visibility":"public"},{"name":"Data Engineering","slug":"dataengineering","description":"The systematic collection and transformation of data via the creation of tools and pipelines.","feature_image":null,"meta_description":null,"meta_title":"Data Engineering | Hackers and Slackers","visibility":"public"},{"name":"#Working with MySQL","slug":"working-with-mysql","description":"Learn about MySQL database configuration, the query language, and cloud hosted instances.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/mysql1_o-1.jpg","meta_description":"Learn about MySQL database configuration, the query language, and cloud hosted instances.","meta_title":"Working with MySQL","visibility":"internal"}],"plaintext":"In the previous post [https://hackersandslackers.com/set-up-mysql-database/], we\ngot familiar with the basics of creating and navigating MySQL databases. This\nleads us to the next most logical thing to ask: how can I use this in any\nmeaningful way?\n\nMySQL installations default to refusing connections outside of the local\nmachine's IP address, as we should expect. That said, relational databases\naren't usually being used by a single person on a single machine forever (but if\nyou do, we should hang out). It goes without saying that our MySQL instance\nshould be focusing on uptime and accessibility, or in other terms, far away from\nour destructive personalities.\n\nI adore maintaining databases in the command line as much as the next\nself-hating masochist, but we'll need to accomplish work at some point. That\nmeans the remote database we just set up needs to be open-minded enough to allow\na connection from, say, the IP address of our personal local machine, which\nhappens to have a sexy GUI installed for this very purpose.\n\nMaking these kinds of configuration changes to any service or web server is\nalways a bit of fun. You think your day might suck until you cone home and a\npiece of software treats you like a cyber criminal, kicking and screaming while\nwe attempt the most basic out-of-the-box functionality.\n\nThe fine print here is that we wouldn't recommend messing with any of these\nsettings unless you know what you're doing. Then again, if you knew what you\nwere doing you probably wouldn't be reading this. The point is, if you mess up,\nit's your fault because we warned you.\n\nThe first thing we'll need to touch is the MySQL config found here on Ubuntu:\n\nvim /etc/mysql/mysql.conf.d/mysqld.cnf\n\n\nHere you can set various configurations for MySQL, such as the port number,\ndefault user, etc. The line we're interested in is bind-address.\n\n# The MySQL database server configuration file.\n#\n# You can copy this to one of:\n# - \"/etc/mysql/my.cnf\" to set global options,\n# - \"~/.my.cnf\" to set user-specific options.\n# \n# One can use all long options that the program supports.\n# Run program with --help to get a list of available options and with\n# --print-defaults to see which it would actually understand and use.\n#\n# For explanations see\n# http://dev.mysql.com/doc/mysql/en/server-system-variables.html\n\n# This will be passed to all mysql clients\n# It has been reported that passwords should be enclosed with ticks/quotes\n# escpecially if they contain \"#\" chars...\n# Remember to edit /etc/mysql/debian.cnf when changing the socket location.\n\n# Here is entries for some specific programs\n# The following values assume you have at least 32M ram\n\n[mysqld_safe]\nsocket          = /var/run/mysqld/mysqld.sock\nnice            = 0\n\n[mysqld]\n#\n# * Basic Settings\n#\nuser            = mysql\npid-file        = /var/run/mysqld/mysqld.pid\nsocket          = /var/run/mysqld/mysqld.sock\nport            = 3306\nbasedir         = /usr\ndatadir         = /var/lib/mysql\ntmpdir          = /tmp\nlc-messages-dir = /usr/share/mysql\nskip-external-locking\n#\n# Instead of skip-networking the default is now to listen only on\n# localhost which is more compatible and is not less secure.\nbind-address           = 127.0.0.1\n\n\nBy default, bind-address is set to your local host. This is basically a\nwhitelist that allows changes only from the domains or IP addresses specified.\nYou can go ahead and add the address of the external domain you'd like to grant\naccess to here.\n\nCommenting out the line completely opens up MySQL to everybody. So there's that.\n\nNow we need to create a user with which to access the DBL:\n\nmysql -u root -p -h localhost -P 3306\n\n\nUse the CREATE USER  command to create a new homie. In the example below,\n'newuser' is the name of the new user, and '%' is from which location the user\nwill be permitted to make changes. This is usually 'localhost', for example. In\nthis case, we added '%' which means everywhere.\n\nmysql> CREATE USER ‘newuser’@‘%' IDENTIFIED BY ‘password123’;\n\n\nGrant all privileges to the new user, and always flush privileges  after making\nsuch modifications.\n\nmysql> GRANT ALL ON *.* to newuser@'%' IDENTIFIED BY 'password123';\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nmysql> FLUSH PRIVILEGES;\nQuery OK, 0 rows affected (0.00 sec)\n\n\nWith these changes made, restart MySQL.\n\nservice mysql restart\n\n\nAssuming this was done correctly, your DB should now be able to receive\nread/write queries from an external source, provided the correct username and\npassword are used.","html":"<p>In the <a href=\"https://hackersandslackers.com/set-up-mysql-database/\">previous post</a>, we got familiar with the basics of creating and navigating MySQL databases. This leads us to the next most logical thing to ask: how can I use this in any meaningful way?</p><p>MySQL installations default to refusing connections outside of the local machine's IP address, as we should expect. That said, relational databases aren't usually being used by a single person on a single machine forever (but if you do, we should hang out). It goes without saying that our MySQL instance should be focusing on uptime and accessibility, or in other terms, far away from our destructive personalities.</p><p>I adore maintaining databases in the command line as much as the next self-hating masochist, but we'll need to accomplish work at some point. That means the remote database we just set up needs to be open-minded enough to allow a connection from, say, the IP address of our personal local machine, which happens to have a sexy GUI installed for this very purpose.</p><p>Making these kinds of configuration changes to any service or web server is always a bit of fun. You think your day might suck until you cone home and a piece of software treats you like a cyber criminal, kicking and screaming while we attempt the most basic out-of-the-box functionality.</p><p>The fine print here is that we wouldn't recommend messing with any of these settings unless you know what you're doing. Then again, if you knew what you were doing you probably wouldn't be reading this. The point is, if you mess up, it's your fault because we warned you.</p><p>The first thing we'll need to touch is the MySQL config found here on Ubuntu:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">vim /etc/mysql/mysql.conf.d/mysqld.cnf\n</code></pre>\n<!--kg-card-end: markdown--><p>Here you can set various configurations for MySQL, such as the port number, default user, etc. The line we're interested in is <em>bind-address.</em></p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\"># The MySQL database server configuration file.\n#\n# You can copy this to one of:\n# - &quot;/etc/mysql/my.cnf&quot; to set global options,\n# - &quot;~/.my.cnf&quot; to set user-specific options.\n# \n# One can use all long options that the program supports.\n# Run program with --help to get a list of available options and with\n# --print-defaults to see which it would actually understand and use.\n#\n# For explanations see\n# http://dev.mysql.com/doc/mysql/en/server-system-variables.html\n\n# This will be passed to all mysql clients\n# It has been reported that passwords should be enclosed with ticks/quotes\n# escpecially if they contain &quot;#&quot; chars...\n# Remember to edit /etc/mysql/debian.cnf when changing the socket location.\n\n# Here is entries for some specific programs\n# The following values assume you have at least 32M ram\n\n[mysqld_safe]\nsocket          = /var/run/mysqld/mysqld.sock\nnice            = 0\n\n[mysqld]\n#\n# * Basic Settings\n#\nuser            = mysql\npid-file        = /var/run/mysqld/mysqld.pid\nsocket          = /var/run/mysqld/mysqld.sock\nport            = 3306\nbasedir         = /usr\ndatadir         = /var/lib/mysql\ntmpdir          = /tmp\nlc-messages-dir = /usr/share/mysql\nskip-external-locking\n#\n# Instead of skip-networking the default is now to listen only on\n# localhost which is more compatible and is not less secure.\nbind-address           = 127.0.0.1\n</code></pre>\n<!--kg-card-end: markdown--><p>By default, bind-address is set to your local host. This is basically a whitelist that allows changes only from the domains or IP addresses specified. You can go ahead and add the address of the external domain you'd like to grant access to here.</p><p>Commenting out the line completely opens up MySQL to everybody. So there's that.</p><p>Now we need to create a user with which to access the DBL:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">mysql -u root -p -h localhost -P 3306\n</code></pre>\n<!--kg-card-end: markdown--><p>Use the <em>CREATE USER</em> command to create a new homie. In the example below, 'newuser' is the name of the new user, and '%' is from which location the user will be permitted to make changes. This is usually 'localhost', for example. In this case, we added '%' which means <em>everywhere.</em></p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">mysql&gt; CREATE USER ‘newuser’@‘%' IDENTIFIED BY ‘password123’;\n</code></pre>\n<!--kg-card-end: markdown--><p>Grant all privileges to the new user, and always <code>flush privileges</code> after making such modifications.</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">mysql&gt; GRANT ALL ON *.* to newuser@'%' IDENTIFIED BY 'password123';\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nmysql&gt; FLUSH PRIVILEGES;\nQuery OK, 0 rows affected (0.00 sec)\n</code></pre>\n<!--kg-card-end: markdown--><p>With these changes made, restart MySQL.</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">service mysql restart\n</code></pre>\n<!--kg-card-end: markdown--><p>Assuming this was done correctly, your DB should now be able to receive read/write queries from an external source, provided the correct username and password are used.</p>","url":"https://hackersandslackers.com/accessing-mysql-from-external-domains/","uuid":"ca2500b8-b307-4b1c-8ccd-d9cdf4f1e8eb","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5adcf04441f6cf7b7a136a4a"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867363b","title":"Setting up a MySQL Database on Ubuntu","slug":"set-up-mysql-database","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/04/mysql1@2x.jpg","excerpt":"Setting up MySQL the old-fashioned way: on a Linux server.","custom_excerpt":"Setting up MySQL the old-fashioned way: on a Linux server.","created_at_pretty":"17 April, 2018","published_at_pretty":"18 April, 2018","updated_at_pretty":"28 March, 2019","created_at":"2018-04-16T23:53:52.000-04:00","published_at":"2018-04-17T22:58:58.000-04:00","updated_at":"2019-03-28T04:52:03.000-04:00","meta_title":"Setting up a MySQL Database on Ubuntu | Hackers and Slackers","meta_description":"Setting up MySQL the old-fashioned way: on a linux server","og_description":"Setting up MySQL the old-fashioned way: on a Linux server","og_image":"https://hackersandslackers.com/content/images/2018/04/mysql1@2x.jpg","og_title":"Setting up a MySQL Database on Ubuntu","twitter_description":"Setting up MySQL the old-fashioned way: on a Linux server","twitter_image":"https://hackersandslackers.com/content/images/2018/04/mysql1@2x.jpg","twitter_title":"Setting up a MySQL Database on Ubuntu","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"MySQL","slug":"mysql","description":"Database configuration, building queries, and cloud hosting options for MySQL.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/mysqlrevamp_o.jpg","meta_description":"Database configuration, building queries, and cloud hosting options for MySQL.","meta_title":"Working with MySQL | Hackers and Slackers","visibility":"public"},"tags":[{"name":"MySQL","slug":"mysql","description":"Database configuration, building queries, and cloud hosting options for MySQL.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/mysqlrevamp_o.jpg","meta_description":"Database configuration, building queries, and cloud hosting options for MySQL.","meta_title":"Working with MySQL | Hackers and Slackers","visibility":"public"},{"name":"SQL","slug":"sql","description":"Configure relational databases, brush up on your query language syntax, or find third-party services to interact with your data.","feature_image":"https://res-1.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/sql-tag.jpg","meta_description":"Configure relational databases, brush up on your query language syntax, or find third-party services to interact with your data.","meta_title":"Working with SQL | Hackers and Slackers","visibility":"public"},{"name":"DevOps","slug":"devops","description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","feature_image":null,"meta_description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","meta_title":"DevOps: Networking And Server Configuration | Hackers and Slackers","visibility":"public"},{"name":"#Working with MySQL","slug":"working-with-mysql","description":"Learn about MySQL database configuration, the query language, and cloud hosted instances.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/mysql1_o-1.jpg","meta_description":"Learn about MySQL database configuration, the query language, and cloud hosted instances.","meta_title":"Working with MySQL","visibility":"internal"}],"plaintext":"As frameworks and services evolve to remove us further away from boilerplate\ncode, the first casualty of saved time is the fundamental understanding of what\nwe're actually doing sometimes. This has good reason; one can only learn so much\nfrom repetitive command-line interactions with databases, thus making any\nservice's one-click-deploy  button all the more sensible.  If I  had to imagine\nthe least sexy title for a post in software development, it would be something\nalong the lines of How to Configure MySQL on a VPS, as opposed to like, a\ncloud-based solution, or Even a Docker Container, as Though we Live in the God\nDamn 90s or Something.\" And that's more or less the gist of this post.\n\nI'm not exactly crushing it in the MySQL shell every day- chances are a lot of\nus aren't considering we have plenty of tools to protect us from ever thinking\nabout doing so. That said, this is very much a real use-case for pretty much any\nself-hosted application running a database natively.\n\nSo here it goes: a crash course in MySQL, by An Idiot.\n\nInstallation\nInstalling MySQL server on Ubuntu is simple:\n\nsudo apt-get install mysql-server\n\n\nConfigure MySQL via the Shell\nCreating databases, users, and permissions all happens within the MySQL shell.\nThis can be accessed via:\n\nmysql -u root -p\n\n\nThis will log you in to MySQL as the root  user. In the future, the shell can be\naccessed as any other MySQL user you may create in the future.\n\nExplore your Databases\nSee which MySQL databases exit:\n\nmysql> SHOW DATABASES;\n\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| ghost_prod         |\n| hackers_prod       |\n| ind_prod           |\n| mysql              |\n| performance_schema |\n| sys                |\n+--------------------+\n\n\nNice databases bro. Notice the mysql  database. As you might imagine, there's\nprobably a lot of cool important shit in there that makes everything work. Let's\ncheck it out.\n\nGet in There\nTo access and start messing with your db, use the USE  query:\n\nmysql> USE mysql;\n\nDatabase changed\n\n\nLet's see which tables are chillin in here.\n\nmysql> SHOW tables;\n\n+---------------------------+\n| Tables_in_mysql           |\n+---------------------------+\n| columns_priv              |\n| db                        |\n| engine_cost               |\n| event                     |\n| func                      |\n| general_log               |\n| gtid_executed             |\n| help_category             |\n| help_keyword              |\n| help_relation             |\n| help_topic                |\n| innodb_index_stats        |\n| innodb_table_stats        |\n| ndb_binlog_index          |\n| plugin                    |\n| proc                      |\n| procs_priv                |\n| proxies_priv              |\n| server_cost               |\n| servers                   |\n| slave_master_info         |\n| slave_relay_log_info      |\n| slave_worker_info         |\n| slow_log                  |\n| tables_priv               |\n| time_zone                 |\n| time_zone_leap_second     |\n| time_zone_name            |\n| time_zone_transition      |\n| time_zone_transition_type |\n| user                      |\n+---------------------------+\n\n\nOh wow yeah, that looks pretty important. This is where configurations such as\nuser information exists. When we create users and grant them permissions, we'll\nbe doing so in mysql. We'll worry about that later, but let's see who's in there\nanyway for the hell of it:\n\nmysql> select user from user;\n\n+------------------+\n| user             |\n+------------------+\n| debian-sys-maint |\n| mysql.session    |\n| mysql.sys        |\n| root             |\n+------------------+\n\n\nSick. Without knowing much SQL at all, we can already see our databases, their\ntables, and get the values of whichever columns they might have. Now let's start\ndoing stuff.\n\nCreate a Database\nGo ahead and create a new database. In my case, I want to create a database\nwhich lists my Github repositories, so I'll create a db named github_repos:\n\nCREATE DATABASE github_repos;\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> USE github_repos;\nDatabase changed\n\n\nCreating a table\nNow it's getting good: we're going to create a table in our database: to do\nthis, we're going to need to define our columns upfront, including the type of\ndata each column can accept as well as the restrictions on that column. I'm\nkeeping it simple and storing values of text for now.\n\nmysql> CREATE TABLE githubrepos (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT, \n    -> full_name VARCHAR(100),\n    -> description VARCHAR(300),\n    -> name VARCHAR(200),\n    -> url VARCHAR(150));\n\n\nid  is a standard column which indicates the numerical index of each row. Here,\nwe're stating that our rows will count themselves.\n\nEach following line creates a column by [name]  [type of data]****[limit]. In\nthis example we're creating columns which accept alphanumeric characters, up to\na maximum of the the number specified.\n\nNOTE: you should really overestimate the number of characters each field can\naccept. I didn't. Its a waste of time and might drive you crazy down the line:\njust accept a large number and be done with it.\n\nFruits of your labor\nGo ahead and check out what you've done:\n\nmysql> SHOW tables;\n\n+------------------------+\n| Tables_in_github_repos |\n+------------------------+\n| githubrepos            |\n+------------------------+\n\n\nDamn dude, you did it. Let's take a look just to make sure:\n\n+-------------+--------------+------+-----+---------+----------------+\n| Field       | Type         | Null | Key | Default | Extra          |\n+-------------+--------------+------+-----+---------+----------------+\n| id          | int(11)      | NO   | PRI | NULL    | auto_increment |\n| full_name   | varchar(200) | YES  |     | NULL    |                |\n| description | varchar(300) | YES  |     | NULL    |                |\n| name        | varchar(200) | YES  |     | NULL    |                |\n| url         | varchar(200) | YES  |     | NULL    |                |\n+-------------+--------------+------+-----+---------+----------------+\n5 rows in set (0.01 sec)\n\n\nHoly shit it's literally a table.\n\nMaking Changes\nLet's make some changes to our table after the fact. We can use ALTER TABLE to\nadd, modify, or remove columns.\n\nmysql> ALTER TABLE githubrepos ADD homepage VARCHAR(255);\nQuery OK, 0 rows affected (0.09 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\n\nThis added column homepage  which accepts alphanumeric characters.\n\nNow that we've created our own database with our own defined structure, the\npossibilities are endless. The next step is to actually fill it with data, but\nlet's save that for next time.\n\nmysql> \\q\nBye","html":"<p>As frameworks and services evolve to remove us further away from boilerplate code, the first casualty of saved time is the fundamental understanding of what we're actually doing sometimes. This has good reason; one can only learn so much from repetitive command-line interactions with databases, thus making any service's <em>one-click-deploy</em> button all the more sensible.  If I  had to imagine the least sexy title for a post in software development, it would be something along the lines of <em><strong>How to Configure MySQL on a VPS, as opposed to like, a cloud-based solution, or Even a Docker Container, as Though we Live in the God Damn 90s or Something.\" </strong> </em>And that's more or less the gist of this post.</p><p>I'm not exactly crushing it in the MySQL shell every day- chances are a lot of us aren't considering we have plenty of tools to protect us from ever thinking about doing so. That said, this is very much a real use-case for pretty much any self-hosted application running a database natively.</p><p>So here it goes: a crash course in MySQL, by An Idiot.</p><h3 id=\"installation\">Installation</h3><p>Installing MySQL server on Ubuntu is simple:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">sudo apt-get install mysql-server\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"configure-mysql-via-the-shell\">Configure MySQL via the Shell</h3><p>Creating databases, users, and permissions all happens within the MySQL shell. This can be accessed via:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">mysql -u root -p\n</code></pre>\n<!--kg-card-end: markdown--><p>This will log you in to MySQL as the <strong>root</strong> user. In the future, the shell can be accessed as any other MySQL user you may create in the future.</p><h3 id=\"explore-your-databases\">Explore your Databases</h3><p>See which MySQL databases exit:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">mysql&gt; SHOW DATABASES;\n\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| ghost_prod         |\n| hackers_prod       |\n| ind_prod           |\n| mysql              |\n| performance_schema |\n| sys                |\n+--------------------+\n</code></pre>\n<!--kg-card-end: markdown--><p>Nice databases bro. Notice the <em>mysql</em> database. As you might imagine, there's probably a lot of cool important shit in there that makes everything work. Let's check it out.</p><h3 id=\"get-in-there\">Get in There</h3><p>To access and start messing with your db, use the <strong>USE</strong> query:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">mysql&gt; USE mysql;\n\nDatabase changed\n</code></pre>\n<!--kg-card-end: markdown--><p>Let's see which tables are chillin in here.</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">mysql&gt; SHOW tables;\n\n+---------------------------+\n| Tables_in_mysql           |\n+---------------------------+\n| columns_priv              |\n| db                        |\n| engine_cost               |\n| event                     |\n| func                      |\n| general_log               |\n| gtid_executed             |\n| help_category             |\n| help_keyword              |\n| help_relation             |\n| help_topic                |\n| innodb_index_stats        |\n| innodb_table_stats        |\n| ndb_binlog_index          |\n| plugin                    |\n| proc                      |\n| procs_priv                |\n| proxies_priv              |\n| server_cost               |\n| servers                   |\n| slave_master_info         |\n| slave_relay_log_info      |\n| slave_worker_info         |\n| slow_log                  |\n| tables_priv               |\n| time_zone                 |\n| time_zone_leap_second     |\n| time_zone_name            |\n| time_zone_transition      |\n| time_zone_transition_type |\n| user                      |\n+---------------------------+\n</code></pre>\n<!--kg-card-end: markdown--><p>Oh wow yeah, that looks pretty important. This is where configurations such as user information exists. When we create users and grant them permissions, we'll be doing so in <em>mysql</em>. We'll worry about that later, but let's see who's in there anyway for the hell of it:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">mysql&gt; select user from user;\n\n+------------------+\n| user             |\n+------------------+\n| debian-sys-maint |\n| mysql.session    |\n| mysql.sys        |\n| root             |\n+------------------+\n</code></pre>\n<!--kg-card-end: markdown--><p>Sick. Without knowing much SQL at all, we can already see our databases, their tables, and get the values of whichever columns they might have. Now let's start doing stuff.</p><h3 id=\"create-a-database\">Create a Database</h3><p>Go ahead and create a new database. In my case, I want to create a database which lists my Github repositories, so I'll create a db named <em>github_repos</em>:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">CREATE DATABASE github_repos;\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; USE github_repos;\nDatabase changed\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"creating-a-table\">Creating a table</h3><p>Now it's getting good: we're going to create a table in our database: to do this, we're going to need to define our columns upfront, including the type of data each column can accept as well as the restrictions on that column. I'm keeping it simple and storing values of text for now.</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">mysql&gt; CREATE TABLE githubrepos (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT, \n    -&gt; full_name VARCHAR(100),\n    -&gt; description VARCHAR(300),\n    -&gt; name VARCHAR(200),\n    -&gt; url VARCHAR(150));\n</code></pre>\n<!--kg-card-end: markdown--><p><strong>id</strong> is a standard column which indicates the numerical index of each row. Here, we're stating that our rows will count themselves.</p><p>Each following line creates a column by <strong>[name]</strong> <strong>[type of data]****[limit]</strong>. In this example we're creating columns which accept alphanumeric characters, up to a maximum of the the number specified.</p><p><em><strong>NOTE: you should really overestimate the number of characters each field can accept. I didn't. Its a waste of time and might drive you crazy down the line: just accept a large number and be done with it.</strong></em></p><h3 id=\"fruits-of-your-labor\">Fruits of your labor</h3><p>Go ahead and check out what you've done:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">mysql&gt; SHOW tables;\n\n+------------------------+\n| Tables_in_github_repos |\n+------------------------+\n| githubrepos            |\n+------------------------+\n</code></pre>\n<!--kg-card-end: markdown--><p>Damn dude, you did it. Let's take a look just to make sure:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">+-------------+--------------+------+-----+---------+----------------+\n| Field       | Type         | Null | Key | Default | Extra          |\n+-------------+--------------+------+-----+---------+----------------+\n| id          | int(11)      | NO   | PRI | NULL    | auto_increment |\n| full_name   | varchar(200) | YES  |     | NULL    |                |\n| description | varchar(300) | YES  |     | NULL    |                |\n| name        | varchar(200) | YES  |     | NULL    |                |\n| url         | varchar(200) | YES  |     | NULL    |                |\n+-------------+--------------+------+-----+---------+----------------+\n5 rows in set (0.01 sec)\n</code></pre>\n<!--kg-card-end: markdown--><p>Holy shit it's literally a table.</p><h3 id=\"making-changes\">Making Changes</h3><p>Let's make some changes to our table after the fact. We can use ALTER TABLE to add, modify, or remove columns.</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">mysql&gt; ALTER TABLE githubrepos ADD homepage VARCHAR(255);\nQuery OK, 0 rows affected (0.09 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n</code></pre>\n<!--kg-card-end: markdown--><p>This added column <em>homepage</em> which accepts alphanumeric characters.</p><p>Now that we've created our own database with our own defined structure, the possibilities are endless. The next step is to actually fill it with data, but let's save that for next time.</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">mysql&gt; \\q\nBye\n</code></pre>\n<!--kg-card-end: markdown-->","url":"https://hackersandslackers.com/set-up-mysql-database/","uuid":"697bc755-a833-43fe-b807-5668b8c284f4","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5ad56fd09bfe350c74e8a8cb"}}]}},"pageContext":{"slug":"devops","limit":12,"skip":24,"numberOfPages":3,"humanPageNumber":3,"prevPageNumber":2,"nextPageNumber":null,"previousPagePath":"/tag/devops/page/2/","nextPagePath":null}}