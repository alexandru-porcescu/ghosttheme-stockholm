{"data":{"ghostTag":{"slug":"plotly","name":"Plotly","visibility":"public","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/Dash.jpg","description":"Get intimate with a staple product in data visualization. Create charts with Plot.ly's core product, or become a pro with Plot.ly Dash.","meta_title":"Plotly for Data Visualization | Hackers and Slackers","meta_description":"Get intimate with a staple product in data visualization. Create charts with Plot.ly's core product, or become a pro with Plot.ly Dash."},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5c1af93bffe54a660c58b85a","title":"Cracking Full Control Over Plot.ly Dash","slug":"gaining-full-control-over-plotly-dash","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/12/Dash@2x.jpg","excerpt":"Build apps with Plot.ly Dash on your own terms","custom_excerpt":"Build apps with Plot.ly Dash on your own terms","created_at_pretty":"20 December, 2018","published_at_pretty":"20 December, 2018","updated_at_pretty":"28 March, 2019","created_at":"2018-12-19T21:06:51.000-05:00","published_at":"2018-12-20T14:58:00.000-05:00","updated_at":"2019-03-28T05:19:31.000-04:00","meta_title":"Cracking Full Control Over Plot.ly Dash | Hackers and Slackers","meta_description":"Build apps with Plot.ly Dash on your own terms. Extend Flask functionality with Dash, not the other way around.","og_description":"Build apps with Plot.ly Dash on your own terms. Extend Flask functionality with Dash, not the other way around.","og_image":"https://hackersandslackers.com/content/images/2018/12/Dash@2x.jpg","og_title":"Cracking Full Control Over Plot.ly Dash","twitter_description":"Build apps with Plot.ly Dash on your own terms. Extend Flask functionality with Dash, not the other way around.","twitter_image":"https://hackersandslackers.com/content/images/2018/12/Dash@2x.jpg","twitter_title":"Cracking Full Control Over Plot.ly Dash","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Plotly","slug":"plotly","description":"Get intimate with a staple product in data visualization. Create charts with Plot.ly's core product, or become a pro with Plot.ly Dash.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/Dash.jpg","meta_description":"Get intimate with a staple product in data visualization. Create charts with Plot.ly's core product, or become a pro with Plot.ly Dash.","meta_title":"Plotly for Data Visualization | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Plotly","slug":"plotly","description":"Get intimate with a staple product in data visualization. Create charts with Plot.ly's core product, or become a pro with Plot.ly Dash.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/Dash.jpg","meta_description":"Get intimate with a staple product in data visualization. Create charts with Plot.ly's core product, or become a pro with Plot.ly Dash.","meta_title":"Plotly for Data Visualization | Hackers and Slackers","visibility":"public"},{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},{"name":"Data Vis","slug":"datavis","description":"Visualize your data with charting tools like Matplotlib, Plotly, D3, Chart.js, Muze, Seaborn, and countless others. Primarily focused on programmatic visualization as opposed to Business Intelligence software.","feature_image":null,"meta_description":"Visualize your data with charting tools like Matplotlib, Plotly, D3, Chart.js, Muze, Seaborn, and countless others. Focused on programmatic visualization.","meta_title":"Data Visualization | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"},{"name":"#Using Plotly Dash Like a Pro","slug":"plotly-dash","description":"Push the limits of Plot.ly Dash to create data-driven applications with ease. Take on Python, Pandas, Flask, and Data Visualization all at once.","feature_image":"https://hackersandslackers.com/content/images/2019/03/Dash.jpg","meta_description":"Push the limits of Plot.ly Dash to create data-driven applications with ease. Take on Python, Pandas, Flask, and Data Visualization all at once.","meta_title":"Using Plotly Dash Like a Pro","visibility":"internal"}],"plaintext":"Ahh, Plot.ly [http://plot.ly/]; typing that name into a post headline triggers\nan emotional cocktail of pride and embarrassment. Over the years Plotly has been\nat the core of some of the most influential products I’ve worked on: a\nhodgepodge of Fintech and humanitarian clients, all of which are still proudly\nwaving their charts and dashboards around the world. Yet, my mind is boggled by\na simple question: what the hell  took us so long to write our first post about\nPlotly? We've been operating Hackers and Slackers for over a full year now...\ndid I seriously write a  post about JQuery\n[https://hackersandslackers.com/making-ajax-calls-with-jquery/]  in that time\nbefore reaching this point?\n\nMuch has changed in the last year or so for our friends in Montreal. Number 1 in\nmy book is the price reduction of their core product: from 300 dollars  to zero.\nI paid the 300 dollars. We really need to get a “donate” button around here. \n\nA close second is undoubtedly the introduction of Plot.ly Dash\n[https://plot.ly/products/dash/]. Dash  tickles a sentiment which has danced\nthrough many young and helplessly naïve Pythonistas' minds: what if we could\nwrite only  in Python, like, forever?  As awful of an idea it is to start\nGoogling Python-to-frontend code interpreters (they exist; I checked), Plotly's\nDash does a shockingly good job of breathing life into that romantic fantasy of\ncommitting to Python forever.\n\nBut we're not here to deliver a recycled 'What is Plotly?'  synopsis. We're not\neven interested in the obligatory 'How to Get Started Using This\nAlready-Well-Documented-Technology' post. Plotly deserves better than that.\nInstead, we're coming hot out of the gate swinging: we're going to show you how\nto beat Plotly down, break it, and make it bend to your will. Welcome to a\nmagical edition of Hacking Plotly. It must be Christmas, folks.\n\nLet's Make a Plotly + Flask Lovechild from Hell\nLike almost every single advancement to come out of Python-geared architecture\nthis year, Dash has a little secret: it's gotten here with a little help from\nFlask. Alright, perhaps more than a little: Dash actually extends Flask. Sounds\nsensible, and perhaps even exciting at first; its almost as though every crush\nyou've ever had decided it be best to simply put their differences aside to\nstart a group chat with you in the interest of making your sexual well-being an\nequal team effort out of sheer love. As you've already guessed, life doesn't\nwork like that.\n\nDash hijacks Flask from the beginning, starting with the way we instantiate the\napp. Any code monkey who has laid eyes upon a wsgi.py file can tell you\nsomething is up before you can even say app = dash.Dash(__name__). Check out the\nrecommended startup boilerplate:\n\nfrom dash import Dash\nimport dash_core_components as dcc\nimport dash_html_components as html\n\nexternal_stylesheets = ['https://codepen.io/fgdsgfhgfh/pen/IHvjvb.css']\n\napp = Dash(__name__, external_stylesheets=external_stylesheets)\n\napp.layout = html.Div(\n        id='example-div-element'\n        )\n\nif __name__ == '__main__':\n    app.run_server(debug=True)\n\n\nIf you were to attempt to take this boilerplate and attempt to add core Flask\nlogic, such as authentication with Flask-Login, generating assets with \nFlask-Assets, or just creating a global database, where would you start? Plotly\ncleverly suggests reserving the app  namespace for your app- the very same that\nwe would do with Flask. Yet if we attempt to modify the app  object the same as\nwe would with Flask, nothing will work: Dash has declared an ecosystem, and\nnowhere in that ecosystem are you invited to add custom Flask application logic\nout of the box.\n\nDash does what it was intended to do very well: building dashboard-based\napplications. The issue is that applications which can only display data  aren't\nentirely useful as end products. What if we wanted to create a fully-featured\napp, where data visualization was simply a feature  of said app?\n\nCreating a Fully-Featured App (Where Data Vis is Simply a Feature of Said App)\nA common \"workaround\" you'll find in the community is passing Flask to Dash as\nthe underlying \"server\", something like this:\n\nfrom flask import Flask\nfrom dash import Dash\nimport dash_core_components as dcc\nimport dash_html_components as html\n\nserver = Flask(__name__)\napp = dash.Dash(__name__, server=server, url_base_pathname='/path')\napp.layout = html.Div(id='example-div-element')\n\n@server.route(\"/dash\")\ndef MyDashApp():\n    return app.index()\n\n\nMake no mistake: this method sucks. Sure, you've regained the ability to create\nroutes here and there, but let's not forget:\n\n * Your app will always start on a Dash-served page: if anything, we'd want our\n   start page to be something we have full control over to then dive into the\n   Dash components.\n * Access to globally available Flask plugins are still unavailable in this\n   method. Notice how we never set an application context?\n * Your ability to style your application with static assets and styles is\n   completely out of your hands.\n * Container architecture built on Flask, such as Google App Engine, won't play\n   nicely when we start something that isn't Flask. So there's a good chance\n   that playing by the rules means losing the ability to deploy.\n\nIf we want to do these things, we cannot start our app as an instance of Dash\nand attempt to work around it. Instead, we must create a Flask app, and put Dash\nin its place as an app embedded in our  app. This gives us full control over\nwhen users can enter the Dash interface, and even within that interface, we can\nstill manage database connections or user sessions as we see fit. Welcome to the\nbig leagues.\n\nTurning the Tables: Dash Inside Flask\nFirst things first, let's get our wsgi.py  file back. Pretty much any hosted\nPython application expects this, so please: enough with the app.py  nonsense.\n\nfrom plotly_flask_tutorial import create_app\n\napp = create_app()\n\nif __name__ == \"__main__\":\n    app.run(host='0.0.0.0', debug=True)\n\n\nLook familiar? Not only do we get Flask back, but we get our entire application\nfactory and all that it includes. Take a look at application/__init__.py:\n\nfrom flask import Flask\nfrom . import dash_view\n\n\ndef create_app():\n    \"\"\"Construct the core application.\"\"\"\n    app = Flask(__name__, instance_relative_config=False)\n    app.config.from_object('config.Config')\n    dash_app = dash_view.Add_Dash(app)\n\n    with app.app_context():\n        # Construct the core application\n        from . import routes\n        app.register_blueprint(routes.main_bp)\n\n        return app\n\n\nIt's almost as though nothing changed! In fact, the only line we have regarding\nDash here is dash_app = plotly_dash_views.Add_Dash(app). \n\nWe import dash_view  at the start of __init.py__. What is this, you might ask?\nIt's actually a file which contains our Dash app! Dash apps typically like to\nhave a single .py  file per view, which turns out to work great for us. Let's\nlook at why this works by checking dash_view.py:\n\nimport glob\nfrom dash import Dash\nimport dash_table\nimport dash_core_components as dcc\nimport dash_html_components as html\nimport pandas as pd\n\n\ndef Add_Dash(server):\n    \"\"\"Plot.ly Dash view which populates the screen with loaded DataFrames.\"\"\"\n    external_stylesheets = ['https://hackers.nyc3.cdn.digitaloceanspaces.com/css/plotly-flask-tutorial.css']\n    dash_app = Dash(server=server,\n                    external_stylesheets=external_stylesheets,\n                    routes_pathname_prefix='/dash_view/')\n\n    # Create Dash Layout\n    dash_app.layout = html.Div(\n        id='dash-container'\n      )\n\n    return dash_app.server\n\n\nWe pass our Flask instance to Add_Dash  as a parameter called server. Unlike the\nprevious examples, it's actually server  running the show this time, with Dash\npiggybacking as a module. This is our most important line of code:\n\ndash_app = Dash(server=server, routes_pathname_prefix='/dash_view/')\n\n\nDash doesn't handle routes like Flask does (or at all, really). That's fine! We\nstart dash_app  with URL prefix, which means the Dash logic here is confined to\nthat single page. This means we can build a sprawling Flask app with hundreds of\nfeatures and views, and oh yeah, if we want a Dash view, we can just create a\nfile for that to chill on its own, not touching anything else.\n\nNow you're thinking with portals™.\n\nWhat Our App Looks Like\nIf you're following along, it would probably help to have a top-level view of\nwhat's going on so far:\n\nplotlydash-flask-tutorial\n├── /plotly_flask_tutorial\n│   ├── __init__.py\n│   ├── dash_view.py\n│   ├── routes.py\n│   ├── /data\n│   │   ├── chicago_taxis.csv\n│   │   ├── citibike_trips.csv\n│   │   ├── cities.csv\n│   │   └── pocket.csv\n│   ├── /static\n│   │   ├── dist\n│   │   │   └── css\n│   │   │       └── plotly-flask-tutorial.css\n│   │   ├── js\n│   │   │   └── main.js\n│   │   └── less\n│   │       ├── global.less\n│   │       ├── header.less\n│   │       └── table.less\n│   ├── /templates\n│   │   ├── index.html\n│   │   └── nav.html\n│   └── /data\n│       ├── chicago_taxis.csv\n│       ├── citibike_trips.csv\n│       ├── cities.csv\n│       └── pocket.csv\n├── Pipfile\n├── Pipfile.lock\n├── README.md\n├── config.py\n├── requirements.txt\n├── setup.py\n├── start.sh\n└── wsgi.py\n\n\nWe're storing our app within a directory called plotly_flask_tutorial. In that\ndirectory, we have our typical Flask stuff (/templates, /static, etc) as well as\ntwo notable files: routes.py  and dash_view.py.\n\nroutes.py\nroutes.py  can contain anything we want. Our application will default to serving\na Flask page, not  a Dash page, so our routes can be an entire standalone\napplication. Here's what I tossed in there: \n\nimport os\nfrom flask import Blueprint, render_template\nfrom flask_assets import Environment, Bundle\nfrom flask import current_app as app\nimport lesscpy\n\nmain_bp = Blueprint('main_bp', __name__,\n                    template_folder='templates',\n                    static_folder='static')\nassets = Environment(app)\nEnvironment.auto_build = True\nEnvironment.debug = False\nless_bundle = Bundle('less/*.less',\n                     filters='less,cssmin',\n                     output='dist/css/plotly-flask-tutorial.css.css',\n                     extra={'rel': 'stylesheet/less'})\njs_bundle = Bundle('js/*.js',\n                   filters='jsmin',\n                   output='dist/js/main.js')\nassets.register('less_all', less_bundle)\nassets.register('js_all', js_bundle)\nless_bundle.build(force=True)\njs_bundle.build()\n\n\n# Landing Page\n@main_bp.route('/', methods=['GET'])\ndef home():\n    return render_template('index.html',\n                           title='Plotly Flask Tutorial.',\n                           template='home-template',\n                           body=\"This is an example homepage, served with Flask.\")\n\n\nAll this is doing is serving up index.html.\n\ndash_view.py\ndash_view.py  is the Dash app we have living within  our Flask app. But how does\nFlask know which url to serve our application at? Wasn't it missing from \nroutes.py? Indeed it was, good fellow! Because we set routes_pathname_prefix, we\n don't need  to create a route for dash_view.py: it will always be served\nwhenever we navigate to 127.0.01/dash_view. Thus, we can create a navigation\ntemplate like this:\n\n<nav>\n  <a href=\"/\"><i class=\"fas fa-home\"></i> Home</a>\n  <a href=\"/dash_view/\"><i class=\"fas fa-chart-line\"></i> Embdedded Plotly Dash</a>\n</nav>\n\n\nCreating Something Useful\nHere's a fun little thing I was able to do with Dash, while in the context of\nrunning under a Flask app. In our file dash_view.py, I have the app look at a\nfolder of extracted datasets (called  /data). For each dataset, I use Pandas to\ngenerate a preview, and Dash's \"data table\" component to render said previews in\nour Dash app. This lets us quickly cruise through the data an app depends on\nwith a cool interface:\n\nA bit rough around the edges, but you get the point.If you're hungry for some\nsource code to get started building your own Plotly Dash views, here's the\nsource I used to create the page above:\n\nimport glob\nfrom pathlib import Path, PurePath\nfrom dash import Dash\nimport dash_table\nimport dash_core_components as dcc\nimport dash_html_components as html\nimport pandas as pd\n\np = Path('.')\n\n\ndef Add_Dash(server):\n    \"\"\"Plot.ly Dash view which populates the screen with loaded DataFrames.\"\"\"\n    external_stylesheets = ['https://hackers.nyc3.cdn.digitaloceanspaces.com/css/plotly-flask-tutorial.css',\n                            'https://fonts.googleapis.com/css?family=Lato',\n                   'https://use.fontawesome.com/releases/v5.8.1/css/all.css']\n    dash_app = Dash(server=server,\n                    external_stylesheets=external_stylesheets,\n                    routes_pathname_prefix='/dash_view/')\n\n    # Override the underlying HTML template\n    dash_app.index_string = '''<!DOCTYPE html>\n        <html>\n            <head>\n                {%metas%}\n                <title>{%title%}</title>\n                {%favicon%}\n                {%css%}\n            </head>\n            <body>\n                <nav>\n                  <a href=\"/\"><i class=\"fas fa-home\"></i> Home</a>\n                  <a href=\"/dash_view/\"><i class=\"fas fa-chart-line\"></i> Embdedded Plotly Dash</a>\n                </nav>\n                {%app_entry%}\n                <footer>\n                    {%config%}\n                    {%scripts%}\n                    {%renderer%}\n                </footer>\n            </body>\n        </html>'''\n\n    # Create Dash Layout comprised of Data Tables\n    dash_app.layout = html.Div(\n        children=get_datasets(),\n        id='flex-container'\n      )\n\n    return dash_app.server\n\n\ndef get_datasets():\n    \"\"\"Returns previews of all CSVs saved in /data directory.\"\"\"\n    data_filepath = list(p.glob('plotly_flask_tutorial/data/*.csv'))\n    arr = ['This is an example Plot.ly Dash App.']\n    for index, csv in enumerate(data_filepath):\n        print(PurePath(csv))\n        df = pd.read_csv(data_filepath[index]).head(10)\n        table_preview = dash_table.DataTable(\n            id='table_' + str(index),\n            columns=[{\"name\": i, \"id\": i} for i in df.columns],\n            data=df.to_dict(\"rows\"),\n            sorting=True,\n        )\n        arr.append(table_preview)\n    return arr\n\n\nI've gone ahead and uploaded the source code for this working example up on\nGithub [https://github.com/toddbirchard/plotlydash-flask-tutorial]. Please steal\nit: it's all yours.\n\nNeedless to say, there's way more cool shit we can accomplish with Plotly Dash.\nStick around long enough, and chances are we'll cover all of them.","html":"<p>Ahh, <a href=\"http://plot.ly/\"><strong>Plot.ly</strong></a>; typing that name into a post headline triggers an emotional cocktail of pride and embarrassment. Over the years Plotly has been at the core of some of the most influential products I’ve worked on: a hodgepodge of Fintech and humanitarian clients, all of which are still proudly waving their charts and dashboards around the world. Yet, my mind is boggled by a simple question: what the <em>hell</em> took us so long to write our first post about Plotly? We've been operating Hackers and Slackers for over a full year now... did I seriously write a<a href=\"https://hackersandslackers.com/making-ajax-calls-with-jquery/\"> post about JQuery</a> in that time before reaching this point?</p><p>Much has changed in the last year or so for our friends in Montreal. Number 1 in my book is the price reduction of their core product: from <em><strong>300 dollars</strong></em> to <em><strong>zero</strong></em>. I paid the 300 dollars. We really need to get a “donate” button around here. </p><p>A close second is undoubtedly the introduction of <strong><a href=\"https://plot.ly/products/dash/\">Plot.ly Dash</a></strong>. <strong>Dash</strong> tickles a sentiment which has danced through many young and helplessly naïve Pythonistas' minds: <em>what if we could write </em><strong><em>only</em></strong><em> in Python, like, </em><strong><em>forever</em></strong><em>?</em> As awful of an idea it is to start Googling Python-to-frontend code interpreters (they exist; I checked), Plotly's Dash does a shockingly good job of breathing life into that romantic fantasy of committing to Python forever.</p><p>But we're not here to deliver a recycled 'W<em>hat is Plotly?'</em> synopsis. We're not even interested in the obligatory '<em>How to Get Started Using This Already-Well-Documented-Technology' </em>post<em>. </em>Plotly deserves better than that. Instead, we're coming hot out of the gate swinging: we're going to show you how to beat Plotly down, break it, and make it bend to your will. Welcome to a magical edition of Hacking Plotly. It must be Christmas, folks.</p><h2 id=\"let-s-make-a-plotly-flask-lovechild-from-hell\">Let's Make a Plotly + Flask Lovechild from Hell</h2><p>Like almost every single advancement to come out of Python-geared architecture this year, Dash has a little secret: it's gotten here with a little help from Flask. Alright, perhaps more than a little: Dash actually extends Flask. Sounds sensible, and perhaps even exciting at first; its almost as though every crush you've ever had decided it be best to simply put their differences aside to start a group chat with you in the interest of making your sexual well-being an equal team effort out of sheer love. As you've already guessed, life doesn't work like that.</p><p>Dash hijacks Flask from the beginning, starting with the way we instantiate the app. Any code monkey who has laid eyes upon a <strong>wsgi.py </strong>file can tell you something is up before you can even say <code>app = dash.Dash(__name__)</code>. Check out the recommended startup boilerplate:</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">from dash import Dash\nimport dash_core_components as dcc\nimport dash_html_components as html\n\nexternal_stylesheets = ['https://codepen.io/fgdsgfhgfh/pen/IHvjvb.css']\n\napp = Dash(__name__, external_stylesheets=external_stylesheets)\n\napp.layout = html.Div(\n        id='example-div-element'\n        )\n\nif __name__ == '__main__':\n    app.run_server(debug=True)\n</code></pre>\n<!--kg-card-end: markdown--><p>If you were to attempt to take this boilerplate and attempt to add core Flask logic, such as authentication with <code>Flask-Login</code>, generating assets with <code>Flask-Assets</code>, or just creating a global database, where would you start? Plotly cleverly suggests reserving the <code>app</code> namespace for your app- the very same that we would do with Flask. Yet if we attempt to modify the <code>app</code> object the same as we would with Flask, nothing will work: Dash has declared an ecosystem, and nowhere in that ecosystem are you invited to add custom Flask application logic out of the box.</p><p>Dash does what it was intended to do very well: building dashboard-based applications. The issue is that applications which can <em>only display data</em> aren't entirely useful as end products. What if we wanted to create a fully-featured app, where data visualization was simply a <em>feature</em> of said app?</p><h2 id=\"creating-a-fully-featured-app-where-data-vis-is-simply-a-feature-of-said-app-\">Creating a Fully-Featured App (Where Data Vis is Simply a Feature of Said App)</h2><p>A common \"workaround\" you'll find in the community is passing Flask to Dash as the underlying \"server\", something like this:</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">from flask import Flask\nfrom dash import Dash\nimport dash_core_components as dcc\nimport dash_html_components as html\n\nserver = Flask(__name__)\napp = dash.Dash(__name__, server=server, url_base_pathname='/path')\napp.layout = html.Div(id='example-div-element')\n\n@server.route(&quot;/dash&quot;)\ndef MyDashApp():\n    return app.index()\n</code></pre>\n<!--kg-card-end: markdown--><p>Make no mistake: this method <em>sucks. </em>Sure, you've regained the ability to create routes here and there, but let's not forget:</p><ul><li>Your app will always start on a Dash-served page: if anything, we'd want our start page to be something we have full control over to then dive into the Dash components.</li><li>Access to globally available Flask plugins are still unavailable in this method. Notice how we never set an application context?</li><li>Your ability to style your application with static assets and styles is completely out of your hands.</li><li>Container architecture built on Flask, such as Google App Engine, won't play nicely when we start something that isn't Flask. So there's a good chance that playing by the rules means losing the ability to deploy.</li></ul><p>If we want to do these things, we cannot start our app as an instance of Dash and attempt to work around it. Instead, we must create a Flask app, and put Dash in its place as an app embedded in <em>our</em> app. This gives us full control over when users can enter the Dash interface, and even within that interface, we can still manage database connections or user sessions as we see fit. Welcome to the big leagues.</p><h2 id=\"turning-the-tables-dash-inside-flask\">Turning the Tables: Dash Inside Flask</h2><p>First things first, let's get our <strong>wsgi.py</strong> file back. Pretty much any hosted Python application expects this, so please: enough with the <strong>app.py</strong> nonsense.</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">from plotly_flask_tutorial import create_app\n\napp = create_app()\n\nif __name__ == &quot;__main__&quot;:\n    app.run(host='0.0.0.0', debug=True)\n</code></pre>\n<!--kg-card-end: markdown--><p>Look familiar? Not only do we get Flask back, but we get our entire application factory and all that it includes. Take a look at <code>application/__init__.py</code><em>:</em></p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">from flask import Flask\nfrom . import dash_view\n\n\ndef create_app():\n    &quot;&quot;&quot;Construct the core application.&quot;&quot;&quot;\n    app = Flask(__name__, instance_relative_config=False)\n    app.config.from_object('config.Config')\n    dash_app = dash_view.Add_Dash(app)\n\n    with app.app_context():\n        # Construct the core application\n        from . import routes\n        app.register_blueprint(routes.main_bp)\n\n        return app\n</code></pre>\n<!--kg-card-end: markdown--><p>It's almost as though nothing changed! In fact, the only line we have regarding Dash here is <code>dash_app = plotly_dash_views.Add_Dash(app)</code>. </p><p>We import <code>dash_view</code> at the start of <code>__init.py__</code>. What is this, you might ask? It's actually a file which contains our Dash app! Dash apps typically like to have a single <em>.py</em> file per view, which turns out to work great for us. Let's look at why this works by checking <code>dash_view.py</code>:</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">import glob\nfrom dash import Dash\nimport dash_table\nimport dash_core_components as dcc\nimport dash_html_components as html\nimport pandas as pd\n\n\ndef Add_Dash(server):\n    &quot;&quot;&quot;Plot.ly Dash view which populates the screen with loaded DataFrames.&quot;&quot;&quot;\n    external_stylesheets = ['https://hackers.nyc3.cdn.digitaloceanspaces.com/css/plotly-flask-tutorial.css']\n    dash_app = Dash(server=server,\n                    external_stylesheets=external_stylesheets,\n                    routes_pathname_prefix='/dash_view/')\n\n    # Create Dash Layout\n    dash_app.layout = html.Div(\n        id='dash-container'\n      )\n\n    return dash_app.server\n</code></pre>\n<!--kg-card-end: markdown--><p>We pass our Flask instance to <code>Add_Dash</code> as a parameter called <em>server. </em>Unlike the previous examples, it's actually <em>server</em> running the show this time, with Dash piggybacking as a module. This is our most important line of code:</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">dash_app = Dash(server=server, routes_pathname_prefix='/dash_view/')\n</code></pre>\n<!--kg-card-end: markdown--><p>Dash doesn't handle routes like Flask does (or at all, really). That's fine! We start <code>dash_app</code> with URL prefix, which means the Dash logic here is confined to that single page. This means we can build a sprawling Flask app with hundreds of features and views, and oh yeah, if we want a Dash view, we can just create a file for that to chill on its own, not touching anything else.</p><p>Now you're thinking with portals<strong>™.</strong></p><h2 id=\"what-our-app-looks-like\">What Our App Looks Like</h2><p>If you're following along, it would probably help to have a top-level view of what's going on so far:</p><!--kg-card-begin: markdown--><pre><code>plotlydash-flask-tutorial\n├── /plotly_flask_tutorial\n│   ├── __init__.py\n│   ├── dash_view.py\n│   ├── routes.py\n│   ├── /data\n│   │   ├── chicago_taxis.csv\n│   │   ├── citibike_trips.csv\n│   │   ├── cities.csv\n│   │   └── pocket.csv\n│   ├── /static\n│   │   ├── dist\n│   │   │   └── css\n│   │   │       └── plotly-flask-tutorial.css\n│   │   ├── js\n│   │   │   └── main.js\n│   │   └── less\n│   │       ├── global.less\n│   │       ├── header.less\n│   │       └── table.less\n│   ├── /templates\n│   │   ├── index.html\n│   │   └── nav.html\n│   └── /data\n│       ├── chicago_taxis.csv\n│       ├── citibike_trips.csv\n│       ├── cities.csv\n│       └── pocket.csv\n├── Pipfile\n├── Pipfile.lock\n├── README.md\n├── config.py\n├── requirements.txt\n├── setup.py\n├── start.sh\n└── wsgi.py\n</code></pre>\n<!--kg-card-end: markdown--><p>We're storing our app within a directory called <code>plotly_flask_tutorial</code>. In that directory, we have our typical Flask stuff (<strong>/templates</strong>, <strong>/static</strong>, etc) as well as two notable files: <code>routes.py</code> and <code>dash_view.py</code>.</p><h3 id=\"routes-py\">routes.py</h3><p><code>routes.py</code> can contain anything we want. Our application will default to serving a Flask page, <em>not</em> a Dash page, so our routes can be an entire standalone application. Here's what I tossed in there: </p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">import os\nfrom flask import Blueprint, render_template\nfrom flask_assets import Environment, Bundle\nfrom flask import current_app as app\nimport lesscpy\n\nmain_bp = Blueprint('main_bp', __name__,\n                    template_folder='templates',\n                    static_folder='static')\nassets = Environment(app)\nEnvironment.auto_build = True\nEnvironment.debug = False\nless_bundle = Bundle('less/*.less',\n                     filters='less,cssmin',\n                     output='dist/css/plotly-flask-tutorial.css.css',\n                     extra={'rel': 'stylesheet/less'})\njs_bundle = Bundle('js/*.js',\n                   filters='jsmin',\n                   output='dist/js/main.js')\nassets.register('less_all', less_bundle)\nassets.register('js_all', js_bundle)\nless_bundle.build(force=True)\njs_bundle.build()\n\n\n# Landing Page\n@main_bp.route('/', methods=['GET'])\ndef home():\n    return render_template('index.html',\n                           title='Plotly Flask Tutorial.',\n                           template='home-template',\n                           body=&quot;This is an example homepage, served with Flask.&quot;)\n</code></pre>\n<!--kg-card-end: markdown--><p>All this is doing is serving up <code>index.html</code>.</p><h3 id=\"dash_view-py\">dash_view.py</h3><p><code>dash_view.py</code> is the Dash app we have living <em>within</em> our Flask app. But how does Flask know which url to serve our application at? Wasn't it missing from <code>routes.py</code>? Indeed it was, good fellow! Because we set <strong>routes_pathname_prefix</strong>, we <em>don't need</em> to create a route for <code>dash_view.py</code>: it will always be served whenever we navigate to <code>127.0.01/dash_view</code>. Thus, we can create a navigation template like this:</p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">&lt;nav&gt;\n  &lt;a href=&quot;/&quot;&gt;&lt;i class=&quot;fas fa-home&quot;&gt;&lt;/i&gt; Home&lt;/a&gt;\n  &lt;a href=&quot;/dash_view/&quot;&gt;&lt;i class=&quot;fas fa-chart-line&quot;&gt;&lt;/i&gt; Embdedded Plotly Dash&lt;/a&gt;\n&lt;/nav&gt;\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"creating-something-useful\">Creating Something Useful</h2><p>Here's a fun little thing I was able to do with Dash, while in the context of running under a Flask app. In our file <code>dash_view.py</code>, I have the app look at a folder of extracted datasets (called<em> /data</em>). For each dataset, I use Pandas to generate a preview, and Dash's \"data table\" component to render said previews in our Dash app. This lets us quickly cruise through the data an app depends on with a cool interface:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/dataframes.gif\" class=\"kg-image\"><figcaption>A bit rough around the edges, but you get the point.</figcaption></figure><!--kg-card-end: image--><p>If you're hungry for some source code to get started building your own Plotly Dash views, here's the source I used to create the page above:</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">import glob\nfrom pathlib import Path, PurePath\nfrom dash import Dash\nimport dash_table\nimport dash_core_components as dcc\nimport dash_html_components as html\nimport pandas as pd\n\np = Path('.')\n\n\ndef Add_Dash(server):\n    &quot;&quot;&quot;Plot.ly Dash view which populates the screen with loaded DataFrames.&quot;&quot;&quot;\n    external_stylesheets = ['https://hackers.nyc3.cdn.digitaloceanspaces.com/css/plotly-flask-tutorial.css',\n                            'https://fonts.googleapis.com/css?family=Lato',\n                   'https://use.fontawesome.com/releases/v5.8.1/css/all.css']\n    dash_app = Dash(server=server,\n                    external_stylesheets=external_stylesheets,\n                    routes_pathname_prefix='/dash_view/')\n\n    # Override the underlying HTML template\n    dash_app.index_string = '''&lt;!DOCTYPE html&gt;\n        &lt;html&gt;\n            &lt;head&gt;\n                {%metas%}\n                &lt;title&gt;{%title%}&lt;/title&gt;\n                {%favicon%}\n                {%css%}\n            &lt;/head&gt;\n            &lt;body&gt;\n                &lt;nav&gt;\n                  &lt;a href=&quot;/&quot;&gt;&lt;i class=&quot;fas fa-home&quot;&gt;&lt;/i&gt; Home&lt;/a&gt;\n                  &lt;a href=&quot;/dash_view/&quot;&gt;&lt;i class=&quot;fas fa-chart-line&quot;&gt;&lt;/i&gt; Embdedded Plotly Dash&lt;/a&gt;\n                &lt;/nav&gt;\n                {%app_entry%}\n                &lt;footer&gt;\n                    {%config%}\n                    {%scripts%}\n                    {%renderer%}\n                &lt;/footer&gt;\n            &lt;/body&gt;\n        &lt;/html&gt;'''\n\n    # Create Dash Layout comprised of Data Tables\n    dash_app.layout = html.Div(\n        children=get_datasets(),\n        id='flex-container'\n      )\n\n    return dash_app.server\n\n\ndef get_datasets():\n    &quot;&quot;&quot;Returns previews of all CSVs saved in /data directory.&quot;&quot;&quot;\n    data_filepath = list(p.glob('plotly_flask_tutorial/data/*.csv'))\n    arr = ['This is an example Plot.ly Dash App.']\n    for index, csv in enumerate(data_filepath):\n        print(PurePath(csv))\n        df = pd.read_csv(data_filepath[index]).head(10)\n        table_preview = dash_table.DataTable(\n            id='table_' + str(index),\n            columns=[{&quot;name&quot;: i, &quot;id&quot;: i} for i in df.columns],\n            data=df.to_dict(&quot;rows&quot;),\n            sorting=True,\n        )\n        arr.append(table_preview)\n    return arr\n</code></pre>\n<!--kg-card-end: markdown--><p>I've gone ahead and uploaded the source code for this working example up <a href=\"https://github.com/toddbirchard/plotlydash-flask-tutorial\">on Github</a>. Please steal it: it's all yours.</p><p>Needless to say, there's way more cool shit we can accomplish with Plotly Dash. Stick around long enough, and chances are we'll cover all of them.</p>","url":"https://hackersandslackers.com/gaining-full-control-over-plotly-dash/","uuid":"535768b9-34b6-4a80-b5fa-b69b50cf3a68","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c1af93bffe54a660c58b85a"}}]}},"pageContext":{"slug":"plotly","limit":12,"skip":0,"numberOfPages":1,"humanPageNumber":1,"prevPageNumber":null,"nextPageNumber":null,"previousPagePath":null,"nextPagePath":null}}