{"data":{"ghostPost":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673634","title":"Starting an ExpressJS App","slug":"create-an-expressjs-app","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2017/11/expressjs@2x.jpg","excerpt":"Installation guide for ExpressJS with popular customization options.","custom_excerpt":"Installation guide for ExpressJS with popular customization options.","created_at_pretty":"18 November, 2017","published_at_pretty":"18 November, 2017","updated_at_pretty":"07 March, 2019","created_at":"2017-11-18T08:44:44.000-05:00","published_at":"2017-11-18T08:54:54.000-05:00","updated_at":"2019-03-07T01:39:46.000-05:00","meta_title":"Starting an ExpressJS App | Hackers and Slackers","meta_description":"Installation guide for ExpressJS with popular customization options","og_description":"Installation guide for ExpressJS with popular customization options","og_image":"https://hackersandslackers.com/content/images/2017/11/expressjs@2x.jpg","og_title":"Starting an ExpressJS App","twitter_description":"Installation guide for ExpressJS with popular customization options","twitter_image":"https://hackersandslackers.com/content/images/2017/11/expressjs@2x.jpg","twitter_title":"Starting an ExpressJS App","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},"tags":[{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},{"name":"ExpressJS","slug":"expressjs","description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch as a simplistic Express app can evolve into a beautiful monstrosity.","feature_image":null,"meta_description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch a simplistic Express app can evolve into a beautiful monstrosity.","meta_title":"ExpressJS Framework | Hackers and Slackers","visibility":"public"}],"plaintext":"Over the past few months I've found myself spinning up tons of new servers and\nwalking through the process of pushing express apps live.\n\nBecause this process always comes at unexpected times, I've never bothered\ndocumenting the steps it takes to get a blank box running express. Surprisingly\nit seems as though few have bothered to walk through every step involved in a\nsingle place, and most express tutorials contain outdated information which\nlikely leads to headaches for newcomers.\n\nI'll be walking through an ExpressJS setup with the tech I always opt for.\n\nStack\n * NodeJS\n * NPM\n * Nginx\n * Express\n * Express-Generator\n * Sass\n * Handlebars\n * PM2\n * Grunt\n\nInstallation\nPrep your server by installing the latest updates:\n\n$ apt-get update\n$ apt-get upgrade -y\n\n\nNodeJS\nOf the things we'll be installing prior to development, NodeJS is the trickiest.\nUnlike other packages, we cannot simply use Ubuntu's apt-get install  command\nfor Node. NodeJS for Linux distributions is best installed via NodeSource, which\nis handled as such:\n\n$ apt update\n$ apt upgrade -y\n$ curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -\n$ sudo apt-get install -y nodejs\n$ sudo apt-get install gcc g++ make\n$ sudo npm install -g npm@latest\n\n\nNote that this also hooks us up with the latest version of NPM, so we're all\ngood on that front.\n\nNginx\nLet's install Nginx before we forget. We'll come back to Nginx later to set up\nthe config.\n\napt-get install nginx\n\n\nExpress\nWe'll install express globally. This way we can support multiple apps running\nexpress, as well as use an express generator to easily create more projects down\nthe line.\n\nnpm install -g express\n\n\nExpress generator\nInstall express generator globally. Express generator is the easiest way to set\nup a new express app with the standard structure preconfigured.\n\nnpm install -g express-generator\n\n\nCreate an App\nNow we get to the fun stuff.\n\n$ cd  to the directory you'll be using to contain your apps, such as /home  or \n/var/www. When we use express-generator  in this directory, we'll be\ninitializing a new express project will most of the common boilerplate setup\npreconfigured.\n\nThis will create your Express app inside /home/myapp:\n\ncd /home\n\nexpress --view=hbs --css=less myapp\n\n\nExpress-generator prompts you to pass arguments to automatically configure your\nproject for you. We're able to specify which CSS preprocessor and templating\nsystem we prefer this way. I'm going to create a project using Handlebars and\nSass as my weapons of choice.\n\nThese are the options that come with express-generator in case you'd like to\ncustomize your installation:\n\n$ express -h\n\n  Usage: express [options] [dir]\n\n  Options:\n\n    -h, --help          output usage information\n        --version       output the version number\n    -e, --ejs           add ejs engine support\n        --hbs           add handlebars engine support\n        --pug           add pug engine support\n    -H, --hogan         add hogan.js engine support\n    -v, --view <engine> add view <engine> support (ejs|hbs|hjs|jade|pug|twig|vash) (defaults to jade)\n    -c, --css <engine>  add stylesheet <engine> support (less|stylus|compass|sass) (defaults to plain css)\n        --git           add .gitignore\n    -f, --force         force on non-empty directory\n\n\nWarning: common bug ahead\nIf your life sucks, running express generator may have given you this error:\n\n/usr/bin/env: ‘node’: No such file or directory\n\n\nThis is an issue with Debian distributions of linux which treat 'node' and\n'nodejs' as separate filepaths. To alleviate this, create the following symbolic\nlink:\n\nln -s /usr/bin/nodejs /usr/bin/node\n\n\nStart App\nInside your project directory run npm install  to install all dependancies for\nyour project. This will look at the package.json  file that express-generator\ncreated and will install the corresponding node modules.\n\ncd myapp\n\nnpm install\n\n\nHere's the result:\n\n.\n├── app.js\n├── bin\n│   └── www\n├── package.json\n├── public\n│   ├── images\n│   ├── javascripts\n│   └── stylesheets\n│       └── style.css\n├── routes\n│   ├── index.js\n│   └── users.js\n└── views\n    ├── error.pug\n    ├── index.pug\n    └── layout.pug\n\n7 directories, 9 files\n\n\nSet up Nginx Config\nBefore creating your Nginx config, it is best to verify which port express will\nbe running on. In most recent versions of express, this can be found in the www\nfile. The path to this looks like myapp/bin/www.\n\nCheck out that file and see what the value is for var port.\n\nvim bin/www\n\n\nYou should see something like this:\n\nvar port = normalizePort(process.env.PORT || '3000');\n\n\nThus, the port is 3000. Remember this.\n\nPreviously this information was stored in Express's app.js  file.\n\nNow, create a Nginx config in sites-available:\n\nvim /etc/nginx/sites-available/myapp\n\n\nFor a basic reverse proxy server configuration, use the configuration below.\n\nBe sure to replace the port with the port you found earlier.\n\nserver {\n    listen 80;\n\n    server_name example.com www.example.com;\n\n    location / {\n        proxy_pass http://127.0.0.1:3000; #Replace port here\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n\n    location ~ /.well-known {\n        allow all;\n    }\n\n    client_max_body_size 50m;\n}\n\n\nSave this out. Now create a symbolic link to have this appear in sites enabled,\nand restart Nginx.\n\nln -s /etc/nginx/sites-available/myapp /etc/nginx/sites-enabled/myapp \n\nservice nginx restart\n\n\nRun your app\nNow your web server is pointing to the correct place, but your app isn't\nactually running. To keep your app running continuously, we'll use PM2.\n\nInstall pm2 globally:\n\nnpm install pm2 -g\n\n\nGo to your app's directory, and start your app using PM2:\n\ncd /home/myapp\n\npm2 start bin/www\n\n\nIf successful, PM2 should then list your app as running.\n\nYou can run as many express apps on one server as you like:\n\n┌──────────┬────┬──────┬───────┬────────┬─────────┬────────┬─────┬───────────┬──────┬──────────┐\n│ App name │ id │ mode │ pid   │ status │ restart │ uptime │ cpu │ mem       │ user │ watching │\n├──────────┼────┼──────┼───────┼────────┼─────────┼────────┼─────┼───────────┼──────┼──────────┤\n│ www      │ 0  │ fork │ 8953  │ online │ 79      │ 35h    │ 0%  │ 44.6 MB   │ root │ disabled │\n│ www      │ 1  │ fork │ 18195 │ online │ 0       │ 3D     │ 0%  │ 22.3 MB   │ root │ disabled │\n│ www      │ 2  │ fork │ 19990 │ online │ 0       │ 33h    │ 0%  │ 49.2 MB   │ root │ disabled │\n└──────────┴────┴──────┴───────┴────────┴─────────┴────────┴─────┴───────────┴──────┴──────────┘\n\n\nYour app should now be accessible via your domain.\n\nFinal items\nYour app is up and running, but you're not in the clear yet. To have things\nfully configured, you'll need to set up grunt or gulp to compress your source\nfor production.\n\nConfiguring gulp files is a tutorial in its own right. Otherwise, you're good to\ngo to serve static files directly out of the /public  folder.","html":"<p>Over the past few months I've found myself spinning up tons of new servers and walking through the process of pushing express apps live.</p><p>Because this process always comes at unexpected times, I've never bothered documenting the steps it takes to get a blank box running express. Surprisingly it seems as though few have bothered to walk through every step involved in a single place, and most express tutorials contain outdated information which likely leads to headaches for newcomers.</p><p>I'll be walking through an ExpressJS setup with the tech I always opt for.</p><h2 id=\"stack\">Stack</h2><ul><li>NodeJS</li><li>NPM</li><li>Nginx</li><li>Express</li><li>Express-Generator</li><li>Sass</li><li>Handlebars</li><li>PM2</li><li>Grunt</li></ul><h2 id=\"installation\">Installation</h2><p>Prep your server by installing the latest updates:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">$ apt-get update\n$ apt-get upgrade -y\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"nodejs\">NodeJS</h3><p>Of the things we'll be installing prior to development, NodeJS is the trickiest. Unlike other packages, we cannot simply use Ubuntu's <code>apt-get install</code> command for Node. NodeJS for Linux distributions is best installed via NodeSource, which is handled as such:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">$ apt update\n$ apt upgrade -y\n$ curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -\n$ sudo apt-get install -y nodejs\n$ sudo apt-get install gcc g++ make\n$ sudo npm install -g npm@latest\n</code></pre>\n<!--kg-card-end: markdown--><p>Note that this also hooks us up with the latest version of NPM, so we're all good on that front.</p><h3 id=\"nginx\">Nginx</h3><p>Let's install Nginx before we forget. We'll come back to Nginx later to set up the config.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">apt-get install nginx\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"express\">Express</h3><p>We'll install express globally. This way we can support multiple apps running express, as well as use an express generator to easily create more projects down the line.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">npm install -g express\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"express-generator\">Express generator</h3><p>Install express generator globally. Express generator is the easiest way to set up a new express app with the standard structure preconfigured.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">npm install -g express-generator\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"create-an-app\">Create an App</h2><p>Now we get to the fun stuff.</p><p><code>$ cd</code> to the directory you'll be using to contain your apps, such as <code>/home</code> or <code>/var/www</code>. When we use <code>express-generator</code> in this directory, we'll be initializing a new express project will most of the common boilerplate setup preconfigured.</p><p>This will create your Express app inside <code>/home/myapp</code>:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">cd /home\n\nexpress --view=hbs --css=less myapp\n</code></pre>\n<!--kg-card-end: markdown--><p>Express-generator prompts you to pass arguments to automatically configure your project for you. We're able to specify which CSS preprocessor and templating system we prefer this way. I'm going to create a project using Handlebars and Sass as my weapons of choice.</p><p>These are the options that come with express-generator in case you'd like to customize your installation:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ express -h\n\n  Usage: express [options] [dir]\n\n  Options:\n\n    -h, --help          output usage information\n        --version       output the version number\n    -e, --ejs           add ejs engine support\n        --hbs           add handlebars engine support\n        --pug           add pug engine support\n    -H, --hogan         add hogan.js engine support\n    -v, --view &lt;engine&gt; add view &lt;engine&gt; support (ejs|hbs|hjs|jade|pug|twig|vash) (defaults to jade)\n    -c, --css &lt;engine&gt;  add stylesheet &lt;engine&gt; support (less|stylus|compass|sass) (defaults to plain css)\n        --git           add .gitignore\n    -f, --force         force on non-empty directory\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"warning-common-bug-ahead\">Warning: common bug ahead</h2><p>If your life sucks, running express generator may have given you this error:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">/usr/bin/env: ‘node’: No such file or directory\n</code></pre>\n<!--kg-card-end: markdown--><p>This is an issue with Debian distributions of linux which treat 'node' and 'nodejs' as separate filepaths. To alleviate this, create the following symbolic link:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">ln -s /usr/bin/nodejs /usr/bin/node\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"start-app\">Start App</h2><p>Inside your project directory run <strong>npm install</strong> to install all dependancies for your project. This will look at the <code>package.json</code> file that express-generator created and will install the corresponding node modules.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">cd myapp\n\nnpm install\n</code></pre>\n<!--kg-card-end: markdown--><p>Here's the result:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">.\n├── app.js\n├── bin\n│   └── www\n├── package.json\n├── public\n│   ├── images\n│   ├── javascripts\n│   └── stylesheets\n│       └── style.css\n├── routes\n│   ├── index.js\n│   └── users.js\n└── views\n    ├── error.pug\n    ├── index.pug\n    └── layout.pug\n\n7 directories, 9 files\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"set-up-nginx-config\">Set up Nginx Config</h2><p>Before creating your Nginx config, it is best to verify which port express will be running on. In most recent versions of express, this can be found in the www file. The path to this looks like myapp/bin/www.</p><p>Check out that file and see what the value is for var port.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">vim bin/www\n</code></pre>\n<!--kg-card-end: markdown--><p>You should see something like this:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">var port = normalizePort(process.env.PORT || '3000');\n</code></pre>\n<!--kg-card-end: markdown--><p>Thus, the port is 3000. Remember this.</p><p>Previously this information was stored in Express's <code>app.js</code> file.</p><p>Now, create a Nginx config in sites-available:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">vim /etc/nginx/sites-available/myapp\n</code></pre>\n<!--kg-card-end: markdown--><p>For a basic reverse proxy server configuration, use the configuration below.</p><p>Be sure to replace the port with the port you found earlier.</p><!--kg-card-begin: markdown--><pre><code class=\"language-nginx\">server {\n    listen 80;\n\n    server_name example.com www.example.com;\n\n    location / {\n        proxy_pass http://127.0.0.1:3000; #Replace port here\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n\n    location ~ /.well-known {\n        allow all;\n    }\n\n    client_max_body_size 50m;\n}\n</code></pre>\n<!--kg-card-end: markdown--><p>Save this out. Now create a symbolic link to have this appear in sites enabled, and restart Nginx.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">ln -s /etc/nginx/sites-available/myapp /etc/nginx/sites-enabled/myapp \n\nservice nginx restart\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"run-your-app\">Run your app</h2><p>Now your web server is pointing to the correct place, but your app isn't actually running. To keep your app running continuously, we'll use PM2.</p><p>Install pm2 globally:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">npm install pm2 -g\n</code></pre>\n<!--kg-card-end: markdown--><p>Go to your app's directory, and start your app using PM2:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">cd /home/myapp\n\npm2 start bin/www\n</code></pre>\n<!--kg-card-end: markdown--><p>If successful, PM2 should then list your app as running.</p><p>You can run as many express apps on one server as you like:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">┌──────────┬────┬──────┬───────┬────────┬─────────┬────────┬─────┬───────────┬──────┬──────────┐\n│ App name │ id │ mode │ pid   │ status │ restart │ uptime │ cpu │ mem       │ user │ watching │\n├──────────┼────┼──────┼───────┼────────┼─────────┼────────┼─────┼───────────┼──────┼──────────┤\n│ www      │ 0  │ fork │ 8953  │ online │ 79      │ 35h    │ 0%  │ 44.6 MB   │ root │ disabled │\n│ www      │ 1  │ fork │ 18195 │ online │ 0       │ 3D     │ 0%  │ 22.3 MB   │ root │ disabled │\n│ www      │ 2  │ fork │ 19990 │ online │ 0       │ 33h    │ 0%  │ 49.2 MB   │ root │ disabled │\n└──────────┴────┴──────┴───────┴────────┴─────────┴────────┴─────┴───────────┴──────┴──────────┘\n</code></pre>\n<!--kg-card-end: markdown--><p>Your app should now be accessible via your domain.</p><h2 id=\"final-items\">Final items</h2><p>Your app is up and running, but you're not in the clear yet. To have things fully configured, you'll need to set up grunt or gulp to compress your source for production.</p><p>Configuring gulp files is a tutorial in its own right. Otherwise, you're good to go to serve static files directly out of the <code>/public</code> folder.</p>","url":"https://hackersandslackers.com/create-an-expressjs-app/","uuid":"048b6212-5dbf-429c-b86d-d3fc65238e06","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5a10394c3858167c7082486e"}},"pageContext":{"slug":"create-an-expressjs-app"}}