{"data":{"ghostPost":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673735","title":"Reselling AWS Load Balancing","slug":"reselling-aws-load-balancer","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/11/loadbalancer@2x.jpg","excerpt":"Providing Cloud Load Balancing for your customers; My ultimatum.","custom_excerpt":"Providing Cloud Load Balancing for your customers; My ultimatum.","created_at_pretty":"12 November, 2018","published_at_pretty":"12 November, 2018","updated_at_pretty":"13 November, 2018","created_at":"2018-11-11T19:49:57.000-05:00","published_at":"2018-11-11T20:16:49.000-05:00","updated_at":"2018-11-12T23:05:57.000-05:00","meta_title":"Reselling AWS Load Balancing | Hackers and Slackers","meta_description":"Providing Cloud Load Balancing for your customers by leveraging AWS.","og_description":"Providing Cloud Load Balancing for your customers by leveraging AWS.","og_image":"https://hackersandslackers.com/content/images/2018/11/loadbalancer@2x.jpg","og_title":"Reselling AWS Load Balancing | Hackers and Slackers","twitter_description":"Providing Cloud Load Balancing for your customers by leveraging AWS.","twitter_image":"https://hackersandslackers.com/content/images/2018/11/loadbalancer@2x.jpg","twitter_title":"Reselling AWS Load Balancing | Hackers and Slackers","authors":[{"name":"Ryan Rosado","slug":"xodz","bio":"World renowned DJ who got his start from being famous on the internet. Averages 3 headshots per second in daily life and pays for all and essentials in bitcoin.","profile_image":"https://hackersandslackers.com/content/images/2019/03/ryan2.jpg","twitter":"@Zawdz","facebook":null,"website":"http://twitch.tv/xodz/videos/all"}],"primary_author":{"name":"Ryan Rosado","slug":"xodz","bio":"World renowned DJ who got his start from being famous on the internet. Averages 3 headshots per second in daily life and pays for all and essentials in bitcoin.","profile_image":"https://hackersandslackers.com/content/images/2019/03/ryan2.jpg","twitter":"@Zawdz","facebook":null,"website":"http://twitch.tv/xodz/videos/all"},"primary_tag":{"name":"AWS","slug":"aws","description":"Monolithic cloud architecture via microservices. Become familiar with AWS products, account administration, security practices, and tips to make it all easier.","feature_image":null,"meta_description":"Become familiar with AWS services, account administration, security practices, and tips to make it all easier.","meta_title":"Learn AWS | Hackers and Slackers","visibility":"public"},"tags":[{"name":"AWS","slug":"aws","description":"Monolithic cloud architecture via microservices. Become familiar with AWS products, account administration, security practices, and tips to make it all easier.","feature_image":null,"meta_description":"Become familiar with AWS services, account administration, security practices, and tips to make it all easier.","meta_title":"Learn AWS | Hackers and Slackers","visibility":"public"},{"name":"DevOps","slug":"devops","description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","feature_image":null,"meta_description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","meta_title":"DevOps: Networking And Server Configuration | Hackers and Slackers","visibility":"public"}],"plaintext":"Let's say we have a hosting service for users who bring their own domain name.\nIn this scenario we'd like to be able to service customers no matter who manages\ntheir DNS records. Be it GoDaddy, Namecheap, Google, Hostgator, some offshore\nplace, etc.\n\nAt the same time, we'd also like to provide Load balancing so no one-user can\noverload any of our systems. This means, instead of having a customer's domain\nname point directly to the system where their webserver or app resides, it will\npoint the HTTP connection to a Load Balancer which is prepared to handle serious\nconnection load before divvying it out to whichever cluster of systems is ready\nto deliver the user's content. \n\nIn an ideal world, we would have the user point their domain name to the Load\nBalancer's IP address. Very simple DNS A-Record adjustment. \n\nIn the real world, these type of cloud load balancers run over several ip\naddresses that rotate over time. So, if we were to place one of these IP\naddresses in a domain name's A-Record, it would soon be useless as it rotates\nout. Instead, the cloud load balancer offers us an end point (also an A-Record)\nsuch as 'entrypoint-797000074.us-east-1.elb.amazonaws.com', which is static\nwhile they dynamically rotate the IP addresses the entrypoint leads to. \n\nThe catch? You can't place an A-Record in another DNS A-Record, you can only\nplace an IP address in an A-Record. the DNS A-Record is simply a key-value pair\nwhere the key  is the Domain name (yoursiteEndpoint.com) and the value  is an IP\naddress (and nothing else). \n\nThen how do we leverage a cloud load balancer for our customers?\n\n{workaround}  Each customer with their own domain name must make the following\nchanges in their DNS provider records. \n\n * Make a CNAME Record called \"www\" which leads to the AWS Load Balancer\n   A-Record ('entrypoint-797000074.us-east-1.elb.amazonaws.com)\n * Setup DNS forwarding so customersite.com forwards to www.customersite.com\n\nThe Problem:  The customer will literally be entering evident AWS data into\ntheir config, and it's much more information to update than just an IP address\nin an A-Record. \n\nMore Options: \n\n{Route 53 Nameservers}  You have to automate Route 53, adding a new Hosted Zone\nbased on the customer's domain name, retrieve and deliver the Route 53 Hosted\nZone nameservers to the customer so the customer can update their DNS records at\ntheir service of choice.\n\nThe Problem:  Lots more automation and costs, AWS 500 Hosted Zone limit, more\ncustomer sync interaction\n\nMy Ultimatum:\nMake my own Load Balancer out of a network-enhanced AWS EC2 instance. I will\ngive two options for the customers - the simple A-record update to EC2-instance\nstatic IP. If they want DDoS protection and load balancing, they can do the \n{workaround}  step above additionally. If they decide not to do {workaround} \nstep above, the customer understands that we are leaving leaving the uptime\ncompletely up to the EC2 instance IP address.  Also, forget that Route 53\nnameservers update BS, as that is way too much additional business logic\nautomation and costs for reselling standpoint.","html":"<p>Let's say we have a hosting service for users who bring their own domain name. In this scenario we'd like to be able to service customers no matter who manages their DNS records. Be it GoDaddy, Namecheap, Google, Hostgator, some offshore place, etc.</p><p>At the same time, we'd also like to provide Load balancing so no one-user can overload any of our systems. This means, instead of having a customer's domain name point directly to the system where their webserver or app resides, it will point the HTTP connection to a Load Balancer which is prepared to handle serious connection load before divvying it out to whichever cluster of systems is ready to deliver the user's content. </p><p>In an ideal world, we would have the user point their domain name to the Load Balancer's IP address. Very simple DNS A-Record adjustment. </p><p>In the real world, these type of cloud load balancers run over several ip addresses that rotate over time. So, if we were to place one of these IP addresses in a domain name's A-Record, it would soon be useless as it rotates out. Instead, the cloud load balancer offers us an end point (also an A-Record) such as 'entrypoint-797000074.us-east-1.elb.amazonaws.com', which is static while they dynamically rotate the IP addresses the entrypoint leads to. </p><p>The catch? You can't place an A-Record in another DNS A-Record, you can only place an IP address in an A-Record. the DNS A-Record is simply a key-value pair where the <em>key</em> is the Domain name (yoursiteEndpoint.com) and the <em>value</em> is an IP address (and nothing else). </p><p>Then how do we leverage a cloud load balancer for our customers?</p><p><em>{workaround}</em> Each customer with their own domain name must make the following changes in their DNS provider records. </p><ul><li>Make a CNAME Record called \"www\" which leads to the AWS Load Balancer A-Record ('entrypoint-797000074.us-east-1.elb.amazonaws.com)</li><li>Setup DNS forwarding so customersite.com forwards to www.customersite.com</li></ul><p><em>The Problem:</em><strong> </strong>The customer will literally be entering evident AWS data into their config, and it's much more information to update than just an IP address in an A-Record. </p><p>More Options: </p><p><em>{Route 53 Nameservers}</em> You have to automate Route 53, adding a new Hosted Zone based on the customer's domain name, retrieve and deliver the Route 53 Hosted Zone nameservers to the customer so the customer can update their DNS records at their service of choice.</p><p><em>The Problem:</em> Lots more automation and costs, AWS 500 Hosted Zone limit, more customer sync interaction</p><h2 id=\"my-ultimatum-\">My Ultimatum:</h2><p>Make my own Load Balancer out of a network-enhanced AWS EC2 instance. I will give two options for the customers - the simple A-record update to EC2-instance static IP. If they want DDoS protection and load balancing, they can do the <em>{workaround}</em> step above additionally. If they decide not to do <em>{workaround}</em> step above, the customer understands that we are leaving leaving the uptime completely up to the EC2 instance IP address.  Also, forget that Route 53 nameservers update BS, as that is way too much additional business logic automation and costs for reselling standpoint. </p>","url":"https://hackersandslackers.com/reselling-aws-load-balancer/","uuid":"5dd15e2a-c368-4717-900c-e85095331c4b","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5be8ce3574f90031d0a61650"}},"pageContext":{"slug":"reselling-aws-load-balancer"}}