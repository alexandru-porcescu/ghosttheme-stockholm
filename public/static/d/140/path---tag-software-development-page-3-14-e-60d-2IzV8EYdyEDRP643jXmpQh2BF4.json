{"data":{"ghostTag":{"slug":"software-development","name":"Software Development","visibility":"public","feature_image":null,"description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","meta_description":"General software development principals and tools. Receive insights applicable to building any application."},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673660","title":"Using Gulp: Tasks to Make Frontend Tolerable","slug":"using-gulp-to-make-frontend-tolerable","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/gulp-1.jpg","excerpt":"Optimize your frontend code with Gulp: the task runner to make you production-ready.","custom_excerpt":"Optimize your frontend code with Gulp: the task runner to make you production-ready.","created_at_pretty":"30 May, 2018","published_at_pretty":"30 May, 2018","updated_at_pretty":"28 March, 2019","created_at":"2018-05-29T23:28:01.000-04:00","published_at":"2018-05-30T12:40:20.000-04:00","updated_at":"2019-03-28T05:58:57.000-04:00","meta_title":"Using Gulp to Make Frontend Tolerable | Hackers and Slackers","meta_description":"Automate tasks for production deployment such as compiling your CSS and JS","og_description":"Optimize your frontend code with Gulp: the task runner to make you production-ready.","og_image":"https://hackersandslackers.com/content/images/2019/03/gulp-1.jpg","og_title":"Using Gulp to Make Frontend Tolerable","twitter_description":"Automate the lame stuff","twitter_image":"https://hackersandslackers.com/content/images/2019/03/gulp-1.jpg","twitter_title":"Using Gulp to Make Frontend Tolerable","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},"tags":[{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},{"name":"ExpressJS","slug":"expressjs","description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch as a simplistic Express app can evolve into a beautiful monstrosity.","feature_image":null,"meta_description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch a simplistic Express app can evolve into a beautiful monstrosity.","meta_title":"ExpressJS Framework | Hackers and Slackers","visibility":"public"},{"name":"Frontend","slug":"frontend","description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","feature_image":null,"meta_description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","meta_title":"Frontend Development | Hackers and Slackers","visibility":"public"},{"name":"JavaScript","slug":"javascript","description":"JavaScript covering both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","feature_image":null,"meta_description":"JavaScript topics, both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","meta_title":"Javascript Tutorials | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"}],"plaintext":"NOTE:  This tutorial was written for Gulp versions <4.0.0. Check out this post\n[https://hackersandslackers.com/upgrading-to-gulp-4/]  for Gulp >4.0.0\n\n\n--------------------------------------------------------------------------------\n\nPerhaps the whole obligatory-Gulp-tutorial on [Some Coding Blog] thing has\nbecome a bit cliché at this point. Haters may do as they will, but I 'll take\nany opportunity to jam as many SEO keywords I can get at this point. You know\nthe ones: Gulp, ExpressJS, NodeJS, or perhaps even React Vue frontend Ubuntu\nframework API social cloud data entrepreneur community. \n\nRegardless, we all need our own copy+paste references from time-to-time, or even\nworse: when we copy/paste our gulpfile.js from project to project and forget\nwhat they actually do. I won't tell anybody.\n\nQuick 101\nNodeJS developers use Gulp to automate necessary processes before moving their\nfrontend code to production. This includes minifying files to make them run\nfaster, and to also make them unreadable to people who would otherwise make fun\nof your mediocre Javascript which you were forced to crank out on a short\ntimeline.\n\nGeneral Workflow\nLet's say you're running a basic Express app. As opposed to developing and\nstoring files in a directory such as /public, Gulp enables us to develop in one\ndirectory, and compile to another. That means we can keep our horrible\nuncompressed and uncompiled  source in a folder such as /src, and output them to\na directory such as /dist, which would be our public-facing output. An Express\nfile structure utilizing this would look something like this:\n\n  |- src/\n      |- js/ \n      |- scss/\n  |- dist/\n      |- js/ \n      |- css/\n      |- img/\n      |- fonts/\n  |- views\n      |- index.hbs\n  |- routes\n      |- index.js\n  |- gulpfile.js\n  |- node_modules/\n  |- package.json\n  |- app.js\n\n\nInstallation\nFirst install the gulp CLI:\n\nnpm install --global gulp-cli\n\n\nNext, enter your project folder and install gulp while saving it as  a project\ndependency.\n\nnpm install --save gulp\n\n\nHow it Works\nGulp doesn't do much on its own; the true magic lies within its vast library of\nplugins. Each individual plugin typically covers a simple task, such as\ncompiling LESS or SASS files, or minifying client-side JavaScript and CSS. The\nlimited scope of plugins entails a bit of setup in our gulpfile to chain said\ntasks together, but it also makes Gulp highly customizable to cater to your\nspecific needs.\n\nThe Gulpfile\nGulp works by invoking a file called gulpfile.js in your main directory, which\nyou'll need to create and set up yourself (sorry). The file is divided into two\nmain parts: requiring (importing) plugins, and defining which tasks to run when\ngulp is invoked. A basic worthless gulpfile might look something like:\n\nvar gulp = require('gulp');\n\ngulp.task('default', function () {\n  console.log('Sup World!');\n});\n\n\nTo make this file useful, we'll need to install more plugins and set up tasks\nfor them.\n\nEssential Plugins\nLet's look at what each one does. Keep in mind there are thousands of Gulp\nplugins, so let's just touch on the big hitters here.\n\nKeep in mind to install any of these plugins, you'll simply need to run the npm\ninstallation in your project directory:\n\nnpm install --save [plugin name]\n\n\ngulp-uglify\nMinifies Javascript or CSS files, and outputs the result into the directory of\nyour choice. This plugin can be reused across filetypes, as we'll demonstrate in\na moment.\n\ngulp-concat\nCombines minified files into a single file. This is essential for browser\nperformance as it reduces the number of http requests being made every time your\npage loads.\n\ngulp-rename\nRenames files (such as those produced by gulp-concat).\n\ngulp-sass / gulp-less\nCompiles your Sass or Less files into CSS and outputs to the directory of your\nchoice.\n\ngulp-minify-css\nMinifies CSS, as you might imagine. This can chained to gulp-sass or gulp-less\nto minify the CSS files those tasks produce.\n\ngulp-autoprefixer\nThank god for this. Autoprefixer finds CSS styles and adds the browser-specific\nequivalents to your CSS, so you don't need to write the same style 10 times for\nevery horrible browser in existence. This means you can write styles such as:\n\nbackground: linear-gradient(to bottom, white, black);\n\n\nAnd have them output as:\n\nbackground: -webkit-gradient(linear, left top, left bottom, from(white), to(black));\nbackground: -webkit-linear-gradient(top, white, black);\nbackground: -o-linear-gradient(top, white, black);\nbackground: linear-gradient(to bottom, white, black);\n\n\ngulp-watch\nAllows Gulp to listen for changes being made to source files, so that it may\nfire an event upon file change, such as:\n\ngulp-livereload\nCompiles the changes made in directories being watched via gulp-watch\nautomatically while you work.\n\nNext Level Pro Shit\nWhile these plugins aren't 'essential', they are really cool and helpful.\n\ngulp-sourcemaps\nAn obnoxious side effect of minifying and concating your files is when it comes\ntime to debug errors on the frontend. Errors occurring at \"line 235\" are pretty\nuseless considering your error codes are referring to the compiled files,\nwithout granting a hint as to where the problematic code may have come from in\nthe first place. gulp-sourcemaps resolves this by adding commenting paths to\nwhich source files your code originated from.\n\ngulp-browser-sync\nBy leveraging BrowserSync [https://browsersync.io/], this plugin immediately\nrefreshes an open browser which links to files just changed by gulp. This means\nyou can code, compile, and see the results in real time. This takes a bit extra\neffort to set up, so be sure to check their documentation\n[https://browsersync.io/docs].\n\ngulp-load-plugins\nNormally when creating our gulpfile, we need to start off by requiring our\nplugins via something like this:\n\nvar gulp = require('gulp'),\n    del = require('del'),\n    concat = require('gulp-concat'),\n    rename = require('gulp-rename'),\n    uglify = require('gulp-uglify'),\n    sass = require('gulp-sass'),\n    watch = require('gulp-watch'),\n    livereload = require('gulp-livereload'),\n    minifyCss = require('gulp-minify-css'),\n    autoprefixer = require('gulp-autoprefixer');\n\n\ngulp-load-plugins  instead checks your package.json for any Gulp plugins and\nimmediately requires them, thus saving you a few precious minutes. The output\ninstead looks like:\n\nvar $ = require('gulp-load-plugins')();\n\n\nBuilding The Gulpfile\nNow that we have all these dope plugins, we can finally build our gulpfile.\nHere's an example (without using gulp-load-plugins  for now):\n\nvar gulp = require('gulp'),\n    del = require('del'),\n    concat = require('gulp-concat'),\n    rename = require('gulp-rename'),\n    uglify = require('gulp-uglify'),\n    sass = require('gulp-sass'),\n    watch = require('gulp-watch'),\n    livereload = require('gulp-livereload'),\n    minifyCss = require('gulp-minify-css'),\n    autoprefixer = require('gulp-autoprefixer');\n\ngulp.task('styles', function() {\n    return gulp.src('src/sass/*.scss')\n        .pipe(sass({outputStyle: 'expanded', unix_newlines: true, linefeed: \"lf\"}).on('error', sass.logError))\n        .pipe(autoprefixer())\n        .pipe(minifyCss({\n            keepSpecialComments: 1\n        }))\n        .pipe(rename(\"theme.min.css\"))\n        .pipe(gulp.dest('./assets/css/'));\n});\n\n\ngulp.task('scripts', function() {\n    return gulp.src(['src/js/plugin/*.js', 'src/js/base.js'])\n        .pipe(uglify())\n        .pipe(concat('theme.min.js'))\n        .pipe(gulp.dest('assets/js'));\n});\n\n\ngulp.task('ghost_config', ['scripts'], function() {\n    return gulp.src(['src/js/config.js', 'assets/js/theme.min.js'])\n        .pipe(concat('theme.min.js'))\n        .pipe(gulp.dest('assets/js'));\n});\n\n\ngulp.task('default', function() {\n    gulp.start('styles', 'scripts', 'ghost_config', 'watch');\n});\n\n\ngulp.task('watch', function() {\n    gulp.watch('src/sass/*.scss', ['styles']);\n    gulp.watch('src/js/*.js', ['scripts', 'ghost_config']);\n    livereload.listen();\n    gulp.watch(['*']).on('change', livereload.changed);\n});\n\n\n\nJust by looking at the file itself, you may be able to dissect what's happening.\nAfter we require our plugins, we define our tasks,  which are essentially\nindividual jobs consisting of one or more gulp plugins depending on how you've\nchained them.\n\nHere's the general terminology to help clear things up:\n\n * gulp.task: Defines a task consisting of one of more plugin actions.\n * gulp.src:  Specifies the folder containing source files.\n * gulp.dest: Defines the folder to output compiled files to.\n * pipe(): Allows multiple events to be chained together in a single task.\n\nWrapping up\nOnce your file is ready to go, simply run the grunt  command in your project\ndirectory. You should see Gulp output the status of each task you've set, as\nwell as any errors which may have occurred.\n\nIn short, just use Gulp. The scientific community has come to a consensus that\nGulp is objectively superior to its counterpart, Grunt. Ask Matt, he's a\nscientist.\n\nPeace fam!","html":"<p><em><strong>NOTE</strong>:  This tutorial was written for Gulp versions &lt;4.0.0. Check out <a href=\"https://hackersandslackers.com/upgrading-to-gulp-4/\">this post</a> for Gulp &gt;4.0.0</em></p><!--kg-card-begin: hr--><hr><!--kg-card-end: hr--><p>Perhaps the whole obligatory-Gulp-tutorial on [Some Coding Blog] thing has become a bit cliché at this point. Haters may do as they will, but I 'll take any opportunity to jam as many SEO keywords I can get at this point. You know the ones: Gulp, ExpressJS, NodeJS, or perhaps even React Vue frontend Ubuntu framework API social cloud data entrepreneur community. </p><p>Regardless, we all need our own copy+paste references from time-to-time, or even worse: when we copy/paste our gulpfile.js from project to project and forget what they actually do. I won't tell anybody.</p><h2 id=\"quick-101\">Quick 101</h2><p>NodeJS developers use Gulp to automate necessary processes before moving their frontend code to production. This includes minifying files to make them run faster, and to also make them unreadable to people who would otherwise make fun of your mediocre Javascript which you were forced to crank out on a short timeline.</p><h3 id=\"general-workflow\">General Workflow</h3><p>Let's say you're running a basic Express app. As opposed to developing and storing files in a directory such as /public, Gulp enables us to develop in one directory, and compile to another. That means we can keep our horrible uncompressed and uncompiled  source in a folder such as /src, and output them to a directory such as /dist, which would be our public-facing output. An Express file structure utilizing this would look something like this:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">  |- src/\n      |- js/ \n      |- scss/\n  |- dist/\n      |- js/ \n      |- css/\n      |- img/\n      |- fonts/\n  |- views\n      |- index.hbs\n  |- routes\n      |- index.js\n  |- gulpfile.js\n  |- node_modules/\n  |- package.json\n  |- app.js\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"installation\">Installation</h3><p>First install the gulp CLI:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">npm install --global gulp-cli\n</code></pre>\n<!--kg-card-end: markdown--><p>Next, enter your project folder and install gulp while saving it as  a project dependency.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">npm install --save gulp\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"how-it-works\">How it Works</h2><p>Gulp doesn't do much on its own; the true magic lies within its vast library of plugins. Each individual plugin typically covers a simple task, such as compiling LESS or SASS files, or minifying client-side JavaScript and CSS. The limited scope of plugins entails a bit of setup in our gulpfile to chain said tasks together, but it also makes Gulp highly customizable to cater to your specific needs.</p><h3 id=\"the-gulpfile\">The Gulpfile</h3><p>Gulp works by invoking a file called gulpfile.js in your main directory, which you'll need to create and set up yourself (sorry). The file is divided into two main parts: requiring (importing) plugins, and defining which tasks to run when gulp is invoked. A basic worthless gulpfile might look something like:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">var gulp = require('gulp');\n\ngulp.task('default', function () {\n  console.log('Sup World!');\n});\n</code></pre>\n<!--kg-card-end: markdown--><p>To make this file useful, we'll need to install more plugins and set up tasks for them.</p><h2 id=\"essential-plugins\">Essential Plugins</h2><p>Let's look at what each one does. Keep in mind there are thousands of Gulp plugins, so let's just touch on the big hitters here.</p><p>Keep in mind to install any of these plugins, you'll simply need to run the npm installation in your project directory:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">npm install --save [plugin name]\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"gulp-uglify\">gulp-uglify</h3><p>Minifies Javascript or CSS files, and outputs the result into the directory of your choice. This plugin can be reused across filetypes, as we'll demonstrate in a moment.</p><h3 id=\"gulp-concat\">gulp-concat</h3><p>Combines minified files into a single file. This is essential for browser performance as it reduces the number of http requests being made every time your page loads.</p><h3 id=\"gulp-rename\">gulp-rename</h3><p>Renames files (such as those produced by gulp-concat).</p><h3 id=\"gulp-sass-gulp-less\">gulp-sass / gulp-less</h3><p>Compiles your Sass or Less files into CSS and outputs to the directory of your choice.</p><h3 id=\"gulp-minify-css\">gulp-minify-css</h3><p>Minifies CSS, as you might imagine. This can chained to gulp-sass or gulp-less to minify the CSS files those tasks produce.</p><h3 id=\"gulp-autoprefixer\">gulp-autoprefixer</h3><p>Thank god for this. Autoprefixer finds CSS styles and adds the browser-specific equivalents to your CSS, so you don't need to write the same style 10 times for every horrible browser in existence. This means you can write styles such as:</p><!--kg-card-begin: markdown--><pre><code class=\"language-css\">background: linear-gradient(to bottom, white, black);\n</code></pre>\n<!--kg-card-end: markdown--><p>And have them output as:</p><!--kg-card-begin: markdown--><pre><code class=\"language-css\">background: -webkit-gradient(linear, left top, left bottom, from(white), to(black));\nbackground: -webkit-linear-gradient(top, white, black);\nbackground: -o-linear-gradient(top, white, black);\nbackground: linear-gradient(to bottom, white, black);\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"gulp-watch\">gulp-watch</h3><p>Allows Gulp to listen for changes being made to source files, so that it may fire an event upon file change, such as:</p><h3 id=\"gulp-livereload\">gulp-livereload</h3><p>Compiles the changes made in directories being watched via gulp-watch automatically while you work.</p><h2 id=\"next-level-pro-shit\">Next Level Pro Shit</h2><p>While these plugins aren't 'essential', they are really cool and helpful.</p><h3 id=\"gulp-sourcemaps\">gulp-sourcemaps</h3><p>An obnoxious side effect of minifying and concating your files is when it comes time to debug errors on the frontend. Errors occurring at \"line 235\" are pretty useless considering your error codes are referring to the compiled files, without granting a hint as to where the problematic code may have come from in the first place. gulp-sourcemaps resolves this by adding commenting paths to which source files your code originated from.</p><h3 id=\"gulp-browser-sync\">gulp-browser-sync</h3><p>By leveraging <a href=\"https://browsersync.io/\">BrowserSync</a>, this plugin immediately refreshes an open browser which links to files just changed by gulp. This means you can code, compile, and see the results in real time. This takes a bit extra effort to set up, so be sure to check their <a href=\"https://browsersync.io/docs\">documentation</a>.</p><h3 id=\"gulp-load-plugins\">gulp-load-plugins</h3><p>Normally when creating our gulpfile, we need to start off by requiring our plugins via something like this:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">var gulp = require('gulp'),\n    del = require('del'),\n    concat = require('gulp-concat'),\n    rename = require('gulp-rename'),\n    uglify = require('gulp-uglify'),\n    sass = require('gulp-sass'),\n    watch = require('gulp-watch'),\n    livereload = require('gulp-livereload'),\n    minifyCss = require('gulp-minify-css'),\n    autoprefixer = require('gulp-autoprefixer');\n</code></pre>\n<!--kg-card-end: markdown--><p><strong>gulp-load-plugins</strong> instead checks your package.json for any Gulp plugins and immediately requires them, thus saving you a few precious minutes. The output instead looks like:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">var $ = require('gulp-load-plugins')();\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"building-the-gulpfile\">Building The Gulpfile</h2><p>Now that we have all these dope plugins, we can finally build our gulpfile. Here's an example (without using <strong>gulp-load-plugins</strong> for now):</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">var gulp = require('gulp'),\n    del = require('del'),\n    concat = require('gulp-concat'),\n    rename = require('gulp-rename'),\n    uglify = require('gulp-uglify'),\n    sass = require('gulp-sass'),\n    watch = require('gulp-watch'),\n    livereload = require('gulp-livereload'),\n    minifyCss = require('gulp-minify-css'),\n    autoprefixer = require('gulp-autoprefixer');\n\ngulp.task('styles', function() {\n    return gulp.src('src/sass/*.scss')\n        .pipe(sass({outputStyle: 'expanded', unix_newlines: true, linefeed: &quot;lf&quot;}).on('error', sass.logError))\n        .pipe(autoprefixer())\n        .pipe(minifyCss({\n            keepSpecialComments: 1\n        }))\n        .pipe(rename(&quot;theme.min.css&quot;))\n        .pipe(gulp.dest('./assets/css/'));\n});\n\n\ngulp.task('scripts', function() {\n    return gulp.src(['src/js/plugin/*.js', 'src/js/base.js'])\n        .pipe(uglify())\n        .pipe(concat('theme.min.js'))\n        .pipe(gulp.dest('assets/js'));\n});\n\n\ngulp.task('ghost_config', ['scripts'], function() {\n    return gulp.src(['src/js/config.js', 'assets/js/theme.min.js'])\n        .pipe(concat('theme.min.js'))\n        .pipe(gulp.dest('assets/js'));\n});\n\n\ngulp.task('default', function() {\n    gulp.start('styles', 'scripts', 'ghost_config', 'watch');\n});\n\n\ngulp.task('watch', function() {\n    gulp.watch('src/sass/*.scss', ['styles']);\n    gulp.watch('src/js/*.js', ['scripts', 'ghost_config']);\n    livereload.listen();\n    gulp.watch(['*']).on('change', livereload.changed);\n});\n\n</code></pre>\n<!--kg-card-end: markdown--><p>Just by looking at the file itself, you may be able to dissect what's happening. After we require our plugins, we define our <em>tasks,</em> which are essentially individual jobs consisting of one or more gulp plugins depending on how you've chained them.</p><p>Here's the general terminology to help clear things up:</p><ul><li><strong>gulp.task</strong>: Defines a task consisting of one of more plugin actions.</li><li><strong>gulp.src</strong>:  Specifies the folder containing source files.</li><li><strong>gulp.dest</strong>: Defines the folder to output compiled files to.</li><li><strong>pipe()</strong>: Allows multiple events to be chained together in a single task.</li></ul><h2 id=\"wrapping-up\">Wrapping up</h2><p>Once your file is ready to go, simply run the <strong>grunt</strong> command in your project directory. You should see Gulp output the status of each task you've set, as well as any errors which may have occurred.</p><p>In short, just use Gulp. The scientific community has come to a consensus that Gulp is objectively superior to its counterpart, Grunt. Ask Matt, he's a scientist.</p><p>Peace fam!</p>","url":"https://hackersandslackers.com/using-gulp-to-make-frontend-tolerable/","uuid":"f0ec0903-cd67-4663-b872-9ecdf9ffc557","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b0e1a41e88ecf2fbeb3f5fa"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673635","title":"Installing Django CMS on Ubuntu","slug":"installing-django-cms","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/djangocms-2.jpg","excerpt":"How to install DjangoCMS: the largest of three major CMS products for Django.","custom_excerpt":"How to install DjangoCMS: the largest of three major CMS products for Django.","created_at_pretty":"19 November, 2017","published_at_pretty":"19 November, 2017","updated_at_pretty":"28 March, 2019","created_at":"2017-11-19T18:38:50.000-05:00","published_at":"2017-11-19T18:50:29.000-05:00","updated_at":"2019-03-28T09:28:54.000-04:00","meta_title":"Installing Django CMS on Ubuntu | Hackers and Slackers","meta_description":"Get the play-by-play on how to install DjangoCMS: the largest of three major CMS products for Python's Django framework.","og_description":"Get the play-by-play on how to install DjangoCMS: the largest of three major CMS products for Python's Django framework.","og_image":"https://hackersandslackers.com/content/images/2019/03/djangocms-2.jpg","og_title":"Installing Django CMS on Ubuntu","twitter_description":"Get the play-by-play on how to install DjangoCMS: the largest of three major CMS products for Python's Django framework.","twitter_image":"https://hackersandslackers.com/content/images/2019/03/djangocms-1.jpg","twitter_title":"Installing Django CMS on Ubuntu","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"},{"name":"#Getting into Django","slug":"starting-django","description":"Getting started with Django: the original daddy of Python frameworks.","feature_image":"https://hackersandslackers.com/content/images/2019/03/django2.jpg","meta_description":"Getting started with Django: the original daddy of Python frameworks.","meta_title":"Setting up Django","visibility":"internal"}],"plaintext":"So you've selected Python as your language of choice for building a massive web\napp. Congratulations! While there are some that will point to Python's\nrelatively slow execution at runtime, you're brave enough to realize that saving\nchunks of your time is more important to the success of your project than\nbuilding your app in a marginally faster language.\n\n  There are a few options when it comes to picking an out-of-the-box CMS with\nDjango, but perhaps none are as popular as Django CMS\n[https://www.django-cms.org/en/].  DjangoCMS  is the biggest of the \"big three\"\nCMS choices for Django, with Mezzanine [http://mezzanine.jupo.org/]  and Wagtail\n[https://wagtail.io/]  following close behind (I personally like Wagtail, if I'm\ngonna be real here).\n\nAs it stands, there doesn't seem to be an existing  guide which walks through\nthe complete  installation of Django  + Django CMS. While is information exists\nin fragments, newcomers to Python could have trouble piecing much of this\ninformation together out of the gate. This guide hopes to serve as a reduction\nof friction to Django newcomers, thus ensuring Pythonic world domination.\n\nOur Stack\nTo get this party started, our VPS is going to run the following stack:\n\n * Ubuntu\n * Python 3\n * Virtualenv\n * PostgreSQL\n * Django\n * Django CMS\n\nUpdate All Dependencies\nFirst, we'll prep our VPS with all the necessary dependencies:\n\n$ apt-get update\n$ apt-get upgrade -y\n$ apt-get install python3 python3-pip python-dev libpq-dev postgresql postgresql-contrib\n\n\nCreate and Activate a Virtual Environment\nVirtualenv is included with Python3, so no installation needed here.\n\n$ virtualenv env\n$ source env/bin/activate\n\n\nInstall Django\nFind out what the latest distribution is by going here\n[https://www.djangoproject.com/download/].\n\n$ pip3 install Django==2.1.7\n\n\nInstall Django CMS\n$ pip3 install django-cms\n\n\nStart Project\nCreate a Django project in your desired directory.\n\n$ cd /home\n$ django-admin.py startproject yourproject\n\n\nUpdate Settings.py File\nWe'll need to update settings.py  with a few things.\n\n$ cd yourproject/yourproject\n$ vim settings.py\n\n\nThe resulting changes to settings.py  are shown in the block below. These\nchanges include:\n\n * Adding the first 4 lines in INSTALLED_APPS. These apps are specific to Django\n   CMS.\n * Adding the LANGUAGES  block.\n * Update the DATABASES  block with your preferred database. We'll set up the\n   corresponding database and database user later.\n * Add SITE_ID.\n\nINSTALLED_APPS = [\n    'django.contrib.sites',\n    'cms',\n    'menus',\n    'treebeard',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n\nLANGUAGES = [\n    ('en-us', 'English')\n]\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'yourdb',\n        'USER': 'youruser',\n        'PASSWORD': 'yourpass123',\n        'HOST': '127.0.0.1',\n        'PORT': '5432',\n    }\n}\n\nSITE_ID = 1\n\n\nSetting up PostgreSQL\nIn our case, we'll be using Postgres as our database. We already installed\nPostgreSQL earlier; the only thing left to install is Python's psycopg2  library\nfor connecting to PostgreSQL databases:\n\n$ pip3 install psycopg2\n\n\nActivate the psql shell as the Postgres user:\n\n$ su - postgres\n$ psql\n\n\nCreate the Database and Database User\nCreate a database with a user, matching the information you entered in \nsettings.py  earlier:\n\nCREATE DATABASE yourdb;\nCREATE USER youruser WITH PASSWORD 'yourpass123';\nALTER ROLE youruser SET client_encoding TO 'utf8';\nALTER ROLE youruser SET default_transaction_isolation TO 'read committed';\nALTER ROLE youruser SET timezone TO 'EST';\nGRANT ALL PRIVILEGES ON DATABASE yourdb TO youruser;\n\n\nExit the PostgreSQL user.\n\n\\q\nexit\n\n\nMigrate the Database Changes\nStart the migration.\n\n$ python3 manage.py migrate\n\n\nCreate a Superuser\nCreate a user for the CMS.\n\n$ python3 manage.py createsuperuser\n\n\nValidation \nMake sure everything is ok.\n\n$ python3 manage.py cms check\n\n\nAt this point, you might notice a few errors related to sekizai. We'll need to\nupdate a few more things.\n\nUpdate Settings.py Again\nWe'll need to update settings.py  with a few things.\n\nAdd 'sekizai' to INSTALLED_APPS.\n\nINSTALLED_APPS = [\n    'django.contrib.sites',\n    'cms',\n    'menus',\n    'treebeard',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'sekizai',\n]\n\n\nAdd an additional 5 lines to MIDDLEWARE:\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'django.middleware.locale.LocaleMiddleware',\n    'cms.middleware.user.CurrentUserMiddleware',\n    'cms.middleware.page.CurrentPageMiddleware',\n    'cms.middleware.toolbar.ToolbarMiddleware',\n    'cms.middleware.language.LanguageCookieMiddleware',\n]\n\n\nAdd 'sekizai.context_processors.sekizai',  and \n'django.template.context_processors.i18n',  to TEMPLATES:\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n                'sekizai.context_processors.sekizai',\n                'cms.context_processors.cms_settings',\n                'django.template.context_processors.i18n',\n           ],\n       },\n    },\n]\n\n\nFinally, add your box's IP address to ALLOWED_HOSTS:\n\nALLOWED_HOSTS = [\n    '000.000.00.00',\n]\n\n\nUpdate urls.py\nUpdate urls.py  to look like the following:\n\nfrom django.conf.urls import url, include\nfrom django.contrib import admin\n\nurlpatterns = [\n    url(r'^admin/', admin.site.urls),\n    url(r'^', include('cms.urls')),\n]\n\n\nGive it a Go\nEverything should be good! Start the app on port 8000 by entering the following:\n\n$ python3 manage.py runserver 0.0.0.0:8000\n\n\nThe app should now be accessible at your box's IP address.","html":"<p>So you've selected Python as your language of choice for building a massive web app. Congratulations! While there are some that will point to Python's relatively slow execution at runtime, you're brave enough to realize that saving chunks of your time is more important to the success of your project than building your app in a marginally faster language.</p><p> There are a few options when it comes to picking an out-of-the-box CMS with Django, but perhaps none are as popular as <a href=\"https://www.django-cms.org/en/\"><em>Django CMS</em></a><em>.</em> <strong>DjangoCMS</strong> is the biggest of the \"big three\" CMS choices for Django, with <a href=\"http://mezzanine.jupo.org/\">Mezzanine</a> and <a href=\"https://wagtail.io/\">Wagtail</a> following close behind (I personally like Wagtail, if I'm gonna be real here).</p><p>As it stands, there doesn't seem to be an existing  guide which walks through the <em>complete</em> installation of <strong>Django</strong> + <strong>Django CMS</strong>. While is information exists in fragments, newcomers to Python could have trouble piecing much of this information together out of the gate. This guide hopes to serve as a reduction of friction to Django newcomers, thus ensuring Pythonic world domination.</p><h2 id=\"our-stack\">Our Stack</h2><p>To get this party started, our VPS is going to run the following stack:</p><ul><li>Ubuntu</li><li>Python 3</li><li>Virtualenv</li><li>PostgreSQL</li><li>Django</li><li>Django CMS</li></ul><h2 id=\"update-all-dependencies\">Update All Dependencies</h2><p>First, we'll prep our VPS with all the necessary dependencies:</p><!--kg-card-begin: code--><pre><code>$ apt-get update\n$ apt-get upgrade -y\n$ apt-get install python3 python3-pip python-dev libpq-dev postgresql postgresql-contrib\n</code></pre><!--kg-card-end: code--><h2 id=\"create-and-activate-a-virtual-environment\">Create and Activate a Virtual Environment</h2><p>Virtualenv is included with Python3, so no installation needed here.</p><!--kg-card-begin: code--><pre><code>$ virtualenv env\n$ source env/bin/activate\n</code></pre><!--kg-card-end: code--><h2 id=\"install-django\">Install Django</h2><p>Find out what the latest distribution is by going <a href=\"https://www.djangoproject.com/download/\">here</a>.</p><!--kg-card-begin: code--><pre><code>$ pip3 install Django==2.1.7\n</code></pre><!--kg-card-end: code--><h3 id=\"install-django-cms\">Install Django CMS</h3><!--kg-card-begin: code--><pre><code>$ pip3 install django-cms\n</code></pre><!--kg-card-end: code--><h2 id=\"start-project\">Start Project</h2><p>Create a Django project in your desired directory.</p><!--kg-card-begin: code--><pre><code>$ cd /home\n$ django-admin.py startproject yourproject\n</code></pre><!--kg-card-end: code--><h2 id=\"update-settings-py-file\">Update Settings.py File</h2><p>We'll need to update <code>settings.py</code> with a few things.</p><!--kg-card-begin: code--><pre><code>$ cd yourproject/yourproject\n$ vim settings.py\n</code></pre><!--kg-card-end: code--><p>The resulting changes to <code>settings.py</code> are shown in the block below. These changes include:</p><ul><li>Adding the first 4 lines in <strong>INSTALLED_APPS</strong>. These apps are specific to Django CMS.</li><li>Adding the <strong>LANGUAGES</strong> block.</li><li>Update the <strong>DATABASES</strong> block with your preferred database. We'll set up the corresponding database and database user later.</li><li>Add <strong>SITE_ID</strong>.</li></ul><!--kg-card-begin: code--><pre><code>INSTALLED_APPS = [\n    'django.contrib.sites',\n    'cms',\n    'menus',\n    'treebeard',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n\nLANGUAGES = [\n    ('en-us', 'English')\n]\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'yourdb',\n        'USER': 'youruser',\n        'PASSWORD': 'yourpass123',\n        'HOST': '127.0.0.1',\n        'PORT': '5432',\n    }\n}\n\nSITE_ID = 1\n</code></pre><!--kg-card-end: code--><h2 id=\"setting-up-postgresql\">Setting up PostgreSQL</h2><p>In our case, we'll be using Postgres as our database. We already installed PostgreSQL earlier; the only thing left to install is Python's <strong>psycopg2</strong> library for connecting to PostgreSQL databases:</p><!--kg-card-begin: code--><pre><code>$ pip3 install psycopg2\n</code></pre><!--kg-card-end: code--><p>Activate the psql shell as the Postgres user:</p><!--kg-card-begin: code--><pre><code>$ su - postgres\n$ psql\n</code></pre><!--kg-card-end: code--><h3 id=\"create-the-database-and-database-user\">Create the Database and Database User</h3><p>Create a database with a user, matching the information you entered in <code>settings.py</code> earlier:</p><!--kg-card-begin: code--><pre><code>CREATE DATABASE yourdb;\nCREATE USER youruser WITH PASSWORD 'yourpass123';\nALTER ROLE youruser SET client_encoding TO 'utf8';\nALTER ROLE youruser SET default_transaction_isolation TO 'read committed';\nALTER ROLE youruser SET timezone TO 'EST';\nGRANT ALL PRIVILEGES ON DATABASE yourdb TO youruser;\n</code></pre><!--kg-card-end: code--><p>Exit the PostgreSQL user.</p><!--kg-card-begin: code--><pre><code>\\q\nexit\n</code></pre><!--kg-card-end: code--><h3 id=\"migrate-the-database-changes\">Migrate the Database Changes</h3><p>Start the migration.</p><!--kg-card-begin: code--><pre><code>$ python3 manage.py migrate\n</code></pre><!--kg-card-end: code--><h3 id=\"create-a-superuser\">Create a Superuser</h3><p>Create a user for the CMS.</p><!--kg-card-begin: code--><pre><code>$ python3 manage.py createsuperuser\n</code></pre><!--kg-card-end: code--><h3 id=\"validation\">Validation </h3><p>Make sure everything is ok.</p><!--kg-card-begin: code--><pre><code>$ python3 manage.py cms check\n</code></pre><!--kg-card-end: code--><p>At this point, you might notice a few errors related to <em>sekizai</em>. We'll need to update a few more things.</p><h2 id=\"update-settings-py-again\">Update Settings.py Again</h2><p>We'll need to update <code>settings.py</code> with a few things.</p><p>Add 'sekizai' to <strong>INSTALLED_APPS</strong>.</p><!--kg-card-begin: code--><pre><code>INSTALLED_APPS = [\n    'django.contrib.sites',\n    'cms',\n    'menus',\n    'treebeard',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'sekizai',\n]\n</code></pre><!--kg-card-end: code--><p>Add an additional 5 lines to <strong>MIDDLEWARE</strong>:</p><!--kg-card-begin: code--><pre><code>MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'django.middleware.locale.LocaleMiddleware',\n    'cms.middleware.user.CurrentUserMiddleware',\n    'cms.middleware.page.CurrentPageMiddleware',\n    'cms.middleware.toolbar.ToolbarMiddleware',\n    'cms.middleware.language.LanguageCookieMiddleware',\n]\n</code></pre><!--kg-card-end: code--><p>Add <code>'sekizai.context_processors.sekizai',</code> and <code>'django.template.context_processors.i18n',</code> to <strong>TEMPLATES</strong>:</p><!--kg-card-begin: code--><pre><code>TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n                'sekizai.context_processors.sekizai',\n                'cms.context_processors.cms_settings',\n                'django.template.context_processors.i18n',\n           ],\n       },\n    },\n]\n</code></pre><!--kg-card-end: code--><p>Finally, add your box's IP address to <strong>ALLOWED_HOSTS</strong>:</p><!--kg-card-begin: code--><pre><code>ALLOWED_HOSTS = [\n    '000.000.00.00',\n]\n</code></pre><!--kg-card-end: code--><h2 id=\"update-urls-py\">Update urls.py</h2><p>Update <strong>urls.py</strong> to look like the following:</p><!--kg-card-begin: code--><pre><code>from django.conf.urls import url, include\nfrom django.contrib import admin\n\nurlpatterns = [\n    url(r'^admin/', admin.site.urls),\n    url(r'^', include('cms.urls')),\n]\n</code></pre><!--kg-card-end: code--><h2 id=\"give-it-a-go\">Give it a Go</h2><p>Everything should be good! Start the app on port 8000 by entering the following:</p><!--kg-card-begin: code--><pre><code>$ python3 manage.py runserver 0.0.0.0:8000\n</code></pre><!--kg-card-end: code--><p>The app should now be accessible at your box's IP address.</p>","url":"https://hackersandslackers.com/installing-django-cms/","uuid":"802f191e-c459-4bdc-86cc-088d3727a324","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5a12160a2a6bec285f845812"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673633","title":"Installing Django on Ubuntu","slug":"installing-django-on-a-linux-box","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/django2-1.jpg","excerpt":"Get started with the Python MVC framework that started it all.","custom_excerpt":"Get started with the Python MVC framework that started it all.","created_at_pretty":"18 November, 2017","published_at_pretty":"18 November, 2017","updated_at_pretty":"28 March, 2019","created_at":"2017-11-18T06:07:00.000-05:00","published_at":"2017-11-18T06:12:07.000-05:00","updated_at":"2019-03-28T04:43:32.000-04:00","meta_title":"Installing Django on Ubuntu | Hackers and Slackers","meta_description":"Get started with the Python MVC framework that started it all","og_description":"Get started with the Python MVC framework that started it all","og_image":"https://hackersandslackers.com/content/images/2019/03/django2-1.jpg","og_title":"Installing Django on Ubuntu","twitter_description":"Get started with the Python MVC framework that started it all","twitter_image":"https://hackersandslackers.com/content/images/2019/03/django2-1.jpg","twitter_title":"Installing Django on Ubuntu","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"#Getting into Django","slug":"starting-django","description":"Getting started with Django: the original daddy of Python frameworks.","feature_image":"https://hackersandslackers.com/content/images/2019/03/django2.jpg","meta_description":"Getting started with Django: the original daddy of Python frameworks.","meta_title":"Setting up Django","visibility":"internal"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"}],"plaintext":"Django is the OG Grandaddy of all Python frameworks: it's by far Python's most\nfully-featured MVC framework out of the box. Today we're going to look at the\nrelatively painless process of setting up Django on a Ubuntu server.\n\nStack\n * Ubuntu\n * Python 3\n * Pip 3\n * Nginx\n * Django (latest)\n\nInstall all Dependencies\nWe'll start with the obligatory update to ensure we're getting the latest\npackages.\n\n$ apt-get update\n$ apt-get upgrade\n\n\nLet's verify that the latest version of Python 3 is installed on your box:\n\n$ python3 --version\nPython 3.6.3\n\n\nRegardless, it's probably a good idea to download the latest anyway:\n\napt-get install python3 python3-pip python3-dev\n\n\nI highly recommend setting up a Python virtual environment before moving forward\nwith any installs. If you're living in the stone age, virtualenv  and \nvirtualenvwrapper  will probably server you fine. If you're a gentleman, use \npipenv  or poetry  instead.\n\nNow let's go ahead and install Django. We can find out what the latest\ndistribution is by checking Django's download page: \nhttps://www.djangoproject.com/download/\n\nWith the version number in hand, we'll install Django using pip:\n\npip3 install Django==2.1.7\n\n\nNote that we’re using pip3  here as opposed to pip, which explicitly downloads\nDjango under our Python3 installation. If we’re installing inside our virtual\nenvironment, specifying pip3  is redundant; pip  will work under the assumption\nthat we’re using the only Python version installed to our environment.\n\nLet's verify that you've installed Django correctly. Open your Python3 shell and\ninput the following:\n\n$ python3\n>>> import django\n>>> print(django.get_version())\n1.11\n\n\nIf you receive an error along the lines of ModuleNotFoundError: No module named\n'Django', Django was probably installed on Python2 as opposed to 3. Make sure\nthat you used pip3 instead of pip to install Django, and try again.\n\nWhy is This Somewhat Convoluted?\nAll major Linux distributions come with Python 2.7 pre-installed. Python2 is\nstill critical to the core functionality of most linux distributions, therefore\nPython2 must be left intact and cannot be deleted or modified without suffering\ndamage to the operating system.\n\nUnfortunately, the python and pip commands will forever refer to Python 2 as a\nresult, thus forcing Python 3 users to forever utilize the python3  and pip3 \ncommands. This isn't that big of a deal, but is a common pitfall for those\nswitching over to the light side.","html":"<p>Django is the OG Grandaddy of all Python frameworks: it's by far Python's most fully-featured MVC framework out of the box. Today we're going to look at the relatively painless process of setting up Django on a Ubuntu server.</p><h3 id=\"stack\">Stack</h3><ul><li>Ubuntu</li><li>Python 3</li><li>Pip 3</li><li>Nginx</li><li>Django (latest)</li></ul><h2 id=\"install-all-dependencies\">Install all Dependencies</h2><p>We'll start with the obligatory update to ensure we're getting the latest packages.</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">$ apt-get update\n$ apt-get upgrade\n</code></pre>\n<!--kg-card-end: markdown--><p>Let's verify that the latest version of Python 3 is installed on your box:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">$ python3 --version\nPython 3.6.3\n</code></pre>\n<!--kg-card-end: markdown--><p>Regardless, it's probably a good idea to download the latest anyway:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">apt-get install python3 python3-pip python3-dev\n</code></pre>\n<!--kg-card-end: markdown--><p>I highly recommend setting up a Python virtual environment before moving forward with any installs. If you're living in the stone age, <code>virtualenv</code> and <code>virtualenvwrapper</code> will probably server you fine. If you're a gentleman, use <code>pipenv</code> or <code>poetry</code> instead.</p><p>Now let's go ahead and install Django. We can find out what the latest distribution is by checking Django's download page: <a href=\"https://www.djangoproject.com/download/\">https://www.djangoproject.com/download/</a></p><p>With the version number in hand, we'll install Django using pip:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">pip3 install Django==2.1.7\n</code></pre>\n<!--kg-card-end: markdown--><p>Note that we’re using <strong>pip3</strong> here as opposed to <strong>pip</strong>, which explicitly downloads Django under our Python3 installation. If we’re installing inside our virtual environment, specifying <strong>pip3</strong> is redundant; <strong>pip</strong> will work under the assumption that we’re using the only Python version installed to our environment.</p><p>Let's verify that you've installed Django correctly. Open your Python3 shell and input the following:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">$ python3\n&gt;&gt;&gt; import django\n&gt;&gt;&gt; print(django.get_version())\n1.11\n</code></pre>\n<!--kg-card-end: markdown--><p>If you receive an error along the lines of <code>ModuleNotFoundError: No module named 'Django'</code>, Django was probably installed on Python2 as opposed to 3. Make sure that you used pip3 instead of pip to install Django, and try again.</p><h2 id=\"why-is-this-somewhat-convoluted\">Why is This Somewhat Convoluted?</h2><p>All major Linux distributions come with Python 2.7 pre-installed. Python2 is still critical to the core functionality of most linux distributions, therefore Python2 must be left intact and cannot be deleted or modified without suffering damage to the operating system.</p><p>Unfortunately, the python and pip commands will forever refer to Python 2 as a result, thus forcing Python 3 users to forever utilize the <em>python3</em> and <em>pip3</em> commands. This isn't that big of a deal, but is a common pitfall for those switching over to the light side.</p>","url":"https://hackersandslackers.com/installing-django-on-a-linux-box/","uuid":"77609409-5552-418d-b742-c549a2ccf01b","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5a101454d201b772c140d36e"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673637","title":"Managing Python Environments With Virtualenv","slug":"managing-python-environments","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/04/virtualenv.jpg","excerpt":"Working with virtualenv and virtualenvwrapper.","custom_excerpt":"Working with virtualenv and virtualenvwrapper.","created_at_pretty":"12 April, 2018","published_at_pretty":"15 November, 2017","updated_at_pretty":"10 April, 2019","created_at":"2018-04-12T17:49:21.000-04:00","published_at":"2017-11-15T17:48:00.000-05:00","updated_at":"2019-04-09T21:05:13.000-04:00","meta_title":"Managing Python Environments | Hackers and Slackers","meta_description":"Keep your Python environments separate with virtualenv and virtualenvwrapper.","og_description":"Keep your Python environments separate with virtualenv and virtualenvwrapper.","og_image":"https://hackersandslackers.com/content/images/2019/04/virtualenv-2.jpg","og_title":"Managing Python Environments With Virtualenv","twitter_description":"Keep your Python environments separate with virtualenv and virtualenvwrapper.","twitter_image":"https://hackersandslackers.com/content/images/2019/04/virtualenv-1.jpg","twitter_title":"Managing Python Environments With Virtualenv","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"}],"plaintext":"As with any programming language, Python uses package managers (pip  in this\ncase) to manage the addition of libraries to be called at runtime. By default,\ninstalling a Python library with pip  will install that package to the default \nPython path,  which is the default folder from which Python stores its installed\npackages. For reference, you can determine you Python path via the following in\nthe Python shell:\n\nimport sys\nprint(sys.path)\n\n['', '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python27.zip', '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7', '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-darwin', '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac', '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages', '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk', '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old', '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload', '/Library/Python/2.7/site-packages', '/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python', '/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/PyObjC']\n\n\nWithout any other specification, Python will always look in the Python path at\nruntime to locate and execute any packages imported by a script. For example,\nlet's say I were to run a script called myscript.py  which attempts to import\nthe 'requests' library, as such:\n\n# myscript.py\nimport requests\n\n\nRunning python myscript.py  in your terminal will attempt to look for the\nlibrary in your generic python path.\n\nEnvironments With Virtualenv\nWhile keeping all your Python packages in one place may be nice at first, this\nbecomes an unmanageable problem when you suddenly find yourself managing\nmultiple projects, each of which may contain different libraries and versions of\nsuch libraries. As such, it is best practice to always encapsulate the library\ndependancies of a project by utilizing one of python's environment manages, such\nas virtualenv.\n\nVirtualenv is the oldest and most common method for managing Python\nenvironments. Creating an environment with virtualenv will create a folder in\nthe user's current directory. This folder represents an environment which can\nthen be 'activated.' This is a way of explicitly using the new environment\ndirectory in place of PYTHONPATH to handle Python packages. As such, we can\ncreate as many environments as we want without worrying about package conflicts.\n\nINSTALLATION\nInstall virtualenv via the following:\n\n$ pip3 install virtualenv\n\n\nWith virtualenv installed, we can then create the environment. cd to the\ndirectory of your choice (preferably the one which you're planning to hold your\nproject) and create an environment with the name of your choice:\n\n$ virtualenv myenv\n\nUsing base prefix '/usr/local/Cellar/python/3.6.4_4/Frameworks/Python.framework/Versions/3.6'\nNew python executable in /Users/toddbirchard/myenv/bin/python3.6\nAlso creating executable in /Users/toddbirchard/myenv/bin/python\nInstalling setuptools, pip, wheel...done.\n\n\nA folder should now have been created in the current directory. That folder is\nthe new home of your virtual environment; every time you install a Python\npackage with the environment active, that package will be saved to the directory\nof said environment (as opposed to saved on your machine's Python path).\n\nACTIVATION\nNow that the environment has been created, it must be 'activated'.\n\n$ source myenv/bin/activate\n\n\nYou should notice in the terminal that once this is activated, the command line\nwill always state that the user is working out of the activated environment\nuntil otherwise changed.\n\nAlternative Methods of Virtual Environment Management","html":"<p>As with any programming language, Python uses package managers (<em>pip</em> in this case) to manage the addition of libraries to be called at runtime. By default, installing a Python library with <em>pip</em> will install that package to the default <em>Python path,</em> which is the default folder from which Python stores its installed packages. For reference, you can determine you Python path via the following in the Python shell:</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">import sys\nprint(sys.path)\n\n['', '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python27.zip', '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7', '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-darwin', '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac', '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages', '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk', '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old', '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload', '/Library/Python/2.7/site-packages', '/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python', '/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/PyObjC']\n</code></pre>\n<!--kg-card-end: markdown--><p>Without any other specification, Python will always look in the Python path at runtime to locate and execute any packages imported by a script. For example, let's say I were to run a script called <code>myscript.py</code> which attempts to import the 'requests' library, as such:</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\"># myscript.py\nimport requests\n</code></pre>\n<!--kg-card-end: markdown--><p>Running <code>python myscript.py</code> in your terminal will attempt to look for the library in your generic python path.</p><h2 id=\"environments-with-virtualenv\">Environments With Virtualenv</h2><p>While keeping all your Python packages in one place may be nice at first, this becomes an unmanageable problem when you suddenly find yourself managing multiple projects, each of which may contain different libraries and versions of such libraries. As such, it is best practice to always encapsulate the library dependancies of a project by utilizing one of python's environment manages, such as <strong>virtualenv</strong>.</p><p>Virtualenv is the oldest and most common method for managing Python environments. Creating an environment with virtualenv will create a folder in the user's current directory. This folder represents an environment which can then be 'activated.' This is a way of explicitly using the new environment directory in place of PYTHONPATH to handle Python packages. As such, we can create as many environments as we want without worrying about package conflicts.</p><h3 id=\"installation\">INSTALLATION</h3><p>Install virtualenv via the following:</p><!--kg-card-begin: markdown--><pre><code>$ pip3 install virtualenv\n</code></pre>\n<!--kg-card-end: markdown--><p>With virtualenv installed, we can then create the environment. cd to the directory of your choice (preferably the one which you're planning to hold your project) and create an environment with the name of your choice:</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">$ virtualenv myenv\n\nUsing base prefix '/usr/local/Cellar/python/3.6.4_4/Frameworks/Python.framework/Versions/3.6'\nNew python executable in /Users/toddbirchard/myenv/bin/python3.6\nAlso creating executable in /Users/toddbirchard/myenv/bin/python\nInstalling setuptools, pip, wheel...done.\n</code></pre>\n<!--kg-card-end: markdown--><p>A folder should now have been created in the current directory. That folder is the new home of your virtual environment; every time you install a Python package with the environment active, that package will be saved to the directory of said environment (as opposed to saved on your machine's Python path).</p><h3 id=\"activation\">ACTIVATION</h3><p>Now that the environment has been created, it must be 'activated'.</p><!--kg-card-begin: markdown--><pre><code>$ source myenv/bin/activate\n</code></pre>\n<!--kg-card-end: markdown--><p>You should notice in the terminal that once this is activated, the command line will always state that the user is working out of the activated environment until otherwise changed.</p><h2 id=\"alternative-methods-of-virtual-environment-management\">Alternative Methods of Virtual Environment Management</h2>","url":"https://hackersandslackers.com/managing-python-environments/","uuid":"e5af4c12-7a41-4152-970f-63f20b8b2fde","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5acfd461583e28622a7833f9"}}]}},"pageContext":{"slug":"software-development","limit":12,"skip":24,"numberOfPages":3,"humanPageNumber":3,"prevPageNumber":2,"nextPageNumber":null,"previousPagePath":"/tag/software-development/page/2/","nextPagePath":null}}