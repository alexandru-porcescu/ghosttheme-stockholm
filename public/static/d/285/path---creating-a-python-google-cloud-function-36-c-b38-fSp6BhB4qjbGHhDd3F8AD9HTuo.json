{"data":{"ghostPost":{"id":"Ghost__Post__5c12d7bfe875ad7bb867372d","title":"Create Google Cloud Functions Running Python 3.7","slug":"creating-a-python-google-cloud-function","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/10/googlefunc-1@2x.jpg","excerpt":"GCP scores another victory by trivializing serverless functions.","custom_excerpt":"GCP scores another victory by trivializing serverless functions.","created_at_pretty":"18 October, 2018","published_at_pretty":"19 October, 2018","updated_at_pretty":"14 February, 2019","created_at":"2018-10-18T19:44:02.000-04:00","published_at":"2018-10-18T22:33:07.000-04:00","updated_at":"2019-02-13T23:13:40.000-05:00","meta_title":"Creating Google Cloud Functions Running Python | Hackers and Slackers","meta_description":"Create cloud functions and endpoints with ease using Google Cloud's Cloud Functions and Source Repositories.","og_description":"Create cloud functions and endpoints with ease using Google Cloud's Cloud Functions and Source Repositories.","og_image":"https://hackersandslackers.com/content/images/2018/10/googlefunc-1@2x.jpg","og_title":"Creating Google Cloud Functions Running Python | Hackers and Slackers","twitter_description":"Create cloud functions and endpoints with ease using Google Cloud's Cloud Functions and Source Repositories.","twitter_image":"https://hackersandslackers.com/content/images/2018/10/googlefunc-1@2x.jpg","twitter_title":"Creating Google Cloud Functions Running Python | Hackers and Slackers","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Google Cloud","slug":"googlecloud","description":"Evaluating Google Cloud Platform’s offerings. Get introduced with tutorials, see our vendor comparisons, and endure biased opinions on GCP as a whole.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/googleseries2.jpg","meta_description":"Evaluating Google Cloud Platform’s offerings. Get introduced with tutorials, see our vendor comparisons, and endure biased opinions on GCP as a whole.","meta_title":"The Rise of Google Cloud | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Google Cloud","slug":"googlecloud","description":"Evaluating Google Cloud Platform’s offerings. Get introduced with tutorials, see our vendor comparisons, and endure biased opinions on GCP as a whole.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/googleseries2.jpg","meta_description":"Evaluating Google Cloud Platform’s offerings. Get introduced with tutorials, see our vendor comparisons, and endure biased opinions on GCP as a whole.","meta_title":"The Rise of Google Cloud | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Architecture","slug":"architecture","description":"Advancements in software architecture, serverless and beyond. Examples include equivalents to Lambda functions, Docker containers, Google Cloud functions,  Kubernetes, Heroku, etc.","feature_image":null,"meta_description":"Advancements in software architecture, serverless and beyond. Examples include equivalents to cloud functions, Docker containers, Kubernetes, Heroku, etc.","meta_title":"Software Architecture | Hackers and Slackers","visibility":"public"},{"name":"#The Rise of Google Cloud","slug":"the-rise-of-google-cloud","description":"Build robust serverless architecture on Google Cloud Platform. Learn through tutorials, make comparisons, and hear opinions on GCP as a whole.","feature_image":"https://res-5.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/ADF7E324-9EAD-4F15-8670-AF205E6804EA.png","meta_description":"Build robust serverless architecture on Google Cloud Platform. Learn through tutorials, make comparisons, and hear opinions on GCP as a whole.","meta_title":"The Rise of Google Cloud","visibility":"internal"},{"name":"Data Engineering","slug":"dataengineering","description":"The systematic collection and transformation of data via the creation of tools and pipelines.","feature_image":null,"meta_description":null,"meta_title":"Data Engineering | Hackers and Slackers","visibility":"public"}],"plaintext":"The more I explore Google Cloud's endless catalog of cloud services, the more I\nreally like Google Cloud. This is why before moving forward, I'd like to be\ntransparent that this blog has become little more than thinly veiled Google\npropaganda, where I will henceforth bombard you with persuasive and subtle\nmessaging to sell your soul to Google. Let's be honest; they've probably\nsimulated it anyway.\n\nIt should be safe to assume that you're fairly familiar with AWS Lambda\nFunctions [https://hackersandslackers.com/creating-endpoints-with-lambda/],\nwhich have served as the backbone of what we refer to as \"serverless.\" These\ncode snippets in the cloud have restructured entire IT departments and are\npartially why almost nobody knows enough basic Linux to configure a web server\nor build anything without a vendor. In my opinion, Google Cloud Functions are\nbetter than that, so strap in.\n\nAWS vs GCP Comparison\nFirst off, let's talk about a big one: price. AWS charges based on Lambda usage,\nwhereas Google Cloud Functions are free. The only exception to this is when you\nbreak 2 million invocations/month, at which point you'll be hemorrhaging as\nghastly 40 cents per additional million. That's ridiculous. I think we've just\ndiscovered Google Cloud's lead generation strategy.\n\nWhat about in terms of workflow? AWS holds an architecture philosophy of\nchaining services together, into what inevitably becomes a web of self-contained\nbillable items on your invoice. A fine illustration of this is a fine post on \ncommon AWS patterns\n[https://www.jeremydaly.com/serverless-microservice-patterns-for-aws/]  which\nprovides a decent visual of this complexity, while also revealing how much\npeople apparently love this kind of shit, as though SaaS is the new Legos. To\ninteract with a Lambda function in AWS via HTTP requests, you need to set up an\nAPI Gateway in front. I hate setting up API Gateways: it's a feat more\nconvoluted and difficult than actually coding. Pair this with an inevitable user\npermission struggle just to get the right Lambda roles set up, and you quickly\nhave yourself a nightmare- especially  if you're just trying to get a single\nfunction live.  Eventually you’ll get to write some code or upload a horrendous\nzip file like some sort of neanderthal (friendly reminder: I am entirely\nbiased).\n\nGCP has clearly been taking notes on the sidelines on how to improve this\nprocess by removing red tape around service setup or policy configuration. AWS\nand GCP are tackling opposites approaches; AWS allows you to build a Robust API\ncomplete with staging and testing with the intent that some of these APIs can\neven be sold as standalone products to consumers. GCP takes the opposite\napproach: cloud functions are services intended for developers to develop, which\ncovers the vast majority of use cases in my opinion.\n\nCloud Function Deployment\nTo create our first function to serve as an endpoint, we'll utilize the\nfollowing:\n\n * A new Cloud Function  running Python 3.7\n * Google's Source Repositories: AKA a Github/Bitbucket clone with auto-syncing\n   to your real repos, along with direct access to GCP services (think Heroku's\n   source control).\n * The gcloud  CLI to enable us to work locally.\n\nYou should immediately notice the glaring lack of any mentions of API endpoints,\nmethods, stages, or anything related to handling web requests. It should not be\nunderstated that Cloud Functions are preconfigured with an endpoint, and all\nnonsense regarding whether endpoints accept GET or POST or AUTH or OPTIONs is\nmissing entirely. These things are handled in the function itself, and because\nGoogle Cloud functions running Python are preconfigured with Flask, all of that\nstuff is really trivially easy.  That's right, we've got Flask, Python,  and GCP \n all in a single post. Typing these words feels like eating cake while Dwyane\nThe Rock Johnson reads me bedtime stories and caresses me as I fall asleep. It's\ngreat.\n\nCreate your Function\nOur function will intend to serve as a Python HTTP endpoint:\n\nSingle-page setup. Easy. * Trigger  specifies what will have access to this function. By selecting HTTP,\n   we will immediately receive a URL.\n * Source code  gives us a few options to deploy our code with cloud source\n   repository  being by far the easiest solution, especially when working\n   locally.\n * Runtime  allows you to select NodeJS by accident.\n\nBefore we get to code, let's talk Python libraries.\n\nIncluding Dependencies in your Function\nOur function comes prepared with two files: main.py  and our friend \nrequirements.txt. These files do exactly what you'd expect, as per every project\never:\n\nUnfortunately, ease-of-use ensures that GCP certifications will be in low\ndemand.Our function immediately installs all dependencies in requirements.txt  for use\nupon deployment. Once deployed, we can import these libraries as expected. So,\nlet's deploy something.\n\nGoogle Source Repositories\nGoogle's source repositories can serve as a stand-in replacement for Github\n(unlikely), or auto-sync to any repo on the version control behemoth of your\nchoice. The advantage of this extra layer is mostly to trigger deployments upon\ncommits, which in turn feed into GCP's own CI/CD processes (which remain young\nfor now). Create a repo locally using gcloud:\n\n$ gcloud source repos create real-repo\n$ cd myproject/\n$ git init\n--------------------------------------------------------\n(take a moment to write or save some actual code here)\n--------------------------------------------------------\n$ git add --all\n$ git remote add google https://source.developers.google.com/p/hackers/r/real-repo\n$ git commit -m 'cheesey init message'\n$ git push --all google\n\n\nNow make that puppy go live with gcloud functions deploy totally-dope-function,\nwhere totally-dope-function  is name of your function, as it should be.\n\nNow let's get to the coding part.\n\nThe Coding Part (ft. Flask)\nHere's perhaps the most basic endpoint you'll ever create:\n\nimport requests\n\ndef endpoint(request):\n    \"\"\"Does the things.\"\"\"\n    if request.method == 'POST':\n    # Allows POST requests from any origin with the Content-Type\n    # header and caches preflight response for an 3600s\n    headers = {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'POST',\n        'Access-Control-Allow-Headers': 'Content-Type',\n        'Access-Control-Max-Age': '3600'\n    }\n    request_json = request.get_json()\n    if request_json:\n        plaintext = request_json['plain']\n        html = request_json['html']\n        return html\n    else:\n        return 'You didn't pass a JSON body you idiot.'\n\n\nIf you're familiar with Flask (you are, because you're on this blog) you already\nknow what all of this does. Look at that simple copy-paste of headers, as\nopposed to working them into a horrible web interface. Gasp in disbelief as you\nrealize that typing if request.method == 'POST':  would be a 10-minute task in a\nvisual API building tool. We've made it fam.\n\nEase of Logging\nBecause we have a real endpoint to work with, we don't need to waste any time\nsimulating stupid fucking tests where we send fake JSON to our function. We can\nuse postman or anything to immediately interact with our endpoint, and the logs\nare a click away:\n\nEasy. Breezy. Beautiful.There's no point in me droning on at this point because\nyou've surely already ventured into the Google Cloud console in blissful\ndisbelief as a good obedient drone would. If adopting Google Cloud is the last\nshred of hope we have to resist Google's all-knowing algorithms which have\nalready replaced the illusion of free will, I'd gladly take that dystopia over\nsetting up monolithic API Gateways any day.\n\nThe Downsides\nTime for the asterisks to kill that euphoric buzz you might've experienced for a\nbrief moment. My sole purpose as an engineer is to have my dreams crushed\nfull-time; I simply cant resist returning the favor.\n\nFirst notable drawback of Cloud functions is a lack of out-of-the-box custom DNS \n configuration. Firebase has workarounds for this, but Firebase is a beast of\nits own.\n\nWhen it comes to debugging, functions tend to fall short in comparison to their\nLambda rivals. Most Cloud Function debugging involves deploying, testing in dev,\nand sifting through cryptic error logs (they can be quite bad). There's nearly\nno UI mock testing  to speak of. You'd better brush up on PyTest.\n\nMy best advice is to be careful with what services you play around with on GCP.\nLet's not forget this is a platform geared exclusively towards enterprises; the\nfact that we're even playing ball here makes us weirdos in the first place.\nDon't let yourself hemorrhage money like an enterprise.","html":"<p>The more I explore Google Cloud's endless catalog of cloud services, the more I really like Google Cloud. This is why before moving forward, I'd like to be transparent that this blog has become little more than thinly veiled Google propaganda, where I will henceforth bombard you with persuasive and subtle messaging to sell your soul to Google. Let's be honest; they've probably simulated it anyway.</p><p>It should be safe to assume that you're fairly familiar with AWS <a href=\"https://hackersandslackers.com/creating-endpoints-with-lambda/\">Lambda Functions</a>, which have served as the backbone of what we refer to as \"serverless.\" These code snippets in the cloud have restructured entire IT departments and are partially why almost nobody knows enough basic Linux to configure a web server or build anything without a vendor. In my opinion, Google Cloud Functions are better than <em>that</em>, so strap in.</p><h2 id=\"aws-vs-gcp-comparison\">AWS vs GCP Comparison</h2><p>First off, let's talk about a big one: price. AWS charges based on Lambda usage, whereas Google Cloud Functions are <strong>free</strong>. The only exception to this is when you break 2 million invocations/month, at which point you'll be hemorrhaging as ghastly <strong>40 cents per additional million. </strong>That's ridiculous. I think we've just discovered Google Cloud's lead generation strategy.</p><p>What about in terms of workflow? AWS holds an architecture philosophy of chaining services together, into what inevitably becomes a web of self-contained billable items on your invoice. A fine illustration of this is a fine post on <a href=\"https://www.jeremydaly.com/serverless-microservice-patterns-for-aws/\">common AWS patterns</a> which provides a decent visual of this complexity, while also revealing how much people apparently love this kind of shit, as though SaaS is the new Legos. To interact with a Lambda function in AWS via HTTP requests, you need to set up an API Gateway in front. I hate setting up API Gateways: it's a feat more convoluted and difficult than actually coding. Pair this with an inevitable user permission struggle just to get the right Lambda roles set up, and you quickly have yourself a nightmare- <em>especially</em> if you're just trying to get a single function live.<em> </em>Eventually you’ll get to write some code or upload a horrendous zip file like some sort of neanderthal (friendly reminder: I am entirely biased).</p><p>GCP has clearly been taking notes on the sidelines on how to improve this process by removing red tape around service setup or policy configuration. AWS and GCP are tackling opposites approaches; AWS allows you to build a Robust API complete with staging and testing with the intent that some of these APIs can even be sold as standalone products to consumers. GCP takes the opposite approach: cloud functions are services intended for developers to develop, which covers the vast majority of use cases in my opinion.</p><h2 id=\"cloud-function-deployment\">Cloud Function Deployment</h2><p>To create our first function to serve as an endpoint, we'll utilize the following:</p><ul><li>A new <strong>Cloud Function</strong> running Python 3.7</li><li>Google's <strong>Source Repositories: </strong>AKA a Github/Bitbucket clone with auto-syncing to your real repos, along with direct access to GCP services (think Heroku's source control).</li><li>The <strong>gcloud</strong> CLI to enable us to work locally.</li></ul><p>You should immediately notice the glaring lack of any mentions of API endpoints, methods, stages, or anything related to handling web requests. It should not be understated that <em>Cloud Functions are preconfigured with an endpoint</em>, and all nonsense regarding whether endpoints accept GET or POST or AUTH or OPTIONs is missing entirely. These things are handled in the function itself, and because Google Cloud functions running Python are preconfigured with <strong>Flask, </strong>all of that stuff is <em>really trivially easy.</em> That's right, we've got <em>Flask</em>, <em>Python</em>,<em> </em>and <em>GCP</em> all in a single post. Typing these words feels like eating cake while Dwyane The Rock Johnson reads me bedtime stories and caresses me as I fall asleep. It's great.</p><h3 id=\"create-your-function\">Create your Function</h3><p>Our function will intend to serve as a Python HTTP endpoint:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-5.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/func.gif\" class=\"kg-image\"><figcaption>Single-page setup. Easy.</figcaption></figure><ul><li><strong>Trigger</strong> specifies what will have access to this function. By selecting HTTP, we will immediately receive a URL.</li><li><strong>Source code</strong> gives us a few options to deploy our code with <em>cloud source repository</em> being by far the easiest solution, especially when working locally.</li><li><strong>Runtime</strong> allows you to select NodeJS by accident.</li></ul><p>Before we get to code, let's talk Python libraries.</p><h3 id=\"including-dependencies-in-your-function\">Including Dependencies in your Function</h3><p>Our function comes prepared with two files: <code>main.py</code> and our friend <code>requirements.txt</code>. These files do exactly what you'd expect, as per every project ever:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-4.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/Screen-Shot-2018-10-18-at-9.14.17-PM.png\" class=\"kg-image\"><figcaption>Unfortunately, ease-of-use ensures that GCP certifications will be in low demand.</figcaption></figure><p>Our function immediately installs all dependencies in <code>requirements.txt</code> for use upon deployment. Once deployed, we can import these libraries as expected. So, let's deploy something.</p><h3 id=\"google-source-repositories\">Google Source Repositories</h3><p>Google's source repositories can serve as a stand-in replacement for Github (unlikely), or auto-sync to any repo on the version control behemoth of your choice. The advantage of this extra layer is mostly to trigger deployments upon commits, which in turn feed into GCP's own CI/CD processes (which remain young for now). Create a repo locally using gcloud:</p><pre><code class=\"language-bash\">$ gcloud source repos create real-repo\n$ cd myproject/\n$ git init\n--------------------------------------------------------\n(take a moment to write or save some actual code here)\n--------------------------------------------------------\n$ git add --all\n$ git remote add google https://source.developers.google.com/p/hackers/r/real-repo\n$ git commit -m 'cheesey init message'\n$ git push --all google\n</code></pre>\n<p>Now make that puppy go live with <code>gcloud functions deploy totally-dope-function</code>, where <em><strong>totally-dope-function</strong> </em>is name of your function, as it should be.</p><p>Now let's get to the coding part.</p><h2 id=\"the-coding-part-ft-flask-\">The Coding Part (ft. Flask)</h2><p>Here's perhaps the most basic endpoint you'll ever create:</p><pre><code class=\"language-python\">import requests\n\ndef endpoint(request):\n    &quot;&quot;&quot;Does the things.&quot;&quot;&quot;\n    if request.method == 'POST':\n    # Allows POST requests from any origin with the Content-Type\n    # header and caches preflight response for an 3600s\n    headers = {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'POST',\n        'Access-Control-Allow-Headers': 'Content-Type',\n        'Access-Control-Max-Age': '3600'\n    }\n    request_json = request.get_json()\n    if request_json:\n        plaintext = request_json['plain']\n        html = request_json['html']\n        return html\n    else:\n        return 'You didn't pass a JSON body you idiot.'\n</code></pre>\n<p>If you're familiar with Flask (you are, because you're on this blog) you already know what all of this does. Look at that simple copy-paste of headers, as opposed to working them into a horrible web interface. Gasp in disbelief as you realize that typing <code>if request.method == 'POST':</code> would be a 10-minute task in a visual API building tool. We've made it fam.</p><h3 id=\"ease-of-logging\">Ease of Logging</h3><p>Because we have a real endpoint to work with, we don't need to waste any time simulating stupid fucking tests where we send fake JSON to our function. We can use postman or anything to immediately interact with our endpoint, and the logs are a click away:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/logs.gif\" class=\"kg-image\"><figcaption>Easy. Breezy. Beautiful.</figcaption></figure><p>There's no point in me droning on at this point because you've surely already ventured into the Google Cloud console in blissful disbelief as a good obedient drone would. If adopting Google Cloud is the last shred of hope we have to resist Google's all-knowing algorithms which have already replaced the illusion of free will, I'd gladly take that dystopia over setting up monolithic <em>API Gateways </em>any day.</p><h2 id=\"the-downsides\">The Downsides</h2><p>Time for the asterisks to kill that euphoric buzz you might've experienced for a brief moment. My sole purpose as an engineer is to have my dreams crushed full-time; I simply cant resist returning the favor.</p><p>First notable drawback of Cloud functions is a <strong>lack of out-of-the-box custom DNS</strong> configuration. Firebase has workarounds for this, but Firebase is a beast of its own.</p><p>When it comes to debugging, functions tend to fall short in comparison to their Lambda rivals. Most Cloud Function debugging involves deploying, testing in dev, and sifting through cryptic error logs (they can be quite bad). There's nearly no <strong>UI mock testing</strong> to speak of. You'd better brush up on PyTest.</p><p>My best advice is to <em>be careful </em>with what services you play around with on GCP. Let's not forget this is a platform geared exclusively towards enterprises; the fact that we're even playing ball here makes us weirdos in the first place. Don't let yourself hemorrhage money like an enterprise.</p>","url":"https://hackersandslackers.com/creating-a-python-google-cloud-function/","uuid":"ec428cb9-976e-4578-a3de-9120a0dd7352","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5bc91ac23d1eab214413b12b"}},"pageContext":{"slug":"creating-a-python-google-cloud-function"}}