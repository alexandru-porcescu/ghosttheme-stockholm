{"data":{"ghostPost":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736f5","title":"Lynx Roundup, September 10th","slug":"lynx-roundup-september-10th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx72@2x.jpg","excerpt":"Bayesian view on Neural Networks!  How Chrome can still freeze even on a nigh-supercomputer!  A tour inside a chip that does Floating Point calcs!  ","custom_excerpt":"Bayesian view on Neural Networks!  How Chrome can still freeze even on a nigh-supercomputer!  A tour inside a chip that does Floating Point calcs!  ","created_at_pretty":"05 September, 2018","published_at_pretty":"10 September, 2018","updated_at_pretty":"10 September, 2018","created_at":"2018-09-05T15:45:37.000-04:00","published_at":"2018-09-10T07:00:00.000-04:00","updated_at":"2018-09-10T07:00:00.000-04:00","meta_title":"Bayesian view on Neural Networks!  How Chrome can still freeze even on a nigh-supercomputer!  A tour inside a chip that does Floating Point calcs!   | Hackers And Slackers","meta_description":"Bayesian view on Neural Networks!  How Chrome can still freeze even on a nigh-supercomputer!  A tour inside a chip that does Floating Point calcs!  ","og_description":"Bayesian view on Neural Networks!  How Chrome can still freeze even on a nigh-supercomputer!  A tour inside a chip that does Floating Point calcs!  ","og_image":"https://hackersandslackers.com/content/images/lynx/lynx72@2x.jpg","og_title":"Lynx Roundup, September 10th","twitter_description":"Bayesian view on Neural Networks!  How Chrome can still freeze even on a nigh-supercomputer!  A tour inside a chip that does Floating Point calcs!  ","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx72@2x.jpg","twitter_title":"Lynx Roundup, September 10th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"I wasn’t looking for trouble. I wasn’t trying to compile a huge project in the\nbackground (24-core CPU and I can’t move my mouse\n[http://randomascii.wordpress.com/2017/07/09/24-core-cpu-and-i-cant-move-my-mouse/]\n), I was just engaging in that most mundane of 21st century tasks, writing an\nemail at 10:30 am. And suddenly gmail hung. I kept typing but for several\nseconds but no characters were appearing on screen. Then, suddenly gmail caught\nup and I resumed my very important  email. Then it happened again, only this\ntime gmail went unresponsive for even longer. Well that’s funny\n[https://quoteinvestigator.com/2015/03/02/eureka-funny/]…\n\nI have trouble resisting a good performance mystery but in this case the draw\nwas particularly strong. I work at Google, making Chrome, for Windows, focused\non performance. Investigating this hang was actually my job. And after a lot of\nfalse starts and some hard work I figured out how Chrome, gmail, Windows, and\nour IT department were working together to prevent me from typing an email, and\nin the process I found a way to save a significant amount of memory for some web\npages in Chrome.\n\nThis investigation had so many rabbit holes that I’m going to save some of the\ndigressions for a follow-on post (which is here\n[https://randomascii.wordpress.com/2018/08/22/24-core-cpu-and-i-cant-type-an-email-part-two/]\n) , but this one will entirely explain the hangs. \n\nAs usual I had UIforETW\n[https://randomascii.wordpress.com/2015/09/01/xperf-basics-recording-a-trace-the-ultimate-easy-way/] \n running in the background, tracing to circular buffers, so I just had to type\nCtrl+Win+R and the buffers, representing the last thirty seconds or so of system\nactivity, were saved to disk. I loaded it into Windows Performance Analyzer\n[https://randomascii.wordpress.com/2012/06/19/wpaxperf-trace-analysis-reimagined/] \n (WPA), but I couldn’t definitively find the hang.\n\nWhen a Windows program stops pumping messages there will be ETW events emitted\nto indicate exactly where this happened\n[https://randomascii.wordpress.com/2012/05/05/xperf-wait-analysisfinding-idle-time/]\n, so those types of hangs are trivial to find. But apparently Chrome kept on\npumping messages. I looked for a time when one of Chrome’s crucial threads\neither went into a busy loop or went completely idle, but I couldn’t find\nanything conclusive. There were some spots where Chrome went mostly  idle, but\neven then all of the key threads kept chugging along, so I couldn’t be sure\nwhere the hang was – Chrome might have been going idle because nothing was\nhappening:\n\n  [http://randomascii.files.wordpress.com/2018/08/image.png]\n\n  [http://randomascii.files.wordpress.com/2018/08/image1.png]UIforETW has a\nbuilt-in key logger which is often useful when identifying key points in a\ntrace. However, for obvious security reasons it defaults to anonymizing the\nkeystrokes, treating every number typed as a ‘1’ and every letter as an ‘A’.\nThis was making it hard to find the exact moment of the hang so I turned the\ninput tracing from “Private” to “Full” and waited for the hang. At around 10:30\nthe next morning the hang happened again. I saved the trace buffers, and put\nthese notes into UIforETW’s trace information field:\n\nWas typing “defer to those with more scuba experience” and gmail hung around the\nend of “those” and then resumed partway through “experience”. gmail tab was PID\n27368.\n\nClearly just a normal work-related discussion of commute methods\n[https://randomascii.wordpress.com/2017/05/01/commute-challenge-2017/], but the\nimportant thing is that now I had a way of locating the hang in the ETW trace. I\nloaded the trace, looked at the keyboard data in the Generic Events field (the\nevents are emitted by UIforETW itself, each one is a purple diamond in the\nscreen shot below) and suddenly I could see exactly where the hang was, and\nclearly the dip in CPU usage was 100% correlated:\n\n  [http://randomascii.files.wordpress.com/2018/08/image2.png]\n\nOkay, but why is Chrome stopping? Here’s some foreshadowing: not shown in these\nscreenshots is that WmiPrvSE.exe\n[https://docs.microsoft.com/en-us/windows/desktop/wmisdk/wmi-start-page]  was\nconsuming an entire CPU hyperthread whenever this happened. But that shouldn’t\nmatter. I have a 24-core/48-thread machine so consuming one hyperthread means my\nmachine is still about 98% idle.\n\nI then zoomed in to the clearly-significant period where Chrome was idle and\nlooked in particular at CrRendererMain in chrome.exe (27368), the gmail tab\nprocess.\n\nAside: I just want to say thank you to 2015 me\n[https://randomascii.wordpress.com/2015/10/26/thread-naming-in-windows-time-for-something-better/] \n for asking Microsoft to improve their thread naming mechanisms, and thank you\nto Microsoft for doing everything I suggested – thread names in WPA are great!\n\nThe problem suddenly became clearer. During the 2.81 s hang this thread was\nscheduled and ran 440 separate times. Normally running every 6 ms is enough to\nmake a program responsive, but for some reason it wasn’t making any progress. I\nnoticed that every time it woke up it was on the same stack. Simplified down it\nwas:\n\nchrome_child.dll (stack base)\nKernelBase.dll!VirtualAlloc\nntoskrnl.exe!MiCommitVadCfgBits\nntoskrnl.exe!MiPopulateCfgBitMap\nntoskrnl.exe!ExAcquirePushLockExclusiveEx\nntoskrnl.exe!KeWaitForSingleObject (stack leaf)\n\nChrome is calling VirtualAlloc, which tries to update some “CfgBits” and needs\nto acquire a lock. At first I assumed that Chrome was calling VirtualAlloc 440\ntimes, which seemed like a weird thing to do, but the reality was perhaps\nweirder. Chrome called VirtualAlloc once and a lock needed to be acquired.\nChrome was signaled when that lock was available but – for 439 times in a row –\nwhen Chrome woke up and tried to acquire the lock it was unavailable. The lock\nhad been reacquired by the process that had just released it.\n\nThis is because many Windows locks are, by design, not fair\n[http://joeduffyblog.com/2006/12/14/anticonvoy-locks-in-windows-server-2003-sp1-and-windows-vista/] \n and if a thread releases a lock and then tries to reacquire it immediately then\nit can, in cases like this, reacquire it every single time. Starvation. More on\nthis next time.\n\nThe Readying Process – the one that signaled Chrome to go grab the lock – in \nevery  case was WmiPrvSE.exe, releasing the lock on this stack:\n\nntoskrnl.exe!KiSystemServiceCopyEnd (stack base)\nntoskrnl.exe!NtQueryVirtualMemory\nntoskrnl.exe!MmQueryVirtualMemory\nntoskrnl.exe!MiUnlockAndDereferenceVad\nntoskrnl.exe!ExfTryToWakePushLock (stack leaf)\n\nI got distracted by WMI for a while (more on that next time) but eventually I\nwrote a program to recreate WMI’s behavior. I had CPU sampling data that showed\nme where WmiPrvSE.exe was spending its time (some edits and simplifications\nmade):\n\nWmiPerfClass.dll!EnumSelectCounterObjects (stack base)\nWmiPerfClass.dll!ConvertCounterPath\npdh.dll!PdhiTranslateCounter\npdh.dll!GetSystemPerfData\nKernelBase.dll!blah-blah-blah\nadvapi32.dll!blah-blah-blah\nperfproc.dll!blah-blah-blah\nperfproc.dll!GetProcessVaData\nntdll.dll!NtQueryVirtualMemory\nntoskrnl.exe!NtQueryVirtualMemory\nntoskrnl.exe!MmQueryVirtualMemory\nntoskrnl.exe!MiQueryAddressSpan\nntoskrnl.exe!MiQueryAddressState\nntoskrnl.exe!MiGetNextPageTable (stack leaf)\n\nIt turns out that reproducing the slow scanning from the sampling data was quite\neasy. The interesting part of the call stack above is NtQueryVirtualMemory,\nwhich is used to scan process memory, and is called by the suggestively named \nGetProcessVaData, where Va  probably stands for  Virtual Address. My VirtualScan\nprogram just called NtQueryVirtualMemory  in the obvious loop to scan the\naddress space of a specified process, the code worked, it took a really long\ntime to scan the gmail process (10-15 seconds), and it triggered the hang. But\nwhy?\n\nThe advantage of writing the scanning loop myself was that I could start\ngenerating statistics. NtQueryVirtualMemory\n[https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/content/ntifs/nf-ntifs-ntqueryvirtualmemory] \n returns data on each contiguous range of address space that has matching\nattributes. That might mean all reserved, all committed with particular\nprotection settings, etc. The gmail process had about 26,000 of these blocks but\nI found another process (WPA\n[https://randomascii.wordpress.com/2012/06/19/wpaxperf-trace-analysis-reimagined/]\n, as it turns out) that had 16,000 memory blocks but could be scanned very\nquickly.\n\nAt some point I looked at the gmail process with vmmap\n[https://docs.microsoft.com/en-us/sysinternals/downloads/vmmap]  and noticed\nthat the gmail process had a fair amount of memory (361,836 KiB) and a lot of\nseparate blocks (49,719) coming from a single reservation in the Shareable\ncategory – a reservation with a size of 2,147,483,648 KiB, aka 2 TiB. Wot?\n\n  [http://randomascii.files.wordpress.com/2018/08/image4.png]\n\nI happened to know that the 2 TiB reservation is used for Control Flow Guard\n[http://www.alex-ionescu.com/?p=246]  (CFG), and I remembered that “CFG” showed\nup on the call stacks where the gmail Chrome process was waiting – \nMiCommitVadCfgBits  was on the stack. Maybe the large number of blocks in the\nCFG region were the problem!\n\nControl Flow Guard (CFG) is used to try to stop exploits. Its 2 TiB reservation\nis a sparse bitmap which indicates which addresses (across 128 TiB of user-mode\naddress space) are valid indirect branch targets. So I modified my virtual\nmemory scanner to count how many blocks were in the CFG region (just look for\nthe 2 TiB reservation) and how many blocks were tagged as executable. Since CFG\nmemory is used to describe  executable memory I expected to see one block of CFG\nmemory for each block of executable memory in the process. Instead I saw 98\nblocks of executable memory and 24,866  blocks of committed CFG memory. A\nsignificant discrepancy:\n\n     Scan time,  Committed, page tables, committed blocks\nTotal: 41.763s, 1457.7 MiB,    67.7 MiB,  32112, 98 code blocks\nCFG:   41.759s,  353.3 MiB,    59.2 MiB,  24866\n\nvmmap shows reservations and commited memory as blocks and my scanning tool only\ncounts committed blocks – that’s why vmmap shows 49,684 blocks where my scanning\ntool reports 24,866\n\nIn hindsight it is obvious, but what if the CFG bitmap never gets cleaned up?\nWhat if memory gets allocated in the CFG bitmap when you allocate executable\nmemory, but it doesn’t get freed when you free the executable memory. That would\nexplain this behavior.\n\nEnd-to-end repro\nThe next step was to write a VAllocStress program that allocates and then frees\nthousands of blocks of executable memory at random addresses. This executable\nneeds to have CFG enabled and needs to be 64-bit and I hit some road blocks\nbecause I didn’t really know what I was trying to do but it worked. After\nallocating and freeing this many blocks of executable memory this program should\nsit in a loop where it occasionally try to allocate/free more executable memory,\nand note when this is slow. Here is my basic algorithm for VAllocStress:\n\n 1. Spin in a loop a lot of times: 1. Allocate some executable memory with\n        VirtualAlloc at a random address\n     2. Free the memory \n    \n    \n 2. Then, spin in an infinite loop: 1. Sleep for 500 ms (don’t want to be a CPU\n        hog)\n     2. Allocate some executable memory with\n        VirtualAlloc at a fixed location\n     3. Print a message if the VirtualAlloc call\n        takes more than ~500 ms\n     4. Free the memory \n    \n    \n\nThat’s it. It’s super simple. And it was so satisfying when it worked. I ran it\nand then got my VirtualScan program to scan my VAllocStress process. I quickly\ngot confirmation that the CFG block was horribly fragmented, and the scanning\ntook a long  time. And my VAllocStress program hung for the duration of the\nscan!\n\nAt this point I had simulated the CFG fragmentation, the long scanning times,\nand the hang. Huzzah!\n\nRoot-cause\nIt turns out that v8 (Chrome’s JavaScript engine) has CodeRange objects for\nmanaging code-gen, and each CodeRange object is constrained to a 128 MiB\naddress\nrange\n[https://cs.chromium.org/chromium/src/v8/src/globals.h?q=kMaximalCodeRangeSize&dr=CSs&l=182]\n. This should be small enough to avoid the rampant CFG allocation I was seeing.\n\nBut what if you have multiple CodeRange objects, and what if those get allocated\nat random addresses and then freed? I instrumented the CodeRange constructor,\nleft gmail running, and found the smoking gun. Every couple of minutes another\nCodeRange object was created (and destroyed). Being in the debugger made it easy\nto find that WorkerThread::Start was allocating these objects, and suddenly\neverything makes sense:\n\n 1. gmail uses service workers\n    [https://developers.google.com/web/fundamentals/codelabs/offline/], probably\n    for implementing offline mode\n 2. These appear and disappear every few minutes because that’s how service\n    workers behave\n 3. Each worker thread gets a temporary CodeRange object which allocates some\n    executable pages for JITted JavaScript code from a random location in the\n    47-bit process address space\n 4. The 2 TB CFG memory reservation gets some entries every time new code pages\n    are allocated\n 5. The CFG allocations are never freed\n 6. NtQueryVirtualMemory is painfully  slow when scanning CFG memory (about 1 ms\n    per block) for reasons that I don’t understand \n\nThe slow scanning of CFG memory is actually fixed in Windows 10 RS4 (April 2018\nUpdate), which briefly had me wondering if all of this investigation was\npointless. But it’s not.\n\nMemory\nThe CFG reservation starts out as just an address reservation – no memory is\nactually committed. As executable pages are allocated however parts of the CFG\nreservation are turned into committed memory, using real memory pages. And those\npages never get freed. If you keep allocating and freeing randomly located\nblocks of executable memory then the CFG region will grow arbitrarily large!\nWell, that’s not quite true. The CFG memory block is best thought of a cache\nwith bounded size. However that is little consolation when the bounded size is \n2\nTiB, per-process [https://twitter.com/BruceDawson0xB/status/1029433717670871040]\n!\n\nThe worst I’ve seen so far is when my gmail tab had been running for eight days\nand had accumulated 353.3 MiB of CFG memory, and 59.2 MiB of page-tables to map\nthat memory, for a total waste of about 400 MiB. For some reason most people see\neither no symptoms or much milder symptoms than I do.\n\n\n\n\nResolution\nThe v8 (Chrome’s JavaScript engine) team has updated their code so that it \nreuses addresses for CodeRange objects\n[https://chromium-review.googlesource.com/c/v8/v8/+/1174837], which will squish\nthis bug quite nicely. Microsoft already fixed their CFG memory scanning\nperformance problems. Maybe some day Microsoft will free CFG regions when\nexecutable memory is freed, at least in the easy cases where large address\nranges are freed. And a vmmap bug was reported.\n\nMost of my coworkers and our customers never noticed this problem. I only\nnoticed it because:\n\n * I had gmail’s offline mode enabled\n * I was running on an old version of Windows 10\n * Our IT department was running regular WMI scans of our computers\n * I was paying attention\n * I got lucky \n\nIt seems highly improbably that, as one of the most qualified people to diagnose\nthis bug, I was the first to notice it. If any of the factors above had not been\ntrue then I would not have experienced this hang and the associated memory waste\nmight never have been found.\n\nBy the way, the reason that the hangs kept happening at 10:30 am is just because\nthat’s when our IT team ran their inventory scans. If you want to trigger a scan\nmanually, you can go to Control Panel | Configuration Manager | Actions | Select\n‘Hardware Inventory Cycle’ and then Run Now.\n\n  [http://randomascii.files.wordpress.com/2018/08/clip_image002.png]\n\nSource code\nIf you want to play along at home you can grab the source-code to VAllocStress\nand VirtualScan from github, here\n[https://github.com/randomascii/blogstuff/tree/master/cfg].\n\nRabbit holes\nThis investigation included a lot  of rabbit holes. Some were important (page\ntables), some were instructive (locks), and some were purely a waste of time\n(WMI details). I’ll talk more about these, and a vmmap bug, in a follow-up post.\nIf you want more gory details – some of which ended up being wrong or irrelevant\n– you can follow the whole investigation at crbug.com/870054\n[https://bugs.chromium.org/p/chromium/issues/detail?id=870054].\n\nHacker news discussion is here [https://news.ycombinator.com/item?id=17780127].\n\nReddit discussion is here\n[https://www.reddit.com/r/programming/comments/97zy08/24core_cpu_and_i_cant_type_an_email_part_one/]\n.\n\nRussian translation is here [https://habr.com/post/420579/].\n\nJapanese translation is here\n[https://gigazine.net/news/20180825-google-engineer-fix-chrome-hang/].\n\n\n\nZombies probably won’t consume 32 GB of your memory like they did to me, but\nzombie processes do exist, and I can help you find them and make sure that\ndevelopers fix them. Tool source link is at the bottom.\n\nIs it just me, or do Windows machines that have been up for a while seem to lose\nmemory? After a few weeks of use (or a long weekend of building Chrome over 300\ntimes) I kept noticing that Task Manager showed me running low on memory, but it\ndidn’t show the memory being used  by anything. In the example below task\nmanager shows 49.8 GB of RAM in use, plus 4.4 GB of compressed memory, and yet\nonly 5.8 GB of page/non-paged pool, few processes running, and no process using\nanywhere near enough to explain where the memory had gone:\n\n  [http://randomascii.files.wordpress.com/2018/02/image3.png]\n\nMy machine has 96 GB of RAM – lucky me – and when I don’t have any programs\nrunning I think it’s reasonable to hope that I’d have at least half of it\navailable.\n\n\n\nSometimes I have dealt with this by rebooting but that should never be\nnecessary. The Windows kernel is robust and well implemented\n[https://twitter.com/nasko/status/962573875010707457]  so this memory\ndisappearing shouldn’t happen, and yet…\n\nThe first clue came when I remembered that a coworker of mine\n[https://twitter.com/tiraniddo]  had complained of zombie processes being left\nbehind – processes that had shut down but not been cleaned up by the kernel.\nHe’d even written a tool that would dump a list of zombie processes – their\nnames and counts. His original complaint was of hundreds of zombies. I ran his\ntool and it showed 506,000 zombie processes!\n\nIt occurred to me that one cause of zombie processes could be one process\nfailing to close the handles to other processes. And the great thing about\nhaving a huge number of zombies is that they are harder to hide. So, I went to\nTask Manager’s Details tab, added the Handles column, and sorted by it. Voila. I\nimmediately saw that CcmExec.exe (part of Microsoft’s System Management Server\n[https://blogs.msdn.microsoft.com/jonathanh/2004/05/27/ccmexec-exe-and-inventory-exe-what-are-they-and-what-do-they-do/]\n) had 508,000 handles open, which is both a lot  and also amazingly close to my\nzombie count.\n\n  [http://randomascii.files.wordpress.com/2018/02/image4.png]\n\nI held my breath and killed CcmExec.exe, unsure of what would happen:\n\n\n\nThe results were as dramatic as I could imagine. As I said earlier, the Windows\nkernel is well written and when a process is killed then all of its resources\nare freed. So, those 508,000 handles that were owned by CcmExec.exe were\nabruptly closed and my available memory went up by 32 GB! Mystery solved!\n\nWhat is  a zombie process?\nUntil this point we weren’t entirely sure what was causing these processes to\nhang around. In hindsight it’s obvious that these zombies were caused by a\ntrivial user-space coding bug. The rule is that when you create a process you\nneed to call CloseHandle  on its process handle and its thread handle. If you\ndon’t care about the process then you should close the handles immediately. If\nyou do care – if you want to wait for the process to quit – \nWaitForSingleObject(hProcess, INFINITE);  – or query its exit code – \nGetExitCodeProcess(hProcess, &exitCode);  – then you need to remember to close\nthe handles after that. Similarly, if you open an existing process with \nOpenProcess  you need to close that handle when you are done.\n\nIf the process that holds on to the handles is a system process then it will\neven continue holding those handles after you log out and log back in – another\nsource of confusion during our investigation last year.\n\nSo, a zombie process is a process that has shut down but is kept around because\nsome other still-running process holds a handle to it. It’s okay for a process\nto do this briefly, but it is bad form to leave a handle unclosed for long.\n\nWhere is that memory going?\nAnother thing I’d done during the investigation was to run RamMap\n[https://docs.microsoft.com/en-us/sysinternals/downloads/rammap]. This tool\nattempts to account for every page of memory in use. Its Process Memory tab had\nshown hundreds of thousands of processes that were each using 32 KB of RAM and\npresumably those were the zombies. But ~500,000 times 32 KB only equals ~16 GB –\nwhere did the rest of the freed up memory come from? Comparing the before and\nafter Use Counts pages in RamMap explained it:\n\n  [http://randomascii.files.wordpress.com/2018/02/image5.png]\n\nWe can plainly see the ~16 GB drop in Process Private memory. We can also see a\n16 GB drop in Page Table memory. Apparently a zombie process consumes ~32 KB of\npage tables, in addition to its ~32 KB of process private memory, for a total\ncost of ~64 KB. I don’t know why zombie processes consume that much RAM, but\nit’s probably because there should never be enough of them for that to matter.\n\nA few types of memory actually increased  after killing CcmExec.exe, mostly\nMapped File and Metafile. I don’t know what that means but my guess would be\nthat that indicates more data being cached, which would be a good thing. I don’t\nnecessarily want memory to be unused, but I do want it to be available.\n\nTrivia: rammap opens all processes, including zombies, so it needs to be closed\nbefore zombies will go away\n\nI tweeted about my discovery and the investigation was picked up by another\nsoftware developer [https://twitter.com/WithinRafael]  and they reproed the bug\nusing my ProcessCreateTests\n[https://github.com/randomascii/blogstuff/tree/master/ProcessCreateTests]  tool.\nThey also passed the information to a developer at Microsoft who said it was a\nknown issue that “happens when many processes are opened and closed very quickly\n[https://twitter.com/djammmer/status/961727396423516160]”.\n\nWindows has a reputation for not handling process creation as well as Linux and\nthis investigation, and one of my previous ones\n[https://randomascii.wordpress.com/2017/07/09/24-core-cpu-and-i-cant-move-my-mouse/]\n, suggest that that reputation is well earned. I hope that Microsoft fixes this\nbug – it’s sloppy.\n\nWhy do I hit so many crazy problems?\nI work on the Windows version of Chrome, and one of my tasks is optimizing its\nbuild system, which requires doing a lot of test builds. Building chrome\ninvolves creating between 28,000 and 37,000 processes, depending on build\nsettings. When using our distributed build system (goma) these processes are\ncreated and destroyed very quickly – my fastest full build ever took about 200\nseconds. This aggressive process creation has revealed a number of interesting\nbugs, mostly in Windows or its components:\n\n * Fast process destruction led to system input hangs\n   [https://randomascii.wordpress.com/2017/07/09/24-core-cpu-and-i-cant-move-my-mouse/]\n * Synaptics driver leaked memory\n   [https://randomascii.wordpress.com/2017/09/05/hey-synaptics-can-you-please-stop-polling/] \n    whenever a process was created\n * O(n^2) log-file creation\n   [https://twitter.com/BruceDawson0xB/status/962562314456072193]  in App\n   Verifier – my next blog post?\n * A Windows kernel file buffer bug\n   [https://twitter.com/BruceDawson0xB/status/958517353435680768]  from Server\n   2008 R2 to Windows 10\n * Windows Defender delaying each goma compiler launch by 250 ms\n\nWhat now?\nIf you aren’t on a corporate managed machine then you probably don’t run\nCcmExec.exe and you will avoid this particular bug. And if you don’t build\nChrome or something equivalent then you will probably avoid this bug. But!\n\nCcmExec is not the only program that leaks process handles. I have found many\nothers leaking modest numbers of handles and there are certainly more.\n\nThe bitter reality, as all experienced programmers know, is that any mistake\nthat is not explicitly prevented will be made\n[https://twitter.com/BruceDawson0xB/status/962593405581762565]. Simply writing\n“This handle must be closed” in the documentation is insufficient. So, here is\nmy contribution towards making this something detectable, and therefore\npreventable. FindZombieHandles\n[https://github.com/randomascii/blogstuff/tree/master/FindZombieHandles]  is a\ntool, based on NtApiDotNet [https://www.nuget.org/packages/NtApiDotNet/]  and\nsample code from @tiraniddo [t@tiraniddo], that prints a list of zombies and who\nis keeping them alive. Here is sample output from my home laptop:\n\n274 total zombie processes.\n249 zombies held by IntelCpHeciSvc.exe(9428)\n249 zombies of Video.UI.exe\n14 zombies held by RuntimeBroker.exe(10784)\n11 zombies of MicrosoftEdgeCP.exe\n3 zombies of MicrosoftEdge.exe\n8 zombies held by svchost.exe(8012)\n4 zombies of ServiceHub.IdentityHost.exe\n2 zombies of cmd.exe\n2 zombies of vs_installerservice.exe\n3 zombies held by explorer.exe(7908)\n3 zombies of MicrosoftEdge.exe\n1 zombie held by devenv.exe(24284)\n1 zombie of MSBuild.exe\n1 zombie held by SynTPEnh.exe(10220)\n1 zombie of SynTPEnh.exe\n1 zombie held by tphkload.exe(5068)\n1 zombie of tpnumlkd.exe\n1 zombie held by svchost.exe(1872)\n1 zombie of userinit.exe\n\n274 zombies isn’t too bad, but it represents some bugs that should be fixed. The\nIntelCpHeciSvc.exe one is the worst, as it seems to leak a process handle every\ntime I play a video from Windows Explorer.\n\nVisual Studio leaks handles to at least two processes and one of these is easy\nto reproduce. Just fire off a build and wait ~15 minutes for MSBuild.exe to go\naway. Or, if you “set MSBUILDDISABLENODEREUSE=1” then MSBuild.exe goes away\nimmediately and every build leaks a process handle. Unfortunately some jerk  at\nMicrosoft fixed this bug\n[https://twitter.com/Tashkant/status/961645045370818563]  the moment I reported\nit, and the fix may ship in VS 15.6, so you’ll have to act quickly to see this\n(and no, I don’t really think he’s a jerk).\n\nYou can also see leaked processes using Process Explorer\n[https://docs.microsoft.com/en-us/sysinternals/downloads/process-explorer], by\nconfiguring the lower pane to show handles, as shown here (note that both the\nprocess and  thread handles are leaked in this case):\n\n  [http://randomascii.files.wordpress.com/2018/02/image6.png]\n\nJust a few of the bugs found, not all reported\n * CcmExec.exe leak [https://twitter.com/djammmer/status/961727396423516160],\n   over 500,000 zombies leaked (fixes in progress\n   [https://twitter.com/djammmer/status/964031700845019137])\n * Program Compatibility Assistant Service leaks random processes\n   [https://twitter.com/BruceDawson0xB/status/963476981273604096] (being\n   investigated [https://twitter.com/appcompatguy/status/963837005795942401])\n * devenv.exe leak [https://twitter.com/Tashkant/status/961645045370818563]  of\n   MSBuild.exe (fixed [https://twitter.com/Tashkant/status/961645045370818563])\n * devenv.exe leak\n   [https://developercommunity.visualstudio.com/content/problem/197479/devenv-holds-handles-to-servicehubhostnodex86exe-z.html] \n    of ServiceHub.Host.Node.x86.exe (bug filed\n   [https://developercommunity.visualstudio.com/content/problem/197479/devenv-holds-handles-to-servicehubhostnodex86exe-z.html]\n   )\n * IntelCpHeciSvc.exe leaks\n   [https://twitter.com/BruceDawson0xB/status/963118379371454464]  Video.UI.exe\n   for each video played (Intel passes the buck to Lenovo\n   [https://twitter.com/BruceDawson0xB/status/963118379371454464])\n * RuntimeBroker.exe leak of MicrosoftEdge and Video.UI.exe (perhaps related to \n   other bugs in RuntimeBroker.exe\n   [https://twitter.com/marypcbuk/status/964560351638548480])\n * AudioSrv service leak of Video.UI.exe\n * Handle leak in Google internal tool due to old version of psutil\n   [https://github.com/giampaolo/psutil/issues/870]\n * Lenovo’s tphkload.exe leaks one handle, their SUService.exe leaks three\n   handles\n * Synaptic’s SynTPEnh.exe leaks one handle\n * googledrivesync.exe leaks one handle (reported internally)\n\nProcess handles aren’t the only kind that can be leaked. For instance, the\n“Intel(R) Online Connect Access service” (IntelTechnologyAccessService.exe) only\nuses 4 MB of RAM, but after 30 days of uptime had created 27,504 (!!!) handles.\nI diagnosed this leak using just Task Manager and reported it here\n[https://twitter.com/BruceDawson0xB/status/965301833517289472]. I also used the\nawesome !htrace command in windbg to get stacks for the CreateEventW calls from\nIntel’s code [https://twitter.com/BruceDawson0xB/status/970896367475306497].\nThink they’ll fix this?\n\n  [http://randomascii.files.wordpress.com/2018/02/image7.png]\n\nUsing Processs Explorer I could see that NVDisplay.Container.exe from NVIDIA has\n ~5,000 handles [https://twitter.com/BruceDawson0xB/status/962428705954910208] \nto \\BaseNamedObjects\\NvXDSyncStop-61F8EBFF-D414-46A7-90AE-98DD58E4BC99 event,\ncreating a new one about every two minutes? I guess they want to be really  sure\nthat they can stop NvXDSync? Reported\n[https://twitter.com/HairySphere/status/963113789867679744], and a fix has been\nchecked in [https://twitter.com/HairySphere/status/964553497671847936].\n\n  [http://randomascii.files.wordpress.com/2018/02/image8.png]\n\nApparently Corsair Link Service leaks ~15 token handles per second\n[https://twitter.com/kasper_93/status/963132642664296449]. Reported here\n[https://twitter.com/BruceDawson0xB/status/964562328388694016].\n\nApparently Adobe’s Creative Cloud leaks tens of thousands of handles\n[https://news.ycombinator.com/item?id=16359696] – ~6,500 a day? Reported here\n[https://twitter.com/BruceDawson0xB/status/964562328388694016].\n\nApparently Razer Chroma SDK Service leaks a lot of handles\n[https://www.reddit.com/r/programming/comments/7x10z9/zombie_processes_are_eating_your_memory/du54yqa/]\n – 150,000 per hour [https://twitter.com/abyrd89/status/963149836609511424]?\nReported here [https://twitter.com/BruceDawson0xB/status/964563577368494080].\n\nApparently ETDCtrl.exe (11.x), some app associated with ELANTech/Synaptics\ntrackpads, leaks handles to shared memory. The process accumulated about 16,000\nhandles and when the process was killed about 3 GB of missing RAM was returned\nto the system – quite noticeable on an 8 GB laptop with no swap.\n\nApparently nobody has been paying attention to this for a while – hey Microsoft,\nmaybe start watching for handle leaks so that Windows runs better? And Intel and\nNVIDIA? Take a look at your code. I’ll be watching you.\n\nSo, grab FindZombieHandles\n[https://github.com/randomascii/blogstuff/tree/master/FindZombieHandles], run it\non your machine, and report or fix what you find, and use Task Manager and\nProcess Explorer as well.\n\nTwitter announcement is here\n[https://twitter.com/BruceDawson0xB/status/962942762986303488], Hacker News\ndiscussion is here [https://news.ycombinator.com/item?id=16357018], reddit\ndiscussion is here\n[https://www.reddit.com/r/programming/comments/7x10z9/zombie_processes_are_eating_your_memory/]\n.\n\nUpdates: Microsoft recommended disabling the feature that leaks handles\n[https://twitter.com/djammmer/status/964032879561924608]  and doing so has\nresolved the issue for me (and they are fixing the leaks). It’s an expensive\nfeature and it turns out we were ignoring the data anyway! Also, all Windows 10\nPIDs are multiples of four which explains why ~500,000 zombies led to PIDs in\nthe 2,000,000+ range.\n\n\n\nhttp://www.latimes.com/opinion/op-ed/la-oe-dubal-gig-companies-undercut-california-wage-law-20180814-story.html\n\n\n\nhttp://www.righto.com/2018/08/inside-die-of-intels-8087-coprocessor.html\n\n\n\nRecommender Systems: Exploring the Unknown Using Uncertainty\n[https://engineering.taboola.com/recommender-systems-exploring-the-unknown-using-uncertainty/]\n\nNeural Networks from a Bayesian Perspective\n[https://engineering.taboola.com/neural-networks-bayesian-perspective/]","html":"<p></p><figure class=\"kg-card kg-embed-card\"><p>I wasn’t looking for trouble. I wasn’t trying to compile a huge project in the background (<a href=\"http://randomascii.wordpress.com/2017/07/09/24-core-cpu-and-i-cant-move-my-mouse/\">24-core CPU and I can’t move my mouse</a>), I was just engaging in that most mundane of 21st century tasks, writing an email at 10:30 am. And suddenly gmail hung. I kept typing but for several seconds but no characters were appearing on screen. Then, suddenly gmail caught up and I resumed my <em>very important</em> email. Then it happened again, only this time gmail went unresponsive for even longer. Well <a href=\"https://quoteinvestigator.com/2015/03/02/eureka-funny/\">that’s funny</a>…</p>\n<p>I have trouble resisting a good performance mystery but in this case the draw was particularly strong. I work at Google, making Chrome, for Windows, focused on performance. Investigating this hang was actually my <em>job</em>. And after a lot of false starts and some hard work I figured out how Chrome, gmail, Windows, and our IT department were working together to prevent me from typing an email, and in the process I found a way to save a significant amount of memory for some web pages in Chrome.</p>\n<p><!--more-->This investigation had so many rabbit holes that I’m going to save some of the digressions for a follow-on post (<a href=\"https://randomascii.wordpress.com/2018/08/22/24-core-cpu-and-i-cant-type-an-email-part-two/\">which is here</a>) , but this one will entirely explain the hangs.  </p>\n<p>As usual I had <a href=\"https://randomascii.wordpress.com/2015/09/01/xperf-basics-recording-a-trace-the-ultimate-easy-way/\">UIforETW</a> running in the background, tracing to circular buffers, so I just had to type Ctrl+Win+R and the buffers, representing the last thirty seconds or so of system activity, were saved to disk. I loaded it into <a href=\"https://randomascii.wordpress.com/2012/06/19/wpaxperf-trace-analysis-reimagined/\">Windows Performance Analyzer</a> (WPA), but I couldn’t definitively find the hang.</p>\n<p>When a Windows program stops pumping messages there will be ETW events emitted to indicate <a href=\"https://randomascii.wordpress.com/2012/05/05/xperf-wait-analysisfinding-idle-time/\">exactly where this happened</a>, so those types of hangs are trivial to find. But apparently Chrome kept on pumping messages. I looked for a time when one of Chrome’s crucial threads either went into a busy loop or went completely idle, but I couldn’t find anything conclusive. There were some spots where Chrome went <em>mostly</em> idle, but even then all of the key threads kept chugging along, so I couldn’t be sure where the hang was – Chrome might have been going idle because nothing was happening:</p>\n<p><a href=\"http://randomascii.files.wordpress.com/2018/08/image.png\"><img title=\"image\" style=\"background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border-width:0;\" border=\"0\" alt=\"image\" src=\"https://randomascii.files.wordpress.com/2018/08/image_thumb.png?w=624&#038;h=182\" width=\"624\" height=\"182\"></a></p>\n<p><a href=\"http://randomascii.files.wordpress.com/2018/08/image1.png\"><img title=\"image\" style=\"background-image:none;float:right;padding-top:0;padding-left:0;margin:0 0 3px 3px;display:inline;padding-right:0;border-width:0;\" border=\"0\" alt=\"image\" src=\"https://randomascii.files.wordpress.com/2018/08/image_thumb1.png?w=163&#038;h=202\" width=\"163\" align=\"right\" height=\"202\"></a>UIforETW has a built-in key logger which is often useful when identifying key points in a trace. However, for obvious security reasons it defaults to anonymizing the keystrokes, treating every number typed as a ‘1’ and every letter as an ‘A’. This was making it hard to find the exact moment of the hang so I turned the input tracing from “Private” to “Full” and waited for the hang. At around 10:30 the next morning the hang happened again. I saved the trace buffers, and put these notes into UIforETW’s trace information field:</p>\n<blockquote>\n<p>Was typing &#8220;defer to those with more scuba experience&#8221; and gmail hung around the end of &#8220;those&#8221; and then resumed partway through &#8220;experience&#8221;. gmail tab was PID 27368.</p>\n</blockquote>\n<p>Clearly just a normal work-related discussion of <a href=\"https://randomascii.wordpress.com/2017/05/01/commute-challenge-2017/\">commute methods</a>, but the important thing is that now I had a way of locating the hang in the ETW trace. I loaded the trace, looked at the keyboard data in the Generic Events field (the events are emitted by UIforETW itself, each one is a purple diamond in the screen shot below) and suddenly I could see exactly where the hang was, and clearly the dip in CPU usage was 100% correlated:</p>\n<p><a href=\"http://randomascii.files.wordpress.com/2018/08/image2.png\"><img title=\"image\" style=\"background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border-width:0;\" border=\"0\" alt=\"image\" src=\"https://randomascii.files.wordpress.com/2018/08/image_thumb2.png?w=635&#038;h=460\" width=\"635\" height=\"460\"></a></p>\n<p>Okay, but why is Chrome stopping? Here’s some foreshadowing: not shown in these screenshots is that <a href=\"https://docs.microsoft.com/en-us/windows/desktop/wmisdk/wmi-start-page\">WmiPrvSE.exe</a> was consuming an entire CPU hyperthread whenever this happened. But that shouldn’t matter. I have a 24-core/48-thread machine so consuming one hyperthread means my machine is still about 98% idle.</p>\n<p>I then zoomed in to the clearly-significant period where Chrome was idle and looked in particular at CrRendererMain in chrome.exe (27368), the gmail tab process.</p>\n<blockquote>\n<p>Aside: I just want to say thank you to <a href=\"https://randomascii.wordpress.com/2015/10/26/thread-naming-in-windows-time-for-something-better/\">2015 me</a> for asking Microsoft to improve their thread naming mechanisms, and thank you to Microsoft for doing everything I suggested – thread names in WPA are <em>great</em>!</p>\n</blockquote>\n<p>The problem suddenly became clearer. During the 2.81 s hang this thread was scheduled and ran 440 separate times. Normally running every 6 ms is enough to make a program responsive, but for some reason it wasn’t making any progress. I noticed that every time it woke up it was on the same stack. Simplified down it was:</p>\n<blockquote>\n<p>chrome_child.dll (stack base)<br>KernelBase.dll!VirtualAlloc<br>ntoskrnl.exe!MiCommitVadCfgBits<br>ntoskrnl.exe!MiPopulateCfgBitMap<br>ntoskrnl.exe!ExAcquirePushLockExclusiveEx<br>ntoskrnl.exe!KeWaitForSingleObject (stack leaf)</p>\n</blockquote>\n<p>Chrome is calling VirtualAlloc, which tries to update some “CfgBits” and needs to acquire a lock. At first I assumed that Chrome was calling VirtualAlloc 440 times, which seemed like a weird thing to do, but the reality was perhaps weirder. Chrome called VirtualAlloc once and a lock needed to be acquired. Chrome was signaled when that lock was available but – for 439 times in a row – when Chrome woke up and tried to acquire the lock it was unavailable. The lock had been reacquired by the process that had just released it.</p>\n<p>This is because many Windows locks are, by design, <a href=\"http://joeduffyblog.com/2006/12/14/anticonvoy-locks-in-windows-server-2003-sp1-and-windows-vista/\">not fair</a> and if a thread releases a lock and then tries to reacquire it immediately then it can, in cases like this, reacquire it every single time. Starvation. More on this next time.</p>\n<p>The Readying Process – the one that signaled Chrome to go grab the lock &#8211; in <em>every</em> case was WmiPrvSE.exe, releasing the lock on this stack:</p>\n<blockquote>\n<p>ntoskrnl.exe!KiSystemServiceCopyEnd (stack base)<br>ntoskrnl.exe!NtQueryVirtualMemory<br>ntoskrnl.exe!MmQueryVirtualMemory<br>ntoskrnl.exe!MiUnlockAndDereferenceVad<br>ntoskrnl.exe!ExfTryToWakePushLock (stack leaf)</p>\n</blockquote>\n<p>I got distracted by WMI for a while (more on that next time) but eventually I wrote a program to recreate WMI’s behavior. I had CPU sampling data that showed me where WmiPrvSE.exe was spending its time (some edits and simplifications made):</p>\n<blockquote>\n<p>WmiPerfClass.dll!EnumSelectCounterObjects (stack base)<br>WmiPerfClass.dll!ConvertCounterPath<br>pdh.dll!PdhiTranslateCounter<br>pdh.dll!GetSystemPerfData<br>KernelBase.dll!blah-blah-blah<br>advapi32.dll!blah-blah-blah<br>perfproc.dll!blah-blah-blah<br>perfproc.dll!GetProcessVaData<br>ntdll.dll!NtQueryVirtualMemory<br>ntoskrnl.exe!NtQueryVirtualMemory<br>ntoskrnl.exe!MmQueryVirtualMemory<br>ntoskrnl.exe!MiQueryAddressSpan<br>ntoskrnl.exe!MiQueryAddressState<br>ntoskrnl.exe!MiGetNextPageTable (stack leaf)</p>\n</blockquote>\n<p>It turns out that reproducing the slow scanning from the sampling data was quite easy. The interesting part of the call stack above is <em>NtQueryVirtualMemory</em>, which is used to scan process memory, and is called by the suggestively named <em>GetProcessVaData</em>, where <em>Va</em> probably stands for<em> Virtual Address</em>. My VirtualScan program just called <em>NtQueryVirtualMemory</em> in the obvious loop to scan the address space of a specified process, the code worked, it took a really long time to scan the gmail process (10-15 seconds), and it triggered the hang. But why?</p>\n<p>The advantage of writing the scanning loop myself was that I could start generating statistics. <a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/content/ntifs/nf-ntifs-ntqueryvirtualmemory\"><em>NtQueryVirtualMemory</em></a> returns data on each contiguous range of address space that has matching attributes. That might mean all reserved, all committed with particular protection settings, etc. The gmail process had about 26,000 of these blocks but I found another process (<a href=\"https://randomascii.wordpress.com/2012/06/19/wpaxperf-trace-analysis-reimagined/\">WPA</a>, as it turns out) that had 16,000 memory blocks but could be scanned very quickly.</p>\n<p>At some point I looked at the gmail process with <a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/vmmap\">vmmap</a> and noticed that the gmail process had a fair amount of memory (361,836 KiB) and a lot of separate blocks (49,719) coming from a single reservation in the Shareable category – a reservation with a size of 2,147,483,648 KiB, aka 2 TiB. Wot?</p>\n<p><a href=\"http://randomascii.files.wordpress.com/2018/08/image4.png\"><img title=\"image\" style=\"background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border-width:0;\" border=\"0\" alt=\"image\" src=\"https://randomascii.files.wordpress.com/2018/08/image_thumb4.png?w=585&#038;h=225\" width=\"585\" height=\"225\"></a></p>\n<p>I happened to know that the 2 TiB reservation is used for <a href=\"http://www.alex-ionescu.com/?p=246\">Control Flow Guard</a> (CFG), and I remembered that “CFG” showed up on the call stacks where the gmail Chrome process was waiting – <em>MiCommitVadCfgBits</em> was on the stack. Maybe the large number of blocks in the CFG region were the problem!</p>\n<p>Control Flow Guard (CFG) is used to try to stop exploits. Its 2 TiB reservation is a sparse bitmap which indicates which addresses (across 128 TiB of user-mode address space) are valid indirect branch targets. So I modified my virtual memory scanner to count how many blocks were in the CFG region (just look for the 2 TiB reservation) and how many blocks were tagged as executable. Since CFG memory is used to <em>describe</em> executable memory I expected to see one block of CFG memory for each block of executable memory in the process. Instead I saw 98 blocks of executable memory and <em>24,866</em> blocks of committed CFG memory. A significant discrepancy:</p>\n<p><span style=\"font-family:courier new;\">&nbsp;&nbsp;&nbsp;&nbsp; Scan time,&nbsp; Committed, page tables, committed blocks<br>Total: 41.763s, 1457.7 MiB,&nbsp;&nbsp;&nbsp; 67.7 MiB,&nbsp; 32112, 98 code blocks<br>CFG:&nbsp;&nbsp; 41.759s,&nbsp; 353.3 MiB,&nbsp;&nbsp;&nbsp; 59.2 MiB,&nbsp; 24866</span></p>\n<blockquote>\n<p>vmmap shows reservations and commited memory as blocks and my scanning tool only counts committed blocks – that’s why vmmap shows 49,684 blocks where my scanning tool reports 24,866</p>\n</blockquote>\n<p>In hindsight it is obvious, but what if the CFG bitmap never gets cleaned up? What if memory gets allocated in the CFG bitmap when you allocate executable memory, but it doesn’t get freed when you free the executable memory. That would explain this behavior.</p>\n<h2>End-to-end repro</h2>\n<p>The next step was to write a VAllocStress program that allocates and then frees thousands of blocks of executable memory at random addresses. This executable needs to have CFG enabled and needs to be 64-bit and I hit some road blocks because I didn’t really know what I was trying to do but it worked. After allocating and freeing this many blocks of executable memory this program should sit in a loop where it occasionally try to allocate/free more executable memory, and note when this is slow. Here is my basic algorithm for VAllocStress:</p>\n<ol>\n<li>Spin in a loop a lot of times:\n<ol>\n<li>Allocate some executable memory with VirtualAlloc at a random address\n</li><li>Free the memory </li>\n</ol>\n</li><li>Then, spin in an infinite loop:\n<ol>\n<li>Sleep for 500 ms (don’t want to be a CPU hog)\n</li><li>Allocate some executable memory with VirtualAlloc at a fixed location\n</li><li>Print a message if the VirtualAlloc call takes more than ~500 ms\n</li><li>Free the memory </li>\n</ol>\n</li>\n</ol>\n<p>That’s it. It’s super simple. And it was so satisfying when it worked. I ran it and then got my VirtualScan program to scan my VAllocStress process. I quickly got confirmation that the CFG block was horribly fragmented, and the scanning took a <em>long</em> time. And my VAllocStress program hung for the duration of the scan!</p>\n<p>At this point I had simulated the CFG fragmentation, the long scanning times, and the hang. Huzzah!</p>\n<h2>Root-cause</h2>\n<p>It turns out that v8 (Chrome’s JavaScript engine) has CodeRange objects for managing code-gen, and each CodeRange object is constrained to a <a href=\"https://cs.chromium.org/chromium/src/v8/src/globals.h?q=kMaximalCodeRangeSize&amp;dr=CSs&amp;l=182\">128 MiB address range</a>. This should be small enough to avoid the rampant CFG allocation I was seeing.</p>\n<p>But what if you have multiple CodeRange objects, and what if those get allocated at random addresses and then freed? I instrumented the CodeRange constructor, left gmail running, and found the smoking gun. Every couple of minutes another CodeRange object was created (and destroyed). Being in the debugger made it easy to find that WorkerThread::Start was allocating these objects, and suddenly everything makes sense:</p>\n<ol>\n<li>gmail uses <a href=\"https://developers.google.com/web/fundamentals/codelabs/offline/\">service workers</a>, probably for implementing offline mode\n</li><li>These appear and disappear every few minutes because that’s how service workers behave\n</li><li>Each worker thread gets a temporary CodeRange object which allocates some executable pages for JITted JavaScript code from a random location in the 47-bit process address space\n</li><li>The 2 TB CFG memory reservation gets some entries every time new code pages are allocated\n</li><li>The CFG allocations are never freed\n</li><li>NtQueryVirtualMemory is <em>painfully</em> slow when scanning CFG memory (about 1 ms per block) for reasons that I don’t understand </li>\n</ol>\n<p>The slow scanning of CFG memory is actually fixed in Windows 10 RS4 (April 2018 Update), which briefly had me wondering if all of this investigation was pointless. But it’s not.</p>\n<h2>Memory</h2>\n<p>The CFG reservation starts out as just an address reservation – no memory is actually committed. As executable pages are allocated however parts of the CFG reservation are turned into committed memory, using real memory pages. And those pages never get freed. If you keep allocating and freeing randomly located blocks of executable memory then the CFG region will grow arbitrarily large! Well, that’s not quite true. The CFG memory block is best thought of a cache with bounded size. However that is little consolation when the bounded size is <a href=\"https://twitter.com/BruceDawson0xB/status/1029433717670871040\">2 TiB, per-process</a>!</p>\n<p>The worst I’ve seen so far is when my gmail tab had been running for eight days and had accumulated 353.3 MiB of CFG memory, and 59.2 MiB of page-tables to map that memory, for a total waste of about 400 MiB. For some reason most people see either no symptoms or much milder symptoms than I do.<span style=\"font-family:courier new;\"><br></span></p>\n<p>&nbsp;</p>\n<h2>Resolution</h2>\n<p>The v8 (Chrome’s JavaScript engine) team has updated their code so that it <a href=\"https://chromium-review.googlesource.com/c/v8/v8/+/1174837\">reuses addresses for CodeRange objects</a>, which will squish this bug quite nicely. Microsoft already fixed their CFG memory scanning performance problems. Maybe some day Microsoft will free CFG regions when executable memory is freed, at least in the easy cases where large address ranges are freed. And a vmmap bug was reported.</p>\n<p>Most of my coworkers and our customers never noticed this problem. I only noticed it because:</p>\n<ul>\n<li>I had gmail’s offline mode enabled\n</li><li>I was running on an old version of Windows 10\n</li><li>Our IT department was running regular WMI scans of our computers\n</li><li>I was paying attention\n</li><li>I got lucky </li>\n</ul>\n<p>It seems highly improbably that, as one of the most qualified people to diagnose this bug, I was the first to notice it. If any of the factors above had not been true then I would not have experienced this hang and the associated memory waste might never have been found.</p>\n<p>By the way, the reason that the hangs kept happening at 10:30 am is just because that’s when our IT team ran their inventory scans. If you want to trigger a scan manually, you can go to Control Panel | Configuration Manager | Actions | Select &#8216;Hardware Inventory Cycle&#8217; and then Run Now.</p>\n<p><a href=\"http://randomascii.files.wordpress.com/2018/08/clip_image002.png\"><img title=\"clip_image002\" style=\"background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border-width:0;\" border=\"0\" alt=\"clip_image002\" src=\"https://randomascii.files.wordpress.com/2018/08/clip_image002_thumb.png?w=546&#038;h=331\" width=\"546\" height=\"331\"></a></p>\n<h2>Source code</h2>\n<p>If you want to play along at home you can grab the source-code to VAllocStress and VirtualScan from github, <a href=\"https://github.com/randomascii/blogstuff/tree/master/cfg\">here</a>.</p>\n<h2>Rabbit holes</h2>\n<p>This investigation included a <em>lot</em> of rabbit holes. Some were important (page tables), some were instructive (locks), and some were purely a waste of time (WMI details). I’ll talk more about these, and a vmmap bug, in a follow-up post. If you want more gory details – some of which ended up being wrong or irrelevant – you can follow the whole investigation at <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=870054\">crbug.com/870054</a>.</p>\n<p>Hacker news discussion is <a href=\"https://news.ycombinator.com/item?id=17780127\">here</a>.</p>\n<p>Reddit discussion is <a href=\"https://www.reddit.com/r/programming/comments/97zy08/24core_cpu_and_i_cant_type_an_email_part_one/\">here</a>.</p>\n<p>Russian translation is <a href=\"https://habr.com/post/420579/\">here</a>.</p>\n<p>Japanese translation is <a href=\"https://gigazine.net/news/20180825-google-engineer-fix-chrome-hang/\">here</a>.</p>\n</figure><p></p><figure class=\"kg-card kg-embed-card\"><p>Zombies probably won’t consume 32 GB of your memory like they did to me, but zombie processes do exist, and I can help you find them and make sure that developers fix them. Tool source link is at the bottom.</p>\n<p>Is it just me, or do Windows machines that have been up for a while seem to lose memory? After a few weeks of use (or a long weekend of building Chrome over 300 times) I kept noticing that Task Manager showed me running low on memory, but it didn’t show the memory being <em>used</em> by anything. In the example below task manager shows 49.8 GB of RAM in use, plus 4.4 GB of compressed memory, and yet only 5.8 GB of page/non-paged pool, few processes running, and no process using anywhere near enough to explain where the memory had gone:</p>\n<p><a href=\"http://randomascii.files.wordpress.com/2018/02/image3.png\"><img style=\"background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border-width:0;\" title=\"image\" src=\"https://randomascii.files.wordpress.com/2018/02/image_thumb3.png?w=649&#038;h=242\" alt=\"image\" width=\"649\" height=\"242\" border=\"0\"></a></p>\n<p>My machine has 96 GB of RAM – lucky me – and when I don’t have any programs running I think it’s reasonable to hope that I’d have at least half of it available.</p>\n<p><!--more--></p>\n<p>Sometimes I have dealt with this by rebooting but that should never be necessary. The Windows kernel is <a href=\"https://twitter.com/nasko/status/962573875010707457\">robust and well implemented</a> so this memory disappearing shouldn’t happen, and yet…</p>\n<p>The first clue came when I remembered that a <a href=\"https://twitter.com/tiraniddo\">coworker of mine</a> had complained of zombie processes being left behind – processes that had shut down but not been cleaned up by the kernel. He’d even written a tool that would dump a list of zombie processes – their names and counts. His original complaint was of hundreds of zombies. I ran his tool and it showed 506,000 zombie processes!</p>\n<p>It occurred to me that one cause of zombie processes could be one process failing to close the handles to other processes. And the great thing about having a huge number of zombies is that they are harder to hide. So, I went to Task Manager’s Details tab, added the Handles column, and sorted by it. Voila. I immediately saw that CcmExec.exe (part of Microsoft’s <a href=\"https://blogs.msdn.microsoft.com/jonathanh/2004/05/27/ccmexec-exe-and-inventory-exe-what-are-they-and-what-do-they-do/\">System Management Server</a>) had 508,000 handles open, which is both a <em>lot</em>  and also amazingly close to my zombie count.</p>\n<p><a href=\"http://randomascii.files.wordpress.com/2018/02/image4.png\"><img style=\"background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border-width:0;\" title=\"image\" src=\"https://randomascii.files.wordpress.com/2018/02/image_thumb4.png?w=568&#038;h=212\" alt=\"image\" width=\"568\" height=\"212\" border=\"0\"></a></p>\n<p>I held my breath and killed CcmExec.exe, unsure of what would happen:</p>\n<p><img data-attachment-id=\"2732\" data-permalink=\"https://randomascii.wordpress.com/2018/02/11/zombie-processes-are-eating-your-memory/performance-tab-after-cropped/\" data-orig-file=\"https://randomascii.files.wordpress.com/2018/02/performance-tab-after-cropped.png?w=402&#038;h=447\" data-orig-size=\"402,447\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"Performance Tab after cropped\" data-image-description=\"\" data-medium-file=\"https://randomascii.files.wordpress.com/2018/02/performance-tab-after-cropped.png?w=402&#038;h=447?w=270\" data-large-file=\"https://randomascii.files.wordpress.com/2018/02/performance-tab-after-cropped.png?w=402&#038;h=447?w=402\" class=\"alignnone size-full wp-image-2732\" src=\"https://randomascii.files.wordpress.com/2018/02/performance-tab-after-cropped.png?w=402&#038;h=447\" alt=\"Performance Tab after cropped\" width=\"402\" height=\"447\" srcset=\"https://randomascii.files.wordpress.com/2018/02/performance-tab-after-cropped.png 402w, https://randomascii.files.wordpress.com/2018/02/performance-tab-after-cropped.png?w=135&amp;h=150 135w, https://randomascii.files.wordpress.com/2018/02/performance-tab-after-cropped.png?w=270&amp;h=300 270w\" sizes=\"(max-width: 402px) 100vw, 402px\"></p>\n<p>The results were as dramatic as I could imagine. As I said earlier, the Windows kernel is well written and when a process is killed then all of its resources are freed. So, those 508,000 handles that were owned by CcmExec.exe were abruptly closed and my available memory went up by 32 GB! Mystery solved!</p>\n<h2>What <em>is</em> a zombie process?</h2>\n<p>Until this point we weren’t entirely sure what was causing these processes to hang around. In hindsight it’s obvious that these zombies were caused by a trivial user-space coding bug. The rule is that when you create a process you need to call <em>CloseHandle</em> on its process handle and its thread handle. If you don’t care about the process then you should close the handles immediately. If you do care – if you want to wait for the process to quit – <em>WaitForSingleObject(hProcess, INFINITE);</em> – or query its exit code – <em>GetExitCodeProcess(hProcess, &amp;exitCode);</em> – then you need to remember to close the handles after that. Similarly, if you open an existing process with <em>OpenProcess</em> you need to close that handle when you are done.</p>\n<p>If the process that holds on to the handles is a system process then it will even continue holding those handles after you log out and log back in – another source of confusion during our investigation last year.</p>\n<p>So, a zombie process is a process that has shut down but is kept around because some other still-running process holds a handle to it. It’s okay for a process to do this briefly, but it is bad form to leave a handle unclosed for long.</p>\n<h2>Where is that memory going?</h2>\n<p>Another thing I’d done during the investigation was to run <a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/rammap\">RamMap</a>. This tool attempts to account for every page of memory in use. Its Process Memory tab had shown hundreds of thousands of processes that were each using 32 KB of RAM and presumably those were the zombies. But ~500,000 times 32 KB only equals ~16 GB – where did the rest of the freed up memory come from? Comparing the before and after Use Counts pages in RamMap explained it:</p>\n<p><a href=\"http://randomascii.files.wordpress.com/2018/02/image5.png\"><img style=\"background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border-width:0;\" title=\"image\" src=\"https://randomascii.files.wordpress.com/2018/02/image_thumb5.png?w=716&#038;h=498\" alt=\"image\" width=\"716\" height=\"498\" border=\"0\"></a></p>\n<p>We can plainly see the ~16 GB drop in Process Private memory. We can also see a 16 GB drop in Page Table memory. Apparently a zombie process consumes ~32 KB of page tables, in addition to its ~32 KB of process private memory, for a total cost of ~64 KB. I don’t know why zombie processes consume that much RAM, but it’s probably because there should never be enough of them for that to matter.</p>\n<p>A few types of memory actually <em>increased</em> after killing CcmExec.exe, mostly Mapped File and Metafile. I don’t know what that means but my guess would be that that indicates more data being cached, which would be a good thing. I don’t necessarily want memory to be unused, but I do want it to be available.</p>\n<blockquote><p>Trivia: rammap opens all processes, including zombies, so it needs to be closed before zombies will go away</p></blockquote>\n<p>I tweeted about my discovery and the investigation was picked up by <a href=\"https://twitter.com/WithinRafael\">another software developer</a> and they reproed the bug using my <a href=\"https://github.com/randomascii/blogstuff/tree/master/ProcessCreateTests\">ProcessCreateTests</a> tool. They also passed the information to a developer at Microsoft who said it was a known issue that “<a href=\"https://twitter.com/djammmer/status/961727396423516160\">happens when many processes are opened and closed very quickly</a>”.</p>\n<p>Windows has a reputation for not handling process creation as well as Linux and this investigation, and <a href=\"https://randomascii.wordpress.com/2017/07/09/24-core-cpu-and-i-cant-move-my-mouse/\">one of my previous ones</a>, suggest that that reputation is well earned. I hope that Microsoft fixes this bug – it’s sloppy.</p>\n<h2>Why do I hit so many crazy problems?</h2>\n<p>I work on the Windows version of Chrome, and one of my tasks is optimizing its build system, which requires doing a lot of test builds. Building chrome involves creating between 28,000 and 37,000 processes, depending on build settings. When using our distributed build system (<a href=\"https://groups.google.com/a/chromium.org/forum/#!msg/chromium-dev/q7hSGr_JNzg/p44IkGhDDgAJ\">goma</a>) these processes are created and destroyed very quickly – my fastest full build ever took about 200 seconds. This aggressive process creation has revealed a number of interesting bugs, mostly in Windows or its components:</p>\n<ul>\n<li>Fast process destruction led to <a href=\"https://randomascii.wordpress.com/2017/07/09/24-core-cpu-and-i-cant-move-my-mouse/\">system input hangs</a></li>\n<li>Synaptics driver <a href=\"https://randomascii.wordpress.com/2017/09/05/hey-synaptics-can-you-please-stop-polling/\">leaked memory</a> whenever a process was created</li>\n<li><a href=\"https://twitter.com/BruceDawson0xB/status/962562314456072193\">O(n^2) log-file creation</a> in App Verifier – my next blog post?</li>\n<li>A <a href=\"https://twitter.com/BruceDawson0xB/status/958517353435680768\">Windows kernel file buffer bug</a> from Server 2008 R2 to Windows 10</li>\n<li>Windows Defender delaying each goma compiler launch by 250 ms</li>\n</ul>\n<h2>What now?</h2>\n<p>If you aren’t on a corporate managed machine then you probably don’t run CcmExec.exe and you will avoid this particular bug. And if you don’t build Chrome or something equivalent then you will probably avoid this bug. But!</p>\n<p>CcmExec is not the only program that leaks process handles. I have found many others leaking modest numbers of handles and there are certainly more.</p>\n<p>The bitter reality, as all experienced programmers know, is that <a href=\"https://twitter.com/BruceDawson0xB/status/962593405581762565\">any mistake that is not explicitly prevented will be made</a>. Simply writing “This handle must be closed” in the documentation is insufficient. So, here is my contribution towards making this something detectable, and therefore preventable. <a href=\"https://github.com/randomascii/blogstuff/tree/master/FindZombieHandles\">FindZombieHandles</a> is a tool, based on <a href=\"https://www.nuget.org/packages/NtApiDotNet/\">NtApiDotNet</a> and sample code from <a href=\"mailto:t@tiraniddo\">@tiraniddo</a>, that prints a list of zombies and who is keeping them alive. Here is sample output from my home laptop:</p>\n<blockquote><p><span style=\"font-family:'Courier New';\">274 total zombie processes.<br>\n249 zombies held by IntelCpHeciSvc.exe(9428)<br>\n249 zombies of Video.UI.exe<br>\n14 zombies held by RuntimeBroker.exe(10784)<br>\n11 zombies of MicrosoftEdgeCP.exe<br>\n3 zombies of MicrosoftEdge.exe<br>\n8 zombies held by svchost.exe(8012)<br>\n4 zombies of ServiceHub.IdentityHost.exe<br>\n2 zombies of cmd.exe<br>\n2 zombies of vs_installerservice.exe<br>\n3 zombies held by explorer.exe(7908)<br>\n3 zombies of MicrosoftEdge.exe<br>\n1 zombie held by devenv.exe(24284)<br>\n1 zombie of MSBuild.exe<br>\n1 zombie held by SynTPEnh.exe(10220)<br>\n1 zombie of SynTPEnh.exe<br>\n1 zombie held by tphkload.exe(5068)<br>\n1 zombie of tpnumlkd.exe<br>\n1 zombie held by svchost.exe(1872)<br>\n1 zombie of userinit.exe</span></p></blockquote>\n<p>274 zombies isn’t too bad, but it represents some bugs that should be fixed. The IntelCpHeciSvc.exe one is the worst, as it seems to leak a process handle every time I play a video from Windows Explorer.</p>\n<p>Visual Studio leaks handles to at least two processes and one of these is easy to reproduce. Just fire off a build and wait ~15 minutes for MSBuild.exe to go away. Or, if you “set MSBUILDDISABLENODEREUSE=1” then MSBuild.exe goes away immediately and every build leaks a process handle. Unfortunately some <em>jerk</em> at Microsoft <a href=\"https://twitter.com/Tashkant/status/961645045370818563\">fixed this bug</a> the moment I reported it, and the fix may ship in VS 15.6, so you’ll have to act quickly to see this (and no, I don’t really think he’s a jerk).</p>\n<p>You can also see leaked processes using <a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/process-explorer\">Process Explorer</a>, by configuring the lower pane to show handles, as shown here (note that both the process <em>and</em> thread handles are leaked in this case):</p>\n<p><a href=\"http://randomascii.files.wordpress.com/2018/02/image6.png\"><img style=\"background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border-width:0;\" title=\"image\" src=\"https://randomascii.files.wordpress.com/2018/02/image_thumb6.png?w=302&#038;h=289\" alt=\"image\" width=\"302\" height=\"289\" border=\"0\"></a></p>\n<h2>Just a few of the bugs found, not all reported</h2>\n<ul>\n<li><a href=\"https://twitter.com/djammmer/status/961727396423516160\">CcmExec.exe leak</a>, over 500,000 zombies leaked (<a href=\"https://twitter.com/djammmer/status/964031700845019137\">fixes in progress</a>)</li>\n<li>Program Compatibility Assistant Service <a href=\"https://twitter.com/BruceDawson0xB/status/963476981273604096\">leaks random processes</a> (<a href=\"https://twitter.com/appcompatguy/status/963837005795942401\">being investigated</a>)</li>\n<li><a href=\"https://twitter.com/Tashkant/status/961645045370818563\">devenv.exe leak</a> of MSBuild.exe (<a href=\"https://twitter.com/Tashkant/status/961645045370818563\">fixed</a>)</li>\n<li><a href=\"https://developercommunity.visualstudio.com/content/problem/197479/devenv-holds-handles-to-servicehubhostnodex86exe-z.html\">devenv.exe leak</a> of ServiceHub.Host.Node.x86.exe (<a href=\"https://developercommunity.visualstudio.com/content/problem/197479/devenv-holds-handles-to-servicehubhostnodex86exe-z.html\">bug filed</a>)</li>\n<li><a href=\"https://twitter.com/BruceDawson0xB/status/963118379371454464\">IntelCpHeciSvc.exe leaks</a> Video.UI.exe for each video played (<a href=\"https://twitter.com/BruceDawson0xB/status/963118379371454464\">Intel passes the buck to Lenovo</a>)</li>\n<li>RuntimeBroker.exe leak of MicrosoftEdge and Video.UI.exe (perhaps related to <a href=\"https://twitter.com/marypcbuk/status/964560351638548480\">other bugs in RuntimeBroker.exe</a>)</li>\n<li>AudioSrv service leak of Video.UI.exe</li>\n<li>Handle leak in Google internal tool due to old version of <a href=\"https://github.com/giampaolo/psutil/issues/870\">psutil</a></li>\n<li>Lenovo’s tphkload.exe leaks one handle, their SUService.exe leaks three handles</li>\n<li>Synaptic’s SynTPEnh.exe leaks one handle</li>\n<li>googledrivesync.exe leaks one handle (reported internally)</li>\n</ul>\n<p>Process handles aren’t the only kind that can be leaked. For instance, the “Intel(R) Online Connect Access service” (IntelTechnologyAccessService.exe) only uses 4 MB of RAM, but after 30 days of uptime had created 27,504 (!!!) handles. I diagnosed this leak using just Task Manager and <a href=\"https://twitter.com/BruceDawson0xB/status/965301833517289472\">reported it here</a>. I also used the awesome !htrace command in windbg to <a href=\"https://twitter.com/BruceDawson0xB/status/970896367475306497\">get stacks for the CreateEventW calls from Intel&#8217;s code</a>. Think they&#8217;ll fix this?</p>\n<p><a href=\"http://randomascii.files.wordpress.com/2018/02/image7.png\"><img style=\"background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border-width:0;\" title=\"image\" src=\"https://randomascii.files.wordpress.com/2018/02/image_thumb7.png?w=782&#038;h=135\" alt=\"image\" width=\"782\" height=\"135\" border=\"0\"></a></p>\n<p>Using Processs Explorer I could see that NVDisplay.Container.exe from NVIDIA has <a href=\"https://twitter.com/BruceDawson0xB/status/962428705954910208\">~5,000 handles</a> to \\BaseNamedObjects\\NvXDSyncStop-61F8EBFF-D414-46A7-90AE-98DD58E4BC99 event, creating a new one about every two minutes? I guess they want to be <em>really</em> sure that they can stop NvXDSync? <a href=\"https://twitter.com/HairySphere/status/963113789867679744\">Reported</a>, and <a href=\"https://twitter.com/HairySphere/status/964553497671847936\">a fix has been checked in</a>.</p>\n<p><a href=\"http://randomascii.files.wordpress.com/2018/02/image8.png\"><img style=\"background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border:0;\" title=\"image\" src=\"https://randomascii.files.wordpress.com/2018/02/image_thumb8.png?w=503&#038;h=287\" alt=\"image\" width=\"503\" height=\"287\" border=\"0\"></a></p>\n<p>Apparently Corsair Link Service leaks <a href=\"https://twitter.com/kasper_93/status/963132642664296449\">~15 token handles per second</a>. Reported <a href=\"https://twitter.com/BruceDawson0xB/status/964562328388694016\">here</a>.</p>\n<p>Apparently Adobe&#8217;s Creative Cloud <a href=\"https://news.ycombinator.com/item?id=16359696\">leaks tens of thousands of handles</a> &#8211; ~6,500 a day? Reported <a href=\"https://twitter.com/BruceDawson0xB/status/964562328388694016\">here</a>.</p>\n<p>Apparently Razer Chroma SDK Service <a href=\"https://www.reddit.com/r/programming/comments/7x10z9/zombie_processes_are_eating_your_memory/du54yqa/\">leaks a lot of handles</a> &#8211; <a href=\"https://twitter.com/abyrd89/status/963149836609511424\">150,000 per hour</a>? Reported <a href=\"https://twitter.com/BruceDawson0xB/status/964563577368494080\">here</a>.</p>\n<p>Apparently ETDCtrl.exe (11.x), some app associated with ELANTech/Synaptics trackpads, leaks handles to shared memory. The process accumulated about 16,000 handles and when the process was killed about 3 GB of missing RAM was returned to the system &#8211; quite noticeable on an 8 GB laptop with no swap.</p>\n<p>Apparently nobody has been paying attention to this for a while – hey Microsoft, maybe start watching for handle leaks so that Windows runs better? And Intel and NVIDIA? Take a look at your code. I’ll be watching you.</p>\n<p>So, grab <a href=\"https://github.com/randomascii/blogstuff/tree/master/FindZombieHandles\">FindZombieHandles</a>, run it on your machine, and report or fix what you find, and use Task Manager and Process Explorer as well.</p>\n<p>Twitter announcement is <a href=\"https://twitter.com/BruceDawson0xB/status/962942762986303488\">here</a>, Hacker News discussion is <a href=\"https://news.ycombinator.com/item?id=16357018\">here</a>, reddit discussion is <a href=\"https://www.reddit.com/r/programming/comments/7x10z9/zombie_processes_are_eating_your_memory/\">here</a>.</p>\n<p>Updates: Microsoft <a href=\"https://twitter.com/djammmer/status/964032879561924608\">recommended disabling the feature that leaks handles</a> and doing so has resolved the issue for me (and they are fixing the leaks). It&#8217;s an expensive feature and it turns out we were ignoring the data anyway! Also, all Windows 10 PIDs are multiples of four which explains why ~500,000 zombies led to PIDs in the 2,000,000+ range.</p>\n</figure><p></p><p><a href=\"http://www.latimes.com/opinion/op-ed/la-oe-dubal-gig-companies-undercut-california-wage-law-20180814-story.html\">http://www.latimes.com/opinion/op-ed/la-oe-dubal-gig-companies-undercut-california-wage-law-20180814-story.html</a></p><p></p><p><a href=\"http://www.righto.com/2018/08/inside-die-of-intels-8087-coprocessor.html\">http://www.righto.com/2018/08/inside-die-of-intels-8087-coprocessor.html</a></p><p></p><figure class=\"kg-card kg-embed-card\"><blockquote class=\"wp-embedded-content\"><a href=\"https://engineering.taboola.com/recommender-systems-exploring-the-unknown-using-uncertainty/\">Recommender Systems: Exploring the Unknown Using Uncertainty</a></blockquote>\n<script type=\"text/javascript\">\n<!--//--><![CDATA[//><!--\n\t\t!function(a,b){\"use strict\";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf(\"MSIE 10\"),h=!!navigator.userAgent.match(/Trident.*rv:11\\./),i=b.querySelectorAll(\"iframe.wp-embedded-content\");for(c=0;c<i.length;c++){if(d=i[c],!d.getAttribute(\"data-secret\"))f=Math.random().toString(36).substr(2,10),d.src+=\"#?secret=\"+f,d.setAttribute(\"data-secret\",f);if(g||h)a=d.cloneNode(!0),a.removeAttribute(\"security\"),d.parentNode.replaceChild(a,d)}}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret=\"'+d.secret+'\"]'),k=b.querySelectorAll('blockquote[data-secret=\"'+d.secret+'\"]');for(e=0;e<k.length;e++)k[e].style.display=\"none\";for(e=0;e<j.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.removeAttribute(\"style\"),\"height\"===d.message){if(g=parseInt(d.value,10),g>1e3)g=1e3;else if(~~g<200)g=200;f.height=g}if(\"link\"===d.message)if(h=b.createElement(\"a\"),i=b.createElement(\"a\"),h.href=f.getAttribute(\"src\"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener(\"message\",a.wp.receiveEmbedMessage,!1),b.addEventListener(\"DOMContentLoaded\",c,!1),a.addEventListener(\"load\",c,!1)}(window,document);\n//--><!]]>\n</script><iframe sandbox=\"allow-scripts\" security=\"restricted\" src=\"https://engineering.taboola.com/recommender-systems-exploring-the-unknown-using-uncertainty/embed/\" width=\"600\" height=\"338\" title=\"&#8220;Recommender Systems: Exploring the Unknown Using Uncertainty&#8221; &#8212; Taboola Tech Blog\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" class=\"wp-embedded-content\"></iframe></figure><p></p><figure class=\"kg-card kg-embed-card\"><blockquote class=\"wp-embedded-content\"><a href=\"https://engineering.taboola.com/neural-networks-bayesian-perspective/\">Neural Networks from a Bayesian Perspective</a></blockquote>\n<script type=\"text/javascript\">\n<!--//--><![CDATA[//><!--\n\t\t!function(a,b){\"use strict\";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf(\"MSIE 10\"),h=!!navigator.userAgent.match(/Trident.*rv:11\\./),i=b.querySelectorAll(\"iframe.wp-embedded-content\");for(c=0;c<i.length;c++){if(d=i[c],!d.getAttribute(\"data-secret\"))f=Math.random().toString(36).substr(2,10),d.src+=\"#?secret=\"+f,d.setAttribute(\"data-secret\",f);if(g||h)a=d.cloneNode(!0),a.removeAttribute(\"security\"),d.parentNode.replaceChild(a,d)}}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret=\"'+d.secret+'\"]'),k=b.querySelectorAll('blockquote[data-secret=\"'+d.secret+'\"]');for(e=0;e<k.length;e++)k[e].style.display=\"none\";for(e=0;e<j.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.removeAttribute(\"style\"),\"height\"===d.message){if(g=parseInt(d.value,10),g>1e3)g=1e3;else if(~~g<200)g=200;f.height=g}if(\"link\"===d.message)if(h=b.createElement(\"a\"),i=b.createElement(\"a\"),h.href=f.getAttribute(\"src\"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener(\"message\",a.wp.receiveEmbedMessage,!1),b.addEventListener(\"DOMContentLoaded\",c,!1),a.addEventListener(\"load\",c,!1)}(window,document);\n//--><!]]>\n</script><iframe sandbox=\"allow-scripts\" security=\"restricted\" src=\"https://engineering.taboola.com/neural-networks-bayesian-perspective/embed/\" width=\"600\" height=\"338\" title=\"&#8220;Neural Networks from a Bayesian Perspective&#8221; &#8212; Taboola Tech Blog\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" class=\"wp-embedded-content\"></iframe></figure><p></p><figure class=\"kg-card kg-embed-card\"><iframe id=\"talk_frame_349129\" src=\"//speakerdeck.com/player/9e93f99e73cd4b0884ebbc4a4cdd789e\" width=\"710\" height=\"532\" style=\"border:0; padding:0; margin:0; background:transparent;\" frameborder=\"0\" allowtransparency=\"true\" allowfullscreen=\"allowfullscreen\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n</figure>","url":"https://hackersandslackers.com/lynx-roundup-september-10th/","uuid":"ac803aa5-39f6-44f0-b6f5-66e6d7907b93","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b9032611fc1fc7d92b5c4e9"}},"pageContext":{"slug":"lynx-roundup-september-10th"}}