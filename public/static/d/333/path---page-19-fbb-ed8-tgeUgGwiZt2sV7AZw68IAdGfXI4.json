{"data":{"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736e7","title":"Lynx Roundup, August 31st","slug":"lynx-roundup-august-31st","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/80@2x.jpg","excerpt":"Self-tuning database data structures!  Parallel Python!  Pandas internals!","custom_excerpt":"Self-tuning database data structures!  Parallel Python!  Pandas internals!","created_at_pretty":"18 August, 2018","published_at_pretty":"31 August, 2018","updated_at_pretty":"03 September, 2018","created_at":"2018-08-18T01:06:07.000-04:00","published_at":"2018-08-31T13:00:00.000-04:00","updated_at":"2018-09-03T09:04:15.000-04:00","meta_title":"Self-tuning database data structures!  Parallel Python!  Pandas internals! | Hackers And Slackers","meta_description":"Self-tuning database data structures!  Parallel Python!  Pandas internals!","og_description":"Self-tuning database data structures!  Parallel Python!  Pandas internals!","og_image":"https://hackersandslackers.com/content/images/lynx/80@2x.jpg","og_title":"Lynx Roundup, August 31st","twitter_description":"Self-tuning database data structures!  Parallel Python!  Pandas internals!","twitter_image":"https://hackersandslackers.com/content/images/lynx/80@2x.jpg","twitter_title":"Lynx Roundup, August 31st","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.zdnet.com/article/zen-and-the-art-of-data-structures-from-self-tuning-to-self-designing-data-systems/\n\n\n\nhttps://www.gamedev.net/articles/programming/artificial-intelligence/the-total-beginners-guide-to-game-ai-r4942\n\n\n\nhttps://github.com/UIUC-PPL/charmpy\n\n\n\nhttps://medium.com/@NetflixTechBlog/notebook-innovation-591ee3221233\n\n\n\nhttps://tomaugspurger.github.io/pandas-moral-philosophy.html\n\n\n\nhttps://www.quantamagazine.org/how-insulin-helped-create-ant-societies-20180814/\n\n\n\nhttp://datagenetics.com/blog/august12018/index.html","html":"<p></p><p><a href=\"https://www.zdnet.com/article/zen-and-the-art-of-data-structures-from-self-tuning-to-self-designing-data-systems/\">https://www.zdnet.com/article/zen-and-the-art-of-data-structures-from-self-tuning-to-self-designing-data-systems/</a></p><p></p><p><a href=\"https://www.gamedev.net/articles/programming/artificial-intelligence/the-total-beginners-guide-to-game-ai-r4942\">https://www.gamedev.net/articles/programming/artificial-intelligence/the-total-beginners-guide-to-game-ai-r4942</a></p><p></p><p><a href=\"https://github.com/UIUC-PPL/charmpy\">https://github.com/UIUC-PPL/charmpy</a></p><p></p><p><a href=\"https://medium.com/@NetflixTechBlog/notebook-innovation-591ee3221233\">https://medium.com/@NetflixTechBlog/notebook-innovation-591ee3221233</a></p><p></p><p><a href=\"https://tomaugspurger.github.io/pandas-moral-philosophy.html\">https://tomaugspurger.github.io/pandas-moral-philosophy.html</a></p><p></p><p><a href=\"https://www.quantamagazine.org/how-insulin-helped-create-ant-societies-20180814/\">https://www.quantamagazine.org/how-insulin-helped-create-ant-societies-20180814/</a></p><p></p><p><a href=\"http://datagenetics.com/blog/august12018/index.html\">http://datagenetics.com/blog/august12018/index.html</a></p>","url":"https://hackersandslackers.com/lynx-roundup-august-31st/","uuid":"9c78194a-ded0-4817-a0cb-e4da8ddb7048","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b77a93fec281f15796ad2ae"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736d2","title":"Recreate JIRA Service Desk in Python & Flask","slug":"building-a-better-jira","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/08/jsd@2x.jpg","excerpt":"When SaaS doesn't cut it, beat it down and take everything its got.","custom_excerpt":"When SaaS doesn't cut it, beat it down and take everything its got.","created_at_pretty":"11 August, 2018","published_at_pretty":"31 August, 2018","updated_at_pretty":"02 February, 2019","created_at":"2018-08-11T14:02:52.000-04:00","published_at":"2018-08-31T10:25:00.000-04:00","updated_at":"2019-02-02T05:11:05.000-05:00","meta_title":"When SaaS doesn't cut it, beat it down and take everything its got | Hackers And Slackers","meta_description":"Vanilla helpdesks tend to dehumanize customers. We all think we're special, but a cold support queue reminds us otherwise. We can build something  better.","og_description":"Vanilla helpdesks tend to dehumanize customers. We all think we're special, but a cold support queue reminds us otherwise. We can build something  better.","og_image":"https://hackersandslackers.com/content/images/2018/08/jsd@2x.jpg","og_title":"Recreate JIRA Service Desk in Python & Flask","twitter_description":"Vanilla helpdesks tend to dehumanize customers. We all think we're special, but a cold support queue reminds us otherwise. We can build something  better.","twitter_image":"https://hackersandslackers.com/content/images/2018/08/jsd@2x.jpg","twitter_title":"Recreate JIRA Service Desk in Python & Flask","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Atlassian","slug":"atlassian","description":"Beef up JIRA and Confluence by scripting and automating nearly anything. Empower teams with customized workflows and philosophies.","feature_image":null,"meta_description":"Beef up JIRA and Confluence by scripting and automating nearly anything. Empower teams with customized workflows and philosophies.","meta_title":"Atlassian Development for JIRA and Confluence. | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Atlassian","slug":"atlassian","description":"Beef up JIRA and Confluence by scripting and automating nearly anything. Empower teams with customized workflows and philosophies.","feature_image":null,"meta_description":"Beef up JIRA and Confluence by scripting and automating nearly anything. Empower teams with customized workflows and philosophies.","meta_title":"Atlassian Development for JIRA and Confluence. | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"},{"name":"REST APIs","slug":"restapis","description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","feature_image":null,"meta_description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","meta_title":"Consuming and Building REST APIs | Hackers and Slackers","visibility":"public"}],"plaintext":"When it comes to SaaS products in the realm of Service desks, JIRA Service Desk\nis at the very least, just as powerful as the next solution (Zendesk comes to\nmind). This naturally begs the question: Why is JIRA Service Desk's pricing\nmodel roughly 1/10th of that of it's competitor?\n\nThe answer lies within ease of use,  but more importantly, presentation. While\nAtlassian's cloud offering is slowly playing catchup, Atlassian as a company has\nnever quite seemed to nail down the importance of a friendly user interface, nor\nthe importance of this when it comes to worldwide adoption. To see what I mean,\nhere's an example that Atlassian themselves tout on their own documentation as a\n\"ready for production\" customer portal:\n\nI'm convinced this is purposefully hideous to force the purchase of plugins.To\nyour average software developer (Atlassian's core demographic for years), one\nmight see nothing wrong with this interface, but as somebody `who has rolled out\nover 30 of these desks for over 6 thousand people, layouts such as these commit\nnumerous UI atrocities which simply are not acceptable for top enterprise\nsoftware.\n\nWhat do we do about this? We build an alternative, of course.\n\nMethod to This Madness\nOur focus is not on JIRA as a product,  but rather an API. Instead of attempting\nto work within JIRA’s boundaries via customization or add-ons, we can take\nmatters into our own hands by owning the application that users use to interact\nwith a JIRA instance. By using the JIRA API, we can not only extend features but\nactually ‘rebuild’ the application to gain full control over the UI or\nadditional logic. JIRA is a hideous yet entirely necessary Java application,\nwhich makes it a perfect candidate for recreation.\n\nWe're going to use Flask for this. Shocking, I know. Here's the obligatory file\nstructure of our project:\n\nmyproject\n├─ app.py\n├─ jira.py\n├─ /static\n│  └─ js\n│  └─ less\n│  └─ img\n└─ /templates\n   └─ layout.html\n   └─ index.html\n\n\nThis tutorial will be working against the JIRA Server  API for Service Desk -\nthat said, Cloud users should still find this applicable.\n\nPulling Your Service Desk Form\nBefore we get nuts building our application, we’ll need to be sure that a\nService Desk already exists in JIRA with our expected intake form. Remember: our\nend goal is to simply consume JIRA as an API, but that entails interacting with\nsomething that exists in the first place.\n\nWith your Service Desk created, there’s one annoyance we need to resolve before\ngetting into code: determining your Service Desk’s ID number. Like most things\nin JIRA, Service Desks are identified by an ID which is simply an arbitrary\ngrouping of integers in some way. What is the official way to find this ID, you\nmight ask? Why, by extracting it from the portal’s URL or by inspecting your XHR\nrequests, of course! Remember: JIRA hates you, that’s why we’re doing this in\nthe first place.\n\nWith your Service Desk ID handy, we can finally break into retrieving our desk\nvia the Service Desk API:\n\nimport requests\nfrom jira_config import jira_username, jira_password\n\nrequest_types_endpoint = \"https://yourjirainstance.com/rest/servicedeskapi/servicedesk/[SERVICEDESKID]/requesttype/\"\n\nheaders = {'Content-Type': 'application/json'}\n\ndef fieldsPerRequest(id):\n    \"\"\"Get form fields per request type.\"\"\"\n    r = requests.get(request_types_endpoint + id + '/field', auth=(jira_username, jira_password), headers=headers)\n    form = r.json()\n    return form\n\n\ndef serviceDeskRequestTypes():\n    \"\"\"Get request types.\"\"\"\n    request_array = []\n    r = requests.get(request_types_endpoint, auth=(jira_username, jira_password), headers=headers)\n    for requesttype in r.json()['values']:\n        id = requesttype['id']\n        request_dict = {\n            'name': requesttype['name'],\n            'description': requesttype['description'],\n            'icon': requesttype['icon']['_links']['iconUrls']['32x32'],\n            'fields': fieldsPerRequest(id)\n        }\n        request_array.append(request_dict)\n    return request_array\n\n\nserviceDeskRequestTypes()\nBy using the request_types_endpoint  URL, our function serviceDeskRequestTypes() \n returns the request types  of a given JIRA service desk; or in other words, the\n types of requests users can submit.  This alone only gives us high-level\ninformation about the types of requests we allow but doesn't go into further\ndetail such as the actual resulting form. That's where our next function comes\nin.\n\nfieldsPerRequest()\nThis function gets passed the ID of each request type. With that, we extend our\nendpoint to look like \n'https://yourjirainstance.com/rest/servicedeskapi/servicedesk/[SERVICEDESKID]/requesttype/[REQUESTID]/field'\n. Looping through each request type gives up exactly what we need: every request\ntype and every form field per request type.\n\nuserSession()\nThere's another thing left to consider: what if the user isn't currently logged\nin to JIRA? At the very least, we need to check to see if a JIRA session is\nactive:\n\nuser_session_endpoint = 'https://jira.we.co/rest/auth/1/session'\n\ndef getUserSession():\n    \"\"\"Get logged-in user.\"\"\"\n    r = requests.get(user_session_endpoint, headers=headers)\n    if r.status_code == 200:\n        return r.json()\n    else:\n        return False\n\n\nIf the user is logged in to JIRA, we'll receive a 200 code letting us know\neverything is alright. The body of the response will also contain the name of\nthe user plus some extra metadata. What if the user isn't  logged in? Let's get\nto that in a bit.\n\nEasy Routing\nOur view will be nice and simple:\n\nfrom jira import request_forms, user_details\n\n@app.route('/', methods=['GET', 'POST', 'OPTIONS'])\ndef home():\n    \"\"\"Landing page.\"\"\"\n    if user_details == False:\n        return redirect('https://example.com')\n    else:\n        return render_template('/index.html', requests=request_forms)\n\n\nNotice that all we're doing is making sure the user is signed in to JIRA. But\nwhat's with the example.com, you ask? Well, because I'm leaving this part up to\nyou, dear friend. There's really a number of things we can do, but it depends\nentirely on your situation. For instance:\n\n * You can handle basic auth on your own\n * Register an OAuth application to handle sign-ins (perhaps the most robust\n   solution)\n * If your JIRA instance is behind SSO, you may want to send users to your\n   company's  SAML partner\n * Simply throw an error message\n\nWhatever you decide to do, it's not really my problem. Obligatory smiley face\nemoji :).\n\nThe Template\nRemember: the main reason most of you are probably doing this is to control the\npresentation layer as you see fit. That said, here comes a call of presentation\nlayer text, in the form of a Jinja template:\n\n{% block form %}\n  <div>\n    <h3 class=\"subtitle\">Submit new requests here</h3>\n    <ul class=\"collapsible\">\n      {% for request in requests %}\n      <li class=\"{{request.name}}\">\n        <div class=\"collapsible-header\">\n          <img src=\"{{request.icon}}\">\n          <div class=\"info\">\n            <h5>{{request.name}}</h5>\n            <p>{{request.description}}</p>\n          </div>\n        </div>\n        <div class=\"collapsible-body\">\n          <div class=\"row\">\n            <form method=\"post\">\n              <div>\n                {% for field in request.fields.requestTypeFields %}\n                  {% if field.name in ('Category', 'Product') %}\n                    <div class=\"input-field\">\n                      <select id=\"{{request.name}} {{field.name}}\">\n                        <option value=\"Choose your option\" disabled selected>Choose your option</option>\n                        {% for option in field.validValues %}\n                          <option value=\"{{option.label}}\">{{option.label}}</option>\n                        {% endfor %}\n                      </select>\n                      <label>{{field.name}}</label>\n                    </div>\n                  {% elif field.name == 'Description' %}\n                    <div class=\"input-field\">\n                      <textarea id=\"{{field.name}}\" class=\"materialize-textarea\" placeholder=\"{{field.description}}\"></textarea>\n                      <label for=\"{{request.name}} {{field.name}}\">{{field.name}}</label>\n                    </div>\n                  {% else %}\n                    <div class=\"input-field\">\n                      <input placeholder=\"{{field.description}}\" id=\"{{request.name}} {{field.name}}\" type=\"text\" class=\"validate\">\n                      <label for=\"{{request.name}} {{field.name}}\">{{field.name}}</label>\n                    </div>\n                  {% endif %}\n                {% endfor %}\n                <input type=\"button\" value=\"Submit\" class=\"btn cyan lighten-3 formsubmit\">\n              </div>\n            </form>\n          </div>\n        </div>\n      </li>\n      {% endfor %}\n    </ul>\n  </div>\n{% endblock %}\n\n\nBecause we passed the Service Desk JSON we extracted from the JIRA API to our\nform, we can go crazy setting our labels, placeholder text, or whatever,\nanywhere we please. In my example, I utilize Material Design\n[https://materializecss.com/]'s pretty package of pre-made frontend elements,\nbecause God knows nobody wants to deal with designing that shit. Sorry, I was\njust having a brief flashback to Frontend dev.\n\nThe code above explicitly looks for fields we know are dropdowns, so that we may\nfill the select options accordingly. Same goes for textarea fields. That said,\nthe way I've handled this above is, well, stupid. Instead of hardcoding if\nstatements to look for certain fields, leverage our JSON to determine the type\nof each field as you iterate over them. Do as I say, not as I do.\n\nGoing Further\nThere's so much more we can add here. Take a list of the user's opened tickets,\nfor instance. The great thing about controlling your own portal UI is that you\ncan now control the narrative of your own workload: perhaps the person in\nmarketing who started 2 weeks ago could benefit from seeing the 200 tickets\nbeing addressed before her, thus second-guessing the urge to type URGENT across\na subject line only to be violently shoved down your throat.\n\nIn all seriousness, nobody likes the experience of a vanilla helpdesk because it\ndehumanizes the customer. While our personal beliefs reassure us that we are\nspecial, entering a cold support queue is a stark suggestion that we may not be\nso special after all, which isn't exactly a fact Millennials or Executives like\nto ponder on. If nothing else, take this as a chance to build software friendly\ntowards humans with full transparency, and both parties will surely benefit.\nRemember: happy humans bides times for the inevitable robot revolution on the\nhorizon destined to eradicate mankind. Do your part!","html":"<p>When it comes to SaaS products in the realm of Service desks, JIRA Service Desk is at the very <em>least</em>, just as powerful as the next solution (Zendesk comes to mind). This naturally begs the question: Why is JIRA Service Desk's pricing model roughly 1/10th of that of it's competitor?</p><p>The answer lies within <em>ease of use,</em> but more importantly, <em>presentation</em>. While Atlassian's cloud offering is slowly playing catchup, Atlassian as a company has never quite seemed to nail down the importance of a friendly user interface, nor the importance of this when it comes to worldwide adoption. To see what I mean, here's an example that Atlassian themselves tout on their own documentation as a \"ready for production\" customer portal:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/customer-portal.png\" class=\"kg-image\"><figcaption>I'm convinced this is purposefully hideous to force the purchase of plugins.</figcaption></figure><p>To your average software developer (Atlassian's core demographic for years), one might see nothing wrong with this interface, but as somebody `who has rolled out over 30 of these desks for over 6 thousand people, layouts such as these commit numerous UI atrocities which simply are not acceptable for top enterprise software.</p><p>What do we do about this? We build an alternative, of course.</p><h2 id=\"method-to-this-madness\">Method to This Madness</h2><p>Our focus is not on JIRA as a <em>product,</em> but rather an <em>API. </em>Instead of attempting to work within JIRA’s boundaries via customization or add-ons, we can take matters into our own hands by owning the application that users use to interact with a JIRA instance. By using the JIRA API, we can not only extend features but actually ‘rebuild’ the application to gain full control over the UI or additional logic. JIRA is a hideous yet entirely necessary Java application, which makes it a perfect candidate for recreation.</p><p>We're going to use Flask for this. Shocking, I know. Here's the obligatory file structure of our project:</p><pre><code class=\"language-bash\">myproject\n├─ app.py\n├─ jira.py\n├─ /static\n│  └─ js\n│  └─ less\n│  └─ img\n└─ /templates\n   └─ layout.html\n   └─ index.html\n</code></pre>\n<p>This tutorial will be working against the JIRA <em>Server</em> API for Service Desk - that said, Cloud users should still find this applicable.</p><h2 id=\"pulling-your-service-desk-form\">Pulling Your Service Desk Form</h2><p>Before we get nuts building our application, we’ll need to be sure that a Service Desk already exists in JIRA with our expected intake form. Remember: our end goal is to simply consume JIRA as an API, but that entails interacting with something that exists in the first place.</p><p>With your Service Desk created, there’s one annoyance we need to resolve before getting into code: determining your Service Desk’s ID number. Like most things in JIRA, Service Desks are identified by an ID which is simply an arbitrary grouping of integers in some way. What is the official way to find this ID, you might ask? Why, by extracting it from the portal’s URL or by inspecting your XHR requests, of course! Remember: JIRA hates you, that’s why we’re doing this in the first place.</p><p>With your Service Desk ID handy, we can finally break into retrieving our desk via the Service Desk API:</p><pre><code class=\"language-python\">import requests\nfrom jira_config import jira_username, jira_password\n\nrequest_types_endpoint = &quot;https://yourjirainstance.com/rest/servicedeskapi/servicedesk/[SERVICEDESKID]/requesttype/&quot;\n\nheaders = {'Content-Type': 'application/json'}\n\ndef fieldsPerRequest(id):\n    &quot;&quot;&quot;Get form fields per request type.&quot;&quot;&quot;\n    r = requests.get(request_types_endpoint + id + '/field', auth=(jira_username, jira_password), headers=headers)\n    form = r.json()\n    return form\n\n\ndef serviceDeskRequestTypes():\n    &quot;&quot;&quot;Get request types.&quot;&quot;&quot;\n    request_array = []\n    r = requests.get(request_types_endpoint, auth=(jira_username, jira_password), headers=headers)\n    for requesttype in r.json()['values']:\n        id = requesttype['id']\n        request_dict = {\n            'name': requesttype['name'],\n            'description': requesttype['description'],\n            'icon': requesttype['icon']['_links']['iconUrls']['32x32'],\n            'fields': fieldsPerRequest(id)\n        }\n        request_array.append(request_dict)\n    return request_array\n</code></pre>\n<h3 id=\"servicedeskrequesttypes-\">serviceDeskRequestTypes()</h3><p>By using the <em>request_types_endpoint</em> URL, our function <code>serviceDeskRequestTypes()</code> returns the <strong>request types</strong> of a given JIRA service desk; or in other words, the <em>types of requests users can submit.</em> This alone only gives us high-level information about the types of requests we allow but doesn't go into further detail such as the actual resulting form. That's where our next function comes in.</p><h3 id=\"fieldsperrequest-\">fieldsPerRequest()</h3><p>This function gets passed the ID of each request type. With that, we extend our endpoint to look like <code>'https://yourjirainstance.com/rest/servicedeskapi/servicedesk/[SERVICEDESKID]/requesttype/[REQUESTID]/field'</code>. Looping through each request type gives up exactly what we need: every request type and every form field per request type.</p><h3 id=\"usersession-\">userSession()</h3><p>There's another thing left to consider: what if the user isn't currently logged in to JIRA? At the very least, we need to check to see if a JIRA session is active:</p><pre><code class=\"language-python\">user_session_endpoint = 'https://jira.we.co/rest/auth/1/session'\n\ndef getUserSession():\n    &quot;&quot;&quot;Get logged-in user.&quot;&quot;&quot;\n    r = requests.get(user_session_endpoint, headers=headers)\n    if r.status_code == 200:\n        return r.json()\n    else:\n        return False\n</code></pre>\n<p>If the user is logged in to JIRA, we'll receive a 200 code letting us know everything is alright. The body of the response will also contain the name of the user plus some extra metadata. What if the user <em>isn't</em> logged in? Let's get to that in a bit.</p><h2 id=\"easy-routing\">Easy Routing</h2><p>Our view will be nice and simple:</p><pre><code class=\"language-python\">from jira import request_forms, user_details\n\n@app.route('/', methods=['GET', 'POST', 'OPTIONS'])\ndef home():\n    &quot;&quot;&quot;Landing page.&quot;&quot;&quot;\n    if user_details == False:\n        return redirect('https://example.com')\n    else:\n        return render_template('/index.html', requests=request_forms)\n</code></pre>\n<p>Notice that all we're doing is making sure the user is signed in to JIRA. But what's with the <em>example.com</em>, you ask? Well, because I'm leaving this part up to you, dear friend. There's really a number of things we can do, but it depends entirely on your situation. For instance:</p><ul><li>You can handle basic auth on your own</li><li>Register an OAuth application to handle sign-ins (perhaps the most robust solution)</li><li>If your JIRA instance is behind SSO, you may want to send users to your company's  SAML partner</li><li>Simply throw an error message</li></ul><p>Whatever you decide to do, it's not really my problem. Obligatory smiley face emoji :).</p><h2 id=\"the-template\">The Template</h2><p>Remember: the main reason most of you are probably doing this is to control the presentation layer as you see fit. That said, here comes a call of presentation layer text, in the form of a Jinja template:</p><pre><code class=\"language-jinja\">{% block form %}\n  &lt;div&gt;\n    &lt;h3 class=&quot;subtitle&quot;&gt;Submit new requests here&lt;/h3&gt;\n    &lt;ul class=&quot;collapsible&quot;&gt;\n      {% for request in requests %}\n      &lt;li class=&quot;{{request.name}}&quot;&gt;\n        &lt;div class=&quot;collapsible-header&quot;&gt;\n          &lt;img src=&quot;{{request.icon}}&quot;&gt;\n          &lt;div class=&quot;info&quot;&gt;\n            &lt;h5&gt;{{request.name}}&lt;/h5&gt;\n            &lt;p&gt;{{request.description}}&lt;/p&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;collapsible-body&quot;&gt;\n          &lt;div class=&quot;row&quot;&gt;\n            &lt;form method=&quot;post&quot;&gt;\n              &lt;div&gt;\n                {% for field in request.fields.requestTypeFields %}\n                  {% if field.name in ('Category', 'Product') %}\n                    &lt;div class=&quot;input-field&quot;&gt;\n                      &lt;select id=&quot;{{request.name}} {{field.name}}&quot;&gt;\n                        &lt;option value=&quot;Choose your option&quot; disabled selected&gt;Choose your option&lt;/option&gt;\n                        {% for option in field.validValues %}\n                          &lt;option value=&quot;{{option.label}}&quot;&gt;{{option.label}}&lt;/option&gt;\n                        {% endfor %}\n                      &lt;/select&gt;\n                      &lt;label&gt;{{field.name}}&lt;/label&gt;\n                    &lt;/div&gt;\n                  {% elif field.name == 'Description' %}\n                    &lt;div class=&quot;input-field&quot;&gt;\n                      &lt;textarea id=&quot;{{field.name}}&quot; class=&quot;materialize-textarea&quot; placeholder=&quot;{{field.description}}&quot;&gt;&lt;/textarea&gt;\n                      &lt;label for=&quot;{{request.name}} {{field.name}}&quot;&gt;{{field.name}}&lt;/label&gt;\n                    &lt;/div&gt;\n                  {% else %}\n                    &lt;div class=&quot;input-field&quot;&gt;\n                      &lt;input placeholder=&quot;{{field.description}}&quot; id=&quot;{{request.name}} {{field.name}}&quot; type=&quot;text&quot; class=&quot;validate&quot;&gt;\n                      &lt;label for=&quot;{{request.name}} {{field.name}}&quot;&gt;{{field.name}}&lt;/label&gt;\n                    &lt;/div&gt;\n                  {% endif %}\n                {% endfor %}\n                &lt;input type=&quot;button&quot; value=&quot;Submit&quot; class=&quot;btn cyan lighten-3 formsubmit&quot;&gt;\n              &lt;/div&gt;\n            &lt;/form&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/li&gt;\n      {% endfor %}\n    &lt;/ul&gt;\n  &lt;/div&gt;\n{% endblock %}\n</code></pre>\n<p>Because we passed the Service Desk JSON we extracted from the JIRA API to our form, we can go crazy setting our labels, placeholder text, or whatever, anywhere we please. In my example, I utilize <a href=\"https://materializecss.com/\">Material Design</a>'s pretty package of pre-made frontend elements, because God knows nobody wants to deal with designing that shit. Sorry, I was just having a brief flashback to Frontend dev.</p><p>The code above explicitly looks for fields we know are dropdowns, so that we may fill the select options accordingly. Same goes for textarea fields. That said, the way I've handled this above is, well, stupid. Instead of hardcoding if statements to look for certain fields, leverage our JSON to determine the type of each field as you iterate over them. Do as I say, not as I do.</p><h2 id=\"going-further\">Going Further</h2><p>There's so much more we can add here. Take a list of the user's opened tickets, for instance. The great thing about controlling your own portal UI is that you can now control the narrative of your own workload: perhaps the person in marketing who started 2 weeks ago could benefit from seeing the 200 tickets being addressed before her, thus second-guessing the urge to type <strong>URGENT </strong>across a subject line only to be violently shoved down your throat.</p><p>In all seriousness, nobody likes the experience of a vanilla helpdesk because it dehumanizes the customer. While our personal beliefs reassure us that we are special, entering a cold support queue is a stark suggestion that we may not be so special after all, which isn't exactly a fact Millennials or Executives like to ponder on. If nothing else, take this as a chance to build software friendly towards humans with full transparency, and both parties will surely benefit. Remember: happy humans bides times for the inevitable robot revolution on the horizon destined to eradicate mankind. Do your part!</p>","url":"https://hackersandslackers.com/building-a-better-jira/","uuid":"789d1406-0dbf-432e-aaa0-32d10f7d6337","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b6f24cc0cd9b8583e46ab5b"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736eb","title":"Pipenv: Better Environment Management for Python","slug":"pipenv-python-environment-management","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/04/pipenv.jpg","excerpt":"Effortlessly manage your Python environment and dependencies.","custom_excerpt":"Effortlessly manage your Python environment and dependencies.","created_at_pretty":"27 August, 2018","published_at_pretty":"30 August, 2018","updated_at_pretty":"10 April, 2019","created_at":"2018-08-27T19:40:53.000-04:00","published_at":"2018-08-30T07:36:00.000-04:00","updated_at":"2019-04-10T09:09:36.000-04:00","meta_title":"Effortlessly manage your Python environment | Hackers And Slackers","meta_description":"Pipenv serves as both an environment management tool as well as a sort of 'package.json' for your Python app.","og_description":"Pipenv serves as both an environment management tool as well as a sort of 'package.json' for your Python app.","og_image":"https://hackersandslackers.com/content/images/2019/04/pipenv-2.jpg","og_title":"Pipenv: Better Environment Management for Python","twitter_description":"Pipenv serves as both an environment management tool as well as a sort of 'package.json' for your Python app.","twitter_image":"https://hackersandslackers.com/content/images/2019/04/pipenv-1.jpg","twitter_title":"Pipenv: Better Environment Management for Python","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"}],"plaintext":"As a shoutout to my fellow Data Engineers, I'm going to take a step back from\ntypical data science workflows. When we build standalone applications, we\nprobably don't want to be tossing around Miniconda's 720 software packages in\nproduction, nor would we ever want to commit the source of any dependencies to\nGithub. This is where Pipenv comes in handy: it serves as both an environment\nmanagement tool, as well as a sort of package.json  for your Python app.\n\nThe combination of virtualenv  and virtualenvwrapper  have reigned supreme for\nsome time. While this combination is a totally fine solution, I've noticed even\nsenior developers gloss over the existence of a better alternative, pipenv,\nwhich makes package management way, way easier. This is especially important in\ncases such as building apps for Heroku, where we're pushing to an otherwise\nagnostic environment which must explicitly be kept in sync with our local setup\nto ensure anything works.\n\nApologies in advance for what might seem a bit like Python 101, but I've been\nfinding that the following information might be more relevant to some than we\nmight presume.\n\nWhy Pipenv?\nPipenv's shell interface is entirely user-friendly. Rarely will developers find\nthemselves needing to type more than two words, perhaps a single argument, to\nachieve a series of tasks which were previously less trivial. Pipenv also does\nan excellent job of documenting all dependencies in the resulting Pipfile  and \nPipfile.lock, which are easily generated and capture our project's dependencies\nto be handed off to the next poor bloke. Finally, Pipenv does us the luxury of\nkeeping installed dependencies out of our project folder and instead creates\nvirtual environments in parallel with our Python Path. This keeps folders\npotentially holding hundreds of dependencies out of our project folders,\n mitigates any risk of us committing these packages to any git repos (if you're\na nodejs person, you know what I mean with npm  and node_modules).\n\nCreating Environments\nUnsurprisingly, we get started with pip3 install pipenv. This may as well be the\nfirst and last package you install on your python path.\n\nWhile in your project folder, give ‘pipenv shell’ a go. If an environment has\nnot been created in this folder previously, this will create a new environment\nfor this directory. If an environment does exist, this same command will be used\nto activate the environment. Compare this to the syntax of virtualenv:\n\n$ virtualenv myenv\n$ source myenv/bin/activate\n\n\nWhen creating environments, ‘pipenv shell’ can also take additional arguments\nsuch as —python, which allows you to specify which installed version of python\nto use for this environment:\n\n$ pipenv shell —python 3.7\n\n\nWhile in the shell, we can install packages using pip as expected.\n\nManaging packages\nThe point of environments is not only to isolate dependencies, but also to track\nthem so that our environment is both transferable and easily reproducible.\nChances are you’re familiar with the typical output of pip freeze:\n\naadict==0.2.3\nasset==0.6.12\nbeautifulsoup4==4.6.1\ncertifi==2018.4.16\nchardet==3.0.4\nclick==6.7\ndecorator==4.3.0\ndnspython==1.15.0\nFlask==1.0.2\nFlask-Assets==0.12\nFlask-Login==0.4.1\nFlask-Static-Compress==1.0.2\nglobre==0.1.5\ngunicorn==19.9.0\nidna==2.7\ninfinity==1.4\nintervals==0.8.1\nitsdangerous==0.24\njac==0.17.1\nJinja2==2.10\nlessc==0.1.2\nlesscpy==0.13.0\nMarkupSafe==1.0\nordereddict==1.1\nply==3.11\npymongo==3.7.1\nrequests==2.19.1\nrjsmin==1.0.12\nsix==1.11.0\nSQLAlchemy==1.2.10\nSQLAlchemy-Utils==0.33.3\nurllib3==1.23\nvalidators==0.12.2\nwebassets==0.12.1\nWerkzeug==0.14.1\nWTForms==2.2.1\nWTForms-Alchemy==0.16.7\nWTForms-Components==0.10.3\n\npip freeze  is a great human-friendly way to see what you have installed in your\nenvironment; but what about robots? This wouldn't be Hackers And Slackers if we\ndidn't have a robot-friendly solution, now would it? Check out the output of \npipenv lock, which writes to a file called Pipfile.lock  in your local\nenvironment:\n\n{\n    \"_meta\": {\n        \"hash\": {\n            \"sha256\": \"668ab7d6f7db268048ca01a717c1cf77b8b4f373ed8074e48a9f22517975a306\"\n        },\n        \"pipfile-spec\": 6,\n        \"requires\": {\n            \"python_version\": \"3.7\"\n        },\n        \"sources\": [\n            {\n                \"name\": \"pypi\",\n                \"url\": \"https://pypi.org/simple\",\n                \"verify_ssl\": true\n            }\n        ]\n    },\n    \"default\": {\n        \"asn1crypto\": {\n            \"hashes\": [\n                \"sha256:2f1adbb7546ed199e3c90ef23ec95c5cf3585bac7d11fb7eb562a3fe89c64e87\",\n                \"sha256:9d5c20441baf0cb60a4ac34cc447c6c189024b6b4c6cd7877034f4965c464e49\"\n            ],\n            \"version\": \"==0.24.0\"\n        },\n        \"certifi\": {\n            \"hashes\": [\n                \"sha256:13e698f54293db9f89122b0581843a782ad0934a4fe0172d2a980ba77fc61bb7\",\n                \"sha256:9fa520c1bacfb634fa7af20a76bcbd3d5fb390481724c597da32c719a7dca4b0\"\n            ],\n            \"version\": \"==2018.4.16\"\n        },\n        \"cffi\": {\n            \"hashes\": [\n                \"sha256:151b7eefd035c56b2b2e1eb9963c90c6302dc15fbd8c1c0a83a163ff2c7d7743\",\n                \"sha256:1553d1e99f035ace1c0544050622b7bc963374a00c467edafac50ad7bd276aef\",\n                \"sha256:1b0493c091a1898f1136e3f4f991a784437fac3673780ff9de3bcf46c80b6b50\",\n                \"sha256:2ba8a45822b7aee805ab49abfe7eec16b90587f7f26df20c71dd89e45a97076f\",\n                \"sha256:3bb6bd7266598f318063e584378b8e27c67de998a43362e8fce664c54ee52d30\",\n                \"sha256:3c85641778460581c42924384f5e68076d724ceac0f267d66c757f7535069c93\",\n                \"sha256:3eb6434197633b7748cea30bf0ba9f66727cdce45117a712b29a443943733257\",\n                \"sha256:495c5c2d43bf6cebe0178eb3e88f9c4aa48d8934aa6e3cddb865c058da76756b\",\n                \"sha256:4c91af6e967c2015729d3e69c2e51d92f9898c330d6a851bf8f121236f3defd3\",\n                \"sha256:57b2533356cb2d8fac1555815929f7f5f14d68ac77b085d2326b571310f34f6e\",\n                \"sha256:770f3782b31f50b68627e22f91cb182c48c47c02eb405fd689472aa7b7aa16dc\",\n                \"sha256:79f9b6f7c46ae1f8ded75f68cf8ad50e5729ed4d590c74840471fc2823457d04\",\n                \"sha256:7a33145e04d44ce95bcd71e522b478d282ad0eafaf34fe1ec5bbd73e662f22b6\",\n                \"sha256:857959354ae3a6fa3da6651b966d13b0a8bed6bbc87a0de7b38a549db1d2a359\",\n                \"sha256:87f37fe5130574ff76c17cab61e7d2538a16f843bb7bca8ebbc4b12de3078596\",\n                \"sha256:95d5251e4b5ca00061f9d9f3d6fe537247e145a8524ae9fd30a2f8fbce993b5b\",\n                \"sha256:9d1d3e63a4afdc29bd76ce6aa9d58c771cd1599fbba8cf5057e7860b203710dd\",\n                \"sha256:a36c5c154f9d42ec176e6e620cb0dd275744aa1d804786a71ac37dc3661a5e95\",\n                \"sha256:a6a5cb8809091ec9ac03edde9304b3ad82ad4466333432b16d78ef40e0cce0d5\",\n                \"sha256:ae5e35a2c189d397b91034642cb0eab0e346f776ec2eb44a49a459e6615d6e2e\",\n                \"sha256:b0f7d4a3df8f06cf49f9f121bead236e328074de6449866515cea4907bbc63d6\",\n                \"sha256:b75110fb114fa366b29a027d0c9be3709579602ae111ff61674d28c93606acca\",\n                \"sha256:ba5e697569f84b13640c9e193170e89c13c6244c24400fc57e88724ef610cd31\",\n                \"sha256:be2a9b390f77fd7676d80bc3cdc4f8edb940d8c198ed2d8c0be1319018c778e1\",\n                \"sha256:ca1bd81f40adc59011f58159e4aa6445fc585a32bb8ac9badf7a2c1aa23822f2\",\n                \"sha256:d5d8555d9bfc3f02385c1c37e9f998e2011f0db4f90e250e5bc0c0a85a813085\",\n                \"sha256:e55e22ac0a30023426564b1059b035973ec82186ddddbac867078435801c7801\",\n                \"sha256:e90f17980e6ab0f3c2f3730e56d1fe9bcba1891eeea58966e89d352492cc74f4\",\n                \"sha256:ecbb7b01409e9b782df5ded849c178a0aa7c906cf8c5a67368047daab282b184\",\n                \"sha256:ed01918d545a38998bfa5902c7c00e0fee90e957ce036a4000a88e3fe2264917\",\n                \"sha256:edabd457cd23a02965166026fd9bfd196f4324fe6032e866d0f3bd0301cd486f\",\n                \"sha256:fdf1c1dc5bafc32bc5d08b054f94d659422b05aba244d6be4ddc1c72d9aa70fb\"\n            ],\n            \"version\": \"==1.11.5\"\n        },\n        \"chardet\": {\n            \"hashes\": [\n                \"sha256:84ab92ed1c4d4f16916e05906b6b75a6c0fb5db821cc65e70cbd64a3e2a5eaae\",\n                \"sha256:fc323ffcaeaed0e0a02bf4d117757b98aed530d9ed4531e3e15460124c106691\"\n            ],\n            \"version\": \"==3.0.4\"\n        },\n        \"cryptography\": {\n            \"hashes\": [\n                \"sha256:21af753934f2f6d1a10fe8f4c0a64315af209ef6adeaee63ca349797d747d687\",\n                \"sha256:27bb401a20a838d6d0ea380f08c6ead3ccd8c9d8a0232dc9adcc0e4994576a66\",\n                \"sha256:29720c4253263cff9aea64585adbbe85013ba647f6e98367efff9db2d7193ded\",\n                \"sha256:2a35b7570d8f247889784010aac8b384fd2e4a47b33e15c4a60b45a7c1944120\",\n                \"sha256:42c531a6a354407f42ee07fda5c2c0dc822cf6d52744949c182f2b295fbd4183\",\n                \"sha256:5eb86f03f9c4f0ac2336ac5431271072ddf7ecc76b338e26366732cfac58aa19\",\n                \"sha256:67f7f57eae8dede577f3f7775957f5bec93edd6bdb6ce597bb5b28e1bdf3d4fb\",\n                \"sha256:6ec84edcbc966ae460560a51a90046503ff0b5b66157a9efc61515c68059f6c8\",\n                \"sha256:7ba834564daef87557e7fcd35c3c3183a4147b0b3a57314e53317360b9b201b3\",\n                \"sha256:7d7f084cbe1fdb82be5a0545062b59b1ad3637bc5a48612ac2eb428ff31b31ea\",\n                \"sha256:82409f5150e529d699e5c33fa8fd85e965104db03bc564f5f4b6a9199e591f7c\",\n                \"sha256:87d092a7c2a44e5f7414ab02fb4145723ebba411425e1a99773531dd4c0e9b8d\",\n                \"sha256:8c56ef989342e42b9fcaba7c74b446f0cc9bed546dd00034fa7ad66fc00307ef\",\n                \"sha256:9449f5d4d7c516a6118fa9210c4a00f34384cb1d2028672100ee0c6cce49d7f6\",\n                \"sha256:bc2301170986ad82d9349a91eb8884e0e191209c45f5541b16aa7c0cfb135978\",\n                \"sha256:c132bab45d4bd0fff1d3fe294d92b0a6eb8404e93337b3127bdec9f21de117e6\",\n                \"sha256:c3d945b7b577f07a477700f618f46cbc287af3a9222cd73035c6ef527ef2c363\",\n                \"sha256:cee18beb4c807b5c0b178f4fa2fae03cef9d51821a358c6890f8b23465b7e5d2\",\n                \"sha256:d01dfc5c2b3495184f683574e03c70022674ca9a7be88589c5aba130d835ea90\"\n            ],\n            \"version\": \"==2.3\"\n        },\n        \"defusedxml\": {\n            \"hashes\": [\n                \"sha256:24d7f2f94f7f3cb6061acb215685e5125fbcdc40a857eff9de22518820b0a4f4\",\n                \"sha256:702a91ade2968a82beb0db1e0766a6a273f33d4616a6ce8cde475d8e09853b20\"\n            ],\n            \"version\": \"==0.5.0\"\n        },\n        \"idna\": {\n            \"hashes\": [\n                \"sha256:156a6814fb5ac1fc6850fb002e0852d56c0c8d2531923a51032d1b70760e186e\",\n                \"sha256:684a38a6f903c1d71d6d5fac066b58d7768af4de2b832e426ec79c30daa94a16\"\n            ],\n            \"version\": \"==2.7\"\n        },\n        \"jira\": {\n            \"hashes\": [\n                \"sha256:9adeead4d5f5a6aff74c630787f8bd2d4b0e154f3a3036641298064e91b2d25d\",\n                \"sha256:e2a94adff98e45b29ded030adc76103eab34fa7d4d57303f211f572bedba0e93\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==2.0.0\"\n        },\n        \"numpy\": {\n            \"hashes\": [\n                \"sha256:14fb76bde161c87dcec52d91c78f65aa8a23aa2e1530a71f412dabe03927d917\",\n                \"sha256:21041014b7529237994a6b578701c585703fbb3b1bea356cdb12a5ea7804241c\",\n                \"sha256:24f3bb9a5f6c3936a8ccd4ddfc1210d9511f4aeb879a12efd2e80bec647b8695\",\n                \"sha256:34033b581bc01b1135ca2e3e93a94daea7c739f21a97a75cca93e29d9f0c8e71\",\n                \"sha256:3fbccb399fe9095b1c1d7b41e7c7867db8aa0d2347fc44c87a7a180cedda112b\",\n                \"sha256:50718eea8e77a1bedcc85befd22c8dbf5a24c9d2c0c1e36bbb8d7a38da847eb3\",\n                \"sha256:55daf757e5f69aa75b4477cf4511bf1f96325c730e4ad32d954ccb593acd2585\",\n                \"sha256:61efc65f325770bbe787f34e00607bc124f08e6c25fdf04723848585e81560dc\",\n                \"sha256:62cb836506f40ce2529bfba9d09edc4b2687dd18c56cf4457e51c3e7145402fd\",\n                \"sha256:64c6acf5175745fd1b7b7e17c74fdbfb7191af3b378bc54f44560279f41238d3\",\n                \"sha256:674ea7917f0657ddb6976bd102ac341bc493d072c32a59b98e5b8c6eaa2d5ec0\",\n                \"sha256:73a816e441dace289302e04a7a34ec4772ed234ab6885c968e3ca2fc2d06fe2d\",\n                \"sha256:78c35dc7ad184aebf3714dbf43f054714c6e430e14b9c06c49a864fb9e262030\",\n                \"sha256:7f17efe9605444fcbfd990ba9b03371552d65a3c259fc2d258c24fb95afdd728\",\n                \"sha256:816645178f2180be257a576b735d3ae245b1982280b97ae819550ce8bcdf2b6b\",\n                \"sha256:924f37e66db78464b4b85ed4b6d2e5cda0c0416e657cac7ccbef14b9fa2c40b5\",\n                \"sha256:a17a8fd5df4fec5b56b4d11c9ba8b9ebfb883c90ec361628d07be00aaa4f009a\",\n                \"sha256:aaa519335a71f87217ca8a680c3b66b61960e148407bdf5c209c42f50fe30f49\",\n                \"sha256:ae3864816287d0e86ead580b69921daec568fe680857f07ee2a87bf7fd77ce24\",\n                \"sha256:b5f8c15cb9173f6cdf0f994955e58d1265331029ae26296232379461a297e5f2\",\n                \"sha256:c3ac359ace241707e5a48fe2922e566ac666aacacf4f8031f2994ac429c31344\",\n                \"sha256:c7c660cc0209fdf29a4e50146ca9ac9d8664acaded6b6ae2f5d0ae2e91a0f0cd\",\n                \"sha256:d690a2ff49f6c3bc35336693c9924fe5916be3cc0503fe1ea6c7e2bf951409ee\",\n                \"sha256:e2317cf091c2e7f0dacdc2e72c693cc34403ca1f8e3807622d0bb653dc978616\",\n                \"sha256:f28e73cf18d37a413f7d5de35d024e6b98f14566a10d82100f9dc491a7d449f9\",\n                \"sha256:f2a778dd9bb3e4590dbe3bbac28e7c7134280c4ec97e3bf8678170ee58c67b21\",\n                \"sha256:f5a758252502b466b9c2b201ea397dae5a914336c987f3a76c3741a82d43c96e\",\n                \"sha256:fb4c33a404d9eff49a0cdc8ead0af6453f62f19e071b60d283f9dc05581e4134\"\n            ],\n            \"markers\": \"python_version >= '2.7' and python_version != '3.2.*' and python_version != '3.3.*' and python_version != '3.0.*' and python_version != '3.1.*'\",\n            \"version\": \"==1.15.0\"\n        },\n        \"oauthlib\": {\n            \"hashes\": [\n                \"sha256:ac35665a61c1685c56336bda97d5eefa246f1202618a1d6f34fccb1bdd404162\",\n                \"sha256:d883b36b21a6ad813953803edfa563b1b579d79ca758fe950d1bc9e8b326025b\"\n            ],\n            \"version\": \"==2.1.0\"\n        },\n        \"pandas\": {\n            \"hashes\": [\n                \"sha256:11975fad9edbdb55f1a560d96f91830e83e29bed6ad5ebf506abda09818eaf60\",\n                \"sha256:12e13d127ca1b585dd6f6840d3fe3fa6e46c36a6afe2dbc5cb0b57032c902e31\",\n                \"sha256:1c87fcb201e1e06f66e23a61a5fea9eeebfe7204a66d99df24600e3f05168051\",\n                \"sha256:242e9900de758e137304ad4b5663c2eff0d798c2c3b891250bd0bd97144579da\",\n                \"sha256:26c903d0ae1542890cb9abadb4adcb18f356b14c2df46e4ff657ae640e3ac9e7\",\n                \"sha256:2e1e88f9d3e5f107b65b59cd29f141995597b035d17cc5537e58142038942e1a\",\n                \"sha256:31b7a48b344c14691a8e92765d4023f88902ba3e96e2e4d0364d3453cdfd50db\",\n                \"sha256:4fd07a932b4352f8a8973761ab4e84f965bf81cc750fb38e04f01088ab901cb8\",\n                \"sha256:5b24ca47acf69222e82530e89111dd9d14f9b970ab2cd3a1c2c78f0c4fbba4f4\",\n                \"sha256:647b3b916cc8f6aeba240c8171be3ab799c3c1b2ea179a3be0bd2712c4237553\",\n                \"sha256:66b060946046ca27c0e03e9bec9bba3e0b918bafff84c425ca2cc2e157ce121e\",\n                \"sha256:6efa9fa6e1434141df8872d0fa4226fc301b17aacf37429193f9d70b426ea28f\",\n                \"sha256:be4715c9d8367e51dbe6bc6d05e205b1ae234f0dc5465931014aa1c4af44c1ba\",\n                \"sha256:bea90da782d8e945fccfc958585210d23de374fa9294a9481ed2abcef637ebfc\",\n                \"sha256:d785fc08d6f4207437e900ffead930a61e634c5e4f980ba6d3dc03c9581748c7\",\n                \"sha256:de9559287c4fe8da56e8c3878d2374abc19d1ba2b807bfa7553e912a8e5ba87c\",\n                \"sha256:f4f98b190bb918ac0bc0e3dd2ab74ff3573da9f43106f6dba6385406912ec00f\",\n                \"sha256:f71f1a7e2d03758f6e957896ed696254e2bc83110ddbc6942018f1a232dd9dad\",\n                \"sha256:fb944c8f0b0ab5c1f7846c686bc4cdf8cde7224655c12edcd59d5212cd57bec0\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==0.23.4\"\n        },\n        \"pbr\": {\n            \"hashes\": [\n                \"sha256:1b8be50d938c9bb75d0eaf7eda111eec1bf6dc88a62a6412e33bf077457e0f45\",\n                \"sha256:b486975c0cafb6beeb50ca0e17ba047647f229087bd74e37f4a7e2cac17d2caa\"\n            ],\n            \"version\": \"==4.2.0\"\n        },\n        \"psycopg2-binary\": {\n            \"hashes\": [\n                \"sha256:04afb59bbbd2eab3148e6816beddc74348078b8c02a1113ea7f7822f5be4afe3\",\n                \"sha256:098b18f4d8857a8f9b206d1dc54db56c2255d5d26458917e7bcad61ebfe4338f\",\n                \"sha256:0bf855d4a7083e20ead961fda4923887094eaeace0ab2d76eb4aa300f4bbf5bd\",\n                \"sha256:197dda3ffd02057820be83fe4d84529ea70bf39a9a4daee1d20ffc74eb3d042e\",\n                \"sha256:278ef63afb4b3d842b4609f2c05ffbfb76795cf6a184deeb8707cd5ed3c981a5\",\n                \"sha256:3cbf8c4fc8f22f0817220891cf405831559f4d4c12c4f73913730a2ea6c47a47\",\n                \"sha256:4305aed922c4d9d6163ab3a41d80b5a1cfab54917467da8168552c42cad84d32\",\n                \"sha256:47ee296f704fb8b2a616dec691cdcfd5fa0f11943955e88faa98cbd1dc3b3e3d\",\n                \"sha256:4a0e38cb30457e70580903367161173d4a7d1381eb2f2cfe4e69b7806623f484\",\n                \"sha256:4d6c294c6638a71cafb82a37f182f24321f1163b08b5d5ca076e11fe838a3086\",\n                \"sha256:4f3233c366500730f839f92833194fd8f9a5c4529c8cd8040aa162c3740de8e5\",\n                \"sha256:5221f5a3f4ca2ddf0d58e8b8a32ca50948be9a43351fda797eb4e72d7a7aa34d\",\n                \"sha256:5c6ca0b507540a11eaf9e77dee4f07c131c2ec80ca0cffa146671bf690bc1c02\",\n                \"sha256:789bd89d71d704db2b3d5e67d6d518b158985d791d3b2dec5ab85457cfc9677b\",\n                \"sha256:7b94d29239efeaa6a967f3b5971bd0518d2a24edd1511edbf4a2c8b815220d07\",\n                \"sha256:89bc65ef3301c74cf32db25334421ea6adbe8f65601ea45dcaaf095abed910bb\",\n                \"sha256:89d6d3a549f405c20c9ae4dc94d7ed2de2fa77427a470674490a622070732e62\",\n                \"sha256:97521704ac7127d7d8ba22877da3c7bf4a40366587d238ec679ff38e33177498\",\n                \"sha256:a395b62d5f44ff6f633231abe568e2203b8fabf9797cd6386aa92497df912d9a\",\n                \"sha256:a6d32c37f714c3f34158f3fa659f3a8f2658d5f53c4297d45579b9677cc4d852\",\n                \"sha256:a89ee5c26f72f2d0d74b991ce49e42ddeb4ac0dc2d8c06a0f2770a1ab48f4fe0\",\n                \"sha256:b4c8b0ef3608e59317bfc501df84a61e48b5445d45f24d0391a24802de5f2d84\",\n                \"sha256:b5fcf07140219a1f71e18486b8dc28e2e1b76a441c19374805c617aa6d9a9d55\",\n                \"sha256:b86f527f00956ecebad6ab3bb30e3a75fedf1160a8716978dd8ce7adddedd86f\",\n                \"sha256:be4c4aa22ba22f70de36c98b06480e2f1697972d49eb20d525f400d204a6d272\",\n                \"sha256:c2ac7aa1a144d4e0e613ac7286dae85671e99fe7a1353954d4905629c36b811c\",\n                \"sha256:de26ef4787b5e778e8223913a3e50368b44e7480f83c76df1f51d23bd21cea16\",\n                \"sha256:e70ebcfc5372dc7b699c0110454fc4263967f30c55454397e5769eb72c0eb0ce\",\n                \"sha256:eadbd32b6bc48b67b0457fccc94c86f7ccc8178ab839f684eb285bb592dc143e\",\n                \"sha256:ecbc6dfff6db06b8b72ae8a2f25ff20fbdcb83cb543811a08f7cb555042aa729\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==2.7.5\"\n        },\n        \"pycparser\": {\n            \"hashes\": [\n                \"sha256:99a8ca03e29851d96616ad0404b4aad7d9ee16f25c9f9708a11faf2810f7b226\"\n            ],\n            \"version\": \"==2.18\"\n        },\n        \"pyjwt\": {\n            \"hashes\": [\n                \"sha256:30b1380ff43b55441283cc2b2676b755cca45693ae3097325dea01f3d110628c\",\n                \"sha256:4ee413b357d53fd3fb44704577afac88e72e878716116270d722723d65b42176\"\n            ],\n            \"version\": \"==1.6.4\"\n        },\n        \"python-dateutil\": {\n            \"hashes\": [\n                \"sha256:1adb80e7a782c12e52ef9a8182bebeb73f1d7e24e374397af06fb4956c8dc5c0\",\n                \"sha256:e27001de32f627c22380a688bcc43ce83504a7bc5da472209b4c70f02829f0b8\"\n            ],\n            \"version\": \"==2.7.3\"\n        },\n        \"pytz\": {\n            \"hashes\": [\n                \"sha256:a061aa0a9e06881eb8b3b2b43f05b9439d6583c206d0a6c340ff72a7b6669053\",\n                \"sha256:ffb9ef1de172603304d9d2819af6f5ece76f2e85ec10692a524dd876e72bf277\"\n            ],\n            \"version\": \"==2018.5\"\n        },\n        \"requests\": {\n            \"hashes\": [\n                \"sha256:63b52e3c866428a224f97cab011de738c36aec0185aa91cfacd418b5d58911d1\",\n                \"sha256:ec22d826a36ed72a7358ff3fe56cbd4ba69dd7a6718ffd450ff0e9df7a47ce6a\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==2.19.1\"\n        },\n        \"requests-oauthlib\": {\n            \"hashes\": [\n                \"sha256:8886bfec5ad7afb391ed5443b1f697c6f4ae98d0e5620839d8b4499c032ada3f\",\n                \"sha256:e21232e2465808c0e892e0e4dbb8c2faafec16ac6dc067dd546e9b466f3deac8\"\n            ],\n            \"version\": \"==1.0.0\"\n        },\n        \"requests-toolbelt\": {\n            \"hashes\": [\n                \"sha256:42c9c170abc2cacb78b8ab23ac957945c7716249206f90874651971a4acff237\",\n                \"sha256:f6a531936c6fa4c6cfce1b9c10d5c4f498d16528d2a54a22ca00011205a187b5\"\n            ],\n            \"version\": \"==0.8.0\"\n        },\n        \"six\": {\n            \"hashes\": [\n                \"sha256:70e8a77beed4562e7f14fe23a786b54f6296e34344c23bc42f07b15018ff98e9\",\n                \"sha256:832dc0e10feb1aa2c68dcc57dbb658f1c7e65b9b61af69048abc87a2db00a0eb\"\n            ],\n            \"version\": \"==1.11.0\"\n        },\n        \"sqlalchemy\": {\n            \"hashes\": [\n                \"sha256:72325e67fb85f6e9ad304c603d83626d1df684fdf0c7ab1f0352e71feeab69d8\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==1.2.10\"\n        },\n        \"urllib3\": {\n            \"hashes\": [\n                \"sha256:a68ac5e15e76e7e5dd2b8f94007233e01effe3e50e8daddf69acfd81cb686baf\",\n                \"sha256:b5725a0bd4ba422ab0e66e89e030c806576753ea3ee08554382c14e685d117b5\"\n            ],\n            \"markers\": \"python_version != '3.0.*' and python_version != '3.3.*' and python_version != '3.1.*' and python_version != '3.2.*' and python_version < '4' and python_version >= '2.6'\",\n            \"version\": \"==1.23\"\n        }\n    },\n    \"develop\": {}\n}\n\n\nPipfile.lock  is Python's very own equivalent to package-lock.json. With \nPipfile.lock  present, future developers need only to type the command pipenv\ninstall  to install the exact dependencies in your project with all the correct\nversions. What's more, Pipfile.lock is actually a must-have for Heroku \ndevelopment, which uses this file to wisely produce environments upon\ndeployment.\n\nWhat about updating all packages past their locked version, you might ask? Check\nout the output of pipenv update, which updates all packages to their latest, and\nupdates the corresponding .lock file accordingly:\n\nYou had me at Snake emoji.When to Use Conda or Virtualenv\nIf you're strictly in the data science  profession, chances are that none of\nthis nonsense interests you - you and all your friends are always working with\nthe full Anaconda suite (which has its own similar environment manager), and you\ndon't care for shipping products. You're a scientist, not some sort of blue\ncollar data equivalent of manufacturing. \n\nEven if you're engineer, virtualenv  still has it's place. Take Lambda Functions\nin AWS for example: if you're looking to create a zip of dependencies to upload\nto your Lambda, it's much simpler to have those packages to live in your local\nworking folder. \n\nI'm sure you're itching to hear more on the topic of Python environment\nmanagement, but the analytics say that 90% of readers have already bounced by\nthis point. To the remaining 10%... you are all that I live for.","html":"<p>As a shoutout to my fellow Data Engineers, I'm going to take a step back from typical data science workflows. When we build standalone applications, we probably don't want to be tossing around Miniconda's 720 software packages in production, nor would we ever want to commit the source of any dependencies to Github. This is where Pipenv comes in handy: it serves as both an environment management tool, as well as a sort of <em>package.json</em> for your Python app.</p><p>The combination of <code>virtualenv</code> and <code>virtualenvwrapper</code> have reigned supreme for some time. While this combination is a totally fine solution, I've noticed even senior developers gloss over the existence of a better alternative, <code>pipenv</code>, which makes package management way, way easier. This is especially important in cases such as building apps for Heroku, where we're pushing to an otherwise agnostic environment which must explicitly be kept in sync with our local setup to ensure anything works.</p><p>Apologies in advance for what might seem a bit like Python 101, but I've been finding that the following information might be more relevant to some than we might presume.</p><h2 id=\"why-pipenv\">Why Pipenv?</h2><p>Pipenv's shell interface is entirely user-friendly. Rarely will developers find themselves needing to type more than two words, perhaps a single argument, to achieve a series of tasks which were previously less trivial. Pipenv also does an excellent job of documenting all dependencies in the resulting <strong>Pipfile</strong> and <strong>Pipfile.lock</strong>, which are easily generated and capture our project's dependencies to be handed off to the next poor bloke. Finally, Pipenv does us the luxury of keeping installed dependencies out of our project folder and instead creates virtual environments in parallel with our Python Path. This keeps folders potentially holding hundreds of dependencies out of our project folders,  mitigates any risk of us committing these packages to any git repos (if you're a nodejs person, you know what I mean with <em>npm</em> and <em>node_modules</em>).</p><h2 id=\"creating-environments\">Creating Environments</h2><p>Unsurprisingly, we get started with <code>pip3 install pipenv</code>. This may as well be the first and last package you install on your python path.</p><p>While in your project folder, give ‘pipenv shell’ a go. If an environment has not been created in this folder previously, this will create a new environment for this directory. If an environment does exist, this same command will be used to activate the environment. Compare this to the syntax of virtualenv:</p><pre><code class=\"language-shell\">$ virtualenv myenv\n$ source myenv/bin/activate\n</code></pre>\n<p>When creating environments, ‘pipenv shell’ can also take additional arguments such as —python, which allows you to specify which installed version of python to use for this environment:</p><pre><code class=\"language-shell\">$ pipenv shell —python 3.7\n</code></pre>\n<p>While in the shell, we can install packages using pip as expected.</p><h2 id=\"managing-packages\">Managing packages</h2><p>The point of environments is not only to isolate dependencies, but also to track them so that our environment is both transferable and easily reproducible. Chances are you’re familiar with the typical output of <code>pip freeze</code>:</p><pre><code>aadict==0.2.3\nasset==0.6.12\nbeautifulsoup4==4.6.1\ncertifi==2018.4.16\nchardet==3.0.4\nclick==6.7\ndecorator==4.3.0\ndnspython==1.15.0\nFlask==1.0.2\nFlask-Assets==0.12\nFlask-Login==0.4.1\nFlask-Static-Compress==1.0.2\nglobre==0.1.5\ngunicorn==19.9.0\nidna==2.7\ninfinity==1.4\nintervals==0.8.1\nitsdangerous==0.24\njac==0.17.1\nJinja2==2.10\nlessc==0.1.2\nlesscpy==0.13.0\nMarkupSafe==1.0\nordereddict==1.1\nply==3.11\npymongo==3.7.1\nrequests==2.19.1\nrjsmin==1.0.12\nsix==1.11.0\nSQLAlchemy==1.2.10\nSQLAlchemy-Utils==0.33.3\nurllib3==1.23\nvalidators==0.12.2\nwebassets==0.12.1\nWerkzeug==0.14.1\nWTForms==2.2.1\nWTForms-Alchemy==0.16.7\nWTForms-Components==0.10.3</code></pre><p><code>pip freeze</code> is a great human-friendly way to see what you have installed in your environment; but what about robots? This wouldn't be Hackers And Slackers if we didn't have a robot-friendly solution, now would it? Check out the output of <code>pipenv lock</code>, which writes to a file called <code>Pipfile.lock</code> in your local environment:</p><pre><code>{\n    \"_meta\": {\n        \"hash\": {\n            \"sha256\": \"668ab7d6f7db268048ca01a717c1cf77b8b4f373ed8074e48a9f22517975a306\"\n        },\n        \"pipfile-spec\": 6,\n        \"requires\": {\n            \"python_version\": \"3.7\"\n        },\n        \"sources\": [\n            {\n                \"name\": \"pypi\",\n                \"url\": \"https://pypi.org/simple\",\n                \"verify_ssl\": true\n            }\n        ]\n    },\n    \"default\": {\n        \"asn1crypto\": {\n            \"hashes\": [\n                \"sha256:2f1adbb7546ed199e3c90ef23ec95c5cf3585bac7d11fb7eb562a3fe89c64e87\",\n                \"sha256:9d5c20441baf0cb60a4ac34cc447c6c189024b6b4c6cd7877034f4965c464e49\"\n            ],\n            \"version\": \"==0.24.0\"\n        },\n        \"certifi\": {\n            \"hashes\": [\n                \"sha256:13e698f54293db9f89122b0581843a782ad0934a4fe0172d2a980ba77fc61bb7\",\n                \"sha256:9fa520c1bacfb634fa7af20a76bcbd3d5fb390481724c597da32c719a7dca4b0\"\n            ],\n            \"version\": \"==2018.4.16\"\n        },\n        \"cffi\": {\n            \"hashes\": [\n                \"sha256:151b7eefd035c56b2b2e1eb9963c90c6302dc15fbd8c1c0a83a163ff2c7d7743\",\n                \"sha256:1553d1e99f035ace1c0544050622b7bc963374a00c467edafac50ad7bd276aef\",\n                \"sha256:1b0493c091a1898f1136e3f4f991a784437fac3673780ff9de3bcf46c80b6b50\",\n                \"sha256:2ba8a45822b7aee805ab49abfe7eec16b90587f7f26df20c71dd89e45a97076f\",\n                \"sha256:3bb6bd7266598f318063e584378b8e27c67de998a43362e8fce664c54ee52d30\",\n                \"sha256:3c85641778460581c42924384f5e68076d724ceac0f267d66c757f7535069c93\",\n                \"sha256:3eb6434197633b7748cea30bf0ba9f66727cdce45117a712b29a443943733257\",\n                \"sha256:495c5c2d43bf6cebe0178eb3e88f9c4aa48d8934aa6e3cddb865c058da76756b\",\n                \"sha256:4c91af6e967c2015729d3e69c2e51d92f9898c330d6a851bf8f121236f3defd3\",\n                \"sha256:57b2533356cb2d8fac1555815929f7f5f14d68ac77b085d2326b571310f34f6e\",\n                \"sha256:770f3782b31f50b68627e22f91cb182c48c47c02eb405fd689472aa7b7aa16dc\",\n                \"sha256:79f9b6f7c46ae1f8ded75f68cf8ad50e5729ed4d590c74840471fc2823457d04\",\n                \"sha256:7a33145e04d44ce95bcd71e522b478d282ad0eafaf34fe1ec5bbd73e662f22b6\",\n                \"sha256:857959354ae3a6fa3da6651b966d13b0a8bed6bbc87a0de7b38a549db1d2a359\",\n                \"sha256:87f37fe5130574ff76c17cab61e7d2538a16f843bb7bca8ebbc4b12de3078596\",\n                \"sha256:95d5251e4b5ca00061f9d9f3d6fe537247e145a8524ae9fd30a2f8fbce993b5b\",\n                \"sha256:9d1d3e63a4afdc29bd76ce6aa9d58c771cd1599fbba8cf5057e7860b203710dd\",\n                \"sha256:a36c5c154f9d42ec176e6e620cb0dd275744aa1d804786a71ac37dc3661a5e95\",\n                \"sha256:a6a5cb8809091ec9ac03edde9304b3ad82ad4466333432b16d78ef40e0cce0d5\",\n                \"sha256:ae5e35a2c189d397b91034642cb0eab0e346f776ec2eb44a49a459e6615d6e2e\",\n                \"sha256:b0f7d4a3df8f06cf49f9f121bead236e328074de6449866515cea4907bbc63d6\",\n                \"sha256:b75110fb114fa366b29a027d0c9be3709579602ae111ff61674d28c93606acca\",\n                \"sha256:ba5e697569f84b13640c9e193170e89c13c6244c24400fc57e88724ef610cd31\",\n                \"sha256:be2a9b390f77fd7676d80bc3cdc4f8edb940d8c198ed2d8c0be1319018c778e1\",\n                \"sha256:ca1bd81f40adc59011f58159e4aa6445fc585a32bb8ac9badf7a2c1aa23822f2\",\n                \"sha256:d5d8555d9bfc3f02385c1c37e9f998e2011f0db4f90e250e5bc0c0a85a813085\",\n                \"sha256:e55e22ac0a30023426564b1059b035973ec82186ddddbac867078435801c7801\",\n                \"sha256:e90f17980e6ab0f3c2f3730e56d1fe9bcba1891eeea58966e89d352492cc74f4\",\n                \"sha256:ecbb7b01409e9b782df5ded849c178a0aa7c906cf8c5a67368047daab282b184\",\n                \"sha256:ed01918d545a38998bfa5902c7c00e0fee90e957ce036a4000a88e3fe2264917\",\n                \"sha256:edabd457cd23a02965166026fd9bfd196f4324fe6032e866d0f3bd0301cd486f\",\n                \"sha256:fdf1c1dc5bafc32bc5d08b054f94d659422b05aba244d6be4ddc1c72d9aa70fb\"\n            ],\n            \"version\": \"==1.11.5\"\n        },\n        \"chardet\": {\n            \"hashes\": [\n                \"sha256:84ab92ed1c4d4f16916e05906b6b75a6c0fb5db821cc65e70cbd64a3e2a5eaae\",\n                \"sha256:fc323ffcaeaed0e0a02bf4d117757b98aed530d9ed4531e3e15460124c106691\"\n            ],\n            \"version\": \"==3.0.4\"\n        },\n        \"cryptography\": {\n            \"hashes\": [\n                \"sha256:21af753934f2f6d1a10fe8f4c0a64315af209ef6adeaee63ca349797d747d687\",\n                \"sha256:27bb401a20a838d6d0ea380f08c6ead3ccd8c9d8a0232dc9adcc0e4994576a66\",\n                \"sha256:29720c4253263cff9aea64585adbbe85013ba647f6e98367efff9db2d7193ded\",\n                \"sha256:2a35b7570d8f247889784010aac8b384fd2e4a47b33e15c4a60b45a7c1944120\",\n                \"sha256:42c531a6a354407f42ee07fda5c2c0dc822cf6d52744949c182f2b295fbd4183\",\n                \"sha256:5eb86f03f9c4f0ac2336ac5431271072ddf7ecc76b338e26366732cfac58aa19\",\n                \"sha256:67f7f57eae8dede577f3f7775957f5bec93edd6bdb6ce597bb5b28e1bdf3d4fb\",\n                \"sha256:6ec84edcbc966ae460560a51a90046503ff0b5b66157a9efc61515c68059f6c8\",\n                \"sha256:7ba834564daef87557e7fcd35c3c3183a4147b0b3a57314e53317360b9b201b3\",\n                \"sha256:7d7f084cbe1fdb82be5a0545062b59b1ad3637bc5a48612ac2eb428ff31b31ea\",\n                \"sha256:82409f5150e529d699e5c33fa8fd85e965104db03bc564f5f4b6a9199e591f7c\",\n                \"sha256:87d092a7c2a44e5f7414ab02fb4145723ebba411425e1a99773531dd4c0e9b8d\",\n                \"sha256:8c56ef989342e42b9fcaba7c74b446f0cc9bed546dd00034fa7ad66fc00307ef\",\n                \"sha256:9449f5d4d7c516a6118fa9210c4a00f34384cb1d2028672100ee0c6cce49d7f6\",\n                \"sha256:bc2301170986ad82d9349a91eb8884e0e191209c45f5541b16aa7c0cfb135978\",\n                \"sha256:c132bab45d4bd0fff1d3fe294d92b0a6eb8404e93337b3127bdec9f21de117e6\",\n                \"sha256:c3d945b7b577f07a477700f618f46cbc287af3a9222cd73035c6ef527ef2c363\",\n                \"sha256:cee18beb4c807b5c0b178f4fa2fae03cef9d51821a358c6890f8b23465b7e5d2\",\n                \"sha256:d01dfc5c2b3495184f683574e03c70022674ca9a7be88589c5aba130d835ea90\"\n            ],\n            \"version\": \"==2.3\"\n        },\n        \"defusedxml\": {\n            \"hashes\": [\n                \"sha256:24d7f2f94f7f3cb6061acb215685e5125fbcdc40a857eff9de22518820b0a4f4\",\n                \"sha256:702a91ade2968a82beb0db1e0766a6a273f33d4616a6ce8cde475d8e09853b20\"\n            ],\n            \"version\": \"==0.5.0\"\n        },\n        \"idna\": {\n            \"hashes\": [\n                \"sha256:156a6814fb5ac1fc6850fb002e0852d56c0c8d2531923a51032d1b70760e186e\",\n                \"sha256:684a38a6f903c1d71d6d5fac066b58d7768af4de2b832e426ec79c30daa94a16\"\n            ],\n            \"version\": \"==2.7\"\n        },\n        \"jira\": {\n            \"hashes\": [\n                \"sha256:9adeead4d5f5a6aff74c630787f8bd2d4b0e154f3a3036641298064e91b2d25d\",\n                \"sha256:e2a94adff98e45b29ded030adc76103eab34fa7d4d57303f211f572bedba0e93\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==2.0.0\"\n        },\n        \"numpy\": {\n            \"hashes\": [\n                \"sha256:14fb76bde161c87dcec52d91c78f65aa8a23aa2e1530a71f412dabe03927d917\",\n                \"sha256:21041014b7529237994a6b578701c585703fbb3b1bea356cdb12a5ea7804241c\",\n                \"sha256:24f3bb9a5f6c3936a8ccd4ddfc1210d9511f4aeb879a12efd2e80bec647b8695\",\n                \"sha256:34033b581bc01b1135ca2e3e93a94daea7c739f21a97a75cca93e29d9f0c8e71\",\n                \"sha256:3fbccb399fe9095b1c1d7b41e7c7867db8aa0d2347fc44c87a7a180cedda112b\",\n                \"sha256:50718eea8e77a1bedcc85befd22c8dbf5a24c9d2c0c1e36bbb8d7a38da847eb3\",\n                \"sha256:55daf757e5f69aa75b4477cf4511bf1f96325c730e4ad32d954ccb593acd2585\",\n                \"sha256:61efc65f325770bbe787f34e00607bc124f08e6c25fdf04723848585e81560dc\",\n                \"sha256:62cb836506f40ce2529bfba9d09edc4b2687dd18c56cf4457e51c3e7145402fd\",\n                \"sha256:64c6acf5175745fd1b7b7e17c74fdbfb7191af3b378bc54f44560279f41238d3\",\n                \"sha256:674ea7917f0657ddb6976bd102ac341bc493d072c32a59b98e5b8c6eaa2d5ec0\",\n                \"sha256:73a816e441dace289302e04a7a34ec4772ed234ab6885c968e3ca2fc2d06fe2d\",\n                \"sha256:78c35dc7ad184aebf3714dbf43f054714c6e430e14b9c06c49a864fb9e262030\",\n                \"sha256:7f17efe9605444fcbfd990ba9b03371552d65a3c259fc2d258c24fb95afdd728\",\n                \"sha256:816645178f2180be257a576b735d3ae245b1982280b97ae819550ce8bcdf2b6b\",\n                \"sha256:924f37e66db78464b4b85ed4b6d2e5cda0c0416e657cac7ccbef14b9fa2c40b5\",\n                \"sha256:a17a8fd5df4fec5b56b4d11c9ba8b9ebfb883c90ec361628d07be00aaa4f009a\",\n                \"sha256:aaa519335a71f87217ca8a680c3b66b61960e148407bdf5c209c42f50fe30f49\",\n                \"sha256:ae3864816287d0e86ead580b69921daec568fe680857f07ee2a87bf7fd77ce24\",\n                \"sha256:b5f8c15cb9173f6cdf0f994955e58d1265331029ae26296232379461a297e5f2\",\n                \"sha256:c3ac359ace241707e5a48fe2922e566ac666aacacf4f8031f2994ac429c31344\",\n                \"sha256:c7c660cc0209fdf29a4e50146ca9ac9d8664acaded6b6ae2f5d0ae2e91a0f0cd\",\n                \"sha256:d690a2ff49f6c3bc35336693c9924fe5916be3cc0503fe1ea6c7e2bf951409ee\",\n                \"sha256:e2317cf091c2e7f0dacdc2e72c693cc34403ca1f8e3807622d0bb653dc978616\",\n                \"sha256:f28e73cf18d37a413f7d5de35d024e6b98f14566a10d82100f9dc491a7d449f9\",\n                \"sha256:f2a778dd9bb3e4590dbe3bbac28e7c7134280c4ec97e3bf8678170ee58c67b21\",\n                \"sha256:f5a758252502b466b9c2b201ea397dae5a914336c987f3a76c3741a82d43c96e\",\n                \"sha256:fb4c33a404d9eff49a0cdc8ead0af6453f62f19e071b60d283f9dc05581e4134\"\n            ],\n            \"markers\": \"python_version &gt;= '2.7' and python_version != '3.2.*' and python_version != '3.3.*' and python_version != '3.0.*' and python_version != '3.1.*'\",\n            \"version\": \"==1.15.0\"\n        },\n        \"oauthlib\": {\n            \"hashes\": [\n                \"sha256:ac35665a61c1685c56336bda97d5eefa246f1202618a1d6f34fccb1bdd404162\",\n                \"sha256:d883b36b21a6ad813953803edfa563b1b579d79ca758fe950d1bc9e8b326025b\"\n            ],\n            \"version\": \"==2.1.0\"\n        },\n        \"pandas\": {\n            \"hashes\": [\n                \"sha256:11975fad9edbdb55f1a560d96f91830e83e29bed6ad5ebf506abda09818eaf60\",\n                \"sha256:12e13d127ca1b585dd6f6840d3fe3fa6e46c36a6afe2dbc5cb0b57032c902e31\",\n                \"sha256:1c87fcb201e1e06f66e23a61a5fea9eeebfe7204a66d99df24600e3f05168051\",\n                \"sha256:242e9900de758e137304ad4b5663c2eff0d798c2c3b891250bd0bd97144579da\",\n                \"sha256:26c903d0ae1542890cb9abadb4adcb18f356b14c2df46e4ff657ae640e3ac9e7\",\n                \"sha256:2e1e88f9d3e5f107b65b59cd29f141995597b035d17cc5537e58142038942e1a\",\n                \"sha256:31b7a48b344c14691a8e92765d4023f88902ba3e96e2e4d0364d3453cdfd50db\",\n                \"sha256:4fd07a932b4352f8a8973761ab4e84f965bf81cc750fb38e04f01088ab901cb8\",\n                \"sha256:5b24ca47acf69222e82530e89111dd9d14f9b970ab2cd3a1c2c78f0c4fbba4f4\",\n                \"sha256:647b3b916cc8f6aeba240c8171be3ab799c3c1b2ea179a3be0bd2712c4237553\",\n                \"sha256:66b060946046ca27c0e03e9bec9bba3e0b918bafff84c425ca2cc2e157ce121e\",\n                \"sha256:6efa9fa6e1434141df8872d0fa4226fc301b17aacf37429193f9d70b426ea28f\",\n                \"sha256:be4715c9d8367e51dbe6bc6d05e205b1ae234f0dc5465931014aa1c4af44c1ba\",\n                \"sha256:bea90da782d8e945fccfc958585210d23de374fa9294a9481ed2abcef637ebfc\",\n                \"sha256:d785fc08d6f4207437e900ffead930a61e634c5e4f980ba6d3dc03c9581748c7\",\n                \"sha256:de9559287c4fe8da56e8c3878d2374abc19d1ba2b807bfa7553e912a8e5ba87c\",\n                \"sha256:f4f98b190bb918ac0bc0e3dd2ab74ff3573da9f43106f6dba6385406912ec00f\",\n                \"sha256:f71f1a7e2d03758f6e957896ed696254e2bc83110ddbc6942018f1a232dd9dad\",\n                \"sha256:fb944c8f0b0ab5c1f7846c686bc4cdf8cde7224655c12edcd59d5212cd57bec0\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==0.23.4\"\n        },\n        \"pbr\": {\n            \"hashes\": [\n                \"sha256:1b8be50d938c9bb75d0eaf7eda111eec1bf6dc88a62a6412e33bf077457e0f45\",\n                \"sha256:b486975c0cafb6beeb50ca0e17ba047647f229087bd74e37f4a7e2cac17d2caa\"\n            ],\n            \"version\": \"==4.2.0\"\n        },\n        \"psycopg2-binary\": {\n            \"hashes\": [\n                \"sha256:04afb59bbbd2eab3148e6816beddc74348078b8c02a1113ea7f7822f5be4afe3\",\n                \"sha256:098b18f4d8857a8f9b206d1dc54db56c2255d5d26458917e7bcad61ebfe4338f\",\n                \"sha256:0bf855d4a7083e20ead961fda4923887094eaeace0ab2d76eb4aa300f4bbf5bd\",\n                \"sha256:197dda3ffd02057820be83fe4d84529ea70bf39a9a4daee1d20ffc74eb3d042e\",\n                \"sha256:278ef63afb4b3d842b4609f2c05ffbfb76795cf6a184deeb8707cd5ed3c981a5\",\n                \"sha256:3cbf8c4fc8f22f0817220891cf405831559f4d4c12c4f73913730a2ea6c47a47\",\n                \"sha256:4305aed922c4d9d6163ab3a41d80b5a1cfab54917467da8168552c42cad84d32\",\n                \"sha256:47ee296f704fb8b2a616dec691cdcfd5fa0f11943955e88faa98cbd1dc3b3e3d\",\n                \"sha256:4a0e38cb30457e70580903367161173d4a7d1381eb2f2cfe4e69b7806623f484\",\n                \"sha256:4d6c294c6638a71cafb82a37f182f24321f1163b08b5d5ca076e11fe838a3086\",\n                \"sha256:4f3233c366500730f839f92833194fd8f9a5c4529c8cd8040aa162c3740de8e5\",\n                \"sha256:5221f5a3f4ca2ddf0d58e8b8a32ca50948be9a43351fda797eb4e72d7a7aa34d\",\n                \"sha256:5c6ca0b507540a11eaf9e77dee4f07c131c2ec80ca0cffa146671bf690bc1c02\",\n                \"sha256:789bd89d71d704db2b3d5e67d6d518b158985d791d3b2dec5ab85457cfc9677b\",\n                \"sha256:7b94d29239efeaa6a967f3b5971bd0518d2a24edd1511edbf4a2c8b815220d07\",\n                \"sha256:89bc65ef3301c74cf32db25334421ea6adbe8f65601ea45dcaaf095abed910bb\",\n                \"sha256:89d6d3a549f405c20c9ae4dc94d7ed2de2fa77427a470674490a622070732e62\",\n                \"sha256:97521704ac7127d7d8ba22877da3c7bf4a40366587d238ec679ff38e33177498\",\n                \"sha256:a395b62d5f44ff6f633231abe568e2203b8fabf9797cd6386aa92497df912d9a\",\n                \"sha256:a6d32c37f714c3f34158f3fa659f3a8f2658d5f53c4297d45579b9677cc4d852\",\n                \"sha256:a89ee5c26f72f2d0d74b991ce49e42ddeb4ac0dc2d8c06a0f2770a1ab48f4fe0\",\n                \"sha256:b4c8b0ef3608e59317bfc501df84a61e48b5445d45f24d0391a24802de5f2d84\",\n                \"sha256:b5fcf07140219a1f71e18486b8dc28e2e1b76a441c19374805c617aa6d9a9d55\",\n                \"sha256:b86f527f00956ecebad6ab3bb30e3a75fedf1160a8716978dd8ce7adddedd86f\",\n                \"sha256:be4c4aa22ba22f70de36c98b06480e2f1697972d49eb20d525f400d204a6d272\",\n                \"sha256:c2ac7aa1a144d4e0e613ac7286dae85671e99fe7a1353954d4905629c36b811c\",\n                \"sha256:de26ef4787b5e778e8223913a3e50368b44e7480f83c76df1f51d23bd21cea16\",\n                \"sha256:e70ebcfc5372dc7b699c0110454fc4263967f30c55454397e5769eb72c0eb0ce\",\n                \"sha256:eadbd32b6bc48b67b0457fccc94c86f7ccc8178ab839f684eb285bb592dc143e\",\n                \"sha256:ecbc6dfff6db06b8b72ae8a2f25ff20fbdcb83cb543811a08f7cb555042aa729\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==2.7.5\"\n        },\n        \"pycparser\": {\n            \"hashes\": [\n                \"sha256:99a8ca03e29851d96616ad0404b4aad7d9ee16f25c9f9708a11faf2810f7b226\"\n            ],\n            \"version\": \"==2.18\"\n        },\n        \"pyjwt\": {\n            \"hashes\": [\n                \"sha256:30b1380ff43b55441283cc2b2676b755cca45693ae3097325dea01f3d110628c\",\n                \"sha256:4ee413b357d53fd3fb44704577afac88e72e878716116270d722723d65b42176\"\n            ],\n            \"version\": \"==1.6.4\"\n        },\n        \"python-dateutil\": {\n            \"hashes\": [\n                \"sha256:1adb80e7a782c12e52ef9a8182bebeb73f1d7e24e374397af06fb4956c8dc5c0\",\n                \"sha256:e27001de32f627c22380a688bcc43ce83504a7bc5da472209b4c70f02829f0b8\"\n            ],\n            \"version\": \"==2.7.3\"\n        },\n        \"pytz\": {\n            \"hashes\": [\n                \"sha256:a061aa0a9e06881eb8b3b2b43f05b9439d6583c206d0a6c340ff72a7b6669053\",\n                \"sha256:ffb9ef1de172603304d9d2819af6f5ece76f2e85ec10692a524dd876e72bf277\"\n            ],\n            \"version\": \"==2018.5\"\n        },\n        \"requests\": {\n            \"hashes\": [\n                \"sha256:63b52e3c866428a224f97cab011de738c36aec0185aa91cfacd418b5d58911d1\",\n                \"sha256:ec22d826a36ed72a7358ff3fe56cbd4ba69dd7a6718ffd450ff0e9df7a47ce6a\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==2.19.1\"\n        },\n        \"requests-oauthlib\": {\n            \"hashes\": [\n                \"sha256:8886bfec5ad7afb391ed5443b1f697c6f4ae98d0e5620839d8b4499c032ada3f\",\n                \"sha256:e21232e2465808c0e892e0e4dbb8c2faafec16ac6dc067dd546e9b466f3deac8\"\n            ],\n            \"version\": \"==1.0.0\"\n        },\n        \"requests-toolbelt\": {\n            \"hashes\": [\n                \"sha256:42c9c170abc2cacb78b8ab23ac957945c7716249206f90874651971a4acff237\",\n                \"sha256:f6a531936c6fa4c6cfce1b9c10d5c4f498d16528d2a54a22ca00011205a187b5\"\n            ],\n            \"version\": \"==0.8.0\"\n        },\n        \"six\": {\n            \"hashes\": [\n                \"sha256:70e8a77beed4562e7f14fe23a786b54f6296e34344c23bc42f07b15018ff98e9\",\n                \"sha256:832dc0e10feb1aa2c68dcc57dbb658f1c7e65b9b61af69048abc87a2db00a0eb\"\n            ],\n            \"version\": \"==1.11.0\"\n        },\n        \"sqlalchemy\": {\n            \"hashes\": [\n                \"sha256:72325e67fb85f6e9ad304c603d83626d1df684fdf0c7ab1f0352e71feeab69d8\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==1.2.10\"\n        },\n        \"urllib3\": {\n            \"hashes\": [\n                \"sha256:a68ac5e15e76e7e5dd2b8f94007233e01effe3e50e8daddf69acfd81cb686baf\",\n                \"sha256:b5725a0bd4ba422ab0e66e89e030c806576753ea3ee08554382c14e685d117b5\"\n            ],\n            \"markers\": \"python_version != '3.0.*' and python_version != '3.3.*' and python_version != '3.1.*' and python_version != '3.2.*' and python_version &lt; '4' and python_version &gt;= '2.6'\",\n            \"version\": \"==1.23\"\n        }\n    },\n    \"develop\": {}\n}\n</code></pre><p><code>Pipfile.lock</code> is Python's very own equivalent to <code>package-lock.json</code>. With <code>Pipfile.lock</code> present, future developers need only to type the command <code>pipenv install</code> to install the exact dependencies in your project with all the correct versions. What's more, Pipfile.lock is actually a must-have for <strong>Heroku</strong> development, which uses this file to wisely produce environments upon deployment.</p><p>What about updating all packages past their locked version, you might ask? Check out the output of <code>pipenv update</code>, which updates all packages to their latest, and updates the corresponding .lock file accordingly:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/2018-08-29_18-52-30.gif\" class=\"kg-image\"><figcaption>You had me at Snake emoji.</figcaption></figure><h2 id=\"when-to-use-conda-or-virtualenv\">When to Use Conda or Virtualenv</h2><p>If you're strictly in the data <em>science</em> profession, chances are that none of this nonsense interests you - you and all your friends are always working with the full Anaconda suite (which has its own similar environment manager), and you don't care for shipping products. You're a scientist, not some sort of blue collar data equivalent of manufacturing. </p><p>Even if you're engineer, <code>virtualenv</code> still has it's place. Take Lambda Functions in AWS for example: if you're looking to create a zip of dependencies to upload to your Lambda, it's much simpler to have those packages to live in your local working folder. </p><p>I'm sure you're itching to hear more on the topic of Python environment management, but the analytics say that 90% of readers have already bounced by this point. To the remaining 10%... you are all that I live for.</p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p>","url":"https://hackersandslackers.com/pipenv-python-environment-management/","uuid":"0d7b1982-a0a4-4e69-abdb-ecca53665ed3","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b848c058d5a814c505a70b6"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736e6","title":"Lynx Roundup, August 30th","slug":"lynx-roundup-august-30th-2","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx62@2x.jpg","excerpt":"Robots persuading you to not shut them off!  Upping your Git game!  More-readable RegEx!","custom_excerpt":"Robots persuading you to not shut them off!  Upping your Git game!  More-readable RegEx!","created_at_pretty":"18 August, 2018","published_at_pretty":"30 August, 2018","updated_at_pretty":"30 August, 2018","created_at":"2018-08-18T01:02:18.000-04:00","published_at":"2018-08-30T07:00:00.000-04:00","updated_at":"2018-08-30T07:00:00.000-04:00","meta_title":"Robots persuading you to not shut them off!  Upping your Git game!  More-readable RegEx! | Hackers And Slackers","meta_description":"Robots persuading you to not shut them off!  Upping your Git game!  More-readable RegEx!","og_description":"Robots persuading you to not shut them off!  Upping your Git game!  More-readable RegEx!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx62@2x.jpg","og_title":"Lynx Roundup, August 30th","twitter_description":"Robots persuading you to not shut them off!  Upping your Git game!  More-readable RegEx!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx62@2x.jpg","twitter_title":"Lynx Roundup, August 30th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"http://jkk.name/neural-tagger-tutorial/\n\n\n\nhttp://journals.plos.org/plosone/article?id=10.1371/journal.pone.0201581\n\n\n\nhttps://realpython.com/advanced-git-for-pythonistas/\n\n\n\nhttps://neurosciencenews.com/anger-intelligence-narcissists-9695/\n\n\n\nhttps://machinelearningmastery.com/statistical-hypothesis-tests-in-python-cheat-sheet/\n\n\n\nhttps://dev.to/bachnxhedspi/verbalexpressions---regularexpression-made-easy-27a8\n\n\n\nhttps://hackernoon.com/rethinking-fast-and-slow-in-data-science-b2ce18d5b054","html":"<p></p><p><a href=\"http://jkk.name/neural-tagger-tutorial/\">http://jkk.name/neural-tagger-tutorial/</a></p><p></p><p><a href=\"http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0201581\">http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0201581</a></p><p></p><p><a href=\"https://realpython.com/advanced-git-for-pythonistas/\">https://realpython.com/advanced-git-for-pythonistas/</a></p><p></p><p><a href=\"https://neurosciencenews.com/anger-intelligence-narcissists-9695/\">https://neurosciencenews.com/anger-intelligence-narcissists-9695/</a></p><p></p><p><a href=\"https://machinelearningmastery.com/statistical-hypothesis-tests-in-python-cheat-sheet/\">https://machinelearningmastery.com/statistical-hypothesis-tests-in-python-cheat-sheet/</a></p><p></p><p><a href=\"https://dev.to/bachnxhedspi/verbalexpressions---regularexpression-made-easy-27a8\">https://dev.to/bachnxhedspi/verbalexpressions---regularexpression-made-easy-27a8</a></p><p></p><p><a href=\"https://hackernoon.com/rethinking-fast-and-slow-in-data-science-b2ce18d5b054\">https://hackernoon.com/rethinking-fast-and-slow-in-data-science-b2ce18d5b054</a></p>","url":"https://hackersandslackers.com/lynx-roundup-august-30th-2/","uuid":"2904df8c-2799-43b8-a69a-648f294b4413","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b77a85aec281f15796ad2ab"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736e5","title":"Lynx Roundup, August 29th","slug":"lynx-roundup-august-30th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/78@2x.jpg","excerpt":"Getting the most out of Git!  Currying!  Python tail recursion!","custom_excerpt":"Getting the most out of Git!  Currying!  Python tail recursion!","created_at_pretty":"18 August, 2018","published_at_pretty":"29 August, 2018","updated_at_pretty":"02 September, 2018","created_at":"2018-08-18T00:58:29.000-04:00","published_at":"2018-08-29T07:00:00.000-04:00","updated_at":"2018-09-02T12:42:54.000-04:00","meta_title":"Getting the most out of Git!  Currying!  Python tail recursion! | Hackers And Slackers","meta_description":"Getting the most out of Git!  Currying!  Python tail recursion!","og_description":"Getting the most out of Git!  Currying!  Python tail recursion!","og_image":"https://hackersandslackers.com/content/images/lynx/78@2x.jpg","og_title":"Lynx Roundup, August 29th","twitter_description":"Getting the most out of Git!  Currying!  Python tail recursion!","twitter_image":"https://hackersandslackers.com/content/images/lynx/78@2x.jpg","twitter_title":"Lynx Roundup, August 29th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://portside.org/2018-08-08/tech-workers-and-flight-attendants-resist-immigrant-family-separation\n\n\n\nhttps://medium.freecodecamp.org/follow-these-simple-rules-and-youll-become-a-git-and-github-master-e1045057468f\n\n\n\nhttps://www.johndcook.com/blog/2018/08/11/currying/\n\n\n\nhttps://llvllatrix.wordpress.com/2018/08/06/sql-nested-window-functions-and-time-series/\n\n\n\nhttps://github.com/ac1235/python-tailrec\n\n\n\nhttps://github.com/Avik-Jain/100-Days-Of-ML-Code\n\n\n\nhttp://blogs.discovermagazine.com/crux/2018/08/10/kolmogorov-pattern-complexity-pattern-meaning-random/#.W3CkUCUpA0M","html":"<p></p><p><a href=\"https://portside.org/2018-08-08/tech-workers-and-flight-attendants-resist-immigrant-family-separation\">https://portside.org/2018-08-08/tech-workers-and-flight-attendants-resist-immigrant-family-separation</a></p><p></p><p><a href=\"https://medium.freecodecamp.org/follow-these-simple-rules-and-youll-become-a-git-and-github-master-e1045057468f\">https://medium.freecodecamp.org/follow-these-simple-rules-and-youll-become-a-git-and-github-master-e1045057468f</a></p><p></p><p><a href=\"https://www.johndcook.com/blog/2018/08/11/currying/\">https://www.johndcook.com/blog/2018/08/11/currying/</a></p><p></p><p><a href=\"https://llvllatrix.wordpress.com/2018/08/06/sql-nested-window-functions-and-time-series/\">https://llvllatrix.wordpress.com/2018/08/06/sql-nested-window-functions-and-time-series/</a></p><p></p><p><a href=\"https://github.com/ac1235/python-tailrec\">https://github.com/ac1235/python-tailrec</a></p><p></p><p><a href=\"https://github.com/Avik-Jain/100-Days-Of-ML-Code\">https://github.com/Avik-Jain/100-Days-Of-ML-Code</a></p><p></p><p><a href=\"http://blogs.discovermagazine.com/crux/2018/08/10/kolmogorov-pattern-complexity-pattern-meaning-random/#.W3CkUCUpA0M\">http://blogs.discovermagazine.com/crux/2018/08/10/kolmogorov-pattern-complexity-pattern-meaning-random/#.W3CkUCUpA0M</a></p>","url":"https://hackersandslackers.com/lynx-roundup-august-30th/","uuid":"d92580ee-ee2c-4ef8-9d3c-a02543f67f0c","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b77a775ec281f15796ad2a8"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736e3","title":"Lynx Roundup, August 28th","slug":"lynx-roundup-august-28th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx59-2@2x.jpg","excerpt":"Tweetable Python programs!  Mathematical optimization (there's more than just convex methods!)!    Book recommendations from data guru Hadley Wickham!","custom_excerpt":"Tweetable Python programs!  Mathematical optimization (there's more than just convex methods!)!    Book recommendations from data guru Hadley Wickham!","created_at_pretty":"18 August, 2018","published_at_pretty":"28 August, 2018","updated_at_pretty":"04 September, 2018","created_at":"2018-08-18T00:45:22.000-04:00","published_at":"2018-08-28T07:00:00.000-04:00","updated_at":"2018-09-04T01:15:30.000-04:00","meta_title":"Tweetable Python programs!  Mathematical optimization (there's more than just convex methods!)!    Book recommendations from data guru Hadley Wickham! | Hackers And Slackers","meta_description":"Tweetable Python programs!  Mathematical optimization (there's more than just convex methods!)!    Book recommendations from data guru Hadley Wickham!","og_description":"Tweetable Python programs!  Mathematical optimization (there's more than just convex methods!)!    Book recommendations from data guru Hadley Wickham!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx59-2@2x.jpg","og_title":"Lynx Roundup, August 28th","twitter_description":"Tweetable Python programs!  Mathematical optimization (there's more than just convex methods!)!    Book recommendations from data guru Hadley Wickham!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx59-2@2x.jpg","twitter_title":"Lynx Roundup, August 28th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://books.agiliq.com/projects/tweetable-python/en/latest/index.html\n\n\n\nhttps://github.com/bbli/ml_board\n\n\n\nhttps://pynative.com/python-mysql-tutorial/\n\n\n\nhttps://www.kdnuggets.com/2018/08/optimization-101-data-scientists.html\n\n\n\nhttps://jvns.ca/blog/2013/12/30/questions-im-asking-in-interviews/\n\n\n\nhttps://fivebooks.com/best-books/computer-science-data-science-hadley-wickham/\n\n\n\nhttps://www.spinellis.gr/blog/20180805/","html":"<p></p><p><a href=\"https://books.agiliq.com/projects/tweetable-python/en/latest/index.html\">https://books.agiliq.com/projects/tweetable-python/en/latest/index.html</a></p><p></p><p><a href=\"https://github.com/bbli/ml_board\">https://github.com/bbli/ml_board</a></p><p></p><p><a href=\"https://pynative.com/python-mysql-tutorial/\">https://pynative.com/python-mysql-tutorial/</a></p><p></p><p><a href=\"https://www.kdnuggets.com/2018/08/optimization-101-data-scientists.html\">https://www.kdnuggets.com/2018/08/optimization-101-data-scientists.html</a></p><p></p><p><a href=\"https://jvns.ca/blog/2013/12/30/questions-im-asking-in-interviews/\">https://jvns.ca/blog/2013/12/30/questions-im-asking-in-interviews/</a></p><p></p><p><a href=\"https://fivebooks.com/best-books/computer-science-data-science-hadley-wickham/\">https://fivebooks.com/best-books/computer-science-data-science-hadley-wickham/</a></p><p></p><p><a href=\"https://www.spinellis.gr/blog/20180805/\">https://www.spinellis.gr/blog/20180805/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-august-28th/","uuid":"273b8037-2c92-40bb-a240-3e2c25af7e29","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b77a462ec281f15796ad2a2"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736ea","title":"More API Columns, More Problems: Easily Adding DB Variables To Match New Input","slug":"add-db-variables-to-match-new-input-python-pandas","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/08/apidata@2x.jpg","excerpt":"Python, Pandas, & Functional Programming!","custom_excerpt":"Python, Pandas, & Functional Programming!","created_at_pretty":"22 August, 2018","published_at_pretty":"27 August, 2018","updated_at_pretty":"14 February, 2019","created_at":"2018-08-22T18:04:53.000-04:00","published_at":"2018-08-27T07:30:00.000-04:00","updated_at":"2019-02-13T22:48:04.000-05:00","meta_title":"Python, Pandas, & Functional Programming! | Hackers And Slackers","meta_description":"Python, Pandas, & Functional Programming!","og_description":"More API Columns, More Problems: Easily Adding DB Variables To Match New Input","og_image":"https://hackersandslackers.com/content/images/2018/08/apidata@2x.jpg","og_title":"More API Columns, More Problems: Easily Adding DB Variables To Match New Input","twitter_description":"Python, Pandas, & Functional Programming!","twitter_image":"https://hackersandslackers.com/content/images/2018/08/apidata@2x.jpg","twitter_title":"More API Columns, More Problems: Easily Adding DB Variables To Match New Input","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"REST APIs","slug":"restapis","description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","feature_image":null,"meta_description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","meta_title":"Consuming and Building REST APIs | Hackers and Slackers","visibility":"public"}],"plaintext":"APIs.  They're wonderful.  For every headache they've given me, I'm glad I live\nin the age where hitting an API endpoint is a standard way of retrieving data -\nI recently had to crawl a bunch of records from the Brazilian census in 200, and\nthat was an ordeal (but this isn't about that!).\n\nThe thing about APIs is that you generally shouldn't be hitting them all day\nlong - generally you should be doing regular imports to a database (or\nwhatever).  And the other thing about APIs is that they're not quite as fussy\nabout names as databases.  There's nothing stopping you from having the first\nrow of your API's output include field names like \"Account Canceled?\", which a\ntypical SQL RDBMS will not care for one bit.\n\nHow do we translate them?  Well, simple enough - we just have to think of\neverything that might be in our input string that won't be allowed in our\ndatabase, and change that!  I'm going to use the pipe  function from my beloved \ntoolz  library, provider of Functional Programming goodies for Python.\n\nfrom toolz import pipe\nimport string\n\ndef dbReady(toConvert):\n    return pipe(toConvert,\n                lambda x: x.lower(),\n                lambda x: filter(lambda y: \n                                y in string.ascii_lowercase + \" \",\n                                x),\n                lambda x: \"\".join(x),\n                lambda x: x.split(),\n                lambda x: \"_\".join(x))\n\n\n 1. We made it lowercase.\n 2. We filtered everything that wasn't a lowercase letter or a space.\n 3. We joined the filter back into a string.\n 4. We split the resulting string (in case we wound up with any double spaces,\n    such as from deleting a &.\n 5. We joined the list of strings with underscores.\n\ndbReady(\"Account Canceled?\")\n'account_canceled'\n\n\nFor comparison's sake, here's what that same function looks like without pipe\n\ndef dbReady(toConvert):\n    return '_'.join(\n               \"\".join(\n                   filter(lambda x:\n                          x in string.ascii_lowercase + \" \",\n                          (toConvert\n                           .lower()))\n                   ).split())\n\n\nBut wait!  There's more!\n\nWhat if your API changes?  Oh no, that could break your import!\n\nWell, if you don't care about the new columns, you could just filter them out.\n Let's say we have a list of lists called latestResponse  that came from a\nrequest to our API, with the first row as the labels.\n\nimport pymysql\nfrom sqlalchemy import create_engine\nimport sqlalchemy\nimport pandas as pd\n\nlatestCols = latestResponse[0]\n\n#Change to what they'll be in the database\ndbReadies = [dbReady(x) for x in latestCols] \n\n#Grab the columns currently in the database\ncnx = create_engine('mysql+pymysql://root:cracked1@localhost/appointments', echo=False)\ndbCols = pd.io.sql.read_sql_table(\"appointments_tableau\", \n                                  cnx).columns\n\n#Make a dataframe with what the columns would be named in a database\ndf = pd.DataFrame(latestResponse[1:], columns = dbReady)\n\n#Only select the columns that are currently in the db, and upload\ndf[dbCols].to_sql(name=\"my_table\",\n                  con=cnx, \n                  if_exists='append')\n\n\n\nBut what if you DO want the new columns from now on?  But you're already in the\nzone, don't feel like manually searching for which columns are new, and opening\na new terminal window to add the new variables?  What if you are, in a word,\nlazy?  And what if it's sorta important to preserve the order of the fields, and\nthe new ones are in the middle?\n\nNever fear!\n\nFirst, let's cook up a little function to produce an SQL ALTER TABLE  statement\n(standard disclaimers apply: do NOT do this blindly, or automatically).  Oh, and\nfor our purposes let's say these new columns all have the same type ( \nVARCHAR(255)), because if that's not the case then we have to be slightly less\nlazy. \n\ndef alterStatement(existingCol, newCol):\n    return (f\"ALTER TABLE appointments_tableau \"\n            f\"ADD COLUMN {newCol} VARCHAR(255) AFTER {existingCol};\")\n\n\nLet's use the wonderful sliding_window  function from toolz  to feed us a bunch\nof column names. \n\nExample from the official docs:\n\nlist(sliding_window(2, [1, 2, 3, 4]))\n[(1, 2), (2, 3), (3, 4)]\n\n\nBack to the show!\n\nfrom toolz.itertoolz import sliding_window\n\n#Get the variables that aren't currently in the db\nnewVars = [x for x in dbReadies if x not in dbCols]\n\n#Get a list where each entry is a tuple that has every new variable, and the existing preceding one\ntuples = list(sliding_window(2, dbReadies))\nnewVarTups = [x for x in tuples if x[1] in newVars]\n\n\nAnd, finally, let's set up our statements, and have Pandas execute them!  I know\nI promised I was going to start using SQLAlchemy for this kind of thing instead\nof unsanitized raw SQL, but I'm back on my bullshit again.\n\nfor x in newVarTups:\n    pd.io.sql.execute(alterStatement(*x), cnx)","html":"<p>APIs.  They're wonderful.  For every headache they've given me, I'm glad I live in the age where hitting an API endpoint is a standard way of retrieving data - I recently had to crawl a bunch of records from the Brazilian census in 200, and that was an ordeal (but this isn't about that!).</p><p>The thing about APIs is that you generally shouldn't be hitting them all day long - generally you should be doing regular imports to a database (or whatever).  And the other thing about APIs is that they're not quite as fussy about names as databases.  There's nothing stopping you from having the first row of your API's output include field names like \"Account Canceled?\", which a typical SQL RDBMS will not care for one bit.</p><p>How do we translate them?  Well, simple enough - we just have to think of everything that might be in our input string that won't be allowed in our database, and change that!  I'm going to use the <code>pipe</code> function from my beloved <code>toolz</code> library, provider of Functional Programming goodies for Python.</p><pre><code class=\"language-python\">from toolz import pipe\nimport string\n\ndef dbReady(toConvert):\n    return pipe(toConvert,\n                lambda x: x.lower(),\n                lambda x: filter(lambda y: \n                                y in string.ascii_lowercase + &quot; &quot;,\n                                x),\n                lambda x: &quot;&quot;.join(x),\n                lambda x: x.split(),\n                lambda x: &quot;_&quot;.join(x))\n</code></pre>\n<ol><li>We made it lowercase.</li><li>We filtered everything that wasn't a lowercase letter or a space.</li><li>We joined the filter back into a string.</li><li>We split the resulting string (in case we wound up with any double spaces, such as from deleting a <code>&amp;</code>.</li><li>We joined the list of strings with underscores.</li></ol><pre><code class=\"language-python\">dbReady(&quot;Account Canceled?&quot;)\n'account_canceled'\n</code></pre>\n<p>For comparison's sake, here's what that same function looks like without <code>pipe</code></p><pre><code class=\"language-python\">def dbReady(toConvert):\n    return '_'.join(\n               &quot;&quot;.join(\n                   filter(lambda x:\n                          x in string.ascii_lowercase + &quot; &quot;,\n                          (toConvert\n                           .lower()))\n                   ).split())\n</code></pre>\n<p>But wait!  There's more!</p><p>What if your API changes?  Oh no, that could break your import!</p><p>Well, if you don't care about the new columns, you could just filter them out.  Let's say we have a list of lists called <code>latestResponse</code> that came from a request to our API, with the first row as the labels.</p><pre><code class=\"language-python\">import pymysql\nfrom sqlalchemy import create_engine\nimport sqlalchemy\nimport pandas as pd\n\nlatestCols = latestResponse[0]\n\n#Change to what they'll be in the database\ndbReadies = [dbReady(x) for x in latestCols] \n\n#Grab the columns currently in the database\ncnx = create_engine('mysql+pymysql://root:cracked1@localhost/appointments', echo=False)\ndbCols = pd.io.sql.read_sql_table(&quot;appointments_tableau&quot;, \n                                  cnx).columns\n\n#Make a dataframe with what the columns would be named in a database\ndf = pd.DataFrame(latestResponse[1:], columns = dbReady)\n\n#Only select the columns that are currently in the db, and upload\ndf[dbCols].to_sql(name=&quot;my_table&quot;,\n                  con=cnx, \n                  if_exists='append')\n\n</code></pre>\n<p>But what if you DO want the new columns from now on?  But you're already in the zone, don't feel like manually searching for which columns are new, and opening a new terminal window to add the new variables?  What if you are, in a word, lazy?  And what if it's sorta important to preserve the order of the fields, and the new ones are in the middle?  </p><p>Never fear!</p><p>First, let's cook up a little function to produce an SQL <code>ALTER TABLE</code> statement (standard disclaimers apply: do NOT do this blindly, or automatically).  Oh, and for our purposes let's say these new columns all have the same type ( <code>VARCHAR(255)</code>), because if that's not the case then we have to be slightly less lazy. </p><pre><code class=\"language-python\">def alterStatement(existingCol, newCol):\n    return (f&quot;ALTER TABLE appointments_tableau &quot;\n            f&quot;ADD COLUMN {newCol} VARCHAR(255) AFTER {existingCol};&quot;)\n</code></pre>\n<p>Let's use the wonderful <code>sliding_window</code> function from <code>toolz</code> to feed us a bunch of column names. </p><p>Example from the <a href=\"https://toolz.readthedocs.io/en/latest/api.html#toolz.itertoolz.sliding_window\">official docs</a>:</p><pre><code class=\"language-python\">list(sliding_window(2, [1, 2, 3, 4]))\n[(1, 2), (2, 3), (3, 4)]\n</code></pre>\n<p>Back to the show!</p><pre><code class=\"language-python\">from toolz.itertoolz import sliding_window\n\n#Get the variables that aren't currently in the db\nnewVars = [x for x in dbReadies if x not in dbCols]\n\n#Get a list where each entry is a tuple that has every new variable, and the existing preceding one\ntuples = list(sliding_window(2, dbReadies))\nnewVarTups = [x for x in tuples if x[1] in newVars]\n</code></pre>\n<p>And, finally, let's set up our statements, and have Pandas execute them!  I know I promised I was going to start using SQLAlchemy for this kind of thing instead of unsanitized raw SQL, but I'm back on my bullshit again.</p><pre><code class=\"language-python\">for x in newVarTups:\n    pd.io.sql.execute(alterStatement(*x), cnx)\n</code></pre>\n","url":"https://hackersandslackers.com/add-db-variables-to-match-new-input-python-pandas/","uuid":"8c2a6558-0216-46bc-aaef-ef2ab08342a3","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b7dde05a2743b50f2e9edeb"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736e2","title":"Lynx Roundup, August 27th","slug":"lynx-roundup-august-27th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx58@2x.jpg","excerpt":"Agile machine learning!  Math for machine learning!  Pizza hyperspace!","custom_excerpt":"Agile machine learning!  Math for machine learning!  Pizza hyperspace!","created_at_pretty":"18 August, 2018","published_at_pretty":"27 August, 2018","updated_at_pretty":"27 August, 2018","created_at":"2018-08-18T00:39:57.000-04:00","published_at":"2018-08-27T07:00:00.000-04:00","updated_at":"2018-08-27T07:00:00.000-04:00","meta_title":"Agile machine learning!  Math for machine learning!  Pizza hyperspace! | Hackers And Slackers","meta_description":"Agile machine learning!  Math for machine learning!  Pizza hyperspace!","og_description":"Agile machine learning!  Math for machine learning!  Pizza hyperspace!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx58@2x.jpg","og_title":"Lynx Roundup, August 27th","twitter_description":"Agile machine learning!  Math for machine learning!  Pizza hyperspace!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx58@2x.jpg","twitter_title":"Lynx Roundup, August 27th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://medium.com/the-lever/running-agile-machine-learning-experiments-4d500314ab11\n\n\n\nhttps://blog.ycombinator.com/learning-math-for-machine-learning\n[https://blog.ycombinator.com/learning-math-for-machine-learning/?utm_campaign=Data_Elixir&utm_medium=email&utm_source=Data_Elixir_194]\n\n\n\nhttps://healthitanalytics.com/features/using-big-data-analytics-for-patient-safety-hospital-acquired-conditions\n\n\n\nhttps://gizmodo.com/the-algorithm-that-could-save-vulnerable-new-yorkers-fr-1826807459\n\n\n\nhttp://gduverger.com/secret-api-banks\n\n\n\nhttps://medium.com/@Nithanaroy/encoding-fixed-length-high-cardinality-non-numeric-columns-for-a-ml-algorithm-b1c910cb4e6d\n\n\n\nhttps://medium.com/topos-ai/on-dollar-slices-pizza-vectors-prosciutto-zones-and-topping-hyperspace-f163e7ebbccf","html":"<p></p><p><a href=\"https://medium.com/the-lever/running-agile-machine-learning-experiments-4d500314ab11\">https://medium.com/the-lever/running-agile-machine-learning-experiments-4d500314ab11</a></p><p></p><p><a href=\"https://blog.ycombinator.com/learning-math-for-machine-learning/?utm_campaign=Data_Elixir&amp;utm_medium=email&amp;utm_source=Data_Elixir_194\">https://blog.ycombinator.com/learning-math-for-machine-learning</a></p><p></p><p><a href=\"https://healthitanalytics.com/features/using-big-data-analytics-for-patient-safety-hospital-acquired-conditions\">https://healthitanalytics.com/features/using-big-data-analytics-for-patient-safety-hospital-acquired-conditions</a></p><p></p><p><a href=\"https://gizmodo.com/the-algorithm-that-could-save-vulnerable-new-yorkers-fr-1826807459\">https://gizmodo.com/the-algorithm-that-could-save-vulnerable-new-yorkers-fr-1826807459</a></p><p></p><p><a href=\"http://gduverger.com/secret-api-banks\">http://gduverger.com/secret-api-banks</a></p><p></p><p><a href=\"https://medium.com/@Nithanaroy/encoding-fixed-length-high-cardinality-non-numeric-columns-for-a-ml-algorithm-b1c910cb4e6d\">https://medium.com/@Nithanaroy/encoding-fixed-length-high-cardinality-non-numeric-columns-for-a-ml-algorithm-b1c910cb4e6d</a></p><p></p><p><a href=\"https://medium.com/topos-ai/on-dollar-slices-pizza-vectors-prosciutto-zones-and-topping-hyperspace-f163e7ebbccf\">https://medium.com/topos-ai/on-dollar-slices-pizza-vectors-prosciutto-zones-and-topping-hyperspace-f163e7ebbccf</a></p>","url":"https://hackersandslackers.com/lynx-roundup-august-27th/","uuid":"57b06b26-5832-470f-a087-c6a9a3762b4c","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b77a31dec281f15796ad29f"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736e1","title":"Lynx Roundup, August 26th","slug":"lynx-roundup-august-26th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx57-2@2x.jpg","excerpt":"Jupyter tips!  AutoKeras!  Data science interview questions!","custom_excerpt":"Jupyter tips!  AutoKeras!  Data science interview questions!","created_at_pretty":"18 August, 2018","published_at_pretty":"26 August, 2018","updated_at_pretty":"04 September, 2018","created_at":"2018-08-18T00:33:23.000-04:00","published_at":"2018-08-26T07:00:00.000-04:00","updated_at":"2018-09-04T01:16:14.000-04:00","meta_title":"Jupyter tips!  AutoKeras!  Data science interview questions! | Hackers And Slackers","meta_description":"Jupyter tips!  AutoKeras!  Data science interview questions!","og_description":"Jupyter tips!  AutoKeras!  Data science interview questions!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx57-2@2x.jpg","og_title":"Lynx Roundup, August 26th","twitter_description":"Jupyter tips!  AutoKeras!  Data science interview questions!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx57-2@2x.jpg","twitter_title":"Lynx Roundup, August 26th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"http://blog.godatadriven.com/write-less-terrible-notebook-code\n\n\n\nhttps://neo4j.com/blog/data-modeling-pitfalls/\n\n\n\nhttps://medium.com/imandra/scalable-deep-symbolic-reinforcement-learning-with-imandra-part-i-346ebb67433a\n\n\n\nhttps://twobithistory.org/2018/08/05/where-vim-came-from.html\n\n\n\nhttps://www.quora.com/How-do-you-judge-a-good-Data-scientist-with-just-5-questions\n\n\n\nhttps://github.com/jhfjhfj1/autokeras\n\n\n\nhttps://gizmodo.com/facebook-wanted-us-to-kill-this-investigative-tool-1826620111","html":"<p></p><p><a href=\"http://blog.godatadriven.com/write-less-terrible-notebook-code\">http://blog.godatadriven.com/write-less-terrible-notebook-code</a></p><p></p><p><a href=\"https://neo4j.com/blog/data-modeling-pitfalls/\">https://neo4j.com/blog/data-modeling-pitfalls/</a></p><p></p><p><a href=\"https://medium.com/imandra/scalable-deep-symbolic-reinforcement-learning-with-imandra-part-i-346ebb67433a\">https://medium.com/imandra/scalable-deep-symbolic-reinforcement-learning-with-imandra-part-i-346ebb67433a</a></p><p></p><p><a href=\"https://twobithistory.org/2018/08/05/where-vim-came-from.html\">https://twobithistory.org/2018/08/05/where-vim-came-from.html</a></p><p></p><p><a href=\"https://www.quora.com/How-do-you-judge-a-good-Data-scientist-with-just-5-questions\">https://www.quora.com/How-do-you-judge-a-good-Data-scientist-with-just-5-questions</a></p><p></p><p><a href=\"https://github.com/jhfjhfj1/autokeras\">https://github.com/jhfjhfj1/autokeras</a></p><p></p><p><a href=\"https://gizmodo.com/facebook-wanted-us-to-kill-this-investigative-tool-1826620111\">https://gizmodo.com/facebook-wanted-us-to-kill-this-investigative-tool-1826620111</a></p>","url":"https://hackersandslackers.com/lynx-roundup-august-26th/","uuid":"ed64dccc-2e59-4a72-bde6-2b1fdf49379b","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b77a193ec281f15796ad29c"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736e0","title":"Lynx Roundup, August 25th","slug":"lynx-roundup-august-25rg","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx56@2x.jpg","excerpt":"A nice illustration of probability!  Time series methods!  15 important algorithms!","custom_excerpt":"A nice illustration of probability!  Time series methods!  15 important algorithms!","created_at_pretty":"18 August, 2018","published_at_pretty":"25 August, 2018","updated_at_pretty":"25 August, 2018","created_at":"2018-08-18T00:29:03.000-04:00","published_at":"2018-08-25T07:00:00.000-04:00","updated_at":"2018-08-25T07:00:00.000-04:00","meta_title":"A nice illustration of probability!  Time series methods!  15 important algorithms! | Hackers And Slackers","meta_description":"A nice illustration of probability!  Time series methods!  15 important algorithms!","og_description":"A nice illustration of probability!  Time series methods!  15 important algorithms!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx56@2x.jpg","og_title":"Lynx Roundup, August 25th","twitter_description":"A nice illustration of probability!  Time series methods!  15 important algorithms!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx56@2x.jpg","twitter_title":"Lynx Roundup, August 25th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://coverclock.blogspot.com/2018/07/when-silicon-meets-road.html\n\n\n\nhttp://www.keithschwarz.com/darts-dice-coins/\n\n\n\nhttps://hackernoon.com/test-code-not-sanity-1e4c0ee51d06\n\n\n\nhttps://towardsdatascience.com/whats-the-difference-between-haar-feature-classifiers-and-convolutional-neural-networks-ce6828343aeb\n\n\n\nhttps://interestingengineering.com/15-of-the-most-important-algorithms-that-helped-define-mathematics-computing-and-physics\n\n\n\nhttps://machinelearningmastery.com/time-series-forecasting-methods-in-python-cheat-sheet/\n\n\n\nhttps://neo4j.com/blog/democratizing-data-discovery-airbnb/","html":"<p></p><p><a href=\"https://coverclock.blogspot.com/2018/07/when-silicon-meets-road.html\">https://coverclock.blogspot.com/2018/07/when-silicon-meets-road.html</a></p><p></p><p><a href=\"http://www.keithschwarz.com/darts-dice-coins/\">http://www.keithschwarz.com/darts-dice-coins/</a></p><p></p><p><a href=\"https://hackernoon.com/test-code-not-sanity-1e4c0ee51d06\">https://hackernoon.com/test-code-not-sanity-1e4c0ee51d06</a></p><p></p><p><a href=\"https://towardsdatascience.com/whats-the-difference-between-haar-feature-classifiers-and-convolutional-neural-networks-ce6828343aeb\">https://towardsdatascience.com/whats-the-difference-between-haar-feature-classifiers-and-convolutional-neural-networks-ce6828343aeb</a></p><p></p><p><a href=\"https://interestingengineering.com/15-of-the-most-important-algorithms-that-helped-define-mathematics-computing-and-physics\">https://interestingengineering.com/15-of-the-most-important-algorithms-that-helped-define-mathematics-computing-and-physics</a></p><p></p><p><a href=\"https://machinelearningmastery.com/time-series-forecasting-methods-in-python-cheat-sheet/\">https://machinelearningmastery.com/time-series-forecasting-methods-in-python-cheat-sheet/</a></p><p></p><p><a href=\"https://neo4j.com/blog/democratizing-data-discovery-airbnb/\">https://neo4j.com/blog/democratizing-data-discovery-airbnb/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-august-25rg/","uuid":"3ded3d22-ff5b-4718-bd79-18c941e9987e","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b77a08fec281f15796ad299"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736df","title":"Lynx Roundup, August 24th","slug":"lynx-roundup-august-24th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx55@2x.jpg","excerpt":"Homemade atomic clock!  Awesome diagram on architectures for app scaling!  Modeling meandering chains of thought!","custom_excerpt":"Homemade atomic clock!  Awesome diagram on architectures for app scaling!  Modeling meandering chains of thought!","created_at_pretty":"18 August, 2018","published_at_pretty":"24 August, 2018","updated_at_pretty":"24 August, 2018","created_at":"2018-08-18T00:25:42.000-04:00","published_at":"2018-08-24T07:00:00.000-04:00","updated_at":"2018-08-24T07:00:00.000-04:00","meta_title":"Homemade atomic clock!  Awesome diagram on architectures for app scaling!  Modeling meandering chains of thought! | Hackers And Slackers","meta_description":"Homemade atomic clock!  Awesome diagram on architectures for app scaling!  Modeling meandering chains of thought!","og_description":"Homemade atomic clock!  Awesome diagram on architectures for app scaling!  Modeling meandering chains of thought!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx55@2x.jpg","og_title":"Lynx Roundup, August 24th","twitter_description":"Homemade atomic clock!  Awesome diagram on architectures for app scaling!  Modeling meandering chains of thought!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx55@2x.jpg","twitter_title":"Lynx Roundup, August 24th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://coverclock.blogspot.com/2017/05/my-stratum-0-atomic-clock_9.html\n\n\n\nhttps://bytes.grubhub.com/cloud-infrastructure-at-grubhub-94db998a898a\n\n\n\nhttps://blog.dshr.org/2018/07/amazons-margins-again.html\n\n\n\nhttps://arcentry.com/blog/scaling-webapps-for-newbs-and-non-techies/\n\n\n\nhttp://bit-player.org/2018/the-mind-wanders\n\n\n\nhttp://cs.aalto.fi/en/current/news/2018-07-18/\n\n\n\nhttps://github.com/awslabs/aws-cdk","html":"<p></p><p><a href=\"https://coverclock.blogspot.com/2017/05/my-stratum-0-atomic-clock_9.html\">https://coverclock.blogspot.com/2017/05/my-stratum-0-atomic-clock_9.html</a></p><p></p><p><a href=\"https://bytes.grubhub.com/cloud-infrastructure-at-grubhub-94db998a898a\">https://bytes.grubhub.com/cloud-infrastructure-at-grubhub-94db998a898a</a></p><p></p><p><a href=\"https://blog.dshr.org/2018/07/amazons-margins-again.html\">https://blog.dshr.org/2018/07/amazons-margins-again.html</a></p><p></p><p><a href=\"https://arcentry.com/blog/scaling-webapps-for-newbs-and-non-techies/\">https://arcentry.com/blog/scaling-webapps-for-newbs-and-non-techies/</a></p><p></p><p><a href=\"http://bit-player.org/2018/the-mind-wanders\">http://bit-player.org/2018/the-mind-wanders</a></p><p></p><p><a href=\"http://cs.aalto.fi/en/current/news/2018-07-18/\">http://cs.aalto.fi/en/current/news/2018-07-18/</a></p><p></p><p><a href=\"https://github.com/awslabs/aws-cdk\">https://github.com/awslabs/aws-cdk</a></p>","url":"https://hackersandslackers.com/lynx-roundup-august-24th/","uuid":"6ed116a1-0783-4164-9e1e-15946d00b2bc","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b779fc6ec281f15796ad296"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736de","title":"Lynx Roundup, August 23rd","slug":"lynx-roundup-august-23rd","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx54@2x.jpg","excerpt":"New open hardware!  Parallelization and why it can be hard!  Benefits from China's approach to IP!","custom_excerpt":"New open hardware!  Parallelization and why it can be hard!  Benefits from China's approach to IP!","created_at_pretty":"18 August, 2018","published_at_pretty":"23 August, 2018","updated_at_pretty":"23 August, 2018","created_at":"2018-08-18T00:21:17.000-04:00","published_at":"2018-08-23T07:00:00.000-04:00","updated_at":"2018-08-23T07:00:00.000-04:00","meta_title":"New open hardware!  Parallelization and why it can be hard!  Benefits from China's approach to IP! | Hackers And Slackers","meta_description":"New open hardware!  Parallelization and why it can be hard!  Benefits from China's approach to IP!","og_description":"New open hardware!  Parallelization and why it can be hard!  Benefits from China's approach to IP!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx54@2x.jpg","og_title":"Lynx Roundup, August 23rd","twitter_description":"New open hardware!  Parallelization and why it can be hard!  Benefits from China's approach to IP!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx54@2x.jpg","twitter_title":"Lynx Roundup, August 23rd","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.fastcompany.com/90208070/7-design-lessons-from-silicon-valleys-most-important-failure\n\n\n\nhttps://spectrum.ieee.org/semiconductors/devices/riscvs-opensource-architecture-shakes-up-chip-design\n\n\n\nhttps://logicmag.io/04-letter-from-shenzhen/\n\n\n\nhttps://semiengineering.com/why-parallelization-is-so-hard/\n\n\n\nhttps://coverclock.blogspot.com/2018/07/we-are-all-relying-on-gps-all-time.html\n\n\n\nhttps://semiengineering.com/machine-learnings-limits-3/\n\n\n\nhttps://cloudplatform.googleblog.com/2018/08/repairing-network-hardware-at-scale-with-sre-principles.html","html":"<p></p><p><a href=\"https://www.fastcompany.com/90208070/7-design-lessons-from-silicon-valleys-most-important-failure\">https://www.fastcompany.com/90208070/7-design-lessons-from-silicon-valleys-most-important-failure</a></p><p></p><p><a href=\"https://spectrum.ieee.org/semiconductors/devices/riscvs-opensource-architecture-shakes-up-chip-design\">https://spectrum.ieee.org/semiconductors/devices/riscvs-opensource-architecture-shakes-up-chip-design</a></p><p></p><p><a href=\"https://logicmag.io/04-letter-from-shenzhen/\">https://logicmag.io/04-letter-from-shenzhen/</a></p><p></p><p><a href=\"https://semiengineering.com/why-parallelization-is-so-hard/\">https://semiengineering.com/why-parallelization-is-so-hard/</a></p><p></p><p><a href=\"https://coverclock.blogspot.com/2018/07/we-are-all-relying-on-gps-all-time.html\">https://coverclock.blogspot.com/2018/07/we-are-all-relying-on-gps-all-time.html</a></p><p></p><p><a href=\"https://semiengineering.com/machine-learnings-limits-3/\">https://semiengineering.com/machine-learnings-limits-3/</a></p><p></p><p><a href=\"https://cloudplatform.googleblog.com/2018/08/repairing-network-hardware-at-scale-with-sre-principles.html\">https://cloudplatform.googleblog.com/2018/08/repairing-network-hardware-at-scale-with-sre-principles.html</a></p>","url":"https://hackersandslackers.com/lynx-roundup-august-23rd/","uuid":"913b6a55-d6ed-4e77-b08a-aae9bd768ee7","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b779ebdec281f15796ad293"}}]}},"pageContext":{"pageNumber":18,"humanPageNumber":19,"skip":216,"limit":12,"numberOfPages":33,"previousPagePath":"/page/18","nextPagePath":"/page/20"}}