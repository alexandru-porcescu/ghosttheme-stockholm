{"data":{"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673723","title":"Lynx Roundup, October 23rd","slug":"lynx-roundup-october-23rd","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/120@2x.jpg","excerpt":"SQL Formatter!  Automation!  Philosophy & coding!","custom_excerpt":"SQL Formatter!  Automation!  Philosophy & coding!","created_at_pretty":"16 October, 2018","published_at_pretty":"23 October, 2018","updated_at_pretty":"23 October, 2018","created_at":"2018-10-16T01:42:17.000-04:00","published_at":"2018-10-23T07:00:00.000-04:00","updated_at":"2018-10-23T07:00:00.000-04:00","meta_title":"SQL Formatter!  Automation!  Philosophy & coding! | Hackers And Slackers","meta_description":"SQL Formatter!  Automation!  Philosophy & coding!","og_description":"SQL Formatter!  Automation!  Philosophy & coding!","og_image":"https://hackersandslackers.com/content/images/lynx/120@2x.jpg","og_title":"Lynx Roundup, October 23rd","twitter_description":"SQL Formatter!  Automation!  Philosophy & coding!","twitter_image":"https://hackersandslackers.com/content/images/lynx/120@2x.jpg","twitter_title":"Lynx Roundup, October 23rd","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://insights.dice.com/2018/09/26/tech-employees-forced-arbitration-end-good/\n\nhttps://www.cockroachlabs.com/blog/sql-fmt-online-sql-formatter/\n\nhttps://kotaku.com/telltale-employees-left-stunned-by-company-closure-no-1829272139\n\nhttps://www.gameworkersunite.org/blog/statement-on-the-telltale-layoffs\n\nhttps://logicmag.io/05-how-to-kill-your-tech-industry/\n\nhttps://www.apnews.com/78c17567c24b48c3b67be095ae0db99c/Report:-Machines-to-handle-over-half-workplace-tasks-by-2025\n\nhttp://250bpm.com/blog:133","html":"<p></p><p><a href=\"https://insights.dice.com/2018/09/26/tech-employees-forced-arbitration-end-good/\">https://insights.dice.com/2018/09/26/tech-employees-forced-arbitration-end-good/</a></p><p><a href=\"https://www.cockroachlabs.com/blog/sql-fmt-online-sql-formatter/\">https://www.cockroachlabs.com/blog/sql-fmt-online-sql-formatter/</a></p><p><a href=\"https://kotaku.com/telltale-employees-left-stunned-by-company-closure-no-1829272139\">https://kotaku.com/telltale-employees-left-stunned-by-company-closure-no-1829272139</a></p><p><a href=\"https://www.gameworkersunite.org/blog/statement-on-the-telltale-layoffs\">https://www.gameworkersunite.org/blog/statement-on-the-telltale-layoffs</a></p><p><a href=\"https://logicmag.io/05-how-to-kill-your-tech-industry/\">https://logicmag.io/05-how-to-kill-your-tech-industry/</a></p><p><a href=\"https://www.apnews.com/78c17567c24b48c3b67be095ae0db99c/Report:-Machines-to-handle-over-half-workplace-tasks-by-2025\">https://www.apnews.com/78c17567c24b48c3b67be095ae0db99c/Report:-Machines-to-handle-over-half-workplace-tasks-by-2025</a></p><p><a href=\"http://250bpm.com/blog:133\">http://250bpm.com/blog:133</a></p>","url":"https://hackersandslackers.com/lynx-roundup-october-23rd/","uuid":"8d8f7fd4-357b-4113-8e52-3b096807de5b","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5bc57a39c0b1ac3b7ed7ac40"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673722","title":"Lynx Roundup, October 22nd","slug":"lynx-roundup-october-22nd","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/119@2x.jpg","excerpt":"Pandas multi-indices!  Using Keras to see if watermelons are ripe!  Sociophysics & Econophysics!","custom_excerpt":"Pandas multi-indices!  Using Keras to see if watermelons are ripe!  Sociophysics & Econophysics!","created_at_pretty":"16 October, 2018","published_at_pretty":"22 October, 2018","updated_at_pretty":"22 October, 2018","created_at":"2018-10-16T01:39:45.000-04:00","published_at":"2018-10-22T07:00:00.000-04:00","updated_at":"2018-10-22T07:00:00.000-04:00","meta_title":"Pandas multi-indices!  Using Keras to see if watermelons are ripe!  Sociophysics & Econophysics! | Hackers And Slackers","meta_description":"Pandas multi-indices!  Using Keras to see if watermelons are ripe!  Sociophysics & Econophysics!","og_description":"Pandas multi-indices!  Using Keras to see if watermelons are ripe!  Sociophysics & Econophysics!","og_image":"https://hackersandslackers.com/content/images/lynx/119@2x.jpg","og_title":"Lynx Roundup, October 22nd","twitter_description":"Pandas multi-indices!  Using Keras to see if watermelons are ripe!  Sociophysics & Econophysics!","twitter_image":"https://hackersandslackers.com/content/images/lynx/119@2x.jpg","twitter_title":"Lynx Roundup, October 22nd","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.datacamp.com/community/tutorials/pandas-multi-index\n\nhttps://www.stitcher.com/podcast/current-affairs/e/56674874\n\nhttp://tech.marksblogg.com/working-with-data-feeds.html\n\nhttps://medium.com/@alexmaisiura/how-to-determine-the-ripeness-of-watermelon-with-keras-a-complete-cycle-from-the-idea-to-the-d2c47856b55c\n\nhttps://daily.jstor.org/sociophysics-and-econophysics-the-future-of-social-science/\n\nhttps://blog.jupyter.org/ipython-7-0-async-repl-a35ce050f7f7\n\nhttps://twitter.com/CoralMDavenport/status/1045381240709419008?s=09","html":"<p></p><p><a href=\"https://www.datacamp.com/community/tutorials/pandas-multi-index\">https://www.datacamp.com/community/tutorials/pandas-multi-index</a></p><p><a href=\"https://www.stitcher.com/podcast/current-affairs/e/56674874\">https://www.stitcher.com/podcast/current-affairs/e/56674874</a></p><p><a href=\"http://tech.marksblogg.com/working-with-data-feeds.html\">http://tech.marksblogg.com/working-with-data-feeds.html</a></p><p><a href=\"https://medium.com/@alexmaisiura/how-to-determine-the-ripeness-of-watermelon-with-keras-a-complete-cycle-from-the-idea-to-the-d2c47856b55c\">https://medium.com/@alexmaisiura/how-to-determine-the-ripeness-of-watermelon-with-keras-a-complete-cycle-from-the-idea-to-the-d2c47856b55c</a></p><p><a href=\"https://daily.jstor.org/sociophysics-and-econophysics-the-future-of-social-science/\">https://daily.jstor.org/sociophysics-and-econophysics-the-future-of-social-science/</a></p><p><a href=\"https://blog.jupyter.org/ipython-7-0-async-repl-a35ce050f7f7\">https://blog.jupyter.org/ipython-7-0-async-repl-a35ce050f7f7</a></p><p><a href=\"https://twitter.com/CoralMDavenport/status/1045381240709419008?s=09\">https://twitter.com/CoralMDavenport/status/1045381240709419008?s=09</a></p>","url":"https://hackersandslackers.com/lynx-roundup-october-22nd/","uuid":"62b65f9f-7a1b-4c27-9b8a-8670371941d0","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5bc579a1c0b1ac3b7ed7ac3b"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673721","title":"Lynx Roundup, October 21st","slug":"lynx-roundup-october-21st","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/117@2x.jpg","excerpt":"OpenCV and color spaces!  Causal inference & machine learning!  Deep Learning and Electronic Health Records!","custom_excerpt":"OpenCV and color spaces!  Causal inference & machine learning!  Deep Learning and Electronic Health Records!","created_at_pretty":"16 October, 2018","published_at_pretty":"21 October, 2018","updated_at_pretty":"21 October, 2018","created_at":"2018-10-16T01:19:23.000-04:00","published_at":"2018-10-21T07:00:00.000-04:00","updated_at":"2018-10-21T07:00:00.000-04:00","meta_title":"OpenCV and color spaces!  Causal inference & machine learning!  Deep Learning and Electronic Health Records! | Hackers And Slackers","meta_description":"OpenCV and color spaces!  Causal inference & machine learning!  Deep Learning and Electronic Health Records!","og_description":"OpenCV and color spaces!  Causal inference & machine learning!  Deep Learning and Electronic Health Records!","og_image":"https://hackersandslackers.com/content/images/lynx/117@2x.jpg","og_title":"Lynx Roundup, October 21st","twitter_description":"OpenCV and color spaces!  Causal inference & machine learning!  Deep Learning and Electronic Health Records!","twitter_image":"https://hackersandslackers.com/content/images/lynx/117@2x.jpg","twitter_title":"Lynx Roundup, October 21st","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.theladders.com/career-advice/if-you-love-brainteasers-during-job-interviews-youre-likely-a-sadist\n\nhttps://github.com/cgarciae/pypeln/blob/master/README.md\n\nhttps://goku.me/blog/EHR\n\nhttps://arxiv.org/abs/1407.7502\n\nhttps://realpython.com/python-opencv-color-spaces/\n\nhttps://www.thisisinsider.com/google-alphabet-jigsaw-terrorists-trolls-2018-8\n\nhttps://blog.acolyer.org/2018/09/17/the-seven-tools-of-causal-inference-with-reflections-on-machine-learning/","html":"<p></p><p><a href=\"https://www.theladders.com/career-advice/if-you-love-brainteasers-during-job-interviews-youre-likely-a-sadist\">https://www.theladders.com/career-advice/if-you-love-brainteasers-during-job-interviews-youre-likely-a-sadist</a></p><p><a href=\"https://github.com/cgarciae/pypeln/blob/master/README.md\">https://github.com/cgarciae/pypeln/blob/master/README.md</a></p><p><a href=\"https://goku.me/blog/EHR\">https://goku.me/blog/EHR</a></p><p><a href=\"https://arxiv.org/abs/1407.7502\">https://arxiv.org/abs/1407.7502</a></p><p><a href=\"https://realpython.com/python-opencv-color-spaces/\">https://realpython.com/python-opencv-color-spaces/</a></p><p><a href=\"https://www.thisisinsider.com/google-alphabet-jigsaw-terrorists-trolls-2018-8\">https://www.thisisinsider.com/google-alphabet-jigsaw-terrorists-trolls-2018-8</a></p><p><a href=\"https://blog.acolyer.org/2018/09/17/the-seven-tools-of-causal-inference-with-reflections-on-machine-learning/\">https://blog.acolyer.org/2018/09/17/the-seven-tools-of-causal-inference-with-reflections-on-machine-learning/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-october-21st/","uuid":"31e64f21-87b4-4a15-8154-c2ceadf7e5bf","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5bc574dbc0b1ac3b7ed7ac35"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673720","title":"Lynx Roundup, October 20th","slug":"lynx-roundup-october-20th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/116@2x.jpg","excerpt":"Using smell to enhance AI!  Graph databases and NLP!  Manipulating data in Pandas!","custom_excerpt":"Using smell to enhance AI!  Graph databases and NLP!  Manipulating data in Pandas!","created_at_pretty":"16 October, 2018","published_at_pretty":"21 October, 2018","updated_at_pretty":"21 October, 2018","created_at":"2018-10-16T01:17:31.000-04:00","published_at":"2018-10-21T07:00:00.000-04:00","updated_at":"2018-10-21T07:00:00.000-04:00","meta_title":"Lynx Roundup, October 20th | Hackers and Slackers","meta_description":"Using smell to enhance AI!  Graph databases and NLP!  Manipulating data in Pandas!","og_description":"Using smell to enhance AI!  Graph databases and NLP!  Manipulating data in Pandas!","og_image":"https://hackersandslackers.com/content/images/lynx/116@2x.jpg","og_title":"Lynx Roundup, October 20th | Hackers and Slackers","twitter_description":"Using smell to enhance AI!  Graph databases and NLP!  Manipulating data in Pandas!","twitter_image":"https://hackersandslackers.com/content/images/lynx/116@2x.jpg","twitter_title":"Lynx Roundup, October 20th | Hackers and Slackers","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://twitter.com/mipsytipsy/status/1042817542648082432\n\nhttps://www.independent.co.uk/life-style/gadgets-and-tech/news/amazon-workers-immigration-jeff-bezos-ibm-nazi-protest-a8411601.html\n\nhttps://journals.plos.org/plosone/article?id=10.1371/journal.pone.0201879\n\nhttps://twitter.com/martinkl/status/1043092844196651008\n\nhttps://www.wired.com/story/artificial-intelligence-has-a-strange-new-muse-our-sense-of-smell\n\nhttps://neo4j.com/blog/bring-order-to-chaos-graph-based-journey-textual-data-to-wisdom/\n\nhttps://medium.com/dunder-data/selecting-subsets-of-data-in-pandas-39e811c81a0c","html":"<p></p><p><a href=\"https://twitter.com/mipsytipsy/status/1042817542648082432\">https://twitter.com/mipsytipsy/status/1042817542648082432</a></p><p><a href=\"https://www.independent.co.uk/life-style/gadgets-and-tech/news/amazon-workers-immigration-jeff-bezos-ibm-nazi-protest-a8411601.html\">https://www.independent.co.uk/life-style/gadgets-and-tech/news/amazon-workers-immigration-jeff-bezos-ibm-nazi-protest-a8411601.html</a></p><p><a href=\"https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0201879\">https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0201879</a></p><p><a href=\"https://twitter.com/martinkl/status/1043092844196651008\">https://twitter.com/martinkl/status/1043092844196651008</a></p><p><a href=\"https://www.wired.com/story/artificial-intelligence-has-a-strange-new-muse-our-sense-of-smell\">https://www.wired.com/story/artificial-intelligence-has-a-strange-new-muse-our-sense-of-smell</a></p><p><a href=\"https://neo4j.com/blog/bring-order-to-chaos-graph-based-journey-textual-data-to-wisdom/\">https://neo4j.com/blog/bring-order-to-chaos-graph-based-journey-textual-data-to-wisdom/</a></p><p><a href=\"https://medium.com/dunder-data/selecting-subsets-of-data-in-pandas-39e811c81a0c\">https://medium.com/dunder-data/selecting-subsets-of-data-in-pandas-39e811c81a0c</a></p>","url":"https://hackersandslackers.com/lynx-roundup-october-20th/","uuid":"a442abd7-0941-4024-9404-1dd63b8bf42b","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5bc5746bc0b1ac3b7ed7ac2f"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867371f","title":"Lynx Roundup, October 19th","slug":"lynx-roundup-october-19th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/04/100-3.jpg","excerpt":"Bothering spiders!  Machine Learning project tips!  Blending theory & empiricism!","custom_excerpt":"Bothering spiders!  Machine Learning project tips!  Blending theory & empiricism!","created_at_pretty":"16 October, 2018","published_at_pretty":"19 October, 2018","updated_at_pretty":"10 April, 2019","created_at":"2018-10-16T01:15:30.000-04:00","published_at":"2018-10-19T07:00:00.000-04:00","updated_at":"2019-04-10T10:44:11.000-04:00","meta_title":"Lynx Roundup, October 19th | Hackers and Slackers","meta_description":"Bothering spiders!  Machine Learning project tips!  Blending theory & empiricism!","og_description":"Bothering spiders!  Machine Learning project tips!  Blending theory & empiricism!","og_image":"https://hackersandslackers.com/content/images/2019/04/100-5.jpg","og_title":"Lynx Roundup, October 19th | Hackers and Slackers","twitter_description":"Bothering spiders!  Machine Learning project tips!  Blending theory & empiricism!","twitter_image":"https://hackersandslackers.com/content/images/2019/04/100-4.jpg","twitter_title":"Lynx Roundup, October 19th | Hackers and Slackers","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.santafe.edu/news-center/news/theory-meet-empiry\n\nhttps://www.sfreporter.com/news/2018/09/19/algorithms-and-ethics/\n\nhttps://santafe.edu/news-center/news/social-animals-have-tipping-points-too\n\nhttps://www.toptal.com/clojure/clojurescript-tutorial-react-front-end\n\nhttps://www.jeremyjordan.me/ml-projects-guide/\n\nhttps://dataset.readthedocs.io/en/latest/\n\nhttps://twitter.com/XXXX_G0LD/status/1042941890549579776","html":"<p></p><p><a href=\"https://www.santafe.edu/news-center/news/theory-meet-empiry\">https://www.santafe.edu/news-center/news/theory-meet-empiry</a></p><p><a href=\"https://www.sfreporter.com/news/2018/09/19/algorithms-and-ethics/\">https://www.sfreporter.com/news/2018/09/19/algorithms-and-ethics/</a></p><p><a href=\"https://santafe.edu/news-center/news/social-animals-have-tipping-points-too\">https://santafe.edu/news-center/news/social-animals-have-tipping-points-too</a></p><p><a href=\"https://www.toptal.com/clojure/clojurescript-tutorial-react-front-end\">https://www.toptal.com/clojure/clojurescript-tutorial-react-front-end</a></p><p><a href=\"https://www.jeremyjordan.me/ml-projects-guide/\">https://www.jeremyjordan.me/ml-projects-guide/</a></p><p><a href=\"https://dataset.readthedocs.io/en/latest/\">https://dataset.readthedocs.io/en/latest/</a></p><p><a href=\"https://twitter.com/XXXX_G0LD/status/1042941890549579776\">https://twitter.com/XXXX_G0LD/status/1042941890549579776</a></p>","url":"https://hackersandslackers.com/lynx-roundup-october-19th/","uuid":"bdda497c-a04e-455f-8d6b-e32c708fa1a1","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5bc573f2c0b1ac3b7ed7ac2a"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867372d","title":"Working With Google Cloud Functions","slug":"creating-a-python-google-cloud-function","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/10/googlefunc-1@2x.jpg","excerpt":"GCP scores a victory by trivializing serverless functions.","custom_excerpt":"GCP scores a victory by trivializing serverless functions.","created_at_pretty":"18 October, 2018","published_at_pretty":"19 October, 2018","updated_at_pretty":"14 April, 2019","created_at":"2018-10-18T19:44:02.000-04:00","published_at":"2018-10-18T22:33:07.000-04:00","updated_at":"2019-04-14T07:24:50.000-04:00","meta_title":"Creating Google Cloud Functions Running Python | Hackers and Slackers","meta_description":"Create serverless functions using Google Cloud's Cloud Functions and Source Repositories. Set up a CRON job to run your function with Cloud Scheduler.","og_description":"Create serverless functions using Google Cloud's Cloud Functions and Source Repositories. ","og_image":"https://hackersandslackers.com/content/images/2018/10/googlefunc-1@2x.jpg","og_title":"Creating Google Cloud Functions Running Python | Hackers and Slackers","twitter_description":"Create serverless functions using Google Cloud's Cloud Functions and Source Repositories. ","twitter_image":"https://hackersandslackers.com/content/images/2018/10/googlefunc-1@2x.jpg","twitter_title":"Creating Google Cloud Functions Running Python | Hackers and Slackers","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Google Cloud","slug":"googlecloud","description":"Evaluating Google Cloud Platform’s offerings. Get introduced with tutorials, see our vendor comparisons, and endure biased opinions on GCP as a whole.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/googleseries2.jpg","meta_description":"Evaluating Google Cloud Platform’s offerings. Get introduced with tutorials, see our vendor comparisons, and endure biased opinions on GCP as a whole.","meta_title":"The Rise of Google Cloud | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Google Cloud","slug":"googlecloud","description":"Evaluating Google Cloud Platform’s offerings. Get introduced with tutorials, see our vendor comparisons, and endure biased opinions on GCP as a whole.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/googleseries2.jpg","meta_description":"Evaluating Google Cloud Platform’s offerings. Get introduced with tutorials, see our vendor comparisons, and endure biased opinions on GCP as a whole.","meta_title":"The Rise of Google Cloud | Hackers and Slackers","visibility":"public"},{"name":"Architecture","slug":"architecture","description":"Advancements in software architecture, serverless and beyond. Examples include equivalents to Lambda functions, Docker containers, Google Cloud functions,  Kubernetes, Heroku, etc.","feature_image":null,"meta_description":"Advancements in software architecture, serverless and beyond. Examples include equivalents to cloud functions, Docker containers, Kubernetes, Heroku, etc.","meta_title":"Software Architecture | Hackers and Slackers","visibility":"public"},{"name":"Data Engineering","slug":"dataengineering","description":"The systematic collection and transformation of data via the creation of tools and pipelines.","feature_image":null,"meta_description":null,"meta_title":"Data Engineering | Hackers and Slackers","visibility":"public"},{"name":"#The Rise of Google Cloud","slug":"the-rise-of-google-cloud","description":"Build robust serverless architecture on Google Cloud Platform. Learn through tutorials, make comparisons, and hear opinions on GCP as a whole.","feature_image":"https://res-5.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/ADF7E324-9EAD-4F15-8670-AF205E6804EA.png","meta_description":"Build robust serverless architecture on Google Cloud Platform. Learn through tutorials, make comparisons, and hear opinions on GCP as a whole.","meta_title":"The Rise of Google Cloud","visibility":"internal"}],"plaintext":"The more I explore Google Cloud's endless catalog of cloud services, the more I\nlike Google Cloud. This is why before moving forward, I'd like to be transparent\nthat this blog has become little more than thinly veiled Google propaganda,\nwhere I will henceforth bombard you with persuasive and subtle messaging to sell\nyour soul to Google. Let's be honest; they've probably simulated it anyway.\n\nIt should be safe to assume that you're familiar with AWS Lambda Functions\n[https://hackersandslackers.com/creating-endpoints-with-lambda/]  by now, which\nhave served as the backbone of what we refer to as \"serverless.\" These cloud\ncode snippets have restructured entire technology departments, and are partially\nto blame for why almost nobody knows enough basic Linux to configure a web\nserver or build anything without a vendor. Google Cloud Functions don't yet\nserve all the use cases that Lambda functions cover, but for the cases they do\ncover, they seem to be taking the lead.\n\nLambdas vs Cloud Functions\nFirst off, let's talk about a big one: price. AWS charges based on Lambda usage,\nwhereas Google Cloud Functions are free. The only exception to this is when you\nbreak 2 million invocations/month, at which point you'll be hemorrhaging as\nghastly 40 cents per additional million. That's ridiculous. I think we've just\ndiscovered Google Cloud's lead generation strategy.\n\nWhat about in terms of workflow? AWS holds an architecture philosophy of\nchaining services together, into what inevitably becomes a web of self-contained\nbillable items on your invoice. An excellent illustration of this is a  post on \ncommon AWS patterns\n[https://www.jeremydaly.com/serverless-microservice-patterns-for-aws/]  which\nprovides a decent visual of this complexity, while also revealing how much\npeople love this kind of stuff, as though SaaS is the new Legos. To interact\nwith a Lambda function in AWS via HTTP requests, you need to set up an API\nGateway in front, which is arguably a feat more convoluted and complicated than\ncoding. Pair this with an inevitable user permission struggle to get the right\nLambda roles set up, and you quickly have yourself a nightmare- especially  if\nyou're trying to get a single function live. Eventually, you’ll get to write\nsome code or upload a horrendous zip file like some neanderthal (friendly\nreminder: I am entirely biased).\n\nCloud Functions do have their drawbacks in this comparison. Firstly, we cannot\nbuild APIs with Cloud Functions- in fact, without Firebase, we can't even use\nvanity URLs. \n\nAnother huge drawback is Cloud Functions cannot communicate with Google's\nrelational database offering, Cloud SQL. This is big, and what's worse, it feels\nlike an oversight. There are no technical constraints behind this, other than\nGoogle hasn't created an interface to whitelist anything other than IP addresses\nfor Cloud SQL instances.\n\nLastly, we cannot create a fully-fledged API available to be sold or\ndistributed. The is currently no Google Cloud API Gateway equivalent.\n\nDeploying a Cloud Function\nBy the end of this tutorial we'll have utilized the following Google Cloud\nservices/tools:\n\n * A new Google Cloud Function\n * A Google  Source Repository to sync to our Github repo and auto-deploy\n   changes.\n * A CRON job to run our function on a schedule, via Google Cloud Scheduler.\n * The gcloud  CLI to enable us to work locally.\n\nYou'll notice we lack any mentions of API endpoints, methods, stages, or\nanything related to handling web requests. It should not be understated that \nCloud Functions are preconfigured with an endpoint, and all nonsense regarding\nwhether endpoints accept GET or POST or AUTH or OPTIONs is missing entirely.\nThese things are instead handled in the  logic of the function itself, and\nbecause Google Cloud functions running Python are preconfigured with Flask, all\nof that stuff is really trivially easy.  That's right, we've got Flask, Python, \n and GCP  all in a single post. Typing these words feels like eating cake while\nDwyane The Rock Johnson reads me bedtime stories and caresses me as I fall\nasleep. It's great.\n\nIn the Cloud console, go ahead and create a new function. Our function will take\nthe form of an HTTP endpoint:\n\nSingle-page setup. Easy. * Memory Allocated lets us allocate more than the default 256MB to our\n   function. Remember that Cloud functions are free: choose accordingly.\n * Trigger  specifies what will have access to this function. By selecting HTTP,\n   we will immediately receive a URL.\n * Source code  gives us a few options to deploy our code, with cloud source\n   repository  being by far the easiest solution (more on that in a bit).\n * Runtime  allows you to select NodeJS by accident.\n * Function to Execute  needs the name of our entry point function, which is to\n   be found in main.py  or main.js  depending on which language you’ve selected.\n\nIf you're familiar with Lambda functions, the choices of an inline code editor\nor a zip file upload should come as no surprise. Since you're already familiar,\nI don't need to tell you why these methods suck  for any sane workflow. Luckily,\nwe have a better option: syncing our Github repo to a Google Source Repository.\n\nGoogle Source Repositories\nGoogle Source Repositories are repos that function just like Github or Bitbucket\nrepos. They're especially useful for syncing code changes from a Github repo,\nand setting up automatic deployments on commit.\n\nThe Google Source Repositories HomeSetting up this sync is super easy. Create a\nnew repository, specify that we're connecting an external Github repo, and we'll\nbe able to select any repo in our account via the GUI:\n\nSyncing a Github RepoNow when we go back to our editing our function, setting\nthe Source code  field to the name of this new repository will automatically\ndeploy the function whenever a change is committed. With this method, we have\neffectively zero changes to our normal workflow.\n\nCommit to Google Source Repositories Directly\nIf you don't want to sync a Github repo, no problem. We can create a repo\nlocally using the gcloud CLI:\n\n$ gcloud source repos create real-repo\n$ cd myproject/\n$ git init\n--------------------------------------------------------\n(take a moment to write or save some actual code here)\n--------------------------------------------------------\n$ git add --all\n$ git remote add google https://source.developers.google.com/p/hackers/r/real-repo\n$ git commit -m 'cheesey init message'\n$ git push --all google\n\n\nNow make that puppy go live with gcloud functions deploy totally-dope-function,\nwhere totally-dope-function  is the name of your function, as it should be.\n\nWith our function set up and method in place for deploying code, we can now see\nhow our Cloud Function is doing.\n\nViewing Error Logs\nBecause we have a real endpoint to work with, we don't need to waste any time\ncreating dumb unit tests where we send fake JSON to our function (real talk\nthough, we should always write unit tests).\n\nThe Cloud Function error log screen does a decent job of providing us with a GUI\nto see how our deployed function is running, and where things have gone wrong:\n\nOrange Exclamation Marks Denote ErrorsFiring Our Function on a Schedule\nLet's say our function is a job we're looking to run daily, or perhaps hourly.\nGoogle Cloud Scheduler is a super easy way to trigger functions via CRON.\n\nHow is this free again?The easiest way to handle this is by creating our\nfunction as an HTTP endpoint back when we started. A Cloud Scheduler  job can\nhit this endpoint at any time interval we want - just make sure you wrote your\nendpoint to handle GET requests.\n\nCloud Functions in Short\nGCP seems to have been taking notes on the sidelines on how to improve this\nprocess by removing red-tape around service setup or policy configuration. AWS\nand GCP are tackling opposites approaches; AWS allows you to build a Robust API\ncomplete with staging and testing with the intent that some of these APIs can\neven be sold as standalone products to consumers. GCP takes the opposite\napproach: cloud functions are services intended for developers to develop. That\nshould probably cover the vast majority of use cases anyway.","html":"<p>The more I explore Google Cloud's endless catalog of cloud services, the more I like Google Cloud. This is why before moving forward, I'd like to be transparent that this blog has become little more than thinly veiled Google propaganda, where I will henceforth bombard you with persuasive and subtle messaging to sell your soul to Google. Let's be honest; they've probably simulated it anyway.</p><p>It should be safe to assume that you're familiar with AWS <a href=\"https://hackersandslackers.com/creating-endpoints-with-lambda/\">Lambda Functions</a> by now, which have served as the backbone of what we refer to as \"serverless.\" These cloud code snippets have restructured entire technology departments, and are partially to blame for why almost nobody knows enough basic Linux to configure a web server or build anything without a vendor. Google Cloud Functions don't yet serve all the use cases that Lambda functions cover, but for the cases they do cover, they seem to be taking the lead.</p><h2 id=\"lambdas-vs-cloud-functions\">Lambdas vs Cloud Functions</h2><p>First off, let's talk about a big one: price. AWS charges based on Lambda usage, whereas Google Cloud Functions are <strong>free</strong>. The only exception to this is when you break 2 million invocations/month, at which point you'll be hemorrhaging as ghastly <strong>40 cents per additional million</strong>. That's ridiculous. I think we've just discovered Google Cloud's lead generation strategy.</p><p>What about in terms of workflow? AWS holds an architecture philosophy of chaining services together, into what inevitably becomes a web of self-contained billable items on your invoice. An excellent illustration of this is a  post on <a href=\"https://www.jeremydaly.com/serverless-microservice-patterns-for-aws/\">common AWS patterns</a> which provides a decent visual of this complexity, while also revealing how much people love this kind of stuff, as though SaaS is the new Legos. To interact with a Lambda function in AWS via HTTP requests, you need to set up an API Gateway in front, which is arguably a feat more convoluted and complicated than coding. Pair this with an inevitable user permission struggle to get the right Lambda roles set up, and you quickly have yourself a nightmare- <em>especially</em> if you're trying to get a single function live. Eventually, you’ll get to write some code or upload a horrendous zip file like some neanderthal (friendly reminder: I am entirely biased).</p><p>Cloud Functions do have their drawbacks in this comparison. Firstly, we cannot build APIs with Cloud Functions- in fact, without Firebase, we can't even use vanity URLs. </p><p>Another huge drawback is Cloud Functions cannot communicate with Google's relational database offering, Cloud SQL. This is big, and what's worse, it feels like an oversight. There are no technical constraints behind this, other than Google hasn't created an interface to whitelist anything other than IP addresses for Cloud SQL instances.</p><p>Lastly, we cannot create a fully-fledged API available to be sold or distributed. The is currently no Google Cloud API Gateway equivalent.</p><h2 id=\"deploying-a-cloud-function\">Deploying a Cloud Function</h2><p>By the end of this tutorial we'll have utilized the following Google Cloud services/tools:</p><ul><li>A new <strong>Google Cloud Function</strong></li><li>A <strong>Google</strong> <strong>Source Repository </strong>to sync to our Github repo and auto-deploy changes.</li><li>A CRON job to run our function on a schedule, via <strong>Google Cloud Scheduler</strong>.</li><li>The <strong>gcloud</strong> CLI to enable us to work locally.</li></ul><p>You'll notice we lack any mentions of API endpoints, methods, stages, or anything related to handling web requests. It should not be understated that <em>Cloud Functions are preconfigured with an endpoint</em>, and all nonsense regarding whether endpoints accept GET or POST or AUTH or OPTIONs is missing entirely. These things are instead handled in the  logic of the function itself, and because Google Cloud functions running Python are preconfigured with <strong>Flask, </strong>all of that stuff is <em>really trivially easy.</em> That's right, we've got <em>Flask</em>, <em>Python</em>,<em> </em>and <em>GCP</em> all in a single post. Typing these words feels like eating cake while Dwyane The Rock Johnson reads me bedtime stories and caresses me as I fall asleep. It's great.</p><p>In the Cloud console, go ahead and create a new function. Our function will take the form of an HTTP endpoint:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://res-5.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/func.gif\" class=\"kg-image\"><figcaption>Single-page setup. Easy.</figcaption></figure><!--kg-card-end: image--><ul><li><strong>Memory Allocated </strong>lets us allocate more than the default 256MB to our function. Remember that Cloud functions are free: choose accordingly.</li><li><strong>Trigger</strong> specifies what will have access to this function. By selecting HTTP, we will immediately receive a URL.</li><li><strong>Source code</strong> gives us a few options to deploy our code, with <em>cloud source repository</em> being by far the easiest solution (more on that in a bit).</li><li><strong>Runtime</strong> allows you to select NodeJS by accident.</li><li><strong>Function to Execute</strong> needs the name of our entry point function, which is to be found in <code>main.py</code> or <code>main.js</code> depending on which language you’ve selected.</li></ul><p>If you're familiar with Lambda functions, the choices of an inline code editor or a zip file upload should come as no surprise. Since you're already familiar, I don't need to tell you why these methods <em>suck</em> for any sane workflow. Luckily, we have a better option: syncing our Github repo to a Google Source Repository.</p><h2 id=\"google-source-repositories\">Google Source Repositories</h2><p>Google Source Repositories are repos that function just like Github or Bitbucket repos. They're especially useful for syncing code changes from a Github repo, and setting up automatic deployments on commit.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://hackersandslackers.com/content/images/2019/04/google-source-repo.png\" class=\"kg-image\"><figcaption>The Google Source Repositories Home</figcaption></figure><!--kg-card-end: image--><p>Setting up this sync is super easy. Create a new repository, specify that we're connecting an external Github repo, and we'll be able to select any repo in our account via the GUI:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://hackersandslackers.com/content/images/2019/04/google-source-github-sync.gif\" class=\"kg-image\"><figcaption>Syncing a Github Repo</figcaption></figure><!--kg-card-end: image--><p>Now when we go back to our editing our function, setting the <strong>Source code</strong> field to the name of this new repository will automatically deploy the function whenever a change is committed. With this method, we have effectively zero changes to our normal workflow.</p><h3 id=\"commit-to-google-source-repositories-directly\">Commit to Google Source Repositories Directly</h3><p>If you don't want to sync a Github repo, no problem. We can create a repo locally using the <strong>gcloud CLI</strong>:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ gcloud source repos create real-repo\n$ cd myproject/\n$ git init\n--------------------------------------------------------\n(take a moment to write or save some actual code here)\n--------------------------------------------------------\n$ git add --all\n$ git remote add google https://source.developers.google.com/p/hackers/r/real-repo\n$ git commit -m 'cheesey init message'\n$ git push --all google\n</code></pre>\n<!--kg-card-end: markdown--><p>Now make that puppy go live with <code>gcloud functions deploy totally-dope-function</code>, where <em><strong>totally-dope-function</strong> </em>is the name of your function, as it should be.</p><p>With our function set up and method in place for deploying code, we can now see how our Cloud Function is doing.</p><h2 id=\"viewing-error-logs\">Viewing Error Logs</h2><p>Because we have a real endpoint to work with, we don't need to waste any time creating dumb unit tests where we send fake JSON to our function (real talk though, we should always write unit tests).</p><p>The Cloud Function error log screen does a decent job of providing us with a GUI to see how our deployed function is running, and where things have gone wrong:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/logs.gif\" class=\"kg-image\"><figcaption>Orange Exclamation Marks Denote Errors</figcaption></figure><!--kg-card-end: image--><h2 id=\"firing-our-function-on-a-schedule\">Firing Our Function on a Schedule</h2><p>Let's say our function is a job we're looking to run daily, or perhaps hourly. Google Cloud Scheduler is a super easy way to trigger functions via CRON.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://hackersandslackers.com/content/images/2019/04/google-cloud-scheduler.png\" class=\"kg-image\"><figcaption>How is this free again?</figcaption></figure><!--kg-card-end: image--><p>The easiest way to handle this is by creating our function as an HTTP endpoint back when we started. A <strong>Cloud Scheduler</strong> job can hit this endpoint at any time interval we want - just make sure you wrote your endpoint to handle GET requests.</p><h2 id=\"cloud-functions-in-short\">Cloud Functions in Short</h2><p>GCP seems to have been taking notes on the sidelines on how to improve this process by removing red-tape around service setup or policy configuration. AWS and GCP are tackling opposites approaches; AWS allows you to build a Robust API complete with staging and testing with the intent that some of these APIs can even be sold as standalone products to consumers. GCP takes the opposite approach: cloud functions are services intended for developers to develop. That should probably cover the vast majority of use cases anyway.</p>","url":"https://hackersandslackers.com/creating-a-python-google-cloud-function/","uuid":"ec428cb9-976e-4578-a3de-9120a0dd7352","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5bc91ac23d1eab214413b12b"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867371e","title":"Lynx Roundup, October 18th","slug":"lynx-roundup-october-18th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/109@2x.jpg","excerpt":"Reinforcement learning & Dynamic Programming!  Creating reports in Python & Jinja2!  Better communication between scikit-learn & Dask!","custom_excerpt":"Reinforcement learning & Dynamic Programming!  Creating reports in Python & Jinja2!  Better communication between scikit-learn & Dask!","created_at_pretty":"16 October, 2018","published_at_pretty":"18 October, 2018","updated_at_pretty":"18 October, 2018","created_at":"2018-10-16T01:12:59.000-04:00","published_at":"2018-10-18T07:00:00.000-04:00","updated_at":"2018-10-18T08:31:01.000-04:00","meta_title":"Lynx Roundup, October 18th | Hackers and Slackers","meta_description":"Reinforcement learning & Dynamic Programming!  Creating reports in Python & Jinja2!  Better communication between scikit-learn & Dask!","og_description":"Reinforcement learning & Dynamic Programming!  Creating reports in Python & Jinja2!  Better communication between scikit-learn & Dask!","og_image":"https://hackersandslackers.com/content/images/lynx/109@2x.jpg","og_title":"Lynx Roundup, October 18th","twitter_description":"Reinforcement learning & Dynamic Programming!  Creating reports in Python & Jinja2!  Better communication between scikit-learn & Dask!","twitter_image":"https://hackersandslackers.com/content/images/lynx/109@2x.jpg","twitter_title":"Lynx Roundup, October 18th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://github.com/mwouts/jupytext\n\nhttps://towardsdatascience.com/understanding-boxplots-5e2df7bcbd51\n\nhttps://www.analyticsvidhya.com/blog/2018/09/reinforcement-learning-model-based-planning-dynamic-programming/\n\nhttps://www.analyticsvidhya.com/blog/2015/12/improve-machine-learning-results/\n\nhttp://tonsky.me/blog/disenchantment/\n\nhttp://www.marknagelberg.com/creating-pdf-reports-with-python-pdfkit-and-jinja2-templates/\n\nhttps://tomaugspurger.github.io/sklearn-dask-tabular.html","html":"<p></p><p><a href=\"https://github.com/mwouts/jupytext\">https://github.com/mwouts/jupytext</a></p><p><a href=\"https://towardsdatascience.com/understanding-boxplots-5e2df7bcbd51\">https://towardsdatascience.com/understanding-boxplots-5e2df7bcbd51</a></p><p><a href=\"https://www.analyticsvidhya.com/blog/2018/09/reinforcement-learning-model-based-planning-dynamic-programming/\">https://www.analyticsvidhya.com/blog/2018/09/reinforcement-learning-model-based-planning-dynamic-programming/</a></p><p><a href=\"https://www.analyticsvidhya.com/blog/2015/12/improve-machine-learning-results/\">https://www.analyticsvidhya.com/blog/2015/12/improve-machine-learning-results/</a></p><p><a href=\"http://tonsky.me/blog/disenchantment/\">http://tonsky.me/blog/disenchantment/</a></p><p><a href=\"http://www.marknagelberg.com/creating-pdf-reports-with-python-pdfkit-and-jinja2-templates/\">http://www.marknagelberg.com/creating-pdf-reports-with-python-pdfkit-and-jinja2-templates/</a></p><p><a href=\"https://tomaugspurger.github.io/sklearn-dask-tabular.html\">https://tomaugspurger.github.io/sklearn-dask-tabular.html</a></p>","url":"https://hackersandslackers.com/lynx-roundup-october-18th/","uuid":"4bde3b46-e52d-4bb4-9f97-b368c25881f2","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5bc5735bc0b1ac3b7ed7ac25"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867371d","title":"Lynx Roundup, October 17th","slug":"lynx-roundup-october-17th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/112@2x.jpg","excerpt":"Idiomatic pandas!  Building a Death Star!  Accessible robotics resources!","custom_excerpt":"Idiomatic pandas!  Building a Death Star!  Accessible robotics resources!","created_at_pretty":"16 October, 2018","published_at_pretty":"17 October, 2018","updated_at_pretty":"17 October, 2018","created_at":"2018-10-16T01:10:58.000-04:00","published_at":"2018-10-17T07:00:00.000-04:00","updated_at":"2018-10-17T07:00:00.000-04:00","meta_title":"Idiomatic pandas!  Building a Death Star!  Accessible robotics resources! | Hackers And Slackers","meta_description":"Idiomatic pandas!  Building a Death Star!  Accessible robotics resources!","og_description":"Idiomatic pandas!  Building a Death Star!  Accessible robotics resources!","og_image":"https://hackersandslackers.com/content/images/lynx/112@2x.jpg","og_title":"Lynx Roundup, October 17th","twitter_description":"Idiomatic pandas!  Building a Death Star!  Accessible robotics resources!","twitter_image":"https://hackersandslackers.com/content/images/lynx/112@2x.jpg","twitter_title":"Lynx Roundup, October 17th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.datacamp.com/community/tutorials/pandas-idiomatic\n\nhttps://medicalxpress.com/news/2018-09-scientists-personality-based.html\n\nhttps://arstechnica.com/science/2018/09/the-math-of-why-its-so-hard-to-build-a-spherical-death-star-in-space/\n\nhttps://robohub.org/robotarium-a-robotics-lab-accessible-to-all/\n\nhttps://github.com/akshayubhat/deepvideoanalytics\n\nhttps://www.nature.com/articles/d41586-018-06610-y\n\nhttps://www.locallyoptimistic.com/post/code-as-configuration/","html":"<p></p><p><a href=\"https://www.datacamp.com/community/tutorials/pandas-idiomatic\">https://www.datacamp.com/community/tutorials/pandas-idiomatic</a></p><p><a href=\"https://medicalxpress.com/news/2018-09-scientists-personality-based.html\">https://medicalxpress.com/news/2018-09-scientists-personality-based.html</a></p><p><a href=\"https://arstechnica.com/science/2018/09/the-math-of-why-its-so-hard-to-build-a-spherical-death-star-in-space/\">https://arstechnica.com/science/2018/09/the-math-of-why-its-so-hard-to-build-a-spherical-death-star-in-space/</a></p><p><a href=\"https://robohub.org/robotarium-a-robotics-lab-accessible-to-all/\">https://robohub.org/robotarium-a-robotics-lab-accessible-to-all/</a></p><p><a href=\"https://github.com/akshayubhat/deepvideoanalytics\">https://github.com/akshayubhat/deepvideoanalytics</a></p><p><a href=\"https://www.nature.com/articles/d41586-018-06610-y\">https://www.nature.com/articles/d41586-018-06610-y</a></p><p><a href=\"https://www.locallyoptimistic.com/post/code-as-configuration/\">https://www.locallyoptimistic.com/post/code-as-configuration/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-october-17th/","uuid":"2b075a0a-1627-4d4d-b8da-470a3fd90d6f","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5bc572e2c0b1ac3b7ed7ac1f"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867371c","title":"Lynx Roundup, October 16th","slug":"lynx-roundup-october-16th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/02/108-1@2x.jpg","excerpt":"Software engineering tips!  Globbing vs regex!  Useful FOSS tools!","custom_excerpt":"Software engineering tips!  Globbing vs regex!  Useful FOSS tools!","created_at_pretty":"16 October, 2018","published_at_pretty":"16 October, 2018","updated_at_pretty":"14 February, 2019","created_at":"2018-10-16T01:07:47.000-04:00","published_at":"2018-10-16T07:00:00.000-04:00","updated_at":"2019-02-14T05:04:25.000-05:00","meta_title":"Software engineering tips!  Globbing vs regex!  Useful FOSS tools! | Hackers And Slackers","meta_description":"Software engineering tips!  Globbing vs regex!  Useful FOSS tools!","og_description":"Software engineering tips!  Globbing vs regex!  Useful FOSS tools!","og_image":"https://hackersandslackers.com/content/images/2019/02/108-1@2x.jpg","og_title":"Lynx Roundup, October 16th","twitter_description":"Software engineering tips!  Globbing vs regex!  Useful FOSS tools!","twitter_image":"https://hackersandslackers.com/content/images/2019/02/108-1@2x.jpg","twitter_title":"Lynx Roundup, October 16th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://ieet.org/index.php/IEET2/more/Messerly20180903#When:07:20:00Z\n\nhttps://www.linuxjournal.com/content/globbing-and-regex-so-similar-so-different\n\nhttps://medium.com/s/story/notes-to-myself-on-software-engineering-c890f16f4e4d\n\nhttps://github.com/Nozbe/WatermelonDB\n\nhttps://github.com/cjbarber/ToolsOfTheTrade#readme\n\nhttps://code.fb.com/developer-tools/finding-and-fixing-software-bugs-automatically-with-sapfix-and-sapienz/\n\nhttps://locusmag.com/2018/09/cory-doctorow-big-tech-we-can-do-better-than-constitutional-monarchies/","html":"<p></p><p><a href=\"https://ieet.org/index.php/IEET2/more/Messerly20180903#When:07:20:00Z\">https://ieet.org/index.php/IEET2/more/Messerly20180903#When:07:20:00Z</a></p><p><a href=\"https://www.linuxjournal.com/content/globbing-and-regex-so-similar-so-different\">https://www.linuxjournal.com/content/globbing-and-regex-so-similar-so-different</a></p><p><a href=\"https://medium.com/s/story/notes-to-myself-on-software-engineering-c890f16f4e4d\">https://medium.com/s/story/notes-to-myself-on-software-engineering-c890f16f4e4d</a></p><p><a href=\"https://github.com/Nozbe/WatermelonDB\">https://github.com/Nozbe/WatermelonDB</a></p><p><a href=\"https://github.com/cjbarber/ToolsOfTheTrade#readme\">https://github.com/cjbarber/ToolsOfTheTrade#readme</a></p><p><a href=\"https://code.fb.com/developer-tools/finding-and-fixing-software-bugs-automatically-with-sapfix-and-sapienz/\">https://code.fb.com/developer-tools/finding-and-fixing-software-bugs-automatically-with-sapfix-and-sapienz/</a></p><p><a href=\"https://locusmag.com/2018/09/cory-doctorow-big-tech-we-can-do-better-than-constitutional-monarchies/\">https://locusmag.com/2018/09/cory-doctorow-big-tech-we-can-do-better-than-constitutional-monarchies/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-october-16th/","uuid":"c275178d-d75a-4ce3-8898-f4e39e8ef48c","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5bc57223c0b1ac3b7ed7ac1a"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736ee","title":"Structuring Your Flask Application","slug":"structuring-your-flask-app","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/09/flaskblueprints2@2x.jpg","excerpt":"Leverage Blueprints, Flask-Assets, and the Application Factory.","custom_excerpt":"Leverage Blueprints, Flask-Assets, and the Application Factory.","created_at_pretty":"02 September, 2018","published_at_pretty":"15 October, 2018","updated_at_pretty":"23 February, 2019","created_at":"2018-09-02T03:02:29.000-04:00","published_at":"2018-10-15T08:00:00.000-04:00","updated_at":"2019-02-23T11:21:49.000-05:00","meta_title":"Structuring your Flask Application | Hackers and Slackers","meta_description":"Follow best practices when building your Flask apps. Leverage Blueprints, Flask-Assets, and the Application Factory.","og_description":"Follow best practices when building your Flask apps. Leverage Blueprints, Flask-Assets, and the Application Factory.","og_image":"https://hackersandslackers.com/content/images/2018/09/flaskblueprints2@2x.jpg","og_title":"Structuring your Flask App Like an Adult | Hackers and Slackers","twitter_description":"Follow best practices when building your Flask apps. Leverage Blueprints, Flask-Assets, and the Application Factory.","twitter_image":"https://hackersandslackers.com/content/images/2018/09/flaskblueprints2@2x.jpg","twitter_title":"Structuring your Flask App Like an Adult | Hackers and Slackers","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"},{"name":"#Building Flask Apps","slug":"building-flask-apps","description":"Python’s fast-growing and flexible microframework. Can handle apps as simple as API endpoints, to monoliths remininiscent of Django.","feature_image":"https://hackersandslackers.com/content/images/2019/03/flask-gettingstarted.jpg","meta_description":"Python’s fastest growing, most flexible, and perhaps most Pythonic framework.","meta_title":"Building Flask Apps","visibility":"internal"}],"plaintext":"When we first started developing in Flask, most of us took the 5 lines of code\nin the quick-start guide and ran with it. Compared to every other web framework,\ngetting a \"Hello world\" to flash on screen without being hassled with database\nconfigurations, template preferences, or reverse proxy setups felt a lot like\nrobbing a bank.\n\nAt some point or another, we inevitably pause the party and take a look around.\nAll of our views are smashed into a single file named something meaningless like\n app.py. All logic lives in the root directory. We're in our 30s and the app\nwe've just created looks as terrible as our bathrooms. It's time to get our shit\ntogether.\n\nThe Flask Application Factory\nThe overwhelming preference to start a Flask application is to use a structure\ndubbed the Application Factory\n[http://flask.pocoo.org/docs/1.0/patterns/appfactories/]. The gist is to keep\nthe initialization preferences of our application in a single __init__.py  file,\nsometimes borrowing help from peer files such as db.py  or models.py. Either\nway, the gist is to keep global logic separated from the other parts.\n\nA simple app using the application factory method might look something like\nthis:\n\n[app]\n├── myapp/\n│   ├── __init__.py\n│   ├── db.py\n│   ├── forms.py\n│   ├── models.py\n│   ├── views.py\n│   ├── static/\n│   └── templates/\n├── config.py\n├── requirements.txt\n├── setup.py\n├── Pipfile\n├── Pipfile.lock\n├── README.md\n├── app.json\n└── wsgi.py\n\n\nThe main takeaway here being the presence of the myapp  directory which now\nhouses our app logic, and the presence of our good friend __init__.py.\n\nAn example of what might live in __init.py__  could be something like this:\n\nimport os\nimport sys\nfrom flask import Flask, g\nfrom config import BaseConfig\nfrom flask_login import LoginManager\nfrom flask_pymongo import PyMongo\n\n\ndef create_app():\n    app = Flask(__name__, instance_relative_config=True)\n    app.config.from_object('config.BaseConfig')\n    login = LoginManager()\n\n    with app.app_context():\n        from . import views\n        from . import auth\n        login.init_app(app)\n        mongo = PyMongo(app, app.config['MONGO_URI'])\n        app.register_blueprint(views.main)\n        app.register_blueprint(admin.admin)\n\n        return app\n\n\nHere we initialize our app and the dependencies we'd like to initialize within a\nsingle function. Most familiar might be the first two lines of our function: The\nfirst creating our app object, and the second loading a config from a class in a\nconfig file.\n\nAnother common practice is to keep libraries which need to run init_app  in this\nfile as well. This could be something like the LoginManager  seen in the example\nabove, or a global database configuration. Lastly, this is also where we would\nregister any Blueprints  as well.\n\nUsing Blueprints in Flask\nWhile the Application Factory is an excellent first step to building cohesive\napps, we haven't solved the problem of organizing our app into separation of\nconcerns. Blueprints  are a way for us to separate our app into parts which\nshare very little with one another. Prime examples would include apps with an \nadmin  panel with an accompanying client-facing  side, or apps where the \"logged\nin\" state is vastly different from the app's \"logged out\"  state. In these\ncases, it seems silly to mix both logic and static assets into a single lump,\nwhich is where Blueprints come in.\n\nNOTE:  If you're a Django person and this is all starting to sound familiar,\nthat's because we can equate Flask's Blueprints  to Django's concept of apps. \nThere are differences and added flexibility, but the concept remains the same.\n\nRegistering a part of your app as a Blueprint begins with the following two\nlines:\n\nfrom flask import Blueprint\n\nauth = Blueprint('auth', __name__)\n\n\nWhen we registered the admin  Blueprint previously in __init__.py, the line \napp.register_blueprint(admin.admin)  is essentially saying \"look for a Blueprint \n named admin  in a module (either file or folder structure) called admin.\"  It's\nimportant not to overlook the concept that Blueprints can either be single files\nor entirely standalone file structures with their own templates and static\nfiles.  For instance, a Flask app with completely decoupled Blueprints might be\nstructured as follows:\n\n[app]\n├── myapp/\n│   ├── __init__.py\n│   ├── admin/\n│   │    ├── __init__.py\n│   │    ├── views.py\n│   │    ├── forms.py\n│   │    ├── static/\n│   │\t └── templates/\n│   ├── frontend/\n│   │    ├── __init__.py\n│   │    ├── views.py\n│   │    ├── forms.py\n│   │    ├── static/\n│   │\t └── templates/  \n│   ├── db.py\n│   ├── forms.py\n│   ├── models.py\n│   └── views.py\n├── config.py\n├── requirements.txt\n├── setup.py\n├── Pipfile\n├── Pipfile.lock\n├── README.md\n├── app.json\n└── wsgi.py\n        \n\n\nIn the case above, each Blueprint  stands as though it were its own Python\nmodule. Each blueprint contains its own logic, templates, and static files -\npresumably encapsulated in a way which makes sense.\n\nUsing Flask-Assets with Blueprints\nWe've already forced a lot of information down your throat, but there's one last\nthing worth mentioning in this overview of working with Blueprints, which is\nworking with assets. We've previously looked at the Flask-Static-Compress \nlibrary for static asset management, but Blueprints  lend themselves better to \nFlask-Assets  way of thinking.\n\nFlask-Assets  is a library which creates a bundle (aka compressed) of assets\nupfront. Thus, the start of a Blueprint definition might now look something like\nthis:\n\nfrom flask import Blueprint\nfrom flask_assets import Environment, Bundle, build\nimport sass\n\nauth = Blueprint('admin', __name__)\n\nassets = Environment(admin)\nscss = Bundle('scss/main.scss', 'scss/forms.scss', filters='libsass', output='build/css/style.css')\nassets.register('scss_all', scss)\nscss.build()\n\n\nEnvironment  states the context of our asset bundle, which is admin, the current\nBlueprint. \n\nBundle  takes any number of files to compressed together as arguments. Then we\nmust pass the type of \"filter\" the assets are (typically a precompiler) and of\ncourse an output destination for the Bundle.\n\n.register()  registers the bundle we just created, not unlike the way we\nregistered our Blueprint.\n\n.build()  must be called explicitly in order to build the bundle at runtime.\nConversely, we could intentionally exclude .build()  if we expect our assets are\nnot to change.\n\nAnd Now You Know Everything\n...or not, really. The most we should take from this post is:\n\n * There's a better way to structure our apps.\n * There are many potential decisions we can make about the structure of our\n   app.\n * There's way more stuff we need to Google or look up on StackOverflow.\n\nTruthfully, there are plenty of resources within Flask's documentation\n[http://flask.pocoo.org/docs/1.0/tutorial/views/#]  or around the internet that\ncovers the topic of Flask app organization and its granular topics more than\nthis single post could ever hope to. Nonetheless, here's to hoping you're\nfeeling a sense of direction in these crazy, adult lives of ours.","html":"<p>When we first started developing in Flask, most of us took the 5 lines of code in the quick-start guide and ran with it. Compared to every other web framework, getting a \"Hello world\" to flash on screen without being hassled with database configurations, template preferences, or reverse proxy setups felt a lot like robbing a bank.</p><p>At some point or another, we inevitably pause the party and take a look around. All of our views are smashed into a single file named something meaningless like <code>app.py</code>. All logic lives in the root directory. We're in our 30s and the app we've just created looks as terrible as our bathrooms. It's time to get our shit together.</p><h2 id=\"the-flask-application-factory\">The Flask Application Factory</h2><p>The overwhelming preference to start a Flask application is to use a structure dubbed the <a href=\"http://flask.pocoo.org/docs/1.0/patterns/appfactories/\">Application Factory</a>. The gist is to keep the initialization preferences of our application in a single <code>__init__.py</code> file, sometimes borrowing help from peer files such as <code>db.py</code> or <code>models.py</code>. Either way, the gist is to keep global logic separated from the other parts.</p><p>A simple app using the application factory method might look something like this:</p><pre><code class=\"language-shell\">[app]\n├── myapp/\n│   ├── __init__.py\n│   ├── db.py\n│   ├── forms.py\n│   ├── models.py\n│   ├── views.py\n│   ├── static/\n│   └── templates/\n├── config.py\n├── requirements.txt\n├── setup.py\n├── Pipfile\n├── Pipfile.lock\n├── README.md\n├── app.json\n└── wsgi.py\n</code></pre>\n<p>The main takeaway here being the presence of the <strong>myapp</strong> directory which now houses our app logic, and the presence of our good friend <code>__init__.py</code>.</p><p>An example of what might live in <code>__init.py__</code> could be something like this:</p><pre><code class=\"language-python\">import os\nimport sys\nfrom flask import Flask, g\nfrom config import BaseConfig\nfrom flask_login import LoginManager\nfrom flask_pymongo import PyMongo\n\n\ndef create_app():\n    app = Flask(__name__, instance_relative_config=True)\n    app.config.from_object('config.BaseConfig')\n    login = LoginManager()\n\n    with app.app_context():\n        from . import views\n        from . import auth\n        login.init_app(app)\n        mongo = PyMongo(app, app.config['MONGO_URI'])\n        app.register_blueprint(views.main)\n        app.register_blueprint(admin.admin)\n\n        return app\n</code></pre>\n<p>Here we initialize our app and the dependencies we'd like to initialize within a single function. Most familiar might be the first two lines of our function: The first creating our app object, and the second loading a config from a class in a config file.</p><p>Another common practice is to keep libraries which need to run <code>init_app</code> in this file as well. This could be something like the <code>LoginManager</code> seen in the example above, or a global database configuration. Lastly, this is also where we would register any <strong>Blueprints</strong> as well.</p><h2 id=\"using-blueprints-in-flask\">Using Blueprints in Flask</h2><p>While the Application Factory is an excellent first step to building cohesive apps, we haven't solved the problem of organizing our app into <em>separation of concerns</em>. <strong>Blueprints</strong> are a way for us to separate our app into parts which share very little with one another. Prime examples would include apps with an <em>admin</em> panel with an accompanying <em>client-facing</em> side, or apps where the \"<em>logged in\" </em>state is vastly different from the app's \"<em>logged out\"</em> state. In these cases, it seems silly to mix both logic and static assets into a single lump, which is where Blueprints come in.</p><p><strong>NOTE:</strong> If you're a Django person and this is all starting to sound familiar, that's because we can equate Flask's <strong>Blueprints</strong> to Django's concept of <strong>apps.</strong> There are differences and added flexibility, but the concept remains the same.</p><p>Registering a part of your app as a Blueprint begins with the following two lines:</p><pre><code class=\"language-python\">from flask import Blueprint\n\nauth = Blueprint('auth', __name__)\n</code></pre>\n<p>When we registered the <code>admin</code> Blueprint previously in <code>__init__.py</code>, the line <code>app.register_blueprint(admin.admin)</code> is essentially saying \"look for a <strong>Blueprint</strong> named <em>admin</em> in a module (either file or folder structure) called <em>admin.\"</em> It's important not to overlook the concept that Blueprints can either be single files or <em>entirely standalone file structures with their own templates and static files.</em> For instance, a Flask app with completely decoupled Blueprints might be structured as follows:</p><pre><code class=\"language-shell\">[app]\n├── myapp/\n│   ├── __init__.py\n│   ├── admin/\n│   │    ├── __init__.py\n│   │    ├── views.py\n│   │    ├── forms.py\n│   │    ├── static/\n│   │\t └── templates/\n│   ├── frontend/\n│   │    ├── __init__.py\n│   │    ├── views.py\n│   │    ├── forms.py\n│   │    ├── static/\n│   │\t └── templates/  \n│   ├── db.py\n│   ├── forms.py\n│   ├── models.py\n│   └── views.py\n├── config.py\n├── requirements.txt\n├── setup.py\n├── Pipfile\n├── Pipfile.lock\n├── README.md\n├── app.json\n└── wsgi.py\n        \n</code></pre>\n<p>In the case above, each <strong>Blueprint</strong> stands as though it were its own Python module. Each blueprint contains its own logic, templates, and static files - presumably encapsulated in a way which makes sense.</p><h2 id=\"using-flask-assets-with-blueprints\">Using Flask-Assets with Blueprints</h2><p>We've already forced a lot of information down your throat, but there's one last thing worth mentioning in this overview of working with <strong>Blueprints, </strong>which is working with assets. We've previously looked at the <code>Flask-Static-Compress</code> library for static asset management, but <strong>Blueprints</strong> lend themselves better to <code>Flask-Assets</code> way of thinking.</p><p><code>Flask-Assets</code> is a library which creates a bundle (aka compressed) of assets upfront. Thus, the start of a Blueprint definition might now look something like this:</p><pre><code class=\"language-shell\">from flask import Blueprint\nfrom flask_assets import Environment, Bundle, build\nimport sass\n\nauth = Blueprint('admin', __name__)\n\nassets = Environment(admin)\nscss = Bundle('scss/main.scss', 'scss/forms.scss', filters='libsass', output='build/css/style.css')\nassets.register('scss_all', scss)\nscss.build()\n</code></pre>\n<p><code>Environment</code> states the context of our asset bundle, which is admin, the current Blueprint. </p><p><code>Bundle</code> takes any number of files to compressed together as arguments. Then we must pass the type of \"filter\" the assets are (typically a precompiler) and of course an output destination for the Bundle.</p><p><code>.register()</code> registers the bundle we just created, not unlike the way we registered our Blueprint.</p><p><code>.build()</code> must be called explicitly in order to build the bundle at runtime. Conversely, we could intentionally exclude <code>.build()</code> if we expect our assets are not to change.</p><h2 id=\"and-now-you-know-everything\">And Now You Know Everything</h2><p>...or not, really. The most we should take from this post is:</p><ul><li>There's a better way to structure our apps.</li><li>There are many potential decisions we can make about the structure of our app.</li><li>There's way more stuff we need to Google or look up on StackOverflow.</li></ul><p>Truthfully, there are plenty of resources within <a href=\"http://flask.pocoo.org/docs/1.0/tutorial/views/#\">Flask's documentation</a> or around the internet that covers the topic of Flask app organization and its granular topics more than this single post could ever hope to. Nonetheless, here's to hoping you're feeling a sense of direction in these crazy, adult lives of ours.</p>","url":"https://hackersandslackers.com/structuring-your-flask-app/","uuid":"4345eb76-e1ce-471a-94b9-f06a43c3ad27","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b8b8b05852e5c07171fcab7"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867371b","title":"Extract Nested Data From Complex JSON","slug":"extract-data-from-complex-json-python","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/10/107@2x.jpg","excerpt":"Never manually walk through complex JSON objects again by using this function.","custom_excerpt":"Never manually walk through complex JSON objects again by using this function.","created_at_pretty":"10 October, 2018","published_at_pretty":"10 October, 2018","updated_at_pretty":"22 January, 2019","created_at":"2018-10-10T00:15:29.000-04:00","published_at":"2018-10-10T08:00:00.000-04:00","updated_at":"2019-01-22T15:20:23.000-05:00","meta_title":"Extract Nested Data From Complex JSON Trees | Hackers and Slackers","meta_description":"Never manually walk through complex JSON objects again by using this function","og_description":"Never manually walk through complex JSON objects again by using this function","og_image":"https://hackersandslackers.com/content/images/2018/10/107@2x.jpg","og_title":"Extract Nested Data From Complex JSON Trees | Hackers and Slackers","twitter_description":"Never manually walk through complex JSON objects again by using this function","twitter_image":"https://hackersandslackers.com/content/images/2018/10/107@2x.jpg","twitter_title":"Extract Nested Data From Complex JSON Trees | Hackers and Slackers","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"REST APIs","slug":"restapis","description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","feature_image":null,"meta_description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","meta_title":"Consuming and Building REST APIs | Hackers and Slackers","visibility":"public"},{"name":"Data Engineering","slug":"dataengineering","description":"The systematic collection and transformation of data via the creation of tools and pipelines.","feature_image":null,"meta_description":null,"meta_title":"Data Engineering | Hackers and Slackers","visibility":"public"}],"plaintext":"We're all data people here, so you already know the scenario: it happens perhaps\nonce a day, perhaps 5, or even more. There's an API you're working with, and\nit's great. It contains all the information you're looking for, but there's just\none problem: the complexity of nested JSON objects is endless, and suddenly the\njob you love needs to be put on hold to painstakingly retrieve the data you\nactually want, and it's 5 levels deep in a nested JSON hell. Nobody feels like\nmuch of a \"scientist\" or an \"engineer\" when half their day becomes dealing with\nkey value errors.\n\nLuckily, we code in Python!  (okay fine, language doesn't make much of a\ndifference here. It felt like a rallying call at the time).\n\nUsing Google Maps API as an Example\nTo visualize the problem, let's take an example somebody might actually want to\nuse.  I think the  Google Maps API is a good candidate to fit the bill here.\n\nWhile Google Maps is actually a collection of APIs, the Google Maps Distance\nMatrix [https://developers.google.com/maps/documentation/distance-matrix/start].\nThe idea is that with a single API call, a user can calculate the distance and\ntime traveled between an origin and an infinite number of destinations. It's a\ngreat full-featured API, but as you might imagine the resulting JSON for\ncalculating commute time between where you stand and every location in the\nconceivable universe  makes an awfully complex JSON structure.\n\nGetting a Taste of JSON Hell\nReal quick, here's an example of the types of parameters this request accepts:\n\nimport requests\nimport API_KEY\n\ndef google_api_matrix():\n    \"\"\"Example Google Distance Matrix function.\"\"\"\n    endpoint = \"https://maps.googleapis.com/maps/api/distancematrix/json\"\n    params = {\n       'units': 'imperial',\n       'key': API_KEY,\n       'origins': 'New York City, NY',\n       'destinations': 'Philadelphia,PA',\n       'transit_mode': 'car'\n    }\n    r = requests.get(endpoint, params=params)\n    return r.json\n\n\nOne origin, one destination. The JSON response for a request this\nstraightforward is quite simple:\n\n{\n    \"destination_addresses\": [\n        \"Philadelphia, PA, USA\"\n    ],\n    \"origin_addresses\": [\n        \"New York, NY, USA\"\n    ],\n    \"rows\": [\n        {\n            \"elements\": [\n                {\n                    \"distance\": {\n                        \"text\": \"94.6 mi\",\n                        \"value\": 152193\n                    },\n                    \"duration\": {\n                        \"text\": \"1 hour 44 mins\",\n                        \"value\": 6227\n                    },\n                    \"status\": \"OK\"\n                }\n            ]\n        }\n    ],\n    \"status\": \"OK\"\n}\n\n\nFor each destination, we're getting two data points: the commute distance, and \nestimated duration. If we hypothetically wanted to extract those values, typing \nresponse['rows'][0]['elements']['distance']['test']  isn't too  crazy. I mean,\nit's somewhat awful and brings on casual thoughts of suicide, but nothing out of\nthe ordinary\n\nNow let's make things interesting by adding a few more stops on our trip:\n\nimport requests \nimport API_KEY\n\ndef google_api_matrix():\n    \"\"\"Example Google Distance Matrix function.\"\"\"\n    endpoint = \"https://maps.googleapis.com/maps/api/distancematrix/json\"\n    params = {\n       'units': 'imperial',\n       'key': API_KEY,\n       'origins': 'New York City, NY',\n       'destinations': 'Washington,DC|Philadelphia,PA|Santa Barbara,CA|Miami,FL|Austin,TX|Napa County,CA',\n       'transit_mode': 'car'\n    }\n    r = requests.get(endpoint, params=params)\n    return r.json\n\n\nOh fuuucckkkk:\n\n{\n  \"destination_addresses\": [\n    \"Washington, DC, USA\",\n    \"Philadelphia, PA, USA\",\n    \"Santa Barbara, CA, USA\",\n    \"Miami, FL, USA\",\n    \"Austin, TX, USA\",\n    \"Napa County, CA, USA\"\n  ],\n  \"origin_addresses\": [\n    \"New York, NY, USA\"\n  ],\n  \"rows\": [\n    {\n      \"elements\": [\n        {\n          \"distance\": {\n            \"text\": \"227 mi\",\n            \"value\": 365468\n          },\n          \"duration\": {\n            \"text\": \"3 hours 54 mins\",\n            \"value\": 14064\n          },\n          \"status\": \"OK\"\n        },\n        {\n          \"distance\": {\n            \"text\": \"94.6 mi\",\n            \"value\": 152193\n          },\n          \"duration\": {\n            \"text\": \"1 hour 44 mins\",\n            \"value\": 6227\n          },\n          \"status\": \"OK\"\n        },\n        {\n          \"distance\": {\n            \"text\": \"2,878 mi\",\n            \"value\": 4632197\n          },\n          \"duration\": {\n            \"text\": \"1 day 18 hours\",\n            \"value\": 151772\n          },\n          \"status\": \"OK\"\n        },\n        {\n          \"distance\": {\n            \"text\": \"1,286 mi\",\n            \"value\": 2069031\n          },\n          \"duration\": {\n            \"text\": \"18 hours 43 mins\",\n            \"value\": 67405\n          },\n          \"status\": \"OK\"\n        },\n        {\n          \"distance\": {\n            \"text\": \"1,742 mi\",\n            \"value\": 2802972\n          },\n          \"duration\": {\n            \"text\": \"1 day 2 hours\",\n            \"value\": 93070\n          },\n          \"status\": \"OK\"\n        },\n        {\n          \"distance\": {\n            \"text\": \"2,871 mi\",\n            \"value\": 4620514\n          },\n          \"duration\": {\n            \"text\": \"1 day 18 hours\",\n            \"value\": 152913\n          },\n          \"status\": \"OK\"\n        }\n      ]\n    }\n  ],\n  \"status\": \"OK\"\n}\n\n\nA lot is happening here. There are objects. There are lists. There are lists of\nobjects which are part of an object. The last thing I'd want to deal with is\ntrying to parse this data only to accidentally get a useless key:value pair like\n \"status\": \"OK\".\n\nCode Snippet To The Rescue\nLet's say we only want the human-readable data from this JSON, which is labeled \n\"text\"  for both distance and duration. We've created a function below dubbed \nextract_values()  to help us resolve this very issue. The idea is that \nextract_values()  is flexible and agnostic, therefore can be imported as a\nmodule into any project you might need.\n\n# recursivejson.py\n\ndef extract_values(obj, key):\n    \"\"\"Pull all values of specified key from nested JSON.\"\"\"\n    arr = []\n\n    def extract(obj, arr, key):\n        \"\"\"Recursively search for values of key in JSON tree.\"\"\"\n        if isinstance(obj, dict):\n            for k, v in obj.items():\n                if isinstance(v, (dict, list)):\n                    extract(v, arr, key)\n                elif k == key:\n                    arr.append(v)\n        elif isinstance(obj, list):\n            for item in obj:\n                extract(item, arr, key)\n        return arr\n\n    results = extract(obj, arr, key)\n    return results\n\n\nWe need to pass this function two values:\n\n * A JSON object, such as r.json()  from an API request.\n * The name of the key  we're looking to extract values from.\n\nnames = extract_values('myjson.json', 'name')\nprint(names)\n\n\nRegardless of where the key \"text\"  lives in the JSON, this function returns\nevery value for the instance of \"key.\" Here's our function in action:\n\nimport requests\nimport API_KEY\nfrom recursivejson import extract_values\n\n\ndef google_api_matrix():\n    \"\"\"Example Google Distance Matrix function.\"\"\"\n    endpoint = \"https://maps.googleapis.com/maps/api/distancematrix/json\"\n    params = {\n       'units': 'imperial',\n       'key': API_KEY,\n       'origins': \"New York City,NY\",\n       'destinations': \"Washington,DC|Philadelphia,PA|Santa Barbara,CA|Miami,FL|Austin,TX|Napa Valley,CA\",\n       'transit_mode': 'car',\n    }\n\n   r = requests.get(endpoint, params=params)\n   travel_values = extract_values(r.json(), 'text')\n   return travel_values\n\n\nRunning this function will result in the following output:\n\n['227 mi', '3 hours 54 mins', '94.6 mi', '1 hour 44 mins', '2,878 mi', '1 day 18 hours', '1,286 mi', '18 hours 43 mins', '1,742 mi', '1 day 2 hours', '2,871 mi', '1 day 18 hours']\n\n\nOh fiddle me timbers! Because the Google API alternates between distance and \ntrip duration, every other value alternates between distance and time (can we\npause to appreciate this horrible design? There are infinitely better ways to\nstructure this response). Never fear, some simple Python can help us split this\nlist into two lists:\n\nmy_values = extract_values(r.json(), 'text')\n\ndurations = my_values[1::2]\ndistances = my_values[2::1]\n\nprint('DURATIONS = ', durations)\nprint('DISTANCES = ', distances)\n\n\nThis will take our one list and split it in to two  lists, alternating between\neven and odd:\n\nDURATIONS = ['3 hours 54 mins', '1 hour 44 mins', '1 day 18 hours', '18 hours 43 mins', '1 day 2 hours', '1 day 18 hours']\nDISTANCES = ['94.6 mi', '1 hour 44 mins', '2,878 mi', '1 day 18 hours', '1,286 mi', '18 hours 43 mins', '1,742 mi', '1 day 2 hours', '2,871 mi', '1 day 18 hours']\n\n\nGetting Creative With Lists\nA common theme I run in to while extracting lists of values from JSON objects\nlike these is that the lists of values I extract are very much related.  In the\nabove example, for every duration  we have an accompanying distance, which is a\none-to-one basis. Imagine if we wanted to associate these values somehow?\n\nTo use a better example, I recently I used this exact_values()  function to\nextract lists of column names and their data types from a database schema. As\nseparate lists, the data looked something like this:\n\ncolumn_names = ['index', 'first_name', 'last_name', 'join_date']\ncolumn_datatypes = ['integer', 'string', 'string', 'date']\n\n\nClearly these two lists are directly related; the latter is describing the\nformer. How can this be useful? By using Python's zip  method!\n\nschema_dict = dict(zip(column_names, column_datatypes))\nprint(schema_dict)\n\n\nI like to think they call it zip  because it's like zipping up a zipper, where\neach side of the zipper is a list. This output a dictionary where list 1 serves\nas the keys, and list 2 serves as values:\n\n{\n'index': 'integer', \n'first_name': 'string', \n'last_name':'string',\n'join_date': 'date'\n}\n\n\nAnd there you have it folks: a free code snippet to copy and secretly pretend\nyou wrote forever. I've thrown the function up on Github Gists\n[https://gist.github.com/toddbirchard/b6f86f03f6cf4fc9492ad4349ee7ff8b], if such\na thing pleases you.\n\nIn the meantime, zip it up and zip it out. Zippity-do-da, buh bye.","html":"<p>We're all data people here, so you already know the scenario: it happens perhaps once a day, perhaps 5, or even more. There's an API you're working with, and it's great. It contains all the information you're looking for, but there's just one problem: the complexity of nested JSON objects is endless, and suddenly the job you love needs to be put on hold to painstakingly retrieve the data you actually want, and it's 5 levels deep in a nested JSON hell. Nobody feels like much of a \"scientist\" or an \"engineer\" when half their day becomes dealing with key value errors.</p><p>Luckily, we code in <strong><em>Python!</em></strong> (okay fine, language doesn't make much of a difference here. It felt like a rallying call at the time).</p><h2 id=\"using-google-maps-api-as-an-example\">Using Google Maps API as an Example</h2><p>To visualize the problem, let's take an example somebody might actually want to use.  I think the<strong> Google Maps API </strong>is a good candidate to fit the bill here.</p><p>While Google Maps is actually a collection of APIs, the <a href=\"https://developers.google.com/maps/documentation/distance-matrix/start\">Google Maps Distance Matrix</a>. The idea is that with a single API call, a user can calculate the distance and time traveled between an origin and an infinite number of destinations. It's a great full-featured API, but as you might imagine the resulting JSON for calculating commute time between where you stand and <em>every location in the conceivable universe</em> makes an awfully complex JSON structure.</p><h3 id=\"getting-a-taste-of-json-hell\">Getting a Taste of JSON Hell</h3><p>Real quick, here's an example of the types of parameters this request accepts:</p><pre><code class=\"language-python\">import requests\nimport API_KEY\n\ndef google_api_matrix():\n    &quot;&quot;&quot;Example Google Distance Matrix function.&quot;&quot;&quot;\n    endpoint = &quot;https://maps.googleapis.com/maps/api/distancematrix/json&quot;\n    params = {\n       'units': 'imperial',\n       'key': API_KEY,\n       'origins': 'New York City, NY',\n       'destinations': 'Philadelphia,PA',\n       'transit_mode': 'car'\n    }\n    r = requests.get(endpoint, params=params)\n    return r.json\n</code></pre>\n<p>One origin, one destination. The JSON response for a request this straightforward is quite simple:</p><pre><code class=\"language-json\">{\n    &quot;destination_addresses&quot;: [\n        &quot;Philadelphia, PA, USA&quot;\n    ],\n    &quot;origin_addresses&quot;: [\n        &quot;New York, NY, USA&quot;\n    ],\n    &quot;rows&quot;: [\n        {\n            &quot;elements&quot;: [\n                {\n                    &quot;distance&quot;: {\n                        &quot;text&quot;: &quot;94.6 mi&quot;,\n                        &quot;value&quot;: 152193\n                    },\n                    &quot;duration&quot;: {\n                        &quot;text&quot;: &quot;1 hour 44 mins&quot;,\n                        &quot;value&quot;: 6227\n                    },\n                    &quot;status&quot;: &quot;OK&quot;\n                }\n            ]\n        }\n    ],\n    &quot;status&quot;: &quot;OK&quot;\n}\n</code></pre>\n<p>For each destination, we're getting two data points: the <em>commute distance</em>, and <em>estimated duration</em>. If we hypothetically wanted to extract those values, typing <code>response['rows'][0]['elements']['distance']['test']</code> isn't <em>too</em> crazy. I mean, it's somewhat awful and brings on casual thoughts of suicide, but nothing out of the ordinary</p><p>Now let's make things interesting by adding a few more stops on our trip:</p><pre><code class=\"language-python\">import requests \nimport API_KEY\n\ndef google_api_matrix():\n    &quot;&quot;&quot;Example Google Distance Matrix function.&quot;&quot;&quot;\n    endpoint = &quot;https://maps.googleapis.com/maps/api/distancematrix/json&quot;\n    params = {\n       'units': 'imperial',\n       'key': API_KEY,\n       'origins': 'New York City, NY',\n       'destinations': 'Washington,DC|Philadelphia,PA|Santa Barbara,CA|Miami,FL|Austin,TX|Napa County,CA',\n       'transit_mode': 'car'\n    }\n    r = requests.get(endpoint, params=params)\n    return r.json\n</code></pre>\n<p>Oh fuuucckkkk:</p><pre><code class=\"language-json\">{\n  &quot;destination_addresses&quot;: [\n    &quot;Washington, DC, USA&quot;,\n    &quot;Philadelphia, PA, USA&quot;,\n    &quot;Santa Barbara, CA, USA&quot;,\n    &quot;Miami, FL, USA&quot;,\n    &quot;Austin, TX, USA&quot;,\n    &quot;Napa County, CA, USA&quot;\n  ],\n  &quot;origin_addresses&quot;: [\n    &quot;New York, NY, USA&quot;\n  ],\n  &quot;rows&quot;: [\n    {\n      &quot;elements&quot;: [\n        {\n          &quot;distance&quot;: {\n            &quot;text&quot;: &quot;227 mi&quot;,\n            &quot;value&quot;: 365468\n          },\n          &quot;duration&quot;: {\n            &quot;text&quot;: &quot;3 hours 54 mins&quot;,\n            &quot;value&quot;: 14064\n          },\n          &quot;status&quot;: &quot;OK&quot;\n        },\n        {\n          &quot;distance&quot;: {\n            &quot;text&quot;: &quot;94.6 mi&quot;,\n            &quot;value&quot;: 152193\n          },\n          &quot;duration&quot;: {\n            &quot;text&quot;: &quot;1 hour 44 mins&quot;,\n            &quot;value&quot;: 6227\n          },\n          &quot;status&quot;: &quot;OK&quot;\n        },\n        {\n          &quot;distance&quot;: {\n            &quot;text&quot;: &quot;2,878 mi&quot;,\n            &quot;value&quot;: 4632197\n          },\n          &quot;duration&quot;: {\n            &quot;text&quot;: &quot;1 day 18 hours&quot;,\n            &quot;value&quot;: 151772\n          },\n          &quot;status&quot;: &quot;OK&quot;\n        },\n        {\n          &quot;distance&quot;: {\n            &quot;text&quot;: &quot;1,286 mi&quot;,\n            &quot;value&quot;: 2069031\n          },\n          &quot;duration&quot;: {\n            &quot;text&quot;: &quot;18 hours 43 mins&quot;,\n            &quot;value&quot;: 67405\n          },\n          &quot;status&quot;: &quot;OK&quot;\n        },\n        {\n          &quot;distance&quot;: {\n            &quot;text&quot;: &quot;1,742 mi&quot;,\n            &quot;value&quot;: 2802972\n          },\n          &quot;duration&quot;: {\n            &quot;text&quot;: &quot;1 day 2 hours&quot;,\n            &quot;value&quot;: 93070\n          },\n          &quot;status&quot;: &quot;OK&quot;\n        },\n        {\n          &quot;distance&quot;: {\n            &quot;text&quot;: &quot;2,871 mi&quot;,\n            &quot;value&quot;: 4620514\n          },\n          &quot;duration&quot;: {\n            &quot;text&quot;: &quot;1 day 18 hours&quot;,\n            &quot;value&quot;: 152913\n          },\n          &quot;status&quot;: &quot;OK&quot;\n        }\n      ]\n    }\n  ],\n  &quot;status&quot;: &quot;OK&quot;\n}\n</code></pre>\n<p>A lot is happening here. There are objects. There are lists. There are lists of objects which are part of an object. The last thing I'd want to deal with is trying to parse this data only to accidentally get a useless key:value pair like <strong>\"status\": \"OK\".</strong></p><h2 id=\"code-snippet-to-the-rescue\">Code Snippet To The Rescue</h2><p>Let's say we only want the human-readable data from this JSON, which is labeled <em>\"text\"</em> for both distance and duration. We've created a function below dubbed <code>extract_values()</code> to help us resolve this very issue. The idea is that <code>extract_values()</code> is flexible and agnostic, therefore can be imported as a module into any project you might need.</p><pre><code class=\"language-python\"># recursivejson.py\n\ndef extract_values(obj, key):\n    &quot;&quot;&quot;Pull all values of specified key from nested JSON.&quot;&quot;&quot;\n    arr = []\n\n    def extract(obj, arr, key):\n        &quot;&quot;&quot;Recursively search for values of key in JSON tree.&quot;&quot;&quot;\n        if isinstance(obj, dict):\n            for k, v in obj.items():\n                if isinstance(v, (dict, list)):\n                    extract(v, arr, key)\n                elif k == key:\n                    arr.append(v)\n        elif isinstance(obj, list):\n            for item in obj:\n                extract(item, arr, key)\n        return arr\n\n    results = extract(obj, arr, key)\n    return results\n</code></pre>\n<p>We need to pass this function two values:</p><ul><li>A JSON object, such as <code>r.json()</code> from an API request.</li><li>The name of the <strong>key</strong> we're looking to extract values from.</li></ul><pre><code class=\"language-python\">names = extract_values('myjson.json', 'name')\nprint(names)\n</code></pre>\n<p>Regardless of where the key <strong>\"text\"</strong> lives in the JSON, this function returns every value for the instance of <strong>\"key.\" </strong>Here's our function in action:</p><pre><code class=\"language-python\">import requests\nimport API_KEY\nfrom recursivejson import extract_values\n\n\ndef google_api_matrix():\n    &quot;&quot;&quot;Example Google Distance Matrix function.&quot;&quot;&quot;\n    endpoint = &quot;https://maps.googleapis.com/maps/api/distancematrix/json&quot;\n    params = {\n       'units': 'imperial',\n       'key': API_KEY,\n       'origins': &quot;New York City,NY&quot;,\n       'destinations': &quot;Washington,DC|Philadelphia,PA|Santa Barbara,CA|Miami,FL|Austin,TX|Napa Valley,CA&quot;,\n       'transit_mode': 'car',\n    }\n\n   r = requests.get(endpoint, params=params)\n   travel_values = extract_values(r.json(), 'text')\n   return travel_values\n</code></pre>\n<p>Running this function will result in the following output:</p><pre><code class=\"language-python\">['227 mi', '3 hours 54 mins', '94.6 mi', '1 hour 44 mins', '2,878 mi', '1 day 18 hours', '1,286 mi', '18 hours 43 mins', '1,742 mi', '1 day 2 hours', '2,871 mi', '1 day 18 hours']\n</code></pre>\n<p>Oh <em>fiddle me timbers</em>! Because the Google API alternates between <strong>distance </strong>and <strong>trip duration</strong>, every other value alternates between distance and time (can we pause to appreciate this horrible design? There are infinitely better ways to structure this response). Never fear, some simple Python can help us split this list into two lists:</p><pre><code class=\"language-python\">my_values = extract_values(r.json(), 'text')\n\ndurations = my_values[1::2]\ndistances = my_values[2::1]\n\nprint('DURATIONS = ', durations)\nprint('DISTANCES = ', distances)\n</code></pre>\n<p>This will take our one list and split it in to <em>two</em> lists, alternating between even and odd:</p><pre><code class=\"language-python\">DURATIONS = ['3 hours 54 mins', '1 hour 44 mins', '1 day 18 hours', '18 hours 43 mins', '1 day 2 hours', '1 day 18 hours']\nDISTANCES = ['94.6 mi', '1 hour 44 mins', '2,878 mi', '1 day 18 hours', '1,286 mi', '18 hours 43 mins', '1,742 mi', '1 day 2 hours', '2,871 mi', '1 day 18 hours']\n</code></pre>\n<h2 id=\"getting-creative-with-lists\">Getting Creative With Lists</h2><p>A common theme I run in to while extracting lists of values from JSON objects like these is that the lists of values I extract are very much related.  In the above example, for every <em>duration</em> we have an accompanying <em>distance, </em>which is a one-to-one basis. Imagine if we wanted to associate these values somehow?</p><p>To use a better example, I recently I used this <code>exact_values()</code> function to extract lists of column names and their data types from a database schema. As separate lists, the data looked something like this:</p><pre><code class=\"language-python\">column_names = ['index', 'first_name', 'last_name', 'join_date']\ncolumn_datatypes = ['integer', 'string', 'string', 'date']\n</code></pre>\n<p>Clearly these two lists are directly related; the latter is describing the former. How can this be useful? By using Python's <code>zip</code> method!</p><pre><code class=\"language-python\">schema_dict = dict(zip(column_names, column_datatypes))\nprint(schema_dict)\n</code></pre>\n<p>I like to think they call it <em>zip</em> because it's like zipping up a zipper, where each side of the zipper is a list. This output a dictionary where list 1 serves as the keys, and list 2 serves as values:</p><pre><code class=\"language-python\">{\n'index': 'integer', \n'first_name': 'string', \n'last_name':'string',\n'join_date': 'date'\n}\n</code></pre>\n<p>And there you have it folks: a free code snippet to copy and secretly pretend you wrote forever. I've thrown the function up on <a href=\"https://gist.github.com/toddbirchard/b6f86f03f6cf4fc9492ad4349ee7ff8b\">Github Gists</a>, if such a thing pleases you.</p><p>In the meantime, zip it up and zip it out. Zippity-do-da, buh bye.</p>","url":"https://hackersandslackers.com/extract-data-from-complex-json-python/","uuid":"9a494df4-9e13-45ed-8648-efdda21c55a4","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5bbd7ce1b936605163ece407"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673717","title":"Lynx Roundup, October 9th","slug":"lynx-roundup-october-9th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/115@2x.jpg","excerpt":"Recommender system in Python!  Search engine for colors!  Functional Programming jargon!","custom_excerpt":"Recommender system in Python!  Search engine for colors!  Functional Programming jargon!","created_at_pretty":"27 September, 2018","published_at_pretty":"10 October, 2018","updated_at_pretty":"19 October, 2018","created_at":"2018-09-26T22:45:54.000-04:00","published_at":"2018-10-09T22:00:00.000-04:00","updated_at":"2018-10-19T14:40:22.000-04:00","meta_title":"Lynx Roundup, October 9th | Hackers and Slackers","meta_description":"Recommender system in Python!  Search engine for colors!  Functional Programming jargon!","og_description":"Recommender system in Python!  Search engine for colors!  Functional Programming jargon!","og_image":"https://hackersandslackers.com/content/images/lynx/115@2x.jpg","og_title":"Lynx Roundup, October 9th","twitter_description":"Recommender system in Python!  Search engine for colors!  Functional Programming jargon!","twitter_image":"https://hackersandslackers.com/content/images/lynx/115@2x.jpg","twitter_title":"Lynx Roundup, October 9th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://stackabuse.com/creating-a-simple-recommender-system-in-python-using-pandas/\n\nhttps://andyman404.itch.io/chromesthesia\n\nhttps://github.com/hemanth/functional-programming-jargon/blob/master/readme.md\n\nhttps://jakevdp.github.io/blog/2018/09/13/waiting-time-paradox/\n\nhttps://neurosciencenews.com/information-processing-9870/\n\nhttp://jakob.engbloms.se/archives/2841\n\nhttp://nautil.us/issue/63/horizons/my-mom-the-missile-computress","html":"<p></p><p><a href=\"https://stackabuse.com/creating-a-simple-recommender-system-in-python-using-pandas/\">https://stackabuse.com/creating-a-simple-recommender-system-in-python-using-pandas/</a></p><p><a href=\"https://andyman404.itch.io/chromesthesia\">https://andyman404.itch.io/chromesthesia</a></p><p><a href=\"https://github.com/hemanth/functional-programming-jargon/blob/master/readme.md\">https://github.com/hemanth/functional-programming-jargon/blob/master/readme.md</a></p><p><a href=\"https://jakevdp.github.io/blog/2018/09/13/waiting-time-paradox/\">https://jakevdp.github.io/blog/2018/09/13/waiting-time-paradox/</a></p><p><a href=\"https://neurosciencenews.com/information-processing-9870/\">https://neurosciencenews.com/information-processing-9870/</a></p><p><a href=\"http://jakob.engbloms.se/archives/2841\">http://jakob.engbloms.se/archives/2841</a></p><p><a href=\"http://nautil.us/issue/63/horizons/my-mom-the-missile-computress\">http://nautil.us/issue/63/horizons/my-mom-the-missile-computress</a></p>","url":"https://hackersandslackers.com/lynx-roundup-october-9th/","uuid":"bdbd1ba1-60c9-4d5c-bd89-2d7a342a8117","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5bac44625ee4c83af27dda97"}}]}},"pageContext":{"pageNumber":13,"humanPageNumber":14,"skip":156,"limit":12,"numberOfPages":33,"previousPagePath":"/page/13","nextPagePath":"/page/15"}}