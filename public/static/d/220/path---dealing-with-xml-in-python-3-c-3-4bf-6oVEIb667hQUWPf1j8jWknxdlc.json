{"data":{"ghostPost":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673680","title":"Working with XML tree data in Python","slug":"dealing-with-xml-in-python","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/06/xml@2x.jpg","excerpt":"Make use of Python's native XML library to walk through and extract data.","custom_excerpt":"Make use of Python's native XML library to walk through and extract data.","created_at_pretty":"19 June, 2018","published_at_pretty":"19 June, 2018","updated_at_pretty":"15 November, 2018","created_at":"2018-06-19T17:38:18.000-04:00","published_at":"2018-06-19T18:54:16.000-04:00","updated_at":"2018-11-15T03:28:07.000-05:00","meta_title":"Dealing with XML in Python | Hackers and Slackers","meta_description":"Make use of Python's native XML library to walk through and extract data.","og_description":"Make use of Python's native XML library to walk through and extract data.","og_image":"https://hackersandslackers.com/content/images/2018/06/xml@2x.jpg","og_title":"Dealing with XML in Python","twitter_description":"Make use of Python's native XML library to walk through and extract data.","twitter_image":"https://hackersandslackers.com/content/images/2018/06/xml@2x.jpg","twitter_title":"Dealing with XML in Python","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"REST APIs","slug":"restapis","description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","feature_image":null,"meta_description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","meta_title":"Consuming and Building REST APIs | Hackers and Slackers","visibility":"public"},{"name":"Data Engineering","slug":"dataengineering","description":"The systematic collection and transformation of data via the creation of tools and pipelines.","feature_image":null,"meta_description":null,"meta_title":"Data Engineering | Hackers and Slackers","visibility":"public"}],"plaintext":"Life is filled with things we don't want to do; you're a developer so you\nprobably understand this to a higher degree than most people. Sometimes we waste\nweeks of our lives thanks to an unreasonable and unknowledgeable stakeholder.\nOther times, we need to deal with XML trees.\n\nAt some point or another you're going to need to work with an API that returns\ninformation in XML format. \"Sure,\" we might think, \"I'll just import the\nstandard Python XML package, pick up some syntax nuances, and be on my way.\"\nThat's what I thought too. Today we're going to look at said library, the XML\nElementTree [https://docs.python.org/3/library/xml.etree.elementtree.html] \nlibrary, and see firsthand why this might not be the case.\n\nAs always, the purpose of this is to hopefully save somebody pain. Feel free to\nstash this in your back pocket until XML becomes a problem for you; I'm doing\nthe same.\n\nIt Can't be That Bad\nLet's tackle a few things upfront to save a couple hours of confusion.\n\nFirst off, you know how you've been dot notation to transverse object trees?\nYeah, we can't do that with XML. If we're looking for the child  of a parent, \nparent.child  simply does not work (no, parent['child'] doesn't work either). I\nhope you like looping through trees.\n\nPrint the value of an item in an XML tree doesn’t show you that item's value,\nnor does it show children of that item. It instead prints <Element\n'{http://www.example.com/servicemodel/resources}ItemName' at 0x7fadcf3f83b8>,\nwhich is like a Python equivalent of Javascript's [object Object] in terms of\nusefulness. We can use .text  to see the text value instead of an XML element;.\nGood luck on the other thing, though.\n\nGoing Green\nLet's get this over with and plant some XML trees. I'm going to assume we're\nworking from an API response here.\n\nimport xml.etree.ElementTree as ET\n\ne = ET.fromstring(response.content)\n\n\nIf we were reading an XML file, we'd have to read the file and explicitly search\nfor the root. Even though this doesn’t pertain to us, we should still be aware\nof this inconsistency to avoid future confusion:\n\ne = ET.parse('data.xml')\nroot = e.getroot()\n\n\nWhen we loop through this tree, we 'll need to be mindful of the 3 ways we can\ninteract with XML data. Let's use this tree as an example:\n\n<beer name=\"Bud Light\">\n    <flavor>Water</flavor>\n    <type>Frat</type>\n    <rank>0</rank>\n</beer>\n<beer name=\"PBR\">\n    <flavor>Urine</flavor>\n    <type>Ironic</type>\n    <rank>1</rank>\n</beer>\n<beer name=\"IPA\">\n    <flavor>Pretentious</flavor>\n    <type>Hipster</type>\n    <rank>2</rank>\n</beer>\n\n\n * item.tag  returns the name of the tag. Running this on the first item would\n   return beer, as well as an associated URI.\n * item.attrib()  returns the attributes of the selected item ({'name': 'Bud\n   Light'})\n * item.text  returns the value of text between the open and close tags, if\n   exists.\n\nFinding Stuff\nThere's a few ways to find the data we need in an XML tree, the most obvious of\nwhich would be searching by index. item[0][1]  works, although I have a feeling\nindex-based searching isn't going to be that useful for you.\n\nThe .find and .findall Methods\nOur library has built in .find  and .findall  methods for us to work through a\ntree (returns wither one or all records, as you might have guessed). We search\nby element name as part of a loop:\n\nfor beer in e.findall('beer'):\n    name = beer.get('name') # equivalent to .attrib() in this case\n    flavor = beer.find('flavor').text\n    print(name, \" is \", flavor)\n    \n    \nBud Light is Water    \nPBR is Urine\nIPA is Pretentious\n\n\nThe .iter() Method\nWe can loop through all occurrences of a n element name by using .iter().\n\nfor beertype in e.findall('beer'):\n    print(beertype)\n    \n Frat\n Ironic\n Hipster\n\n\nUsing Some Sort of God-Awful Loop\nIf you're like me you may just skip reading all the documentation altogether,\nget obscenely frustrated, and create some garbage like this:\n\nfor beer in e:\n    for properties in beer:\n          if item.tag == \"{http://www.example.com/beermodel/resources}Type\":\n               print(type)\n                   \nFrat\nIronic\nHipster\n\n\n\nNow that's pretty awful, but I can't tell you had to live your life. You do you.\n\nIn Conclusion\nLook, XML just sucks: don't use it if you don't have to. If you do, save\nyourself some time by coming back to this page.","html":"<p>Life is filled with things we don't want to do; you're a developer so you probably understand this to a higher degree than most people. Sometimes we waste weeks of our lives thanks to an unreasonable and unknowledgeable stakeholder. Other times, we need to deal with XML trees.</p><p>At some point or another you're going to need to work with an API that returns information in XML format. \"Sure,\" we might think, \"I'll just import the standard Python XML package, pick up some syntax nuances, and be on my way.\" That's what I thought too. Today we're going to look at said library, the <a href=\"https://docs.python.org/3/library/xml.etree.elementtree.html\">XML ElementTree</a> library, and see firsthand why this might not be the case.</p><p>As always, the purpose of this is to hopefully save somebody pain. Feel free to stash this in your back pocket until XML becomes a problem for you; I'm doing the same.</p><h2 id=\"it-can-t-be-that-bad\">It Can't be That Bad</h2><p>Let's tackle a few things upfront to save a couple hours of confusion.</p><p>First off, you know how you've been dot notation to transverse object trees? Yeah, we can't do that with XML. If we're looking for the <em>child</em> of a <em>parent</em>, <strong>parent.child</strong> simply does not work (no, parent['child'] doesn't work either). I hope you like looping through trees.</p><p>Print the value of an item in an XML tree doesn’t show you that item's value, nor does it show children of that item. It instead prints <code>&lt;Element '{http://www.example.com/servicemodel/resources}ItemName' at 0x7fadcf3f83b8&gt;</code>, which is like a Python equivalent of Javascript's [object Object] in terms of usefulness. We can use <strong>.text</strong> to see the text value instead of an XML element;. Good luck on the other thing, though.</p><h2 id=\"going-green\">Going Green</h2><p>Let's get this over with and plant some XML trees. I'm going to assume we're working from an API response here.</p><pre><code class=\"language-python\">import xml.etree.ElementTree as ET\n\ne = ET.fromstring(response.content)\n</code></pre>\n<p>If we were reading an XML file, we'd have to read the file and explicitly search for the root. Even though this doesn’t pertain to us, we should still be aware of this inconsistency to avoid future confusion:</p><pre><code class=\"language-python\">e = ET.parse('data.xml')\nroot = e.getroot()\n</code></pre>\n<p>When we loop through this tree, we 'll need to be mindful of the 3 ways we can interact with XML data. Let's use this tree as an example:</p><pre><code class=\"language-xml\">&lt;beer name=&quot;Bud Light&quot;&gt;\n    &lt;flavor&gt;Water&lt;/flavor&gt;\n    &lt;type&gt;Frat&lt;/type&gt;\n    &lt;rank&gt;0&lt;/rank&gt;\n&lt;/beer&gt;\n&lt;beer name=&quot;PBR&quot;&gt;\n    &lt;flavor&gt;Urine&lt;/flavor&gt;\n    &lt;type&gt;Ironic&lt;/type&gt;\n    &lt;rank&gt;1&lt;/rank&gt;\n&lt;/beer&gt;\n&lt;beer name=&quot;IPA&quot;&gt;\n    &lt;flavor&gt;Pretentious&lt;/flavor&gt;\n    &lt;type&gt;Hipster&lt;/type&gt;\n    &lt;rank&gt;2&lt;/rank&gt;\n&lt;/beer&gt;\n</code></pre>\n<ul><li><strong>item.tag</strong> returns the name of the tag. Running this on the first item would return <em>beer</em>, as well as an associated URI.</li><li><strong>item.attrib()</strong> returns the attributes of the selected item (<em>{'name'</em>: <em>'Bud Light'</em>})</li><li><strong>item.text</strong> returns the value of text between the open and close tags, if exists.</li></ul><h2 id=\"finding-stuff\">Finding Stuff</h2><p>There's a few ways to find the data we need in an XML tree, the most obvious of which would be searching by index. <strong>item[0][1]</strong> works, although I have a feeling index-based searching isn't going to be that useful for you.</p><h3 id=\"the-find-and-findall-methods\">The .find and .findall Methods</h3><p>Our library has built in <strong>.find</strong> and <strong>.findall</strong> methods for us to work through a tree (returns wither one or all records, as you might have guessed). We search by element name as part of a loop:</p><pre><code class=\"language-python\">for beer in e.findall('beer'):\n    name = beer.get('name') # equivalent to .attrib() in this case\n    flavor = beer.find('flavor').text\n    print(name, &quot; is &quot;, flavor)\n    \n    \nBud Light is Water    \nPBR is Urine\nIPA is Pretentious\n</code></pre>\n<h3 id=\"the-iter-method\">The .iter() Method</h3><p>We can loop through all occurrences of a n element name by using <strong>.iter()</strong>.</p><pre><code class=\"language-python\">for beertype in e.findall('beer'):\n    print(beertype)\n    \n Frat\n Ironic\n Hipster\n</code></pre>\n<h3 id=\"using-some-sort-of-god-awful-loop\">Using Some Sort of God-Awful Loop</h3><p>If you're like me you may just skip reading all the documentation altogether, get obscenely frustrated, and create some garbage like this:</p><pre><code class=\"language-python\">for beer in e:\n    for properties in beer:\n          if item.tag == &quot;{http://www.example.com/beermodel/resources}Type&quot;:\n               print(type)\n                   \nFrat\nIronic\nHipster\n\n</code></pre>\n<p>Now that's pretty awful, but I can't tell you had to live your life. You do you.</p><h2 id=\"in-conclusion\">In Conclusion</h2><p>Look, XML just sucks: don't use it if you don't have to. If you do, save yourself some time by coming back to this page.</p>","url":"https://hackersandslackers.com/dealing-with-xml-in-python/","uuid":"c28dd935-2162-4d1e-ac2b-4147ee689094","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b2977caded32f5af8fd673e"}},"pageContext":{"slug":"dealing-with-xml-in-python"}}