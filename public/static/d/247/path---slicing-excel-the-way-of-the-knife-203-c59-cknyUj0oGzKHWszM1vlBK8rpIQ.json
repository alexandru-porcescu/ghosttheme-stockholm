{"data":{"ghostPost":{"id":"Ghost__Post__5c12d7bfe875ad7bb867369c","title":"Slicing Excel: The Way of The Knife","slug":"slicing-excel-the-way-of-the-knife","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/07/knife@2x.jpg","excerpt":"Slicing your Excel data to be presentable for the less tech-savvy.","custom_excerpt":"Slicing your Excel data to be presentable for the less tech-savvy.","created_at_pretty":"04 July, 2018","published_at_pretty":"05 July, 2018","updated_at_pretty":"21 January, 2019","created_at":"2018-07-04T00:23:29.000-04:00","published_at":"2018-07-05T09:05:47.000-04:00","updated_at":"2019-01-21T14:22:14.000-05:00","meta_title":"Slicing Excel: The Way of The Knife | Hackers and Slackers","meta_description":"Slicing your Excel data to be presentable for the less tech-savvy.","og_description":"Slicing your Excel data to be presentable for the less tech-savvy","og_image":"https://hackersandslackers.com/content/images/2018/07/knife@2x.jpg","og_title":"Slicing Excel: The Way of The Knife","twitter_description":"Slicing your Excel data to be presentable for the less tech-savvy","twitter_image":"https://hackersandslackers.com/content/images/2018/07/knife@2x.jpg","twitter_title":"Slicing Excel: The Way of The Knife","authors":[{"name":"Max Mileaf","slug":"snacks","bio":"One of three therapists in the known universe who knows how to use a computer. Finds meaning in highly protected data, in a cave, utilizing nothing but a box of scraps. ","profile_image":"https://hackersandslackers.com/content/images/2019/03/max2.jpg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Max Mileaf","slug":"snacks","bio":"One of three therapists in the known universe who knows how to use a computer. Finds meaning in highly protected data, in a cave, utilizing nothing but a box of scraps. ","profile_image":"https://hackersandslackers.com/content/images/2019/03/max2.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},"tags":[{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},{"name":"#Adventures in Excel","slug":"adventures-in-excel","description":"Excel secrets and magic. The kind of industry knowledge that could put financial analysts out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"internal"}],"plaintext":"If you've been following along with the posts in this series, and you've been\nputting some of the scenarios into practice, you've now crossed a crucial\njuncture in your never ending quest to master the bloated beast that is Excel.\nTo put things in perspective, if you've conquered all the quests that I've set\nyou upon, you should now be able to:\n\n* Open up and add macro code into an Excel Worksheet \n* Utilize lookup functions (particularly Index(Match)) to compare and validate\ndata sets \n* Build a complex formula\n* Utilize IF/AND/and OR statements in order to manipulate data and finally... \n* Understand your role in the data underground\n\nIf there was any running theme among the posts in the past, it's that if you're\nin the position in which you're forced to utilize Excel in order to analyze\ndata, you're probably grabbing a dirty version of the data-set from an\nintermediary platform (such as Tableau or Business Objects) built by a developer\nwho isn't informed as to how the end user is going to use the data. \n\nYour mission, whether you choose to accept it or not is essentially to take data\nfrom people who know data and don't know the business, and turn it into data for\npeople who know business and don't understand numbers.\nIf you're wondering if perhaps you're in this role and don't know it yet,\nthere's a simple two question litmus test\n\n=IF(AND(COLORCODING,OR(SLICE,DICE)),\"Analyst\",\"Something Else\"\n\nFor those of you who are just joining the party, that essentially says that if:\n1. If a superior of yours has ever asked you to \"slice\" and or \"dice\" the data \n2. If you're asked to color code things arbitrarily. Then you might be an\nanalyst.\n\nNow, while you're sitting at your desk (in what's most likely an Aeron chair)\nand you read the above qualifiers, the first thought that pops into your mind\nshould be: \"WTF does slice and dice mean when it comes to data analysis?\" The\nanswer may surprise you in that it's not just meaningless business lingo, it's\nactually a pretty good explanation of what you're going to be doing A LOT of\n(but fear not, in all likelihood, your boss didn't mean it like that due to what\nI'd like to call the leveraging of the synergy paradigm).\n\n\nEssentially, when one attempts to slap-chop a \"data dump\" (in the computer\npatois, that's how you say data that's pulled straight from the source), it\noften involves as the first step \"normalizing\" the data so that the format is\nlogical, and is in a position in which you can start employing some of the\nwizardry that we've been speaking about.\nThe normalization process often involves only a few steps, all of which are\nquite easy, but EXTREMELY un-intuitive, and if you follow these steps, you'll\neither be done with the normalization process, or you'll be able to figure out\nhow (all data dumps are dirty, but not all shit is created equal).\n\n1. Ensure that your data has headings!\na. Headings are essential not just because they're a logical way to organize  \n your variables, but they're are also REQUIRED to build a pivot table down the\nroad, if even one of your columns doesn't have a heading, Excel won't play nice!\n \n2. Ensure that your headings don't repeat themselves\na. While this may seem obvious, if a heading repeats itself, Excel won't pivot\nproperly, won't graph correctly AND won't upload properly in external tools\n(such as Microsoft Access, which we'll explore in a later post!) \n3. Ensure that multiple sources are all located on the same Excel workbook\n(basically, if you're pulling data from multiple places, that you paste them all\ninto the same Excel file).\na. Note that since Excel 2007, this step isn't 100% necessary, but it makes\nthings much faster in both ease of use, and in the computational sense. \n4. And finally, ensure that your variables are in the correct format...which is\nwhat we'll focus on for the rest of this post.\n\nOften, data dumps combine multiple variables into one \"string\" (a set of\ncharacters with no other format) most often last names, first names, and ID\nnumbers which is fine when you're trying to figure out how many\nSmith,Bob,8675309s exist in your data...so basically useless on it's own. This\nbrings us to the title of this post: how we're going to slice up (or \"Parse\")\nthis string so that it's useful to us. \n\nThere are a few was of going about this, but in my experience the most useful is\nsome combination of the following formulae:\n=LEFT  which returns a specified number of characters from the start of a\nstring. \n=RIGHT  which returns a specified number of characters from the end of the\nstring. \n=MID   which returns a specified number of characters from a defined point in\nthe string \n=LEN  which returns the number of characters in the string, and \n=FIND  which returns the location of a specified character or string within a\nstring. Just a word to the wise, starting from the beginning is always 0, not 1\nin any of these examples. \n\nAssuming you've got some android in you, you notice that =left  and =right  are\nbasically useless if you need to break up a string (but can be useful if you\nwind up with a data dump that gives you a preset amount of garbage to throw away\neach time, or as a second step in this process). Instead, we're going to\nleverage the fact that Data Dumps are generally exported in Comma Separated\nFormat (CSV) which means that there are going to be a lot of commas for you to\nset as \"flags\" where you want to break things up. Take the example I gave you\nbefore: Smith,Bob,8675309s. \nThis is actually a particularly mean example because you're going to need to\nbreak it into three steps for which there are multiple solutions, simply because\nthere's more than one comma to \"put your flag down\". One way you can go about it\nis as such: \n\nFirst use the \"mid\" function alongside the \"find\" command in order to separate\nthe last name from the first name and ID, like so: \n=MID(A1,FIND(\",\",A1)+1,LEN(A1))\nThe result of this will be Bob,8675309, and the reason why the +1 is included is\nso that we don't include the comma (which would start this whole circus again)\nFrom there, you can repeat the steps on the newly created Bob,8675309 in order\nto obtain the ID.\n\nOnce you have the ID number, if you return to the original string and perform \n=left(A1(find(\",\",A1)-1)  (the -1 removes the first comma as opposed to the\nsecond) you'll get \"Smith\"\n\nFinally, you can go to the Bob,8675309 string (which we'll say is located in B1)\nand perform the same steps in order to get \"Bob\" all by itself. \n\nWith all that being said, until we get a bit more advanced (yes, you can do this\nin fewer steps), assume you need one formula per comma in order to \"parse\" each\nsection, and you'll find your way. The benefit of breaking it down this way is\nthat you can drag the formula down and it'll perform the exact same steps\nregardless of how long the initial string is, as long as it has 3 commas. \n\nSo, what have we learned? \n\n 1. We've learned to slice up data dumps\n 2. We've learned to dice up the resultant strings and finally\n 3. We've learned how to take a small bit of useless garbage and turn it into\n    variables that we can use in further analysis via slicing and dicing. \n\nSo you see? Perhaps your boss knew something after all when they were asking you\nif you knew how to slice and dice data... juuuuuust kidding. \n\nNow that you have a basic fund of knowledge (and if you don't I implore you to\nread the rest of the Adventures in Excel series), the next few lessons are going\nto go into some of the crazier stuff that I've personally been asked to do\n(which my other friends on this blog could do in 5 minutes using something other\nthan Excel) and you'll learn to start a fire with some flint and a bunch of\nsticks. \n\n-Snacks out.","html":"<p>If you've been following along with the posts in this series, and you've been putting some of the scenarios into practice, you've now crossed a crucial juncture in your never ending quest to master the bloated beast that is Excel. To put things in perspective, if you've conquered all the quests that I've set you upon, you should now be able to:<br><br>* Open up and add macro code into an Excel Worksheet <br>* Utilize lookup functions (particularly Index(Match)) to compare and validate data sets <br>* Build a complex formula<br>* Utilize IF/AND/and OR statements in order to manipulate data and finally... <br>* Understand your role in the data underground<br><br>If there was any running theme among the posts in the past, it's that if you're in the position in which you're forced to utilize Excel in order to analyze data, you're probably grabbing a dirty version of the data-set from an intermediary platform (such as Tableau or Business Objects) built by a developer who isn't informed as to how the end user is going to use the data. </p><p>Your mission, whether you choose to accept it or not is essentially to take data from people who know data and don't know the business, and turn it into data for people who know business and don't understand numbers.<br>If you're wondering if perhaps you're in this role and don't know it yet, there's a simple two question litmus test</p><p><code>=IF(AND(COLORCODING,OR(SLICE,DICE)),\"Analyst\",\"Something Else\"</code><br><br>For those of you who are just joining the party, that essentially says that if:<br> 1. If a superior of yours has ever asked you to \"slice\" and or \"dice\" the data <br>2. If you're asked to color code things arbitrarily. Then you might be an analyst.<br><br>Now, while you're sitting at your desk (in what's most likely an Aeron chair) and you read the above qualifiers, the first thought that pops into your mind should be: \"WTF does slice and dice mean when it comes to data analysis?\" The answer may surprise you in that it's not just meaningless business lingo, it's actually a pretty good explanation of what you're going to be doing A LOT of (but fear not, in all likelihood, your boss didn't mean it like that due to what I'd like to call the <em><strong>leveraging of the synergy paradigm</strong></em>).</p><p><br>Essentially, when one attempts to slap-chop a \"data dump\" (in the computer patois, that's how you say data that's pulled straight from the source), it often involves as the first step \"normalizing\" the data so that the format is logical, and is in a position in which you can start employing some of the wizardry that we've been speaking about.<br>The normalization process often involves only a few steps, all of which are quite easy, but EXTREMELY un-intuitive, and if you follow these steps, you'll either be done with the normalization process, or you'll be able to figure out how (all data dumps are dirty, but not all shit is created equal).<br><br> 1. Ensure that your data has headings!    <br>\ta. Headings are essential not just because they're a logical way to organize    your variables, but they're are also REQUIRED to build a pivot table down the road, if even one of your columns doesn't have a heading, Excel won't play nice! <br>2. Ensure that your headings don't repeat themselves    <br>\ta. While this may seem obvious, if a heading repeats itself, Excel won't pivot properly, won't graph correctly AND won't upload properly in external tools (such as Microsoft Access, which we'll explore in a later post!) <br>3. Ensure that multiple sources are all located on the same Excel workbook (basically, if you're pulling data from multiple places, that you paste them all into the same Excel file).    <br>\ta. Note that since Excel 2007, this step isn't 100% necessary, but it makes things much faster in both ease of use, and in the computational sense. <br>4. And finally, ensure that your variables are in the correct format...which is what we'll focus on for the rest of this post.<br><br>Often, data dumps combine multiple variables into one \"string\" (a set of characters with no other format) most often last names, first names, and ID numbers which is fine when you're trying to figure out how many Smith,Bob,8675309s exist in your data...so basically useless on it's own. This brings us to the title of this post: how we're going to slice up (or \"Parse\") this string so that it's useful to us. <br><br>There are a few was of going about this, but in my experience the most useful is some combination of the following formulae:<br> <code>=LEFT</code> which returns a specified number of characters from the start of a string. <br><code>=RIGHT</code> which returns a specified number of characters from the end of the string. <br><code>=MID</code>  which returns a specified number of characters from a defined point in the string <br><code>=LEN</code> which returns the number of characters in the string, and <br><code>=FIND</code> which returns the location of a specified character or string within a string. Just a word to the wise, starting from the beginning is always 0, not 1 in any of these examples. <br><br>Assuming you've got some android in you, you notice that <code>=left</code> and <code>=right</code> are basically useless if you need to break up a string (but can be useful if you wind up with a data dump that gives you a preset amount of garbage to throw away each time, or as a second step in this process). Instead, we're going to leverage the fact that Data Dumps are generally exported in Comma Separated Format (CSV) which means that there are going to be a lot of commas for you to set as \"flags\" where you want to break things up. Take the example I gave you before: Smith,Bob,8675309s. <br>This is actually a particularly mean example because you're going to need to break it into three steps for which there are multiple solutions, simply because there's more than one comma to \"put your flag down\". One way you can go about it is as such: </p><p>First use the \"mid\" function alongside the \"find\" command in order to separate the last name from the first name and ID, like so: <code>=MID(A1,FIND(\",\",A1)+1,LEN(A1))</code><br>The result of this will be Bob,8675309, and the reason why the +1 is included is so that we don't include the comma (which would start this whole circus again)<br>From there, you can repeat the steps on the newly created Bob,8675309 in order to obtain the ID.</p><p>Once you have the ID number, if you return to the original string and perform <code>=left(A1(find(\",\",A1)-1)</code> (the -1 removes the first comma as opposed to the second) you'll get \"Smith\"<br><br>Finally, you can go to the Bob,8675309 string (which we'll say is located in B1) and perform the same steps in order to get \"Bob\" all by itself. </p><p>With all that being said, until we get a bit more advanced (yes, you can do this in fewer steps), assume you need one formula per comma in order to \"parse\" each section, and you'll find your way. The benefit of breaking it down this way is that you can drag the formula down and it'll perform the exact same steps regardless of how long the initial string is, as long as it has 3 commas. <br><br>So, what have we learned? </p><ol><li>We've learned to slice up data dumps</li><li>We've learned to dice up the resultant strings and finally</li><li>We've learned how to take a small bit of useless garbage and turn it into variables that we can use in further analysis via slicing and dicing. </li></ol><p>So you see? Perhaps your boss knew something after all when they were asking you if you knew how to slice and dice data... juuuuuust kidding. </p><p>Now that you have a basic fund of knowledge (and if you don't I implore you to read the rest of the Adventures in Excel series), the next few lessons are going to go into some of the crazier stuff that I've personally been asked to do (which my other friends on this blog could do in 5 minutes using something other than Excel) and you'll learn to start a fire with some flint and a bunch of sticks. <br><br>-Snacks out. </p>","url":"https://hackersandslackers.com/slicing-excel-the-way-of-the-knife/","uuid":"5e29efb4-a83c-4d03-8ec9-ffa1fb0bd5b2","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b3c4bc1d0ac8a143588f365"}},"pageContext":{"slug":"slicing-excel-the-way-of-the-knife"}}