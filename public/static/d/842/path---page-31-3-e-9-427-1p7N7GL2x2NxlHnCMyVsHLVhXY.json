{"data":{"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673652","title":"Build Custom Widgets For Your Ghost Blog","slug":"build-custom-widgets-for-your-ghost-blog","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/04/ghost-1.jpg","excerpt":"Get started customizing your themes with simple widgets.","custom_excerpt":"Get started customizing your themes with simple widgets.","created_at_pretty":"15 May, 2018","published_at_pretty":"15 May, 2018","updated_at_pretty":"10 April, 2019","created_at":"2018-05-15T18:53:29.000-04:00","published_at":"2018-05-15T19:27:56.000-04:00","updated_at":"2019-04-09T20:47:59.000-04:00","meta_title":"Build Custom Widgets For Your Ghost Blog | Hackers and Slackers","meta_description":"Learn to build custom widgets for your Ghost blog with Handlebars. Easily implement common widgets such as recent posts, related posts, contributors, etc.","og_description":"Learn to build custom widgets for your Ghost blog with Handlebars. Easily implement common widgets such as recent posts, related posts, contributors, etc.","og_image":"https://hackersandslackers.com/content/images/2019/04/ghost-1-2.jpg","og_title":"Build Custom Widgets For Your Ghost Blog","twitter_description":"Learn to build custom widgets for your Ghost blog with Handlebars. Easily implement common widgets such as recent posts, related posts, contributors, etc.","twitter_image":"https://hackersandslackers.com/content/images/2019/04/ghost-1-1.jpg","twitter_title":"Build Custom Widgets For Your Ghost Blog","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"ExpressJS","slug":"expressjs","description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch as a simplistic Express app can evolve into a beautiful monstrosity.","feature_image":null,"meta_description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch a simplistic Express app can evolve into a beautiful monstrosity.","meta_title":"ExpressJS Framework | Hackers and Slackers","visibility":"public"},"tags":[{"name":"ExpressJS","slug":"expressjs","description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch as a simplistic Express app can evolve into a beautiful monstrosity.","feature_image":null,"meta_description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch a simplistic Express app can evolve into a beautiful monstrosity.","meta_title":"ExpressJS Framework | Hackers and Slackers","visibility":"public"},{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},{"name":"Frontend","slug":"frontend","description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","feature_image":null,"meta_description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","meta_title":"Frontend Development | Hackers and Slackers","visibility":"public"}],"plaintext":"Here at H+S headquarters, we're pretty into the Ghost blogging platform. It's a\nlot like Wordpress, except without everything that sucks about Wordpress. It's a\nNode app, isn't bloated with widgets, is more secure, smarter, prettier, and so\non. If you're a dev looking to get a quick clean CMS running, Ghost is pretty\nmuch a no-brainer.\n\nWhile the platform has been around for a while, the community is still in its\ninfancy as humanity lags behind the curve, with 80% of all sites victim of\nhacking being Wordpress-based. As such, we consider it our duty to share\nknowledge where possible to expedite the growth of independent blogging.\n\nThis is no means a \"getting started with Ghost\" post - Ghost's own documentation\ncovers that quite well. Instead, we'd like to share the source for some of the\nwidgets we've developed over the years to help your theme along.\n\nBasics of Ghost Theme Development\nThere are actually two stacks we should be conscious of when building Ghost\nthemes: the core Ghost stack, and our theme's stack (yes, they are different... \nkind of).\n\nGhost is built on the following core stack:\n\n * NodeJS\n * ExpressJS\n * Handlebars\n * Grunt\n\nCommon to both Ghost's core stack and a Ghost theme stack is Handlebars. \nHandlebars is a templating system which adds logic to otherwise-static HTML\npages. If you're not quite familiar with Handlebars, check out our quick\ntutorial [https://hackersandslackers.com/handlebars-templating-in-expressjs/] \non how to get the gist of things As long as you're familiar with Express and\nHandlebars, you'll be good to go. You could very well\n\nEverything we're doing today happens at the theme  level, which is your\npresentation layer that can be swapped at any given time. Running on your own\ninstallation, the path should look something like:\n\n/var/www/ghost/content/themes/myTheme/\n\n\nThis is where our development will be taking place.\n\nThe Widgets\nA \"widget\" is simply a Handlebars partial saved in your theme. Unlike your\ntraditional monolithic Blog CMS (such as Wordpress), Ghost's widgets must be\nadded to your theme programmatically (I would argue that this is not a bad\nthing).\n\n1. Recent Posts Widget\nThis is a fairly common widget which displays X number of posts ranked by most\nrecent.\n\n<!-- start widget -->\n{{#get \"posts\" limit=\"3\" filter=\"primary_tag:-#hidden\"}}\n  <div class=\"widget\">\n    <h4 class=\"title\">Recent</h4>\n    <div class=\"content recent-post\">\n      {{#foreach posts}}\n        <div class=\"recent-single-post\">\n          <a href=\"{{url}}\" class=\"post-title\">{{title}}</a>\n          <div class=\"date\">{{date format=\"MMMM DD, YYYY\"}}</div>\n        </div>\n      {{/foreach}}\n    </div>\n  </div>\n{{/get}}\n<!-- end widget -->\n\n\n{{#get}}  will fetch posts, tags, or users within the given specifications. The\ntag does nothing on it's own; it simply allows us to work within the context of\ngetting these items, such as how we use {{#foreach posts}}  afterwards.\n\nThe filter  is actually quite powerful, and perhaps a bit under-documented. In\nthis case we're only fetching posts who have a visible main tag: you might want\nto do something like this if you sometimes use 'posts' to make announcements.\n\n{{#foreach posts}}  loops through our 3 posts and will create the result DOM\nstructure the number of times it loops.\n\n2. Related Posts Widget\nSimilar to the above, but only returns posts which share the same main tag:\n\n<!-- start widget -->\n<div class=\"widget\">\n  <h4 class=\"title\">Related</h4>\n  <div class=\"content recent-post\">\n    {{#get \"posts\" limit=\"3\" filter=\"id:-{{id}}+tag:{{primary_tag.slug}}\"}}\n      {{#foreach posts}}\n        <div class=\"recent-single-post\">\n          <a href=\"{{url}}\" class=\"post-title\">{{title}}</a>\n          <div class=\"date\">{{date format=\"MMMM DD\"}}</div>\n        </div>\n      {{/foreach}}\n    {{/get}}\n  </div>\n</div>\n<!-- end widget -->\n\n\n3. Authors Widget\nA surprisingly uncommon widget, we've actually yet to see this on another blog\nyet. This will list all contributors to your blog with their avatar, and link\nback to their author page:\n\n<!-- start widget -->\n<div class=\"widget contributors\">\n  <h3 class=\"title\">Contributors</h3>\n  <div class=\"recent-post\">\n    {{#get \"users\"}}\n      {{#foreach users}}\n        <div class=\"single-author {{slug}}\">\n          {{#unless profile_image}}\n            <a href=\"{{url}}\"><i class=\"fas fa-user\" style=\"width:18px; height:18px; display:inline-block; margin-right:10px;\"></i></a>\n          {{/unless}}\n          {{#if profile_image}}\n            <a href=\"{{url}}\"><img src=\"{{img_url profile_image}}\" alt=\"Author image\" class=\"avi\"></a>\n          {{/if}}\n          <div class=\"info\">\n            <a href=\"{{url}}\" class=\"single-author-name\">{{name}}</a>\n            <span class=\"role\"></span>\n          </div>\n        </div>\n      {{/foreach}}\n    {{/get}}\n  </div>\n</div>\n<!-- end widget -->\n\n\n4. About the Current Author Widget\nThis widget only exists within the context of pages/posts which have an explicit\nauthor. Also supports the use case of multiple authors.\n\n<!-- start about the author -->\n{{#foreach authors}}\n  <div class=\"about-author clearfix widget\">\n    <h4 class=\"title\">Author</h4>\n    {{#if profile_image}}\n      <a href=\"{{url}}\"><img src=\"{{profile_image}}\" alt=\"Author image\" class=\"avatar pull-left\"></a>\n    {{else}}\n      <a href=\"{{url}}\"><img src=\"{{asset \"images/default-user-image.jpg\"}}\" alt=\"Author image\" class=\"avatar pull-left\"></a>\n    {{/if}}\n    <div class=\"details\">\n      <div class=\"author\">\n        {{!--{{t \"About\"}}--}}<a href=\"{{url}}\">{{name}}</a>\n      </div>\n      <div class=\"meta-info\">\n        {{!--<span class=\"post-count\"><i class=\"fal fa-pencil\"></i><a href=\"{{url}}\">{{plural count.posts empty=(t \"0 Post\") singular=(t \"% Post\") plural=(t \"% Posts\")}}</a></span>--}}\n        {{#if location}}\n          <span class=\"location\"><i class=\"fal fa-home\"></i>{{location}}</span>\n        {{/if}}\n        {{#if website}}\n          <span class=\"website\"><a href=\"{{website}}\" targer=\"_BLANK\"><i class=\"fal fa-globe\"></i>{{t \"Website\"}}</a></span>\n        {{/if}}\n        {{#if twitter}}\n          <span class=\"twitter\"><a href=\"{{twitter_url}}\"><i class=\"fab fa-twitter\"></i>{{twitter}}</a></span>\n        {{/if}}\n        {{#if facebook}}\n          <span class=\"facebook\"><a href=\"{{facebook_url}}\"><i class=\"fab fa-facebook\"></i></a></span>\n        {{/if}}\n      </div>\n    </div>\n    {{#if bio}}\n      <div class=\"bio\">\n        {{{bio}}}\n      </div>\n    {{/if}}\n  </div>\n{{/foreach}}\n<!-- end about the author -->\n\n\n5. About all the Authors Widget\nA combination of the above two, this widget displays a blurb and information\nabout all authors who contribute to your publication.\n\n{{#get \"users\" limit=\"all\" include=\"count.posts\" order=\"count.posts desc\" }}\n  {{#foreach users}}\n    <div class=\"about-author clearfix\" style=\"background: url({{cover_img}}) center center; background-color: rgba(255, 255, 255, 0.9); background-blend-mode: overlay;\">\n      {{#if profile_image}}\n        <a href=\"{{url}}\"><img src=\"{{profile_image}}\" alt=\"Author image\" class=\"avatar pull-left\"></a>\n      {{else}}\n        <a href=\"{{url}}\"><img src=\"{{asset \"images/default-user-image.jpg\"}}\" alt=\"Author image\" class=\"avatar pull-left\"></a>\n      {{/if}}\n      <div class=\"details\">\n        <div class=\"author\">\n          <a href=\"{{url}}\">{{name}}</a>\n        </div>\n        <div class=\"meta-info\">\n          <span class=\"post-count\"><i class=\"fal fa-pencil\"></i><a href=\"{{url}}\">{{plural count.posts empty=(t \"0 Post\") singular=(t \"% Post\") plural=(t \"% Posts\")}}</a></span>\n          {{#if location}}\n            <span class=\"location\"><i class=\"fal fa-home\"></i>{{location}}</span>\n          {{/if}}\n          {{#if website}}\n            <span class=\"website\"><i class=\"fal fa-globe\"></i><a href=\"{{website}}\" targer=\"_BLANK\">{{website}}</a></span>\n          {{/if}}\n          {{#if twitter}}\n            <span class=\"twitter\"><i class=\"fab fa-twitter\"></i><a href=\"{{twitter_url}}\">{{twitter}}</a></span>\n          {{/if}}\n          {{#if facebook}}\n            <span class=\"facebook\"><a href=\"{{facebook_url}}\"><i class=\"fab fa-facebook\"></i></a></span>\n          {{/if}}\n        </div>\n      </div>\n      {{#if bio}}\n        <p class=\"bio\">\n          {{{bio}}}\n        </p>\n      {{/if}}\n    </div>\n  {{/foreach}}\n{{/get}}\n\n\nObviously you can customize your widgets as you see fit to include or exclude\nthe information you're looking for. Hopefully these snippets serve as a useful\nreference for some common use cases to help your blog be as baller as possible.","html":"<p>Here at H+S headquarters, we're pretty into the Ghost blogging platform. It's a lot like Wordpress, except without everything that sucks about Wordpress. It's a Node app, isn't bloated with widgets, is more secure, smarter, prettier, and so on. If you're a dev looking to get a quick clean CMS running, Ghost is pretty much a no-brainer.</p><p>While the platform has been around for a while, the community is still in its infancy as humanity lags behind the curve, with 80% of all sites victim of hacking being Wordpress-based. As such, we consider it our duty to share knowledge where possible to expedite the growth of independent blogging.</p><p>This is no means a \"getting started with Ghost\" post - Ghost's own documentation covers that quite well. Instead, we'd like to share the source for some of the widgets we've developed over the years to help your theme along.</p><h2 id=\"basics-of-ghost-theme-development\">Basics of Ghost Theme Development</h2><p>There are actually two stacks we should be conscious of when building Ghost themes: the core Ghost stack, and our theme's stack (yes, they are different... <em>kind of</em>).</p><p>Ghost is built on the following core stack:</p><ul><li>NodeJS</li><li>ExpressJS</li><li>Handlebars</li><li>Grunt</li></ul><p>Common to both Ghost's core stack and a Ghost theme stack is <strong>Handlebars. </strong>Handlebars is a templating system which adds logic to otherwise-static HTML pages. If you're not quite familiar with Handlebars, check out our <a href=\"https://hackersandslackers.com/handlebars-templating-in-expressjs/\">quick tutorial</a> on how to get the gist of things As long as you're familiar with Express and Handlebars, you'll be good to go. You could very well</p><p>Everything we're doing today happens at the <em>theme</em> level, which is your presentation layer that can be swapped at any given time. Running on your own installation, the path should look something like:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">/var/www/ghost/content/themes/myTheme/\n</code></pre>\n<!--kg-card-end: markdown--><p>This is where our development will be taking place.</p><h2 id=\"the-widgets\">The Widgets</h2><p>A \"widget\" is simply a Handlebars partial saved in your theme. Unlike your traditional monolithic Blog CMS (such as Wordpress), Ghost's widgets must be added to your theme programmatically (I would argue that this is not a bad thing).</p><h3 id=\"1-recent-posts-widget\">1. Recent Posts Widget</h3><p>This is a fairly common widget which displays X number of posts ranked by most recent.</p><!--kg-card-begin: markdown--><pre><code class=\"language-handlebars\">&lt;!-- start widget --&gt;\n{{#get &quot;posts&quot; limit=&quot;3&quot; filter=&quot;primary_tag:-#hidden&quot;}}\n  &lt;div class=&quot;widget&quot;&gt;\n    &lt;h4 class=&quot;title&quot;&gt;Recent&lt;/h4&gt;\n    &lt;div class=&quot;content recent-post&quot;&gt;\n      {{#foreach posts}}\n        &lt;div class=&quot;recent-single-post&quot;&gt;\n          &lt;a href=&quot;{{url}}&quot; class=&quot;post-title&quot;&gt;{{title}}&lt;/a&gt;\n          &lt;div class=&quot;date&quot;&gt;{{date format=&quot;MMMM DD, YYYY&quot;}}&lt;/div&gt;\n        &lt;/div&gt;\n      {{/foreach}}\n    &lt;/div&gt;\n  &lt;/div&gt;\n{{/get}}\n&lt;!-- end widget --&gt;\n</code></pre>\n<!--kg-card-end: markdown--><p><code>{{#get}}</code> will fetch posts, tags, or users within the given specifications. The tag does nothing on it's own; it simply allows us to work within the context of getting these items, such as how we use <code>{{#foreach posts}}</code> afterwards.</p><p>The <em>filter</em> is actually quite powerful, and perhaps a bit under-documented. In this case we're only fetching posts who have a visible main tag: you might want to do something like this if you sometimes use 'posts' to make announcements.</p><p><code>{{#foreach posts}}</code> loops through our 3 posts and will create the result DOM structure the number of times it loops.</p><h3 id=\"2-related-posts-widget\">2. Related Posts Widget</h3><p>Similar to the above, but only returns posts which share the same main tag:</p><!--kg-card-begin: markdown--><pre><code class=\"language-handlebars\">&lt;!-- start widget --&gt;\n&lt;div class=&quot;widget&quot;&gt;\n  &lt;h4 class=&quot;title&quot;&gt;Related&lt;/h4&gt;\n  &lt;div class=&quot;content recent-post&quot;&gt;\n    {{#get &quot;posts&quot; limit=&quot;3&quot; filter=&quot;id:-{{id}}+tag:{{primary_tag.slug}}&quot;}}\n      {{#foreach posts}}\n        &lt;div class=&quot;recent-single-post&quot;&gt;\n          &lt;a href=&quot;{{url}}&quot; class=&quot;post-title&quot;&gt;{{title}}&lt;/a&gt;\n          &lt;div class=&quot;date&quot;&gt;{{date format=&quot;MMMM DD&quot;}}&lt;/div&gt;\n        &lt;/div&gt;\n      {{/foreach}}\n    {{/get}}\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;!-- end widget --&gt;\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"3-authors-widget\">3. Authors Widget</h3><p>A surprisingly uncommon widget, we've actually yet to see this on another blog yet. This will list all contributors to your blog with their avatar, and link back to their author page:</p><!--kg-card-begin: markdown--><pre><code class=\"language-handlebars\">&lt;!-- start widget --&gt;\n&lt;div class=&quot;widget contributors&quot;&gt;\n  &lt;h3 class=&quot;title&quot;&gt;Contributors&lt;/h3&gt;\n  &lt;div class=&quot;recent-post&quot;&gt;\n    {{#get &quot;users&quot;}}\n      {{#foreach users}}\n        &lt;div class=&quot;single-author {{slug}}&quot;&gt;\n          {{#unless profile_image}}\n            &lt;a href=&quot;{{url}}&quot;&gt;&lt;i class=&quot;fas fa-user&quot; style=&quot;width:18px; height:18px; display:inline-block; margin-right:10px;&quot;&gt;&lt;/i&gt;&lt;/a&gt;\n          {{/unless}}\n          {{#if profile_image}}\n            &lt;a href=&quot;{{url}}&quot;&gt;&lt;img src=&quot;{{img_url profile_image}}&quot; alt=&quot;Author image&quot; class=&quot;avi&quot;&gt;&lt;/a&gt;\n          {{/if}}\n          &lt;div class=&quot;info&quot;&gt;\n            &lt;a href=&quot;{{url}}&quot; class=&quot;single-author-name&quot;&gt;{{name}}&lt;/a&gt;\n            &lt;span class=&quot;role&quot;&gt;&lt;/span&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      {{/foreach}}\n    {{/get}}\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;!-- end widget --&gt;\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"4-about-the-current-author-widget\">4. About the Current Author Widget</h3><p>This widget only exists within the context of pages/posts which have an explicit author. Also supports the use case of multiple authors.</p><!--kg-card-begin: markdown--><pre><code class=\"language-handlebars\">&lt;!-- start about the author --&gt;\n{{#foreach authors}}\n  &lt;div class=&quot;about-author clearfix widget&quot;&gt;\n    &lt;h4 class=&quot;title&quot;&gt;Author&lt;/h4&gt;\n    {{#if profile_image}}\n      &lt;a href=&quot;{{url}}&quot;&gt;&lt;img src=&quot;{{profile_image}}&quot; alt=&quot;Author image&quot; class=&quot;avatar pull-left&quot;&gt;&lt;/a&gt;\n    {{else}}\n      &lt;a href=&quot;{{url}}&quot;&gt;&lt;img src=&quot;{{asset &quot;images/default-user-image.jpg&quot;}}&quot; alt=&quot;Author image&quot; class=&quot;avatar pull-left&quot;&gt;&lt;/a&gt;\n    {{/if}}\n    &lt;div class=&quot;details&quot;&gt;\n      &lt;div class=&quot;author&quot;&gt;\n        {{!--{{t &quot;About&quot;}}--}}&lt;a href=&quot;{{url}}&quot;&gt;{{name}}&lt;/a&gt;\n      &lt;/div&gt;\n      &lt;div class=&quot;meta-info&quot;&gt;\n        {{!--&lt;span class=&quot;post-count&quot;&gt;&lt;i class=&quot;fal fa-pencil&quot;&gt;&lt;/i&gt;&lt;a href=&quot;{{url}}&quot;&gt;{{plural count.posts empty=(t &quot;0 Post&quot;) singular=(t &quot;% Post&quot;) plural=(t &quot;% Posts&quot;)}}&lt;/a&gt;&lt;/span&gt;--}}\n        {{#if location}}\n          &lt;span class=&quot;location&quot;&gt;&lt;i class=&quot;fal fa-home&quot;&gt;&lt;/i&gt;{{location}}&lt;/span&gt;\n        {{/if}}\n        {{#if website}}\n          &lt;span class=&quot;website&quot;&gt;&lt;a href=&quot;{{website}}&quot; targer=&quot;_BLANK&quot;&gt;&lt;i class=&quot;fal fa-globe&quot;&gt;&lt;/i&gt;{{t &quot;Website&quot;}}&lt;/a&gt;&lt;/span&gt;\n        {{/if}}\n        {{#if twitter}}\n          &lt;span class=&quot;twitter&quot;&gt;&lt;a href=&quot;{{twitter_url}}&quot;&gt;&lt;i class=&quot;fab fa-twitter&quot;&gt;&lt;/i&gt;{{twitter}}&lt;/a&gt;&lt;/span&gt;\n        {{/if}}\n        {{#if facebook}}\n          &lt;span class=&quot;facebook&quot;&gt;&lt;a href=&quot;{{facebook_url}}&quot;&gt;&lt;i class=&quot;fab fa-facebook&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;\n        {{/if}}\n      &lt;/div&gt;\n    &lt;/div&gt;\n    {{#if bio}}\n      &lt;div class=&quot;bio&quot;&gt;\n        {{{bio}}}\n      &lt;/div&gt;\n    {{/if}}\n  &lt;/div&gt;\n{{/foreach}}\n&lt;!-- end about the author --&gt;\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"5-about-all-the-authors-widget\">5. About all the Authors Widget</h3><p>A combination of the above two, this widget displays a blurb and information about all authors who contribute to your publication.</p><!--kg-card-begin: markdown--><pre><code class=\"language-handlebars\">{{#get &quot;users&quot; limit=&quot;all&quot; include=&quot;count.posts&quot; order=&quot;count.posts desc&quot; }}\n  {{#foreach users}}\n    &lt;div class=&quot;about-author clearfix&quot; style=&quot;background: url({{cover_img}}) center center; background-color: rgba(255, 255, 255, 0.9); background-blend-mode: overlay;&quot;&gt;\n      {{#if profile_image}}\n        &lt;a href=&quot;{{url}}&quot;&gt;&lt;img src=&quot;{{profile_image}}&quot; alt=&quot;Author image&quot; class=&quot;avatar pull-left&quot;&gt;&lt;/a&gt;\n      {{else}}\n        &lt;a href=&quot;{{url}}&quot;&gt;&lt;img src=&quot;{{asset &quot;images/default-user-image.jpg&quot;}}&quot; alt=&quot;Author image&quot; class=&quot;avatar pull-left&quot;&gt;&lt;/a&gt;\n      {{/if}}\n      &lt;div class=&quot;details&quot;&gt;\n        &lt;div class=&quot;author&quot;&gt;\n          &lt;a href=&quot;{{url}}&quot;&gt;{{name}}&lt;/a&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;meta-info&quot;&gt;\n          &lt;span class=&quot;post-count&quot;&gt;&lt;i class=&quot;fal fa-pencil&quot;&gt;&lt;/i&gt;&lt;a href=&quot;{{url}}&quot;&gt;{{plural count.posts empty=(t &quot;0 Post&quot;) singular=(t &quot;% Post&quot;) plural=(t &quot;% Posts&quot;)}}&lt;/a&gt;&lt;/span&gt;\n          {{#if location}}\n            &lt;span class=&quot;location&quot;&gt;&lt;i class=&quot;fal fa-home&quot;&gt;&lt;/i&gt;{{location}}&lt;/span&gt;\n          {{/if}}\n          {{#if website}}\n            &lt;span class=&quot;website&quot;&gt;&lt;i class=&quot;fal fa-globe&quot;&gt;&lt;/i&gt;&lt;a href=&quot;{{website}}&quot; targer=&quot;_BLANK&quot;&gt;{{website}}&lt;/a&gt;&lt;/span&gt;\n          {{/if}}\n          {{#if twitter}}\n            &lt;span class=&quot;twitter&quot;&gt;&lt;i class=&quot;fab fa-twitter&quot;&gt;&lt;/i&gt;&lt;a href=&quot;{{twitter_url}}&quot;&gt;{{twitter}}&lt;/a&gt;&lt;/span&gt;\n          {{/if}}\n          {{#if facebook}}\n            &lt;span class=&quot;facebook&quot;&gt;&lt;a href=&quot;{{facebook_url}}&quot;&gt;&lt;i class=&quot;fab fa-facebook&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;\n          {{/if}}\n        &lt;/div&gt;\n      &lt;/div&gt;\n      {{#if bio}}\n        &lt;p class=&quot;bio&quot;&gt;\n          {{{bio}}}\n        &lt;/p&gt;\n      {{/if}}\n    &lt;/div&gt;\n  {{/foreach}}\n{{/get}}\n</code></pre>\n<!--kg-card-end: markdown--><p>Obviously you can customize your widgets as you see fit to include or exclude the information you're looking for. Hopefully these snippets serve as a useful reference for some common use cases to help your blog be as baller as possible.</p>","url":"https://hackersandslackers.com/build-custom-widgets-for-your-ghost-blog/","uuid":"a1d550bc-034d-4c2c-85f0-ff434f400d8c","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5afb64e93d0bf921d8b8804f"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673650","title":"Lynx Roundup, May 11th","slug":"lynx-roundup-may-11th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx19@2x.jpg","excerpt":"Daily roundup of Data Science news around the industry, 5/11/2018.","custom_excerpt":"Daily roundup of Data Science news around the industry, 5/11/2018.","created_at_pretty":"11 May, 2018","published_at_pretty":"11 May, 2018","updated_at_pretty":"25 July, 2018","created_at":"2018-05-11T15:24:12.000-04:00","published_at":"2018-05-11T15:30:44.000-04:00","updated_at":"2018-07-24T22:06:03.000-04:00","meta_title":"Lynx Roundup, May 11th | Hackers and Slackers","meta_description":"Daily roundup of Data Science news around the industry, 5/11/2018.","og_description":"Daily roundup of Data Science news around the industry, 5/11/2018.","og_image":"https://hackersandslackers.com/content/images/lynx/lynx19@2x.jpg","og_title":"Lynx Roundup, May 11th","twitter_description":"Daily roundup of Data Science news around the industry, 5/11/2018.","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx19@2x.jpg","twitter_title":"Lynx Roundup, May 11th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://blog.jupyter.org/authoring-custom-jupyter-widgets-2884a462e724\n\nhttps://github.com/mahmoud/glom/blob/master/README.md\n\nhttps://www.quantamagazine.org/a-thermodynamic-answer-to-why-birds-migrate-20180507/\n\nhttps://www.wired.com/story/want-to-prove-your-business-is-fair-audit-your-algorithm/\n\nhttps://ai.googleblog.com/2018/05/deep-learning-for-electronic-health.html\n\nhttps://www.oreilly.com/ideas/why-your-next-open-source-project-may-only-be-an-interface\n\nhttps://spectrum.ieee.org/biomedical/devices/math-explains-how-brain-makes-sense-of-sounds\n\nhttps://cscherrer.github.io/post/max-profit/\n\nhttps://www.aeaweb.org/articles?id=10.1257/jep.31.2.87\n\nhttps://arxiv.org/abs/1804.10846\n\n(1) It'san interesting article, but I think it will mislead people as to the\ncurrent state of AI. Contrary to what may be implied in books by Bostrom and\nTegmark, we are nowhere near \"AGI\", much less\"superintelligence\", whatever that\nmight mean.\n\n— Melanie Mitchell (@MelMitchell1) May 8, 2018\n[https://twitter.com/MelMitchell1/status/993704107461394432?ref_src=twsrc%5Etfw]\n\nhttp://www.fharrell.com/post/stat-ml/\n\nhttps://medium.freecodecamp.org/how-to-write-modular-readable-sql-using-named-result-sets-and-functions-ac49f1ca25c1\n\nhttps://blog.github.com/2018-05-07-introducing-checks-api/\n\nhttp://mindblog.dericbownds.net/2018/05/protein-synthesis-in-brain-tissue-is.html\n\nhttp://dataconomy.com/2018/05/how-is-data-science-transforming-web-development/\n\nhttps://github.com/simonw/csvs-to-sqlite","html":"<p><a href=\"https://blog.jupyter.org/authoring-custom-jupyter-widgets-2884a462e724\">https://blog.jupyter.org/authoring-custom-jupyter-widgets-2884a462e724</a></p>\n<p><a href=\"https://github.com/mahmoud/glom/blob/master/README.md\">https://github.com/mahmoud/glom/blob/master/README.md</a></p>\n<p><a href=\"https://www.quantamagazine.org/a-thermodynamic-answer-to-why-birds-migrate-20180507/\">https://www.quantamagazine.org/a-thermodynamic-answer-to-why-birds-migrate-20180507/</a></p>\n<p><a href=\"https://www.wired.com/story/want-to-prove-your-business-is-fair-audit-your-algorithm/\">https://www.wired.com/story/want-to-prove-your-business-is-fair-audit-your-algorithm/</a></p>\n<p><a href=\"https://ai.googleblog.com/2018/05/deep-learning-for-electronic-health.html\">https://ai.googleblog.com/2018/05/deep-learning-for-electronic-health.html</a></p>\n<p><a href=\"https://www.oreilly.com/ideas/why-your-next-open-source-project-may-only-be-an-interface\">https://www.oreilly.com/ideas/why-your-next-open-source-project-may-only-be-an-interface</a></p>\n<p><a href=\"https://spectrum.ieee.org/biomedical/devices/math-explains-how-brain-makes-sense-of-sounds\">https://spectrum.ieee.org/biomedical/devices/math-explains-how-brain-makes-sense-of-sounds</a></p>\n<p><a href=\"https://cscherrer.github.io/post/max-profit/\">https://cscherrer.github.io/post/max-profit/</a></p>\n<p><a href=\"https://www.aeaweb.org/articles?id=10.1257/jep.31.2.87\">https://www.aeaweb.org/articles?id=10.1257/jep.31.2.87</a></p>\n<p><a href=\"https://arxiv.org/abs/1804.10846\">https://arxiv.org/abs/1804.10846</a></p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">(1) It&#39;san interesting article, but I think it  will mislead people as to the current state of AI.  Contrary to what may be implied in books by Bostrom and Tegmark, we are nowhere near &quot;AGI&quot;, much less&quot;superintelligence&quot;, whatever that might mean.</p>&mdash; Melanie Mitchell (@MelMitchell1) <a href=\"https://twitter.com/MelMitchell1/status/993704107461394432?ref_src=twsrc%5Etfw\">May 8, 2018</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p><a href=\"http://www.fharrell.com/post/stat-ml/\">http://www.fharrell.com/post/stat-ml/</a></p>\n<p><a href=\"https://medium.freecodecamp.org/how-to-write-modular-readable-sql-using-named-result-sets-and-functions-ac49f1ca25c1\">https://medium.freecodecamp.org/how-to-write-modular-readable-sql-using-named-result-sets-and-functions-ac49f1ca25c1</a></p>\n<p><a href=\"https://blog.github.com/2018-05-07-introducing-checks-api/\">https://blog.github.com/2018-05-07-introducing-checks-api/</a></p>\n<p><a href=\"http://mindblog.dericbownds.net/2018/05/protein-synthesis-in-brain-tissue-is.html\">http://mindblog.dericbownds.net/2018/05/protein-synthesis-in-brain-tissue-is.html</a></p>\n<p><a href=\"http://dataconomy.com/2018/05/how-is-data-science-transforming-web-development/\">http://dataconomy.com/2018/05/how-is-data-science-transforming-web-development/</a></p>\n<p><a href=\"https://github.com/simonw/csvs-to-sqlite\">https://github.com/simonw/csvs-to-sqlite</a></p>\n","url":"https://hackersandslackers.com/lynx-roundup-may-11th/","uuid":"d6685ebf-f0b2-4f87-91f0-0330c9f3057a","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5af5eddcf0f0ea4ec211efae"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867364f","title":"Lynx Roundup, May 8th","slug":"lynx-roundup-may-8th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx10@2x.jpg","excerpt":"Cool stuff for cool robots.","custom_excerpt":"Cool stuff for cool robots.","created_at_pretty":"08 May, 2018","published_at_pretty":"08 May, 2018","updated_at_pretty":"25 July, 2018","created_at":"2018-05-07T23:23:51.000-04:00","published_at":"2018-05-08T07:00:00.000-04:00","updated_at":"2018-07-24T22:06:03.000-04:00","meta_title":"Lynx Roundup, May 8th | Hackers and Slackers","meta_description":"Cool stuff for cool robots","og_description":"Cool stuff for cool robots","og_image":"https://hackersandslackers.com/content/images/lynx/lynx10@2x.jpg","og_title":"Lynx Roundup, May 8th","twitter_description":"Cool stuff for cool robots","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx10@2x.jpg","twitter_title":"Lynx Roundup, May 8th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://hypertools.readthedocs.io/en/latest/index.html\n\nhttps://functional.works-hub.com/learn/functional-data-engineering-a-modern-paradigm-for-batch-data-processing-01e46\n\nhttps://www.datanami.com/2018/04/30/how-netflix-optimized-flink-for-massive-scale-on-aws/\n\nhttps://elliot.land/post/elo-rating-system-implemented-in-single-sql-select\n\nhttps://towardsdatascience.com/stochastic-weight-averaging-a-new-way-to-get-state-of-the-art-results-in-deep-learning-c639ccf36a\n\nhttps://arstechnica.com/science/2018/05/alan-turings-contribution-to-chemistry-used-to-filter-salt-water/\n\nhttps://utah.instructure.com/courses/462398/assignments/syllabus","html":"<p><a href=\"https://hypertools.readthedocs.io/en/latest/index.html\">https://hypertools.readthedocs.io/en/latest/index.html</a></p>\n<p><a href=\"https://functional.works-hub.com/learn/functional-data-engineering-a-modern-paradigm-for-batch-data-processing-01e46\">https://functional.works-hub.com/learn/functional-data-engineering-a-modern-paradigm-for-batch-data-processing-01e46</a></p>\n<p><a href=\"https://www.datanami.com/2018/04/30/how-netflix-optimized-flink-for-massive-scale-on-aws/\">https://www.datanami.com/2018/04/30/how-netflix-optimized-flink-for-massive-scale-on-aws/</a></p>\n<p><a href=\"https://elliot.land/post/elo-rating-system-implemented-in-single-sql-select\">https://elliot.land/post/elo-rating-system-implemented-in-single-sql-select</a></p>\n<p><a href=\"https://towardsdatascience.com/stochastic-weight-averaging-a-new-way-to-get-state-of-the-art-results-in-deep-learning-c639ccf36a\">https://towardsdatascience.com/stochastic-weight-averaging-a-new-way-to-get-state-of-the-art-results-in-deep-learning-c639ccf36a</a></p>\n<p><a href=\"https://arstechnica.com/science/2018/05/alan-turings-contribution-to-chemistry-used-to-filter-salt-water/\">https://arstechnica.com/science/2018/05/alan-turings-contribution-to-chemistry-used-to-filter-salt-water/</a></p>\n<p><a href=\"https://utah.instructure.com/courses/462398/assignments/syllabus\">https://utah.instructure.com/courses/462398/assignments/syllabus</a></p>\n","url":"https://hackersandslackers.com/lynx-roundup-may-8th/","uuid":"1823b0fb-a919-47fc-9972-e37175bd4bf0","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5af11847e5b50d56fd21d5ef"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867364e","title":"Lynx Roundup, May 7th","slug":"lynx-roundup-may-6th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/04/lynx34.jpg","excerpt":"Cool stuff for cool robots.","custom_excerpt":"Cool stuff for cool robots.","created_at_pretty":"07 May, 2018","published_at_pretty":"07 May, 2018","updated_at_pretty":"10 April, 2019","created_at":"2018-05-06T22:42:40.000-04:00","published_at":"2018-05-07T07:00:00.000-04:00","updated_at":"2019-04-10T03:30:10.000-04:00","meta_title":"Lynx Roundup, May 7th | Hackers and Slackers","meta_description":"Cool stuff for cool robots","og_description":"Cool stuff for cool robots","og_image":"https://hackersandslackers.com/content/images/2019/04/lynx34-2.jpg","og_title":"Lynx Roundup, May 7th","twitter_description":"Cool stuff for cool robots","twitter_image":"https://hackersandslackers.com/content/images/2019/04/lynx34-1.jpg","twitter_title":"Lynx Roundup, May 7th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.r-bloggers.com/qualitative-data-science-using-rqda-to-analyse-interviews/\n\nhttps://www.datasciencecentral.com/profiles/blogs/building-a-data-democracy\n\nhttps://www.datasciencecentral.com/profiles/blogs/ai-with-pyramids-of-self-programmable-gates\n\nhttps://www.kdnuggets.com/2018/05/boost-data-science-skills-learn-linear-algebra.html\n\nhttps://blog.openai.com/debate/","html":"<p><a href=\"https://www.r-bloggers.com/qualitative-data-science-using-rqda-to-analyse-interviews/\">https://www.r-bloggers.com/qualitative-data-science-using-rqda-to-analyse-interviews/</a></p><p><a href=\"https://www.datasciencecentral.com/profiles/blogs/building-a-data-democracy\">https://www.datasciencecentral.com/profiles/blogs/building-a-data-democracy</a></p><p><a href=\"https://www.datasciencecentral.com/profiles/blogs/ai-with-pyramids-of-self-programmable-gates\">https://www.datasciencecentral.com/profiles/blogs/ai-with-pyramids-of-self-programmable-gates</a></p><p><a href=\"https://www.kdnuggets.com/2018/05/boost-data-science-skills-learn-linear-algebra.html\">https://www.kdnuggets.com/2018/05/boost-data-science-skills-learn-linear-algebra.html</a></p><p><a href=\"https://blog.openai.com/debate/\">https://blog.openai.com/debate/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-may-6th/","uuid":"ba235ebf-1a9b-44ea-a94e-8cf6673dd482","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5aefbd206c4a871eca9d55bb"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867364d","title":"Preparing your AWS Project to Build an API","slug":"building-an-api-using-aws","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/awsapi-1-3.jpg","excerpt":"Get your AWS instance configured, and become familiar with the services needed to build APIs.","custom_excerpt":"Get your AWS instance configured, and become familiar with the services needed to build APIs.","created_at_pretty":"06 May, 2018","published_at_pretty":"06 May, 2018","updated_at_pretty":"28 March, 2019","created_at":"2018-05-06T07:30:47.000-04:00","published_at":"2018-05-06T08:58:41.000-04:00","updated_at":"2019-03-28T08:54:39.000-04:00","meta_title":"Preparing your AWS Project to Build an API | Hackers and Slackers","meta_description":"Get your AWS instance configured, and become familiar with the services needed to build APIs.","og_description":"Get your AWS instance configured, and become familiar with the services needed to build APIs.","og_image":"https://hackersandslackers.com/content/images/2019/03/awsapi-1-3.jpg","og_title":"Preparing your AWS Project to Build an API | Hackers and Slackers","twitter_description":"Get your AWS instance configured, and become familiar with the services needed to build APIs.","twitter_image":"https://hackersandslackers.com/content/images/2019/03/awsapi-1-2.jpg","twitter_title":"Preparing your AWS Project to Build an API | Hackers and Slackers","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"REST APIs","slug":"restapis","description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","feature_image":null,"meta_description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","meta_title":"Consuming and Building REST APIs | Hackers and Slackers","visibility":"public"},"tags":[{"name":"REST APIs","slug":"restapis","description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","feature_image":null,"meta_description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","meta_title":"Consuming and Building REST APIs | Hackers and Slackers","visibility":"public"},{"name":"AWS","slug":"aws","description":"Monolithic cloud architecture via microservices. Become familiar with AWS products, account administration, security practices, and tips to make it all easier.","feature_image":null,"meta_description":"Become familiar with AWS services, account administration, security practices, and tips to make it all easier.","meta_title":"Learn AWS | Hackers and Slackers","visibility":"public"},{"name":"DevOps","slug":"devops","description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","feature_image":null,"meta_description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","meta_title":"DevOps: Networking And Server Configuration | Hackers and Slackers","visibility":"public"},{"name":"Architecture","slug":"architecture","description":"Advancements in software architecture, serverless and beyond. Examples include equivalents to Lambda functions, Docker containers, Google Cloud functions,  Kubernetes, Heroku, etc.","feature_image":null,"meta_description":"Advancements in software architecture, serverless and beyond. Examples include equivalents to cloud functions, Docker containers, Kubernetes, Heroku, etc.","meta_title":"Software Architecture | Hackers and Slackers","visibility":"public"},{"name":"#Creating APIs in AWS","slug":"create-an-aws-api","description":"Create a REST API in AWS with industry-standard services such as Lambda Functions, RDS, and API Gateway.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/pythonlambda.jpg","meta_description":"Create an API in AWS with industry-standard services such as Lambda Functions, RDS, and API Gateway.","meta_title":"Create a REST API in AWS","visibility":"internal"}],"plaintext":"There comes a surreal moment in nearly every profession in which perspective\nviolently forces itself into our self-awareness. People with cooler jobs\nprobably have that moment when they save their first patient or launch their\nfirst rocket. For me, the idea of building an API was this moment in software\ndevelopment. All those past black boxes which spat out results your life\ndepended on: we can make those now.\n\nFeel free to remain unfazed by this as I'm sure most are... for those of us who\ncan't remember how they became an \"engineer\" in the first place, API design\nfeels like reaching a final frontier. Granted, this may happen at least 20 more\ntimes in your software career, so don’t pause too long now.\n\nIf you managed to catch the tutorial on setting up RDS on AWS\n[https://hackersandslackers.com/setting-up-mysql-on-aws/], you're already a step\nahead. We're going to make our way through this slowly, which is probably a good\nidea even if you've done this before. There are so many pitfalls and nuances in\nAWS's architecture that I'm not even sure I fully understand what's happening,\neven when everything works.\n\nQuick Overview\nHere are the services we'll be using to hook this baby up:\n\n *   RDS:  Amazon's cloud-hosted relational databases. These databases come\n   preconfigured with an endpoint, which can be made accessible to other AWS\n   services or even to external manipulation. \n *   Lambda:  Snippets of code which can be invoked without setting up a web\n   server (hence: \"serverless\"). Lambda functions are intended to serve simple,\n   specific functions (such as serving as the logic for an endpoint, for\n   instance). Lambda functions play well with other AWS services: we'll be using\n   this as the glue between our API and interacting with the Database.\n *   API Gateway:  Amazon's visual editor for creating an API. API Gateway\n   allows developers to architect the structure and logic of APIs without having\n   to worry about setting up routes via code.\n *   IAM:  Amazon's headache of a user & permissions manager. IAM is needed to\n   specify exactly with AWS services have access to other services, which users\n   are permitted to interact with your API, etc. \n\nGameplan\nSo here's the deal. Our RDS  database will be where all the data we provide and\nreceive will live. Lambda  functions will be the snippets of code actually\ninteracting with information from the database; all of our queries will be done\nthrough Lambda. API Gateway  will control the \"design\" of the API, as in the\nstructure of endpoints, their respective methods, and how all these should\ninteract with Lambda.\n\nIt sounds simple enough, but the devil is in the details. And trust me, there\nare a lot of details.\n\nSetting the Correct Role Permissions\nUsually, I'd say we should jump into the fun stuff and deal with the details\nwhen we get to them. I won't let you steer down that road with AWS... let's\navoid smashing our heads on keyboards where possible and kick things off slow.\n\nIf you were to attempt to create a Lambda function off the bat, the first prompt\nto appear would demand a \"role\" to be specified. Roles are one of the types of\npermission packages (?) we mentioned earlier. Roles limit exactly which services\nyour Lambda function can interact with off the bat. Start with the wrong role,\nand you won't be able to do much of anything.\n\nHead over the IAM console\n[https://console.aws.amazon.com/iam/home?region=us-east-1#/home]  to set up an\nappropriate role:\n\nWhat a God-awful way to handle permissions.Let's pause for a moment to take this\nall in. You'll see we have users, groups, roles, policies and a whole bunch of\nother garbage. Policies can be attached to roles. Policies can also be attached\nto users, and also attached to groups. Users can be in groups. Wait, so what if\na user has a bunch of policies, but then joins a group with a bunch of policies?\nWhat even is a \"policy\"? These are the real questions. The short answer is none\nof it makes sense; it's just extra job security for those who make it work.\n\nClick on \"Roles\" in the sidebar. Create a role. Select \"Lambda\" and click next.\n\nThis interface only seems to get worse.Ok cool. The role  we're creating is basically just going to be a collection of\npermissions we can attached directly to the role. Go ahead and attach these:\n\n * AmazonVPCFullAccess\n * AmazonAPIGatewayInvokeFullAccess\n * AmazonRDSFullAccess\n * AWSLambdaFullAccess\n * CloudWatchLogsFullAccess\n\nSave the role, and remember what you name it. You'll need it.\n\nGetting Started with Lambda Functions\nGo back to the Lambda console. It's game time. We're going to create a function\nfrom scratch (sadly, I haven't found any of the blueprints to be very useful\njust yet).\n\nIgnore Amazon's silly Blueprints.Under “runtime”, you’ll need to pick which\nprogramming language we’ll be writing our function in. I’m doing Python 3\nbecause I don’t mess with semicolons, ya dig. Most people seem to stick with\nNode, which makes sense: Node is much faster at runtime, especially when you\nconsider that AWS runs Node natively. The choice is your preference.\n\nAha, see the “Role” dropdown? This is what I warned you about. Select the role\nyou just created earlier from existing roles.\n\nLambda Function Editor\nWelcome to Lambda's web UIBehold, the Lambda visual editor. That tree you're\nseeing is a representation of the integration this function will handle. The\ncurrent function is the box top-middle, the trigger is on the left, and the list\nof potential AWS services we can touch is on the right; these were automatically\npopulated by that role I forced you to create. You're welcome.\n\nNOTE:  The entire interface below this section depends on which service you've\nclicked in the tree. It's not the most intuitive at first. I have my Lambda\nfunction selected, so that's the interface I can interact with below.\n\nInline Code Editor\nWe can create Lambdas directly in the browser, or by uploading souce via zip\nfile.Real quick, we need to go over what each field here does. The dropdown\ncurrently set to \"edit code inline\" can be expanded, which gives you the option\nto upload a zip file of source code. THIS WILL DELETE ALL PREEXISTING WORK. \nThey don't tell you that, hah. Ha hah. I recommend doing everything offline to\nbe uploaded later - this needs to be done with python packages anyway.\n\nHandler  specifies which function should be called upon initialization.\n\"lambda_function\" is referring to the function, so \"handler\" here specifies that\nthe function handler within lambda_function.py  is what will get called upon\nexecution.\n\nOur Lambda’s VPC Settings\nScroll down until you hit this pretty little gem:\n\nAWS is filled with complicated network concepts, and zero attempts to explain\nthem.We need to specify the VPC this function will interact with. If you created\nan RDS already, go ahead select the VPC you created. Add a bunch of subnets\n(whichever ones). Finally, select a security group. Remember that the\npermissions of this group determine whether or not your VPC is allowed to speak\nto this function. If you're struggling with this, check out the AWS MySQL post\nagain. I'm not going to link it twice in one post, sorry. I have self-respect\nyou know.\n\nThat's Enough For Now\nThere's a lot to take in when playing around in AWS. The combination of\ngibberish terminology and horrible documentation doesn't exactly make for solid\nuser experience. If you're new to AWS and any of this seems frustrating, know\nit's supposed to be. Amazon owns you, and they hate you. Kind of like God.\n\nI'd suggest messing around the interface, and maybe even check out API Gateway a\nbit to get a feel for how that stuff looks. They set you up with a cute demo to\nmake you think it's going to be easy, so maybe you'll enjoy that. Next time,\nwe're going to crank out some Lambdas.","html":"<p>There comes a surreal moment in nearly every profession in which perspective violently forces itself into our self-awareness. People with cooler jobs probably have that moment when they save their first patient or launch their first rocket. For me, the idea of building an API was this moment in software development. All those past black boxes which spat out results your life depended on: we can make those now.</p><p>Feel free to remain unfazed by this as I'm sure most are... for those of us who can't remember how they became an \"engineer\" in the first place, API design feels like reaching a final frontier. Granted, this may happen at least 20 more times in your software career, so don’t pause too long now.</p><p>If you managed to catch the tutorial on <a href=\"https://hackersandslackers.com/setting-up-mysql-on-aws/\">setting up RDS on AWS</a>, you're already a step ahead. We're going to make our way through this slowly, which is probably a good idea even if you've done this before. There are so many pitfalls and nuances in AWS's architecture that I'm not even sure I fully understand what's happening, even when everything works.</p><h2 id=\"quick-overview\">Quick Overview</h2><p>Here are the services we'll be using to hook this baby up:</p><ul><li> <strong>RDS:</strong> Amazon's cloud-hosted relational databases. These databases come preconfigured with an endpoint, which can be made accessible to other AWS services or even to external manipulation. </li><li> <strong>Lambda:</strong> Snippets of code which can be invoked without setting up a web server (hence: \"<em>serverless</em>\"). Lambda functions are intended to serve simple, specific functions (such as serving as the logic for an endpoint, for instance). Lambda functions play well with other AWS services: we'll be using this as the glue between our API and interacting with the Database.</li><li> <strong>API Gateway:</strong> Amazon's visual editor for creating an API. API Gateway allows developers to architect the structure and logic of APIs without having to worry about setting up routes via code.</li><li> <strong>IAM:</strong> Amazon's headache of a user &amp; permissions manager. IAM is needed to specify exactly with AWS services have access to other services, which users are permitted to interact with your API, etc. </li></ul><h3 id=\"gameplan\">Gameplan</h3><p>So here's the deal. Our <strong>RDS</strong> database will be where all the data we provide and receive will live. <strong>Lambda</strong> functions will be the snippets of code actually interacting with information from the database; all of our queries will be done through Lambda. <strong>API Gateway</strong> will control the \"design\" of the API, as in the structure of endpoints, their respective methods, and how all these should interact with Lambda.</p><p>It sounds simple enough, but the devil is in the details. And trust me, there are a lot of details.</p><h2 id=\"setting-the-correct-role-permissions\">Setting the Correct Role Permissions</h2><p>Usually, I'd say we should jump into the fun stuff and deal with the details when we get to them. I won't let you steer down that road with AWS... let's avoid smashing our heads on keyboards where possible and kick things off slow.</p><p>If you were to attempt to create a Lambda function off the bat, the first prompt to appear would demand a \"<strong>role</strong>\" to be specified. Roles are one of the types of permission packages (?) we mentioned earlier. Roles limit exactly which services your Lambda function can interact with off the bat. Start with the wrong role, and you won't be able to do much of anything.</p><p>Head over the <a href=\"https://console.aws.amazon.com/iam/home?region=us-east-1#/home\">IAM console</a> to set up an appropriate role:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://hackersandslackers.com/content/images/2018/05/Screenshot-2018-05-06-08.06.13.png\" class=\"kg-image\" alt=\"Screenshot-2018-05-06-08.06.13\"><figcaption>What a God-awful way to handle permissions.</figcaption></figure><!--kg-card-end: image--><p>Let's pause for a moment to take this all in. You'll see we have users, groups, roles, policies and a whole bunch of other garbage. Policies can be attached to roles. Policies can also be attached to users, and also attached to groups. Users can be in groups. Wait, so what if a user has a bunch of policies, but then joins a group with a bunch of policies? What even is a \"policy\"? These are the real questions. The short answer is none of it makes sense; it's just extra job security for those who make it work.</p><p>Click on \"Roles\" in the sidebar. Create a role. Select \"Lambda\" and click <em>next</em>.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://hackersandslackers.com/content/images/2018/05/Screenshot-2018-05-06-08.18.21.png\" class=\"kg-image\" alt=\"Screenshot-2018-05-06-08.18.21\"><figcaption>This interface only seems to get worse.</figcaption></figure><!--kg-card-end: image--><p>Ok cool. The <strong>role</strong> we're creating is basically just going to be a collection of permissions we can attached directly to the role. Go ahead and attach these:</p><ul><li>AmazonVPCFullAccess</li><li>AmazonAPIGatewayInvokeFullAccess</li><li>AmazonRDSFullAccess</li><li>AWSLambdaFullAccess</li><li>CloudWatchLogsFullAccess</li></ul><p>Save the role, and remember what you name it. You'll need it.</p><h2 id=\"getting-started-with-lambda-functions\">Getting Started with Lambda Functions</h2><p>Go back to the Lambda console. It's game time. We're going to create a function from scratch (sadly, I haven't found any of the blueprints to be very useful just yet).</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://hackersandslackers.com/content/images/2018/05/Screenshot-2018-05-06-08.25.16.png\" class=\"kg-image\" alt=\"Lambda\"><figcaption>Ignore Amazon's silly Blueprints.</figcaption></figure><!--kg-card-end: image--><p>Under “runtime”, you’ll need to pick which programming language we’ll be writing our function in. I’m doing Python 3 because I don’t mess with semicolons, ya dig. Most people seem to stick with Node, which makes sense: Node is much faster at runtime, especially when you consider that AWS runs Node natively. The choice is your preference.</p><p>Aha, see the “Role” dropdown? This is what I warned you about. Select the role you just created earlier from existing roles.</p><h3 id=\"lambda-function-editor\">Lambda Function Editor</h3><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://hackersandslackers.com/content/images/2019/03/Screenshot-2018-05-06-08.30.00.png\" class=\"kg-image\"><figcaption>Welcome to Lambda's web UI</figcaption></figure><!--kg-card-end: image--><p>Behold, the Lambda visual editor. That tree you're seeing is a representation of the integration this function will handle. The current function is the box top-middle, the trigger is on the left, and the list of potential AWS services we can touch is on the right; these were automatically populated by that role I forced you to create. You're welcome.</p><p><strong>NOTE:</strong> The entire interface below this section depends on which service you've clicked in the tree. It's not the most intuitive at first. I have my Lambda function selected, so that's the interface I can interact with below.</p><h3 id=\"inline-code-editor\">Inline Code Editor</h3><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://hackersandslackers.com/content/images/2018/05/Screenshot-2018-05-06-08.35.20.png\" class=\"kg-image\" alt=\"Function code\"><figcaption>We can create Lambdas directly in the browser, or by uploading souce via zip file.</figcaption></figure><!--kg-card-end: image--><p>Real quick, we need to go over what each field here does. The dropdown currently set to \"edit code inline\" can be expanded, which gives you the option to upload a zip file of source code. <em>THIS WILL DELETE ALL PREEXISTING WORK.</em> They don't tell you that, hah. Ha hah. I recommend doing everything offline to be uploaded later - this needs to be done with python packages anyway.</p><p><strong>Handler</strong> specifies which function should be called upon initialization. \"lambda_function\" is referring to the function, so \"handler\" here specifies that the function handler within <code>lambda_function.py</code> is what will get called upon execution.</p><h3 id=\"our-lambda-s-vpc-settings\">Our Lambda’s VPC Settings</h3><p>Scroll down until you hit this pretty little gem:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://hackersandslackers.com/content/images/2018/05/Screenshot-2018-05-06-08.41.02.png\" class=\"kg-image\" alt=\"VPC\"><figcaption>AWS is filled with complicated network concepts, and zero attempts to explain them.</figcaption></figure><!--kg-card-end: image--><p>We need to specify the VPC this function will interact with. If you created an RDS already, go ahead select the VPC you created. Add a bunch of subnets (whichever ones). Finally, select a <em>security group</em>. Remember that the permissions of this group determine whether or not your VPC is allowed to speak to this function. If you're struggling with this, check out the AWS MySQL post again. I'm not going to link it twice in one post, sorry. I have self-respect you know.</p><h2 id=\"that-s-enough-for-now\">That's Enough For Now</h2><p>There's a lot to take in when playing around in AWS. The combination of gibberish terminology and horrible documentation doesn't exactly make for solid user experience. If you're new to AWS and any of this seems frustrating, know it's supposed to be. Amazon owns you, and they hate you. Kind of like God.</p><p>I'd suggest messing around the interface, and maybe even check out API Gateway a bit to get a feel for how that stuff looks. They set you up with a cute demo to make you think it's going to be easy, so maybe you'll enjoy that. Next time, we're going to crank out some Lambdas.</p>","url":"https://hackersandslackers.com/building-an-api-using-aws/","uuid":"45101fbc-527b-432b-994e-31d855e76aff","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5aeee767926f095edfccda8e"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867364c","title":"Lynx Roundup, May 4th","slug":"lynx-roundup-may-4th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/04/116-1.jpg","excerpt":"Data science with Snkia.","custom_excerpt":"Data science with Snkia.","created_at_pretty":"04 May, 2018","published_at_pretty":"04 May, 2018","updated_at_pretty":"10 April, 2019","created_at":"2018-05-03T22:07:17.000-04:00","published_at":"2018-05-04T06:00:00.000-04:00","updated_at":"2019-04-10T02:38:02.000-04:00","meta_title":"Lynx Roundup, May 4th | Hackers and Slackers","meta_description":"Data science with Snkia","og_description":"Data science with Snkia","og_image":"https://hackersandslackers.com/content/images/2019/04/116-1-2.jpg","og_title":"Lynx Roundup, May 4th","twitter_description":"Data science with Snkia","twitter_image":"https://hackersandslackers.com/content/images/2019/04/116-1-1.jpg","twitter_title":"Lynx Roundup, May 4th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.quantamagazine.org/cells-talk-in-a-language-that-looks-like-viruses-20180502/\n\nhttp://savvastjortjoglou.com/intrepretable-machine-learning-nfl-combine.html\n\nhttps://www.infoq.com/profile/Ben-Linders\n\nhttps://opensource.com/article/18/4/introduction-python-bytecode\n\nhttps://realpython.com/python-exceptions/\n\nhttps://github.com/Astrokiwi/arbitrary_python_verse\n\nhttps://github.com/chamkank/hone","html":"<p><a href=\"https://www.quantamagazine.org/cells-talk-in-a-language-that-looks-like-viruses-20180502/\">https://www.quantamagazine.org/cells-talk-in-a-language-that-looks-like-viruses-20180502/</a></p><p><a href=\"http://savvastjortjoglou.com/intrepretable-machine-learning-nfl-combine.html\">http://savvastjortjoglou.com/intrepretable-machine-learning-nfl-combine.html</a></p><p><a href=\"https://www.infoq.com/profile/Ben-Linders\">https://www.infoq.com/profile/Ben-Linders</a></p><p><a href=\"https://opensource.com/article/18/4/introduction-python-bytecode\">https://opensource.com/article/18/4/introduction-python-bytecode</a></p><p><a href=\"https://realpython.com/python-exceptions/\">https://realpython.com/python-exceptions/</a></p><p><a href=\"https://github.com/Astrokiwi/arbitrary_python_verse\">https://github.com/Astrokiwi/arbitrary_python_verse</a></p><p><a href=\"https://github.com/chamkank/hone\">https://github.com/chamkank/hone</a></p>","url":"https://hackersandslackers.com/lynx-roundup-may-4th/","uuid":"917aef3b-de48-40e3-9c7f-6eb63c57c787","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5aebc055ee98037b7d920297"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867364b","title":"Python's Requests Library: Bring Your Scripts to the Web","slug":"pythons-requests-library","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/05/snek@2x.jpg","excerpt":"Get familiar with what might become your most used Python library.","custom_excerpt":"Get familiar with what might become your most used Python library.","created_at_pretty":"01 May, 2018","published_at_pretty":"02 May, 2018","updated_at_pretty":"25 November, 2018","created_at":"2018-05-01T18:38:59.000-04:00","published_at":"2018-05-01T20:10:32.000-04:00","updated_at":"2018-11-25T09:55:28.000-05:00","meta_title":"Python's Requests Library | Hackers and Slackers","meta_description":"Get familiar with what might become your most used Python library","og_description":"APIs like a snake","og_image":"https://hackersandslackers.com/content/images/2018/05/snek@2x.jpg","og_title":"Python's Requests Library","twitter_description":"APIs like a snake","twitter_image":"https://hackersandslackers.com/content/images/2018/05/snek@2x.jpg","twitter_title":"Python's Requests Library","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"REST APIs","slug":"restapis","description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","feature_image":null,"meta_description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","meta_title":"Consuming and Building REST APIs | Hackers and Slackers","visibility":"public"},{"name":"Atlassian","slug":"atlassian","description":"Beef up JIRA and Confluence by scripting and automating nearly anything. Empower teams with customized workflows and philosophies.","feature_image":null,"meta_description":"Beef up JIRA and Confluence by scripting and automating nearly anything. Empower teams with customized workflows and philosophies.","meta_title":"Atlassian Development for JIRA and Confluence. | Hackers and Slackers","visibility":"public"}],"plaintext":"Last episode [https://hackersandslackers.com/making-ajax-calls-with-jquery/]  we\ncovered every programming noob's favorite 'A-ha' moment: making GET requests\nusing AJAX. Stepping stones such as these can serve as great turning points in a\ncareer, but they also expose how little we still know. For instance, when we\nintegrated the functional logic of APIs on the client side, we actually broke a\ncardinal rule: storing and passing private keys on the client side like an\nidiot. Does that make everything we learned useless? Not entirely, but kinda\nyeah.\n\nToday we'll do the equivalent in Python by using the requests  library. Requests\nis successor to Urllib, both of which are simple tools to retrieve or modify\ninformation on the web, most commonly in the case of APIs.\n\nWe'll be using JIRA's API as an example of how to format GET and POST requests.\nJIRA's API in particular is an excellent example of a powerful and useful API.\nThere's a ton we can do, thus a perfect demonstration of how much power one\nlibrary can give you.\n\nBatteries Not Included\nEven I sometimes forget that requests is not a built-in Python library. Make\nsure requests  is installed in your environment via pip install requests.\n\nCreate a file in your directory called creds.py  to store your credentials. Make\nsure to add that file to your .gitignore  if you plan on committing anything any\ntime soon.\n\n# creds.py\nusername = fake.user\npassword = securepassword123\n\n\nThe only libraries we need to import are requests  and json. Make sure you\nimport your credentials from the file you created earlier.\n\nimport requests\nimport json\nfrom creds import username, password\n\n\nGET Requests\nAs long as you have a URL, you can make a GET request. The requests library will\nreturn the content of any page it hits; if you make a request to an HTML page,\nyour response will be that page's HTML source.\n\nWhen we know what sort of data we're expecting to receive back, we can specify\nthe expected content type  by passing the headers  argument, and specifying the \nContent-Type. Authentication is handled via passing arguments as well,\nspecifically the auth  argument. Take a look at what you can pass in a GET\nrequest:\n\nCommon GET Arguments\n * url:  The URL we will either retrieve or pass the information along to.\n * parameters  (optional):  Depending on the API, some URLs can accept a\n   dictionary of variables to be passed along with the URL. These are called\n   query strings; you notice these all the time whenever you come across a URL\n   that looks like nonsense... that nonsense is information!\n * headers  (optional): A collection of metadata sent along with the request.\n   Our browsers send HTTP headers every time we visit a site, but the scope of\n   what a header value might cover ranges from tokens to content types.\n * auth  (optional):  Method for logging in if needed. Basic/Digest/Custom HTTP\n   Auth.\n\nLet’s GET Some\nWe're going to make a relatively simple request to pull open tickets from a JIRA\nproject called EXM.\n\nThis request will:\n\n * Accept our destination's base URL\n * Append 'search/' (the endpoint for searching issues)\n * Pass two parameters:  A query to return issues A flag to show the issue\n   history\n * Authenticate with our username/password\n * Print the result\n\nimport requests\nimport json\nfrom creds import username\nfrom creds import password\n\nbase_url = 'https://examplejira.com/rest/api/2/'\nheaders = {'Content-Type': 'application/json'}\nparams = {\n    'jql': 'project = EXM AND resolution is not EMPTY',\n    'expand': 'changelog',\n}\n\nreq = requests.get(base_url + 'search/', headers=headers, params=params, auth=(username, password))\n\nprint(req.content)\n\n\nNotice that setting a variable equal to the request will equal the result of\nthat request. Printing r  alone would return a numerical status code (200, 404,\netc). The response that comes back from request such as r  are actually complex\nobjects — printing r.json()  will display the contents of the response as a JSON\nobject. Alternatively, r.text  returns the raw response as a string.\n\nIf your response comes back with an error, remember that you can always debug\nyour requests via Postman [https://www.getpostman.com/].\n\nIf all went well with our request, r.json()  should return something similar to\nthe following:\n\n{  \n   \"expand\":\"schema,names\",\n   \"startAt\":0,\n   \"maxResults\":50,\n   \"total\":63,\n   \"issues\":[  \n      {  \n         \"expand\":\"operations,versionedRepresentations,editmeta,changelog,renderedFields\",\n         \"id\":\"10558\",\n         \"self\":\"https://hackersandslackers.atlassian.net/rest/api/2/issue/10558\",\n         \"key\":\"HSB-63\",\n         \"fields\":{  \n            \"issuetype\":{  \n               \"self\":\"https://hackersandslackers.atlassian.net/rest/api/2/issuetype/10007\",\n               \"id\":\"10007\",\n               \"description\":\"Non-development related content task\",\n               \"iconUrl\":\"https://hackersandslackers.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10306&avatarType=issuetype\",\n               \"name\":\"Content\",\n               \"subtask\":false,\n               \"avatarId\":10306\n            },\n         }\n    ]\n}\n\n\nThe entirety of the request is probably much longer (depending on how many\nissues you have). Notice how JIRA will only return a maximum of 50 results\nunless otherwise specified (this is one of the parameters they accept). Feel\nfree to check out JIRA's API documentation to see what else you can do, but be\nwarned: their docs kind of suck.\n\nRetrieving information is cool, but modifying it is even better. Here's a use\ncase which might be immediately useful: creating a user.\n\nPOST Requests\nIn addition to the arguments GET requests can receive, POST requests can also\naccept arguments like as data.  This is where we tell the API the specifics of\nwhat we're trying to do.\n\nCommon POST Arguments\n * url: Endpoint URL.\n * params  (optional): Dictionary of variables to be passed as parameters of a\n   query string.\n * body  (optional): A JSON or  ML object sent in the body of the Request.\n * headers  (optional):  Dictionary of HTTP Headers to send with the Request.\n * auth  (optional):  Auth to enable Basic/Digest/Custom HTTP Auth.\n\nLet There be Users\nThe main difference between this request and the last will be what we pass via\nthe data  argument. For example's sake we'll be creating a user named bro  with\nthe appropriate broiest details.\n\nTake special note of json.dumps(userdata). If an endpoint is expecting JSON (it\nprobably is) we need to explicitly convert our dictionary of values to JSON\nbefore making this request.\n\nimport requests\nimport json\nfrom creds import username\nfrom creds import password\n\nbase_url = \"https://examplejira.com/rest/api/2/\"\nheaders = {'Content-Type': 'application/json'}\nuserdata = {\n  'username': 'bro',\n  'name': 'Bro',\n  'password': '32456456',\n  'email': 'bro@broiest.com',\n  \"notification\" : \"true\"\n}\n\nreq = requests.post(base_url + 'user/', data=json.dumps(userdata), headers=headers, auth=(username, password))\n\nprint(req.content)\n\n\n\nYou just created a user. That's basically like giving birth to a child.\nCongratulations.\n\nAdvanced POST Requests\nAs fun as it is to create bro users in JIRA instances, one-off usage of APIs\nlike this isn't really useful. We haven't done anything that we couldn't have\njust done ourselves via the UI.\n\nTo spice things up, here's a very real use case: importing a list of users via a\nCSV. As we speak, people in corporations around the world are manually adding\nthousands of users by hand to internal SaaS products. Don't be that person.\n\nThis request will do the following:\n\n * Use pandas  to open users.csv   (presumably this CSV should have columns for\n   name, email, etc)\n * Generate a random password using secrets\n * Use the CSV to create accounts with each user's information\n * Output the result to users_created.csv\n * \n\n# JIRA User Import\n\nimport pandas as pd\nimport requests\nimport secrets\nimport json\n\n# store credentials\nfrom creds import username\nfrom creds import password\n\n# dataframe from csv\nuser_df = pd.read_csv('users.csv')\n\n# store results of import\nrows_list = []\n\nheaders = {'Content-Type': 'application/json'}\nbase_url = \"https://examplejira.com/rest/api/2/\"\n\n# generate 20-character password\ndef generate_password():\n    alphabet = string.ascii_letters + string.digits\n    password = ''.join(secrets.choice(alphabet) for i in range(20))\n    return password\n\n# iterate and create users\nfor index, row in user_df.iterrows():\n    userdata = {\n        \"name\": row['email'].split('@')[0],\n        \"password\": generate_password(),\n        \"emailAddress\": row['email'],\n        \"displayName\": row['name'],\n        \"notification\" : \"true\"\n    }\n    req = requests.post(base_url + 'user/', data=json.dumps(userdata), headers=headers, auth=(jirauser, password))\n    rows_list.append(userdata) # adds row to array to be tracked\n    # create & export results to a csv\n    users_imported_df = pd.DataFrame(rows_list)\n    users_imported_df.to_csv('users_created.csv')\n\n\n\nIf this worked for you, take a moment to put something in perspective: you just\nautomated somebody's entire 9-5 job in a few minutes.\n\nAlso feel free to reflect on our purpose as a species. If automating this was so\nstraightforward, why do so many of us choose not to automate more tasks? Is our\nentire economy a hoax created to grant the masses an illusion of free will? Are\nwe running around in circles trying to solve problems we create ourselves, to\npay the bills which come with being employed? Finally: if robots are clearly\nthis superior, is there a purpose for the human race at all?\n\nNow you're asking the real questions. Hail Megatron.","html":"<p><a href=\"https://hackersandslackers.com/making-ajax-calls-with-jquery/\">Last episode</a> we covered every programming noob's favorite 'A-ha' moment: making GET requests using AJAX. Stepping stones such as these can serve as great turning points in a career, but they also expose how little we still know. For instance, when we integrated the functional logic of APIs on the client side, we actually broke a cardinal rule: storing and passing private keys on the client side like an idiot. Does that make everything we learned useless? Not entirely, but kinda yeah.</p><p>Today we'll do the equivalent in Python by using the <em>requests</em> library. Requests is successor to Urllib, both of which are simple tools to retrieve or modify information on the web, most commonly in the case of APIs.</p><p>We'll be using JIRA's API as an example of how to format GET and POST requests. JIRA's API in particular is an excellent example of a powerful and useful API. There's a ton we can do, thus a perfect demonstration of how much power one library can give you.</p><h2 id=\"batteries-not-included\">Batteries Not Included</h2><p>Even I sometimes forget that requests is not a built-in Python library. Make sure <strong>requests</strong> is installed in your environment via <code>pip install requests</code>.</p><p>Create a file in your directory called <code>creds.py</code> to store your credentials. Make sure to add that file to your <code>.gitignore</code> if you plan on committing anything any time soon.</p><pre><code class=\"language-python\"># creds.py\nusername = fake.user\npassword = securepassword123\n</code></pre>\n<p>The only libraries we need to import are <code>requests</code> and <code>json</code>. Make sure you import your credentials from the file you created earlier.</p><pre><code class=\"language-python\">import requests\nimport json\nfrom creds import username, password\n</code></pre>\n<h2 id=\"get-requests\">GET Requests</h2><p>As long as you have a URL, you can make a GET request. The requests library will return the content of any page it hits; if you make a request to an HTML page, your response will be that page's HTML source.</p><p>When we know what sort of data we're expecting to receive back, we can specify the expected <em>content type</em> by passing the <em>headers</em> argument, and specifying the <em>Content-Type</em>. Authentication is handled via passing arguments as well, specifically the <em>auth</em> argument. Take a look at what you can pass in a GET request:</p><h3 id=\"common-get-arguments\">Common GET Arguments</h3><ul><li><strong>url:</strong> The URL we will either retrieve or pass the information along to.</li><li><strong>parameters</strong> (optional):  Depending on the API, some URLs can accept a dictionary of variables to be passed along with the URL. These are called query strings; you notice these all the time whenever you come across a URL that looks like nonsense... that nonsense is information!</li><li><strong>headers</strong> (optional): A collection of metadata sent along with the request. Our browsers send HTTP headers every time we visit a site, but the scope of what a header value might cover ranges from tokens to content types.</li><li><strong>auth</strong> (optional):  Method for logging in if needed. Basic/Digest/Custom HTTP Auth.</li></ul><h3 id=\"let-s-get-some\">Let’s GET Some</h3><p>We're going to make a relatively simple request to pull open tickets from a JIRA project called <em>EXM.</em></p><p>This request will:</p><ul><li>Accept our destination's base URL</li><li>Append 'search/' (the endpoint for searching issues)</li><li>Pass two parameters:  A query to return issues A flag to show the issue history</li><li>Authenticate with our username/password</li><li>Print the result</li></ul><pre><code class=\"language-python\">import requests\nimport json\nfrom creds import username\nfrom creds import password\n\nbase_url = 'https://examplejira.com/rest/api/2/'\nheaders = {'Content-Type': 'application/json'}\nparams = {\n    'jql': 'project = EXM AND resolution is not EMPTY',\n    'expand': 'changelog',\n}\n\nreq = requests.get(base_url + 'search/', headers=headers, params=params, auth=(username, password))\n\nprint(req.content)\n</code></pre>\n<p>Notice that setting a variable equal to the request will equal the result of that request. Printing <code>r</code> alone would return a numerical status code (200, 404, etc). The response that comes back from request such as <code>r</code> are actually complex objects — printing <code>r.json()</code> will display the contents of the response as a JSON object. Alternatively, <code>r.text</code> returns the raw response as a string.</p><p>If your response comes back with an error, remember that you can always debug your requests via <a href=\"https://www.getpostman.com/\" rel=\"noopener\">Postman</a>.</p><p>If all went well with our request, <code>r.json()</code> should return something similar to the following:</p><pre><code class=\"language-json\">{  \n   &quot;expand&quot;:&quot;schema,names&quot;,\n   &quot;startAt&quot;:0,\n   &quot;maxResults&quot;:50,\n   &quot;total&quot;:63,\n   &quot;issues&quot;:[  \n      {  \n         &quot;expand&quot;:&quot;operations,versionedRepresentations,editmeta,changelog,renderedFields&quot;,\n         &quot;id&quot;:&quot;10558&quot;,\n         &quot;self&quot;:&quot;https://hackersandslackers.atlassian.net/rest/api/2/issue/10558&quot;,\n         &quot;key&quot;:&quot;HSB-63&quot;,\n         &quot;fields&quot;:{  \n            &quot;issuetype&quot;:{  \n               &quot;self&quot;:&quot;https://hackersandslackers.atlassian.net/rest/api/2/issuetype/10007&quot;,\n               &quot;id&quot;:&quot;10007&quot;,\n               &quot;description&quot;:&quot;Non-development related content task&quot;,\n               &quot;iconUrl&quot;:&quot;https://hackersandslackers.atlassian.net/secure/viewavatar?size=xsmall&amp;avatarId=10306&amp;avatarType=issuetype&quot;,\n               &quot;name&quot;:&quot;Content&quot;,\n               &quot;subtask&quot;:false,\n               &quot;avatarId&quot;:10306\n            },\n         }\n    ]\n}\n</code></pre>\n<p>The entirety of the request is probably much longer (depending on how many issues you have). Notice how JIRA will only return a maximum of 50 results unless otherwise specified (this is one of the parameters they accept). Feel free to check out JIRA's API documentation to see what else you can do, but be warned: their docs kind of suck.</p><p>Retrieving information is cool, but modifying it is even better. Here's a use case which might be immediately useful: creating a user.</p><h2 id=\"post-requests\">POST Requests</h2><p>In addition to the arguments GET requests can receive, POST requests can also accept arguments like as <em>data.</em> This is where we tell the API the specifics of what we're trying to do.</p><h3 id=\"common-post-arguments\">Common POST Arguments</h3><ul><li><strong>url</strong>: Endpoint URL.</li><li><strong>params</strong> (optional): Dictionary of variables to be passed as parameters of a query string.</li><li><strong>body</strong> (optional): A JSON or  ML object sent in the body of the Request.</li><li><strong>headers</strong> (optional):  Dictionary of HTTP Headers to send with the Request.</li><li><strong>auth</strong> (optional):  Auth to enable Basic/Digest/Custom HTTP Auth.</li></ul><h3 id=\"let-there-be-users\">Let There be Users</h3><p>The main difference between this request and the last will be what we pass via the <em>data</em> argument. For example's sake we'll be creating a user named <em>bro</em> with the appropriate broiest details.</p><p>Take special note of <code>json.dumps(userdata)</code>. If an endpoint is expecting JSON (it probably is) we need to explicitly convert our dictionary of values to JSON before making this request.</p><pre><code class=\"language-python\">import requests\nimport json\nfrom creds import username\nfrom creds import password\n\nbase_url = &quot;https://examplejira.com/rest/api/2/&quot;\nheaders = {'Content-Type': 'application/json'}\nuserdata = {\n  'username': 'bro',\n  'name': 'Bro',\n  'password': '32456456',\n  'email': 'bro@broiest.com',\n  &quot;notification&quot; : &quot;true&quot;\n}\n\nreq = requests.post(base_url + 'user/', data=json.dumps(userdata), headers=headers, auth=(username, password))\n\nprint(req.content)\n\n</code></pre>\n<p>You just created a user. That's basically like giving birth to a child. Congratulations.</p><h2 id=\"advanced-post-requests\">Advanced POST Requests</h2><p>As fun as it is to create bro users in JIRA instances, one-off usage of APIs like this isn't really useful. We haven't done anything that we couldn't have just done ourselves via the UI.</p><p>To spice things up, here's a very real use case: importing a list of users via a CSV. As we speak, people in corporations around the world are manually adding thousands of users by hand to internal SaaS products. Don't be that person.</p><p>This request will do the following:</p><ul><li>Use <strong>pandas</strong> to open <em>users.csv</em>  (presumably this CSV should have columns for name, email, etc)  </li><li>Generate a random password using <strong>secrets</strong></li><li>Use the CSV to create accounts with each user's information</li><li>Output the result to <em>users_created.csv</em></li><li></li></ul><pre><code class=\"language-python\"># JIRA User Import\n\nimport pandas as pd\nimport requests\nimport secrets\nimport json\n\n# store credentials\nfrom creds import username\nfrom creds import password\n\n# dataframe from csv\nuser_df = pd.read_csv('users.csv')\n\n# store results of import\nrows_list = []\n\nheaders = {'Content-Type': 'application/json'}\nbase_url = &quot;https://examplejira.com/rest/api/2/&quot;\n\n# generate 20-character password\ndef generate_password():\n    alphabet = string.ascii_letters + string.digits\n    password = ''.join(secrets.choice(alphabet) for i in range(20))\n    return password\n\n# iterate and create users\nfor index, row in user_df.iterrows():\n    userdata = {\n        &quot;name&quot;: row['email'].split('@')[0],\n        &quot;password&quot;: generate_password(),\n        &quot;emailAddress&quot;: row['email'],\n        &quot;displayName&quot;: row['name'],\n        &quot;notification&quot; : &quot;true&quot;\n    }\n    req = requests.post(base_url + 'user/', data=json.dumps(userdata), headers=headers, auth=(jirauser, password))\n    rows_list.append(userdata) # adds row to array to be tracked\n    # create &amp; export results to a csv\n    users_imported_df = pd.DataFrame(rows_list)\n    users_imported_df.to_csv('users_created.csv')\n\n</code></pre>\n<p>If this worked for you, take a moment to put something in perspective: you just automated somebody's entire 9-5 job in a few minutes.</p><p>Also feel free to reflect on our purpose as a species. If automating this was so straightforward, why do so many of us choose not to automate more tasks? Is our entire economy a hoax created to grant the masses an illusion of free will? Are we running around in circles trying to solve problems we create ourselves, to pay the bills which come with being employed? Finally: if robots are clearly this superior, is there a purpose for the human race at all?</p><p>Now you're asking the real questions. Hail Megatron.</p>","url":"https://hackersandslackers.com/pythons-requests-library/","uuid":"9ee37ee8-83d1-452a-acb4-b90b96cf6725","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5ae8ec83ed09bd1cb7110e65"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867364a","title":"Lynx Roundup, May 1st","slug":"lynx-roundup-may-1st","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/04/119.jpg","excerpt":"Daily roundup of Data Science news around the industry, 5/1/2018.","custom_excerpt":"Daily roundup of Data Science news around the industry, 5/1/2018.","created_at_pretty":"01 May, 2018","published_at_pretty":"01 May, 2018","updated_at_pretty":"10 April, 2019","created_at":"2018-05-01T00:21:29.000-04:00","published_at":"2018-05-01T05:00:00.000-04:00","updated_at":"2019-04-10T02:44:02.000-04:00","meta_title":"Lynx Roundup, May 1st | Hackers and Slackers","meta_description":"Daily roundup of Data Science news around the industry, 5/1/2018.","og_description":"Daily roundup of Data Science news around the industry, 5/1/2018.","og_image":"https://hackersandslackers.com/content/images/2019/04/119-2.jpg","og_title":"Lynx Roundup, May 1st","twitter_description":"Daily roundup of Data Science news around the industry, 5/1/2018.","twitter_image":"https://hackersandslackers.com/content/images/2019/04/119-1.jpg","twitter_title":"Lynx Roundup, May 1st","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://nuit-blanche.blogspot.com/2018/04/quantized-compressive-k-means.html\n\nhttp://dataconomy.com/2018/04/how-semantics-technology-is-taking-the-risk-out-of-hiring/\n\nhttps://www.quora.com/What-is-the-hardest-skill-to-teach-in-software-engineering/answer/Brian-Knapp-1?share=6155b0e6&srid=JXMt\n[https://www.quora.com/What-is-the-hardest-skill-to-teach-in-software-engineering/answer/Brian-Knapp-1?share=6155b0e6&srid=JXMt]\n\nLiterate Ray Tracer in Clojure [https://ray-tracer.surge.sh/]\nA literate ray tracer implemented in Clojure, based on the book Ray Tracing in\nOne Weekend by Peter Shirley. The orginal source code for the book can be found\nhere.https://ray-tracer.surge.sh/\n\nhttps://arstechnica.com/information-technology/2018/04/army-researchers-find-the-best-cyber-teams-are-antisocial-cyber-teams/","html":"<p><a href=\"https://nuit-blanche.blogspot.com/2018/04/quantized-compressive-k-means.html\">https://nuit-blanche.blogspot.com/2018/04/quantized-compressive-k-means.html</a></p><p><a href=\"http://dataconomy.com/2018/04/how-semantics-technology-is-taking-the-risk-out-of-hiring/\">http://dataconomy.com/2018/04/how-semantics-technology-is-taking-the-risk-out-of-hiring/</a></p><p><a href=\"https://www.quora.com/What-is-the-hardest-skill-to-teach-in-software-engineering/answer/Brian-Knapp-1?share=6155b0e6&amp;srid=JXMt\">https://www.quora.com/What-is-the-hardest-skill-to-teach-in-software-engineering/answer/Brian-Knapp-1?share=6155b0e6&amp;srid=JXMt</a></p><h4 id=\"literate-ray-tracer-in-clojure\"><a href=\"https://ray-tracer.surge.sh/\">Literate Ray Tracer in Clojure</a></h4><p>A literate ray tracer implemented in Clojure, based on the book Ray Tracing in One Weekend by Peter Shirley. The orginal source code for the book can be found here.https://ray-tracer.surge.sh/</p><p><a href=\"https://arstechnica.com/information-technology/2018/04/army-researchers-find-the-best-cyber-teams-are-antisocial-cyber-teams/\">https://arstechnica.com/information-technology/2018/04/army-researchers-find-the-best-cyber-teams-are-antisocial-cyber-teams/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-may-1st/","uuid":"90767dc0-73b4-4b5a-ac43-4b1ca59ee622","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5ae7eb49ed09bd1cb7110e5f"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673648","title":"MySQL on the Cloud with AWS RDS","slug":"setting-up-mysql-on-aws","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/04/aws_mysql@2x.jpg","excerpt":"Spinning up a standalone MySQL Database with Amazon.","custom_excerpt":"Spinning up a standalone MySQL Database with Amazon.","created_at_pretty":"30 April, 2018","published_at_pretty":"01 May, 2018","updated_at_pretty":"27 November, 2018","created_at":"2018-04-29T23:12:26.000-04:00","published_at":"2018-04-30T20:14:57.000-04:00","updated_at":"2018-11-27T03:54:21.000-05:00","meta_title":"Setting up MySQL on AWS | Hackers and Slackers","meta_description":"Spinning up a standalone MySQL Database with Amazon","og_description":"Spinning up a standalone MySQL Database with Amazon","og_image":"https://hackersandslackers.com/content/images/2018/04/aws_mysql@2x.jpg","og_title":"Setting up MySQL on AWS","twitter_description":"Spinning up a standalone MySQL Database with Amazon","twitter_image":"https://hackersandslackers.com/content/images/2018/04/aws_mysql@2x.jpg","twitter_title":"Setting up MySQL on AWS","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"MySQL","slug":"mysql","description":"Database configuration, building queries, and cloud hosting options for MySQL.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/mysqlrevamp_o.jpg","meta_description":"Database configuration, building queries, and cloud hosting options for MySQL.","meta_title":"Working with MySQL | Hackers and Slackers","visibility":"public"},"tags":[{"name":"MySQL","slug":"mysql","description":"Database configuration, building queries, and cloud hosting options for MySQL.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/mysqlrevamp_o.jpg","meta_description":"Database configuration, building queries, and cloud hosting options for MySQL.","meta_title":"Working with MySQL | Hackers and Slackers","visibility":"public"},{"name":"DevOps","slug":"devops","description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","feature_image":null,"meta_description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","meta_title":"DevOps: Networking And Server Configuration | Hackers and Slackers","visibility":"public"},{"name":"AWS","slug":"aws","description":"Monolithic cloud architecture via microservices. Become familiar with AWS products, account administration, security practices, and tips to make it all easier.","feature_image":null,"meta_description":"Become familiar with AWS services, account administration, security practices, and tips to make it all easier.","meta_title":"Learn AWS | Hackers and Slackers","visibility":"public"},{"name":"Architecture","slug":"architecture","description":"Advancements in software architecture, serverless and beyond. Examples include equivalents to Lambda functions, Docker containers, Google Cloud functions,  Kubernetes, Heroku, etc.","feature_image":null,"meta_description":"Advancements in software architecture, serverless and beyond. Examples include equivalents to cloud functions, Docker containers, Kubernetes, Heroku, etc.","meta_title":"Software Architecture | Hackers and Slackers","visibility":"public"},{"name":"#Working with MySQL","slug":"working-with-mysql","description":"Learn about MySQL database configuration, the query language, and cloud hosted instances.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/mysql1_o-1.jpg","meta_description":"Learn about MySQL database configuration, the query language, and cloud hosted instances.","meta_title":"Working with MySQL","visibility":"internal"}],"plaintext":"Last time we became familiar with the handiwork of setting up MySQL locally,\nnavigating databases via command line, and exposing your database to external\naccess. While badass, it has come to my attention that most people don't bother\ndoing things this way. Unless you're getting deep into some heavy architecture,\nmost people opt to use cloud services such as AWS to set up databases which are\nintended to be interacted with by multiple services.\n\nA perfect example is one we ran into over the weekend while working on this very\nblog. We're running a Ghost instance, which is respectably complex\nproduction-ready app. For a bunch of guys just looking to make some stupid blog\nwidgets, it became obvious that reverse engineering the undocumented inner\nworkings of an open source node app was a rabbit hole of complexity.\n\nHosting on AWS\nIn our case, AWS is useful for enforcing separation of concerns. Instead of\nbuilding new logic into a live app, we can build that logic elsewhere in a way\nthat's reusable across multiple apps.\n\nThe end goal here is simply to read/write to a database. That said, there's\nstill a fair amount of complexity involved. We'll need to leverage the following\nAWS services:\n\n * RDS (Relational Database Service): A cloud hosted database\n * API Gateway: An interface for building APIs\n * Lambda: The necessary serverless connector between RDS and Gateway\n * IAM: Amazon's god-awful user and policy manager\n\nFor now, all we're going to worry about is RDS.\n\nData is the New Kale is the New Money is the new Bitcoin Oil Gold ETFs\nHead to the AWS console and create a new RDS instance. Once prompted, go with\nMySQL:\n\nAs though some of these are real options. Please.Stick with MySQL Production  on the next screen.\n\nDo everything in production. AlwaysConfiguration Settings\nThis is where we set our configurations. You'll notice immediately how\nconvoluted AWS tends to be with their naming conventions. I personally hate how\nintentionally unintuitive all of AWS tends to be (what the hell is a \ndb.t2.medium)? This sort of absurdity is just something we need to deal with\nforever. Amazon is technically outside the realm of enforceable Monopoly laws,\nand there's no reason to believe their reign of mediocre products and talking\nrobots is ever going to end.\n\n * License: Select general-public-license\n * Version: Choose whichever, just don't do an old one\n * Instance class: Most of these instances are huge and unnecessary. Go with\n   something small: I would also advise looking at the pricing plan.\n * Multi AZ: Create a replica.\n * Storage type: General.\n * Allocated storage: Feel free to allocate more for latency.\n * Publicly Accessible: True.\n\nGod I love configuring esoteric shit.Once configuration is complete, it takes a\ngood amount of time for the database to be created. While we wait, let's move on\nto creating to a user to access this. We can do this with IAM: another AWS\nproduct with an even more terrible interface.\n\nAccess\nFair warning: user roles and permissions are the worst part of AWS. I could\nwrite an entire series on how deep this mess of a scheme goes, but quite\nhonestly I still barely understand what I'm doing most of the time.\n\nCreating a User\nCreate a new user that will access the database. Go to the Users panel  and\ncreate a user:\n\nModifying permission policies\nPermissions works by \"attaching\" existing \"policies\" to users, groups, etc. AWS\nhas some default policies that we can leverage for our purposes, so this should\nluckily be somewhat straightforward.\n\nPolicies can also be combined so that users have multiple policies across AWS\nproducts.\n\nNative Client\nOnce your DB pops up in AWS, we're going to need to get you a GUI to modify your\nDB. Don't even try to be a hotshot by setting up all your tables via command\nline. It sucks, it's slower, and nobody is impressed. Don't bother downloading\nthe AWS CLI either. Do not pass GO. Do not collect 500 dollars.\n\nIn case you need to install MySQL locally, an OSX download can be found here.\nCome to think of it, that step was probably unnecessary. I'm not sure why I did\nthat.\n\nI settled on Sequel Pro [https://www.sequelpro.com/]  as a client. It's good\nenough, and their logo looks like pancakes. That's really the only metric I\nneeded tbh.\n\nTo connect to your database, you'll need to retrieve the endpoint and port\nnumber from your RDS console:\n\nConnect to that ish:\n\nHopefully everything went well! If not, I'm sure the problem will be a quick and\neasy fix. Surely it won't involve mindlessly swapping permissions for an entire\nday. You defintely won't somehow end up corrupting your .bash_profile, making\nPython invisible to your OS, and effectively destroying your computer. Only an\nidiot would do something like that. Yesterday evening.\n\nGo ahead and get accustomed to the UI of Sequel Pro - it's pretty\nstraightforward, and ten thousand million times less effort than creating tables\nvia terminal. Create columns under the \"structure\" tab - the terminology should\nimmediately seem familiar if you've been following the series until this point.\n\nProtip: Issues with Security Groups\nIf you're running into an issue connecting to your DB externally, I happened to\nrun in to a nice little issue the other day with security groups. RDS instances\nlimit what kinds of connections they accept via \"security groups.\" This is yet\nanother layer of AWS security hassle where you'll need to specify which hosts\nare permitted to access your DB, by type of connection, port range, etc.\n\nIf you'd like to get this over with as soon as possible, this configuration will\nopen you up to the entire world:\n\nHappy Trails\nNext time we're going to sink deeper into this rabbit hole by exploring the\nwonderful world of serverless functions. Setting up AWS Lambda will allow us to\nconfigure endpoints which will allow us to read and write data to our brand new\ntable in the sky.\n\nWe'll still need to get into API Gateway after that, but let's not think about\nthat just yet. Let's not address the absurd amount of time and effort we're\nabout to spend just to make a god damn widget that shows Github commits.","html":"<p>Last time we became familiar with the handiwork of setting up MySQL locally, navigating databases via command line, and exposing your database to external access. While badass, it has come to my attention that most people don't bother doing things this way. Unless you're getting deep into some heavy architecture, most people opt to use cloud services such as AWS to set up databases which are intended to be interacted with by multiple services.</p><p>A perfect example is one we ran into over the weekend while working on this very blog. We're running a Ghost instance, which is respectably complex production-ready app. For a bunch of guys just looking to make some stupid blog widgets, it became obvious that reverse engineering the undocumented inner workings of an open source node app was a rabbit hole of complexity.</p><h2 id=\"hosting-on-aws\">Hosting on AWS</h2><p>In our case, AWS is useful for enforcing separation of concerns. Instead of building new logic into a live app, we can build that logic elsewhere in a way that's reusable across multiple apps.</p><p>The end goal here is simply to read/write to a database. That said, there's still a fair amount of complexity involved. We'll need to leverage the following AWS services:</p><ul><li>RDS (Relational Database Service): A cloud hosted database</li><li>API Gateway: An interface for building APIs</li><li>Lambda: The necessary serverless connector between RDS and Gateway</li><li>IAM: Amazon's god-awful user and policy manager</li></ul><p>For now, all we're going to worry about is RDS.</p><h2 id=\"data-is-the-new-kale-is-the-new-money-is-the-new-bitcoin-oil-gold-etfs\">Data is the New Kale is the New Money is the new Bitcoin Oil Gold ETFs</h2><p>Head to the AWS console and create a new RDS instance. Once prompted, go with MySQL:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://hackersandslackers.com/content/images/2018/05/Screenshot-2018-04-30-19.59.13.png\" class=\"kg-image\" alt=\"Database Type\"><figcaption>As though some of these are real options. Please.</figcaption></figure><p>Stick with <strong>MySQL Production</strong> on the next screen.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://hackersandslackers.com/content/images/2018/05/Screenshot-2018-04-30-19.59.22.png\" class=\"kg-image\" alt=\"Use case\"><figcaption>Do everything in production. Always</figcaption></figure><h3 id=\"configuration-settings\">Configuration Settings</h3><p>This is where we set our configurations. You'll notice immediately how convoluted AWS tends to be with their naming conventions. I personally hate how intentionally unintuitive all of AWS tends to be (what the hell is a <em>db.t2.medium</em>)? This sort of absurdity is just something we need to deal with forever. Amazon is technically outside the realm of enforceable Monopoly laws, and there's no reason to believe their reign of mediocre products and talking robots is ever going to end.</p><ul><li><strong>License</strong>: Select <em>general-public-license</em></li><li><strong>Version</strong>: Choose whichever, just don't do an old one</li><li><strong>Instance class</strong>: Most of these instances are huge and unnecessary. Go with something small: I would also advise looking at the pricing plan.</li><li><strong>Multi AZ</strong>: Create a replica.</li><li><strong>Storage type</strong>: General.</li><li><strong>Allocated storage</strong>: Feel free to allocate more for latency.</li><li><strong>Publicly Accessible</strong>: True.</li></ul><figure class=\"kg-card kg-image-card\"><img src=\"https://hackersandslackers.com/content/images/2018/05/Screenshot-2018-04-30-19.59.46.png\" class=\"kg-image\" alt=\"Configuration\"><figcaption>God I love configuring esoteric shit.</figcaption></figure><p>Once configuration is complete, it takes a good amount of time for the database to be created. While we wait, let's move on to creating to a user to access this. We can do this with IAM: another AWS product with an even more terrible interface.</p><h2 id=\"access\">Access</h2><p>Fair warning: user roles and permissions are the worst part of AWS. I could write an entire series on how deep this mess of a scheme goes, but quite honestly I still barely understand what I'm doing most of the time.</p><h3 id=\"creating-a-user\">Creating a User</h3><p>Create a new user that will access the database. Go to the <a href=\"https://console.aws.amazon.com/iam/home?region=us-east-1#/users\">Users panel</a> and create a user:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://hackersandslackers.com/content/images/2018/04/Screenshot-2018-04-30-19.37.20.png\" class=\"kg-image\" alt=\"Users\"></figure><h3 id=\"modifying-permission-policies\">Modifying permission policies</h3><p>Permissions works by \"attaching\" existing \"policies\" to users, groups, etc. AWS has some default policies that we can leverage for our purposes, so this should luckily be somewhat straightforward.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://hackersandslackers.com/content/images/2018/04/Screenshot-2018-04-30-19.39.15.png\" class=\"kg-image\" alt=\"Permissions\"></figure><p>Policies can also be combined so that users have multiple policies across AWS products.</p><h2 id=\"native-client\">Native Client</h2><p>Once your DB pops up in AWS, we're going to need to get you a GUI to modify your DB. Don't even try to be a hotshot by setting up all your tables via command line. It sucks, it's slower, and nobody is impressed. Don't bother downloading the AWS CLI either. Do not pass GO. Do not collect 500 dollars.</p><p>In case you need to install MySQL locally, an OSX download can be found <a href=\"https://dev.mysql.com/downloads/mysql/5.5.html#macosx-dmg\">here</a>. Come to think of it, that step was probably unnecessary. I'm not sure why I did that.</p><p>I settled on <a href=\"https://www.sequelpro.com/\">Sequel Pro</a> as a client. It's good enough, and their logo looks like pancakes. That's really the only metric I needed tbh.</p><p>To connect to your database, you'll need to retrieve the endpoint and port number from your RDS console:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://hackersandslackers.com/content/images/2018/04/Screenshot-2018-04-30-19.51.44.png\" class=\"kg-image\" alt=\"Endpoint\"></figure><p>Connect to that ish:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://hackersandslackers.com/content/images/2018/04/Screenshot-2018-04-30-19.51.28.png\" class=\"kg-image\" alt=\"Sequel Pro\"></figure><p>Hopefully everything went well! If not, I'm sure the problem will be a quick and easy fix. Surely it won't involve mindlessly swapping permissions for an entire day. You defintely won't somehow end up corrupting your .bash_profile, making Python invisible to your OS, and effectively destroying your computer. Only an idiot would do something like that. Yesterday evening.</p><p>Go ahead and get accustomed to the UI of Sequel Pro - it's pretty straightforward, and ten thousand million times less effort than creating tables via terminal. Create columns under the \"structure\" tab - the terminology should immediately seem familiar if you've been following the series until this point.</p><h2 id=\"protip-issues-with-security-groups\">Protip: Issues with Security Groups</h2><p>If you're running into an issue connecting to your DB externally, I happened to run in to a nice little issue the other day with security groups. RDS instances limit what kinds of connections they accept via \"security groups.\" This is yet another layer of AWS security hassle where you'll need to specify which hosts are permitted to access your DB, by type of connection, port range, etc.</p><p>If you'd like to get this over with as soon as possible, this configuration will open you up to the entire world:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://hackersandslackers.com/content/images/2018/05/Screenshot-2018-05-06-07.15.26.png\" class=\"kg-image\" alt=\"Security Groups\"></figure><h2 id=\"happy-trails\">Happy Trails</h2><p>Next time we're going to sink deeper into this rabbit hole by exploring the wonderful world of serverless functions. Setting up AWS Lambda will allow us to configure endpoints which will allow us to read and write data to our brand new table in the sky.</p><p>We'll still need to get into API Gateway after that, but let's not think about that just yet. Let's not address the absurd amount of time and effort we're about to spend just to make a god damn widget that shows Github commits.</p>","url":"https://hackersandslackers.com/setting-up-mysql-on-aws/","uuid":"bf9a9804-206a-4556-ade4-b7cbdd896ecc","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5ae6899aed09bd1cb7110e51"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673649","title":"Lynx Roundup, April 30th","slug":"lynx-roundup-april-30th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx8@2x.jpg","excerpt":"Daily roundup of Data Science news around the industry, 4/30/2018.","custom_excerpt":"Daily roundup of Data Science news around the industry, 4/30/2018.","created_at_pretty":"30 April, 2018","published_at_pretty":"30 April, 2018","updated_at_pretty":"25 July, 2018","created_at":"2018-04-29T23:25:02.000-04:00","published_at":"2018-04-30T05:00:00.000-04:00","updated_at":"2018-07-24T22:06:02.000-04:00","meta_title":"Lynx Roundup, April 30th | Hackers and Slackers","meta_description":"Daily roundup of Data Science news around the industry, 4/30/2018.","og_description":"Daily roundup of Data Science news around the industry, 4/30/2018.","og_image":"https://hackersandslackers.com/content/images/lynx/lynx8@2x.jpg","og_title":"Lynx Roundup, April 30th","twitter_description":"Daily roundup of Data Science news around the industry, 4/30/2018.","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx8@2x.jpg","twitter_title":"Lynx Roundup, April 30th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://medium.com/octavian-ai/review-prediction-with-neo4j-and-tensorflow-1cd33996632a\n\nhttps://www.datasciencecentral.com/profiles/blogs/open-source-etl-apache-nifi-vs-streamsets\n\nhttps://www.kdnuggets.com/2018/04/blockchain-explained-7-python-functions.html\n\nhttps://tbgraph.wordpress.com/2018/04/25/neo4j-a-algorithm/\n\nhttps://www.kdnuggets.com/2018/04/right-metric-evaluating-machine-learning-models-1.html\n\nhttps://spectrum.ieee.org/the-human-os/biomedical/devices/qa-ai-could-redesign-the-drug-development-process\n\nHey look, free book! From Andrew Ng hisself http://www.mlyearning.org/\n\nhttps://bravenewgeek.com/more-environments-will-not-make-things-easier/\n\nhttps://johncarlosbaez.wordpress.com/2018/04/27/props-in-network-theory/\n\nhttps://medium.com/the-artificial-impostor/feature-importance-measures-for-tree-models-part-i-47f187c1a2c3","html":"<p><a href=\"https://medium.com/octavian-ai/review-prediction-with-neo4j-and-tensorflow-1cd33996632a\">https://medium.com/octavian-ai/review-prediction-with-neo4j-and-tensorflow-1cd33996632a</a></p>\n<p><a href=\"https://www.datasciencecentral.com/profiles/blogs/open-source-etl-apache-nifi-vs-streamsets\">https://www.datasciencecentral.com/profiles/blogs/open-source-etl-apache-nifi-vs-streamsets</a></p>\n<p><a href=\"https://www.kdnuggets.com/2018/04/blockchain-explained-7-python-functions.html\">https://www.kdnuggets.com/2018/04/blockchain-explained-7-python-functions.html</a></p>\n<p><a href=\"https://tbgraph.wordpress.com/2018/04/25/neo4j-a-algorithm/\">https://tbgraph.wordpress.com/2018/04/25/neo4j-a-algorithm/</a></p>\n<p><a href=\"https://www.kdnuggets.com/2018/04/right-metric-evaluating-machine-learning-models-1.html\">https://www.kdnuggets.com/2018/04/right-metric-evaluating-machine-learning-models-1.html</a></p>\n<p><a href=\"https://spectrum.ieee.org/the-human-os/biomedical/devices/qa-ai-could-redesign-the-drug-development-process\">https://spectrum.ieee.org/the-human-os/biomedical/devices/qa-ai-could-redesign-the-drug-development-process</a></p>\n<p>Hey look, free book!  From Andrew Ng hisself  <a href=\"http://www.mlyearning.org/\">http://www.mlyearning.org/</a></p>\n<p><a href=\"https://bravenewgeek.com/more-environments-will-not-make-things-easier/\">https://bravenewgeek.com/more-environments-will-not-make-things-easier/</a></p>\n<p><a href=\"https://johncarlosbaez.wordpress.com/2018/04/27/props-in-network-theory/\">https://johncarlosbaez.wordpress.com/2018/04/27/props-in-network-theory/</a></p>\n<p><a href=\"https://medium.com/the-artificial-impostor/feature-importance-measures-for-tree-models-part-i-47f187c1a2c3\">https://medium.com/the-artificial-impostor/feature-importance-measures-for-tree-models-part-i-47f187c1a2c3</a></p>\n","url":"https://hackersandslackers.com/lynx-roundup-april-30th/","uuid":"c0fb52ba-fb4d-4560-9df5-49f0dfce1665","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5ae68c8eed09bd1cb7110e54"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673647","title":"Lynx Roundup, April 27th","slug":"lynx-roundup-april-27th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx20@2x.jpg","excerpt":"Daily roundup of Data Science news around the industry, 4/27/2018.","custom_excerpt":"Daily roundup of Data Science news around the industry, 4/27/2018.","created_at_pretty":"27 April, 2018","published_at_pretty":"27 April, 2018","updated_at_pretty":"25 July, 2018","created_at":"2018-04-27T18:51:15.000-04:00","published_at":"2018-04-27T19:00:50.000-04:00","updated_at":"2018-07-24T22:06:02.000-04:00","meta_title":"Lynx Roundup, April 27th | Hackers and Slackers","meta_description":"Daily roundup of Data Science news around the industry, 4/27/2018.","og_description":"Daily roundup of Data Science news around the industry, 4/27/2018.","og_image":"https://hackersandslackers.com/content/images/lynx/lynx20@2x.jpg","og_title":"Lynx Roundup, April 27th","twitter_description":"Daily roundup of Data Science news around the industry, 4/27/2018.","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx20@2x.jpg","twitter_title":"Lynx Roundup, April 27th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://blog.gojekengineering.com/how-to-build-resilience-in-large-scale-distributed-systems-ddd1496b6c0\n\nGood professional advice from Hamming hisself\nhttps://www.cs.virginia.edu/~robins/YouAndYourResearch.html\n\nhttps://increment.com/programming-languages/\n\nHell yes! I've been wanting something like this for ages. Progress toward having\nthe power of D3 with the expressiveness and \"not having to actually do all that\nmuch typing\"-ness of ClojureScript \nhttps://lambdaisland.com/blog/26-04-2018-d3-clojurescript\n\nhttp://tech.marksblogg.com/presto-connectors-kafka-mongodb-mysql-postgresql-redis.html\n\nhttps://www.kdnuggets.com/2018/04/building-convolutional-neural-network-numpy-scratch.html\n\nhttps://www.johndcook.com/blog/2018/04/14/ieee-vs-posit/\n\nhttp://web.mit.edu/tslvr/www/lessons_two_years.html\n\nhttps://towardsdatascience.com/bayesian-linear-regression-in-python-using-machine-learning-to-predict-student-grades-part-1-7d0ad817fca5\n\nhttps://cypher.codes/writing/transforming-python-asts-to-optimize-comprehensions-at-runtime\n\nhttps://www.theverge.com/2018/4/25/17275270/artificial-intelligence-materials-science-computation\n\nhttp://www.electronicdesign.com/automotive/fpga-board-moves-vision-system-processing-front\n\nhttps://santafe.edu/news-center/news/new-study-improves-crowd-wisdom-estimates\n\nhttps://www.kdnuggets.com/2018/04/implementing-deep-learning-methods-feature-engineering-text-data-glove.html\n\nhttps://www.oreilly.com/ideas/toward-the-jet-age-of-machine-learning\n\nhttp://mindblog.dericbownds.net/2018/04/seeing-what-you-feel-unconscious-affect.html\n\nhttps://nuit-blanche.blogspot.com/2018/04/videos-computational-theories-of-brain.html\n\nhttp://highscalability.com/blog/2018/4/25/update-what-will-programming-look-like-in-the-future.html\n\nhttp://www.electronicdesign.com/embedded-revolution/qualcomm-uses-heterogeneous-cores-help-cameras-see-and-understand\n\nhttps://cheevahagadog.github.io/posts/requestium/\n\nsystem calls pic.twitter.com/hL91dqbFyq [https://t.co/hL91dqbFyq]\n\n— 🔎Julia Evans🔍 (@b0rk) April 25, 2018\n[https://twitter.com/b0rk/status/989011990092963840?ref_src=twsrc%5Etfw]\nhttp://www.sciencefocus.com/gallery/future/retro-robots-doing-runofthemill-things\n\nhttps://sdtimes.com/ai/google-introduces-tensorflow-hub-reusable-machine-learning-models/\n\nhttps://santafe.edu/news-center/news/machine-learning-yields-new-insights-french-revolutions-early-days","html":"<p><a href=\"https://blog.gojekengineering.com/how-to-build-resilience-in-large-scale-distributed-systems-ddd1496b6c0\">https://blog.gojekengineering.com/how-to-build-resilience-in-large-scale-distributed-systems-ddd1496b6c0</a></p>\n<p>Good professional advice from Hamming hisself<br>\n<a href=\"https://www.cs.virginia.edu/~robins/YouAndYourResearch.html\">https://www.cs.virginia.edu/~robins/YouAndYourResearch.html</a></p>\n<p><a href=\"https://increment.com/programming-languages/\">https://increment.com/programming-languages/</a></p>\n<p>Hell yes!  I've been wanting something like this for ages.  Progress toward having the power of D3 with the expressiveness and &quot;not having to actually do all that much typing&quot;-ness of ClojureScript <a href=\"https://lambdaisland.com/blog/26-04-2018-d3-clojurescript\">https://lambdaisland.com/blog/26-04-2018-d3-clojurescript</a></p>\n<p><a href=\"http://tech.marksblogg.com/presto-connectors-kafka-mongodb-mysql-postgresql-redis.html\">http://tech.marksblogg.com/presto-connectors-kafka-mongodb-mysql-postgresql-redis.html</a></p>\n<p><a href=\"https://www.kdnuggets.com/2018/04/building-convolutional-neural-network-numpy-scratch.html\">https://www.kdnuggets.com/2018/04/building-convolutional-neural-network-numpy-scratch.html</a></p>\n<p><a href=\"https://www.johndcook.com/blog/2018/04/14/ieee-vs-posit/\">https://www.johndcook.com/blog/2018/04/14/ieee-vs-posit/</a></p>\n<p><a href=\"http://web.mit.edu/tslvr/www/lessons_two_years.html\">http://web.mit.edu/tslvr/www/lessons_two_years.html</a></p>\n<p><a href=\"https://towardsdatascience.com/bayesian-linear-regression-in-python-using-machine-learning-to-predict-student-grades-part-1-7d0ad817fca5\">https://towardsdatascience.com/bayesian-linear-regression-in-python-using-machine-learning-to-predict-student-grades-part-1-7d0ad817fca5</a></p>\n<p><a href=\"https://cypher.codes/writing/transforming-python-asts-to-optimize-comprehensions-at-runtime\">https://cypher.codes/writing/transforming-python-asts-to-optimize-comprehensions-at-runtime</a></p>\n<p><a href=\"https://www.theverge.com/2018/4/25/17275270/artificial-intelligence-materials-science-computation\">https://www.theverge.com/2018/4/25/17275270/artificial-intelligence-materials-science-computation</a></p>\n<p><a href=\"http://www.electronicdesign.com/automotive/fpga-board-moves-vision-system-processing-front\">http://www.electronicdesign.com/automotive/fpga-board-moves-vision-system-processing-front</a></p>\n<p><a href=\"https://santafe.edu/news-center/news/new-study-improves-crowd-wisdom-estimates\">https://santafe.edu/news-center/news/new-study-improves-crowd-wisdom-estimates</a></p>\n<p><a href=\"https://www.kdnuggets.com/2018/04/implementing-deep-learning-methods-feature-engineering-text-data-glove.html\">https://www.kdnuggets.com/2018/04/implementing-deep-learning-methods-feature-engineering-text-data-glove.html</a></p>\n<p><a href=\"https://www.oreilly.com/ideas/toward-the-jet-age-of-machine-learning\">https://www.oreilly.com/ideas/toward-the-jet-age-of-machine-learning</a></p>\n<p><a href=\"http://mindblog.dericbownds.net/2018/04/seeing-what-you-feel-unconscious-affect.html\">http://mindblog.dericbownds.net/2018/04/seeing-what-you-feel-unconscious-affect.html</a></p>\n<p><a href=\"https://nuit-blanche.blogspot.com/2018/04/videos-computational-theories-of-brain.html\">https://nuit-blanche.blogspot.com/2018/04/videos-computational-theories-of-brain.html</a></p>\n<p><a href=\"http://highscalability.com/blog/2018/4/25/update-what-will-programming-look-like-in-the-future.html\">http://highscalability.com/blog/2018/4/25/update-what-will-programming-look-like-in-the-future.html</a></p>\n<p><a href=\"http://www.electronicdesign.com/embedded-revolution/qualcomm-uses-heterogeneous-cores-help-cameras-see-and-understand\">http://www.electronicdesign.com/embedded-revolution/qualcomm-uses-heterogeneous-cores-help-cameras-see-and-understand</a></p>\n<p><a href=\"https://cheevahagadog.github.io/posts/requestium/\">https://cheevahagadog.github.io/posts/requestium/</a></p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">system calls <a href=\"https://t.co/hL91dqbFyq\">pic.twitter.com/hL91dqbFyq</a></p>&mdash; 🔎Julia Evans🔍 (@b0rk) <a href=\"https://twitter.com/b0rk/status/989011990092963840?ref_src=twsrc%5Etfw\">April 25, 2018</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p><a href=\"http://www.sciencefocus.com/gallery/future/retro-robots-doing-runofthemill-things\">http://www.sciencefocus.com/gallery/future/retro-robots-doing-runofthemill-things</a></p>\n<p><a href=\"https://sdtimes.com/ai/google-introduces-tensorflow-hub-reusable-machine-learning-models/\">https://sdtimes.com/ai/google-introduces-tensorflow-hub-reusable-machine-learning-models/</a></p>\n<p><a href=\"https://santafe.edu/news-center/news/machine-learning-yields-new-insights-french-revolutions-early-days\">https://santafe.edu/news-center/news/machine-learning-yields-new-insights-french-revolutions-early-days</a></p>\n","url":"https://hackersandslackers.com/lynx-roundup-april-27th/","uuid":"d3bfdb08-00b1-471c-9717-9ad208e5b5b1","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5ae3a963205e4f19b1e62d51"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673646","title":"Lynx Roundup, April 25th","slug":"lynx-roundup-april-25th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx5@2x.jpg","excerpt":"Data Science with Snikia.","custom_excerpt":"Data Science with Snikia.","created_at_pretty":"25 April, 2018","published_at_pretty":"25 April, 2018","updated_at_pretty":"25 July, 2018","created_at":"2018-04-24T21:27:20.000-04:00","published_at":"2018-04-25T05:00:00.000-04:00","updated_at":"2018-07-24T22:06:02.000-04:00","meta_title":"Lynx Roundup, April 25th | Hackers and Slackers","meta_description":"Data Science with Snikia","og_description":"Data Science with Snikia","og_image":"https://hackersandslackers.com/content/images/lynx/lynx5@2x.jpg","og_title":"Lynx Roundup, April 25th","twitter_description":"Data Science with Snikia","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx5@2x.jpg","twitter_title":"Lynx Roundup, April 25th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://xeno.graphics/\n\nAwesome series, out with a new entry!\n\nhttps://tomaugspurger.github.io/modern-8-scaling.html\n\nhttps://medium.com/@expectgreatdata/down-with-pipeline-debt-introducing-great-expectations-862ddc46782a\n\nTwo minutes hate: \nhttps://blog.ucsusa.org/michael-halpern/a-list-of-scientific-organizations-that-have-supported-and-opposed-limiting-what-research-epa-can-use-to-make-decisions\n\nhttps://projects.propublica.org/asylum/\n\nI used deep learning to cross a book of dinosaurs X a book of flowers \npic.twitter.com/xT7kjkOL9E [https://t.co/xT7kjkOL9E]\n\n— Chri͚̮͋s Rø̴̸̷̳̻̰̪̩̹̿̀̿dle̼͛͆͞y (@chrisrodley) June 15, 2017\n[https://twitter.com/chrisrodley/status/875266719660482560?ref_src=twsrc%5Etfw]\nhttp://www.mobihealthnews.com/content/trayts-new-app-help-people-neurodevelopmental-disorders-track-symptoms\n\nhttps://neo4j.com/blog/graph-algorithms-neo4j-15-different-graph-algorithms-and-what-they-do/\n\nhttps://www.datasciencecentral.com/profiles/blogs/what-does-gdpr-mean-for-your-business\n\nYes! Hooray for Machine Learning invading things! \nhttp://www.electronicdesign.com/industrial-automation/machine-learning-invades-embedded-applications\n\nA series of tubes, you say? \nhttps://www.quantamagazine.org/cells-talk-and-help-one-another-via-tiny-tube-networks-20180423/","html":"<p><a href=\"https://xeno.graphics/\">https://xeno.graphics/</a></p>\n<p>Awesome series, out with a new entry!</p>\n<p><a href=\"https://tomaugspurger.github.io/modern-8-scaling.html\">https://tomaugspurger.github.io/modern-8-scaling.html</a></p>\n<p><a href=\"https://medium.com/@expectgreatdata/down-with-pipeline-debt-introducing-great-expectations-862ddc46782a\">https://medium.com/@expectgreatdata/down-with-pipeline-debt-introducing-great-expectations-862ddc46782a</a></p>\n<p>Two minutes hate: <a href=\"https://blog.ucsusa.org/michael-halpern/a-list-of-scientific-organizations-that-have-supported-and-opposed-limiting-what-research-epa-can-use-to-make-decisions\">https://blog.ucsusa.org/michael-halpern/a-list-of-scientific-organizations-that-have-supported-and-opposed-limiting-what-research-epa-can-use-to-make-decisions</a></p>\n<p><a href=\"https://projects.propublica.org/asylum/\">https://projects.propublica.org/asylum/</a></p>\n<blockquote class=\"twitter-tweet\" style=\"margin:20px auto;\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">I used deep learning to cross a book of dinosaurs X a book of flowers <a href=\"https://t.co/xT7kjkOL9E\">pic.twitter.com/xT7kjkOL9E</a></p>&mdash; Chri͚̮͋s Rø̴̸̷̳̻̰̪̩̹̿̀̿dle̼͛͆͞y (@chrisrodley) <a href=\"https://twitter.com/chrisrodley/status/875266719660482560?ref_src=twsrc%5Etfw\">June 15, 2017</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p><a href=\"http://www.mobihealthnews.com/content/trayts-new-app-help-people-neurodevelopmental-disorders-track-symptoms\">http://www.mobihealthnews.com/content/trayts-new-app-help-people-neurodevelopmental-disorders-track-symptoms</a></p>\n<p><a href=\"https://neo4j.com/blog/graph-algorithms-neo4j-15-different-graph-algorithms-and-what-they-do/\">https://neo4j.com/blog/graph-algorithms-neo4j-15-different-graph-algorithms-and-what-they-do/</a></p>\n<p><a href=\"https://www.datasciencecentral.com/profiles/blogs/what-does-gdpr-mean-for-your-business\">https://www.datasciencecentral.com/profiles/blogs/what-does-gdpr-mean-for-your-business</a></p>\n<p>Yes!  Hooray for Machine Learning invading things!  <a href=\"http://www.electronicdesign.com/industrial-automation/machine-learning-invades-embedded-applications\">http://www.electronicdesign.com/industrial-automation/machine-learning-invades-embedded-applications</a></p>\n<p>A series of tubes, you say? <a href=\"https://www.quantamagazine.org/cells-talk-and-help-one-another-via-tiny-tube-networks-20180423/\">https://www.quantamagazine.org/cells-talk-and-help-one-another-via-tiny-tube-networks-20180423/</a></p>\n","url":"https://hackersandslackers.com/lynx-roundup-april-25th/","uuid":"a96260ae-a076-47e3-8007-9d594a544dd7","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5adfd978c3166c784196e3f8"}}]}},"pageContext":{"pageNumber":30,"humanPageNumber":31,"skip":360,"limit":12,"numberOfPages":33,"previousPagePath":"/page/30","nextPagePath":"/page/32"}}