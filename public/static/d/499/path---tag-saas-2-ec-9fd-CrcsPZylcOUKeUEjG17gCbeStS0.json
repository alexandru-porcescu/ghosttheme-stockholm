{"data":{"ghostTag":{"slug":"saas","name":"SaaS Products","visibility":"public","feature_image":null,"description":"Third-party products and services we’ve discovered to be diamonds in the rough. These are products we’ve included in our stack based on price and value add.","meta_title":"Our Picks: SaaS Products | Hackers and Slackers","meta_description":"Third-party products and services we’ve discovered to be diamonds in the rough. These are products we’ve included in our stack based on price and value add."},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5c570ae30b20340296f57709","title":"Easily Build GraphQL APIs with Prisma","slug":"easily-build-graphql-apis-with-prisma","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/02/prisma2-1.jpg","excerpt":"Jump on the GraphQL Bandwagon with a little help from Prisma.","custom_excerpt":"Jump on the GraphQL Bandwagon with a little help from Prisma.","created_at_pretty":"03 February, 2019","published_at_pretty":"03 February, 2019","updated_at_pretty":"29 March, 2019","created_at":"2019-02-03T10:38:11.000-05:00","published_at":"2019-02-03T16:33:15.000-05:00","updated_at":"2019-03-29T14:47:01.000-04:00","meta_title":"Build GraphQL APIs with Prisma | Hackers and Slackers","meta_description":"Embrace GraphQL by leveraging Prisma: a free service which generates a GraphQL API atop any database.","og_description":"Embrace GraphQL by leveraging Prisma: a free service which generates a GraphQL API atop any database.","og_image":"https://hackersandslackers.com/content/images/2019/02/prisma2-1.jpg","og_title":"Build GraphQL APIs with Prisma","twitter_description":"Embrace GraphQL by leveraging Prisma: a free service which generates a GraphQL API atop any database.","twitter_image":"https://hackersandslackers.com/content/images/2019/02/prisma2-1.jpg","twitter_title":"Build GraphQL APIs with Prisma","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"GraphQL","slug":"graphql","description":"Ditch REST endpoints and build APIs that make sense with your workflow. Get started with Prisma or Apollo toolkits, and join the GraphQL bandwagon.","feature_image":null,"meta_description":"Ditch REST endpoints and build APIs that make sense with your workflow. Get started with Prisma or Apollo toolkits, and join the GraphQL bandwagon.","meta_title":"Build a GraphQL API | Hackers and Slackers","visibility":"public"},"tags":[{"name":"GraphQL","slug":"graphql","description":"Ditch REST endpoints and build APIs that make sense with your workflow. Get started with Prisma or Apollo toolkits, and join the GraphQL bandwagon.","feature_image":null,"meta_description":"Ditch REST endpoints and build APIs that make sense with your workflow. Get started with Prisma or Apollo toolkits, and join the GraphQL bandwagon.","meta_title":"Build a GraphQL API | Hackers and Slackers","visibility":"public"},{"name":"SaaS Products","slug":"saas","description":"Third-party products and services we’ve discovered to be diamonds in the rough. These are products we’ve included in our stack based on price and value add.","feature_image":null,"meta_description":"Third-party products and services we’ve discovered to be diamonds in the rough. These are products we’ve included in our stack based on price and value add.","meta_title":"Our Picks: SaaS Products | Hackers and Slackers","visibility":"public"},{"name":"Architecture","slug":"architecture","description":"Advancements in software architecture, serverless and beyond. Examples include equivalents to Lambda functions, Docker containers, Google Cloud functions,  Kubernetes, Heroku, etc.","feature_image":null,"meta_description":"Advancements in software architecture, serverless and beyond. Examples include equivalents to cloud functions, Docker containers, Kubernetes, Heroku, etc.","meta_title":"Software Architecture | Hackers and Slackers","visibility":"public"},{"name":"DevOps","slug":"devops","description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","feature_image":null,"meta_description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","meta_title":"DevOps: Networking And Server Configuration | Hackers and Slackers","visibility":"public"},{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},{"name":"#GraphQL Hype","slug":"graphql-hype","description":"Learn GraphQL syntax and see the reasons why the future of APIs is here to stay. We walk through everything from server/client setup to intricate tricks.","feature_image":"https://hackersandslackers.com/content/images/2019/03/graphqlseries.jpg","meta_description":"Learn GraphQL syntax and see the reasons why the future of APIs is here to stay. We walk through everything from server/client setup to intricate tricks.","meta_title":"GraphQL Hype","visibility":"internal"}],"plaintext":"The technology sector is reeling after an official statement was released by the\nUN's International Council of Coolness last week. The statement clearly states\nwhat status-quo developers have feared for months: if you haven't shifted from\nREST to GraphQL by now, you are officially recognized by the international\ncommunity to hold \"uncool\" status. A humanitarian crisis is already unfolding as\nrefugees of coolness are threatening to overtake borders, sparking fears of an\ninflux of Thinkpad Laptops, IntelliJ, and other Class A  uncool narcotics.\n\nHold up: is GraphQL That Dramatic of an Improvement over REST?\nIn all honesty, I've found that the only way to properly answer this question is\nto first utter \"kinda,\" then mull back and forth for a little while, and then\nfinishing with a weak statement like \"so pretty much, yeah.\"\n\nLet’s put it this way. When you’re first familiarizing yourself with a set of\ndata, what do you do? Do you read extensive documentation about the SQL table\nyou’re about to check out? Do you read the entire spec for your version\nPostgreSQL to see if it contains the functionality that might be missing for\nsome reason? I’m going to guess you do neither of these- chances are you just\nlook at the data. \n\nUsing any REST API is inherently a context-switch. No matter how many APIs\nyou’ve worked with in the past, you’ll never be able to know a new API’s\nendpoints, quirks, or the awful manner in which the creator has abandoned any\ndistinction between GET, POST, or PUT methods altogether. GraphQL is not\nnecessarily more technologically impressive than REST, but it does  provide us a\nsyntax and workflow comparable to working directly with databases with which\nwe're already familiar.\n\nRemember when us young guys justified replacing older devs when we came out of\nthe gate with NodeJS, arguing that context-switching changes everything? GraphQL\nis just that: a \"better\" technology with less mental context-switching, which\nconveniently serves a double-purpose for enterprises looking to fire anybody\nthey perceive to be dead weight over the age of 30. Good luck finding a better\nsynopsis than that.\n\nWhat’s this Prisma Nonsense? \nPrisma [https://www.prisma.io/]  is a free (FREE!) service that provides with\nthe tools to create an API client, as well as an Admin panel to manage it.\nWithout any prior knowledge of GraphQL needed, Prisma provides us with:\n\n * A CLI which’s stand up a web server which will serve as our API: either cloud\n   or self-hosted.\n * Automatic integration with your database of choice (including cloud DBs, such\n   as RDS).\n * A clever obfuscation of data models via a simple config file. No classes, no\n   code, no bullshit.\n * A \"playground\" interface which allows us to mess around in GraphQL syntax\n   against our models without breaking everything.\n * A web GUI which displays the relationships between all of these things and\n   their usage.\n\nIn short, Prisma does our jobs for us. Now that tasks associated with building\nAPIs, creating ORMs, and managing databases have all been trivialized, we can\nfinally cut some more of that dead weight we mentioned earlier- specifically\nBob, the asshole coming up on his 35th birthday sitting on his high-horse just\nbecause he has an obligation to feed 3 beautiful children. Sorry Bob, it just\nwasn't working out.\n\nPrisma does  provide the option to set up a test environment on their cloud, but\nlet's do something useful with our lives for once and build something\nproduction-ready. In this case, that means standing up a 5-dollar Digital Ocean\nDroplet.\n\nCreate a Prisma Account\nGet over to the sexually appealing Prisma Cloud landing page\n[https://www.prisma.io/cloud]  and make yourself an account. When prompted, make\nsure you select Deploy a new Prisma Service.\n\nExample services are for sissys.You should then be prompted with the following\nscreen. It will instruct you to install an NPM package, but there are a few\nthings we need to do first.\n\nWhen she says \"waiting for login,\" she means \"I'd wait a lifetime for you, my\nlove.\"Installing Prisma Dependencies on a Fresh VPS\nSSH into whichever VPS you've chosen. I'll be using a Ubuntu instance for this\ntutorial. If you happen to be using Ubuntu as well, feel free to copy + paste\nall the stuff I'm sure you've done a million times already. First, we need to\ninstall Node:\n\n$ apt update\n$ apt upgrade -y\n$ curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -\n$ sudo apt-get install -y nodejs\n$ sudo apt-get install gcc g++ make\n$ sudo npm install -g npm@latest\n\n\nBefore you do anything crazy like copy & paste those two lines from Prisma,\nyou're going to need to set up Docker a few steps later, so you might as well do\nthat now: \n\n1. Install Docker Dependencies\n$ sudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    gnupg-agent \\\n    software-properties-common\n\n\n2. Add Docker Key\n$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n$ sudo apt-key fingerprint 0EBFCD88\n\n\n3. Get Docker Repository\n$ sudo add-apt-repository \\\n   \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   $(lsb_release -cs) \\\n   stable\"\n\n\n4. Finally Install Docker\n$ sudo apt-get update\n$ sudo apt-get install docker-ce docker-ce-cli containerd.io\n\n\nGood job, you're doing great.\n\nInstall & Activate The Prisma CLI\nCool, now we can carry on with Prisma's demands. Install the Prisma CLI\nglobally, and then use said CLI to log in to Prisma.\n\n$ npm install -g prisma\n$ prisma login -k eyJhbGciGYU78tfuyLALALTHISKEYISFAKELOL69KFGs\n\n\nWait a couple of seconds after entering the login prompt, and you'll notice your\nbrowser window will have changed to indicate that you're now logged in. \n\nThe next step will create the local files which serve as the heart and soul of\nour API. Make sure you init Prisma  in whichever directory you like to keep\nthings in:\n\n$ cd /my/desired/directory/\n$ prisma init my-prisma\n\n\nInitiating the project will kickstart a quick and painless interrogation\nprocess. Keep in mind that it's recommended to use Prisma with a fresh database\ninstance; in my case, I spun up a cloud PostgreSQL instance.\n\n? Set up a new Prisma server or deploy to an existing server? Use existing database\n? What kind of database do you want to deploy to?:\n? Does your database contain existing data?:\n? Enter database host:\n? Enter database port:\n? Enter database user:\n? Enter database password: \n? Enter database name (the database includes the schema):\n? Use SSL?:\n\n\nCompleting this will result in the following structure:\n\nmy-prisma\n├── datamodel.prisma\n├── docker-compose.yml\n├── generated\n│   └── prisma-client\n│       ├── index.ts\n│       └── prisma-schema.ts\n└── prisma.yml\n\n\nWe're almost there cowboy and/or cowgirl. \n\nSet Phasers to \"Deploy\"\nPrisma is going to stand itself up on port 4466, which is closed by default on\nmost servers. Make sure you have this port open:\n\n$ ufw allow 4466\n\n\nFinally, we need to set a secret  in order to connect to Prisma cloud. Open the \ndocker-compose.yml  file and uncomment the managementApiSecret  line. Replace\nthe value with some sort of deep dark personal secret of yours.\n\n$ vim docker-compose.yml\n\n\nversion: '3'\nservices:\n  prisma:\n    image: prismagraphql/prisma:1.25\n    restart: always\n    ports:\n    - \"4466:4466\"\n    environment:\n      PRISMA_CONFIG: |\n        port: 4466\n        # uncomment the next line and provide the env var \n        managementApiSecret: my-secret\n        databases:\n          default:\n            connector: postgres\n            host: 123.45.678.90\n            database: databasename\n            user: username\n            password: password\n            rawAccess: true\n            port: '5432'\n            migrations: true\n\n\n\nFor some reason, Prisma does not automatically specify your SSL preferences in\ndocker-compose, even if you explicity answer \"yes\" to the SSL prompt. If your\ndatabase requires SSL, be sure to add ssl: true  to the end of your\ndocker-compose config. Otherwise, your deployment will fail.As per the comment\nin our yml  file, we need to export the secret we specify with \nmanagementApiSecret: my-secret  as an environment variable. Back in your Prisma\ndirectory, export your secret as such:\n\n$ export PRISMA_MANAGEMENT_API_SECRET=my-secret\n\n\nThis secret is used to generate a token to secure our endpoint. Skipping this\nstep would result in exposing your database to the world with full read/write\naccess to anybody.\n\nIt's Game Time\nIt's time to deploy, baby! Do it, push the button! DO IT NOW!\n\n$ docker-compose up -d\n$ prisma deploy\n\n\nDeploying for the first time does a few things. It'll stand up a 'playground'\ninterface on your local server (localhost:4466), as well as automatically get\nyou set up with Prisma Cloud, which is essentially an admin interface for your\ndeployment hosted on Prisma's site.\n\nCheck Out Your Workspace \nVisit [Your Server's IP]:4466 to see what you've done:\n\nA playground for children of all agesCheck it out! Along with documentation of\nthe generic data models Prisma shipped with, you can test queries or mutations\non the left side of the UI, and receive responses on the right. Sure beats\nPostman imho.\n\nDon't Look Down: You're in the Cloud\nYou can now add your server to Prisma Cloud to get the benefits of their admin\npanel. From here, you can modify information directly, review usage metrics, and\nmanage multiple instances:\n\nBreaking News: Prisma is Too Cool For School.Working With Prisma And GraphQL\nNow that we've spun up this shiny new toy, let's be sure we know how to drive\nit.\n\nOn your VPS, take a look at the datamodels.prisma  file:\n\n$ vim datamodels.prisma\n\n\nYou should see a data model called User (everybody has this model). To add or\nmodify data models, all we need to do is change the fields as we see fit, set\ntheir data type, and specify whether or not we'd like the field to be unique.\nBelow I've added a couple of new 'fields.'\n\ntype User {\n  id: ID! @unique\n  name: String!\n  email: String! @unique\n  gravatar: String!\n}\n\n\nDeploying Prisma again with these changes will modify our database's table\nstructure to match the new model:\n\n$ prisma deploy\n\n\nThere you have it: one more buzzword to put your resum\u001d\u001de. In fact, feel free to\ncompletely falsify the existence of a GraphQL certification and throw that on\nthere, too. If you're the kind of person who enjoys reading technical posts like\nthis in your free time, chances are you're already qualified for the job. Unless\nyou're Bob.","html":"<p>The technology sector is reeling after an official statement was released by the UN's International Council of Coolness last week. The statement clearly states what status-quo developers have feared for months: if you haven't shifted from REST to GraphQL by now, you are officially recognized by the international community to hold \"uncool\" status. A humanitarian crisis is already unfolding as refugees of coolness are threatening to overtake borders, sparking fears of an influx of Thinkpad Laptops, IntelliJ, and other <em>Class A</em> uncool narcotics.</p><h3 id=\"hold-up-is-graphql-that-dramatic-of-an-improvement-over-rest\">Hold up: is GraphQL That Dramatic of an Improvement over REST?</h3><p>In all honesty, I've found that the only way to properly answer this question is to first utter \"kinda,\" then mull back and forth for a little while, and then finishing with a weak statement like \"so pretty much, yeah.\"</p><p>Let’s put it this way. When you’re first familiarizing yourself with a set of data, what do you do? Do you read extensive documentation about the SQL table you’re about to check out? Do you read the entire spec for your version PostgreSQL to see if it contains the functionality that might be missing for some reason? I’m going to guess you do neither of these- chances are you <em>just look at the data. </em></p><p>Using any REST API is inherently a context-switch. No matter how many APIs you’ve worked with in the past, you’ll never be able to know a new API’s endpoints, quirks, or the awful manner in which the creator has abandoned any distinction between GET, POST, or PUT methods altogether. GraphQL is not necessarily more technologically impressive than REST, but it <em>does</em> provide us a syntax and workflow comparable to working directly with databases with which we're already familiar.</p><p>Remember when us young guys justified replacing older devs when we came out of the gate with NodeJS, arguing that context-switching <em>changes everything</em>? GraphQL is just that: a \"better\" technology with less mental context-switching, which conveniently serves a double-purpose for enterprises looking to fire anybody they perceive to be dead weight over the age of 30. Good luck finding a better synopsis than that.</p><h2 id=\"what-s-this-prisma-nonsense\">What’s this Prisma Nonsense? </h2><p><a href=\"https://www.prisma.io/\">Prisma</a> is a free (FREE!) service that provides with the tools to create an API client, as well as an Admin panel to manage it. Without any prior knowledge of GraphQL needed, Prisma provides us with:</p><ul><li>A CLI which’s stand up a web server which will serve as our API: either cloud or self-hosted.</li><li>Automatic integration with your database of choice (including cloud DBs, such as RDS).</li><li>A clever obfuscation of data models via a simple config file. No classes, no code, no bullshit.</li><li>A \"playground\" interface which allows us to mess around in GraphQL syntax against our models without breaking everything.</li><li>A web GUI which displays the relationships between all of these things and their usage.</li></ul><p>In short, Prisma does our jobs for us. Now that tasks associated with building APIs, creating ORMs, and managing databases have all been trivialized, we can finally cut some more of that dead weight we mentioned earlier- specifically Bob, the asshole coming up on his 35th birthday sitting on his high-horse just because he has an obligation to feed 3 beautiful children. Sorry Bob, it just wasn't working out.</p><p>Prisma <em>does</em> provide the option to set up a test environment on their cloud, but let's do something useful with our lives for once and build something production-ready. In this case, that means standing up a 5-dollar Digital Ocean Droplet.</p><h3 id=\"create-a-prisma-account\">Create a Prisma Account</h3><p>Get over to the sexually appealing <a href=\"https://www.prisma.io/cloud\">Prisma Cloud landing page</a> and make yourself an account. When prompted, make sure you select <strong>Deploy a new Prisma Service</strong>.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/prisma-step1.png\" class=\"kg-image\"><figcaption>Example services are for sissys.</figcaption></figure><!--kg-card-end: image--><p>You should then be prompted with the following screen. It will instruct you to install an NPM package, but there are a few things we need to do first.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/prisma-step2.png\" class=\"kg-image\"><figcaption>When she says \"waiting for login,\" she means \"I'd wait a lifetime for you, my love.\"</figcaption></figure><!--kg-card-end: image--><h2 id=\"installing-prisma-dependencies-on-a-fresh-vps\">Installing Prisma Dependencies on a Fresh VPS</h2><p>SSH into whichever VPS you've chosen. I'll be using a Ubuntu instance for this tutorial. If you happen to be using Ubuntu as well, feel free to copy + paste all the stuff I'm sure you've done a million times already. First, we need to install Node:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">$ apt update\n$ apt upgrade -y\n$ curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -\n$ sudo apt-get install -y nodejs\n$ sudo apt-get install gcc g++ make\n$ sudo npm install -g npm@latest\n</code></pre>\n<!--kg-card-end: markdown--><p>Before you do anything crazy like copy &amp; paste those two lines from Prisma, you're going to need to set up Docker a few steps later, so you might as well do that now: </p><h3 id=\"1-install-docker-dependencies\">1. Install Docker Dependencies</h3><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">$ sudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    gnupg-agent \\\n    software-properties-common\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"2-add-docker-key\">2. Add Docker Key</h3><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n$ sudo apt-key fingerprint 0EBFCD88\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"3-get-docker-repository\">3. Get Docker Repository</h3><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">$ sudo add-apt-repository \\\n   &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   $(lsb_release -cs) \\\n   stable&quot;\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"4-finally-install-docker\">4. Finally Install Docker</h3><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ sudo apt-get update\n$ sudo apt-get install docker-ce docker-ce-cli containerd.io\n</code></pre>\n<!--kg-card-end: markdown--><p>Good job, you're doing great.</p><h2 id=\"install-activate-the-prisma-cli\">Install &amp; Activate The Prisma CLI</h2><p>Cool, now we can carry on with Prisma's demands. Install the Prisma CLI globally, and then use said CLI to log in to Prisma.  </p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ npm install -g prisma\n$ prisma login -k eyJhbGciGYU78tfuyLALALTHISKEYISFAKELOL69KFGs\n</code></pre>\n<!--kg-card-end: markdown--><p>Wait a couple of seconds after entering the login prompt, and you'll notice your browser window will have changed to indicate that you're now logged in. </p><p>The next step will create the local files which serve as the heart and soul of our API. Make sure you init <code>Prisma</code> in whichever directory you like to keep things in:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">$ cd /my/desired/directory/\n$ prisma init my-prisma\n</code></pre>\n<!--kg-card-end: markdown--><p>Initiating the project will kickstart a quick and painless interrogation process. Keep in mind that it's recommended to use Prisma with a fresh database instance; in my case, I spun up a cloud PostgreSQL instance.</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">? Set up a new Prisma server or deploy to an existing server? Use existing database\n? What kind of database do you want to deploy to?:\n? Does your database contain existing data?:\n? Enter database host:\n? Enter database port:\n? Enter database user:\n? Enter database password: \n? Enter database name (the database includes the schema):\n? Use SSL?:\n</code></pre>\n<!--kg-card-end: markdown--><p>Completing this will result in the following structure:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">my-prisma\n├── datamodel.prisma\n├── docker-compose.yml\n├── generated\n│   └── prisma-client\n│       ├── index.ts\n│       └── prisma-schema.ts\n└── prisma.yml\n</code></pre>\n<!--kg-card-end: markdown--><p>We're almost there cowboy and/or cowgirl. </p><h2 id=\"set-phasers-to-deploy\">Set Phasers to \"Deploy\"</h2><p>Prisma is going to stand itself up on port <strong>4466</strong>, which is closed by default on most servers. Make sure you have this port open:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ ufw allow 4466\n</code></pre>\n<!--kg-card-end: markdown--><p>Finally, we need to set a <em>secret</em> in order to connect to Prisma cloud. Open the <code>docker-compose.yml</code> file and uncomment the <code>managementApiSecret</code> line. Replace the value with some sort of deep dark personal secret of yours.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ vim docker-compose.yml\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code class=\"language-yaml\">version: '3'\nservices:\n  prisma:\n    image: prismagraphql/prisma:1.25\n    restart: always\n    ports:\n    - &quot;4466:4466&quot;\n    environment:\n      PRISMA_CONFIG: |\n        port: 4466\n        # uncomment the next line and provide the env var \n        managementApiSecret: my-secret\n        databases:\n          default:\n            connector: postgres\n            host: 123.45.678.90\n            database: databasename\n            user: username\n            password: password\n            rawAccess: true\n            port: '5432'\n            migrations: true\n\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: html--><div class=\"proptip\">\nFor some reason, Prisma does not automatically specify your SSL preferences in docker-compose, even if you explicity answer \"yes\" to the SSL prompt. If your database requires SSL, be sure to add <code>ssl: true</code> to the end of your docker-compose config. Otherwise, your deployment will fail. \n</div><!--kg-card-end: html--><p>As per the comment in our <code>yml</code> file, we need to export the secret we specify with <code>managementApiSecret: my-secret</code> as an environment variable. Back in your Prisma directory, export your secret as such:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ export PRISMA_MANAGEMENT_API_SECRET=my-secret\n</code></pre>\n<!--kg-card-end: markdown--><p>This secret is used to generate a token to secure our endpoint. Skipping this step would result in exposing your database to the world with full read/write access to anybody.</p><h2 id=\"it-s-game-time\">It's Game Time</h2><p>It's time to deploy, baby! Do it, push the button! DO IT NOW!</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ docker-compose up -d\n$ prisma deploy\n</code></pre>\n<!--kg-card-end: markdown--><p>Deploying for the first time does a few things. It'll stand up a 'playground' interface on your local server (localhost:4466), as well as automatically get you set up with Prisma Cloud, which is essentially an admin interface for your deployment hosted on Prisma's site.</p><h3 id=\"check-out-your-workspace\">Check Out Your Workspace </h3><p>Visit [Your Server's IP]:4466 to see what you've done:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/playground.png\" class=\"kg-image\"><figcaption>A playground for children of all ages</figcaption></figure><!--kg-card-end: image--><p>Check it out! Along with documentation of the generic data models Prisma shipped with, you can test queries or mutations on the left side of the UI, and receive responses on the right. Sure beats Postman imho.</p><h3 id=\"don-t-look-down-you-re-in-the-cloud\">Don't Look Down: You're in the Cloud</h3><p>You can now add your server to Prisma Cloud to get the benefits of their admin panel. From here, you can modify information directly, review usage metrics, and manage multiple instances:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://res-5.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/prismacloud.gif\" class=\"kg-image\"><figcaption>Breaking News: Prisma is Too Cool For School.</figcaption></figure><!--kg-card-end: image--><h2 id=\"working-with-prisma-and-graphql\">Working With Prisma And GraphQL</h2><p>Now that we've spun up this shiny new toy, let's be sure we know how to drive it.</p><p>On your VPS, take a look at the <code>datamodels.prisma</code> file:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ vim datamodels.prisma\n</code></pre>\n<!--kg-card-end: markdown--><p>You should see a data model called User (everybody has this model). To add or modify data models, all we need to do is change the fields as we see fit, set their data type, and specify whether or not we'd like the field to be unique. Below I've added a couple of new 'fields.'</p><!--kg-card-begin: markdown--><pre><code class=\"language-yaml\">type User {\n  id: ID! @unique\n  name: String!\n  email: String! @unique\n  gravatar: String!\n}\n</code></pre>\n<!--kg-card-end: markdown--><p>Deploying Prisma again with these changes will modify our database's table structure to match the new model:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ prisma deploy\n</code></pre>\n<!--kg-card-end: markdown--><p>There you have it: one more buzzword to put your resum\u001d\u001de. In fact, feel free to completely falsify the existence of a GraphQL certification and throw that on there, too. If you're the kind of person who enjoys reading technical posts like this in your free time, chances are you're already qualified for the job. Unless you're Bob.</p>","url":"https://hackersandslackers.com/easily-build-graphql-apis-with-prisma/","uuid":"86286c72-478c-4108-8bef-89ca01caf043","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c570ae30b20340296f57709"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673743","title":"Geographic Data Visualization with Mapbox","slug":"map-data-visualization-with-mapbox","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/12/mapbox@2x.jpg","excerpt":"Visualizing Geodata with Mapbox's API and Tools.","custom_excerpt":"Visualizing Geodata with Mapbox's API and Tools.","created_at_pretty":"07 December, 2018","published_at_pretty":"11 December, 2018","updated_at_pretty":"31 January, 2019","created_at":"2018-12-07T12:36:58.000-05:00","published_at":"2018-12-11T08:00:00.000-05:00","updated_at":"2019-01-31T17:52:32.000-05:00","meta_title":"Geographical Data Visualization with Mapbox | Hackers and Slackers","meta_description":"A collection of Map APIs that rivals Google Maps, plus Beautiful GeoData Visualization.","og_description":"A collection of Map APIs that rivals Google Maps, plus Beautiful GeoData Visualization.","og_image":"https://hackersandslackers.com/content/images/2018/12/mapbox@2x.jpg","og_title":"Geographic Data Visualization with Mapbox","twitter_description":"A collection of Map APIs that rivals Google Maps, plus Beautiful GeoData Visualization.","twitter_image":"https://hackersandslackers.com/content/images/2018/12/mapbox@2x.jpg","twitter_title":"Geographic Data Visualization with Mapbox","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Data Vis","slug":"datavis","description":"Visualize your data with charting tools like Matplotlib, Plotly, D3, Chart.js, Muze, Seaborn, and countless others. Primarily focused on programmatic visualization as opposed to Business Intelligence software.","feature_image":null,"meta_description":"Visualize your data with charting tools like Matplotlib, Plotly, D3, Chart.js, Muze, Seaborn, and countless others. Focused on programmatic visualization.","meta_title":"Data Visualization | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Data Vis","slug":"datavis","description":"Visualize your data with charting tools like Matplotlib, Plotly, D3, Chart.js, Muze, Seaborn, and countless others. Primarily focused on programmatic visualization as opposed to Business Intelligence software.","feature_image":null,"meta_description":"Visualize your data with charting tools like Matplotlib, Plotly, D3, Chart.js, Muze, Seaborn, and countless others. Focused on programmatic visualization.","meta_title":"Data Visualization | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"SaaS Products","slug":"saas","description":"Third-party products and services we’ve discovered to be diamonds in the rough. These are products we’ve included in our stack based on price and value add.","feature_image":null,"meta_description":"Third-party products and services we’ve discovered to be diamonds in the rough. These are products we’ve included in our stack based on price and value add.","meta_title":"Our Picks: SaaS Products | Hackers and Slackers","visibility":"public"},{"name":"#Mapping Data with Mapbox","slug":"mapping-data-with-mapbox","description":"A full exploration into Mapbox: the sweetheart of geovisualization amongst data scientists. Learn the core product or see why the API rivals Google Maps.","feature_image":"https://hackersandslackers.com/content/images/2019/03/mapbox.jpg","meta_description":"A full exploration into Mapbox: the sweetheart of geovisualization amongst data scientists. Learn the core product or see why the API rivals Google Maps.","meta_title":"Mapping Data with Mapbox","visibility":"internal"}],"plaintext":"There's a trend among those using Jupyter Notebooks (or equivalent) which leads\nme to believe humanity is coming to an important realization: Google Maps,  as\nan API is expensive.\n\nRegardless if Google maps is embedded as a consumer-facing widget, or part of a\nroutine data-pipeline, a single surge of high-traffic can leave enterprises with\nprice tags in the hundreds of thousands of dollars. In fact, I can hardly\nremember a product where this hadn't  become the case. One can hardly blame the\nsearch engine; after all, our tendency to ignore the Terms and Service\nagreements (as well as payment policies) has always been core to the Google\nbusiness model.  Even then, there are enough enterprises to go around to turn a\nblind eye and actually pay such a bill willingly without exploring alternatives.\n\nData Scientists in particular have no excuse for inaction when it comes to\nseeking a better alternative. As it turns out, there is  one, and it is Cheaper,\n Easier, and perhaps more Fully Featured  than its Google Maps counterpart. That\nproduct is Mapbox. \n\nMapbox  is much more than a Google API clone. The web product offers a plethora\nof UI-driven features that we can use to customize maps as well as save or\neffortlessly transform raw data into workable GeoJSON data without even touching\nan API (which, mind you, there is.... with SDKs in every conceivable language).\nWe're going to create a quick map visualization incorporating some real data to\nget introduced to Mapbox's functionality, but this is only the beginning.\nDownload the line we'll see just how easy it is to incorporate Mapbox in\nproducts like Plot.ly Dash  or even Jupyter Notebooks.\n\nX Marks the Spot\nBefore straying from reigning champion Google Maps, it's worth exploring the\nsignificance of the metric that brought us here first: price.\n\nMurphy's law clearly states \"Cash Rules Everything Around Me, C.R.E.A.M; get the\nmoney, Dolla dolla bill y'all.\"  Given this reality, a minimum requirement for\nMapbox should be it's pricing model when compared to Google's.\n\nMapbox Pricing Tiers\nPrice\n Web apps\n Mobile SDKs\n Free to Start\n\n$0\n\n50,000  map views /mo\n\n50,000  Geocoding requests /mo\n\n50,000  Directions requests /mo\n\n50,000  Matrix elements /mo\n\n50,000  Tilequery requests /mo\n\n50,000  map views /mo\n\n50,000  Geocoding requests /mo\n\n50,000  Directions requests /mo\n\n50,000  Matrix elements /mo\n\n50,000  Tilequery requests /mo\n\nAdditional Usage\n\n$0.50\n\n50,000  map views /mo\n\n50,000  Geocoding requests /mo\n\n50,000  Directions requests /mo\n\n50,000  Matrix elements /mo\n\n50,000  Tilequery requests /mo\n\n50,000  map views /mo\n\n50,000  Geocoding requests /mo\n\n50,000  Directions requests /mo\n\n50,000  Matrix elements /mo\n\n50,000  Tilequery requests /mo\n\nCompare this to Google's transparent pricing structure:\n\nGoogle API Pricing Tiers\nPrice\n Web apps\n Mobile SDKs\n Starter Pack\n\nBrown Paper Bag full of $20s\n\n5  and a half map views /mo\n\n11  times thinking about the API /mo\n\n6  verbal mentions of \"Google\" /mo\n\n2  directions to shitty parties /mo\n\n8  visits to anywhere /mo\n\n9  Android unlocks /mo\n\n12  Google queries for restaurants /mo\n\n3  \"OK Google\" queries /mo\n\n7  Accidental app opens /mo\n\n1  Creating the next \"Uber for X\" /mo\n\nAdditional Usage\n\nEleventy Billion Dollars\n\nUnlimited Requests!* \n\n*See Pricing \n\nUnlimited Requests!*\n\n*See Pricing\n\nSeems like a convincing point in the win column for Mapbox. If we stay within\nreason, Mapbox can essentially serve us as an entirely free service.\n\nSurely we must be missing something  since we're opting for free services\nthough, right? How do Mapbox visualizations stack up against Google Maps?\n\n\n[https://codepen.io/ro-ka/pen/ENoOjz/]  [https://codepen.io/ro-ka] \n[https://codepen.io]\n\nPardon my French here, but hot damn that map is dope.  There are plenty more\nexamples where that came from, but it's clear that Mapbox has lowkey stolen the\nhearts of the scientific analysis  market, while Google  concerns itself on the \nconsumer  and business  markets.\n\nTonight's Itinerary: Creating Dope Maps\nTo make some data art, we have a few items on our checklist:\n\n * Obtain a dataset with location-based data: In our case of routing, we need a\n   dataset with a set origin and destination per row.\n * Create direction object routes by running our dataset through the Mapbox API.\n    \n * Create a styled map for our presentation by using Mapbox's style editor.\n * Overlay our route data on our beautiful map.\n\nStep 1: Get Some Free Data\nNow that we've properly shit-talked Google, let's use Google. We're going to\nneed to get some good data, and BigQuery  has some awesome free datasets that we\ncan run wild with. I'll be opting for NYC's dataset on Citibike trips, as it\nprovides a clean set of data where starting and ending coordinates are always\npresent.\n\nGoogle Cloud's Free Dataset of Citibike TripsAs a side note, BigQuery is great.\nEven if you're only somewhat versed in SQL, BigQuery's syntax is essentially\nwhatever your first guess would be.\n\nGranted we only need the start and end locations to make our map, but i decided\nto take a bit extra for curiosity's sake:\n\nstart_namestart_latitudestart_longitudeend_nameend_latitudeend_longitude1 Ave &\nE 15 St40.732218530-73.9816555701 Ave & E 18 St40.733812192-73.9805442091 Ave &\nE 30 St40.741443870-73.975360820E 39 St & 2 Ave40.747803730-73.9734419001 Ave &\nE 62 St40.761227400-73.960940220E 75 St & 3 Ave40.771129270-73.9577229702 Ave &\nE 99 St40.786258600-73.9455257903 Ave & E 112 St40.795508000-73.9416060003 St &\n3 Ave40.675070500-73.98775226010 St & 7 Ave40.666207800-73.9819988603 St &\nProspect Park West40.668132000-73.9736383103 St & Prospect Park West40.668132000\n-73.9736383106 Ave & W 33 St40.749012710-73.988483950W 37 St & 5 Ave40.750380090\n-73.9833898808 Ave & W 52 St40.763707390-73.985161500Central Park S & 6 Ave\n40.765909360-73.97634151011 Ave & W 41 St40.760300960-73.998842220W 34 St & 11\nAve40.755941590-74.00211630012 Ave & W 40 St40.760875020-74.002776680W 42 St & 8\nAve40.757569900-73.990985070Allen St & E Houston St40.722055000-73.989111000Mott\nSt & Prince St40.723179580-73.994800120Allen St & Hester St40.716058660\n-73.991907590Greenwich St & N Moore St40.720434110-74.010206090Amsterdam Ave & W\n73 St40.779668090-73.980930448E 85 St & 3 Ave40.778012030-73.954071490Bank St &\nHudson St40.736528890-74.006180260MacDougal St & Prince St40.727102580\n-74.002970880Bank St & Washington St40.736196700-74.008592070W 4 St & 7 Ave S\n40.734011430-74.002938770Barclay St & Church St40.712912240-74.010202340Clinton\nSt & Tillary St40.696192000-73.991218000Berkeley Pl & 7 Ave40.675146839\n-73.975232095West Drive & Prospect Park West40.661063372-73.979452550Bialystoker\nPl & Delancey St40.716226440-73.982612060Reade St & Broadway40.714504510\n-74.005627890Broadway & W 24 St40.742354300-73.989150760South End Ave & Liberty\nSt40.711512000-74.015756000Broadway & W 29 St40.746200900-73.988557230Stanton St\n& Chrystie St40.722293460-73.991475350Broadway & W 56 St40.765265400\n-73.981923380Broadway & W 49 St40.760683271-73.984527290Broadway & W 58 St\n40.766953170-73.9816933305 Ave & E 78 St40.776321422-73.964273930Cadman Plaza E\n& Red Cross Pl40.699917550-73.989717730Leonard St & Church St40.717571000\n-74.005549000Cadman Plaza E & Tillary St40.695976830-73.990148920Lawrence St &\nWilloughby St40.692361780-73.986317460Carmine St & 6 Ave40.730385990\n-74.002149880W 27 St & 7 Ave40.746647000-73.993915000Central Park W & W 96 St\n40.791270000-73.964839000W 52 St & 6 Ave40.761329831-73.979820013Central Park\nWest & W 76 St40.778967840-73.973747370Central Park S & 6 Ave40.765909360\n-73.976341510Step 2: Style a Sexy Map in Mapbox Studio\nMapbox provides a superb web UI labeled “studio” interface to help us get\nstarted. The “studio” web UI is separated into three parts: custom map styles, \ntilesets, and datasets.\n\nAll of these can we saved for later use.These three sections can be summarized\nas:\n\n * Styles: Custom map styles editable via a GUI, which produce a stylesheet for\n   convenience \n * Tilesets: Map overlays we can apply from our own data or otherwise to segment\n   geographical areas\n * Datasets:  Data containing anything from points on a map to complex direction\n   routes we can overlay atop our map.\n\nHere's a quick look at the Map style editor:\n\nI want to wake up, in a city that doesn't sleep.Save your styled map once you\nfind it to be adequately attractive. We'll need it for later.\n\nStep 4: Start a Flask App\nOf course we're making a Flask app; is there even any other kind? We'll be using\nthe Flask Application Factory setup as we usually do, so we should end up with a\nfile structure as below. If you feel like you're getting ahead of ourself,\ncheckout our post on structuring Flask applications\n[https://hackersandslackers.com/structuring-your-flask-app/].\n\nmapbox-app\n├── /application\n│   └── __init__.py\n├── /datasets\n│   ├── data.json\n│   └── output.csv   \n├── /maps\n│   ├── __init__.py\n│   ├── /templates\n│   │    └── index.html\n│   ├── views.py\n│   └── plots.py\n├── start.sh\n├── settings.py\n├── wsgi.py\n├── Pipfile\n├── README.md\n└── requirements.txt\n\n\nTo mix things up a bit we'll use a shell script this time to handle envars and\nrunning our script. Start by creating start.sh:\n\n# start.sh\n\nexport FLASK_APP=wsgi.py\nexport FLASK_DEBUG=1\nexport APP_CONFIG_FILE=settings.py\nflask run\n\n\nYes, we'll be using settings.py  as our config file for a change. Ahhh, just\nlike the Django days. This file should contain a Mapbox access token. Mapbox\nprovides you with a public token by default in many of its tutorials (noted by\nthe pk  prefix for 'public key' - contrast this with sk  for 'secret key'). If\nyou'd like to do anything meaningful with Mapbox, you'll have to retrieve a\nsecret key via the UI. Then we can add this token to settings.py  as such:\n\nMAPBOX_ACCESS_TOKEN=\"sk.eyJ1IB&F^&f^R&DFRUYFTRUctyrcTYRUFrtCFTYDYTuEg\"\n\n\nFinally, here's a look at application/__init__.py  just to make sure we're on\nthe same page:\n\n# application/__init__.py\n\nimport os\nfrom flask import Flask, g\n\ndef create_app():\n    \"\"\"Construct the core application.\"\"\"\n    app = Flask(__name__)\n    app.config.from_envvar('APP_CONFIG_FILE', silent=True)\n\n    with app.app_context():\n        # Construct map blueprint\n        from maps import mapviews\n        app.register_blueprint(mapviews.map_blueprint)\n\n        return app\n\n\nStep 5: Create a Blueprint for Your Map\nYou may have noticed we registered this Blueprint in the previous step. Create a\n /maps  directory which we'll set as a module; we'll need this to handle the \nview, model (or just data),  and controller (routes.py as seen below).\n\nroutes.py\nimport os\nfrom flask import Blueprint, render_template, request\nfrom flask import current_app as app\nfrom . import locations\n\nmap_blueprint = Blueprint('map', __name__, template_folder='templates', static_folder='static')\nplot_locations = locations.LocationData()\n\n\n# Landing Page\n@map_blueprint.route('/', methods=['GET'])\ndef map():\n    return render_template('index.html', ACCESS_KEY=app.MAPBOX_ACCESS_KEY,  locations=plot_locations.get_plots, title=\"CitiBike Mapbox App.\")\n\n\n\ntemplates/index.html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset='utf-8' />\n  <title>{{title}}</title>\n  <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />\n  <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.49.0/mapbox-gl.js'></script>\n  <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.49.0/mapbox-gl.css' rel='stylesheet' />\n  <style>\n    body { margin:0; padding:0; }\n    #map { position:absolute; top:0; bottom:0; width:100%; }\n  </style>\n</head>\n<body>\n\n<div id='map'></div>\n<script>\nmapboxgl.accessToken = {{MAPBOX_ACCESS_TOKEN}};\nconst map = new mapboxgl.Map({\n  container: 'map',\n  style: 'mapbox://styles/toddbirchard/cjpij1gfhghiy2spetf5w998w',\n  center: [-73.981856, 40.703820],\n  zoom: 11.1,\n\n});\n\nmap.on('load', function(e) {\n  // Add the data to your map as a layer\n  map.addLayer({\n    id: 'locations',\n    type: 'symbol',\n    // Add a GeoJSON source containing place coordinates and information.\n    source: {\n      type: 'geojson',\n      data: {{locations}}\n    },\n    layout: {\n      'icon-image': 'restaurant-15',\n      'icon-allow-overlap': true,\n    }\n  });\n});\n</script>\n\n</body>\n</html>\n\n\ndata.py\nNormally this is where we'd use the magic of the Mapbox API to get coordinates,\nroute objects, or whatever it is your heart hopes to plot. This is intended to\nbe intro post, so let's break that logic out for another time and use a dataset\nMapbox would be happy to receive for the sake of results.\n\nStep 6: Uploading our Dataset via Mapbox Studio\nMapbox graciously lets us upload our data via their Studio UI, which does the\nunthinkable; immediately upon upload, Mapbox will take the data we give it\n(whether it be CSV, GeoJSON, etc) and immediately parse it in a way that makes\nsense. Upload your dataset at https://www.mapbox.com/studio/datasets/:\n\nUploading the raw data of our Citibike CSV.Next, Mapbox shows us a preview of\nour data before we even know what happened:\n\nIt's like they don't even want us to do work.Step 7: Do It in Flask\nAfter uploading your dataset via mapbox studio, you can actually redownload  the\ndata with a subtle twist: your data will be automatically formatted as GeoJSON:\nthe format of JSON objects Mapbox uses to plot points, draw routes, etc.\n\nSince we've had a long day, I'll allow you to download this pre-formatted data\nand hardcore the values in to your Map view. You're getting off easy for now,\nbut next time we're doing this programmatically ;).\n\n<!DOCTYPE html>\n<html>\n\n<head>\n  <meta charset='utf-8' />\n  <title>{{title}}</title>\n  <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />\n  <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.49.0/mapbox-gl.js'></script>\n  <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.49.0/mapbox-gl.css' rel='stylesheet' />\n  <style>\n    body {\n      margin: 0;\n      padding: 0;\n    }\n\n    #map {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      width: 100%;\n    }\n  </style>\n</head>\n\n<body>\n\n  <div id='map'></div>\n  <script>\n    mapboxgl.accessToken = '{{ACCESS_KEY}}';\n    const map = new mapboxgl.Map({\n      container: 'map',\n      style: 'mapbox://styles/toddbirchard/cjpij1oxl3hiy2spetf5w998w',\n      center: [-73.981856, 40.703820],\n      zoom: 11.1,\n\n    });\n\n\n    map.addLayer({\n      \"id\": \"points\",\n      \"type\": \"symbol\",\n      \"source\": {\n        \"features\": [{\n            \"type\": \"Feature\",\n            \"properties\": {\n              \"start_station_name\": \"Central Park West & W 76 St\",\n              \"end_station_name\": \"Central Park S & 6 Ave\",\n              \"end_station_latitude\": \"40.76590936\",\n              \"end_station_longitude\": \"-73.97634151\"\n            },\n            \"geometry\": {\n              \"coordinates\": [\n                -73.973747,\n                40.778967\n              ],\n              \"type\": \"Point\"\n            },\n            \"id\": \"000a1f944d4dd786d9e7ed04620af02b\"\n          },\n          {\n            \"type\": \"Feature\",\n            \"properties\": {\n              \"start_station_name\": \"W 64 St & West End Ave\",\n              \"end_station_name\": \"W 70 St & Amsterdam Ave\",\n              \"end_station_latitude\": \"40.77748046\",\n              \"end_station_longitude\": \"-73.98288594\"\n            },\n            \"geometry\": {\n              \"coordinates\": [\n                -73.987537,\n                40.774528\n              ],\n              \"type\": \"Point\"\n            },\n            \"id\": \"01d8c19524f067a3f4712653265e0a49\"\n          },\n          {\n            \"type\": \"Feature\",\n            \"properties\": {\n              \"start_station_name\": \"E 20 St & FDR Drive\",\n              \"end_station_name\": \"W 13 St & 7 Ave\",\n              \"end_station_latitude\": \"40.73781509\",\n              \"end_station_longitude\": \"-73.99994661\"\n            },\n            \"geometry\": {\n              \"coordinates\": [\n                -73.975738,\n                40.733142\n              ],\n              \"type\": \"Point\"\n            },\n            \"id\": \"038ac5403b136e34874a7278f64d4e95\"\n          },\n          {\n              \\\\ --------------------------------------\n              (etc etc....)\n               \\\\ --------------------------------------\n          },\n          {\n            \"type\": \"Feature\",\n            \"properties\": {\n              \"start_station_name\": \"Mercer St & Bleecker St\",\n              \"end_station_name\": \"1 Ave & E 30 St\",\n              \"end_station_latitude\": \"40.74144387\",\n              \"end_station_longitude\": \"-73.97536082\"\n            },\n            \"geometry\": {\n              \"coordinates\": [\n                -73.996621,\n                40.727063\n              ],\n              \"type\": \"Point\"\n            },\n            \"id\": \"ff1daf9aadbf0cd6b788bd76f0a3f333\"\n          }\n        ],\n        \"type\": \"FeatureCollection\"\n      },\n      \"layout\": {\n        \"icon-image\": \"{icon}-15\",\n        \"text-field\": \"{title}\",\n        \"text-font\": [\"Open Sans Semibold\", \"Arial Unicode MS Bold\"],\n        \"text-offset\": [0, 0.6],\n        \"text-anchor\": \"top\"\n      }\n    });\n  </script>\n\n</body>\n\n</html>\n\n\nUncharted Territory\nThere's way more for us to explore in Mapbox. Stay tuned for the rest of this\nseries as we explore generating GeoData programmatically, and build interactive\napplications to really get users involved in map data by letting them control\nconstraints such as time, etc.","html":"<p>There's a trend among those using Jupyter Notebooks (or equivalent) which leads me to believe humanity is coming to an important realization: <strong>Google Maps,</strong> as an API is <em>expensive.</em></p><p>Regardless if Google maps is embedded as a consumer-facing widget, or part of a routine data-pipeline, a single surge of high-traffic can leave enterprises with price tags in the hundreds of thousands of dollars. In fact, I can hardly remember a product where this <em>hadn't</em> become the case. One can hardly blame the search engine; after all, our tendency to ignore the Terms and Service agreements (as well as payment policies) has always been core to the Google business model.  Even then, there are enough enterprises to go around to turn a blind eye and actually pay such a bill willingly without exploring alternatives.</p><p>Data Scientists in particular have no excuse for inaction when it comes to seeking a better alternative. As it turns out, there <em>is</em> one, and it is <strong>Cheaper</strong>, <strong>Easier, </strong>and perhaps more <strong>Fully Featured</strong> than its Google Maps counterpart. That product is <strong>Mapbox</strong>. </p><p><strong>Mapbox</strong> is much more than a Google API clone. The web product offers a plethora of UI-driven features that we can use to customize maps as well as save or effortlessly transform raw data into workable GeoJSON data without even touching an API (which, mind you, there is.... with SDKs in every conceivable language). We're going to create a quick map visualization incorporating some real data to get introduced to Mapbox's functionality, but this is only the beginning. Download the line we'll see just how easy it is to incorporate Mapbox in products like <strong>Plot.ly Dash</strong> or even <strong>Jupyter Notebooks</strong>.</p><h2 id=\"x-marks-the-spot\">X Marks the Spot</h2><p>Before straying from reigning champion Google Maps, it's worth exploring the significance of the metric that brought us here first: price.</p><p>Murphy's law clearly states <strong>\"Cash Rules Everything Around Me, C.R.E.A.M; get the money, Dolla dolla bill y'all.\"</strong> Given this reality, a minimum requirement for Mapbox should be it's pricing model when compared to Google's.</p><h3 id=\"mapbox-pricing-tiers\">Mapbox Pricing Tiers</h3><style>\n  p {\n    line-height: 1.2;\n    color: #444350;\n    margin: 0 0 0 0 !important;\n  }\n   \n  td > p {\n      margin: 0 0 5px 0 !important;\n    }\n    \n  .introbox {\n    text-align: left;\n    vertical-align: top;\n    padding: 3%;\n    max-width: 200px;\n   }\n\n  .tier {\n    font-weight: 900 !important;\n    font-size: 16px !important;\n    display: block;\n    line-height: 1 !important;\n    margin: 0 0 10px !important;\n  }\n\n  .price {\n    font-weight: 500 !important;\n\tfont-size: 18px !important;\n    display: block;\n    color: #60afe6 !important;\n    line-height: 1.3 !important;\n  }\n    \n    thead th {\n        text-align: left !important;\n    }\n    \n    th strong {\n      font-size: 18px;\n      text-align: left;\n    }\n    \n</style>\n\n<div class=\"tableContainer\">\n  <table class=\"table left\">\n    <thead>\n      <tr>\n        <th>\n          <strong>Price</strong>\n        </th>\n        <th>\n          <strong>Web apps</strong>\n        </th>\n        <th>\n          <strong>Mobile SDKs</strong>\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td class=\"introbox\">\n          <p class=\"tier\">Free to Start</p>\n          <p class=\"price\">$0</p>\n        </td>\n        <td style=\"padding: 20px 15px;\">\n          <p><strong>50,000</strong> map views <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Geocoding requests <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Directions requests <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Matrix elements <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Tilequery requests <strong>/mo</strong></p>\n        </td>\n        <td style=\"padding: 20px 15px;\">\n          <p><strong>50,000</strong> map views <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Geocoding requests <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Directions requests <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Matrix elements <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Tilequery requests <strong>/mo</strong></p>\n        </td>\n      </tr>\n      <tr>\n        <td class=\"introbox\">\n          <p class=\"tier\">Additional Usage</p>\n          <p class=\"price\">$0.50</p>\n        </td>\n        <td style=\"padding: 20px 15px;\">\n          <p><strong>50,000</strong> map views <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Geocoding requests <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Directions requests <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Matrix elements <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Tilequery requests <strong>/mo</strong></p>\n        </td>\n        <td style=\"padding: 20px 15px;\">\n          <p><strong>50,000</strong> map views <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Geocoding requests <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Directions requests <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Matrix elements <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Tilequery requests <strong>/mo</strong></p>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n<p>Compare this to Google's transparent pricing structure:</p><h3 id=\"google-api-pricing-tiers\">Google API Pricing Tiers</h3><style>\n  p {\n    line-height: 1.2;\n    color: #444350;\n    margin: 0 0 0 0 !important;\n  }\n    \n  .introbox {\n      text-align: left;\n      vertical-align: top;\n      padding: 3%;\n      max-width: 200px;\n    }\n\n  .tier {\n    font-weight: 900 !important;\n    font-size: 16px !important;\n    display: block;\n    line-height: 1 !important;\n    margin: 0 0 10px !important;\n  }\n\n  .price {\n    font-weight: 500 !important;\n\tfont-size: 18px !important;\n    display: block;\n    color: #60afe6 !important;\n    line-height: 1.3 !important;\n  }\n    \n    thead th {\n        text-align: left !important;\n    }\n    \n    th strong {\n      font-size: 18px;\n      text-align: left;\n    }\n\n</style>\n\n<div class=\"tableContainer\">\n  <table class=\"table left\">\n    <thead>\n      <tr>\n        <th>\n          <strong>Price</strong>\n        </th>\n        <th>\n          <strong>Web apps</strong>\n        </th>\n        <th>\n          <strong>Mobile SDKs</strong>\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td class=\"introbox\">\n          <p class=\"tier\">Starter Pack</p>\n          <p class=\"price\">Brown Paper Bag full of $20s</p>\n        </td>\n        <td style=\"padding: 20px 15px;\">\n          <p><strong>5</strong> and a half map views  <strong>/mo</strong></p>\n          <p><strong>11</strong> times thinking about the API <strong>/mo</strong></p>\n          <p><strong>6</strong> verbal mentions of \"Google\"  <strong>/mo</strong></p>\n          <p><strong>2</strong> directions to shitty parties <strong>/mo</strong></p>\n          <p><strong>8</strong> visits to anywhere <strong>/mo</strong></p>\n        </td>\n        <td style=\"padding: 20px 15px;\">\n          <p><strong>9</strong> Android unlocks <strong>/mo</strong></p>\n          <p><strong>12</strong> Google queries for restaurants  <strong>/mo</strong></p>\n          <p><strong>3</strong> \"OK Google\" queries  <strong>/mo</strong></p>\n          <p><strong>7</strong> Accidental app opens <strong>/mo</strong></p>\n          <p><strong>1</strong> Creating the next \"Uber for X\" <strong>/mo</strong></p>\n        </td>\n      </tr>\n      <tr>\n        <td class=\"introbox\">\n          <p class=\"tier\">Additional Usage</p>\n          <p class=\"price\">Eleventy Billion Dollars</p>\n        </td>\n        <td style=\"padding: 20px 15px;\">\n          <p>Unlimited Requests!*  </p>\n          <p><small>*See Pricing </small></p>\n        </td>\n        <td style=\"padding: 20px 15px;\">\n          <p>Unlimited Requests!*</p>\n          <p><small>*See Pricing</small></p>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n<p>Seems like a convincing point in the win column for <strong>Mapbox</strong>. If we stay within reason, Mapbox can essentially serve us as an entirely free service.</p><p>Surely we must be missing <em>something</em> since we're opting for free services though, right? How do Mapbox visualizations stack up against Google Maps?</p><p data-height=\"511\" data-theme-id=\"0\" data-slug-hash=\"ENoOjz\" data-default-tab=\"result\" data-user=\"ro-ka\" data-pen-title=\"3D map visualizations with Mapbox GL JS\" class=\"codepen\"><a href=\"https://codepen.io/ro-ka/pen/ENoOjz/\"><br></a><a href=\"https://codepen.io/ro-ka\"></a><a href=\"https://codepen.io\"></a></p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script><p>Pardon my French here, but hot damn that map is <em>dope.</em> There are plenty more examples where that came from, but it's clear that <strong>Mapbox </strong>has lowkey stolen the hearts of the <em>scientific analysis</em> market, while <strong>Google</strong> concerns itself on the <em>consumer</em> and <em>business</em> markets.</p><h2 id=\"tonight-s-itinerary-creating-dope-maps\">Tonight's Itinerary: Creating Dope Maps</h2><p>To make some data art, we have a few items on our checklist:</p><ul><li>Obtain a dataset with location-based data: In our case of routing, we need a dataset with a set origin and destination per row.</li><li>Create <strong>direction </strong>object routes by running our dataset through the Mapbox API. </li><li>Create a styled map for our presentation by using Mapbox's style editor.</li><li>Overlay our route data on our beautiful map.</li></ul><h2 id=\"step-1-get-some-free-data\">Step 1: Get Some Free Data</h2><p>Now that we've properly shit-talked Google, let's use Google. We're going to need to get some good data, and <strong>BigQuery</strong> has some awesome free datasets that we can run wild with. I'll be opting for <strong>NYC's dataset on Citibike trips</strong>, as it provides a clean set of data where starting and ending coordinates are always present.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/Screen-Shot-2018-12-07-at-2.53.34-AM.png\" class=\"kg-image\"><figcaption>Google Cloud's Free Dataset of Citibike Trips</figcaption></figure><p>As a side note, BigQuery is great. Even if you're only somewhat versed in SQL, BigQuery's syntax is essentially whatever your first guess would be.</p><p>Granted we only need the start and end locations to make our map, but i decided to take a bit extra for curiosity's sake:</p><div class=\"tableContainer\">\n<table border=\"1\" class=\"table table-striped table-bordered table-hover table-condensed\">\n<thead><tr><th title=\"Field #1\">start_name</th>\n<th title=\"Field #2\">start_latitude</th>\n<th title=\"Field #3\">start_longitude</th>\n<th title=\"Field #4\">end_name</th>\n<th title=\"Field #5\">end_latitude</th>\n<th title=\"Field #6\">end_longitude</th>\n</tr></thead>\n<tbody><tr><td>1 Ave &amp; E 15 St</td>\n<td align=\"right\">40.732218530</td>\n<td align=\"right\">-73.981655570</td>\n<td>1 Ave &amp; E 18 St</td>\n<td align=\"right\">40.733812192</td>\n<td align=\"right\">-73.980544209</td>\n</tr>\n<tr><td>1 Ave &amp; E 30 St</td>\n<td align=\"right\">40.741443870</td>\n<td align=\"right\">-73.975360820</td>\n<td>E 39 St &amp; 2 Ave</td>\n<td align=\"right\">40.747803730</td>\n<td align=\"right\">-73.973441900</td>\n</tr>\n<tr><td>1 Ave &amp; E 62 St</td>\n<td align=\"right\">40.761227400</td>\n<td align=\"right\">-73.960940220</td>\n<td>E 75 St &amp; 3 Ave</td>\n<td align=\"right\">40.771129270</td>\n<td align=\"right\">-73.957722970</td>\n</tr>\n<tr><td>2 Ave &amp; E 99 St</td>\n<td align=\"right\">40.786258600</td>\n<td align=\"right\">-73.945525790</td>\n<td>3 Ave &amp; E 112 St</td>\n<td align=\"right\">40.795508000</td>\n<td align=\"right\">-73.941606000</td>\n</tr>\n<tr><td>3 St &amp; 3 Ave</td>\n<td align=\"right\">40.675070500</td>\n<td align=\"right\">-73.987752260</td>\n<td>10 St &amp; 7 Ave</td>\n<td align=\"right\">40.666207800</td>\n<td align=\"right\">-73.981998860</td>\n</tr>\n<tr><td>3 St &amp; Prospect Park West</td>\n<td align=\"right\">40.668132000</td>\n<td align=\"right\">-73.973638310</td>\n<td>3 St &amp; Prospect Park West</td>\n<td align=\"right\">40.668132000</td>\n<td align=\"right\">-73.973638310</td>\n</tr>\n<tr><td>6 Ave &amp; W 33 St</td>\n<td align=\"right\">40.749012710</td>\n<td align=\"right\">-73.988483950</td>\n<td>W 37 St &amp; 5 Ave</td>\n<td align=\"right\">40.750380090</td>\n<td align=\"right\">-73.983389880</td>\n</tr>\n<tr><td>8 Ave &amp; W 52 St</td>\n<td align=\"right\">40.763707390</td>\n<td align=\"right\">-73.985161500</td>\n<td>Central Park S &amp; 6 Ave</td>\n<td align=\"right\">40.765909360</td>\n<td align=\"right\">-73.976341510</td>\n</tr>\n<tr><td>11 Ave &amp; W 41 St</td>\n<td align=\"right\">40.760300960</td>\n<td align=\"right\">-73.998842220</td>\n<td>W 34 St &amp; 11 Ave</td>\n<td align=\"right\">40.755941590</td>\n<td align=\"right\">-74.002116300</td>\n</tr>\n<tr><td>12 Ave &amp; W 40 St</td>\n<td align=\"right\">40.760875020</td>\n<td align=\"right\">-74.002776680</td>\n<td>W 42 St &amp; 8 Ave</td>\n<td align=\"right\">40.757569900</td>\n<td align=\"right\">-73.990985070</td>\n</tr>\n<tr><td>Allen St &amp; E Houston St</td>\n<td align=\"right\">40.722055000</td>\n<td align=\"right\">-73.989111000</td>\n<td>Mott St &amp; Prince St</td>\n<td align=\"right\">40.723179580</td>\n<td align=\"right\">-73.994800120</td>\n</tr>\n<tr><td>Allen St &amp; Hester St</td>\n<td align=\"right\">40.716058660</td>\n<td align=\"right\">-73.991907590</td>\n<td>Greenwich St &amp; N Moore St</td>\n<td align=\"right\">40.720434110</td>\n<td align=\"right\">-74.010206090</td>\n</tr>\n<tr><td>Amsterdam Ave &amp; W 73 St</td>\n<td align=\"right\">40.779668090</td>\n<td align=\"right\">-73.980930448</td>\n<td>E 85 St &amp; 3 Ave</td>\n<td align=\"right\">40.778012030</td>\n<td align=\"right\">-73.954071490</td>\n</tr>\n<tr><td>Bank St &amp; Hudson St</td>\n<td align=\"right\">40.736528890</td>\n<td align=\"right\">-74.006180260</td>\n<td>MacDougal St &amp; Prince St</td>\n<td align=\"right\">40.727102580</td>\n<td align=\"right\">-74.002970880</td>\n</tr>\n<tr><td>Bank St &amp; Washington St</td>\n<td align=\"right\">40.736196700</td>\n<td align=\"right\">-74.008592070</td>\n<td>W 4 St &amp; 7 Ave S</td>\n<td align=\"right\">40.734011430</td>\n<td align=\"right\">-74.002938770</td>\n</tr>\n<tr><td>Barclay St &amp; Church St</td>\n<td align=\"right\">40.712912240</td>\n<td align=\"right\">-74.010202340</td>\n<td>Clinton St &amp; Tillary St</td>\n<td align=\"right\">40.696192000</td>\n<td align=\"right\">-73.991218000</td>\n</tr>\n<tr><td>Berkeley Pl &amp; 7 Ave</td>\n<td align=\"right\">40.675146839</td>\n<td align=\"right\">-73.975232095</td>\n<td>West Drive &amp; Prospect Park West</td>\n<td align=\"right\">40.661063372</td>\n<td align=\"right\">-73.979452550</td>\n</tr>\n<tr><td>Bialystoker Pl &amp; Delancey St</td>\n<td align=\"right\">40.716226440</td>\n<td align=\"right\">-73.982612060</td>\n<td>Reade St &amp; Broadway</td>\n<td align=\"right\">40.714504510</td>\n<td align=\"right\">-74.005627890</td>\n</tr>\n<tr><td>Broadway &amp; W 24 St</td>\n<td align=\"right\">40.742354300</td>\n<td align=\"right\">-73.989150760</td>\n<td>South End Ave &amp; Liberty St</td>\n<td align=\"right\">40.711512000</td>\n<td align=\"right\">-74.015756000</td>\n</tr>\n<tr><td>Broadway &amp; W 29 St</td>\n<td align=\"right\">40.746200900</td>\n<td align=\"right\">-73.988557230</td>\n<td>Stanton St &amp; Chrystie St</td>\n<td align=\"right\">40.722293460</td>\n<td align=\"right\">-73.991475350</td>\n</tr>\n<tr><td>Broadway &amp; W 56 St</td>\n<td align=\"right\">40.765265400</td>\n<td align=\"right\">-73.981923380</td>\n<td>Broadway &amp; W 49 St</td>\n<td align=\"right\">40.760683271</td>\n<td align=\"right\">-73.984527290</td>\n</tr>\n<tr><td>Broadway &amp; W 58 St</td>\n<td align=\"right\">40.766953170</td>\n<td align=\"right\">-73.981693330</td>\n<td>5 Ave &amp; E 78 St</td>\n<td align=\"right\">40.776321422</td>\n<td align=\"right\">-73.964273930</td>\n</tr>\n<tr><td>Cadman Plaza E &amp; Red Cross Pl</td>\n<td align=\"right\">40.699917550</td>\n<td align=\"right\">-73.989717730</td>\n<td>Leonard St &amp; Church St</td>\n<td align=\"right\">40.717571000</td>\n<td align=\"right\">-74.005549000</td>\n</tr>\n<tr><td>Cadman Plaza E &amp; Tillary St</td>\n<td align=\"right\">40.695976830</td>\n<td align=\"right\">-73.990148920</td>\n<td>Lawrence St &amp; Willoughby St</td>\n<td align=\"right\">40.692361780</td>\n<td align=\"right\">-73.986317460</td>\n</tr>\n<tr><td>Carmine St &amp; 6 Ave</td>\n<td align=\"right\">40.730385990</td>\n<td align=\"right\">-74.002149880</td>\n<td>W 27 St &amp; 7 Ave</td>\n<td align=\"right\">40.746647000</td>\n<td align=\"right\">-73.993915000</td>\n</tr>\n<tr><td>Central Park W &amp; W 96 St</td>\n<td align=\"right\">40.791270000</td>\n<td align=\"right\">-73.964839000</td>\n<td>W 52 St &amp; 6 Ave</td>\n<td align=\"right\">40.761329831</td>\n<td align=\"right\">-73.979820013</td>\n</tr>\n<tr><td>Central Park West &amp; W 76 St</td>\n<td align=\"right\">40.778967840</td>\n<td align=\"right\">-73.973747370</td>\n<td>Central Park S &amp; 6 Ave</td>\n<td align=\"right\">40.765909360</td>\n<td align=\"right\">-73.976341510</td>\n</tr>\n</tbody></table>\n</div><h2 id=\"step-2-style-a-sexy-map-in-mapbox-studio\">Step 2: Style a Sexy Map in Mapbox Studio</h2><p>Mapbox provides a superb web UI labeled “studio” interface to help us get started. The “studio” web UI is separated into three parts: <strong>custom map styles</strong>, <strong>tilesets</strong>, and <strong>datasets</strong>.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/mapboxstudio.gif\" class=\"kg-image\"><figcaption>All of these can we saved for later use.</figcaption></figure><p>These three sections can be summarized as:</p><ul><li><strong>Styles: </strong>Custom map styles editable via a GUI, which produce a stylesheet for convenience </li><li><strong>Tilesets: </strong>Map overlays we can apply from our own data or otherwise to segment geographical areas</li><li><strong>Datasets:</strong> Data containing anything from points on a map to complex direction routes we can overlay atop our map.</li></ul><p>Here's a quick look at the Map style editor:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/Screen-Shot-2018-12-07-at-4.29.43-PM.png\" class=\"kg-image\"><figcaption>I want to wake up, in a city that doesn't sleep.</figcaption></figure><p>Save your styled map once you find it to be adequately attractive. We'll need it for later.</p><h2 id=\"step-4-start-a-flask-app\">Step 4: Start a Flask App</h2><p>Of course we're making a Flask app; is there even any other kind? We'll be using the Flask Application Factory setup as we usually do, so we should end up with a file structure as below. If you feel like you're getting ahead of ourself, checkout our post on <a href=\"https://hackersandslackers.com/structuring-your-flask-app/\">structuring Flask applications</a>.</p><pre><code class=\"language-bash\">mapbox-app\n├── /application\n│   └── __init__.py\n├── /datasets\n│   ├── data.json\n│   └── output.csv   \n├── /maps\n│   ├── __init__.py\n│   ├── /templates\n│   │    └── index.html\n│   ├── views.py\n│   └── plots.py\n├── start.sh\n├── settings.py\n├── wsgi.py\n├── Pipfile\n├── README.md\n└── requirements.txt\n</code></pre>\n<p>To mix things up a bit we'll use a shell script this time to handle envars and running our script. Start by creating <strong>start.sh</strong>:</p><pre><code class=\"language-bash\"># start.sh\n\nexport FLASK_APP=wsgi.py\nexport FLASK_DEBUG=1\nexport APP_CONFIG_FILE=settings.py\nflask run\n</code></pre>\n<p>Yes, we'll be using <code>settings.py</code> as our config file for a change. Ahhh, just like the Django days. This file should contain a Mapbox <strong>access token</strong>. Mapbox provides you with a public token by default in many of its tutorials (noted by the <em><strong>pk</strong> </em>prefix for <em>'public key' - </em>contrast this with <strong><em>sk</em></strong> for <em>'secret key'</em>). If you'd like to do anything meaningful with Mapbox, you'll have to retrieve a secret key via the UI. Then we can add this token to <code>settings.py</code> as such:</p><pre><code class=\"language-bash\">MAPBOX_ACCESS_TOKEN=&quot;sk.eyJ1IB&amp;F^&amp;f^R&amp;DFRUYFTRUctyrcTYRUFrtCFTYDYTuEg&quot;\n</code></pre>\n<p>Finally, here's a look at <code>application/__init__.py</code> just to make sure we're on the same page:</p><pre><code class=\"language-python\"># application/__init__.py\n\nimport os\nfrom flask import Flask, g\n\ndef create_app():\n    &quot;&quot;&quot;Construct the core application.&quot;&quot;&quot;\n    app = Flask(__name__)\n    app.config.from_envvar('APP_CONFIG_FILE', silent=True)\n\n    with app.app_context():\n        # Construct map blueprint\n        from maps import mapviews\n        app.register_blueprint(mapviews.map_blueprint)\n\n        return app\n</code></pre>\n<h2 id=\"step-5-create-a-blueprint-for-your-map\">Step 5: Create a Blueprint for Your Map</h2><p>You may have noticed we registered this Blueprint in the previous step. Create a <code>/maps</code> directory which we'll set as a module; we'll need this to handle the <strong>view</strong>, <strong>model </strong>(or just data),  and <strong>controller </strong>(routes.py as seen below).</p><h3 id=\"routes-py\">routes.py</h3><pre><code class=\"language-python\">import os\nfrom flask import Blueprint, render_template, request\nfrom flask import current_app as app\nfrom . import locations\n\nmap_blueprint = Blueprint('map', __name__, template_folder='templates', static_folder='static')\nplot_locations = locations.LocationData()\n\n\n# Landing Page\n@map_blueprint.route('/', methods=['GET'])\ndef map():\n    return render_template('index.html', ACCESS_KEY=app.MAPBOX_ACCESS_KEY,  locations=plot_locations.get_plots, title=&quot;CitiBike Mapbox App.&quot;)\n\n</code></pre>\n<h3 id=\"templates-index-html\">templates/index.html</h3><pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;meta charset='utf-8' /&gt;\n  &lt;title&gt;{{title}}&lt;/title&gt;\n  &lt;meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' /&gt;\n  &lt;script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.49.0/mapbox-gl.js'&gt;&lt;/script&gt;\n  &lt;link href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.49.0/mapbox-gl.css' rel='stylesheet' /&gt;\n  &lt;style&gt;\n    body { margin:0; padding:0; }\n    #map { position:absolute; top:0; bottom:0; width:100%; }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;div id='map'&gt;&lt;/div&gt;\n&lt;script&gt;\nmapboxgl.accessToken = {{MAPBOX_ACCESS_TOKEN}};\nconst map = new mapboxgl.Map({\n  container: 'map',\n  style: 'mapbox://styles/toddbirchard/cjpij1gfhghiy2spetf5w998w',\n  center: [-73.981856, 40.703820],\n  zoom: 11.1,\n\n});\n\nmap.on('load', function(e) {\n  // Add the data to your map as a layer\n  map.addLayer({\n    id: 'locations',\n    type: 'symbol',\n    // Add a GeoJSON source containing place coordinates and information.\n    source: {\n      type: 'geojson',\n      data: {{locations}}\n    },\n    layout: {\n      'icon-image': 'restaurant-15',\n      'icon-allow-overlap': true,\n    }\n  });\n});\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h3 id=\"data-py\">data.py</h3><p>Normally this is where we'd use the magic of the Mapbox API to get coordinates, route objects, or whatever it is your heart hopes to plot. This is intended to be intro post, so let's break that logic out for another time and use a dataset Mapbox would be happy to receive for the sake of results.</p><h2 id=\"step-6-uploading-our-dataset-via-mapbox-studio\">Step 6: Uploading our Dataset via Mapbox Studio</h2><p>Mapbox graciously lets us upload our data via their Studio UI, which does the unthinkable; immediately upon upload, Mapbox will take the data we give it (whether it be CSV, GeoJSON, etc) and immediately parse it in a way that makes sense. Upload your dataset at <a href=\"https://www.mapbox.com/studio/datasets/\">https://www.mapbox.com/studio/datasets/</a>:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/Screen-Shot-2018-12-10-at-5.29.24-PM.png\" class=\"kg-image\"><figcaption>Uploading the raw data of our Citibike CSV.</figcaption></figure><p>Next, Mapbox shows us a preview of our data before we even know what happened:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/Screen-Shot-2018-12-10-at-5.28.24-PM.png\" class=\"kg-image\"><figcaption>It's like they don't even want us to do work.</figcaption></figure><h2 id=\"step-7-do-it-in-flask\">Step 7: Do It in Flask</h2><p>After uploading your dataset via mapbox studio, you can actually <em>redownload</em> the data with a subtle twist: your data will be automatically formatted as GeoJSON: the format of JSON objects Mapbox uses to plot points, draw routes, etc.</p><p>Since we've had a long day, I'll allow you to download this pre-formatted data and hardcore the values in to your Map view. You're getting off easy for now, but next time we're doing this programmatically ;).</p><pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n  &lt;meta charset='utf-8' /&gt;\n  &lt;title&gt;{{title}}&lt;/title&gt;\n  &lt;meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' /&gt;\n  &lt;script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.49.0/mapbox-gl.js'&gt;&lt;/script&gt;\n  &lt;link href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.49.0/mapbox-gl.css' rel='stylesheet' /&gt;\n  &lt;style&gt;\n    body {\n      margin: 0;\n      padding: 0;\n    }\n\n    #map {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      width: 100%;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n\n  &lt;div id='map'&gt;&lt;/div&gt;\n  &lt;script&gt;\n    mapboxgl.accessToken = '{{ACCESS_KEY}}';\n    const map = new mapboxgl.Map({\n      container: 'map',\n      style: 'mapbox://styles/toddbirchard/cjpij1oxl3hiy2spetf5w998w',\n      center: [-73.981856, 40.703820],\n      zoom: 11.1,\n\n    });\n\n\n    map.addLayer({\n      &quot;id&quot;: &quot;points&quot;,\n      &quot;type&quot;: &quot;symbol&quot;,\n      &quot;source&quot;: {\n        &quot;features&quot;: [{\n            &quot;type&quot;: &quot;Feature&quot;,\n            &quot;properties&quot;: {\n              &quot;start_station_name&quot;: &quot;Central Park West &amp; W 76 St&quot;,\n              &quot;end_station_name&quot;: &quot;Central Park S &amp; 6 Ave&quot;,\n              &quot;end_station_latitude&quot;: &quot;40.76590936&quot;,\n              &quot;end_station_longitude&quot;: &quot;-73.97634151&quot;\n            },\n            &quot;geometry&quot;: {\n              &quot;coordinates&quot;: [\n                -73.973747,\n                40.778967\n              ],\n              &quot;type&quot;: &quot;Point&quot;\n            },\n            &quot;id&quot;: &quot;000a1f944d4dd786d9e7ed04620af02b&quot;\n          },\n          {\n            &quot;type&quot;: &quot;Feature&quot;,\n            &quot;properties&quot;: {\n              &quot;start_station_name&quot;: &quot;W 64 St &amp; West End Ave&quot;,\n              &quot;end_station_name&quot;: &quot;W 70 St &amp; Amsterdam Ave&quot;,\n              &quot;end_station_latitude&quot;: &quot;40.77748046&quot;,\n              &quot;end_station_longitude&quot;: &quot;-73.98288594&quot;\n            },\n            &quot;geometry&quot;: {\n              &quot;coordinates&quot;: [\n                -73.987537,\n                40.774528\n              ],\n              &quot;type&quot;: &quot;Point&quot;\n            },\n            &quot;id&quot;: &quot;01d8c19524f067a3f4712653265e0a49&quot;\n          },\n          {\n            &quot;type&quot;: &quot;Feature&quot;,\n            &quot;properties&quot;: {\n              &quot;start_station_name&quot;: &quot;E 20 St &amp; FDR Drive&quot;,\n              &quot;end_station_name&quot;: &quot;W 13 St &amp; 7 Ave&quot;,\n              &quot;end_station_latitude&quot;: &quot;40.73781509&quot;,\n              &quot;end_station_longitude&quot;: &quot;-73.99994661&quot;\n            },\n            &quot;geometry&quot;: {\n              &quot;coordinates&quot;: [\n                -73.975738,\n                40.733142\n              ],\n              &quot;type&quot;: &quot;Point&quot;\n            },\n            &quot;id&quot;: &quot;038ac5403b136e34874a7278f64d4e95&quot;\n          },\n          {\n              \\\\ --------------------------------------\n              (etc etc....)\n               \\\\ --------------------------------------\n          },\n          {\n            &quot;type&quot;: &quot;Feature&quot;,\n            &quot;properties&quot;: {\n              &quot;start_station_name&quot;: &quot;Mercer St &amp; Bleecker St&quot;,\n              &quot;end_station_name&quot;: &quot;1 Ave &amp; E 30 St&quot;,\n              &quot;end_station_latitude&quot;: &quot;40.74144387&quot;,\n              &quot;end_station_longitude&quot;: &quot;-73.97536082&quot;\n            },\n            &quot;geometry&quot;: {\n              &quot;coordinates&quot;: [\n                -73.996621,\n                40.727063\n              ],\n              &quot;type&quot;: &quot;Point&quot;\n            },\n            &quot;id&quot;: &quot;ff1daf9aadbf0cd6b788bd76f0a3f333&quot;\n          }\n        ],\n        &quot;type&quot;: &quot;FeatureCollection&quot;\n      },\n      &quot;layout&quot;: {\n        &quot;icon-image&quot;: &quot;{icon}-15&quot;,\n        &quot;text-field&quot;: &quot;{title}&quot;,\n        &quot;text-font&quot;: [&quot;Open Sans Semibold&quot;, &quot;Arial Unicode MS Bold&quot;],\n        &quot;text-offset&quot;: [0, 0.6],\n        &quot;text-anchor&quot;: &quot;top&quot;\n      }\n    });\n  &lt;/script&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"uncharted-territory\">Uncharted Territory</h2><p>There's way more for us to explore in Mapbox. Stay tuned for the rest of this series as we explore generating GeoData programmatically, and build interactive applications to really get users involved in map data by letting them control constraints such as time, etc. </p>","url":"https://hackersandslackers.com/map-data-visualization-with-mapbox/","uuid":"3b64bf8d-b545-469c-b2df-83ee7a816e31","page":false,"codeinjection_foot":"","codeinjection_head":"  <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.js'></script>\n    <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.css' rel='stylesheet' />","comment_id":"5c0aafba5da6c4479ab70ff1"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867373f","title":"Hacking and Hustling: Full User Auth Without Writing Code","slug":"handling-user-accounts-with-zero-code","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/11/saas-2@2x.jpg","excerpt":"Weasle your way through coding by exploiting freemium software.","custom_excerpt":"Weasle your way through coding by exploiting freemium software.","created_at_pretty":"27 November, 2018","published_at_pretty":"28 November, 2018","updated_at_pretty":"15 February, 2019","created_at":"2018-11-27T15:02:27.000-05:00","published_at":"2018-11-28T07:24:00.000-05:00","updated_at":"2019-02-15T12:45:41.000-05:00","meta_title":"Hacking and Hustling: Full User Auth Without Writing Code | Hackers and Slackers","meta_description":"Today we weasel our way through coding by exploiting freemium software: Apisentris, Byepass, Getform, & Zapier.","og_description":"Today we weasel our way through coding by exploiting freemium software: Apisentris, Byepass, Getform, & Zapier.","og_image":"https://hackersandslackers.com/content/images/2018/11/saas-2@2x.jpg","og_title":"Hacking and Hustling: Full User Auth Without Writing Code","twitter_description":"Today we weasel our way through coding by exploiting freemium software: Apisentris, Byepass, Getform, & Zapier.","twitter_image":"https://hackersandslackers.com/content/images/2018/11/saas-2@2x.jpg","twitter_title":"Hacking and Hustling: Full User Auth Without Writing Code","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"SaaS Products","slug":"saas","description":"Third-party products and services we’ve discovered to be diamonds in the rough. These are products we’ve included in our stack based on price and value add.","feature_image":null,"meta_description":"Third-party products and services we’ve discovered to be diamonds in the rough. These are products we’ve included in our stack based on price and value add.","meta_title":"Our Picks: SaaS Products | Hackers and Slackers","visibility":"public"},"tags":[{"name":"SaaS Products","slug":"saas","description":"Third-party products and services we’ve discovered to be diamonds in the rough. These are products we’ve included in our stack based on price and value add.","feature_image":null,"meta_description":"Third-party products and services we’ve discovered to be diamonds in the rough. These are products we’ve included in our stack based on price and value add.","meta_title":"Our Picks: SaaS Products | Hackers and Slackers","visibility":"public"},{"name":"Automation","slug":"automation","description":"General automation of systems and software on a macro level. Learn to automate manual processes suitable for enterprises.","feature_image":null,"meta_description":"General automation of systems and software on a macro level. Learn to automate manual processes suitable for enterprises.","meta_title":"Automation | Hackers and Slackers","visibility":"public"}],"plaintext":"The midlife crisis is a striking phenomenon common and equally inescapable to\nall of us. I’m fairly certain I’ve come to a turning point in my life where I\ntoo must admit I will never be cool again. I know this because I check Product\nHunt on a daily basis, and I thoroughly enjoy it.\n\nI’d estimate about 80% of things featured on Product Hunt are hilariously\nworthless parodies of Silicon Valley itself, real predators live for the hunt.\nThey hunt on. At least that’s what Eric Thomas told me during a podcast\n[https://www.youtube.com/watch?v=fybi42dJHD4]  on my way to the gym one morning.\nOn this fine day, my friends, the Lion has risen.\n\nWe’re in a unique period in human history where the Middle Class simply no\nlonger exists. This is great if you’re not an enterprise software giant because\nthat means all SaaS pricing models have two modes: free, or ten billion jillion\ngazillion dollars. Sometimes when we persist, those free services might align to\nlet us do something crazy. Handling user signups, authentication, sessions, and\nso forth for zero work and zero dollars is indeed crazy.\n\nWe’re going to leverage four products at once to achieve this amazing feat of\nlaziness. While each of them may be mediocre in their own right, the whole is\nsurely greater than the sum of its parts.\n\nApisentris [https://apisentris.com]: Generate a REST API for any DB Instantly\nYou get an endpoint! And YOU get an endpoint!This is a product we've briefly\ntouched on in the past: the gist is that granting Apisentris  to your database\nwill generate a full-on API which can modify any record of any table in any way\nyou can imagine. Yes, that includes users.\n\nByepass [https://byepass.co]: User Logins Without Passwords\nGood luck trying to white-label this for under 20k.Byepass is a relatively new\nproduct- if you haven’t Googled them yet, you’re in for a treat of search\nresults. Let this be a lesson in SEO. \n\nThe premise of this service is to phase out and destroy plaintext passwords.\nConsidering the standard of modern-day 2FA, it’s not too hard of a sell… the\nonly thing that truly sucks about the product is their branded confirmation\nemails (and the dreaded“contact us for pricing” estimate when considering a\nwhite label option). \n\nBesides saving the trouble of passwords, there is a key upside to Byepass\nspecifically for us: since passwords are no longer needed in user sign-ups,\nthere’s no need to pass the form along to a backend, where a framework is\nexpecting to encrypt the blah blah blah. Give it a rest, this is my Slacking\nday.\n\nGetform.io [https://getform.io/]: The Cleanest Drop-in Form Solution\nCapturing forms without doing the form work.Getform.io  started off with a strong goal in mind: to allow idiots who host\nWordpress sites collect user information via forms… while most likely having\nzero clue as to how to code or even use a CMS. When submitted, form results are\nsent to an endpoint on the Getform side. From there, Getform already tips you\noff on what you should do next: they name drop Zapier, and they’re ready to\nparty.\n\nZapier [https://zapier.com]: You Already Know the Deal\nI've simulated my entire personality in a collection of zaps.We all know the\ndeal with Zapier by now: it’s the glue in any Slacker’s arsenal. I can already\nhear the neckbeards wailing in agony at the sheer mention of Zapier. I get it,\nyou’re insisting that Zapier is a collection of API endpoints cleverly pointed\ntowards one another for convenience, and you could totally build that stuff\nyourself.\n\nTo set the record straight, you’re not  going to code anything Zapier automates\non its own. If you spent that much time on menial tasks, you’d be a developer\nvalued at minimum wage. You’re not building shit- you’re playing Rocket league\nwhen you get home from work like the rest of us.\n\nStep 1: Create a Signup Form\nThis part of the process is pretty easy considering all you need to do is copy\nand paste Getform's boilerplate from the first page you see when you log in:\n\n<form action=\"https://getform.io/f/54775468-578-45765718d-567-5474657567564\" method=\"POST\">\n    <input type=\"text\" name=\"name\">\n    <input type=\"email\" name=\"email\">\n    <input type=\"tel\" name=\"tel\">\n    <button type=\"submit\">Send</button>\n</form>\n\nStep 2: Get Zapped\nNow it’s game time. I just as easily could have named this post “dope shit you\ncan do with Zapier without paying the Ludacris 50-dollar per month free to\nincorporate pipelines.” I still haven’t ruled it out, really. Here’s what’s\nwaiting for you:\n\nchain chain chaaaaiiinnnn…As you might imagine, we're getting some pretty basic\ninput from this signup form: in my case, simply username  and password. Before\nwe go saving two values to a weak af database table somewhere, let's add a\nlittle spice to the equation in the JavaScript step.\n\nGive the People What They Want\nWhat do people want? pictures of their own dumb faces, mostly! Luckily, there's\na service called Gravatar [https://en.gravatar.com/]  which might just be able\nto provide us with just that. Sometimes when you sign up for a service, you\nmight notice they already have your mugshot on file. At some point, you signed\nup for a service that associates your email address with a profile picture,\nsimply by applying an md5  hash to your email.\n\nWe're going to do the same for our users.\n\nSet up your input data:\n\nSo far so good!Great, now all that's left is encrypting that email address in\nvanilla Javascript thanks to Zapiers inability to handle imports:\n\nvar MD5 = function(d){var result = M(V(Y(X(d),8*d.length)));return result.toLowerCase()};function M(d){for(var _,m=\"0123456789ABCDEF\",f=\"\",r=0;r<d.length;r++)_=d.charCodeAt(r),f+=m.charAt(_>>>4&15)+m.charAt(15&_);return f}function X(d){for(var _=Array(d.length>>2),m=0;m<_.length;m++)_[m]=0;for(m=0;m<8*d.length;m+=8)_[m>>5]|=(255&d.charCodeAt(m/8))<<m%32;return _}function V(d){for(var _=\"\",m=0;m<32*d.length;m+=8)_+=String.fromCharCode(d[m>>5]>>>m%32&255);return _}function Y(d,_){d[_>>5]|=128<<_%32,d[14+(_+64>>>9<<4)]=_;for(var m=1732584193,f=-271733879,r=-1732584194,i=271733878,n=0;n<d.length;n+=16){var h=m,t=f,g=r,e=i;f=md5_ii(f=md5_ii(f=md5_ii(f=md5_ii(f=md5_hh(f=md5_hh(f=md5_hh(f=md5_hh(f=md5_gg(f=md5_gg(f=md5_gg(f=md5_gg(f=md5_ff(f=md5_ff(f=md5_ff(f=md5_ff(f,r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+0],7,-680876936),f,r,d[n+1],12,-389564586),m,f,d[n+2],17,606105819),i,m,d[n+3],22,-1044525330),r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+4],7,-176418897),f,r,d[n+5],12,1200080426),m,f,d[n+6],17,-1473231341),i,m,d[n+7],22,-45705983),r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+8],7,1770035416),f,r,d[n+9],12,-1958414417),m,f,d[n+10],17,-42063),i,m,d[n+11],22,-1990404162),r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+12],7,1804603682),f,r,d[n+13],12,-40341101),m,f,d[n+14],17,-1502002290),i,m,d[n+15],22,1236535329),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+1],5,-165796510),f,r,d[n+6],9,-1069501632),m,f,d[n+11],14,643717713),i,m,d[n+0],20,-373897302),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+5],5,-701558691),f,r,d[n+10],9,38016083),m,f,d[n+15],14,-660478335),i,m,d[n+4],20,-405537848),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+9],5,568446438),f,r,d[n+14],9,-1019803690),m,f,d[n+3],14,-187363961),i,m,d[n+8],20,1163531501),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+13],5,-1444681467),f,r,d[n+2],9,-51403784),m,f,d[n+7],14,1735328473),i,m,d[n+12],20,-1926607734),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+5],4,-378558),f,r,d[n+8],11,-2022574463),m,f,d[n+11],16,1839030562),i,m,d[n+14],23,-35309556),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+1],4,-1530992060),f,r,d[n+4],11,1272893353),m,f,d[n+7],16,-155497632),i,m,d[n+10],23,-1094730640),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+13],4,681279174),f,r,d[n+0],11,-358537222),m,f,d[n+3],16,-722521979),i,m,d[n+6],23,76029189),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+9],4,-640364487),f,r,d[n+12],11,-421815835),m,f,d[n+15],16,530742520),i,m,d[n+2],23,-995338651),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+0],6,-198630844),f,r,d[n+7],10,1126891415),m,f,d[n+14],15,-1416354905),i,m,d[n+5],21,-57434055),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+12],6,1700485571),f,r,d[n+3],10,-1894986606),m,f,d[n+10],15,-1051523),i,m,d[n+1],21,-2054922799),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+8],6,1873313359),f,r,d[n+15],10,-30611744),m,f,d[n+6],15,-1560198380),i,m,d[n+13],21,1309151649),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+4],6,-145523070),f,r,d[n+11],10,-1120210379),m,f,d[n+2],15,718787259),i,m,d[n+9],21,-343485551),m=safe_add(m,h),f=safe_add(f,t),r=safe_add(r,g),i=safe_add(i,e)}return Array(m,f,r,i)}function md5_cmn(d,_,m,f,r,i){return safe_add(bit_rol(safe_add(safe_add(_,d),safe_add(f,i)),r),m)}function md5_ff(d,_,m,f,r,i,n){return md5_cmn(_&m|~_&f,d,_,r,i,n)}function md5_gg(d,_,m,f,r,i,n){return md5_cmn(_&f|m&~f,d,_,r,i,n)}function md5_hh(d,_,m,f,r,i,n){return md5_cmn(_^m^f,d,_,r,i,n)}function md5_ii(d,_,m,f,r,i,n){return md5_cmn(m^(_|~f),d,_,r,i,n)}function safe_add(d,_){var m=(65535&d)+(65535&_);return(d>>16)+(_>>16)+(m>>16)<<16|65535&m}function bit_rol(d,_){return d<<_|d>>>32-_}\n\nvar value = inputData.email;\n\nvar grav = MD5(value);\n\noutput = {username: inputData.username, email: inputData.email, gravatar: grav};\n\n\nOh yes, friend. It's like that.\n\nStep 3: Create Records in Our Database via the API\nCould we enter records into MySQL via a direct connection? Sure, if you like\nwasting time creating SSL certs for your lame boring DB connections. That’s 5\nminutes that could be spent playing Rocket League.\n\nInstead, consider the following alternative of passing a JSON object to a\nrelational database and having it turn out just fine. It feels like we’re\nprancing through a field of freemium software Unicorns- just like in my dreams:\n\nHave fun with your .pem files, losers.Step 4: Let There be Confirmation Emails\nAll that's left is welcoming our users to our family with a handwritten, generic\ntemplated email courtesy of Byepass.\n\nDon’t worry about these publicly visible email addresses btw: they’re all bots.\nIn case you're ignoring the documentation completely (understandable), our last\nrequest is a POST request to https://byepass.co/redirect. In fact, here- just\ntake the docs:\n\n\n--------------------------------------------------------------------------------\n\nEndpoint: https://byepass.co/redirect\n\nMethod: GET or POST\n\nHeaders: {\"Content-Type: application/x-www-form-urlencoded\"}  \n\nRequest Variables:\n * identifier  (email address)\n * block_proxy  (BOOL 0 for to no restriction, 1 to block verifications from\n   known proxies) (Paid accounts only)\n * key  (Byepass app key)\n\n\n--------------------------------------------------------------------------------\n\nWe've Finally Made It\nWe may never be the spring chickens we once were, but we all experience chills\nof envy when we watch those reality TV shows featuring Midwestern people with\nmental illnesses hoard coupons and score the sickest grocery store heists ever\nto air television legally. That's who we are now: we're the crazy, deal-seeking,\nthrill-chasing coupon ladies of Silicon Valley. \n\nAll I know is it feels great to not work myself further out of the debt I\naccrued while attempting to offset the crippling, burnt-out depression bestowed\nupon us by the technology industry. For this moment, life is fine. Finally.","html":"<p>The midlife crisis is a striking phenomenon common and equally inescapable to all of us. I’m fairly certain I’ve come to a turning point in my life where I too must admit I will never be cool again. I know this because I check Product Hunt on a daily basis, and I thoroughly enjoy it.</p><p>I’d estimate about 80% of things featured on Product Hunt are hilariously worthless parodies of Silicon Valley itself, real predators live for the hunt. They hunt on. At least that’s what <a href=\"https://www.youtube.com/watch?v=fybi42dJHD4\" rel=\"noopener\">Eric Thomas told me during a podcast</a> on my way to the gym one morning. On this fine day, my friends, the Lion has risen.</p><p>We’re in a unique period in human history where the Middle Class simply no longer exists. This is great if you’re not an enterprise software giant because that means all SaaS pricing models have two modes: free, or ten billion jillion gazillion dollars. Sometimes when we persist, those free services might align to let us do something crazy. Handling user signups, authentication, sessions, and so forth for zero work and zero dollars is indeed crazy.</p><p>We’re going to leverage four products at once to achieve this amazing feat of laziness. While each of them may be mediocre in their own right, the whole is surely greater than the sum of its parts.</p><h2 id=\"apisentris-generate-a-rest-api-for-any-db-instantly\"><a href=\"https://apisentris.com\">Apisentris</a>: Generate a REST API for any DB Instantly</h2><figure class=\"kg-card kg-image-card\"><img src=\"http://res-2.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/Screen-Shot-2018-11-27-at-7.15.49-PM_o_o.png\" class=\"kg-image\"><figcaption>You get an endpoint! And YOU get an endpoint!</figcaption></figure><p>This is a product we've briefly touched on in the past: the gist is that granting <strong>Apisentris</strong> to your database will generate a full-on API which can modify any record of any table in any way you can imagine. Yes, that includes users.</p><h2 id=\"byepass-user-logins-without-passwords\"><a href=\"https://byepass.co\">Byepass</a>: User Logins Without Passwords</h2><figure class=\"kg-card kg-image-card\"><img src=\"http://res-1.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/Screen-Shot-2018-11-27-at-7.15.04-PM_o_o.png\" class=\"kg-image\"><figcaption><em>Good luck trying to white-label this for under 20k.</em></figcaption></figure><p>Byepass is a relatively new product- if you haven’t Googled them yet, you’re in for a treat of search results. Let this be a lesson in SEO. </p><p>The premise of this service is to phase out and destroy plaintext passwords. Considering the standard of modern-day 2FA, it’s not too hard of a sell… the only thing that truly sucks about the product is their branded confirmation emails (and the dreaded“contact us for pricing” estimate when considering a white label option). </p><p>Besides saving the trouble of passwords, there is a key upside to Byepass specifically for us: since passwords are no longer needed in user sign-ups, there’s no need to pass the form along to a backend, where a framework is expecting to encrypt the blah blah blah. Give it a rest, this is my Slacking day.</p><h2 id=\"getform-io-the-cleanest-drop-in-form-solution\"><a href=\"https://getform.io/\">Getform.io</a>: The Cleanest Drop-in Form Solution</h2><figure class=\"kg-card kg-image-card\"><img src=\"http://res-4.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/Screen-Shot-2018-12-26-at-6.59.46-PM.png\" class=\"kg-image\"><figcaption>Capturing forms without doing the form work.</figcaption></figure><p><strong>Getform.io</strong> started off with a strong goal in mind: to allow idiots who host Wordpress sites collect user information via forms… while most likely having zero clue as to how to code or even use a CMS. When submitted, form results are sent to an endpoint on the Getform side. From there, Getform already tips you off on what you should do next: they name drop Zapier, and they’re ready to party.</p><h2 id=\"zapier-you-already-know-the-deal\"><a href=\"https://zapier.com\">Zapier</a>: You Already Know the Deal</h2><figure class=\"kg-card kg-image-card\"><img src=\"http://res-4.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/Screen-Shot-2018-11-27-at-7.35.34-PM_o_o.png\" class=\"kg-image\"><figcaption>I've simulated my entire personality in a collection of zaps.</figcaption></figure><p>We all know the deal with Zapier by now: it’s the glue in any Slacker’s arsenal. I can already hear the neckbeards wailing in agony at the sheer mention of Zapier. I get it, you’re insisting that Zapier is a collection of API endpoints cleverly pointed towards one another for convenience, and you could totally build that stuff yourself.</p><p>To set the record straight, you’re <em>not</em> going to code anything Zapier automates on its own. If you spent that much time on menial tasks, you’d be a developer valued at minimum wage. You’re not building shit- you’re playing Rocket league when you get home from work like the rest of us.</p><h2 id=\"step-1-create-a-signup-form\">Step 1: Create a Signup Form</h2><p>This part of the process is pretty easy considering all you need to do is copy and paste Getform's boilerplate from the first page you see when you log in:</p><pre><code>&lt;form action=\"https://getform.io/f/54775468-578-45765718d-567-5474657567564\" method=\"POST\"&gt;\n    &lt;input type=\"text\" name=\"name\"&gt;\n    &lt;input type=\"email\" name=\"email\"&gt;\n    &lt;input type=\"tel\" name=\"tel\"&gt;\n    &lt;button type=\"submit\"&gt;Send&lt;/button&gt;\n&lt;/form&gt;</code></pre><h2 id=\"step-2-get-zapped\">Step 2: Get Zapped</h2><p>Now it’s game time. I just as easily could have named this post “dope shit you can do with Zapier without paying the Ludacris 50-dollar per month free to incorporate pipelines.” I still haven’t ruled it out, really. Here’s what’s waiting for you:</p><figure class=\"kg-card kg-image-card\"><img src=\"http://res-1.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/Screen-Shot-2018-11-27-at-7.43.18-PM_o_o.png\" class=\"kg-image\"><figcaption>chain chain chaaaaiiinnnn…</figcaption></figure><p>As you might imagine, we're getting some pretty basic input from this signup form: in my case, simply <strong>username</strong> and <strong>password</strong>. Before we go saving two values to a weak af database table somewhere, let's add a little spice to the equation in the JavaScript step.</p><h3 id=\"give-the-people-what-they-want\">Give the People What They Want</h3><p>What do people want? pictures of their own dumb faces, mostly! Luckily, there's a service called <a href=\"https://en.gravatar.com/\">Gravatar</a> which might just be able to provide us with just that. Sometimes when you sign up for a service, you might notice they already have your mugshot on file. At some point, you signed up for a service that associates your email address with a profile picture, simply by applying an <strong>md5</strong> hash to your email.</p><p>We're going to do the same for our users.</p><p>Set up your input data:</p><figure class=\"kg-card kg-image-card\"><img src=\"http://res-3.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/Screen-Shot-2018-12-26-at-7.03.30-PM.png\" class=\"kg-image\"><figcaption>So far so good!</figcaption></figure><p>Great, now all that's left is encrypting that email address in vanilla Javascript thanks to Zapiers inability to handle imports:</p><pre><code class=\"language-javascript\">var MD5 = function(d){var result = M(V(Y(X(d),8*d.length)));return result.toLowerCase()};function M(d){for(var _,m=&quot;0123456789ABCDEF&quot;,f=&quot;&quot;,r=0;r&lt;d.length;r++)_=d.charCodeAt(r),f+=m.charAt(_&gt;&gt;&gt;4&amp;15)+m.charAt(15&amp;_);return f}function X(d){for(var _=Array(d.length&gt;&gt;2),m=0;m&lt;_.length;m++)_[m]=0;for(m=0;m&lt;8*d.length;m+=8)_[m&gt;&gt;5]|=(255&amp;d.charCodeAt(m/8))&lt;&lt;m%32;return _}function V(d){for(var _=&quot;&quot;,m=0;m&lt;32*d.length;m+=8)_+=String.fromCharCode(d[m&gt;&gt;5]&gt;&gt;&gt;m%32&amp;255);return _}function Y(d,_){d[_&gt;&gt;5]|=128&lt;&lt;_%32,d[14+(_+64&gt;&gt;&gt;9&lt;&lt;4)]=_;for(var m=1732584193,f=-271733879,r=-1732584194,i=271733878,n=0;n&lt;d.length;n+=16){var h=m,t=f,g=r,e=i;f=md5_ii(f=md5_ii(f=md5_ii(f=md5_ii(f=md5_hh(f=md5_hh(f=md5_hh(f=md5_hh(f=md5_gg(f=md5_gg(f=md5_gg(f=md5_gg(f=md5_ff(f=md5_ff(f=md5_ff(f=md5_ff(f,r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+0],7,-680876936),f,r,d[n+1],12,-389564586),m,f,d[n+2],17,606105819),i,m,d[n+3],22,-1044525330),r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+4],7,-176418897),f,r,d[n+5],12,1200080426),m,f,d[n+6],17,-1473231341),i,m,d[n+7],22,-45705983),r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+8],7,1770035416),f,r,d[n+9],12,-1958414417),m,f,d[n+10],17,-42063),i,m,d[n+11],22,-1990404162),r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+12],7,1804603682),f,r,d[n+13],12,-40341101),m,f,d[n+14],17,-1502002290),i,m,d[n+15],22,1236535329),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+1],5,-165796510),f,r,d[n+6],9,-1069501632),m,f,d[n+11],14,643717713),i,m,d[n+0],20,-373897302),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+5],5,-701558691),f,r,d[n+10],9,38016083),m,f,d[n+15],14,-660478335),i,m,d[n+4],20,-405537848),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+9],5,568446438),f,r,d[n+14],9,-1019803690),m,f,d[n+3],14,-187363961),i,m,d[n+8],20,1163531501),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+13],5,-1444681467),f,r,d[n+2],9,-51403784),m,f,d[n+7],14,1735328473),i,m,d[n+12],20,-1926607734),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+5],4,-378558),f,r,d[n+8],11,-2022574463),m,f,d[n+11],16,1839030562),i,m,d[n+14],23,-35309556),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+1],4,-1530992060),f,r,d[n+4],11,1272893353),m,f,d[n+7],16,-155497632),i,m,d[n+10],23,-1094730640),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+13],4,681279174),f,r,d[n+0],11,-358537222),m,f,d[n+3],16,-722521979),i,m,d[n+6],23,76029189),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+9],4,-640364487),f,r,d[n+12],11,-421815835),m,f,d[n+15],16,530742520),i,m,d[n+2],23,-995338651),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+0],6,-198630844),f,r,d[n+7],10,1126891415),m,f,d[n+14],15,-1416354905),i,m,d[n+5],21,-57434055),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+12],6,1700485571),f,r,d[n+3],10,-1894986606),m,f,d[n+10],15,-1051523),i,m,d[n+1],21,-2054922799),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+8],6,1873313359),f,r,d[n+15],10,-30611744),m,f,d[n+6],15,-1560198380),i,m,d[n+13],21,1309151649),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+4],6,-145523070),f,r,d[n+11],10,-1120210379),m,f,d[n+2],15,718787259),i,m,d[n+9],21,-343485551),m=safe_add(m,h),f=safe_add(f,t),r=safe_add(r,g),i=safe_add(i,e)}return Array(m,f,r,i)}function md5_cmn(d,_,m,f,r,i){return safe_add(bit_rol(safe_add(safe_add(_,d),safe_add(f,i)),r),m)}function md5_ff(d,_,m,f,r,i,n){return md5_cmn(_&amp;m|~_&amp;f,d,_,r,i,n)}function md5_gg(d,_,m,f,r,i,n){return md5_cmn(_&amp;f|m&amp;~f,d,_,r,i,n)}function md5_hh(d,_,m,f,r,i,n){return md5_cmn(_^m^f,d,_,r,i,n)}function md5_ii(d,_,m,f,r,i,n){return md5_cmn(m^(_|~f),d,_,r,i,n)}function safe_add(d,_){var m=(65535&amp;d)+(65535&amp;_);return(d&gt;&gt;16)+(_&gt;&gt;16)+(m&gt;&gt;16)&lt;&lt;16|65535&amp;m}function bit_rol(d,_){return d&lt;&lt;_|d&gt;&gt;&gt;32-_}\n\nvar value = inputData.email;\n\nvar grav = MD5(value);\n\noutput = {username: inputData.username, email: inputData.email, gravatar: grav};\n</code></pre>\n<p>Oh yes, friend. It's like that.</p><h2 id=\"step-3-create-records-in-our-database-via-the-api\">Step 3: Create Records in Our Database via the API</h2><p>Could we enter records into MySQL via a direct connection? Sure, if you like wasting time creating SSL certs for your lame boring DB connections. That’s 5 minutes that could be spent playing Rocket League.</p><p>Instead, consider the following alternative of passing a JSON object to a relational database and having it turn out just fine. It feels like we’re prancing through a field of freemium software Unicorns- just like in my dreams:</p><figure class=\"kg-card kg-image-card\"><img src=\"http://res-3.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/Screen-Shot-2018-11-27-at-7.59.37-PM_o_o.png\" class=\"kg-image\"><figcaption>Have fun with your .pem files, losers.</figcaption></figure><h2 id=\"step-4-let-there-be-confirmation-emails\">Step 4: Let There be Confirmation Emails</h2><p>All that's left is welcoming our users to our family with a handwritten, generic templated email courtesy of Byepass.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://res-3.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/Screen-Shot-2018-12-13-at-11.02.09-PM_o.png\" class=\"kg-image\"><figcaption>Don’t worry about these publicly visible email addresses btw: they’re all bots.</figcaption></figure><p>In case you're ignoring the documentation completely (understandable), our last request is a POST request to <strong>https://byepass.co/redirect. </strong>In fact, here- just take the docs:</p><hr><p><strong>Endpoint</strong>: <a href=\"https://byepass.co/redirect\">https://byepass.co/redirect</a></p><p><strong>Method</strong>: GET or POST</p><p><strong>Headers: </strong>{\"Content-Type: application/x-www-form-urlencoded\"}<strong> </strong></p><h3 id=\"request-variables-\">Request Variables:</h3><ul><li><strong>identifier</strong> (email address)</li><li><strong>block_proxy</strong> (BOOL 0 for to no restriction, 1 to block verifications from known proxies) (Paid accounts only)</li><li><strong>key</strong> (Byepass app key)</li></ul><hr><h2 id=\"we-ve-finally-made-it\">We've Finally Made It</h2><p>We may never be the spring chickens we once were, but we all experience chills of envy when we watch those reality TV shows featuring Midwestern people with mental illnesses hoard coupons and score the sickest grocery store heists ever to air television legally. That's who we are now: we're the crazy, deal-seeking, thrill-chasing coupon ladies of Silicon Valley. </p><p>All I know is it feels great to not work myself further out of the debt I accrued while attempting to offset the crippling, burnt-out depression bestowed upon us by the technology industry. For this moment, life is fine. Finally.</p>","url":"https://hackersandslackers.com/handling-user-accounts-with-zero-code/","uuid":"004ac673-36dd-47fe-ba74-df134235a200","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5bfda2d3eae98c3b9d4c25d8"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867372e","title":"MySQL, Google Cloud, and a REST API that Generates Itself","slug":"mysql-google-cloud-and-a-rest-api-that-autogenerates","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/10/mysqlagain2@2x.jpg","excerpt":"Deploy a MySQL database that auto-creates endpoints for itself.","custom_excerpt":"Deploy a MySQL database that auto-creates endpoints for itself.","created_at_pretty":"23 October, 2018","published_at_pretty":"23 October, 2018","updated_at_pretty":"02 February, 2019","created_at":"2018-10-23T14:57:12.000-04:00","published_at":"2018-10-23T18:47:28.000-04:00","updated_at":"2019-02-02T05:26:16.000-05:00","meta_title":"MySQL, Google Cloud, and a REST API | Hackers and Slackers","meta_description":"Create a MySQL database that makes its own endpoints for accessing and manipulating data.","og_description":"Create a MySQL database that makes its own endpoints for accessing and manipulating data.","og_image":"https://hackersandslackers.com/content/images/2018/10/mysqlagain2@2x.jpg","og_title":"MySQL, Google Cloud, and a REST API that Generates Itself","twitter_description":"Create a MySQL database that makes its own endpoints for accessing and manipulating data.","twitter_image":"https://hackersandslackers.com/content/images/2018/10/mysqlagain2@2x.jpg","twitter_title":"MySQL, Google Cloud, and a REST API that Generates Itself","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"MySQL","slug":"mysql","description":"Database configuration, building queries, and cloud hosting options for MySQL.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/mysqlrevamp_o.jpg","meta_description":"Database configuration, building queries, and cloud hosting options for MySQL.","meta_title":"Working with MySQL | Hackers and Slackers","visibility":"public"},"tags":[{"name":"MySQL","slug":"mysql","description":"Database configuration, building queries, and cloud hosting options for MySQL.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/mysqlrevamp_o.jpg","meta_description":"Database configuration, building queries, and cloud hosting options for MySQL.","meta_title":"Working with MySQL | Hackers and Slackers","visibility":"public"},{"name":"Google Cloud","slug":"googlecloud","description":"Evaluating Google Cloud Platform’s offerings. Get introduced with tutorials, see our vendor comparisons, and endure biased opinions on GCP as a whole.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/googleseries2.jpg","meta_description":"Evaluating Google Cloud Platform’s offerings. Get introduced with tutorials, see our vendor comparisons, and endure biased opinions on GCP as a whole.","meta_title":"The Rise of Google Cloud | Hackers and Slackers","visibility":"public"},{"name":"DevOps","slug":"devops","description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","feature_image":null,"meta_description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","meta_title":"DevOps: Networking And Server Configuration | Hackers and Slackers","visibility":"public"},{"name":"Architecture","slug":"architecture","description":"Advancements in software architecture, serverless and beyond. Examples include equivalents to Lambda functions, Docker containers, Google Cloud functions,  Kubernetes, Heroku, etc.","feature_image":null,"meta_description":"Advancements in software architecture, serverless and beyond. Examples include equivalents to cloud functions, Docker containers, Kubernetes, Heroku, etc.","meta_title":"Software Architecture | Hackers and Slackers","visibility":"public"},{"name":"Data Engineering","slug":"dataengineering","description":"The systematic collection and transformation of data via the creation of tools and pipelines.","feature_image":null,"meta_description":null,"meta_title":"Data Engineering | Hackers and Slackers","visibility":"public"},{"name":"#Working with MySQL","slug":"working-with-mysql","description":"Learn about MySQL database configuration, the query language, and cloud hosted instances.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/mysql1_o-1.jpg","meta_description":"Learn about MySQL database configuration, the query language, and cloud hosted instances.","meta_title":"Working with MySQL","visibility":"internal"},{"name":"SaaS Products","slug":"saas","description":"Third-party products and services we’ve discovered to be diamonds in the rough. These are products we’ve included in our stack based on price and value add.","feature_image":null,"meta_description":"Third-party products and services we’ve discovered to be diamonds in the rough. These are products we’ve included in our stack based on price and value add.","meta_title":"Our Picks: SaaS Products | Hackers and Slackers","visibility":"public"}],"plaintext":"It wasn’t too long ago that I haphazardly forced us down a journey of exploring\nGoogle Cloud’s cloud SQL service. The focus of this exploration was Google’s\naccompanying REST API for all of its cloud SQL instances. That API turned out to\nbe a relatively disappointing administrative API which did little to extend the\nfeatures you’d expect from the CLI or console.\n\nYou see, I’ve had a dream stuck in my head for a while now. Like most of my\nutopian dreams, this dream is related to data, or more specifically simplifying\nthe manner in which we interact with it. For industry synonymous with AI and\nautomation, many of our very own tools (including ETL tools) involve way too\nmuch manual effort in my opinion. That’s right: I’m talking about the aspiration\nto Slack while we Hack.\n\nThe pitch is this: why do we keep setting up databases, endpoints, and the logic\nto connect them when, 90% of the time, we’re building the same thing over and\nover? Let me guess: there’s a GET endpoint to get records from table X, or a\nPOST endpoint to create users. I know you’ve built this because we all have, but\nwhy do we keep building the same things over and over in isolation? It looks\nlike we might not have to anymore, but first let’s create our database.\n\nCreating a MySQL Instance in GCP \nFull disclosure here: the magical REST API thing is actually independent from\nGoogle Cloud; the service we’ll be using can integrate with any flavor of MySQL\nyou prefer, so go ahead and grab that RDS instance you live so much if you\nreally have to.\n\nFor the rest of us, hit up your GCP console and head into making a new SQL\ninstance. MySQL and Postgres are our only choices here; stick with MySQL.\n\nThere isn’t much to spinning up your instance. Just be sure to create a user and\ndatabase to work from.\n\nOh yeah, and remember to name your instance.Your SQL Firewall and Permissions\nYour instance is set to “public” by default. Oddly, “public” in this case means\n“accessible to everybody on your IP whitelist, which is empty by default,” so\nreally kind of the opposite of public really.\n\nIn fact, if you hypothetically did want to open your instance publicly, Google\nCloud will not allow it. This is good on them, and is actually fairly impressive\nthe depths they go to avoid the IP 0.0.0.0  from ever appearing anywhere in the\ninstance. Go ahead, open the shell and try to add bind address=0.0.0.0 \nyourself, wise guy (another fun fact you’ll learn in the shell: apparently GCP’s\nversion of MySQL is actually a MariaDB instance)?\n\nThe point is, whitelist your IP address. Simply \"Edit\" your instance and add\nyour address to the authorized networks.\n\nAuthorize that bad boy.The Magic API \nNow, we’ve never actually endorsed any SaaS products on Hackers and Slackers, so\nthis next part is going to feel a bit a bit weird. I’m not sure why, as the\nservice is apparently free, thus I’m clearly not getting paid for any of this.\n\nAnyway, the service is called Apisentris [https://apisentris.com/], and the idea\nis that it will build whatever time-consuming monstrosity of a REST API you were\nplanning to build to access your data for you. Via their own words:\n\nSee, I told you.What does this actually mean? It means if you create a table\ncalled articles  in your database, you will immediately have an endpoint to\nfetch said articles, and it would look like \nhttps://apisentris.com/api/v1/articles. Your client ID and credentials would\nobviously need to be provided to indicate that you're, well, you.\n\nGrabbing entire tables at once would be silly, which is why they also\nautogenerate filters based on the contents of your table:\n\nEndpoints accept query parameters to essentially create a query.Oh yeah, and you\ncan also handle user management via this API as well, if you're building an\nactual app:\n\nPretty easy to hook up into a form or whatever.I'll assume you're sold on the\nidea by now. If a free service that handles the hard parts of backend logic for\nfree isn't your cup of tea, clearly you aren't Slacker material.\n\nSetting it all up\nAs we did before with our own IP, we'll need to whitelist Apisentris' IP the\nsame way in GCP console. Their IP is 104.199.181.125.\n\nCreate a table in your database with some data just to test things out. When\nyou're logged in, you'll be able to see all the endpoints available to you and\nthe associated attributes they have:\n\nNot bad.Any way you slice it, the concept of a self-generating API is very cool\nand yet somehow still not the norm. I'm actually shocked that there are so few\npeople in the Data industry who know \"there must be a better way,\" but then\nagain, data science and software engineering are two very different things. For\nmy fellow Data Engineers out there, take this as a gift and a curse: you have\nthe gift of knowing better from your software background, but are cursed with\nwatching the world not quite realize how pointless half the things they do truly\nare.\n\nOh well. We'll be the ones building the robots anyway.","html":"<p>It wasn’t too long ago that I haphazardly forced us down a journey of exploring Google Cloud’s cloud SQL service. The focus of this exploration was Google’s accompanying REST API for all of its cloud SQL instances. That API turned out to be a relatively disappointing administrative API which did little to extend the features you’d expect from the CLI or console.</p><p>You see, I’ve had a dream stuck in my head for a while now. Like most of my utopian dreams, this dream is related to data, or more specifically simplifying the manner in which we interact with it. For industry synonymous with AI and automation, many of our very own tools (including ETL tools) involve way too much manual effort in my opinion. That’s right: I’m talking about the aspiration to Slack while we Hack.</p><p>The pitch is this: why do we keep setting up databases, endpoints, and the logic to connect them when, 90% of the time, we’re building the same thing over and over? Let me guess: there’s a GET endpoint to get records from table X, or a POST endpoint to create users. I know you’ve built this because we all have, but why do we keep building the same things over and over in isolation? It looks like we might not have to anymore, but first let’s create our database.</p><h2 id=\"creating-a-mysql-instance-in-gcp\">Creating a MySQL Instance in GCP </h2><p>Full disclosure here: the magical REST API thing is actually independent from Google Cloud; the service we’ll be using can integrate with any flavor of MySQL you prefer, so go ahead and grab that RDS instance you live so much if you really have to.</p><p>For the rest of us, hit up your GCP console and head into making a new SQL instance. MySQL and Postgres are our only choices here; stick with MySQL.</p><p>There isn’t much to spinning up your instance. Just be sure to create a user and database to work from.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-5.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/Screen-Shot-2018-10-23-at-5.15.18-PM.png\" class=\"kg-image\"><figcaption>Oh yeah, and remember to name your instance.</figcaption></figure><h3 id=\"your-sql-firewall-and-permissions\">Your SQL Firewall and Permissions</h3><p>Your instance is set to “public” by default. Oddly, “public” in this case means “accessible to everybody on your IP whitelist, which is empty by default,” so really kind of the opposite of public really.</p><p>In fact, if you hypothetically did want to open your instance publicly, Google Cloud will not allow it. This is good on them, and is actually fairly impressive the depths they go to avoid the IP <strong>0.0.0.0</strong> from ever appearing anywhere in the instance. Go ahead, open the shell and try to add <code>bind address=0.0.0.0</code> yourself, wise guy (another fun fact you’ll learn in the shell: apparently GCP’s version of MySQL is actually a MariaDB instance)?</p><p>The point is, whitelist your IP address. Simply \"Edit\" your instance and add your address to the authorized networks.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-4.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/Screen-Shot-2018-10-23-at-5.12.23-PM.png\" class=\"kg-image\"><figcaption>Authorize that bad boy.</figcaption></figure><h2 id=\"the-magic-api\">The Magic API </h2><p>Now, we’ve never actually endorsed any SaaS products on Hackers and Slackers, so this next part is going to feel a bit a bit weird. I’m not sure why, as the service is apparently free, thus I’m clearly not getting paid for any of this.</p><p>Anyway, the service is called <strong><a href=\"https://apisentris.com/\">Apisentris</a>, </strong>and the idea is that it will build whatever time-consuming monstrosity of a REST API you were planning to build to access your data for you. Via their own words:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/Screen-Shot-2018-10-23-at-5.19.16-PM.png\" class=\"kg-image\"><figcaption>See, I told you.</figcaption></figure><p>What does this actually mean? It means if you create a table called <em>articles</em> in your database, you will immediately have an endpoint to fetch said articles, and it would look like <strong>https://apisentris.com/api/v1/articles. </strong>Your client ID and credentials would obviously need to be provided to indicate that you're, well, you.</p><p>Grabbing entire tables at once would be silly, which is why they also autogenerate filters based on the contents of your table:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-5.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/Screen-Shot-2018-10-23-at-5.25.13-PM.png\" class=\"kg-image\"><figcaption>Endpoints accept query parameters to essentially create a query.</figcaption></figure><p>Oh yeah, and you can also handle user management via this API as well, if you're building an actual app:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/Screen-Shot-2018-10-23-at-5.27.43-PM.png\" class=\"kg-image\"><figcaption>Pretty easy to hook up into a form or whatever.</figcaption></figure><p>I'll assume you're sold on the idea by now. If a free service that handles the hard parts of backend logic for free isn't your cup of tea, clearly you aren't Slacker material.</p><h2 id=\"setting-it-all-up\">Setting it all up</h2><p>As we did before with our own IP, we'll need to whitelist Apisentris' IP the same way in GCP console. Their IP is <code>104.199.181.125</code>.</p><p>Create a table in your database with some data just to test things out. When you're logged in, you'll be able to see all the endpoints available to you and the associated attributes they have:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/schema.gif\" class=\"kg-image\"><figcaption>Not bad.</figcaption></figure><p>Any way you slice it, the concept of a self-generating API is very cool and yet somehow still not the norm. I'm actually shocked that there are so few people in the Data industry who know \"there must be a better way,\" but then again, data science and software engineering are two very different things. For my fellow Data Engineers out there, take this as a gift and a curse: you have the gift of knowing better from your software background, but are cursed with watching the world not quite realize how pointless half the things they do truly are.</p><p>Oh well. We'll be the ones building the robots anyway.</p>","url":"https://hackersandslackers.com/mysql-google-cloud-and-a-rest-api-that-autogenerates/","uuid":"c45478bb-54da-4563-89bd-ddd356a234d4","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5bcf6f08d7ab443ba8b7a5ab"}}]}},"pageContext":{"slug":"saas","limit":12,"skip":0,"numberOfPages":1,"humanPageNumber":1,"prevPageNumber":null,"nextPageNumber":null,"previousPagePath":null,"nextPagePath":null}}