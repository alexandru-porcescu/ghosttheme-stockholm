{"data":{"ghostPost":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736f0","title":"Lynx Roundup, September 5th","slug":"lynx-roundup-september-5th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx61@2x.jpg","excerpt":"Git tips!  Python tail call recursion!  Nested window functions in SQL!","custom_excerpt":"Git tips!  Python tail call recursion!  Nested window functions in SQL!","created_at_pretty":"05 September, 2018","published_at_pretty":"05 September, 2018","updated_at_pretty":"05 September, 2018","created_at":"2018-09-05T15:23:43.000-04:00","published_at":"2018-09-05T15:30:21.000-04:00","updated_at":"2018-09-05T15:30:21.000-04:00","meta_title":"Git tips!  Python tail call recursion!  Nested window functions in SQL! | Hackers And Slackers","meta_description":"Git tips!  Python tail call recursion!  Nested window functions in SQL!","og_description":"Git tips!  Python tail call recursion!  Nested window functions in SQL!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx61@2x.jpg","og_title":"Lynx Roundup, September 5th","twitter_description":"Git tips!  Python tail call recursion!  Nested window functions in SQL!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx61@2x.jpg","twitter_title":"Lynx Roundup, September 5th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://medium.freecodecamp.org/follow-these-simple-rules-and-youll-become-a-git-and-github-master-e1045057468f\n\n\n\nCurrying in calculus, PDEs, programming, and categories\n[https://www.johndcook.com/blog/2018/08/11/currying/]\n\nIn an effort to keep up my grueling regime of publishing at least one blog post\nper year, I’ve decided to write today about a neat little problem I ran across.\nThe problem is; how do you calculate the cumulative sum of a time series if\nthere are transactions that reset the count to 0?\n\nNaturally, there are ways to engineer around this problem without complex\nqueries doing the heavy lifting (recording the current balance along side your\ntransaction history, for example). However, if you occasionally find yourself\nbeing asked for a number crunch, half with the expectation of your response\nbeing:\n\n\n\n…it’s not a bad idea to keep this query in your back pocket.\n\nA Convoluted Example\nAlice decides to start a bank. Her engineers are clever and they decide that\nthey can save space in their transaction log by just reporting changes in the\nbalance. They keep the current balance in another table and decide if Grace the\nauditor comes around, they’ll just sum up all of the transactions in their log.\nGood job guys.\n\n\n\nBob is an exceptional client with good credit history. Grace takes a quick\nglance at his balance history and decides everything looks fine. As she leafs\nthrough the other records and pauses at Sybil’s balance history. It’s massive.\nThe problem is that Sybil’s been through a number of bankruptcies that should\nhave set her balance to 0. She breaks the news to Alice. You can imagine that\nAlice was not too happy.\n\n\n\nTo fix the problem, the engineers decide to introduce a new transaction that\nresets the balance to 0.\n\nThe Data Set\nIn order to satisfy Grace, we’ve got to come up with a balance history for both\nBob and Sybil using just transactions. Here’s our data set in Postgres SQL.\nWe’ll use text and integer columns along with small numbers to simplify the\nproblem.\n\n\nCREATE TABLE transactions (\n  id integer\n  ,account text\n  ,type text\n  ,amount integer\n);\n\nINSERT INTO transactions\nVALUES\n  (1, 'bob', 'deposit', 5)\n  ,(2, 'bob', 'withdrawal', -2)\n  ,(3, 'bob', 'deposit', 3)\n  ,(4, 'sybil', 'deposit', 5)\n  ,(5, 'sybil', 'withdrawal', -2)\n  ,(6, 'sybil', 'bankrupt', 0)\n  ,(7, 'sybil', 'deposit' , 3)\n  ,(8, 'sybil', 'deposit', 7)\n  ,(9, 'sybil', 'bankrupt', 0)\n  ,(10, 'sybil', 'deposit' , 5)\n;\n\n\nSimple Cumulative Sums\nOur first job is to calculate Bob’s balance history. This section is a review of\nbasic window functions. If you’re used to using them to create cumulative sums,\nfeel free to skip ahead. Here’s what we’re trying to produce:\n\n\n id | account |    type    | amount | sum\n----+---------+------------+--------+-----\n  1 | bob     | deposit    |      5 |   5\n  2 | bob     | withdrawal |     -2 |   3\n  3 | bob     | deposit    |      3 |   6\n\n\nA window function has two parts; the partition and the order. The partition\ndefines which columns are going to be grouped together in the window. The order\ndefines how to sort the rows in the window.\n\nIn the example above, we want to group transactions by their account. We then\nwant to order them by their ID. Now, when we use the Sum function, it will sum\nfrom the first transaction in the partition, to the current row:\n\n\nSELECT\n  id\n  ,account\n  ,type\n  ,amount\n  ,sum(amount) OVER account\nFROM transactions\nWHERE account = 'bob'\nWINDOW account AS (\n  PARTITION BY account\n  ORDER BY id\n);\n\n\nHowever, if we use the same query for Sybil, we run into our next problem.\n\n\n id | account |    type    | amount | sum\n----+---------+------------+--------+-----\n  4 | sybil   | deposit    |      5 |   5\n  5 | sybil   | withdrawal |     -2 |   3\n  6 | sybil   | bankrupt   |      0 |   3\n  7 | sybil   | deposit    |      3 |   6\n  8 | sybil   | deposit    |      7 |  13\n  9 | sybil   | bankrupt   |      0 |  13\n 10 | sybil   | deposit    |      5 |  18\n\n\nCumulative Sums With Resets\nThe trick to calculating Sybil’s balance is using a nested set of window\nfunctions to make the query sensitive to the transaction type. Here’s what we’re\ntrying to achieve:\n\n\n id | account |    type    | amount | sum\n----+---------+------------+--------+-----\n  4 | sybil   | deposit    |      5 |   5\n  5 | sybil   | withdrawal |     -2 |   3\n  6 | sybil   | bankrupt   |      0 |   0\n  7 | sybil   | deposit    |      3 |   3\n  8 | sybil   | deposit    |      7 |  10\n  9 | sybil   | bankrupt   |      0 |   0\n 10 | sybil   | deposit    |      5 |   5\n\n\nOne possible solution is to try and subtract the cumulative sum using a CASE\nstatement:\n\n\nSELECT\n  id\n  ,account\n  ,type\n  ,amount\n  ,CASE\n    WHEN type = 'bankrupt' THEN\n      -1*sum(amount) OVER account\n    ELSE\n      sum(amount) OVER account\n  END AS sum\nFROM transactions\nWHERE account = 'sybil'\nWINDOW account AS (\n  PARTITION BY account\n  ORDER BY id\n);\n\n\nThe trouble with this approach is that the window function does not use the\noutput of the last row to calculate the next row. The only thing we’ve done is\nto alter the values of the bankrupt transactions:\n\n\n id | account |    type    | amount | sum\n----+---------+------------+--------+-----\n  4 | sybil   | deposit    |      5 |   5\n  5 | sybil   | withdrawal |     -2 |   3\n  6 | sybil   | bankrupt   |      0 |  -3\n  7 | sybil   | deposit    |      3 |   6\n  8 | sybil   | deposit    |      7 |  13\n  9 | sybil   | bankrupt   |      0 | -13\n 10 | sybil   | deposit    |      5 |  18\n\n\nNesting window functions solves this problem. We’ll build up the query by first\nidentifying the transactions that reset the count:\n\n\nSELECT\n  id\n  ,account\n  ,type\n  ,amount\n  ,(type = 'bankrupt')::int AS do_reset\nFROM transactions\nWHERE account = 'sybil'\n;\n\n\nRunning that query we get:\n\n\n id | account |    type    | amount | do_reset\n----+---------+------------+--------+----------\n  4 | sybil   | deposit    |      5 |        0\n  5 | sybil   | withdrawal |     -2 |        0\n  6 | sybil   | bankrupt   |      0 |        1\n  7 | sybil   | deposit    |      3 |        0\n  8 | sybil   | deposit    |      7 |        0\n  9 | sybil   | bankrupt   |      0 |        1\n 10 | sybil   | deposit    |      5 |        0\n\n\nCasting boolean values to integers allows us to then perform a cumulative sum\nover do_reset. This sum will allow us to group transactions chronologically, by\ntheir association to a resetting transaction.\n\n\nSELECT\n  id\n  ,account\n  ,type\n  ,amount\n  ,sum((type = 'bankrupt')::int) OVER account AS reset_id\nFROM transactions\nWHERE account = 'sybil'\nWINDOW account AS (\n  PARTITION BY account\n  ORDER BY id\n);\n\n\nRunning that query we get:\n\n\n id | account |    type    | amount | reset_id\n----+---------+------------+--------+----------\n  4 | sybil   | deposit    |      5 |        0\n  5 | sybil   | withdrawal |     -2 |        0\n  6 | sybil   | bankrupt   |      0 |        1\n  7 | sybil   | deposit    |      3 |        1\n  8 | sybil   | deposit    |      7 |        1\n  9 | sybil   | bankrupt   |      0 |        2\n 10 | sybil   | deposit    |      5 |        2\n\n\nFinally, we can nest this query inside another window function, and perform a\ncumulative sum on amount, using the reset_id we’ve just created:\n\n\nSELECT\n  id\n  ,account\n  ,type\n  ,amount\n  ,sum(amount) OVER resets\nFROM (\n  SELECT\n    id\n    ,account\n    ,type\n    ,amount\n    ,sum((type = 'bankrupt')::int) OVER account AS reset_id\n  FROM transactions\n  WINDOW account AS (\n    PARTITION BY account\n    ORDER BY id\n  )\n) t\nWINDOW resets AS (\n  PARTITION BY\n    account\n    ,reset_id\n  ORDER BY id\n);\n\n\nRunning the query we get the values we expect for both Bob and Sybil. Huzzah!\n\n\n id | account |    type    | amount | sum\n----+---------+------------+--------+-----\n  1 | bob     | deposit    |      5 |   5\n  2 | bob     | withdrawal |     -2 |   3\n  3 | bob     | deposit    |      3 |   6\n  4 | sybil   | deposit    |      5 |   5\n  5 | sybil   | withdrawal |     -2 |   3\n  6 | sybil   | bankrupt   |      0 |   0\n  7 | sybil   | deposit    |      3 |   3\n  8 | sybil   | deposit    |      7 |  10\n  9 | sybil   | bankrupt   |      0 |   0\n 10 | sybil   | deposit    |      5 |   5\n\n\nConclusion\nWindow functions are a really good solution to processing time series with\nchronologically related data. This post scratches the surface of what’s\npossible.\n\nSo, the next time your boss asks you to process some time series data, consider\ngiving window functions a try.\n\n\n\n\n\nhttps://github.com/ac1235/python-tailrec\n\n\n\nhttps://github.com/Avik-Jain/100-Days-Of-ML-Code/blob/master/README.md\n\n\n\nWhat A Mathematical Formula Can Teach Us About Coincidence\n[http://blogs.discovermagazine.com/crux/2018/08/10/kolmogorov-pattern-complexity-pattern-meaning-random/]\n\nhttp://jkk.name/neural-tagger-tutorial/","html":"<p></p><p><a href=\"https://medium.freecodecamp.org/follow-these-simple-rules-and-youll-become-a-git-and-github-master-e1045057468f\">https://medium.freecodecamp.org/follow-these-simple-rules-and-youll-become-a-git-and-github-master-e1045057468f</a></p><p></p><figure class=\"kg-card kg-embed-card\"><blockquote class=\"wp-embedded-content\"><a href=\"https://www.johndcook.com/blog/2018/08/11/currying/\">Currying in calculus, PDEs, programming, and categories</a></blockquote>\n<script type=\"text/javascript\">\n<!--//--><![CDATA[//><!--\n\t\t!function(a,b){\"use strict\";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf(\"MSIE 10\"),h=!!navigator.userAgent.match(/Trident.*rv:11\\./),i=b.querySelectorAll(\"iframe.wp-embedded-content\");for(c=0;c<i.length;c++){if(d=i[c],!d.getAttribute(\"data-secret\"))f=Math.random().toString(36).substr(2,10),d.src+=\"#?secret=\"+f,d.setAttribute(\"data-secret\",f);if(g||h)a=d.cloneNode(!0),a.removeAttribute(\"security\"),d.parentNode.replaceChild(a,d)}}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret=\"'+d.secret+'\"]'),k=b.querySelectorAll('blockquote[data-secret=\"'+d.secret+'\"]');for(e=0;e<k.length;e++)k[e].style.display=\"none\";for(e=0;e<j.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.removeAttribute(\"style\"),\"height\"===d.message){if(g=parseInt(d.value,10),g>1e3)g=1e3;else if(~~g<200)g=200;f.height=g}if(\"link\"===d.message)if(h=b.createElement(\"a\"),i=b.createElement(\"a\"),h.href=f.getAttribute(\"src\"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener(\"message\",a.wp.receiveEmbedMessage,!1),b.addEventListener(\"DOMContentLoaded\",c,!1),a.addEventListener(\"load\",c,!1)}(window,document);\n//--><!]]>\n</script><iframe sandbox=\"allow-scripts\" security=\"restricted\" src=\"https://www.johndcook.com/blog/2018/08/11/currying/embed/\" width=\"600\" height=\"338\" title=\"&#8220;Currying in calculus, PDEs, programming, and categories&#8221; &#8212; John D. Cook\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" class=\"wp-embedded-content\"></iframe></figure><p></p><figure class=\"kg-card kg-embed-card\"><p>In an effort to keep up my grueling regime of publishing at least one blog post per year, I&#8217;ve decided to write today about a neat little problem I ran across. The problem is; how do you calculate the cumulative sum of a time series if there are transactions that reset the count to 0?</p>\n<p>Naturally, there are ways to engineer around this problem without complex queries doing the heavy lifting (recording the current balance along side your transaction history, for example). However, if you occasionally find yourself being asked for a number crunch, half with the expectation of your response being:</p>\n<p><img data-attachment-id=\"968\" data-permalink=\"https://llvllatrix.wordpress.com/2018/08/06/sql-nested-window-functions-and-time-series/leeroy/\" data-orig-file=\"https://llvllatrix.files.wordpress.com/2018/08/leeroy.jpeg?w=1050&#038;h=700\" data-orig-size=\"1050,700\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"leeroy\" data-image-description=\"\" data-medium-file=\"https://llvllatrix.files.wordpress.com/2018/08/leeroy.jpeg?w=1050&#038;h=700?w=300\" data-large-file=\"https://llvllatrix.files.wordpress.com/2018/08/leeroy.jpeg?w=1050&#038;h=700?w=1024\" class=\" size-full wp-image-968 aligncenter\" src=\"https://llvllatrix.files.wordpress.com/2018/08/leeroy.jpeg?w=1050&#038;h=700\" alt=\"leeroy\" width=\"1050\" height=\"700\" srcset=\"https://llvllatrix.files.wordpress.com/2018/08/leeroy.jpeg 1050w, https://llvllatrix.files.wordpress.com/2018/08/leeroy.jpeg?w=150&amp;h=100 150w, https://llvllatrix.files.wordpress.com/2018/08/leeroy.jpeg?w=300&amp;h=200 300w, https://llvllatrix.files.wordpress.com/2018/08/leeroy.jpeg?w=768&amp;h=512 768w, https://llvllatrix.files.wordpress.com/2018/08/leeroy.jpeg?w=1024&amp;h=683 1024w\" sizes=\"(max-width: 1050px) 100vw, 1050px\"></p>\n<p>&#8230;it&#8217;s not a bad idea to keep this query in your back pocket.</p>\n<h1>A Convoluted Example</h1>\n<p>Alice decides to start a bank. Her engineers are clever and they decide that they can save space in their transaction log by just reporting changes in the balance. They keep the current balance in another table and decide if Grace the auditor comes around, they&#8217;ll just sum up all of the transactions in their log. Good job guys.</p>\n<p><img data-attachment-id=\"969\" data-permalink=\"https://llvllatrix.wordpress.com/2018/08/06/sql-nested-window-functions-and-time-series/dilbert_and_wally/\" data-orig-file=\"https://llvllatrix.files.wordpress.com/2018/08/dilbert_and_wally1.jpeg?w=580&#038;h=301\" data-orig-size=\"580,301\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;1533580224&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"dilbert_and_wally\" data-image-description=\"\" data-medium-file=\"https://llvllatrix.files.wordpress.com/2018/08/dilbert_and_wally1.jpeg?w=580&#038;h=301?w=300\" data-large-file=\"https://llvllatrix.files.wordpress.com/2018/08/dilbert_and_wally1.jpeg?w=580&#038;h=301?w=580\" class=\" size-full wp-image-969 aligncenter\" src=\"https://llvllatrix.files.wordpress.com/2018/08/dilbert_and_wally1.jpeg?w=580&#038;h=301\" alt=\"dilbert_and_wally\" width=\"580\" height=\"301\" srcset=\"https://llvllatrix.files.wordpress.com/2018/08/dilbert_and_wally1.jpeg 580w, https://llvllatrix.files.wordpress.com/2018/08/dilbert_and_wally1.jpeg?w=150&amp;h=78 150w, https://llvllatrix.files.wordpress.com/2018/08/dilbert_and_wally1.jpeg?w=300&amp;h=156 300w\" sizes=\"(max-width: 580px) 100vw, 580px\"></p>\n<p>Bob is an exceptional client with good credit history. Grace takes a quick glance at his balance history and decides everything looks fine. As she leafs through the other records and pauses at Sybil&#8217;s balance history. It&#8217;s massive. The problem is that Sybil&#8217;s been through a number of bankruptcies that should have set her balance to 0. She breaks the news to Alice. You can imagine that Alice was not too happy.</p>\n<p><img data-attachment-id=\"965\" data-permalink=\"https://llvllatrix.wordpress.com/2018/08/06/sql-nested-window-functions-and-time-series/alice/\" data-orig-file=\"https://llvllatrix.files.wordpress.com/2018/08/alice.jpeg?w=580&#038;h=301\" data-orig-size=\"580,301\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;1&quot;}\" data-image-title=\"alice\" data-image-description=\"\" data-medium-file=\"https://llvllatrix.files.wordpress.com/2018/08/alice.jpeg?w=580&#038;h=301?w=300\" data-large-file=\"https://llvllatrix.files.wordpress.com/2018/08/alice.jpeg?w=580&#038;h=301?w=580\" class=\" size-full wp-image-965 aligncenter\" src=\"https://llvllatrix.files.wordpress.com/2018/08/alice.jpeg?w=580&#038;h=301\" alt=\"alice\" width=\"580\" height=\"301\" srcset=\"https://llvllatrix.files.wordpress.com/2018/08/alice.jpeg 580w, https://llvllatrix.files.wordpress.com/2018/08/alice.jpeg?w=150&amp;h=78 150w, https://llvllatrix.files.wordpress.com/2018/08/alice.jpeg?w=300&amp;h=156 300w\" sizes=\"(max-width: 580px) 100vw, 580px\"></p>\n<p>To fix the problem, the engineers decide to introduce a new transaction that resets the balance to 0.</p>\n<h1>The Data Set</h1>\n<p>In order to satisfy Grace, we&#8217;ve got to come up with a balance history for both Bob and Sybil using just transactions. Here&#8217;s our data set in Postgres SQL. We&#8217;ll use text and integer columns along with small numbers to simplify the problem.</p>\n<pre class=\"brush: sql; title: ; notranslate\" title=\"\">\nCREATE TABLE transactions (\n  id integer\n  ,account text\n  ,type text\n  ,amount integer\n);\n\nINSERT INTO transactions\nVALUES\n  (1, 'bob', 'deposit', 5)\n  ,(2, 'bob', 'withdrawal', -2)\n  ,(3, 'bob', 'deposit', 3)\n  ,(4, 'sybil', 'deposit', 5)\n  ,(5, 'sybil', 'withdrawal', -2)\n  ,(6, 'sybil', 'bankrupt', 0)\n  ,(7, 'sybil', 'deposit' , 3)\n  ,(8, 'sybil', 'deposit', 7)\n  ,(9, 'sybil', 'bankrupt', 0)\n  ,(10, 'sybil', 'deposit' , 5)\n;\n</pre>\n<h1>Simple Cumulative Sums</h1>\n<p>Our first job is to calculate Bob&#8217;s balance history. This section is a review of basic window functions. If you&#8217;re used to using them to create cumulative sums, feel free to skip ahead. Here&#8217;s what we&#8217;re trying to produce:</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n&nbsp;id | account |    type    | amount | sum\n----+---------+------------+--------+-----\n  1 | bob     | deposit    |      5 |   5\n  2 | bob     | withdrawal |     -2 |   3\n  3 | bob     | deposit    |      3 |   6\n</pre>\n<p>A window function has two parts; the partition and the order. The partition defines which columns are going to be grouped together in the window. The order defines how to sort the rows in the window.</p>\n<p>In the example above, we want to group transactions by their account. We then want to order them by their ID. Now, when we use the Sum function, it will sum from the first transaction in the partition, to the current row:</p>\n<pre class=\"brush: sql; title: ; notranslate\" title=\"\">\nSELECT\n  id\n  ,account\n  ,type\n  ,amount\n  ,sum(amount) OVER account\nFROM transactions\nWHERE account = 'bob'\nWINDOW account AS (\n  PARTITION BY account\n  ORDER BY id\n);\n</pre>\n<p>However, if we use the same query for Sybil, we run into our next problem.</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n&nbsp;id | account |    type    | amount | sum\n----+---------+------------+--------+-----\n  4 | sybil   | deposit    |      5 |   5\n  5 | sybil   | withdrawal |     -2 |   3\n  6 | sybil   | bankrupt   |      0 |   3\n  7 | sybil   | deposit    |      3 |   6\n  8 | sybil   | deposit    |      7 |  13\n  9 | sybil   | bankrupt   |      0 |  13\n 10 | sybil   | deposit    |      5 |  18\n</pre>\n<h1>Cumulative Sums With Resets</h1>\n<p>The trick to calculating Sybil&#8217;s balance is using a nested set of window functions to make the query sensitive to the transaction type. Here&#8217;s what we&#8217;re trying to achieve:</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n&nbsp;id | account |    type    | amount | sum\n----+---------+------------+--------+-----\n  4 | sybil   | deposit    |      5 |   5\n  5 | sybil   | withdrawal |     -2 |   3\n  6 | sybil   | bankrupt   |      0 |   0\n  7 | sybil   | deposit    |      3 |   3\n  8 | sybil   | deposit    |      7 |  10\n  9 | sybil   | bankrupt   |      0 |   0\n 10 | sybil   | deposit    |      5 |   5\n</pre>\n<p>One possible solution is to try and subtract the cumulative sum using a CASE statement:</p>\n<pre class=\"brush: sql; title: ; notranslate\" title=\"\">\nSELECT\n  id\n  ,account\n  ,type\n  ,amount\n  ,CASE\n    WHEN type = 'bankrupt' THEN\n      -1*sum(amount) OVER account\n    ELSE\n      sum(amount) OVER account\n  END AS sum\nFROM transactions\nWHERE account = 'sybil'\nWINDOW account AS (\n  PARTITION BY account\n  ORDER BY id\n);\n</pre>\n<p>The trouble with this approach is that the window function does not use the output of the last row to calculate the next row. The only thing we&#8217;ve done is to alter the values of the bankrupt transactions:</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n&nbsp;id | account |    type    | amount | sum\n----+---------+------------+--------+-----\n  4 | sybil   | deposit    |      5 |   5\n  5 | sybil   | withdrawal |     -2 |   3\n  6 | sybil   | bankrupt   |      0 |  -3\n  7 | sybil   | deposit    |      3 |   6\n  8 | sybil   | deposit    |      7 |  13\n  9 | sybil   | bankrupt   |      0 | -13\n 10 | sybil   | deposit    |      5 |  18\n</pre>\n<p>Nesting window functions solves this problem. We&#8217;ll build up the query by first identifying the transactions that reset the count:</p>\n<pre class=\"brush: sql; title: ; notranslate\" title=\"\">\nSELECT\n  id\n  ,account\n  ,type\n  ,amount\n  ,(type = 'bankrupt')::int AS do_reset\nFROM transactions\nWHERE account = 'sybil'\n;\n</pre>\n<p>Running that query we get:</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n&nbsp;id | account |    type    | amount | do_reset\n----+---------+------------+--------+----------\n  4 | sybil   | deposit    |      5 |        0\n  5 | sybil   | withdrawal |     -2 |        0\n  6 | sybil   | bankrupt   |      0 |        1\n  7 | sybil   | deposit    |      3 |        0\n  8 | sybil   | deposit    |      7 |        0\n  9 | sybil   | bankrupt   |      0 |        1\n 10 | sybil   | deposit    |      5 |        0\n</pre>\n<p>Casting boolean values to integers allows us to then perform a cumulative sum over do_reset. This sum will allow us to group transactions chronologically, by their association to a resetting transaction.</p>\n<pre class=\"brush: sql; title: ; notranslate\" title=\"\">\nSELECT\n  id\n  ,account\n  ,type\n  ,amount\n  ,sum((type = 'bankrupt')::int) OVER account AS reset_id\nFROM transactions\nWHERE account = 'sybil'\nWINDOW account AS (\n  PARTITION BY account\n  ORDER BY id\n);\n</pre>\n<p>Running that query we get:</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n&nbsp;id | account |    type    | amount | reset_id\n----+---------+------------+--------+----------\n  4 | sybil   | deposit    |      5 |        0\n  5 | sybil   | withdrawal |     -2 |        0\n  6 | sybil   | bankrupt   |      0 |        1\n  7 | sybil   | deposit    |      3 |        1\n  8 | sybil   | deposit    |      7 |        1\n  9 | sybil   | bankrupt   |      0 |        2\n 10 | sybil   | deposit    |      5 |        2\n</pre>\n<p>Finally, we can nest this query inside another window function, and perform a cumulative sum on amount, using the reset_id we&#8217;ve just created:</p>\n<pre class=\"brush: sql; title: ; notranslate\" title=\"\">\nSELECT\n  id\n  ,account\n  ,type\n  ,amount\n  ,sum(amount) OVER resets\nFROM (\n  SELECT\n    id\n    ,account\n    ,type\n    ,amount\n    ,sum((type = 'bankrupt')::int) OVER account AS reset_id\n  FROM transactions\n  WINDOW account AS (\n    PARTITION BY account\n    ORDER BY id\n  )\n) t\nWINDOW resets AS (\n  PARTITION BY\n    account\n    ,reset_id\n  ORDER BY id\n);\n</pre>\n<p>Running the query we get the values we expect for both Bob and Sybil. Huzzah!</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n&nbsp;id | account |    type    | amount | sum\n----+---------+------------+--------+-----\n  1 | bob     | deposit    |      5 |   5\n  2 | bob     | withdrawal |     -2 |   3\n  3 | bob     | deposit    |      3 |   6\n  4 | sybil   | deposit    |      5 |   5\n  5 | sybil   | withdrawal |     -2 |   3\n  6 | sybil   | bankrupt   |      0 |   0\n  7 | sybil   | deposit    |      3 |   3\n  8 | sybil   | deposit    |      7 |  10\n  9 | sybil   | bankrupt   |      0 |   0\n 10 | sybil   | deposit    |      5 |   5\n</pre>\n<h1>Conclusion</h1>\n<p>Window functions are a really good solution to processing time series with chronologically related data. This post scratches the surface of what&#8217;s possible.</p>\n<p>So, the next time your boss asks you to process some time series data, consider giving window functions a try.</p>\n<p><img data-attachment-id=\"967\" data-permalink=\"https://llvllatrix.wordpress.com/2018/08/06/sql-nested-window-functions-and-time-series/drake/\" data-orig-file=\"https://llvllatrix.files.wordpress.com/2018/08/drake.jpeg?w=500&#038;h=500\" data-orig-size=\"500,500\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"drake\" data-image-description=\"\" data-medium-file=\"https://llvllatrix.files.wordpress.com/2018/08/drake.jpeg?w=500&#038;h=500?w=300\" data-large-file=\"https://llvllatrix.files.wordpress.com/2018/08/drake.jpeg?w=500&#038;h=500?w=500\" class=\" size-full wp-image-967 aligncenter\" src=\"https://llvllatrix.files.wordpress.com/2018/08/drake.jpeg?w=500&#038;h=500\" alt=\"drake\" width=\"500\" height=\"500\" srcset=\"https://llvllatrix.files.wordpress.com/2018/08/drake.jpeg 500w, https://llvllatrix.files.wordpress.com/2018/08/drake.jpeg?w=150&amp;h=150 150w, https://llvllatrix.files.wordpress.com/2018/08/drake.jpeg?w=300&amp;h=300 300w\" sizes=\"(max-width: 500px) 100vw, 500px\"></p>\n</figure><p></p><p><a href=\"https://github.com/ac1235/python-tailrec\">https://github.com/ac1235/python-tailrec</a></p><p></p><p><a href=\"https://github.com/Avik-Jain/100-Days-Of-ML-Code/blob/master/README.md\">https://github.com/Avik-Jain/100-Days-Of-ML-Code/blob/master/README.md</a></p><p></p><figure class=\"kg-card kg-embed-card\"><blockquote class=\"wp-embedded-content\"><a href=\"http://blogs.discovermagazine.com/crux/2018/08/10/kolmogorov-pattern-complexity-pattern-meaning-random/\">What A Mathematical Formula Can Teach Us About Coincidence</a></blockquote>\n<script type=\"text/javascript\">\n<!--//--><![CDATA[//><!--\n\t\t!function(a,b){\"use strict\";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf(\"MSIE 10\"),h=!!navigator.userAgent.match(/Trident.*rv:11\\./),i=b.querySelectorAll(\"iframe.wp-embedded-content\");for(c=0;c<i.length;c++)if(d=i[c],!d.getAttribute(\"data-secret\")){if(f=Math.random().toString(36).substr(2,10),d.src+=\"#?secret=\"+f,d.setAttribute(\"data-secret\",f),g||h)a=d.cloneNode(!0),a.removeAttribute(\"security\"),d.parentNode.replaceChild(a,d)}else;}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret=\"'+d.secret+'\"]'),k=b.querySelectorAll('blockquote[data-secret=\"'+d.secret+'\"]');for(e=0;e<k.length;e++)k[e].style.display=\"none\";for(e=0;e<j.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.removeAttribute(\"style\"),\"height\"===d.message){if(g=parseInt(d.value,10),g>1e3)g=1e3;else if(200>~~g)g=200;f.height=g}if(\"link\"===d.message)if(h=b.createElement(\"a\"),i=b.createElement(\"a\"),h.href=f.getAttribute(\"src\"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener(\"message\",a.wp.receiveEmbedMessage,!1),b.addEventListener(\"DOMContentLoaded\",c,!1),a.addEventListener(\"load\",c,!1)}(window,document);\n//--><!]]>\n</script><iframe sandbox=\"allow-scripts\" security=\"restricted\" src=\"http://blogs.discovermagazine.com/crux/2018/08/10/kolmogorov-pattern-complexity-pattern-meaning-random/embed/\" width=\"600\" height=\"338\" title=\"Embedded WordPress Post\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" class=\"wp-embedded-content\"></iframe></figure><p></p><p><a href=\"http://jkk.name/neural-tagger-tutorial/\">http://jkk.name/neural-tagger-tutorial/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-september-5th/","uuid":"7fcd6c64-ba7d-4c32-a05f-58286dfaebe4","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b902d3f1fc1fc7d92b5c4d8"}},"pageContext":{"slug":"lynx-roundup-september-5th"}}