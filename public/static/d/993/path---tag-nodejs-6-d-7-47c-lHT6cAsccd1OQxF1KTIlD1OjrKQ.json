{"data":{"ghostTag":{"slug":"nodejs","name":"NodeJS","visibility":"public","feature_image":null,"description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages."},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5c838ee05af763016e85085b","title":"Building a Client For Your GraphQL API","slug":"interacting-with-your-graphql-api","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/graphqlclient.jpg","excerpt":"Now that we have an understanding of GraphQL queries and API setup, it's time to get that data.","custom_excerpt":"Now that we have an understanding of GraphQL queries and API setup, it's time to get that data.","created_at_pretty":"09 March, 2019","published_at_pretty":"09 March, 2019","updated_at_pretty":"14 April, 2019","created_at":"2019-03-09T05:01:04.000-05:00","published_at":"2019-03-09T15:43:14.000-05:00","updated_at":"2019-04-14T05:36:35.000-04:00","meta_title":"Building a Client For Your GraphQL API | Hackers and Slackers","meta_description":"Now that we have an understanding of GraphQL queries and API setup, it's time to get that data.","og_description":"Now that we have an understanding of GraphQL queries and API setup, it's time to get that data.","og_image":"https://hackersandslackers.com/content/images/2019/03/graphqlclient.jpg","og_title":"Building a Client For Your GraphQL API","twitter_description":"Now that we have an understanding of GraphQL queries and API setup, it's time to get that data.","twitter_image":"https://hackersandslackers.com/content/images/2019/03/graphqlclient.jpg","twitter_title":"Building a Client For Your GraphQL API","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"GraphQL","slug":"graphql","description":"Ditch REST endpoints and build APIs that make sense with your workflow. Get started with Prisma or Apollo toolkits, and join the GraphQL bandwagon.","feature_image":null,"meta_description":"Ditch REST endpoints and build APIs that make sense with your workflow. Get started with Prisma or Apollo toolkits, and join the GraphQL bandwagon.","meta_title":"Build a GraphQL API | Hackers and Slackers","visibility":"public"},"tags":[{"name":"GraphQL","slug":"graphql","description":"Ditch REST endpoints and build APIs that make sense with your workflow. Get started with Prisma or Apollo toolkits, and join the GraphQL bandwagon.","feature_image":null,"meta_description":"Ditch REST endpoints and build APIs that make sense with your workflow. Get started with Prisma or Apollo toolkits, and join the GraphQL bandwagon.","meta_title":"Build a GraphQL API | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"},{"name":"Data Engineering","slug":"dataengineering","description":"The systematic collection and transformation of data via the creation of tools and pipelines.","feature_image":null,"meta_description":null,"meta_title":"Data Engineering | Hackers and Slackers","visibility":"public"},{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},{"name":"JavaScript","slug":"javascript","description":"JavaScript covering both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","feature_image":null,"meta_description":"JavaScript topics, both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","meta_title":"Javascript Tutorials | Hackers and Slackers","visibility":"public"},{"name":"#GraphQL Hype","slug":"graphql-hype","description":"Learn GraphQL syntax and see the reasons why the future of APIs is here to stay. We walk through everything from server/client setup to intricate tricks.","feature_image":"https://hackersandslackers.com/content/images/2019/03/graphqlseries.jpg","meta_description":"Learn GraphQL syntax and see the reasons why the future of APIs is here to stay. We walk through everything from server/client setup to intricate tricks.","meta_title":"GraphQL Hype","visibility":"internal"}],"plaintext":"If you had the pleasure of joining us last time, we had just completed a crash\ncourse in structuring GraphQL Queries\n[https://hackersandslackers.com/writing-your-first-graphql-queries/]. As much we\nall love studying abstract queries within the confines of a playground\nenvironment, the only real way to learn anything to overzealously attempt to\nbuild something way out of our skill level. Thus, we're going to shift gears and\nactually make something  with all the dry technical knowledge we've accumulated\nso far. Hooray!\n\nData Gone Wild: Exposing Your GraphQL Endpoint\nIf you're following along with Prisma as your GraphQL service, the endpoint for\nyour API defaults to [your_ip_address]:4466. What's more, you've probably\nnoticed it is publicly accessible. THIS IS VERY BAD.  Your server has full\nread/write access to whichever database you configured with it... if anybody\nfinds your endpoint hanging out in a Github commit somewhere, you've just lost\nyour database and everything in it. You're pretty much Equifax, and you should\nfeel bad.\n\nPrisma has a straightforward solution. While SSHed into\nwherever-you-set-up-your-server, check out the prisma.yaml  file which was\ngenerated as a result of when we first started getting set up. You know, this\ndirectory:\n\nmy-prisma\n├── datamodel.prisma\n├── docker-compose.yml\n├── generated\n│   └── prisma-client\n│       ├── index.ts\n│       └── prisma-schema.ts\n└── prisma.yml\n\n\nprisma.yaml  seems inglorious, but that's because it's hiding a secret; or\nshould I say, it's not  hiding a secret! Hah!... (you know, like, credentials).\nAnyway. \n\nIn order to enable authorization on our endpoint, we need to add a secret to our\n prisma.yaml  file. The secret can be anything you like; this is simply a string\nwhich will be used to generate a token. Add a line which defines secret  like\nthis:\n\nendpoint: http://localhost:4466\ndatamodel: datamodel.prisma\nsecret: HIIHGUTFTUY$VK$G$YI&TUYCUY$DT$\n\ngenerate:\n  - generator: typescript-client\n    output: ./generated/prisma-client/\n\n\nWith your secret stashed away safely, the Prisma CLI can now use this secret to\ncreate the authentication token. This will be the value we pass in the headers\nof our requests to actually interact with our Prisma server remotely.\n\nType $ prisma token  in your project directory to get the work of art:\n\n$ prisma token\neyJhbGciOiJIUzI1NiIsInUYGFUJGSFKHFGSJFKSFJKSFGJdfSwiaWF0IjoxNTUyMTYwMDQ5LCJleHAiOjE1NTI3NjQ4NDl9.xrubUg_dRc93bqqR4f6jGt-KvQRS2Xq6lRi0a0uw-C0\n\n\nNice; believe it or not, that was the \"hard\" part.\n\nEXTRA CREDIT: Assign a DNS Record and Apply a Security Certificate\nIf really want to, you could already query against your insecure IP address and\nstart receiving some information. That said, making HTTP  requests as such from \nHTTPS  origins will fail. Not only that, but you kind of look shitty for not\neven bothering to name your API, much less apply a free SSL certificate. For the\neasiest possible way to do this, see our post on using Caddy as an HTTP server\n[https://hackersandslackers.com/serve-docker-containers-with-custom-dns-and-ssl/]\n.\n\nBuilding a Javascript Client to Consume Our API\nWith our API nice and secure, we can start hitting this baby from wherever we\nwant... as long as it's a Node app. We'll start by requiring two packages:\n\nconst { GraphQLClient } = require('graphql-request')\nconst { dotenv } = require('dotenv').config()\n\n\nGraphQLClient  is the magic behind our client- it's everything. It also happens\nto be very similar to existing npm  libraries for making requests, such as \nnode-fetch [https://hackersandslackers.com/making-api-requests-with-nodejs/].\n\nWe'll also leverage the dotenv  library to make sure our API endpoint  and \nBearer token  stay out of source code. Try not to be Equifax whenever possible. \ndotenv  allows us to load sensitive values from a .env  file. Just in case you\nneed a refresher, that file should look like this:\n\nNODE_ENV=Production\nENDPOINT=https://yourapiendpoint.com\nAUTH=Bearer eyJhbGciOBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHGUYFIERIBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHZl-UGnMrOk3w\n\nInitialize The GraphQL Client\nI like to set up a one-time client for our API that we can go back and reuse if\nneed be. After pulling the API endpoint and token from our .env  file, setting\nup the client is easy:\n\nconst { GraphQLClient } = require('graphql-request')\nconst { dotenv } = require('dotenv').config()\n\nconst endpoint = process.env.ENDPOINT;\nconst token = process.env.AUTH;\n\n// Initialize GraphQL Client\nconst client = new GraphQLClient(endpoint, {\n  headers: {\n    Authorization: token\n  }\n});\n\n\nEMERGENCY MEETING: EVERYBODY HUDDLE UP\nOh I'm sorry, were you focusing on development? Unfortunately for you, I spent 8\nyears as a product manager, and I love  stopping everything suddenly to call\nemergency meetings.\n\nReal talk though, let's think back to the JIRA Kanban board example we've been\nusing for the last two posts. If you recall, we're going to write a query that\npopulates a 4-column Kanban board. The board represents a project (in this case,\n Hackers and Slackers) and each column represents a status  of ticket, like\nthis:\n\nconst statuses = ['Backlog', 'To Do', 'In Progress', 'Done'];\n\n\nWe've previously established that GraphQL queries are friendly to drop-in\nvariables. Let's use this to build some logic into our client, as opposed to\nhardcoding a massive query, which is really just the same 4 queries stitched\ntogether. Here's what a query to populate a single JIRA column looks like:\n\n// Structured query\nconst query = `\n    query JiraIssuesByStatus($project: String, $status: String) {\n         jiraIssues(where: {project: $project, status: $status}, \n         orderBy: timestamp_DESC, \n         first: 6) {\n            key\n            summary\n            epic\n            status\n            project\n            priority\n            issuetype\n            timestamp\n            }\n         }\n       `\n\nWe're passing both the project  and the issue status  as variables to our query.\nWe can make things a bit dynamic here by looping through our statuses and\nexecuting this query four times: each time resulting in a callback filling the\nappropriate columns with JIRA issues.\n\nThis approach is certainly less clunky and more dynamic than a hardcoded query.\nThat said, this still  isn't the best solution. Remember: the strength of\nGraphQL is the ability to get obscene amounts of data across complex\nrelationships in a single call. The best approach here would probably be to\nbuild the query string itself dynamically using fragments,  which we'll review\nin the next post.Game On: Our Client in Action\nconst { GraphQLClient } = require('graphql-request')\nconst { dotenv } = require('dotenv').config()\n\nconst endpoint = process.env.ENDPOINT;\nconst token = process.env.AUTH;\n\n// Initialize GraphQL Client\nconst client = new GraphQLClient(endpoint, {\n  headers: {\n    Authorization: token\n  }\n});\n\n// Structured query\nconst query = `\n   query JiraIssuesByStatus($project: String, $status: String) {\n      jiraIssues(where: {project: $project, status: $status}, orderBy: timestamp_DESC, first: 6) {\n         key\n         summary\n         epic\n         status\n         project\n         priority\n         issuetype\n         timestamp\n        }\n      }\n    `;\n\n// All Possible Issue Statuses\nconst statuses = ['Backlog', 'To Do', 'In Progress', 'Done'];\n\n// Execute a query per issue status\nfor(var i = 0; i < statuses.length; i++){\n  var variables = {\n    project: \"Hackers and Slackers\",\n    status: statuses[i]\n  }\n\n  client.request(query, variables).then((data) => {\n    console.log(data)\n  }).catch(err => {\n    console.log(err.response.errors) // GraphQL response errors\n    console.log(err.response.data) // Response data if available\n  });\n}\n\n\nWorks like a charm. We only had one endpoint, only had to set one header, and\ndidn't spend any time reading through hundreds of pages of documentation to\nfigure out which combination of REST API endpoint, parameters, and methods\nactually get us what we want. It's almost as if we're writing SQL now, except...\nit looks a lot more like... NoSQL. Thanks for the inspiration, MongoDB! Hope\nthat whole selling-open-source-software  thing works out.\n\nOh, and of course, here were the results of my query:\n\n{ jiraIssues:\n   [ { priority: 'Medium',\n       timestamp: 1550194791,\n       project: 'Hackers and Slackers',\n       key: 'HACK-778',\n       epic: 'Code snippets',\n       status: 'Backlog',\n       issuetype: 'Task',\n       summary: 'HLJS: set indentation level' },\n     { priority: 'Medium',\n       timestamp: 1550194782,\n\n       project: 'Hackers and Slackers',\n       key: 'HACK-555',\n       epic: 'Optimization',\n       status: 'Backlog',\n       issuetype: 'Task',\n       summary: 'Minify Babel' },\n     { priority: 'Medium',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-785',\n       epic: 'New Post',\n       status: 'Backlog',\n       issuetype: 'Task',\n       summary: 'Unix commands for data' },\n     { priority: 'Medium',\n       timestamp: 1550016000,\n       project: 'Hackers and Slackers',\n       key: 'HACK-251',\n       epic: 'New Post',\n       status: 'Backlog',\n       issuetype: 'Content',\n       summary: 'Using Ghost\\'s content filtering' },\n     { priority: 'Medium',\n       timestamp: 1550016000,\n       project: 'Hackers and Slackers',\n       key: 'HACK-302',\n       epic: 'Widgets',\n       status: 'Backlog',\n       issuetype: 'Integration',\n       summary: 'Discord channel signups ' },\n     { priority: 'Low',\n       timestamp: 1550016000,\n       project: 'Hackers and Slackers',\n       key: 'HACK-336',\n       epic: 'New Post',\n       status: 'Backlog',\n       issuetype: 'Content',\n       summary: 'Linux: Configuring your server to send SMTP emails' } ] }\n{ jiraIssues:\n   [ { priority: 'Medium',\n       timestamp: 1550224412,\n       project: 'Hackers and Slackers',\n       key: 'HACK-769',\n       epic: 'Projects Page',\n       status: 'Done',\n       issuetype: 'Bug',\n       summary: 'Fix projects dropdown' },\n     { priority: 'High',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-710',\n       epic: 'Lynx',\n       status: 'Done',\n       issuetype: 'Task',\n       summary: 'Implement auto text synopsis for Lynx posts' },\n     { priority: 'Medium',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-777',\n       epic: 'Creative',\n       status: 'Done',\n       issuetype: 'Task',\n       summary: 'Redesign footer to be informative; link-heavy' },\n     { priority: 'Highest',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-779',\n       epic: 'Urgent',\n       status: 'Done',\n       issuetype: 'Task',\n       summary: 'Changeover from cloudinary to DO' },\n     { priority: 'Medium',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-780',\n       epic: 'Creative',\n       status: 'Done',\n       issuetype: 'Task',\n       summary: 'Make mobile post title bold' },\n     { priority: 'High',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-781',\n       epic: 'Urgent',\n       status: 'Done',\n       issuetype: 'Bug',\n       summary: 'This post consistently doesn’t work on mobile' } ] }\n{ jiraIssues:\n   [ { priority: 'Low',\n       timestamp: 1550223282,\n       project: 'Hackers and Slackers',\n       key: 'HACK-782',\n       epic: 'Widgets',\n       status: 'To Do',\n       issuetype: 'Task',\n       summary:\n        'Lynx: on mobile, instead of full link, show domainname.com/...' },\n     { priority: 'High',\n       timestamp: 1550194799,\n       project: 'Hackers and Slackers',\n       key: 'HACK-774',\n       epic: 'Widgets',\n       status: 'To Do',\n       issuetype: 'Task',\n       summary: 'New Widget: Next/Previous article in series' },\n     { priority: 'Low',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-395',\n       epic: 'Page Templates',\n       status: 'To Do',\n       issuetype: 'Task',\n       summary: 'Create fallback image for posts with no image' },\n     { priority: 'High',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-756',\n       epic: 'Newsletter',\n       status: 'To Do',\n       issuetype: 'Major Functionality',\n       summary: 'Automate newsletter' },\n     { priority: 'Low',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-775',\n       epic: 'Projects Page',\n       status: 'To Do',\n       issuetype: 'Data & Analytics',\n       summary: 'Update issuetype icons' },\n     { priority: 'Lowest',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-776',\n       epic: 'Projects Page',\n       status: 'To Do',\n       issuetype: 'Task',\n       summary: 'Add fork icon to repos' } ] }\n{ jiraIssues:\n   [ { priority: 'High',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-784',\n       epic: 'New Post',\n       status: 'In Progress',\n       issuetype: 'Content',\n       summary: 'Welcome to SQL part1' } ] }\n\n\nBefore we say \"GG, 2ez, 1v1 me,\" know that we're  only getting started \nuncovering what GraphQL can do. It's not all just creating and deleting records\neither; we're talking full-on database JOIN equivalent type shit here. Stick\naround folks, the bandwagon's just getting warmed up.","html":"<p>If you had the pleasure of joining us last time, we had just completed a <a href=\"https://hackersandslackers.com/writing-your-first-graphql-queries/\">crash course in structuring GraphQL Queries</a>. As much we all love studying abstract queries within the confines of a playground environment, the only real way to learn anything to overzealously attempt to build something way out of our skill level. Thus, we're going to shift gears and actually <em>make something</em> with all the dry technical knowledge we've accumulated so far. Hooray!</p><h2 id=\"data-gone-wild-exposing-your-graphql-endpoint\">Data Gone Wild: Exposing Your GraphQL Endpoint</h2><p>If you're following along with Prisma as your GraphQL service, the endpoint for your API defaults to <code>[your_ip_address]:4466</code>. What's more, you've probably noticed it is publicly accessible. <strong>THIS IS VERY BAD.</strong> Your server has full read/write access to whichever database you configured with it... if anybody finds your endpoint hanging out in a Github commit somewhere, you've just lost your database and everything in it. You're pretty much Equifax, and you should feel bad.</p><p>Prisma has a straightforward solution. While SSHed into wherever-you-set-up-your-server, check out the <code>prisma.yaml</code> file which was generated as a result of when we first started getting set up. You know, this directory:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">my-prisma\n├── datamodel.prisma\n├── docker-compose.yml\n├── generated\n│   └── prisma-client\n│       ├── index.ts\n│       └── prisma-schema.ts\n└── prisma.yml\n</code></pre>\n<!--kg-card-end: markdown--><p><code>prisma.yaml</code> seems inglorious, but that's because it's hiding a secret; or should I say, it's <em>not</em> hiding a secret! Hah!... (you know, like, credentials). Anyway. </p><p>In order to enable authorization on our endpoint, we need to add a secret to our <code>prisma.yaml</code> file. The secret can be anything you like; this is simply a string which will be used to generate a token. Add a line which defines <code>secret</code> like this:</p><!--kg-card-begin: markdown--><pre><code class=\"language-yaml\">endpoint: http://localhost:4466\ndatamodel: datamodel.prisma\nsecret: HIIHGUTFTUY$VK$G$YI&amp;TUYCUY$DT$\n\ngenerate:\n  - generator: typescript-client\n    output: ./generated/prisma-client/\n</code></pre>\n<!--kg-card-end: markdown--><p>With your secret stashed away safely, the <strong>Prisma CLI </strong>can now use this secret to create the authentication token. This will be the value we pass in the headers of our requests to actually interact with our Prisma server remotely.</p><p>Type <code>$ prisma token</code> in your project directory to get the work of art:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">$ prisma token\neyJhbGciOiJIUzI1NiIsInUYGFUJGSFKHFGSJFKSFJKSFGJdfSwiaWF0IjoxNTUyMTYwMDQ5LCJleHAiOjE1NTI3NjQ4NDl9.xrubUg_dRc93bqqR4f6jGt-KvQRS2Xq6lRi0a0uw-C0\n</code></pre>\n<!--kg-card-end: markdown--><p>Nice; believe it or not, that was the \"hard\" part.</p><h3 id=\"extra-credit-assign-a-dns-record-and-apply-a-security-certificate\">EXTRA CREDIT: Assign a DNS Record and Apply a Security Certificate</h3><p>If really want to, you could already query against your insecure IP address and start receiving some information. That said, making <strong>HTTP</strong> requests as such from <strong>HTTPS</strong> origins will fail. Not only that, but you kind of look shitty for not even bothering to name your API, much less apply a free SSL certificate. For the easiest possible way to do this, see our post on <a href=\"https://hackersandslackers.com/serve-docker-containers-with-custom-dns-and-ssl/\">using Caddy as an HTTP server</a>.</p><h2 id=\"building-a-javascript-client-to-consume-our-api\">Building a Javascript Client to Consume Our API</h2><p>With our API nice and secure, we can start hitting this baby from wherever we want... as long as it's a Node app. We'll start by requiring two packages:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">const { GraphQLClient } = require('graphql-request')\nconst { dotenv } = require('dotenv').config()\n</code></pre>\n<!--kg-card-end: markdown--><p><code>GraphQLClient</code> is the magic behind our client- it's everything. It also happens to be very similar to existing <strong>npm</strong> libraries for making requests, such as <a href=\"https://hackersandslackers.com/making-api-requests-with-nodejs/\">node-fetch</a>.</p><p>We'll also leverage the <code>dotenv</code> library to make sure our <strong>API endpoint</strong> and <strong>Bearer token</strong> stay out of source code. Try not to be Equifax whenever possible. <code>dotenv</code> allows us to load sensitive values from a <code>.env</code> file. Just in case you need a refresher, that file should look like this:</p><!--kg-card-begin: code--><pre><code>NODE_ENV=Production\nENDPOINT=https://yourapiendpoint.com\nAUTH=Bearer eyJhbGciOBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHGUYFIERIBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHZl-UGnMrOk3w</code></pre><!--kg-card-end: code--><h3 id=\"initialize-the-graphql-client\">Initialize The GraphQL Client</h3><p>I like to set up a one-time client for our API that we can go back and reuse if need be. After pulling the API endpoint and token from our <code>.env</code> file, setting up the client is easy:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">const { GraphQLClient } = require('graphql-request')\nconst { dotenv } = require('dotenv').config()\n\nconst endpoint = process.env.ENDPOINT;\nconst token = process.env.AUTH;\n\n// Initialize GraphQL Client\nconst client = new GraphQLClient(endpoint, {\n  headers: {\n    Authorization: token\n  }\n});\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"emergency-meeting-everybody-huddle-up\">EMERGENCY MEETING: EVERYBODY HUDDLE UP</h2><p>Oh I'm sorry, were you focusing on development? Unfortunately for you, I spent 8 years as a product manager, and I <em>love</em> stopping everything suddenly to call emergency meetings.</p><p>Real talk though, let's think back to the JIRA Kanban board example we've been using for the last two posts. If you recall, we're going to write a query that populates a 4-column Kanban board. The board represents a <em>project </em>(in this case, <strong>Hackers and Slackers</strong>) and each column represents a <em>status</em> of ticket, like this:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">const statuses = ['Backlog', 'To Do', 'In Progress', 'Done'];\n</code></pre>\n<!--kg-card-end: markdown--><p>We've previously established that GraphQL queries are friendly to drop-in variables. Let's use this to build some logic into our client, as opposed to hardcoding a massive query, which is really just the same 4 queries stitched together. Here's what a query to populate a single JIRA column looks like:</p><!--kg-card-begin: code--><pre><code>// Structured query\nconst query = `\n    query JiraIssuesByStatus($project: String, $status: String) {\n         jiraIssues(where: {project: $project, status: $status}, \n         orderBy: timestamp_DESC, \n         first: 6) {\n            key\n            summary\n            epic\n            status\n            project\n            priority\n            issuetype\n            timestamp\n            }\n         }\n       `</code></pre><!--kg-card-end: code--><p>We're passing both the <em>project</em> and the <em>issue status</em> as variables to our query. We can make things a bit dynamic here by looping through our statuses and executing this query four times: each time resulting in a callback filling the appropriate columns with JIRA issues.</p><!--kg-card-begin: html--><div class=\"protip\">\nThis approach is certainly less clunky and more dynamic than a hardcoded query. That said, this <i>still</i> isn't the best solution. Remember: the strength of GraphQL is the ability to get obscene amounts of data across complex relationships in a single call. The best approach here would probably be to build the query string itself dynamically using <strong>fragments,</strong> which we'll review in the next post.\n</div><!--kg-card-end: html--><h2 id=\"game-on-our-client-in-action\">Game On: Our Client in Action</h2><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">const { GraphQLClient } = require('graphql-request')\nconst { dotenv } = require('dotenv').config()\n\nconst endpoint = process.env.ENDPOINT;\nconst token = process.env.AUTH;\n\n// Initialize GraphQL Client\nconst client = new GraphQLClient(endpoint, {\n  headers: {\n    Authorization: token\n  }\n});\n\n// Structured query\nconst query = `\n   query JiraIssuesByStatus($project: String, $status: String) {\n      jiraIssues(where: {project: $project, status: $status}, orderBy: timestamp_DESC, first: 6) {\n         key\n         summary\n         epic\n         status\n         project\n         priority\n         issuetype\n         timestamp\n        }\n      }\n    `;\n\n// All Possible Issue Statuses\nconst statuses = ['Backlog', 'To Do', 'In Progress', 'Done'];\n\n// Execute a query per issue status\nfor(var i = 0; i &lt; statuses.length; i++){\n  var variables = {\n    project: &quot;Hackers and Slackers&quot;,\n    status: statuses[i]\n  }\n\n  client.request(query, variables).then((data) =&gt; {\n    console.log(data)\n  }).catch(err =&gt; {\n    console.log(err.response.errors) // GraphQL response errors\n    console.log(err.response.data) // Response data if available\n  });\n}\n</code></pre>\n<!--kg-card-end: markdown--><p>Works like a charm. We only had one endpoint, only had to set one header, and didn't spend any time reading through hundreds of pages of documentation to figure out which combination of REST API endpoint, parameters, and methods actually get us what we want. It's almost as if we're writing SQL now, except... it looks a lot more like... NoSQL. Thanks for the inspiration, <strong>MongoDB</strong>! Hope that whole <em>selling-open-source-software</em> thing works out.</p><p>Oh, and of course, here were the results of my query:</p><!--kg-card-begin: markdown--><pre><code class=\"language-json\">{ jiraIssues:\n   [ { priority: 'Medium',\n       timestamp: 1550194791,\n       project: 'Hackers and Slackers',\n       key: 'HACK-778',\n       epic: 'Code snippets',\n       status: 'Backlog',\n       issuetype: 'Task',\n       summary: 'HLJS: set indentation level' },\n     { priority: 'Medium',\n       timestamp: 1550194782,\n\n       project: 'Hackers and Slackers',\n       key: 'HACK-555',\n       epic: 'Optimization',\n       status: 'Backlog',\n       issuetype: 'Task',\n       summary: 'Minify Babel' },\n     { priority: 'Medium',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-785',\n       epic: 'New Post',\n       status: 'Backlog',\n       issuetype: 'Task',\n       summary: 'Unix commands for data' },\n     { priority: 'Medium',\n       timestamp: 1550016000,\n       project: 'Hackers and Slackers',\n       key: 'HACK-251',\n       epic: 'New Post',\n       status: 'Backlog',\n       issuetype: 'Content',\n       summary: 'Using Ghost\\'s content filtering' },\n     { priority: 'Medium',\n       timestamp: 1550016000,\n       project: 'Hackers and Slackers',\n       key: 'HACK-302',\n       epic: 'Widgets',\n       status: 'Backlog',\n       issuetype: 'Integration',\n       summary: 'Discord channel signups ' },\n     { priority: 'Low',\n       timestamp: 1550016000,\n       project: 'Hackers and Slackers',\n       key: 'HACK-336',\n       epic: 'New Post',\n       status: 'Backlog',\n       issuetype: 'Content',\n       summary: 'Linux: Configuring your server to send SMTP emails' } ] }\n{ jiraIssues:\n   [ { priority: 'Medium',\n       timestamp: 1550224412,\n       project: 'Hackers and Slackers',\n       key: 'HACK-769',\n       epic: 'Projects Page',\n       status: 'Done',\n       issuetype: 'Bug',\n       summary: 'Fix projects dropdown' },\n     { priority: 'High',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-710',\n       epic: 'Lynx',\n       status: 'Done',\n       issuetype: 'Task',\n       summary: 'Implement auto text synopsis for Lynx posts' },\n     { priority: 'Medium',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-777',\n       epic: 'Creative',\n       status: 'Done',\n       issuetype: 'Task',\n       summary: 'Redesign footer to be informative; link-heavy' },\n     { priority: 'Highest',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-779',\n       epic: 'Urgent',\n       status: 'Done',\n       issuetype: 'Task',\n       summary: 'Changeover from cloudinary to DO' },\n     { priority: 'Medium',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-780',\n       epic: 'Creative',\n       status: 'Done',\n       issuetype: 'Task',\n       summary: 'Make mobile post title bold' },\n     { priority: 'High',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-781',\n       epic: 'Urgent',\n       status: 'Done',\n       issuetype: 'Bug',\n       summary: 'This post consistently doesn’t work on mobile' } ] }\n{ jiraIssues:\n   [ { priority: 'Low',\n       timestamp: 1550223282,\n       project: 'Hackers and Slackers',\n       key: 'HACK-782',\n       epic: 'Widgets',\n       status: 'To Do',\n       issuetype: 'Task',\n       summary:\n        'Lynx: on mobile, instead of full link, show domainname.com/...' },\n     { priority: 'High',\n       timestamp: 1550194799,\n       project: 'Hackers and Slackers',\n       key: 'HACK-774',\n       epic: 'Widgets',\n       status: 'To Do',\n       issuetype: 'Task',\n       summary: 'New Widget: Next/Previous article in series' },\n     { priority: 'Low',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-395',\n       epic: 'Page Templates',\n       status: 'To Do',\n       issuetype: 'Task',\n       summary: 'Create fallback image for posts with no image' },\n     { priority: 'High',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-756',\n       epic: 'Newsletter',\n       status: 'To Do',\n       issuetype: 'Major Functionality',\n       summary: 'Automate newsletter' },\n     { priority: 'Low',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-775',\n       epic: 'Projects Page',\n       status: 'To Do',\n       issuetype: 'Data &amp; Analytics',\n       summary: 'Update issuetype icons' },\n     { priority: 'Lowest',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-776',\n       epic: 'Projects Page',\n       status: 'To Do',\n       issuetype: 'Task',\n       summary: 'Add fork icon to repos' } ] }\n{ jiraIssues:\n   [ { priority: 'High',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-784',\n       epic: 'New Post',\n       status: 'In Progress',\n       issuetype: 'Content',\n       summary: 'Welcome to SQL part1' } ] }\n</code></pre>\n<!--kg-card-end: markdown--><p>Before we say \"GG, 2ez, 1v1 me,\" know that we're<em> only getting started</em> uncovering what GraphQL can do. It's not all just creating and deleting records either; we're talking full-on database JOIN equivalent type shit here. Stick around folks, the bandwagon's just getting warmed up.</p>","url":"https://hackersandslackers.com/interacting-with-your-graphql-api/","uuid":"34fef193-6a56-4754-a329-3d34571fcd15","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c838ee05af763016e85085b"}},{"node":{"id":"Ghost__Post__5c6dd08fa624d869fba41325","title":"Making API Requests With node-fetch","slug":"making-api-requests-with-nodejs","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/02/node-fetch.jpg","excerpt":"Using the lightweight node-fetch library for REST API requests in NodeJS.","custom_excerpt":"Using the lightweight node-fetch library for REST API requests in NodeJS.","created_at_pretty":"20 February, 2019","published_at_pretty":"21 February, 2019","updated_at_pretty":"09 April, 2019","created_at":"2019-02-20T17:11:27.000-05:00","published_at":"2019-02-20T20:22:20.000-05:00","updated_at":"2019-04-08T23:21:34.000-04:00","meta_title":"Making API Requests with node-fetch | Hackers and Slackers","meta_description":"Using the lightweight node-fetch library for REST API requests in NodeJS.","og_description":"Using the lightweight node-fetch library for REST API requests in NodeJS.","og_image":"https://hackersandslackers.com/content/images/2019/02/node-fetch.jpg","og_title":"Making API Requests with node-fetch","twitter_description":"Using the lightweight node-fetch library for REST API requests in NodeJS.","twitter_image":"https://hackersandslackers.com/content/images/2019/02/node-fetch.jpg","twitter_title":"Making API Requests with node-fetch","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},"tags":[{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},{"name":"REST APIs","slug":"restapis","description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","feature_image":null,"meta_description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","meta_title":"Consuming and Building REST APIs | Hackers and Slackers","visibility":"public"},{"name":"JavaScript","slug":"javascript","description":"JavaScript covering both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","feature_image":null,"meta_description":"JavaScript topics, both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","meta_title":"Javascript Tutorials | Hackers and Slackers","visibility":"public"}],"plaintext":"If you're the type of person to read technical Javascript posts in your free\ntime (you are), you don't need me to tell you that JQuery is dead. JQuery\nthemselves have proclaimed JQuery to be dead. The only cool thing about JQuery\nis who can remove it from their legacy stack the fastest, which begs the\nquestion: why is the third most popular page on this site an old post about\nJQuery?\n\nMaintaining a blog of tutorials has taught me a lot about the gap between\nperception and reality. While we content publishers sling Medium posts from our\nivory towers, we quickly create a perception of what \"everybody\" is doing, but\nit turns out \"everybody\" only includes individuals who are exceptionally\nvisible. That demographic makes up significantly less than 10-20% of the active\nworkforce. I would have assumed any post with the word \"React\" would immediately\nexplode, when in reality people are more interested in using Handlebars with\nExpressJS [https://hackersandslackers.com/handlebars-templating-in-expressjs/] \n(I'm not proud of that post by the way, please don't read it).\n\nI want to provide an alternative to using AJAX calls when interacting with REST\nAPIs to clear my conscious of ever enabling bad behavior in the first place.\nHopefully, those who have lost their way might find something to take from it.\nConsidering how deep I've gone down the GraphQL rabbit hole myself, this may be\nthe last chance to bother writing about REST at all.\n\nLibrary of Choice: node-fetch\nLike everything in Javascript, there are way too many packages doing the same\nthing and solving the same problem. Making API requests is no exception. http\n[https://www.npmjs.com/package/http]  is a bit primitive, request\n[https://www.npmjs.com/package/request]  breaks when building with Webpack, r2\n[https://www.npmjs.com/package/r2]  seems like a pointless clone, and so on.\nDon't get me started with async libraries with 40 different methods for chaining\nrequests. Who is gunslinging API requests to the point where we need this many\noptions to pipe or parallel API requests anyway?\n\nAfter using all of these libraries, node-fetch\n[https://www.npmjs.com/package/node-fetch]  is the weapon of choice for today.\nTo put it simply: it's straightforward, and the only one that actually works out\nof the box with Webpack without absurd configuration nonsense. \n\nThe other request library worth mentioning is isomorphic-fetch\n[https://www.npmjs.com/package/isomorphic-fetch], which is intended to be a\ndrop-in replacement for node-fetch. isometric-fetch  mimics the syntax of \nnode-fetch, but impressively works on both  the client and server-side. When\nused on the client side, isomorphicfetch works by first importing the \nes6-promise  polyfill.\n\nGetting Set Up\nStart a Node project and install node-fetch:\n\nnpm install --save node-fetch\n\n\nIn the JS file we'd like to make a request, we can reference node-fetch  using \nrequire():\n\nconst fetch = require('node-fetch');\n\n\nCreating a node-fetch Request\nWe'll start with the most basic GET request possible:\n\nfetch('https://example.com')\n  .then(response => response.json())\n  .then(data => {\n    console.log(data)\n  })\n  .catch(err => ...)\n\n\nIndeed, that's all it takes a base level. Without specifying a method,\nnode-fetch assumes we're making a GET request. From we generate JSON from the\nrequest body and print the result to the console.\n\nChances are you're not going to get much value out of any request without\npassing headers, parameters, or a body to the target endpoint. Here's how we'd\nmake a more complicated (and realistic) POST call:\n\nvar url ='https://example.com';\nvar headers = {\n  \"Content-Type\": \"application/json\",\n  \"client_id\": \"1001125\",\n  \"client_secret\": \"876JHG76UKFJYGVHf867rFUTFGHCJ8JHV\"\n}\nvar data = {\n  \"name\": \"Wade Wilson\",\n  \"occupation\": \"Murderer\",\n  \"age\": \"30 (forever)\"\n}\nfetch(url, { method: 'POST', headers: headers, body: data})\n  .then((res) => {\n     return res.json()\n})\n.then((json) => {\n  console.log(json);\n  // Do something with the returned data.\n});\n\n\nThat's more like it: now we're passing headers and a JSON body. If needed, the \nfetch()  method also accepts a credentials  parameter for authentication.\n\nNote that we are avoiding callback hell by keeping logic that utilizes the\nresponse JSON in our then()  arrow functions. We can chain together as many of\nthese statements as we want.\n\nProperties of a Response\nThe response object contains much more than just the response body JSON:\n\nfetch('https://example.com')\n.then(res => {\n  res.text()       // response body (=> Promise)\n  res.json()       // parse via JSON (=> Promise)\n  res.status       //=> 200\n  res.statusText   //=> 'OK'\n  res.redirected   //=> false\n  res.ok           //=> true\n  res.url          //=> 'https://example.com'\n  res.type         //=> 'basic'\n                   //   ('cors' 'default' 'error'\n                   //    'opaque' 'opaqueredirect')\n\n  res.headers.get('Content-Type')\n})\n\n\nres.status  is particularly handy when building functionality around catching\nerrors:\n\nfetch('https://example.com')\n  .then(reportStatus)\n  \nfunction checkStatus (res) {\n  if (res.status >= 200 && res.status < 300) {\n    return res\n  } else {\n    let err = new Error(res.statusText)\n    err.response = res\n    throw err\n  }\n}\n\n\nMaking Asynchronous Requests\nChances are that when we make an API request, we're planning to do something\nwith the resulting data. Once we start building logic which depends on the\noutcome of a request, this is when we start running into Callback Hell: perhaps\nthe worst  part of JavaScript. In a nutshell, JavaScript will not wait for a\nrequest to execute the next line of code, therefore making a request and\nreferencing it immediately will result in no data returned. We can get around\nthis by using a combination of async  and await.\n\nasync  is a keyword which denotes that a function is to be executed\nasynchronously (as in async function my_func(){...}). await  can be used when\ncalling async  functions to wait on the result of an async function to be\nreturned (ie: const response = await my_func()).\n\nHere's an example of async/await  in action:\n\nconst fetch = require(\"node-fetch\");\n\nconst url = \"https://example.com\";\n\nconst get_data = async url => {\n  try {\n    const response = await fetch(url);\n    const json = await response.json();\n    console.log(json);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\ngetData(url);","html":"<p>If you're the type of person to read technical Javascript posts in your free time (you are), you don't need me to tell you that JQuery is dead. JQuery themselves have proclaimed JQuery to be dead. The only cool thing about JQuery is who can remove it from their legacy stack the fastest, which begs the question: why is the third most popular page on this site an old post about JQuery?</p><p>Maintaining a blog of tutorials has taught me a lot about the gap between perception and reality. While we content publishers sling Medium posts from our ivory towers, we quickly create a perception of what \"everybody\" is doing, but it turns out \"everybody\" only includes individuals who are exceptionally visible. That demographic makes up significantly less than 10-20% of the active workforce. I would have assumed any post with the word \"React\" would immediately explode, when in reality people are more interested in using <a href=\"https://hackersandslackers.com/handlebars-templating-in-expressjs/\">Handlebars with ExpressJS</a> (I'm not proud of that post by the way, please don't read it).</p><p>I want to provide an alternative to using AJAX calls when interacting with REST APIs to clear my conscious of ever enabling bad behavior in the first place. Hopefully, those who have lost their way might find something to take from it. Considering how deep I've gone down the GraphQL rabbit hole myself, this may be the last chance to bother writing about REST at all.</p><h2 id=\"library-of-choice-node-fetch\">Library of Choice: node-fetch</h2><p>Like everything in Javascript, there are way too many packages doing the same thing and solving the same problem. Making API requests is no exception. <strong><a href=\"https://www.npmjs.com/package/http\">http</a> </strong>is a bit primitive, <strong><a href=\"https://www.npmjs.com/package/request\">request</a></strong> breaks when building with Webpack, <strong><a href=\"https://www.npmjs.com/package/r2\">r2</a></strong> seems like a pointless clone, and so on. Don't get me started with async libraries with 40 different methods for chaining requests. Who is gunslinging API requests to the point where we need this many options to pipe or parallel API requests anyway?</p><p>After using all of these libraries, <strong><a href=\"https://www.npmjs.com/package/node-fetch\">node-fetch</a></strong> is the weapon of choice for today. To put it simply: it's straightforward, and the only one that actually works out of the box with Webpack without absurd configuration nonsense. </p><p>The other request library worth mentioning is <strong><a href=\"https://www.npmjs.com/package/isomorphic-fetch\">isomorphic-fetch</a>, </strong>which is intended to be a drop-in replacement for <em>node-fetch</em>. <strong>isometric-fetch</strong> mimics the syntax of <strong>node-fetch</strong>, but impressively works on <em>both</em> the client and server-side. When used on the client side, <em>isomorphicfetch </em>works by first importing the <code>es6-promise</code> polyfill.</p><h3 id=\"getting-set-up\">Getting Set Up</h3><p>Start a Node project and install node-fetch:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">npm install --save node-fetch\n</code></pre>\n<!--kg-card-end: markdown--><p>In the JS file we'd like to make a request, we can reference <strong>node-fetch</strong> using <strong>require():</strong></p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">const fetch = require('node-fetch');\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"creating-a-node-fetch-request\">Creating a node-fetch Request</h2><p>We'll start with the most basic GET request possible:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">fetch('https://example.com')\n  .then(response =&gt; response.json())\n  .then(data =&gt; {\n    console.log(data)\n  })\n  .catch(err =&gt; ...)\n</code></pre>\n<!--kg-card-end: markdown--><p>Indeed, that's all it takes a base level. Without specifying a method, node-fetch assumes we're making a GET request. From we generate JSON from the request body and print the result to the console.</p><p>Chances are you're not going to get much value out of any request without passing headers, parameters, or a body to the target endpoint. Here's how we'd make a more complicated (and realistic) POST call:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">var url ='https://example.com';\nvar headers = {\n  &quot;Content-Type&quot;: &quot;application/json&quot;,\n  &quot;client_id&quot;: &quot;1001125&quot;,\n  &quot;client_secret&quot;: &quot;876JHG76UKFJYGVHf867rFUTFGHCJ8JHV&quot;\n}\nvar data = {\n  &quot;name&quot;: &quot;Wade Wilson&quot;,\n  &quot;occupation&quot;: &quot;Murderer&quot;,\n  &quot;age&quot;: &quot;30 (forever)&quot;\n}\nfetch(url, { method: 'POST', headers: headers, body: data})\n  .then((res) =&gt; {\n     return res.json()\n})\n.then((json) =&gt; {\n  console.log(json);\n  // Do something with the returned data.\n});\n</code></pre>\n<!--kg-card-end: markdown--><p>That's more like it: now we're passing headers and a JSON body. If needed, the <strong>fetch()</strong> method also accepts a <code>credentials</code> parameter for authentication.</p><p>Note that we are avoiding callback hell by keeping logic that utilizes the response JSON in our <strong>then()</strong> arrow functions. We can chain together as many of these statements as we want.</p><h3 id=\"properties-of-a-response\">Properties of a Response</h3><p>The response object contains much more than just the response body JSON:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">fetch('https://example.com')\n.then(res =&gt; {\n  res.text()       // response body (=&gt; Promise)\n  res.json()       // parse via JSON (=&gt; Promise)\n  res.status       //=&gt; 200\n  res.statusText   //=&gt; 'OK'\n  res.redirected   //=&gt; false\n  res.ok           //=&gt; true\n  res.url          //=&gt; 'https://example.com'\n  res.type         //=&gt; 'basic'\n                   //   ('cors' 'default' 'error'\n                   //    'opaque' 'opaqueredirect')\n\n  res.headers.get('Content-Type')\n})\n</code></pre>\n<!--kg-card-end: markdown--><p><code>res.status</code> is particularly handy when building functionality around catching errors:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">fetch('https://example.com')\n  .then(reportStatus)\n  \nfunction checkStatus (res) {\n  if (res.status &gt;= 200 &amp;&amp; res.status &lt; 300) {\n    return res\n  } else {\n    let err = new Error(res.statusText)\n    err.response = res\n    throw err\n  }\n}\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"making-asynchronous-requests\">Making Asynchronous Requests</h2><p>Chances are that when we make an API request, we're planning to do something with the resulting data. Once we start building logic which depends on the outcome of a request, this is when we start running into <strong>Callback Hell</strong>: perhaps the <em>worst</em> part of JavaScript. In a nutshell, JavaScript will not wait for a request to execute the next line of code, therefore making a request and referencing it immediately will result in no data returned. We can get around this by using a combination of <strong>async</strong> and <strong>await.</strong></p><p><code>async</code> is a keyword which denotes that a function is to be executed asynchronously (as in <code>async function my_func(){...}</code>). <code>await</code> can be used when calling <code>async</code> functions to wait on the result of an async function to be returned (ie: <code>const response = await my_func()</code>).</p><p>Here's an example of <strong>async/await</strong> in action:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">const fetch = require(&quot;node-fetch&quot;);\n\nconst url = &quot;https://example.com&quot;;\n\nconst get_data = async url =&gt; {\n  try {\n    const response = await fetch(url);\n    const json = await response.json();\n    console.log(json);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\ngetData(url);\n</code></pre>\n<!--kg-card-end: markdown-->","url":"https://hackersandslackers.com/making-api-requests-with-nodejs/","uuid":"9b46eb2c-0339-44f9-8909-13474dff9377","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c6dd08fa624d869fba41325"}},{"node":{"id":"Ghost__Post__5c570ae30b20340296f57709","title":"Easily Build GraphQL APIs with Prisma","slug":"easily-build-graphql-apis-with-prisma","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/02/prisma2-1.jpg","excerpt":"Jump on the GraphQL Bandwagon with a little help from Prisma.","custom_excerpt":"Jump on the GraphQL Bandwagon with a little help from Prisma.","created_at_pretty":"03 February, 2019","published_at_pretty":"03 February, 2019","updated_at_pretty":"29 March, 2019","created_at":"2019-02-03T10:38:11.000-05:00","published_at":"2019-02-03T16:33:15.000-05:00","updated_at":"2019-03-29T14:47:01.000-04:00","meta_title":"Build GraphQL APIs with Prisma | Hackers and Slackers","meta_description":"Embrace GraphQL by leveraging Prisma: a free service which generates a GraphQL API atop any database.","og_description":"Embrace GraphQL by leveraging Prisma: a free service which generates a GraphQL API atop any database.","og_image":"https://hackersandslackers.com/content/images/2019/02/prisma2-1.jpg","og_title":"Build GraphQL APIs with Prisma","twitter_description":"Embrace GraphQL by leveraging Prisma: a free service which generates a GraphQL API atop any database.","twitter_image":"https://hackersandslackers.com/content/images/2019/02/prisma2-1.jpg","twitter_title":"Build GraphQL APIs with Prisma","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"GraphQL","slug":"graphql","description":"Ditch REST endpoints and build APIs that make sense with your workflow. Get started with Prisma or Apollo toolkits, and join the GraphQL bandwagon.","feature_image":null,"meta_description":"Ditch REST endpoints and build APIs that make sense with your workflow. Get started with Prisma or Apollo toolkits, and join the GraphQL bandwagon.","meta_title":"Build a GraphQL API | Hackers and Slackers","visibility":"public"},"tags":[{"name":"GraphQL","slug":"graphql","description":"Ditch REST endpoints and build APIs that make sense with your workflow. Get started with Prisma or Apollo toolkits, and join the GraphQL bandwagon.","feature_image":null,"meta_description":"Ditch REST endpoints and build APIs that make sense with your workflow. Get started with Prisma or Apollo toolkits, and join the GraphQL bandwagon.","meta_title":"Build a GraphQL API | Hackers and Slackers","visibility":"public"},{"name":"SaaS Products","slug":"saas","description":"Third-party products and services we’ve discovered to be diamonds in the rough. These are products we’ve included in our stack based on price and value add.","feature_image":null,"meta_description":"Third-party products and services we’ve discovered to be diamonds in the rough. These are products we’ve included in our stack based on price and value add.","meta_title":"Our Picks: SaaS Products | Hackers and Slackers","visibility":"public"},{"name":"Architecture","slug":"architecture","description":"Advancements in software architecture, serverless and beyond. Examples include equivalents to Lambda functions, Docker containers, Google Cloud functions,  Kubernetes, Heroku, etc.","feature_image":null,"meta_description":"Advancements in software architecture, serverless and beyond. Examples include equivalents to cloud functions, Docker containers, Kubernetes, Heroku, etc.","meta_title":"Software Architecture | Hackers and Slackers","visibility":"public"},{"name":"DevOps","slug":"devops","description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","feature_image":null,"meta_description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","meta_title":"DevOps: Networking And Server Configuration | Hackers and Slackers","visibility":"public"},{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},{"name":"#GraphQL Hype","slug":"graphql-hype","description":"Learn GraphQL syntax and see the reasons why the future of APIs is here to stay. We walk through everything from server/client setup to intricate tricks.","feature_image":"https://hackersandslackers.com/content/images/2019/03/graphqlseries.jpg","meta_description":"Learn GraphQL syntax and see the reasons why the future of APIs is here to stay. We walk through everything from server/client setup to intricate tricks.","meta_title":"GraphQL Hype","visibility":"internal"}],"plaintext":"The technology sector is reeling after an official statement was released by the\nUN's International Council of Coolness last week. The statement clearly states\nwhat status-quo developers have feared for months: if you haven't shifted from\nREST to GraphQL by now, you are officially recognized by the international\ncommunity to hold \"uncool\" status. A humanitarian crisis is already unfolding as\nrefugees of coolness are threatening to overtake borders, sparking fears of an\ninflux of Thinkpad Laptops, IntelliJ, and other Class A  uncool narcotics.\n\nHold up: is GraphQL That Dramatic of an Improvement over REST?\nIn all honesty, I've found that the only way to properly answer this question is\nto first utter \"kinda,\" then mull back and forth for a little while, and then\nfinishing with a weak statement like \"so pretty much, yeah.\"\n\nLet’s put it this way. When you’re first familiarizing yourself with a set of\ndata, what do you do? Do you read extensive documentation about the SQL table\nyou’re about to check out? Do you read the entire spec for your version\nPostgreSQL to see if it contains the functionality that might be missing for\nsome reason? I’m going to guess you do neither of these- chances are you just\nlook at the data. \n\nUsing any REST API is inherently a context-switch. No matter how many APIs\nyou’ve worked with in the past, you’ll never be able to know a new API’s\nendpoints, quirks, or the awful manner in which the creator has abandoned any\ndistinction between GET, POST, or PUT methods altogether. GraphQL is not\nnecessarily more technologically impressive than REST, but it does  provide us a\nsyntax and workflow comparable to working directly with databases with which\nwe're already familiar.\n\nRemember when us young guys justified replacing older devs when we came out of\nthe gate with NodeJS, arguing that context-switching changes everything? GraphQL\nis just that: a \"better\" technology with less mental context-switching, which\nconveniently serves a double-purpose for enterprises looking to fire anybody\nthey perceive to be dead weight over the age of 30. Good luck finding a better\nsynopsis than that.\n\nWhat’s this Prisma Nonsense? \nPrisma [https://www.prisma.io/]  is a free (FREE!) service that provides with\nthe tools to create an API client, as well as an Admin panel to manage it.\nWithout any prior knowledge of GraphQL needed, Prisma provides us with:\n\n * A CLI which’s stand up a web server which will serve as our API: either cloud\n   or self-hosted.\n * Automatic integration with your database of choice (including cloud DBs, such\n   as RDS).\n * A clever obfuscation of data models via a simple config file. No classes, no\n   code, no bullshit.\n * A \"playground\" interface which allows us to mess around in GraphQL syntax\n   against our models without breaking everything.\n * A web GUI which displays the relationships between all of these things and\n   their usage.\n\nIn short, Prisma does our jobs for us. Now that tasks associated with building\nAPIs, creating ORMs, and managing databases have all been trivialized, we can\nfinally cut some more of that dead weight we mentioned earlier- specifically\nBob, the asshole coming up on his 35th birthday sitting on his high-horse just\nbecause he has an obligation to feed 3 beautiful children. Sorry Bob, it just\nwasn't working out.\n\nPrisma does  provide the option to set up a test environment on their cloud, but\nlet's do something useful with our lives for once and build something\nproduction-ready. In this case, that means standing up a 5-dollar Digital Ocean\nDroplet.\n\nCreate a Prisma Account\nGet over to the sexually appealing Prisma Cloud landing page\n[https://www.prisma.io/cloud]  and make yourself an account. When prompted, make\nsure you select Deploy a new Prisma Service.\n\nExample services are for sissys.You should then be prompted with the following\nscreen. It will instruct you to install an NPM package, but there are a few\nthings we need to do first.\n\nWhen she says \"waiting for login,\" she means \"I'd wait a lifetime for you, my\nlove.\"Installing Prisma Dependencies on a Fresh VPS\nSSH into whichever VPS you've chosen. I'll be using a Ubuntu instance for this\ntutorial. If you happen to be using Ubuntu as well, feel free to copy + paste\nall the stuff I'm sure you've done a million times already. First, we need to\ninstall Node:\n\n$ apt update\n$ apt upgrade -y\n$ curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -\n$ sudo apt-get install -y nodejs\n$ sudo apt-get install gcc g++ make\n$ sudo npm install -g npm@latest\n\n\nBefore you do anything crazy like copy & paste those two lines from Prisma,\nyou're going to need to set up Docker a few steps later, so you might as well do\nthat now: \n\n1. Install Docker Dependencies\n$ sudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    gnupg-agent \\\n    software-properties-common\n\n\n2. Add Docker Key\n$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n$ sudo apt-key fingerprint 0EBFCD88\n\n\n3. Get Docker Repository\n$ sudo add-apt-repository \\\n   \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   $(lsb_release -cs) \\\n   stable\"\n\n\n4. Finally Install Docker\n$ sudo apt-get update\n$ sudo apt-get install docker-ce docker-ce-cli containerd.io\n\n\nGood job, you're doing great.\n\nInstall & Activate The Prisma CLI\nCool, now we can carry on with Prisma's demands. Install the Prisma CLI\nglobally, and then use said CLI to log in to Prisma.\n\n$ npm install -g prisma\n$ prisma login -k eyJhbGciGYU78tfuyLALALTHISKEYISFAKELOL69KFGs\n\n\nWait a couple of seconds after entering the login prompt, and you'll notice your\nbrowser window will have changed to indicate that you're now logged in. \n\nThe next step will create the local files which serve as the heart and soul of\nour API. Make sure you init Prisma  in whichever directory you like to keep\nthings in:\n\n$ cd /my/desired/directory/\n$ prisma init my-prisma\n\n\nInitiating the project will kickstart a quick and painless interrogation\nprocess. Keep in mind that it's recommended to use Prisma with a fresh database\ninstance; in my case, I spun up a cloud PostgreSQL instance.\n\n? Set up a new Prisma server or deploy to an existing server? Use existing database\n? What kind of database do you want to deploy to?:\n? Does your database contain existing data?:\n? Enter database host:\n? Enter database port:\n? Enter database user:\n? Enter database password: \n? Enter database name (the database includes the schema):\n? Use SSL?:\n\n\nCompleting this will result in the following structure:\n\nmy-prisma\n├── datamodel.prisma\n├── docker-compose.yml\n├── generated\n│   └── prisma-client\n│       ├── index.ts\n│       └── prisma-schema.ts\n└── prisma.yml\n\n\nWe're almost there cowboy and/or cowgirl. \n\nSet Phasers to \"Deploy\"\nPrisma is going to stand itself up on port 4466, which is closed by default on\nmost servers. Make sure you have this port open:\n\n$ ufw allow 4466\n\n\nFinally, we need to set a secret  in order to connect to Prisma cloud. Open the \ndocker-compose.yml  file and uncomment the managementApiSecret  line. Replace\nthe value with some sort of deep dark personal secret of yours.\n\n$ vim docker-compose.yml\n\n\nversion: '3'\nservices:\n  prisma:\n    image: prismagraphql/prisma:1.25\n    restart: always\n    ports:\n    - \"4466:4466\"\n    environment:\n      PRISMA_CONFIG: |\n        port: 4466\n        # uncomment the next line and provide the env var \n        managementApiSecret: my-secret\n        databases:\n          default:\n            connector: postgres\n            host: 123.45.678.90\n            database: databasename\n            user: username\n            password: password\n            rawAccess: true\n            port: '5432'\n            migrations: true\n\n\n\nFor some reason, Prisma does not automatically specify your SSL preferences in\ndocker-compose, even if you explicity answer \"yes\" to the SSL prompt. If your\ndatabase requires SSL, be sure to add ssl: true  to the end of your\ndocker-compose config. Otherwise, your deployment will fail.As per the comment\nin our yml  file, we need to export the secret we specify with \nmanagementApiSecret: my-secret  as an environment variable. Back in your Prisma\ndirectory, export your secret as such:\n\n$ export PRISMA_MANAGEMENT_API_SECRET=my-secret\n\n\nThis secret is used to generate a token to secure our endpoint. Skipping this\nstep would result in exposing your database to the world with full read/write\naccess to anybody.\n\nIt's Game Time\nIt's time to deploy, baby! Do it, push the button! DO IT NOW!\n\n$ docker-compose up -d\n$ prisma deploy\n\n\nDeploying for the first time does a few things. It'll stand up a 'playground'\ninterface on your local server (localhost:4466), as well as automatically get\nyou set up with Prisma Cloud, which is essentially an admin interface for your\ndeployment hosted on Prisma's site.\n\nCheck Out Your Workspace \nVisit [Your Server's IP]:4466 to see what you've done:\n\nA playground for children of all agesCheck it out! Along with documentation of\nthe generic data models Prisma shipped with, you can test queries or mutations\non the left side of the UI, and receive responses on the right. Sure beats\nPostman imho.\n\nDon't Look Down: You're in the Cloud\nYou can now add your server to Prisma Cloud to get the benefits of their admin\npanel. From here, you can modify information directly, review usage metrics, and\nmanage multiple instances:\n\nBreaking News: Prisma is Too Cool For School.Working With Prisma And GraphQL\nNow that we've spun up this shiny new toy, let's be sure we know how to drive\nit.\n\nOn your VPS, take a look at the datamodels.prisma  file:\n\n$ vim datamodels.prisma\n\n\nYou should see a data model called User (everybody has this model). To add or\nmodify data models, all we need to do is change the fields as we see fit, set\ntheir data type, and specify whether or not we'd like the field to be unique.\nBelow I've added a couple of new 'fields.'\n\ntype User {\n  id: ID! @unique\n  name: String!\n  email: String! @unique\n  gravatar: String!\n}\n\n\nDeploying Prisma again with these changes will modify our database's table\nstructure to match the new model:\n\n$ prisma deploy\n\n\nThere you have it: one more buzzword to put your resum\u001d\u001de. In fact, feel free to\ncompletely falsify the existence of a GraphQL certification and throw that on\nthere, too. If you're the kind of person who enjoys reading technical posts like\nthis in your free time, chances are you're already qualified for the job. Unless\nyou're Bob.","html":"<p>The technology sector is reeling after an official statement was released by the UN's International Council of Coolness last week. The statement clearly states what status-quo developers have feared for months: if you haven't shifted from REST to GraphQL by now, you are officially recognized by the international community to hold \"uncool\" status. A humanitarian crisis is already unfolding as refugees of coolness are threatening to overtake borders, sparking fears of an influx of Thinkpad Laptops, IntelliJ, and other <em>Class A</em> uncool narcotics.</p><h3 id=\"hold-up-is-graphql-that-dramatic-of-an-improvement-over-rest\">Hold up: is GraphQL That Dramatic of an Improvement over REST?</h3><p>In all honesty, I've found that the only way to properly answer this question is to first utter \"kinda,\" then mull back and forth for a little while, and then finishing with a weak statement like \"so pretty much, yeah.\"</p><p>Let’s put it this way. When you’re first familiarizing yourself with a set of data, what do you do? Do you read extensive documentation about the SQL table you’re about to check out? Do you read the entire spec for your version PostgreSQL to see if it contains the functionality that might be missing for some reason? I’m going to guess you do neither of these- chances are you <em>just look at the data. </em></p><p>Using any REST API is inherently a context-switch. No matter how many APIs you’ve worked with in the past, you’ll never be able to know a new API’s endpoints, quirks, or the awful manner in which the creator has abandoned any distinction between GET, POST, or PUT methods altogether. GraphQL is not necessarily more technologically impressive than REST, but it <em>does</em> provide us a syntax and workflow comparable to working directly with databases with which we're already familiar.</p><p>Remember when us young guys justified replacing older devs when we came out of the gate with NodeJS, arguing that context-switching <em>changes everything</em>? GraphQL is just that: a \"better\" technology with less mental context-switching, which conveniently serves a double-purpose for enterprises looking to fire anybody they perceive to be dead weight over the age of 30. Good luck finding a better synopsis than that.</p><h2 id=\"what-s-this-prisma-nonsense\">What’s this Prisma Nonsense? </h2><p><a href=\"https://www.prisma.io/\">Prisma</a> is a free (FREE!) service that provides with the tools to create an API client, as well as an Admin panel to manage it. Without any prior knowledge of GraphQL needed, Prisma provides us with:</p><ul><li>A CLI which’s stand up a web server which will serve as our API: either cloud or self-hosted.</li><li>Automatic integration with your database of choice (including cloud DBs, such as RDS).</li><li>A clever obfuscation of data models via a simple config file. No classes, no code, no bullshit.</li><li>A \"playground\" interface which allows us to mess around in GraphQL syntax against our models without breaking everything.</li><li>A web GUI which displays the relationships between all of these things and their usage.</li></ul><p>In short, Prisma does our jobs for us. Now that tasks associated with building APIs, creating ORMs, and managing databases have all been trivialized, we can finally cut some more of that dead weight we mentioned earlier- specifically Bob, the asshole coming up on his 35th birthday sitting on his high-horse just because he has an obligation to feed 3 beautiful children. Sorry Bob, it just wasn't working out.</p><p>Prisma <em>does</em> provide the option to set up a test environment on their cloud, but let's do something useful with our lives for once and build something production-ready. In this case, that means standing up a 5-dollar Digital Ocean Droplet.</p><h3 id=\"create-a-prisma-account\">Create a Prisma Account</h3><p>Get over to the sexually appealing <a href=\"https://www.prisma.io/cloud\">Prisma Cloud landing page</a> and make yourself an account. When prompted, make sure you select <strong>Deploy a new Prisma Service</strong>.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/prisma-step1.png\" class=\"kg-image\"><figcaption>Example services are for sissys.</figcaption></figure><!--kg-card-end: image--><p>You should then be prompted with the following screen. It will instruct you to install an NPM package, but there are a few things we need to do first.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/prisma-step2.png\" class=\"kg-image\"><figcaption>When she says \"waiting for login,\" she means \"I'd wait a lifetime for you, my love.\"</figcaption></figure><!--kg-card-end: image--><h2 id=\"installing-prisma-dependencies-on-a-fresh-vps\">Installing Prisma Dependencies on a Fresh VPS</h2><p>SSH into whichever VPS you've chosen. I'll be using a Ubuntu instance for this tutorial. If you happen to be using Ubuntu as well, feel free to copy + paste all the stuff I'm sure you've done a million times already. First, we need to install Node:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">$ apt update\n$ apt upgrade -y\n$ curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -\n$ sudo apt-get install -y nodejs\n$ sudo apt-get install gcc g++ make\n$ sudo npm install -g npm@latest\n</code></pre>\n<!--kg-card-end: markdown--><p>Before you do anything crazy like copy &amp; paste those two lines from Prisma, you're going to need to set up Docker a few steps later, so you might as well do that now: </p><h3 id=\"1-install-docker-dependencies\">1. Install Docker Dependencies</h3><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">$ sudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    gnupg-agent \\\n    software-properties-common\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"2-add-docker-key\">2. Add Docker Key</h3><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n$ sudo apt-key fingerprint 0EBFCD88\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"3-get-docker-repository\">3. Get Docker Repository</h3><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">$ sudo add-apt-repository \\\n   &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   $(lsb_release -cs) \\\n   stable&quot;\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"4-finally-install-docker\">4. Finally Install Docker</h3><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ sudo apt-get update\n$ sudo apt-get install docker-ce docker-ce-cli containerd.io\n</code></pre>\n<!--kg-card-end: markdown--><p>Good job, you're doing great.</p><h2 id=\"install-activate-the-prisma-cli\">Install &amp; Activate The Prisma CLI</h2><p>Cool, now we can carry on with Prisma's demands. Install the Prisma CLI globally, and then use said CLI to log in to Prisma.  </p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ npm install -g prisma\n$ prisma login -k eyJhbGciGYU78tfuyLALALTHISKEYISFAKELOL69KFGs\n</code></pre>\n<!--kg-card-end: markdown--><p>Wait a couple of seconds after entering the login prompt, and you'll notice your browser window will have changed to indicate that you're now logged in. </p><p>The next step will create the local files which serve as the heart and soul of our API. Make sure you init <code>Prisma</code> in whichever directory you like to keep things in:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">$ cd /my/desired/directory/\n$ prisma init my-prisma\n</code></pre>\n<!--kg-card-end: markdown--><p>Initiating the project will kickstart a quick and painless interrogation process. Keep in mind that it's recommended to use Prisma with a fresh database instance; in my case, I spun up a cloud PostgreSQL instance.</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">? Set up a new Prisma server or deploy to an existing server? Use existing database\n? What kind of database do you want to deploy to?:\n? Does your database contain existing data?:\n? Enter database host:\n? Enter database port:\n? Enter database user:\n? Enter database password: \n? Enter database name (the database includes the schema):\n? Use SSL?:\n</code></pre>\n<!--kg-card-end: markdown--><p>Completing this will result in the following structure:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">my-prisma\n├── datamodel.prisma\n├── docker-compose.yml\n├── generated\n│   └── prisma-client\n│       ├── index.ts\n│       └── prisma-schema.ts\n└── prisma.yml\n</code></pre>\n<!--kg-card-end: markdown--><p>We're almost there cowboy and/or cowgirl. </p><h2 id=\"set-phasers-to-deploy\">Set Phasers to \"Deploy\"</h2><p>Prisma is going to stand itself up on port <strong>4466</strong>, which is closed by default on most servers. Make sure you have this port open:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ ufw allow 4466\n</code></pre>\n<!--kg-card-end: markdown--><p>Finally, we need to set a <em>secret</em> in order to connect to Prisma cloud. Open the <code>docker-compose.yml</code> file and uncomment the <code>managementApiSecret</code> line. Replace the value with some sort of deep dark personal secret of yours.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ vim docker-compose.yml\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code class=\"language-yaml\">version: '3'\nservices:\n  prisma:\n    image: prismagraphql/prisma:1.25\n    restart: always\n    ports:\n    - &quot;4466:4466&quot;\n    environment:\n      PRISMA_CONFIG: |\n        port: 4466\n        # uncomment the next line and provide the env var \n        managementApiSecret: my-secret\n        databases:\n          default:\n            connector: postgres\n            host: 123.45.678.90\n            database: databasename\n            user: username\n            password: password\n            rawAccess: true\n            port: '5432'\n            migrations: true\n\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: html--><div class=\"proptip\">\nFor some reason, Prisma does not automatically specify your SSL preferences in docker-compose, even if you explicity answer \"yes\" to the SSL prompt. If your database requires SSL, be sure to add <code>ssl: true</code> to the end of your docker-compose config. Otherwise, your deployment will fail. \n</div><!--kg-card-end: html--><p>As per the comment in our <code>yml</code> file, we need to export the secret we specify with <code>managementApiSecret: my-secret</code> as an environment variable. Back in your Prisma directory, export your secret as such:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ export PRISMA_MANAGEMENT_API_SECRET=my-secret\n</code></pre>\n<!--kg-card-end: markdown--><p>This secret is used to generate a token to secure our endpoint. Skipping this step would result in exposing your database to the world with full read/write access to anybody.</p><h2 id=\"it-s-game-time\">It's Game Time</h2><p>It's time to deploy, baby! Do it, push the button! DO IT NOW!</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ docker-compose up -d\n$ prisma deploy\n</code></pre>\n<!--kg-card-end: markdown--><p>Deploying for the first time does a few things. It'll stand up a 'playground' interface on your local server (localhost:4466), as well as automatically get you set up with Prisma Cloud, which is essentially an admin interface for your deployment hosted on Prisma's site.</p><h3 id=\"check-out-your-workspace\">Check Out Your Workspace </h3><p>Visit [Your Server's IP]:4466 to see what you've done:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/playground.png\" class=\"kg-image\"><figcaption>A playground for children of all ages</figcaption></figure><!--kg-card-end: image--><p>Check it out! Along with documentation of the generic data models Prisma shipped with, you can test queries or mutations on the left side of the UI, and receive responses on the right. Sure beats Postman imho.</p><h3 id=\"don-t-look-down-you-re-in-the-cloud\">Don't Look Down: You're in the Cloud</h3><p>You can now add your server to Prisma Cloud to get the benefits of their admin panel. From here, you can modify information directly, review usage metrics, and manage multiple instances:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://res-5.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/prismacloud.gif\" class=\"kg-image\"><figcaption>Breaking News: Prisma is Too Cool For School.</figcaption></figure><!--kg-card-end: image--><h2 id=\"working-with-prisma-and-graphql\">Working With Prisma And GraphQL</h2><p>Now that we've spun up this shiny new toy, let's be sure we know how to drive it.</p><p>On your VPS, take a look at the <code>datamodels.prisma</code> file:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ vim datamodels.prisma\n</code></pre>\n<!--kg-card-end: markdown--><p>You should see a data model called User (everybody has this model). To add or modify data models, all we need to do is change the fields as we see fit, set their data type, and specify whether or not we'd like the field to be unique. Below I've added a couple of new 'fields.'</p><!--kg-card-begin: markdown--><pre><code class=\"language-yaml\">type User {\n  id: ID! @unique\n  name: String!\n  email: String! @unique\n  gravatar: String!\n}\n</code></pre>\n<!--kg-card-end: markdown--><p>Deploying Prisma again with these changes will modify our database's table structure to match the new model:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ prisma deploy\n</code></pre>\n<!--kg-card-end: markdown--><p>There you have it: one more buzzword to put your resum\u001d\u001de. In fact, feel free to completely falsify the existence of a GraphQL certification and throw that on there, too. If you're the kind of person who enjoys reading technical posts like this in your free time, chances are you're already qualified for the job. Unless you're Bob.</p>","url":"https://hackersandslackers.com/easily-build-graphql-apis-with-prisma/","uuid":"86286c72-478c-4108-8bef-89ca01caf043","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c570ae30b20340296f57709"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867371a","title":"Compile Frontend JavaScript with Babel and Gulp","slug":"babel-ecma-script","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/10/babel-1@2x.jpg","excerpt":"Using ECMAScript functions on the frontend the quick and dirty way.","custom_excerpt":"Using ECMAScript functions on the frontend the quick and dirty way.","created_at_pretty":"04 October, 2018","published_at_pretty":"06 October, 2018","updated_at_pretty":"02 February, 2019","created_at":"2018-10-03T23:05:08.000-04:00","published_at":"2018-10-06T06:20:00.000-04:00","updated_at":"2019-02-02T04:55:50.000-05:00","meta_title":"Frontend JavaScript with Babel | Hackers and Slackers","meta_description":"Babel looks at new ECMA syntax (like require,  const or promise) and compiles code which is logic-equivalent to these features using vanilla Javascript.","og_description":"Babel looks at new ECMA syntax (like require,  const or promise) and compiles code which is logic-equivalent to these features using vanilla Javascript.","og_image":"https://hackersandslackers.com/content/images/2018/10/babel-1@2x.jpg","og_title":"Compile Frontend JavaScript with Babel and Gulp","twitter_description":"Babel looks at new ECMA syntax (like require,  const or promise) and compiles code which is logic-equivalent to these features using vanilla Javascript.","twitter_image":"https://hackersandslackers.com/content/images/2018/10/babel-1@2x.jpg","twitter_title":"Compile Frontend JavaScript with Babel and Gulp","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"JavaScript","slug":"javascript","description":"JavaScript covering both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","feature_image":null,"meta_description":"JavaScript topics, both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","meta_title":"Javascript Tutorials | Hackers and Slackers","visibility":"public"},"tags":[{"name":"JavaScript","slug":"javascript","description":"JavaScript covering both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","feature_image":null,"meta_description":"JavaScript topics, both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","meta_title":"Javascript Tutorials | Hackers and Slackers","visibility":"public"},{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"}],"plaintext":"NOTE: This post has not aged particularly well. This is made evident by the\npresence of the word \"Gulp\" present throughout the post.\n\n\n--------------------------------------------------------------------------------\n\nAs you may have already deduced from the occasional glaring holes in my\nprogramming knowledge, I haven’t spent as much of my life programming than,\nwell, anybody who haphazardly threw away an 8-year product management career.\nApparently, a lot can happen in 8 years... especially when it comes to\nJavaScript.\nPutting aside that whole server-side  NodeJS thing or whatever it’s called,\nthere’s years worth of mindfucks for those of us who fairly recently returned to\ndev. In our absence, the world has been Grunting, Gulping, Yarning and even\nNPMing. Let’s assume we’ve gotten past all of that... phew. Oh wait, I forgot to\nmention the monstrosity of “hey by way there’s this mess of a hardly-explained\n(protocol? organization? Fancy Github Repo?) called Babel that we all depend on\nto do meaningful shit in the browser these days.”\n\nIf you’re here because you’re trying to figure what the hell all these ‘const’\nand ‘import’ keywords are doing in modern-day browser JavaScript, consider this\nhalf focus-group and half getting-started tutorial. For the rest of you\nexperienced JS devs out there, perhaps you should stay. No, by all means, I’d\nlike you to sit here and think about the kind of ecosystem you’ve decided to\npatch together. Do it; otherwise, I might just give Kik a call to see what other\ntiny NPM modules they’d like to arbitrarily demand the removal of... remember\nthat? Exactly. Now think about what you’ve done.\n\nECMAScript and the Backwards-Compatible Web\nAny Actionscript veterans in the house? No? Just me? Great. Anyway, There’s\nsomething that ActionScript, JavaScript, and a bunch of Whatever-scripts have in\ncommon: they’re all implementations of ECMAScript: the ancestral equivalent of\ncomparing Latin to Spanish or French, but just one added detail: ECMAScript is\nstill a living language, and constantly improving. If some nation of cool cats\nstill spoke Latin as an active language and were constantly coming up with sick\nnew slang terms, those speaking French or Spanish would be powerless to come up\nwith phrases nearly as cool as “lit” or \"fam\"  (or whatever those Latin\nequivalents would be).\n\nThe problem is web browsers are inherently backward-compatible monstrosities.\nMost revenue-generating companies look at their >5% user base using Internet\nExplorer three and a half, and think “oh my god, that’s five percent of our\npotential revenue” (it isn’t, but whatever). That’s where we stand.\n\nNew features? For the INTERNET?\nI remember one particular weekend I rented a hotel room for the sole purpose of\nwrapping up an app based on MongoDB Stitch at the time. I was pretty confident I\nhad it all figured out, but found, something about Mongo’s quick start guides\nfelt off (I mean, more off than the rest of their nearly unreadable docs). Why\ndid Mongo insist on inline JavaScript? Haven’t we evolved past the days where\nPHP, HTML, CSS, and JS all lived on the same page?\n\nAs everybody-who-wasn’t-me at time already knows, JavaScript has been reaping\nthe benefits of new evolutions in ECMAScript over the years, but there’s a\ncatch: only the most modern browsers know what the hell to do with these new\nfeatures (duh), and they only do so with the dreaded  blocks thrown on HTML\npages. Attempting to use modern ECMA features in a linked JS file which hasn’t\nbeen pre-compiled is like dividing by zero. Seriously, you might die.\n\nBabel to the Rescue\nMore research only lead to more questions. Who is this Browserify wizard\n[http://browserify.org/]  and why is he dead? What is Webpack doing to fund all\ntheir highly produced branding, and why would anybody purchase a Webpack T-shirt\n[https://webpack.threadless.com/]? Finally, the biggest question of all: who the\nhell is this Babel guy who gives off as an electric explosion in your face on\nhard drugs?\n\nI can't even the difference between a compiler and a Marvel franchise anymore.I\nthink it was at this point in my journey of catching up on the last decade where\nI went truly mad and began pacing around my room, verbally assaulting inanimate\nobjects, and eventually even found myself washed up in a Wendys down the street,\nshivering and crying to myself. \n\nNow that I've been released from the psyche ward and are free to wander the\nstreets again, I've managed to piece together a bare-minimum understanding of\nwhat the hell is going on.\n\nWhat the Hell is Going On\nBecause Javascript as a language is destined to be backwards compatible to a\nyear when OJ Simpson was on trial and Windows 95 was considered cutting-edge\ntechnology, Babel  aims to \"improve\" browser Javascript. Because we can't\nactually improve or change the underlying technology, Babel looks at new-fangled\nECMA syntax (containing words like require,const  or promise) and compiles logic\nequivalent to these features with vanilla Javascript. If that sounds similar to\nhow Gulp  takes CSS preprocessors (like LESS  or SASS) and turns those files\ninto interpretable browser code, well, that's exactly what happens. \n\nGulp  is not be the only way to utilize new ECMAScript features. Babel syntax\ncan be compiled a number of ways, such as Babel's CLI\n[https://babeljs.io/docs/en/babel-cli], or from Server-side JS, or Webpack  if\nyou're Mister-Fancy-Pants. In fact, the trend across the board is that compiling\nyour site with modules via Webpack is winning dramatically. For all we know,\nthis could be the last Babel Gulp tutorial ever written.\n\nRight now we're focusing on the ability to use ECMAScript features on the\nfrontend; a common use-case for things like... well... theming the presentation\nlayer for a blog. If we can pull it off with Gulp, you probably won't struggle\nmuch with future methods.\n\nBabel NPM Packages\nAlright, so Babel isn't just a single NPM package. It's a lot. Let's see what's\nthere in a basic package.json:\n\n{\n  \"name\": \"example\",\n  \"scripts\": {\n    \"build\": \"babel src -d lib\"\n  },\n  \"presets\": [\n    \"env\"\n  ],\n  \"engines\": {\n    \"node\": \"8.12.0\"\n  },\n  \"dependencies\": {\n    \"@babel/polyfill\": \"^7.0.0\",\n    \"@babel/runtime\": \"^7.1.2\",\n    \"@babel/runtime-corejs2\": \"^7.1.2\",\n    \"babel-runtime\": \"^6.26.0\",\n    \"gulp-resolve-dependencies\": \"^2.2.0\",\n    \"gulp-sourcemaps\": \"^2.6.4\",\n    \"gulp-uglify-es\": \"^1.0.4\",\n  },\n  \"devDependencies\": {\n    \"@babel/cli\": \"^7.1.2\",\n    \"@babel/core\": \"^7.1.2\",\n    \"@babel/plugin-syntax-dynamic-import\": \"^7.0.0\",\n    \"@babel/plugin-transform-runtime\": \"^7.1.0\",\n    \"@babel/preset-env\": \"^7.1.0\",\n  }\n}\n\nLet's not go through all these in detail- in fact, let's take a look at our \ngulpfile.js:\n\n'use strict';\n\nvar gulp = require('gulp'),\n  concat = require('gulp-concat'),\n  autoprefixer = require('gulp-autoprefixer'),\n  sourcemaps = require('gulp-sourcemaps'),\n  babel = require('gulp-babel'),\n  resolveDependencies = require('gulp-resolve-dependencies'),\n\n\nvar paths = {\n  scripts: {\n    src: 'src/js/*.js',\n    dest: 'assets/js'\n  }\n};\n\nfunction scripts() {\n  return gulp.src(paths.scripts.src)\n    .pipe(babel({\n          presets: ['@babel/env'],\n          plugins: ['@babel/transform-runtime', '@babel/plugin-syntax-dynamic-import']\n    }))\n    .on('error', console.error.bind(console))\n    .pipe(resolveDependencies({\n            pattern: /\\* @requires [\\s-]*(.*\\.js)/g\n        }))\n    .pipe(concat('main.min.js'))\n    .pipe(gulp.dest(paths.scripts.dest));\n}\n\nNote that I've gone ahead and removed anything from the file that has nothing to\ndo with Babel - everything seen here is strictly relevant to building a\n'scripts' task. The gist is this:\n\nbabel  accepts two arrays:\n\n * Presets  refers to the version of ECMAScript we're targeting, and what we\n   have implies the latest.\n * Plugins  allow us to pass any plugins Babel supports; in this case, we're\n   rendering stuff at runtime. Let's not get into it too far.\n\nThe rest of the function is simple: we catch errors if any arise, we resolve\nrequired dependencies, and then we finally bunch everything into a single file\nand shove it in our destination folder.\n\nJust to be Clear\nWhen it comes to the best  way of achieving ECMAScript 2015 or 2016 etc in the\nbrowser,  I'm no expert. As previously mentioned, the understanding I've passed\non to you is a sort of bare minimum to start doing great things. \n\nAs far as what others are doing, I'd be willing to bet that the vast majority of\ndevs utilizing newer ECMAScript functions are running frameworks like React,\nwhile the rest have reached a consensus that Webpack is king and Gulp lame.\nThese things may be true.\n\nNo matter, this new found power of ours opens a lot of doors. Just wait until\nyou see what we do with MongoDB Stitch.","html":"<p><strong>NOTE</strong>: This post has not aged particularly well. This is made evident by the presence of the word \"Gulp\" present throughout the post.</p><hr><p>As you may have already deduced from the occasional glaring holes in my programming knowledge, I haven’t spent as much of my life programming than, well, anybody who haphazardly threw away an 8-year product management career. Apparently, a lot can happen in 8 years... especially when it comes to JavaScript.<br>Putting aside that whole server-side  NodeJS thing or whatever it’s called, there’s years worth of mindfucks for those of us who fairly recently returned to dev. In our absence, the world has been Grunting, Gulping, Yarning and even NPMing. Let’s assume we’ve gotten past all of that... phew. Oh wait, I forgot to mention the monstrosity of “hey by way there’s this mess of a hardly-explained (protocol? organization? Fancy Github Repo?) called Babel that we all depend on to do meaningful shit in the browser these days.”</p><p>If you’re here because you’re trying to figure what the hell all these ‘const’ and ‘import’ keywords are doing in modern-day browser JavaScript, consider this half focus-group and half getting-started tutorial. For the rest of you experienced JS devs out there, perhaps you should stay. No, by all means, I’d like you to sit here and think about the kind of ecosystem you’ve decided to patch together. Do it; otherwise, I might just give Kik a call to see what other tiny NPM modules they’d like to arbitrarily demand the removal of... remember that? Exactly. Now think about what you’ve done.</p><h2 id=\"ecmascript-and-the-backwards-compatible-web\">ECMAScript and the Backwards-Compatible Web</h2><p>Any Actionscript veterans in the house? No? Just me? Great. Anyway, There’s something that ActionScript, JavaScript, and a bunch of Whatever-scripts have in common: they’re all implementations of ECMAScript: the ancestral equivalent of comparing Latin to Spanish or French, but just one added detail: ECMAScript is still a living language, and constantly improving. If some nation of cool cats still spoke Latin as an active language and were constantly coming up with sick new slang terms, those speaking French or Spanish would be powerless to come up with phrases nearly as cool as “lit” or \"fam\"  (or whatever those Latin equivalents would be).</p><p>The problem is web browsers are inherently backward-compatible monstrosities. Most revenue-generating companies look at their &gt;5% user base using Internet Explorer three and a half, and think “oh my god, that’s five percent of our potential revenue” (it isn’t, but whatever). That’s where we stand.</p><h2 id=\"new-features-for-the-internet\">New features? For the INTERNET?</h2><p>I remember one particular weekend I rented a hotel room for the sole purpose of wrapping up an app based on MongoDB Stitch at the time. I was pretty confident I had it all figured out, but found, something about Mongo’s quick start guides felt off (I mean, more off than the rest of their nearly unreadable docs). Why did Mongo insist on inline JavaScript? Haven’t we evolved past the days where PHP, HTML, CSS, and JS all lived on the same page?</p><p>As everybody-who-wasn’t-me at time already knows, JavaScript has been reaping the benefits of new evolutions in ECMAScript over the years, but there’s a catch: only the most modern browsers know what the hell to do with these new features (duh), and they only do so with the dreaded  blocks thrown on HTML pages. Attempting to use modern ECMA features in a linked JS file which hasn’t been pre-compiled is like dividing by zero. Seriously, you might die.</p><h2 id=\"babel-to-the-rescue\">Babel to the Rescue</h2><p>More research only lead to more questions. Who is this <a href=\"http://browserify.org/\">Browserify wizard</a> and why is he dead? What is Webpack doing to fund all their highly produced branding, and why would anybody purchase a <a href=\"https://webpack.threadless.com/\">Webpack T-shirt</a>? Finally, the biggest question of all: who the hell is this Babel guy who gives off as an electric explosion in your face on hard drugs?</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-1.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/babel2-1.jpg\" class=\"kg-image\"><figcaption><em>I can't even the difference between a compiler and a Marvel franchise anymore.&nbsp;</em></figcaption></figure><p>I think it was at this point in my journey of catching up on the last decade where I went truly mad and began pacing around my room, verbally assaulting inanimate objects, and eventually even found myself washed up in a Wendys down the street, shivering and crying to myself. </p><p>Now that I've been released from the psyche ward and are free to wander the streets again, I've managed to piece together a bare-minimum understanding of what the hell is going on.</p><h3 id=\"what-the-hell-is-going-on\">What the Hell is Going On</h3><p>Because Javascript as a language is destined to be backwards compatible to a year when OJ Simpson was on trial and Windows 95 was considered cutting-edge technology, <strong>Babel</strong> aims to \"improve\" browser Javascript. Because we can't actually improve or change the underlying technology, Babel looks at new-fangled ECMA syntax (containing words like <code>require</code>,  <code>const</code> or <code>promise</code>) and compiles logic equivalent to these features with vanilla Javascript. If that sounds similar to how <strong>Gulp</strong> takes CSS preprocessors (like <em>LESS</em> or <em>SASS</em>) and turns those files into interpretable browser code, well, that's exactly what happens. </p><p><strong>Gulp</strong> is not be the only way to utilize new ECMAScript features. Babel syntax can be compiled a number of ways, such as <a href=\"https://babeljs.io/docs/en/babel-cli\">Babel's CLI</a>, or from Server-side JS, or <strong>Webpack</strong> if you're Mister-Fancy-Pants. In fact, the trend across the board is that compiling your site with modules via Webpack is winning dramatically. For all we know, this could be the last Babel Gulp tutorial ever written.</p><p>Right now we're focusing on the ability to use ECMAScript features on the frontend; a common use-case for things like... well... theming the presentation layer for a blog. If we can pull it off with Gulp, you probably won't struggle much with future methods.</p><h2 id=\"babel-npm-packages\">Babel NPM Packages</h2><p>Alright, so Babel isn't just a single NPM package. It's a lot. Let's see what's there in a basic <code>package.json</code>:</p><pre><code>{\n  \"name\": \"example\",\n  \"scripts\": {\n    \"build\": \"babel src -d lib\"\n  },\n  \"presets\": [\n    \"env\"\n  ],\n  \"engines\": {\n    \"node\": \"8.12.0\"\n  },\n  \"dependencies\": {\n    \"@babel/polyfill\": \"^7.0.0\",\n    \"@babel/runtime\": \"^7.1.2\",\n    \"@babel/runtime-corejs2\": \"^7.1.2\",\n    \"babel-runtime\": \"^6.26.0\",\n    \"gulp-resolve-dependencies\": \"^2.2.0\",\n    \"gulp-sourcemaps\": \"^2.6.4\",\n    \"gulp-uglify-es\": \"^1.0.4\",\n  },\n  \"devDependencies\": {\n    \"@babel/cli\": \"^7.1.2\",\n    \"@babel/core\": \"^7.1.2\",\n    \"@babel/plugin-syntax-dynamic-import\": \"^7.0.0\",\n    \"@babel/plugin-transform-runtime\": \"^7.1.0\",\n    \"@babel/preset-env\": \"^7.1.0\",\n  }\n}</code></pre><p>Let's not go through all these in detail- in fact, let's take a look at our <strong>gulpfile.js</strong>:</p><pre><code>'use strict';\n\nvar gulp = require('gulp'),\n  concat = require('gulp-concat'),\n  autoprefixer = require('gulp-autoprefixer'),\n  sourcemaps = require('gulp-sourcemaps'),\n  babel = require('gulp-babel'),\n  resolveDependencies = require('gulp-resolve-dependencies'),\n\n\nvar paths = {\n  scripts: {\n    src: 'src/js/*.js',\n    dest: 'assets/js'\n  }\n};\n\nfunction scripts() {\n  return gulp.src(paths.scripts.src)\n    .pipe(babel({\n          presets: ['@babel/env'],\n          plugins: ['@babel/transform-runtime', '@babel/plugin-syntax-dynamic-import']\n    }))\n    .on('error', console.error.bind(console))\n    .pipe(resolveDependencies({\n            pattern: /\\* @requires [\\s-]*(.*\\.js)/g\n        }))\n    .pipe(concat('main.min.js'))\n    .pipe(gulp.dest(paths.scripts.dest));\n}</code></pre><p>Note that I've gone ahead and removed anything from the file that has nothing to do with Babel - everything seen here is strictly relevant to building a 'scripts' task. The gist is this:</p><p><strong>babel</strong> accepts two arrays:</p><ul><li><em>Presets</em> refers to the version of ECMAScript we're targeting, and what we have implies the latest.</li><li><em>Plugins</em> allow us to pass any plugins Babel supports; in this case, we're rendering stuff at runtime. Let's not get into it too far.</li></ul><p>The rest of the function is simple: we catch errors if any arise, we resolve required dependencies, and then we finally bunch everything into a single file and shove it in our destination folder.</p><h2 id=\"just-to-be-clear\">Just to be Clear</h2><p>When it comes to the <em>best</em> way of achieving ECMAScript 2015 or 2016 etc in the browser,  I'm no expert. As previously mentioned, the understanding I've passed on to you is a sort of bare minimum to start doing great things. </p><p>As far as what others are doing, I'd be willing to bet that the vast majority of devs utilizing newer ECMAScript functions are running frameworks like React, while the rest have reached a consensus that Webpack is king and Gulp lame. These things may be true.</p><p>No matter, this new found power of ours opens a lot of doors. Just wait until you see what we do with <strong>MongoDB Stitch</strong>.</p><p></p><p></p>","url":"https://hackersandslackers.com/babel-ecma-script/","uuid":"04fe6342-9462-4d3c-9e6d-bc000e17824a","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5bb583642361b479aa119366"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867368d","title":"Upgrading to Gulp 4.0.0","slug":"upgrading-to-gulp-4","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/06/gulp2@2x.jpg","excerpt":"Upgrading to Gulp 4 and tackling the breaking changes that come with it.","custom_excerpt":"Upgrading to Gulp 4 and tackling the breaking changes that come with it.","created_at_pretty":"27 June, 2018","published_at_pretty":"28 June, 2018","updated_at_pretty":"10 April, 2019","created_at":"2018-06-27T11:06:39.000-04:00","published_at":"2018-06-28T07:30:00.000-04:00","updated_at":"2019-04-09T21:11:52.000-04:00","meta_title":"Upgrading to Gulp 4.0.0 | Hackers and Slackers","meta_description":"Upgrading to Gulp 4 and tackling the breaking changes that come with it.","og_description":"Upgrading to Gulp 4 and tackling the breaking changes that come with it.","og_image":"https://hackersandslackers.com/content/images/2018/06/gulp2@2x.jpg","og_title":"Upgrading to Gulp 4.0.0","twitter_description":"Upgrading to Gulp 4 and tackling the breaking changes that come with it.","twitter_image":"https://hackersandslackers.com/content/images/2018/06/gulp2@2x.jpg","twitter_title":"Upgrading to Gulp 4.0.0","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},"tags":[{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},{"name":"Frontend","slug":"frontend","description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","feature_image":null,"meta_description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","meta_title":"Frontend Development | Hackers and Slackers","visibility":"public"},{"name":"ExpressJS","slug":"expressjs","description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch as a simplistic Express app can evolve into a beautiful monstrosity.","feature_image":null,"meta_description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch a simplistic Express app can evolve into a beautiful monstrosity.","meta_title":"ExpressJS Framework | Hackers and Slackers","visibility":"public"},{"name":"JavaScript","slug":"javascript","description":"JavaScript covering both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","feature_image":null,"meta_description":"JavaScript topics, both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","meta_title":"Javascript Tutorials | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"}],"plaintext":"Back in the day we touched on some of the wonderful upsides of implementing Gulp\n[https://hackersandslackers.com/using-gulp-to-make-frontend-tolerable/]  into\nyour workflow. If you have been following along and happened to install the\nlatest version of Gulp, you may has noticed something horrible happen: nothing\nworked. I probably should’ve mentioned that the latest major update to Gulp,\nGulp 4, is actually a breaking update. That's my bad.\n\nStrangely, documentation around upgrading from Gulp 3.X to Gulp 4 seems to be\nlagging way behind this release, with the closest thing to official\ndocumentation being some article a guy posted on Medium a while back.\nInteresting strategy, Gulp team.\n\nWhat's the Big Deal?\nThere are a couple architectural differences with Gulp 4, for the better.\nPreviously Gulp would allows us to hold off on executing tasks until dependent\ntask were completed. If task C were dependent on the completion of tasks both A\nand B, we would represent this as such:\n\ngulp.task('default', ['A', 'B'], function() {etc});\n\ngulp.task('A', ['C'], function() {etc});\ngulp.task('B', ['C'], function() {etc});\n\ngulp.task('C', function() {etc});\n\n\nWhile this was an effective way of handling such a workflow, Gulp has made the\nprocess a bit cleaner and easier to digest with the additions of gulp.parallel \nand gulp.series.\n\nParallel  denotes tasks which should be executed in parallel, aka the same time.\n\nSeries  defines a linear order of how tasks should be executed. Parallels can\nexist inside of series, effectively resulting in a fork of tasks before moving\nto the next task in the series:\n\ngulp.task('A', function() {etc});\ngulp.task('B', function() {etc});\n\ngulp.task('C', function() {etc});\n\ngulp.task('default', gulp.series('C', gulp.parallel('A', 'B'), function() {etc}));\n\n\nIn this case, Task C forks into Tasks A and B before converging on their merry\nway to the rest of the series.\n\nQuick Install\nTo get your hands on this, first uninstall your current versions of Gulp and\nGulp CLI:\n\nnpm uninstall gulp --save-dev\nnpm uninstall gulp -g\n\n\nThen we can go ahead and reinstall Gulp as normal. Feel free to force the\nversion:\n\nnpm install gulp-cli -g\nnpm install gulp@4.0.0 -D\n\n\nExample Gulp File\nEnough with all the jargon, we both know what you came here for. let me just\npost what I see to be the bare minimum Gulpfile for your copy and pasting\npleasure:\n\nvar gulp \t= require('gulp'),\n  \tless \t= require('gulp-less'),\n  \tconcat \t= require('gulp-concat'),\n  \tuglify \t= require('gulp-uglify'),\n  \trename \t= require('gulp-rename'),\n    handlebars = require('gulp-handlebars'),\n    declare = require('gulp-declare'),\n    cleanCSS = require('gulp-clean-css');\n\nvar paths = {\n  styles: {\n    src: 'src/less/*.less',\n    dest: 'assets/css'\n  },\n  scripts: {\n    src: 'src/js/*.js',\n    dest: 'assets/js'\n  },\n  html: {\n    src: 'views/*.hbs',\n    dest: 'assets/'\n  }\n};\n\nfunction styles() {\n  return gulp\n  \t.src(paths.styles.src, {\n      sourcemaps: true\n    })\n\t.pipe(less())\n\t.pipe(rename({\n\t  basename: 'main',\n\t  suffix: '.min'\n\t}))\n.pipe(cleanCSS({debug: true}))\n.pipe(concat('main.min.css'))\n.pipe(gulp.dest(paths.styles.dest));\n}\n\nfunction scripts() {\n  return gulp\n\t.src(paths.scripts.src, {\n\t\tsourcemaps: true\n\t})\n\t.pipe(uglify())\n\t.pipe(concat('main.min.js'))\n\t.pipe(gulp.dest(paths.scripts.dest));\n}\n\nfunction templates(){\n  gulp.src('views/*.hbs')\n    .pipe(handlebars())\n    //.pipe(wrap('Handlebars.template(<%= contents %>)'))\n    .pipe(declare({\n      namespace: 'MyApp.templates',\n      noRedeclare: true, // Avoid duplicate declarations\n    }))\n    .pipe(concat('templates.js'))\n    .pipe(gulp.dest('assets/js/'));\n}\n\nfunction watch() {\n  gulp.watch(paths.scripts.src, scripts);\n  gulp.watch(paths.styles.src, styles);\n}\n\nvar build = gulp.parallel(styles, scripts, templates, watch);\n\ngulp.task(build);\ngulp.task('default', build);\n\n\nNothing crazy here: just the typical concat and minification of source files.\n\nHopefully this helps somebody wondering why their latest Gulp installation broke\ntheir Gulpfile. Perhaps next time we'll dig down deep into the shadows of Gulp\nplugins to reveal secret elite legendary Gulp hacks for 1337 hax0rs only. Or\nnot, we could do whatever honestly.","html":"<p>Back in the day we touched on some of the wonderful upsides of <a href=\"https://hackersandslackers.com/using-gulp-to-make-frontend-tolerable/\">implementing Gulp</a> into your workflow. If you have been following along and happened to install the latest version of Gulp, you may has noticed something horrible happen: <em>nothing worked</em>. I probably should’ve mentioned that the latest major update to Gulp, Gulp 4, is actually a breaking update. That's my bad.</p><p>Strangely, documentation around upgrading from Gulp 3.X to Gulp 4 seems to be lagging way behind this release, with the closest thing to official documentation being some article a guy posted on Medium a while back. Interesting strategy, Gulp team.</p><h2 id=\"what-s-the-big-deal\">What's the Big Deal?</h2><p>There are a couple architectural differences with Gulp 4, for the better. Previously Gulp would allows us to hold off on executing tasks until dependent task were completed. If task C were dependent on the completion of tasks both A and B, we would represent this as such:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">gulp.task('default', ['A', 'B'], function() {etc});\n\ngulp.task('A', ['C'], function() {etc});\ngulp.task('B', ['C'], function() {etc});\n\ngulp.task('C', function() {etc});\n</code></pre>\n<!--kg-card-end: markdown--><p>While this was an effective way of handling such a workflow, Gulp has made the process a bit cleaner and easier to digest with the additions of <strong>gulp.parallel</strong> and <strong>gulp.series</strong>.</p><p><strong>Parallel</strong> denotes tasks which should be executed in parallel, aka the same time.</p><p><strong>Series</strong> defines a linear order of how tasks should be executed. Parallels can exist inside of series, effectively resulting in a fork of tasks before moving to the next task in the series:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">gulp.task('A', function() {etc});\ngulp.task('B', function() {etc});\n\ngulp.task('C', function() {etc});\n\ngulp.task('default', gulp.series('C', gulp.parallel('A', 'B'), function() {etc}));\n</code></pre>\n<!--kg-card-end: markdown--><p>In this case, Task C forks into Tasks A and B before converging on their merry way to the rest of the series.</p><h2 id=\"quick-install\">Quick Install</h2><p>To get your hands on this, first uninstall your current versions of Gulp and Gulp CLI:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">npm uninstall gulp --save-dev\nnpm uninstall gulp -g\n</code></pre>\n<!--kg-card-end: markdown--><p>Then we can go ahead and reinstall Gulp as normal. Feel free to force the version:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">npm install gulp-cli -g\nnpm install gulp@4.0.0 -D\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"example-gulp-file\">Example Gulp File</h2><p>Enough with all the jargon, we both know what you came here for. let me just post what I see to be the bare minimum Gulpfile for your copy and pasting pleasure:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">var gulp \t= require('gulp'),\n  \tless \t= require('gulp-less'),\n  \tconcat \t= require('gulp-concat'),\n  \tuglify \t= require('gulp-uglify'),\n  \trename \t= require('gulp-rename'),\n    handlebars = require('gulp-handlebars'),\n    declare = require('gulp-declare'),\n    cleanCSS = require('gulp-clean-css');\n\nvar paths = {\n  styles: {\n    src: 'src/less/*.less',\n    dest: 'assets/css'\n  },\n  scripts: {\n    src: 'src/js/*.js',\n    dest: 'assets/js'\n  },\n  html: {\n    src: 'views/*.hbs',\n    dest: 'assets/'\n  }\n};\n\nfunction styles() {\n  return gulp\n  \t.src(paths.styles.src, {\n      sourcemaps: true\n    })\n\t.pipe(less())\n\t.pipe(rename({\n\t  basename: 'main',\n\t  suffix: '.min'\n\t}))\n.pipe(cleanCSS({debug: true}))\n.pipe(concat('main.min.css'))\n.pipe(gulp.dest(paths.styles.dest));\n}\n\nfunction scripts() {\n  return gulp\n\t.src(paths.scripts.src, {\n\t\tsourcemaps: true\n\t})\n\t.pipe(uglify())\n\t.pipe(concat('main.min.js'))\n\t.pipe(gulp.dest(paths.scripts.dest));\n}\n\nfunction templates(){\n  gulp.src('views/*.hbs')\n    .pipe(handlebars())\n    //.pipe(wrap('Handlebars.template(&lt;%= contents %&gt;)'))\n    .pipe(declare({\n      namespace: 'MyApp.templates',\n      noRedeclare: true, // Avoid duplicate declarations\n    }))\n    .pipe(concat('templates.js'))\n    .pipe(gulp.dest('assets/js/'));\n}\n\nfunction watch() {\n  gulp.watch(paths.scripts.src, scripts);\n  gulp.watch(paths.styles.src, styles);\n}\n\nvar build = gulp.parallel(styles, scripts, templates, watch);\n\ngulp.task(build);\ngulp.task('default', build);\n</code></pre>\n<!--kg-card-end: markdown--><p>Nothing crazy here: just the typical concat and minification of source files.</p><p>Hopefully this helps somebody wondering why their latest Gulp installation broke their Gulpfile. Perhaps next time we'll dig down deep into the shadows of Gulp plugins to reveal secret elite legendary Gulp hacks for 1337 hax0rs only. Or not, we could do whatever honestly.</p>","url":"https://hackersandslackers.com/upgrading-to-gulp-4/","uuid":"deb7ac06-d159-4c66-8d8a-11442ffbb395","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b33a7ff1e2df4575e4c101c"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867368c","title":"Building Page Templates in ExpressJS With Handlebars","slug":"handlebars-templating-in-expressjs","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/handlebars.jpg","excerpt":"Building views in NodeJS by incorporating layouts, partials, and everything in between.","custom_excerpt":"Building views in NodeJS by incorporating layouts, partials, and everything in between.","created_at_pretty":"25 June, 2018","published_at_pretty":"26 June, 2018","updated_at_pretty":"05 March, 2019","created_at":"2018-06-25T16:39:57.000-04:00","published_at":"2018-06-26T18:52:57.000-04:00","updated_at":"2019-03-04T21:54:13.000-05:00","meta_title":"Handlebars Templating in ExpressJS | Hackers and Slackers","meta_description":"Building views in NodeJS by incorporating layouts, partials, and everything in between.","og_description":"Building views in NodeJS by incorporating layouts, partials, and everything in between.","og_image":"https://hackersandslackers.com/content/images/2019/03/handlebars.jpg","og_title":"Handlebars Templating in ExpressJS","twitter_description":"Building views in NodeJS by incorporating layouts, partials, and everything in between.","twitter_image":"https://hackersandslackers.com/content/images/2019/03/handlebars.jpg","twitter_title":"Handlebars Templating in ExpressJS","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},"tags":[{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},{"name":"Frontend","slug":"frontend","description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","feature_image":null,"meta_description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","meta_title":"Frontend Development | Hackers and Slackers","visibility":"public"},{"name":"ExpressJS","slug":"expressjs","description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch as a simplistic Express app can evolve into a beautiful monstrosity.","feature_image":null,"meta_description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch a simplistic Express app can evolve into a beautiful monstrosity.","meta_title":"ExpressJS Framework | Hackers and Slackers","visibility":"public"},{"name":"JavaScript","slug":"javascript","description":"JavaScript covering both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","feature_image":null,"meta_description":"JavaScript topics, both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","meta_title":"Javascript Tutorials | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"}],"plaintext":"Writing HTML sucks, thus we should do everything to minimize the time we spend\nwriting it as much as possible.  Thus, we have Handlebars\n[https://handlebarsjs.com/]: a lightweight templating system for Node.\nHandlebars allows us to avoid repetitive code by compiling the final DOM\nstructure of our site via logic, typically compiled by task runners such as\nGrunt or Gulp.\n\nIf you're involved in any sort of Node development, you're probably already\nfamiliar with Handlebars to a degree. I thought I was, but it isn't until we\nneed to start a new project from scratch that we realize that we totally forgot\nthe configuration process we took last time. That's why I'm here.\n\nLet's have a quick refresher on the parts that make up Handlebars\n\n * Layouts  are the most ambiguous high-level layer; these are commonly used to\n   set underlying page metadata as well as general layout (for lack of a better\n   term).\n * Pages  are templates which equate to one type  of page. For example, the\n   'post' page on this site is unique from, say, the homepage. Because all posts\n   share elements with one another, hundreds of posts share this same template.\n * Partials  are snippets which can be shared between pages, such as navigation.\n * A Context  is content which is passed to templates and result in being the\n   page's content\n * Helpers  are the closest we get to logic in Handlebars: these allow us to\n   display or omit content based on conditionals such as if  statements. For\n   example: showing an author's avatar only if they have uploaded an image.\n\nProject Setup\nWe're going to use the Express /views  folder to contain all of our handlebars\ngoodness. Our project should look something like this:\n\nmyapp\n├── bin\n├── build\n├── routes\n├── src\n├── views\n│   ├── layouts/\n│   ├── partials/\n│   └── error.hbs\n│   └── index.hbs\n│   └── login.hbs\n│   └── etc\n└── README.md\n└── app.js\n└── package.json\n\n\nIt's important to distinguish that we've separated our views folder into three\nclassifications for layouts, partials, and pages, where pages occupy the root \n/views  directory. It's important to keep this distinction as our structure\naffects how we serve up these templates.\n\nConfigure that Ish\nInstall handlebars:\n\nnpm install handlebars --save\n\n\nCrack open your app.js  file or whatever it is you call that thing. Require\nhandlebars:\n\nvar hbs = require( 'express-handlebars');\n\n\nNext we'll configure Express to use Handlebars as the view engine, and tell\nExpress where to find these files:\n\n// view engine setup\napp.set('view engine', 'hbs');\n\napp.engine( 'hbs', hbs( {\n  extname: 'hbs',\n  defaultView: 'default',\n  layoutsDir: __dirname + '/views/pages/',\n  partialsDir: __dirname + '/views/partials/'\n}));\n\n\nExpress assumes by default that we're storing our views in the '/views' folder,\nwhich we are. We take this a step further by specifying which subfolders our \npartials  and layouts  are in above. We can save pages  directly in /views.\n\nNotice that we're also setting a default layout. We can override this in our\nroutes if needed, but setting a default layout is useful for loading pages in an\nhtml wrapper container page metadata.\n\nKicks on Route 66\nLet's create our first route in routes/index.js. We're going to load a view\ncalled home  into a layout called default:\n\nvar express = require('express');\nvar router = express.Router();\n\nrouter.get('/', function(req, res, next) {\n  res.render('home', {layout: 'default', template: 'home-template'});\n});\n\n\nThis will render views/home.hbs  into views/layouts/default.hbs, provided are\nviews are set up correctly. We also pass a custom value template  which is\nuser-defined; more on that below.\n\nBasic Usage\nLet's finally take a look at our actual Handlebars views. Here's default.hbs:\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <title>Best Website</title>\n  <meta name=\"HandheldFriendly\" content=\"True\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, viewport-fit=cover\" />\n  <link rel=\"stylesheet\" href=\"/css/main.min.css\">\n</head>\n<body class=\"{{template}}\">\n  <div class=\"container\">\n\t  {{{body}}}\n  </div>\n  {{> footer}}\n</body>\n</html>\n\n\nWe have three values here: {{template}}  and {{{body}}}, and {{> footer}}.\n\n{{template}}  is a value with double brackets, thus is expecting linear data. We\npassed template  in our route: this sets the body class to equal home-template \non the chance that we'll want to apply page-specific styles or logic in the\nfuture.\n\n{{{body}}}  is rocking the triple brackets, and is reserved specifically to\nserve this purpose: loading templates into other templates.\n\nLastly we have {{> footer}}. This will load a partial named footer  from \nviews/partials/footer.hbs, provided that we create it. The difference between\nhow {{{body}}}  and {{> footer}}  are being loaded have to do with a general\nworkflow philosophy; pages are the main event and thus are loaded into layouts\nby their command. Partials can be called by pages at will whenever we please.\n\nThere's obviously a lot more to Handlebars- the fun doesn't truly begin until we\npull dynamic values from databases or wherever. We'll get there.","html":"<p>Writing HTML sucks, thus we should do everything to minimize the time we spend writing it as much as possible.  Thus, we have <a href=\"https://handlebarsjs.com/\">Handlebars</a>: a lightweight templating system for Node. Handlebars allows us to avoid repetitive code by compiling the final DOM structure of our site via logic, typically compiled by task runners such as Grunt or Gulp.</p><p>If you're involved in any sort of Node development, you're probably already familiar with Handlebars to a degree. I thought I was, but it isn't until we need to start a new project from scratch that we realize that we totally forgot the configuration process we took last time. That's why I'm here.</p><p>Let's have a quick refresher on the parts that make up Handlebars</p><ul><li><strong>Layouts</strong> are the most ambiguous high-level layer; these are commonly used to set underlying page metadata as well as general layout (for lack of a better term).</li><li><strong>Pages</strong> are templates which equate to one <em>type</em> of page. For example, the 'post' page on this site is unique from, say, the homepage. Because all posts share elements with one another, hundreds of posts share this same template.</li><li><strong>Partials</strong> are snippets which can be shared between pages, such as navigation.</li><li>A <strong>Context</strong> is content which is passed to templates and result in being the page's content</li><li><strong>Helpers</strong> are the closest we get to logic in Handlebars: these allow us to display or omit content based on conditionals such as <em>if</em> statements. For example: showing an author's avatar only if they have uploaded an image.</li></ul><h2 id=\"project-setup\">Project Setup</h2><p>We're going to use the Express <em>/views</em> folder to contain all of our handlebars goodness. Our project should look something like this:</p><pre><code class=\"language-bash\">myapp\n├── bin\n├── build\n├── routes\n├── src\n├── views\n│   ├── layouts/\n│   ├── partials/\n│   └── error.hbs\n│   └── index.hbs\n│   └── login.hbs\n│   └── etc\n└── README.md\n└── app.js\n└── package.json\n</code></pre>\n<p>It's important to distinguish that we've separated our views folder into three classifications for <strong>layouts</strong>, <strong>partials</strong>, and <strong>pages</strong>, where pages occupy the root <code>/views</code> directory. It's important to keep this distinction as our structure affects how we serve up these templates.</p><h2 id=\"configure-that-ish\">Configure that Ish</h2><p>Install handlebars:</p><pre><code class=\"language-bash\">npm install handlebars --save\n</code></pre>\n<p>Crack open your <code>app.js</code> file or whatever it is you call that thing. Require handlebars:</p><pre><code class=\"language-javascript\">var hbs = require( 'express-handlebars');\n</code></pre>\n<p>Next we'll configure Express to use Handlebars as the view engine, and tell Express where to find these files:</p><pre><code class=\"language-javascript\">// view engine setup\napp.set('view engine', 'hbs');\n\napp.engine( 'hbs', hbs( {\n  extname: 'hbs',\n  defaultView: 'default',\n  layoutsDir: __dirname + '/views/pages/',\n  partialsDir: __dirname + '/views/partials/'\n}));\n</code></pre>\n<p>Express assumes by default that we're storing our views in the '/views' folder, which we are. We take this a step further by specifying which subfolders our <strong>partials</strong> and <strong>layouts</strong> are in above. We can save <strong>pages</strong> directly in <code>/views</code>.</p><p>Notice that we're also setting a default layout. We can override this in our routes if needed, but setting a default layout is useful for loading pages in an html wrapper container page metadata.</p><h2 id=\"kicks-on-route-66\">Kicks on Route 66</h2><p>Let's create our first route in <code>routes/index.js</code>. We're going to load a view called <em>home</em> into a layout called <em>default</em>:</p><pre><code class=\"language-javascript\">var express = require('express');\nvar router = express.Router();\n\nrouter.get('/', function(req, res, next) {\n  res.render('home', {layout: 'default', template: 'home-template'});\n});\n</code></pre>\n<p>This will render <code>views/home.hbs</code> into <code>views/layouts/default.hbs</code>, provided are views are set up correctly. We also pass a custom value <strong>template</strong> which is user-defined; more on that below.</p><h2 id=\"basic-usage\">Basic Usage</h2><p>Let's finally take a look at our actual Handlebars views. Here's <strong>default.hbs</strong>:</p><pre><code class=\"language-handlebars\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset=&quot;utf-8&quot; /&gt;\n  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;\n  &lt;title&gt;Best Website&lt;/title&gt;\n  &lt;meta name=&quot;HandheldFriendly&quot; content=&quot;True&quot; /&gt;\n  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, viewport-fit=cover&quot; /&gt;\n  &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/main.min.css&quot;&gt;\n&lt;/head&gt;\n&lt;body class=&quot;{{template}}&quot;&gt;\n  &lt;div class=&quot;container&quot;&gt;\n\t  {{{body}}}\n  &lt;/div&gt;\n  {{&gt; footer}}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>We have three values here: <strong>{{template}}</strong> and <strong>{{{body}}}</strong>, and <strong>{{&gt; footer}}</strong>.</p><p><strong>{{template}}</strong> is a value with double brackets, thus is expecting linear data. We passed <em>template</em> in our route: this sets the body class to equal <em>home-template</em> on the chance that we'll want to apply page-specific styles or logic in the future.</p><p><strong>{{{body}}}</strong> is rocking the triple brackets, and is reserved specifically to serve this purpose: loading templates into other templates.</p><p>Lastly we have <strong>{{&gt; footer}}</strong>. This will load a partial named <em>footer</em> from <code>views/partials/footer.hbs</code>, provided that we create it. The difference between how <code>{{{body}}}</code> and <code>{{&gt; footer}}</code> are being loaded have to do with a general workflow philosophy; pages are the main event and thus are loaded into layouts by their command. Partials can be called by pages at will whenever we please.</p><p>There's obviously a lot more to Handlebars- the fun doesn't truly begin until we pull dynamic values from databases or wherever. We'll get there.</p>","url":"https://hackersandslackers.com/handlebars-templating-in-expressjs/","uuid":"9258a456-aee9-4d91-a36b-b1db735270b7","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b31531d04c0af72fa9a7681"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673683","title":"Read and Write to S3 Buckets via NodeJS","slug":"accessing-private-s3-objects-with-node","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/06/nodes3@2x.jpg","excerpt":"Node’s most popular package interacting with the most popular file store on the world’s most popular cloud.","custom_excerpt":"Node’s most popular package interacting with the most popular file store on the world’s most popular cloud.","created_at_pretty":"21 June, 2018","published_at_pretty":"22 June, 2018","updated_at_pretty":"28 March, 2019","created_at":"2018-06-21T19:26:44.000-04:00","published_at":"2018-06-22T07:30:00.000-04:00","updated_at":"2019-03-28T05:25:16.000-04:00","meta_title":"Accessing Private S3 Objects with Node | Hackers and Slackers","meta_description":"Node’s most popular package interacting with the most popular file store on the world’s most popular cloud.","og_description":"Node’s most popular package interacting with the most popular file store on the world’s most popular cloud.","og_image":"https://hackersandslackers.com/content/images/2018/06/nodes3@2x.jpg","og_title":"Accessing Private S3 Objects with Node","twitter_description":"Node’s most popular package interacting with the most popular file store on the world’s most popular cloud.","twitter_image":"https://hackersandslackers.com/content/images/2018/06/nodes3@2x.jpg","twitter_title":"Accessing Private S3 Objects with Node","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},"tags":[{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},{"name":"AWS","slug":"aws","description":"Monolithic cloud architecture via microservices. Become familiar with AWS products, account administration, security practices, and tips to make it all easier.","feature_image":null,"meta_description":"Become familiar with AWS services, account administration, security practices, and tips to make it all easier.","meta_title":"Learn AWS | Hackers and Slackers","visibility":"public"},{"name":"ExpressJS","slug":"expressjs","description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch as a simplistic Express app can evolve into a beautiful monstrosity.","feature_image":null,"meta_description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch a simplistic Express app can evolve into a beautiful monstrosity.","meta_title":"ExpressJS Framework | Hackers and Slackers","visibility":"public"},{"name":"JavaScript","slug":"javascript","description":"JavaScript covering both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","feature_image":null,"meta_description":"JavaScript topics, both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","meta_title":"Javascript Tutorials | Hackers and Slackers","visibility":"public"}],"plaintext":"We here at H+S are dedicated to one simple cause: creating posts about oddly\nspecific programming scenarios. Somewhere in the world as sad soul is looking to\nprogrammatically access files from an S3 server while keeping their bucket\nprivate. To that person: we heard you.\n\nThere are plenty of reasons you'd want to access files in S3. For example, let's\nsay you read that post\n[https://hackersandslackers.com/using-pandas-with-aws-lambda/]  about using\nPandas in a Lambda function. Since you're already familiar with PyMySQL\n[https://hackersandslackers.com/using-pymysql/], you may hypothetically be in a\nposition to export data from a DB query to a CSV saved in S3. I bet you can\nguess what I've been doing lately.\n\nConfigure the AWS CLI on your VPS\nThe easiest and safest way to interact with other AWS services on your EC2\ninstance (or VPS of choice) is via the AWS CLI. This is easily installed as a\nglobal Python3 library:\n\n$ pip3 install awscli\n\n\nWith the CLI installed we'll be able to do something truly magical: set our AWS\nconfiguration globally. This means that any time we use interact with a\nmicroservice  (such as S3), the boto3  library will always look to the files\nstored in ~/.aws/  for our keys and secrets, without us specifying.  This\ncritical from a security perspective as it removes all  mentions of credentials\nfrom our codebase: including the location of said secrets.\n\nUse $ aws configure  to kickstart the process:\n\n$ aws configure\n$ AWS Access Key ID [None]: YOURACCESSKEY\n$ AWS Secret Access Key [None]: YOURSECRETKEY\n$ Default region name [None]: us-east-2\n$ Default output format [None]: json\n\n\nThis creates a couple config files for us. If we never need to modify these\nfiles, they can be found here:\n\n$ vim ~/.aws/credentials\n$ vim ~/.aws/config\n\n\nNode Time\nWe'll assume you have an app set up with some basic routing, such as the\nbarebones ExpressJS set up.\n\nIn your app we'll need to add 2 dependencies:\n\n$ npm install --save aws-sdk\n$ npm install --save aws-config\n\n\nNow we'll create a route.\n\nvar awsConfig = require('aws-config');\nvar AWS = require('aws-sdk');\n\nrouter.get('/export', function(req, res, next) {\n    var file = 'df.csv';\n    console.log('Trying to download file', fileKey);\n\n    var s3 = new AWS.S3({});\n\n    var options = {\n        Bucket: 'your-bucket-name',\n        Key: file,\n    };\n\n    s3.getObject(options, function(err, data) {\n      res.attachment(file);\n      res.send(data.Body);\n  });\n});\n\n\nNotice the empty curly brackets in new AWS.S3({}). If we had decided to\nbarbarically hardcode our credentials into our source code, normally those\nvalues would live between those brackets as an object. When the brackets are\nempty, the AWS library automagically knows to look to our AWS credentials file\nfor our access and secret keys. \n\nThis is how you'd do things the wrong way, just in case you wanted to be\nentertained:\n\nvar s3 = new AWS.S3({\n    'AccessKeyID': 'YOURACCESSKEY', \n    'SecretAccessKey': 'YOURSECRETACCESSKEY', \n    'Region': 'YOUR REGION'\n});\n\n\nYeah, that totally won't get committed somewhere by accident. Shake-my-head fam.\n\nThat's pretty much it: this route will prompt a download of the target file upon\nhitting the route. As much as I'm sure we'd all love to sit here and go through\nmore complicated use cases, let's just avoid Callback Hell altogether and enjoy\nthe rest of our day.\n\nHell will have to wait until next time.","html":"<p>We here at H+S are dedicated to one simple cause: creating posts about oddly specific programming scenarios. Somewhere in the world as sad soul is looking to programmatically access files from an S3 server while keeping their bucket private. To that person: we heard you.</p><p>There are plenty of reasons you'd want to access files in S3. For example, let's say you read <a href=\"https://hackersandslackers.com/using-pandas-with-aws-lambda/\">that post</a> about using Pandas in a Lambda function. Since you're already familiar with <a href=\"https://hackersandslackers.com/using-pymysql/\">PyMySQL</a>, you may hypothetically be in a position to export data from a DB query to a CSV saved in S3. I bet you can guess what I've been doing lately.</p><h2 id=\"configure-the-aws-cli-on-your-vps\">Configure the AWS CLI on your VPS</h2><p>The easiest and safest way to interact with other AWS services on your EC2 instance (or VPS of choice) is via the AWS CLI. This is easily installed as a global Python3 library:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ pip3 install awscli\n</code></pre>\n<!--kg-card-end: markdown--><p>With the CLI installed we'll be able to do something truly magical: set our AWS configuration globally. This means that any time we use interact with a microservice  (such as S3), the <strong>boto3</strong> library will always look to the files stored in <code>~/.aws/</code> for our keys and secrets, without us specifying.  This critical from a security perspective as it removes <em>all</em> mentions of credentials from our codebase: including the location of said secrets.</p><p>Use <code>$ aws configure</code> to kickstart the process:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ aws configure\n$ AWS Access Key ID [None]: YOURACCESSKEY\n$ AWS Secret Access Key [None]: YOURSECRETKEY\n$ Default region name [None]: us-east-2\n$ Default output format [None]: json\n</code></pre>\n<!--kg-card-end: markdown--><p>This creates a couple config files for us. If we never need to modify these files, they can be found here:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ vim ~/.aws/credentials\n$ vim ~/.aws/config\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"node-time\">Node Time</h2><p>We'll assume you have an app set up with some basic routing, such as the barebones ExpressJS set up.</p><p>In your app we'll need to add 2 dependencies:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ npm install --save aws-sdk\n$ npm install --save aws-config\n</code></pre>\n<!--kg-card-end: markdown--><p>Now we'll create a route.</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">var awsConfig = require('aws-config');\nvar AWS = require('aws-sdk');\n\nrouter.get('/export', function(req, res, next) {\n    var file = 'df.csv';\n    console.log('Trying to download file', fileKey);\n\n    var s3 = new AWS.S3({});\n\n    var options = {\n        Bucket: 'your-bucket-name',\n        Key: file,\n    };\n\n    s3.getObject(options, function(err, data) {\n      res.attachment(file);\n      res.send(data.Body);\n  });\n});\n</code></pre>\n<!--kg-card-end: markdown--><p>Notice the empty curly brackets in <code>new AWS.S3({})</code>. If we had decided to barbarically hardcode our credentials into our source code, normally those values would live between those brackets as an object. When the brackets are empty, the AWS library automagically knows to look to our AWS credentials file for our access and secret keys. </p><p>This is how you'd do things the <strong><em>wrong </em></strong>way, just in case you wanted to be entertained:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">var s3 = new AWS.S3({\n    'AccessKeyID': 'YOURACCESSKEY', \n    'SecretAccessKey': 'YOURSECRETACCESSKEY', \n    'Region': 'YOUR REGION'\n});\n</code></pre>\n<!--kg-card-end: markdown--><p>Yeah, that totally won't get committed somewhere by accident. Shake-my-head fam.</p><p>That's pretty much it: this route will prompt a download of the target file upon hitting the route. As much as I'm sure we'd all love to sit here and go through more complicated use cases, let's just avoid Callback Hell altogether and enjoy the rest of our day.</p><p>Hell will have to wait until next time.</p>","url":"https://hackersandslackers.com/accessing-private-s3-objects-with-node/","uuid":"210f5e64-7599-43d0-a148-d68373a9d3c4","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b2c34345f0bc81011d7cfc6"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673660","title":"Using Gulp: Tasks to Make Frontend Tolerable","slug":"using-gulp-to-make-frontend-tolerable","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/gulp-1.jpg","excerpt":"Optimize your frontend code with Gulp: the task runner to make you production-ready.","custom_excerpt":"Optimize your frontend code with Gulp: the task runner to make you production-ready.","created_at_pretty":"30 May, 2018","published_at_pretty":"30 May, 2018","updated_at_pretty":"28 March, 2019","created_at":"2018-05-29T23:28:01.000-04:00","published_at":"2018-05-30T12:40:20.000-04:00","updated_at":"2019-03-28T05:58:57.000-04:00","meta_title":"Using Gulp to Make Frontend Tolerable | Hackers and Slackers","meta_description":"Automate tasks for production deployment such as compiling your CSS and JS","og_description":"Optimize your frontend code with Gulp: the task runner to make you production-ready.","og_image":"https://hackersandslackers.com/content/images/2019/03/gulp-1.jpg","og_title":"Using Gulp to Make Frontend Tolerable","twitter_description":"Automate the lame stuff","twitter_image":"https://hackersandslackers.com/content/images/2019/03/gulp-1.jpg","twitter_title":"Using Gulp to Make Frontend Tolerable","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},"tags":[{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},{"name":"ExpressJS","slug":"expressjs","description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch as a simplistic Express app can evolve into a beautiful monstrosity.","feature_image":null,"meta_description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch a simplistic Express app can evolve into a beautiful monstrosity.","meta_title":"ExpressJS Framework | Hackers and Slackers","visibility":"public"},{"name":"Frontend","slug":"frontend","description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","feature_image":null,"meta_description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","meta_title":"Frontend Development | Hackers and Slackers","visibility":"public"},{"name":"JavaScript","slug":"javascript","description":"JavaScript covering both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","feature_image":null,"meta_description":"JavaScript topics, both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","meta_title":"Javascript Tutorials | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"}],"plaintext":"NOTE:  This tutorial was written for Gulp versions <4.0.0. Check out this post\n[https://hackersandslackers.com/upgrading-to-gulp-4/]  for Gulp >4.0.0\n\n\n--------------------------------------------------------------------------------\n\nPerhaps the whole obligatory-Gulp-tutorial on [Some Coding Blog] thing has\nbecome a bit cliché at this point. Haters may do as they will, but I 'll take\nany opportunity to jam as many SEO keywords I can get at this point. You know\nthe ones: Gulp, ExpressJS, NodeJS, or perhaps even React Vue frontend Ubuntu\nframework API social cloud data entrepreneur community. \n\nRegardless, we all need our own copy+paste references from time-to-time, or even\nworse: when we copy/paste our gulpfile.js from project to project and forget\nwhat they actually do. I won't tell anybody.\n\nQuick 101\nNodeJS developers use Gulp to automate necessary processes before moving their\nfrontend code to production. This includes minifying files to make them run\nfaster, and to also make them unreadable to people who would otherwise make fun\nof your mediocre Javascript which you were forced to crank out on a short\ntimeline.\n\nGeneral Workflow\nLet's say you're running a basic Express app. As opposed to developing and\nstoring files in a directory such as /public, Gulp enables us to develop in one\ndirectory, and compile to another. That means we can keep our horrible\nuncompressed and uncompiled  source in a folder such as /src, and output them to\na directory such as /dist, which would be our public-facing output. An Express\nfile structure utilizing this would look something like this:\n\n  |- src/\n      |- js/ \n      |- scss/\n  |- dist/\n      |- js/ \n      |- css/\n      |- img/\n      |- fonts/\n  |- views\n      |- index.hbs\n  |- routes\n      |- index.js\n  |- gulpfile.js\n  |- node_modules/\n  |- package.json\n  |- app.js\n\n\nInstallation\nFirst install the gulp CLI:\n\nnpm install --global gulp-cli\n\n\nNext, enter your project folder and install gulp while saving it as  a project\ndependency.\n\nnpm install --save gulp\n\n\nHow it Works\nGulp doesn't do much on its own; the true magic lies within its vast library of\nplugins. Each individual plugin typically covers a simple task, such as\ncompiling LESS or SASS files, or minifying client-side JavaScript and CSS. The\nlimited scope of plugins entails a bit of setup in our gulpfile to chain said\ntasks together, but it also makes Gulp highly customizable to cater to your\nspecific needs.\n\nThe Gulpfile\nGulp works by invoking a file called gulpfile.js in your main directory, which\nyou'll need to create and set up yourself (sorry). The file is divided into two\nmain parts: requiring (importing) plugins, and defining which tasks to run when\ngulp is invoked. A basic worthless gulpfile might look something like:\n\nvar gulp = require('gulp');\n\ngulp.task('default', function () {\n  console.log('Sup World!');\n});\n\n\nTo make this file useful, we'll need to install more plugins and set up tasks\nfor them.\n\nEssential Plugins\nLet's look at what each one does. Keep in mind there are thousands of Gulp\nplugins, so let's just touch on the big hitters here.\n\nKeep in mind to install any of these plugins, you'll simply need to run the npm\ninstallation in your project directory:\n\nnpm install --save [plugin name]\n\n\ngulp-uglify\nMinifies Javascript or CSS files, and outputs the result into the directory of\nyour choice. This plugin can be reused across filetypes, as we'll demonstrate in\na moment.\n\ngulp-concat\nCombines minified files into a single file. This is essential for browser\nperformance as it reduces the number of http requests being made every time your\npage loads.\n\ngulp-rename\nRenames files (such as those produced by gulp-concat).\n\ngulp-sass / gulp-less\nCompiles your Sass or Less files into CSS and outputs to the directory of your\nchoice.\n\ngulp-minify-css\nMinifies CSS, as you might imagine. This can chained to gulp-sass or gulp-less\nto minify the CSS files those tasks produce.\n\ngulp-autoprefixer\nThank god for this. Autoprefixer finds CSS styles and adds the browser-specific\nequivalents to your CSS, so you don't need to write the same style 10 times for\nevery horrible browser in existence. This means you can write styles such as:\n\nbackground: linear-gradient(to bottom, white, black);\n\n\nAnd have them output as:\n\nbackground: -webkit-gradient(linear, left top, left bottom, from(white), to(black));\nbackground: -webkit-linear-gradient(top, white, black);\nbackground: -o-linear-gradient(top, white, black);\nbackground: linear-gradient(to bottom, white, black);\n\n\ngulp-watch\nAllows Gulp to listen for changes being made to source files, so that it may\nfire an event upon file change, such as:\n\ngulp-livereload\nCompiles the changes made in directories being watched via gulp-watch\nautomatically while you work.\n\nNext Level Pro Shit\nWhile these plugins aren't 'essential', they are really cool and helpful.\n\ngulp-sourcemaps\nAn obnoxious side effect of minifying and concating your files is when it comes\ntime to debug errors on the frontend. Errors occurring at \"line 235\" are pretty\nuseless considering your error codes are referring to the compiled files,\nwithout granting a hint as to where the problematic code may have come from in\nthe first place. gulp-sourcemaps resolves this by adding commenting paths to\nwhich source files your code originated from.\n\ngulp-browser-sync\nBy leveraging BrowserSync [https://browsersync.io/], this plugin immediately\nrefreshes an open browser which links to files just changed by gulp. This means\nyou can code, compile, and see the results in real time. This takes a bit extra\neffort to set up, so be sure to check their documentation\n[https://browsersync.io/docs].\n\ngulp-load-plugins\nNormally when creating our gulpfile, we need to start off by requiring our\nplugins via something like this:\n\nvar gulp = require('gulp'),\n    del = require('del'),\n    concat = require('gulp-concat'),\n    rename = require('gulp-rename'),\n    uglify = require('gulp-uglify'),\n    sass = require('gulp-sass'),\n    watch = require('gulp-watch'),\n    livereload = require('gulp-livereload'),\n    minifyCss = require('gulp-minify-css'),\n    autoprefixer = require('gulp-autoprefixer');\n\n\ngulp-load-plugins  instead checks your package.json for any Gulp plugins and\nimmediately requires them, thus saving you a few precious minutes. The output\ninstead looks like:\n\nvar $ = require('gulp-load-plugins')();\n\n\nBuilding The Gulpfile\nNow that we have all these dope plugins, we can finally build our gulpfile.\nHere's an example (without using gulp-load-plugins  for now):\n\nvar gulp = require('gulp'),\n    del = require('del'),\n    concat = require('gulp-concat'),\n    rename = require('gulp-rename'),\n    uglify = require('gulp-uglify'),\n    sass = require('gulp-sass'),\n    watch = require('gulp-watch'),\n    livereload = require('gulp-livereload'),\n    minifyCss = require('gulp-minify-css'),\n    autoprefixer = require('gulp-autoprefixer');\n\ngulp.task('styles', function() {\n    return gulp.src('src/sass/*.scss')\n        .pipe(sass({outputStyle: 'expanded', unix_newlines: true, linefeed: \"lf\"}).on('error', sass.logError))\n        .pipe(autoprefixer())\n        .pipe(minifyCss({\n            keepSpecialComments: 1\n        }))\n        .pipe(rename(\"theme.min.css\"))\n        .pipe(gulp.dest('./assets/css/'));\n});\n\n\ngulp.task('scripts', function() {\n    return gulp.src(['src/js/plugin/*.js', 'src/js/base.js'])\n        .pipe(uglify())\n        .pipe(concat('theme.min.js'))\n        .pipe(gulp.dest('assets/js'));\n});\n\n\ngulp.task('ghost_config', ['scripts'], function() {\n    return gulp.src(['src/js/config.js', 'assets/js/theme.min.js'])\n        .pipe(concat('theme.min.js'))\n        .pipe(gulp.dest('assets/js'));\n});\n\n\ngulp.task('default', function() {\n    gulp.start('styles', 'scripts', 'ghost_config', 'watch');\n});\n\n\ngulp.task('watch', function() {\n    gulp.watch('src/sass/*.scss', ['styles']);\n    gulp.watch('src/js/*.js', ['scripts', 'ghost_config']);\n    livereload.listen();\n    gulp.watch(['*']).on('change', livereload.changed);\n});\n\n\n\nJust by looking at the file itself, you may be able to dissect what's happening.\nAfter we require our plugins, we define our tasks,  which are essentially\nindividual jobs consisting of one or more gulp plugins depending on how you've\nchained them.\n\nHere's the general terminology to help clear things up:\n\n * gulp.task: Defines a task consisting of one of more plugin actions.\n * gulp.src:  Specifies the folder containing source files.\n * gulp.dest: Defines the folder to output compiled files to.\n * pipe(): Allows multiple events to be chained together in a single task.\n\nWrapping up\nOnce your file is ready to go, simply run the grunt  command in your project\ndirectory. You should see Gulp output the status of each task you've set, as\nwell as any errors which may have occurred.\n\nIn short, just use Gulp. The scientific community has come to a consensus that\nGulp is objectively superior to its counterpart, Grunt. Ask Matt, he's a\nscientist.\n\nPeace fam!","html":"<p><em><strong>NOTE</strong>:  This tutorial was written for Gulp versions &lt;4.0.0. Check out <a href=\"https://hackersandslackers.com/upgrading-to-gulp-4/\">this post</a> for Gulp &gt;4.0.0</em></p><!--kg-card-begin: hr--><hr><!--kg-card-end: hr--><p>Perhaps the whole obligatory-Gulp-tutorial on [Some Coding Blog] thing has become a bit cliché at this point. Haters may do as they will, but I 'll take any opportunity to jam as many SEO keywords I can get at this point. You know the ones: Gulp, ExpressJS, NodeJS, or perhaps even React Vue frontend Ubuntu framework API social cloud data entrepreneur community. </p><p>Regardless, we all need our own copy+paste references from time-to-time, or even worse: when we copy/paste our gulpfile.js from project to project and forget what they actually do. I won't tell anybody.</p><h2 id=\"quick-101\">Quick 101</h2><p>NodeJS developers use Gulp to automate necessary processes before moving their frontend code to production. This includes minifying files to make them run faster, and to also make them unreadable to people who would otherwise make fun of your mediocre Javascript which you were forced to crank out on a short timeline.</p><h3 id=\"general-workflow\">General Workflow</h3><p>Let's say you're running a basic Express app. As opposed to developing and storing files in a directory such as /public, Gulp enables us to develop in one directory, and compile to another. That means we can keep our horrible uncompressed and uncompiled  source in a folder such as /src, and output them to a directory such as /dist, which would be our public-facing output. An Express file structure utilizing this would look something like this:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">  |- src/\n      |- js/ \n      |- scss/\n  |- dist/\n      |- js/ \n      |- css/\n      |- img/\n      |- fonts/\n  |- views\n      |- index.hbs\n  |- routes\n      |- index.js\n  |- gulpfile.js\n  |- node_modules/\n  |- package.json\n  |- app.js\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"installation\">Installation</h3><p>First install the gulp CLI:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">npm install --global gulp-cli\n</code></pre>\n<!--kg-card-end: markdown--><p>Next, enter your project folder and install gulp while saving it as  a project dependency.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">npm install --save gulp\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"how-it-works\">How it Works</h2><p>Gulp doesn't do much on its own; the true magic lies within its vast library of plugins. Each individual plugin typically covers a simple task, such as compiling LESS or SASS files, or minifying client-side JavaScript and CSS. The limited scope of plugins entails a bit of setup in our gulpfile to chain said tasks together, but it also makes Gulp highly customizable to cater to your specific needs.</p><h3 id=\"the-gulpfile\">The Gulpfile</h3><p>Gulp works by invoking a file called gulpfile.js in your main directory, which you'll need to create and set up yourself (sorry). The file is divided into two main parts: requiring (importing) plugins, and defining which tasks to run when gulp is invoked. A basic worthless gulpfile might look something like:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">var gulp = require('gulp');\n\ngulp.task('default', function () {\n  console.log('Sup World!');\n});\n</code></pre>\n<!--kg-card-end: markdown--><p>To make this file useful, we'll need to install more plugins and set up tasks for them.</p><h2 id=\"essential-plugins\">Essential Plugins</h2><p>Let's look at what each one does. Keep in mind there are thousands of Gulp plugins, so let's just touch on the big hitters here.</p><p>Keep in mind to install any of these plugins, you'll simply need to run the npm installation in your project directory:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">npm install --save [plugin name]\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"gulp-uglify\">gulp-uglify</h3><p>Minifies Javascript or CSS files, and outputs the result into the directory of your choice. This plugin can be reused across filetypes, as we'll demonstrate in a moment.</p><h3 id=\"gulp-concat\">gulp-concat</h3><p>Combines minified files into a single file. This is essential for browser performance as it reduces the number of http requests being made every time your page loads.</p><h3 id=\"gulp-rename\">gulp-rename</h3><p>Renames files (such as those produced by gulp-concat).</p><h3 id=\"gulp-sass-gulp-less\">gulp-sass / gulp-less</h3><p>Compiles your Sass or Less files into CSS and outputs to the directory of your choice.</p><h3 id=\"gulp-minify-css\">gulp-minify-css</h3><p>Minifies CSS, as you might imagine. This can chained to gulp-sass or gulp-less to minify the CSS files those tasks produce.</p><h3 id=\"gulp-autoprefixer\">gulp-autoprefixer</h3><p>Thank god for this. Autoprefixer finds CSS styles and adds the browser-specific equivalents to your CSS, so you don't need to write the same style 10 times for every horrible browser in existence. This means you can write styles such as:</p><!--kg-card-begin: markdown--><pre><code class=\"language-css\">background: linear-gradient(to bottom, white, black);\n</code></pre>\n<!--kg-card-end: markdown--><p>And have them output as:</p><!--kg-card-begin: markdown--><pre><code class=\"language-css\">background: -webkit-gradient(linear, left top, left bottom, from(white), to(black));\nbackground: -webkit-linear-gradient(top, white, black);\nbackground: -o-linear-gradient(top, white, black);\nbackground: linear-gradient(to bottom, white, black);\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"gulp-watch\">gulp-watch</h3><p>Allows Gulp to listen for changes being made to source files, so that it may fire an event upon file change, such as:</p><h3 id=\"gulp-livereload\">gulp-livereload</h3><p>Compiles the changes made in directories being watched via gulp-watch automatically while you work.</p><h2 id=\"next-level-pro-shit\">Next Level Pro Shit</h2><p>While these plugins aren't 'essential', they are really cool and helpful.</p><h3 id=\"gulp-sourcemaps\">gulp-sourcemaps</h3><p>An obnoxious side effect of minifying and concating your files is when it comes time to debug errors on the frontend. Errors occurring at \"line 235\" are pretty useless considering your error codes are referring to the compiled files, without granting a hint as to where the problematic code may have come from in the first place. gulp-sourcemaps resolves this by adding commenting paths to which source files your code originated from.</p><h3 id=\"gulp-browser-sync\">gulp-browser-sync</h3><p>By leveraging <a href=\"https://browsersync.io/\">BrowserSync</a>, this plugin immediately refreshes an open browser which links to files just changed by gulp. This means you can code, compile, and see the results in real time. This takes a bit extra effort to set up, so be sure to check their <a href=\"https://browsersync.io/docs\">documentation</a>.</p><h3 id=\"gulp-load-plugins\">gulp-load-plugins</h3><p>Normally when creating our gulpfile, we need to start off by requiring our plugins via something like this:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">var gulp = require('gulp'),\n    del = require('del'),\n    concat = require('gulp-concat'),\n    rename = require('gulp-rename'),\n    uglify = require('gulp-uglify'),\n    sass = require('gulp-sass'),\n    watch = require('gulp-watch'),\n    livereload = require('gulp-livereload'),\n    minifyCss = require('gulp-minify-css'),\n    autoprefixer = require('gulp-autoprefixer');\n</code></pre>\n<!--kg-card-end: markdown--><p><strong>gulp-load-plugins</strong> instead checks your package.json for any Gulp plugins and immediately requires them, thus saving you a few precious minutes. The output instead looks like:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">var $ = require('gulp-load-plugins')();\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"building-the-gulpfile\">Building The Gulpfile</h2><p>Now that we have all these dope plugins, we can finally build our gulpfile. Here's an example (without using <strong>gulp-load-plugins</strong> for now):</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">var gulp = require('gulp'),\n    del = require('del'),\n    concat = require('gulp-concat'),\n    rename = require('gulp-rename'),\n    uglify = require('gulp-uglify'),\n    sass = require('gulp-sass'),\n    watch = require('gulp-watch'),\n    livereload = require('gulp-livereload'),\n    minifyCss = require('gulp-minify-css'),\n    autoprefixer = require('gulp-autoprefixer');\n\ngulp.task('styles', function() {\n    return gulp.src('src/sass/*.scss')\n        .pipe(sass({outputStyle: 'expanded', unix_newlines: true, linefeed: &quot;lf&quot;}).on('error', sass.logError))\n        .pipe(autoprefixer())\n        .pipe(minifyCss({\n            keepSpecialComments: 1\n        }))\n        .pipe(rename(&quot;theme.min.css&quot;))\n        .pipe(gulp.dest('./assets/css/'));\n});\n\n\ngulp.task('scripts', function() {\n    return gulp.src(['src/js/plugin/*.js', 'src/js/base.js'])\n        .pipe(uglify())\n        .pipe(concat('theme.min.js'))\n        .pipe(gulp.dest('assets/js'));\n});\n\n\ngulp.task('ghost_config', ['scripts'], function() {\n    return gulp.src(['src/js/config.js', 'assets/js/theme.min.js'])\n        .pipe(concat('theme.min.js'))\n        .pipe(gulp.dest('assets/js'));\n});\n\n\ngulp.task('default', function() {\n    gulp.start('styles', 'scripts', 'ghost_config', 'watch');\n});\n\n\ngulp.task('watch', function() {\n    gulp.watch('src/sass/*.scss', ['styles']);\n    gulp.watch('src/js/*.js', ['scripts', 'ghost_config']);\n    livereload.listen();\n    gulp.watch(['*']).on('change', livereload.changed);\n});\n\n</code></pre>\n<!--kg-card-end: markdown--><p>Just by looking at the file itself, you may be able to dissect what's happening. After we require our plugins, we define our <em>tasks,</em> which are essentially individual jobs consisting of one or more gulp plugins depending on how you've chained them.</p><p>Here's the general terminology to help clear things up:</p><ul><li><strong>gulp.task</strong>: Defines a task consisting of one of more plugin actions.</li><li><strong>gulp.src</strong>:  Specifies the folder containing source files.</li><li><strong>gulp.dest</strong>: Defines the folder to output compiled files to.</li><li><strong>pipe()</strong>: Allows multiple events to be chained together in a single task.</li></ul><h2 id=\"wrapping-up\">Wrapping up</h2><p>Once your file is ready to go, simply run the <strong>grunt</strong> command in your project directory. You should see Gulp output the status of each task you've set, as well as any errors which may have occurred.</p><p>In short, just use Gulp. The scientific community has come to a consensus that Gulp is objectively superior to its counterpart, Grunt. Ask Matt, he's a scientist.</p><p>Peace fam!</p>","url":"https://hackersandslackers.com/using-gulp-to-make-frontend-tolerable/","uuid":"f0ec0903-cd67-4663-b872-9ecdf9ffc557","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b0e1a41e88ecf2fbeb3f5fa"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673652","title":"Build Custom Widgets For Your Ghost Blog","slug":"build-custom-widgets-for-your-ghost-blog","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/04/ghost-1.jpg","excerpt":"Get started customizing your themes with simple widgets.","custom_excerpt":"Get started customizing your themes with simple widgets.","created_at_pretty":"15 May, 2018","published_at_pretty":"15 May, 2018","updated_at_pretty":"10 April, 2019","created_at":"2018-05-15T18:53:29.000-04:00","published_at":"2018-05-15T19:27:56.000-04:00","updated_at":"2019-04-09T20:47:59.000-04:00","meta_title":"Build Custom Widgets For Your Ghost Blog | Hackers and Slackers","meta_description":"Learn to build custom widgets for your Ghost blog with Handlebars. Easily implement common widgets such as recent posts, related posts, contributors, etc.","og_description":"Learn to build custom widgets for your Ghost blog with Handlebars. Easily implement common widgets such as recent posts, related posts, contributors, etc.","og_image":"https://hackersandslackers.com/content/images/2019/04/ghost-1-2.jpg","og_title":"Build Custom Widgets For Your Ghost Blog","twitter_description":"Learn to build custom widgets for your Ghost blog with Handlebars. Easily implement common widgets such as recent posts, related posts, contributors, etc.","twitter_image":"https://hackersandslackers.com/content/images/2019/04/ghost-1-1.jpg","twitter_title":"Build Custom Widgets For Your Ghost Blog","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"ExpressJS","slug":"expressjs","description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch as a simplistic Express app can evolve into a beautiful monstrosity.","feature_image":null,"meta_description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch a simplistic Express app can evolve into a beautiful monstrosity.","meta_title":"ExpressJS Framework | Hackers and Slackers","visibility":"public"},"tags":[{"name":"ExpressJS","slug":"expressjs","description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch as a simplistic Express app can evolve into a beautiful monstrosity.","feature_image":null,"meta_description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch a simplistic Express app can evolve into a beautiful monstrosity.","meta_title":"ExpressJS Framework | Hackers and Slackers","visibility":"public"},{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},{"name":"Frontend","slug":"frontend","description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","feature_image":null,"meta_description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","meta_title":"Frontend Development | Hackers and Slackers","visibility":"public"}],"plaintext":"Here at H+S headquarters, we're pretty into the Ghost blogging platform. It's a\nlot like Wordpress, except without everything that sucks about Wordpress. It's a\nNode app, isn't bloated with widgets, is more secure, smarter, prettier, and so\non. If you're a dev looking to get a quick clean CMS running, Ghost is pretty\nmuch a no-brainer.\n\nWhile the platform has been around for a while, the community is still in its\ninfancy as humanity lags behind the curve, with 80% of all sites victim of\nhacking being Wordpress-based. As such, we consider it our duty to share\nknowledge where possible to expedite the growth of independent blogging.\n\nThis is no means a \"getting started with Ghost\" post - Ghost's own documentation\ncovers that quite well. Instead, we'd like to share the source for some of the\nwidgets we've developed over the years to help your theme along.\n\nBasics of Ghost Theme Development\nThere are actually two stacks we should be conscious of when building Ghost\nthemes: the core Ghost stack, and our theme's stack (yes, they are different... \nkind of).\n\nGhost is built on the following core stack:\n\n * NodeJS\n * ExpressJS\n * Handlebars\n * Grunt\n\nCommon to both Ghost's core stack and a Ghost theme stack is Handlebars. \nHandlebars is a templating system which adds logic to otherwise-static HTML\npages. If you're not quite familiar with Handlebars, check out our quick\ntutorial [https://hackersandslackers.com/handlebars-templating-in-expressjs/] \non how to get the gist of things As long as you're familiar with Express and\nHandlebars, you'll be good to go. You could very well\n\nEverything we're doing today happens at the theme  level, which is your\npresentation layer that can be swapped at any given time. Running on your own\ninstallation, the path should look something like:\n\n/var/www/ghost/content/themes/myTheme/\n\n\nThis is where our development will be taking place.\n\nThe Widgets\nA \"widget\" is simply a Handlebars partial saved in your theme. Unlike your\ntraditional monolithic Blog CMS (such as Wordpress), Ghost's widgets must be\nadded to your theme programmatically (I would argue that this is not a bad\nthing).\n\n1. Recent Posts Widget\nThis is a fairly common widget which displays X number of posts ranked by most\nrecent.\n\n<!-- start widget -->\n{{#get \"posts\" limit=\"3\" filter=\"primary_tag:-#hidden\"}}\n  <div class=\"widget\">\n    <h4 class=\"title\">Recent</h4>\n    <div class=\"content recent-post\">\n      {{#foreach posts}}\n        <div class=\"recent-single-post\">\n          <a href=\"{{url}}\" class=\"post-title\">{{title}}</a>\n          <div class=\"date\">{{date format=\"MMMM DD, YYYY\"}}</div>\n        </div>\n      {{/foreach}}\n    </div>\n  </div>\n{{/get}}\n<!-- end widget -->\n\n\n{{#get}}  will fetch posts, tags, or users within the given specifications. The\ntag does nothing on it's own; it simply allows us to work within the context of\ngetting these items, such as how we use {{#foreach posts}}  afterwards.\n\nThe filter  is actually quite powerful, and perhaps a bit under-documented. In\nthis case we're only fetching posts who have a visible main tag: you might want\nto do something like this if you sometimes use 'posts' to make announcements.\n\n{{#foreach posts}}  loops through our 3 posts and will create the result DOM\nstructure the number of times it loops.\n\n2. Related Posts Widget\nSimilar to the above, but only returns posts which share the same main tag:\n\n<!-- start widget -->\n<div class=\"widget\">\n  <h4 class=\"title\">Related</h4>\n  <div class=\"content recent-post\">\n    {{#get \"posts\" limit=\"3\" filter=\"id:-{{id}}+tag:{{primary_tag.slug}}\"}}\n      {{#foreach posts}}\n        <div class=\"recent-single-post\">\n          <a href=\"{{url}}\" class=\"post-title\">{{title}}</a>\n          <div class=\"date\">{{date format=\"MMMM DD\"}}</div>\n        </div>\n      {{/foreach}}\n    {{/get}}\n  </div>\n</div>\n<!-- end widget -->\n\n\n3. Authors Widget\nA surprisingly uncommon widget, we've actually yet to see this on another blog\nyet. This will list all contributors to your blog with their avatar, and link\nback to their author page:\n\n<!-- start widget -->\n<div class=\"widget contributors\">\n  <h3 class=\"title\">Contributors</h3>\n  <div class=\"recent-post\">\n    {{#get \"users\"}}\n      {{#foreach users}}\n        <div class=\"single-author {{slug}}\">\n          {{#unless profile_image}}\n            <a href=\"{{url}}\"><i class=\"fas fa-user\" style=\"width:18px; height:18px; display:inline-block; margin-right:10px;\"></i></a>\n          {{/unless}}\n          {{#if profile_image}}\n            <a href=\"{{url}}\"><img src=\"{{img_url profile_image}}\" alt=\"Author image\" class=\"avi\"></a>\n          {{/if}}\n          <div class=\"info\">\n            <a href=\"{{url}}\" class=\"single-author-name\">{{name}}</a>\n            <span class=\"role\"></span>\n          </div>\n        </div>\n      {{/foreach}}\n    {{/get}}\n  </div>\n</div>\n<!-- end widget -->\n\n\n4. About the Current Author Widget\nThis widget only exists within the context of pages/posts which have an explicit\nauthor. Also supports the use case of multiple authors.\n\n<!-- start about the author -->\n{{#foreach authors}}\n  <div class=\"about-author clearfix widget\">\n    <h4 class=\"title\">Author</h4>\n    {{#if profile_image}}\n      <a href=\"{{url}}\"><img src=\"{{profile_image}}\" alt=\"Author image\" class=\"avatar pull-left\"></a>\n    {{else}}\n      <a href=\"{{url}}\"><img src=\"{{asset \"images/default-user-image.jpg\"}}\" alt=\"Author image\" class=\"avatar pull-left\"></a>\n    {{/if}}\n    <div class=\"details\">\n      <div class=\"author\">\n        {{!--{{t \"About\"}}--}}<a href=\"{{url}}\">{{name}}</a>\n      </div>\n      <div class=\"meta-info\">\n        {{!--<span class=\"post-count\"><i class=\"fal fa-pencil\"></i><a href=\"{{url}}\">{{plural count.posts empty=(t \"0 Post\") singular=(t \"% Post\") plural=(t \"% Posts\")}}</a></span>--}}\n        {{#if location}}\n          <span class=\"location\"><i class=\"fal fa-home\"></i>{{location}}</span>\n        {{/if}}\n        {{#if website}}\n          <span class=\"website\"><a href=\"{{website}}\" targer=\"_BLANK\"><i class=\"fal fa-globe\"></i>{{t \"Website\"}}</a></span>\n        {{/if}}\n        {{#if twitter}}\n          <span class=\"twitter\"><a href=\"{{twitter_url}}\"><i class=\"fab fa-twitter\"></i>{{twitter}}</a></span>\n        {{/if}}\n        {{#if facebook}}\n          <span class=\"facebook\"><a href=\"{{facebook_url}}\"><i class=\"fab fa-facebook\"></i></a></span>\n        {{/if}}\n      </div>\n    </div>\n    {{#if bio}}\n      <div class=\"bio\">\n        {{{bio}}}\n      </div>\n    {{/if}}\n  </div>\n{{/foreach}}\n<!-- end about the author -->\n\n\n5. About all the Authors Widget\nA combination of the above two, this widget displays a blurb and information\nabout all authors who contribute to your publication.\n\n{{#get \"users\" limit=\"all\" include=\"count.posts\" order=\"count.posts desc\" }}\n  {{#foreach users}}\n    <div class=\"about-author clearfix\" style=\"background: url({{cover_img}}) center center; background-color: rgba(255, 255, 255, 0.9); background-blend-mode: overlay;\">\n      {{#if profile_image}}\n        <a href=\"{{url}}\"><img src=\"{{profile_image}}\" alt=\"Author image\" class=\"avatar pull-left\"></a>\n      {{else}}\n        <a href=\"{{url}}\"><img src=\"{{asset \"images/default-user-image.jpg\"}}\" alt=\"Author image\" class=\"avatar pull-left\"></a>\n      {{/if}}\n      <div class=\"details\">\n        <div class=\"author\">\n          <a href=\"{{url}}\">{{name}}</a>\n        </div>\n        <div class=\"meta-info\">\n          <span class=\"post-count\"><i class=\"fal fa-pencil\"></i><a href=\"{{url}}\">{{plural count.posts empty=(t \"0 Post\") singular=(t \"% Post\") plural=(t \"% Posts\")}}</a></span>\n          {{#if location}}\n            <span class=\"location\"><i class=\"fal fa-home\"></i>{{location}}</span>\n          {{/if}}\n          {{#if website}}\n            <span class=\"website\"><i class=\"fal fa-globe\"></i><a href=\"{{website}}\" targer=\"_BLANK\">{{website}}</a></span>\n          {{/if}}\n          {{#if twitter}}\n            <span class=\"twitter\"><i class=\"fab fa-twitter\"></i><a href=\"{{twitter_url}}\">{{twitter}}</a></span>\n          {{/if}}\n          {{#if facebook}}\n            <span class=\"facebook\"><a href=\"{{facebook_url}}\"><i class=\"fab fa-facebook\"></i></a></span>\n          {{/if}}\n        </div>\n      </div>\n      {{#if bio}}\n        <p class=\"bio\">\n          {{{bio}}}\n        </p>\n      {{/if}}\n    </div>\n  {{/foreach}}\n{{/get}}\n\n\nObviously you can customize your widgets as you see fit to include or exclude\nthe information you're looking for. Hopefully these snippets serve as a useful\nreference for some common use cases to help your blog be as baller as possible.","html":"<p>Here at H+S headquarters, we're pretty into the Ghost blogging platform. It's a lot like Wordpress, except without everything that sucks about Wordpress. It's a Node app, isn't bloated with widgets, is more secure, smarter, prettier, and so on. If you're a dev looking to get a quick clean CMS running, Ghost is pretty much a no-brainer.</p><p>While the platform has been around for a while, the community is still in its infancy as humanity lags behind the curve, with 80% of all sites victim of hacking being Wordpress-based. As such, we consider it our duty to share knowledge where possible to expedite the growth of independent blogging.</p><p>This is no means a \"getting started with Ghost\" post - Ghost's own documentation covers that quite well. Instead, we'd like to share the source for some of the widgets we've developed over the years to help your theme along.</p><h2 id=\"basics-of-ghost-theme-development\">Basics of Ghost Theme Development</h2><p>There are actually two stacks we should be conscious of when building Ghost themes: the core Ghost stack, and our theme's stack (yes, they are different... <em>kind of</em>).</p><p>Ghost is built on the following core stack:</p><ul><li>NodeJS</li><li>ExpressJS</li><li>Handlebars</li><li>Grunt</li></ul><p>Common to both Ghost's core stack and a Ghost theme stack is <strong>Handlebars. </strong>Handlebars is a templating system which adds logic to otherwise-static HTML pages. If you're not quite familiar with Handlebars, check out our <a href=\"https://hackersandslackers.com/handlebars-templating-in-expressjs/\">quick tutorial</a> on how to get the gist of things As long as you're familiar with Express and Handlebars, you'll be good to go. You could very well</p><p>Everything we're doing today happens at the <em>theme</em> level, which is your presentation layer that can be swapped at any given time. Running on your own installation, the path should look something like:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">/var/www/ghost/content/themes/myTheme/\n</code></pre>\n<!--kg-card-end: markdown--><p>This is where our development will be taking place.</p><h2 id=\"the-widgets\">The Widgets</h2><p>A \"widget\" is simply a Handlebars partial saved in your theme. Unlike your traditional monolithic Blog CMS (such as Wordpress), Ghost's widgets must be added to your theme programmatically (I would argue that this is not a bad thing).</p><h3 id=\"1-recent-posts-widget\">1. Recent Posts Widget</h3><p>This is a fairly common widget which displays X number of posts ranked by most recent.</p><!--kg-card-begin: markdown--><pre><code class=\"language-handlebars\">&lt;!-- start widget --&gt;\n{{#get &quot;posts&quot; limit=&quot;3&quot; filter=&quot;primary_tag:-#hidden&quot;}}\n  &lt;div class=&quot;widget&quot;&gt;\n    &lt;h4 class=&quot;title&quot;&gt;Recent&lt;/h4&gt;\n    &lt;div class=&quot;content recent-post&quot;&gt;\n      {{#foreach posts}}\n        &lt;div class=&quot;recent-single-post&quot;&gt;\n          &lt;a href=&quot;{{url}}&quot; class=&quot;post-title&quot;&gt;{{title}}&lt;/a&gt;\n          &lt;div class=&quot;date&quot;&gt;{{date format=&quot;MMMM DD, YYYY&quot;}}&lt;/div&gt;\n        &lt;/div&gt;\n      {{/foreach}}\n    &lt;/div&gt;\n  &lt;/div&gt;\n{{/get}}\n&lt;!-- end widget --&gt;\n</code></pre>\n<!--kg-card-end: markdown--><p><code>{{#get}}</code> will fetch posts, tags, or users within the given specifications. The tag does nothing on it's own; it simply allows us to work within the context of getting these items, such as how we use <code>{{#foreach posts}}</code> afterwards.</p><p>The <em>filter</em> is actually quite powerful, and perhaps a bit under-documented. In this case we're only fetching posts who have a visible main tag: you might want to do something like this if you sometimes use 'posts' to make announcements.</p><p><code>{{#foreach posts}}</code> loops through our 3 posts and will create the result DOM structure the number of times it loops.</p><h3 id=\"2-related-posts-widget\">2. Related Posts Widget</h3><p>Similar to the above, but only returns posts which share the same main tag:</p><!--kg-card-begin: markdown--><pre><code class=\"language-handlebars\">&lt;!-- start widget --&gt;\n&lt;div class=&quot;widget&quot;&gt;\n  &lt;h4 class=&quot;title&quot;&gt;Related&lt;/h4&gt;\n  &lt;div class=&quot;content recent-post&quot;&gt;\n    {{#get &quot;posts&quot; limit=&quot;3&quot; filter=&quot;id:-{{id}}+tag:{{primary_tag.slug}}&quot;}}\n      {{#foreach posts}}\n        &lt;div class=&quot;recent-single-post&quot;&gt;\n          &lt;a href=&quot;{{url}}&quot; class=&quot;post-title&quot;&gt;{{title}}&lt;/a&gt;\n          &lt;div class=&quot;date&quot;&gt;{{date format=&quot;MMMM DD&quot;}}&lt;/div&gt;\n        &lt;/div&gt;\n      {{/foreach}}\n    {{/get}}\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;!-- end widget --&gt;\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"3-authors-widget\">3. Authors Widget</h3><p>A surprisingly uncommon widget, we've actually yet to see this on another blog yet. This will list all contributors to your blog with their avatar, and link back to their author page:</p><!--kg-card-begin: markdown--><pre><code class=\"language-handlebars\">&lt;!-- start widget --&gt;\n&lt;div class=&quot;widget contributors&quot;&gt;\n  &lt;h3 class=&quot;title&quot;&gt;Contributors&lt;/h3&gt;\n  &lt;div class=&quot;recent-post&quot;&gt;\n    {{#get &quot;users&quot;}}\n      {{#foreach users}}\n        &lt;div class=&quot;single-author {{slug}}&quot;&gt;\n          {{#unless profile_image}}\n            &lt;a href=&quot;{{url}}&quot;&gt;&lt;i class=&quot;fas fa-user&quot; style=&quot;width:18px; height:18px; display:inline-block; margin-right:10px;&quot;&gt;&lt;/i&gt;&lt;/a&gt;\n          {{/unless}}\n          {{#if profile_image}}\n            &lt;a href=&quot;{{url}}&quot;&gt;&lt;img src=&quot;{{img_url profile_image}}&quot; alt=&quot;Author image&quot; class=&quot;avi&quot;&gt;&lt;/a&gt;\n          {{/if}}\n          &lt;div class=&quot;info&quot;&gt;\n            &lt;a href=&quot;{{url}}&quot; class=&quot;single-author-name&quot;&gt;{{name}}&lt;/a&gt;\n            &lt;span class=&quot;role&quot;&gt;&lt;/span&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      {{/foreach}}\n    {{/get}}\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;!-- end widget --&gt;\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"4-about-the-current-author-widget\">4. About the Current Author Widget</h3><p>This widget only exists within the context of pages/posts which have an explicit author. Also supports the use case of multiple authors.</p><!--kg-card-begin: markdown--><pre><code class=\"language-handlebars\">&lt;!-- start about the author --&gt;\n{{#foreach authors}}\n  &lt;div class=&quot;about-author clearfix widget&quot;&gt;\n    &lt;h4 class=&quot;title&quot;&gt;Author&lt;/h4&gt;\n    {{#if profile_image}}\n      &lt;a href=&quot;{{url}}&quot;&gt;&lt;img src=&quot;{{profile_image}}&quot; alt=&quot;Author image&quot; class=&quot;avatar pull-left&quot;&gt;&lt;/a&gt;\n    {{else}}\n      &lt;a href=&quot;{{url}}&quot;&gt;&lt;img src=&quot;{{asset &quot;images/default-user-image.jpg&quot;}}&quot; alt=&quot;Author image&quot; class=&quot;avatar pull-left&quot;&gt;&lt;/a&gt;\n    {{/if}}\n    &lt;div class=&quot;details&quot;&gt;\n      &lt;div class=&quot;author&quot;&gt;\n        {{!--{{t &quot;About&quot;}}--}}&lt;a href=&quot;{{url}}&quot;&gt;{{name}}&lt;/a&gt;\n      &lt;/div&gt;\n      &lt;div class=&quot;meta-info&quot;&gt;\n        {{!--&lt;span class=&quot;post-count&quot;&gt;&lt;i class=&quot;fal fa-pencil&quot;&gt;&lt;/i&gt;&lt;a href=&quot;{{url}}&quot;&gt;{{plural count.posts empty=(t &quot;0 Post&quot;) singular=(t &quot;% Post&quot;) plural=(t &quot;% Posts&quot;)}}&lt;/a&gt;&lt;/span&gt;--}}\n        {{#if location}}\n          &lt;span class=&quot;location&quot;&gt;&lt;i class=&quot;fal fa-home&quot;&gt;&lt;/i&gt;{{location}}&lt;/span&gt;\n        {{/if}}\n        {{#if website}}\n          &lt;span class=&quot;website&quot;&gt;&lt;a href=&quot;{{website}}&quot; targer=&quot;_BLANK&quot;&gt;&lt;i class=&quot;fal fa-globe&quot;&gt;&lt;/i&gt;{{t &quot;Website&quot;}}&lt;/a&gt;&lt;/span&gt;\n        {{/if}}\n        {{#if twitter}}\n          &lt;span class=&quot;twitter&quot;&gt;&lt;a href=&quot;{{twitter_url}}&quot;&gt;&lt;i class=&quot;fab fa-twitter&quot;&gt;&lt;/i&gt;{{twitter}}&lt;/a&gt;&lt;/span&gt;\n        {{/if}}\n        {{#if facebook}}\n          &lt;span class=&quot;facebook&quot;&gt;&lt;a href=&quot;{{facebook_url}}&quot;&gt;&lt;i class=&quot;fab fa-facebook&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;\n        {{/if}}\n      &lt;/div&gt;\n    &lt;/div&gt;\n    {{#if bio}}\n      &lt;div class=&quot;bio&quot;&gt;\n        {{{bio}}}\n      &lt;/div&gt;\n    {{/if}}\n  &lt;/div&gt;\n{{/foreach}}\n&lt;!-- end about the author --&gt;\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"5-about-all-the-authors-widget\">5. About all the Authors Widget</h3><p>A combination of the above two, this widget displays a blurb and information about all authors who contribute to your publication.</p><!--kg-card-begin: markdown--><pre><code class=\"language-handlebars\">{{#get &quot;users&quot; limit=&quot;all&quot; include=&quot;count.posts&quot; order=&quot;count.posts desc&quot; }}\n  {{#foreach users}}\n    &lt;div class=&quot;about-author clearfix&quot; style=&quot;background: url({{cover_img}}) center center; background-color: rgba(255, 255, 255, 0.9); background-blend-mode: overlay;&quot;&gt;\n      {{#if profile_image}}\n        &lt;a href=&quot;{{url}}&quot;&gt;&lt;img src=&quot;{{profile_image}}&quot; alt=&quot;Author image&quot; class=&quot;avatar pull-left&quot;&gt;&lt;/a&gt;\n      {{else}}\n        &lt;a href=&quot;{{url}}&quot;&gt;&lt;img src=&quot;{{asset &quot;images/default-user-image.jpg&quot;}}&quot; alt=&quot;Author image&quot; class=&quot;avatar pull-left&quot;&gt;&lt;/a&gt;\n      {{/if}}\n      &lt;div class=&quot;details&quot;&gt;\n        &lt;div class=&quot;author&quot;&gt;\n          &lt;a href=&quot;{{url}}&quot;&gt;{{name}}&lt;/a&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;meta-info&quot;&gt;\n          &lt;span class=&quot;post-count&quot;&gt;&lt;i class=&quot;fal fa-pencil&quot;&gt;&lt;/i&gt;&lt;a href=&quot;{{url}}&quot;&gt;{{plural count.posts empty=(t &quot;0 Post&quot;) singular=(t &quot;% Post&quot;) plural=(t &quot;% Posts&quot;)}}&lt;/a&gt;&lt;/span&gt;\n          {{#if location}}\n            &lt;span class=&quot;location&quot;&gt;&lt;i class=&quot;fal fa-home&quot;&gt;&lt;/i&gt;{{location}}&lt;/span&gt;\n          {{/if}}\n          {{#if website}}\n            &lt;span class=&quot;website&quot;&gt;&lt;i class=&quot;fal fa-globe&quot;&gt;&lt;/i&gt;&lt;a href=&quot;{{website}}&quot; targer=&quot;_BLANK&quot;&gt;{{website}}&lt;/a&gt;&lt;/span&gt;\n          {{/if}}\n          {{#if twitter}}\n            &lt;span class=&quot;twitter&quot;&gt;&lt;i class=&quot;fab fa-twitter&quot;&gt;&lt;/i&gt;&lt;a href=&quot;{{twitter_url}}&quot;&gt;{{twitter}}&lt;/a&gt;&lt;/span&gt;\n          {{/if}}\n          {{#if facebook}}\n            &lt;span class=&quot;facebook&quot;&gt;&lt;a href=&quot;{{facebook_url}}&quot;&gt;&lt;i class=&quot;fab fa-facebook&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;\n          {{/if}}\n        &lt;/div&gt;\n      &lt;/div&gt;\n      {{#if bio}}\n        &lt;p class=&quot;bio&quot;&gt;\n          {{{bio}}}\n        &lt;/p&gt;\n      {{/if}}\n    &lt;/div&gt;\n  {{/foreach}}\n{{/get}}\n</code></pre>\n<!--kg-card-end: markdown--><p>Obviously you can customize your widgets as you see fit to include or exclude the information you're looking for. Hopefully these snippets serve as a useful reference for some common use cases to help your blog be as baller as possible.</p>","url":"https://hackersandslackers.com/build-custom-widgets-for-your-ghost-blog/","uuid":"a1d550bc-034d-4c2c-85f0-ff434f400d8c","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5afb64e93d0bf921d8b8804f"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673634","title":"Starting an ExpressJS App","slug":"create-an-expressjs-app","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2017/11/expressjs@2x.jpg","excerpt":"Installation guide for ExpressJS with popular customization options.","custom_excerpt":"Installation guide for ExpressJS with popular customization options.","created_at_pretty":"18 November, 2017","published_at_pretty":"18 November, 2017","updated_at_pretty":"07 March, 2019","created_at":"2017-11-18T08:44:44.000-05:00","published_at":"2017-11-18T08:54:54.000-05:00","updated_at":"2019-03-07T01:39:46.000-05:00","meta_title":"Starting an ExpressJS App | Hackers and Slackers","meta_description":"Installation guide for ExpressJS with popular customization options","og_description":"Installation guide for ExpressJS with popular customization options","og_image":"https://hackersandslackers.com/content/images/2017/11/expressjs@2x.jpg","og_title":"Starting an ExpressJS App","twitter_description":"Installation guide for ExpressJS with popular customization options","twitter_image":"https://hackersandslackers.com/content/images/2017/11/expressjs@2x.jpg","twitter_title":"Starting an ExpressJS App","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},"tags":[{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},{"name":"ExpressJS","slug":"expressjs","description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch as a simplistic Express app can evolve into a beautiful monstrosity.","feature_image":null,"meta_description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch a simplistic Express app can evolve into a beautiful monstrosity.","meta_title":"ExpressJS Framework | Hackers and Slackers","visibility":"public"}],"plaintext":"Over the past few months I've found myself spinning up tons of new servers and\nwalking through the process of pushing express apps live.\n\nBecause this process always comes at unexpected times, I've never bothered\ndocumenting the steps it takes to get a blank box running express. Surprisingly\nit seems as though few have bothered to walk through every step involved in a\nsingle place, and most express tutorials contain outdated information which\nlikely leads to headaches for newcomers.\n\nI'll be walking through an ExpressJS setup with the tech I always opt for.\n\nStack\n * NodeJS\n * NPM\n * Nginx\n * Express\n * Express-Generator\n * Sass\n * Handlebars\n * PM2\n * Grunt\n\nInstallation\nPrep your server by installing the latest updates:\n\n$ apt-get update\n$ apt-get upgrade -y\n\n\nNodeJS\nOf the things we'll be installing prior to development, NodeJS is the trickiest.\nUnlike other packages, we cannot simply use Ubuntu's apt-get install  command\nfor Node. NodeJS for Linux distributions is best installed via NodeSource, which\nis handled as such:\n\n$ apt update\n$ apt upgrade -y\n$ curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -\n$ sudo apt-get install -y nodejs\n$ sudo apt-get install gcc g++ make\n$ sudo npm install -g npm@latest\n\n\nNote that this also hooks us up with the latest version of NPM, so we're all\ngood on that front.\n\nNginx\nLet's install Nginx before we forget. We'll come back to Nginx later to set up\nthe config.\n\napt-get install nginx\n\n\nExpress\nWe'll install express globally. This way we can support multiple apps running\nexpress, as well as use an express generator to easily create more projects down\nthe line.\n\nnpm install -g express\n\n\nExpress generator\nInstall express generator globally. Express generator is the easiest way to set\nup a new express app with the standard structure preconfigured.\n\nnpm install -g express-generator\n\n\nCreate an App\nNow we get to the fun stuff.\n\n$ cd  to the directory you'll be using to contain your apps, such as /home  or \n/var/www. When we use express-generator  in this directory, we'll be\ninitializing a new express project will most of the common boilerplate setup\npreconfigured.\n\nThis will create your Express app inside /home/myapp:\n\ncd /home\n\nexpress --view=hbs --css=less myapp\n\n\nExpress-generator prompts you to pass arguments to automatically configure your\nproject for you. We're able to specify which CSS preprocessor and templating\nsystem we prefer this way. I'm going to create a project using Handlebars and\nSass as my weapons of choice.\n\nThese are the options that come with express-generator in case you'd like to\ncustomize your installation:\n\n$ express -h\n\n  Usage: express [options] [dir]\n\n  Options:\n\n    -h, --help          output usage information\n        --version       output the version number\n    -e, --ejs           add ejs engine support\n        --hbs           add handlebars engine support\n        --pug           add pug engine support\n    -H, --hogan         add hogan.js engine support\n    -v, --view <engine> add view <engine> support (ejs|hbs|hjs|jade|pug|twig|vash) (defaults to jade)\n    -c, --css <engine>  add stylesheet <engine> support (less|stylus|compass|sass) (defaults to plain css)\n        --git           add .gitignore\n    -f, --force         force on non-empty directory\n\n\nWarning: common bug ahead\nIf your life sucks, running express generator may have given you this error:\n\n/usr/bin/env: ‘node’: No such file or directory\n\n\nThis is an issue with Debian distributions of linux which treat 'node' and\n'nodejs' as separate filepaths. To alleviate this, create the following symbolic\nlink:\n\nln -s /usr/bin/nodejs /usr/bin/node\n\n\nStart App\nInside your project directory run npm install  to install all dependancies for\nyour project. This will look at the package.json  file that express-generator\ncreated and will install the corresponding node modules.\n\ncd myapp\n\nnpm install\n\n\nHere's the result:\n\n.\n├── app.js\n├── bin\n│   └── www\n├── package.json\n├── public\n│   ├── images\n│   ├── javascripts\n│   └── stylesheets\n│       └── style.css\n├── routes\n│   ├── index.js\n│   └── users.js\n└── views\n    ├── error.pug\n    ├── index.pug\n    └── layout.pug\n\n7 directories, 9 files\n\n\nSet up Nginx Config\nBefore creating your Nginx config, it is best to verify which port express will\nbe running on. In most recent versions of express, this can be found in the www\nfile. The path to this looks like myapp/bin/www.\n\nCheck out that file and see what the value is for var port.\n\nvim bin/www\n\n\nYou should see something like this:\n\nvar port = normalizePort(process.env.PORT || '3000');\n\n\nThus, the port is 3000. Remember this.\n\nPreviously this information was stored in Express's app.js  file.\n\nNow, create a Nginx config in sites-available:\n\nvim /etc/nginx/sites-available/myapp\n\n\nFor a basic reverse proxy server configuration, use the configuration below.\n\nBe sure to replace the port with the port you found earlier.\n\nserver {\n    listen 80;\n\n    server_name example.com www.example.com;\n\n    location / {\n        proxy_pass http://127.0.0.1:3000; #Replace port here\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n\n    location ~ /.well-known {\n        allow all;\n    }\n\n    client_max_body_size 50m;\n}\n\n\nSave this out. Now create a symbolic link to have this appear in sites enabled,\nand restart Nginx.\n\nln -s /etc/nginx/sites-available/myapp /etc/nginx/sites-enabled/myapp \n\nservice nginx restart\n\n\nRun your app\nNow your web server is pointing to the correct place, but your app isn't\nactually running. To keep your app running continuously, we'll use PM2.\n\nInstall pm2 globally:\n\nnpm install pm2 -g\n\n\nGo to your app's directory, and start your app using PM2:\n\ncd /home/myapp\n\npm2 start bin/www\n\n\nIf successful, PM2 should then list your app as running.\n\nYou can run as many express apps on one server as you like:\n\n┌──────────┬────┬──────┬───────┬────────┬─────────┬────────┬─────┬───────────┬──────┬──────────┐\n│ App name │ id │ mode │ pid   │ status │ restart │ uptime │ cpu │ mem       │ user │ watching │\n├──────────┼────┼──────┼───────┼────────┼─────────┼────────┼─────┼───────────┼──────┼──────────┤\n│ www      │ 0  │ fork │ 8953  │ online │ 79      │ 35h    │ 0%  │ 44.6 MB   │ root │ disabled │\n│ www      │ 1  │ fork │ 18195 │ online │ 0       │ 3D     │ 0%  │ 22.3 MB   │ root │ disabled │\n│ www      │ 2  │ fork │ 19990 │ online │ 0       │ 33h    │ 0%  │ 49.2 MB   │ root │ disabled │\n└──────────┴────┴──────┴───────┴────────┴─────────┴────────┴─────┴───────────┴──────┴──────────┘\n\n\nYour app should now be accessible via your domain.\n\nFinal items\nYour app is up and running, but you're not in the clear yet. To have things\nfully configured, you'll need to set up grunt or gulp to compress your source\nfor production.\n\nConfiguring gulp files is a tutorial in its own right. Otherwise, you're good to\ngo to serve static files directly out of the /public  folder.","html":"<p>Over the past few months I've found myself spinning up tons of new servers and walking through the process of pushing express apps live.</p><p>Because this process always comes at unexpected times, I've never bothered documenting the steps it takes to get a blank box running express. Surprisingly it seems as though few have bothered to walk through every step involved in a single place, and most express tutorials contain outdated information which likely leads to headaches for newcomers.</p><p>I'll be walking through an ExpressJS setup with the tech I always opt for.</p><h2 id=\"stack\">Stack</h2><ul><li>NodeJS</li><li>NPM</li><li>Nginx</li><li>Express</li><li>Express-Generator</li><li>Sass</li><li>Handlebars</li><li>PM2</li><li>Grunt</li></ul><h2 id=\"installation\">Installation</h2><p>Prep your server by installing the latest updates:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">$ apt-get update\n$ apt-get upgrade -y\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"nodejs\">NodeJS</h3><p>Of the things we'll be installing prior to development, NodeJS is the trickiest. Unlike other packages, we cannot simply use Ubuntu's <code>apt-get install</code> command for Node. NodeJS for Linux distributions is best installed via NodeSource, which is handled as such:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">$ apt update\n$ apt upgrade -y\n$ curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -\n$ sudo apt-get install -y nodejs\n$ sudo apt-get install gcc g++ make\n$ sudo npm install -g npm@latest\n</code></pre>\n<!--kg-card-end: markdown--><p>Note that this also hooks us up with the latest version of NPM, so we're all good on that front.</p><h3 id=\"nginx\">Nginx</h3><p>Let's install Nginx before we forget. We'll come back to Nginx later to set up the config.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">apt-get install nginx\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"express\">Express</h3><p>We'll install express globally. This way we can support multiple apps running express, as well as use an express generator to easily create more projects down the line.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">npm install -g express\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"express-generator\">Express generator</h3><p>Install express generator globally. Express generator is the easiest way to set up a new express app with the standard structure preconfigured.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">npm install -g express-generator\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"create-an-app\">Create an App</h2><p>Now we get to the fun stuff.</p><p><code>$ cd</code> to the directory you'll be using to contain your apps, such as <code>/home</code> or <code>/var/www</code>. When we use <code>express-generator</code> in this directory, we'll be initializing a new express project will most of the common boilerplate setup preconfigured.</p><p>This will create your Express app inside <code>/home/myapp</code>:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">cd /home\n\nexpress --view=hbs --css=less myapp\n</code></pre>\n<!--kg-card-end: markdown--><p>Express-generator prompts you to pass arguments to automatically configure your project for you. We're able to specify which CSS preprocessor and templating system we prefer this way. I'm going to create a project using Handlebars and Sass as my weapons of choice.</p><p>These are the options that come with express-generator in case you'd like to customize your installation:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ express -h\n\n  Usage: express [options] [dir]\n\n  Options:\n\n    -h, --help          output usage information\n        --version       output the version number\n    -e, --ejs           add ejs engine support\n        --hbs           add handlebars engine support\n        --pug           add pug engine support\n    -H, --hogan         add hogan.js engine support\n    -v, --view &lt;engine&gt; add view &lt;engine&gt; support (ejs|hbs|hjs|jade|pug|twig|vash) (defaults to jade)\n    -c, --css &lt;engine&gt;  add stylesheet &lt;engine&gt; support (less|stylus|compass|sass) (defaults to plain css)\n        --git           add .gitignore\n    -f, --force         force on non-empty directory\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"warning-common-bug-ahead\">Warning: common bug ahead</h2><p>If your life sucks, running express generator may have given you this error:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">/usr/bin/env: ‘node’: No such file or directory\n</code></pre>\n<!--kg-card-end: markdown--><p>This is an issue with Debian distributions of linux which treat 'node' and 'nodejs' as separate filepaths. To alleviate this, create the following symbolic link:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">ln -s /usr/bin/nodejs /usr/bin/node\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"start-app\">Start App</h2><p>Inside your project directory run <strong>npm install</strong> to install all dependancies for your project. This will look at the <code>package.json</code> file that express-generator created and will install the corresponding node modules.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">cd myapp\n\nnpm install\n</code></pre>\n<!--kg-card-end: markdown--><p>Here's the result:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">.\n├── app.js\n├── bin\n│   └── www\n├── package.json\n├── public\n│   ├── images\n│   ├── javascripts\n│   └── stylesheets\n│       └── style.css\n├── routes\n│   ├── index.js\n│   └── users.js\n└── views\n    ├── error.pug\n    ├── index.pug\n    └── layout.pug\n\n7 directories, 9 files\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"set-up-nginx-config\">Set up Nginx Config</h2><p>Before creating your Nginx config, it is best to verify which port express will be running on. In most recent versions of express, this can be found in the www file. The path to this looks like myapp/bin/www.</p><p>Check out that file and see what the value is for var port.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">vim bin/www\n</code></pre>\n<!--kg-card-end: markdown--><p>You should see something like this:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">var port = normalizePort(process.env.PORT || '3000');\n</code></pre>\n<!--kg-card-end: markdown--><p>Thus, the port is 3000. Remember this.</p><p>Previously this information was stored in Express's <code>app.js</code> file.</p><p>Now, create a Nginx config in sites-available:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">vim /etc/nginx/sites-available/myapp\n</code></pre>\n<!--kg-card-end: markdown--><p>For a basic reverse proxy server configuration, use the configuration below.</p><p>Be sure to replace the port with the port you found earlier.</p><!--kg-card-begin: markdown--><pre><code class=\"language-nginx\">server {\n    listen 80;\n\n    server_name example.com www.example.com;\n\n    location / {\n        proxy_pass http://127.0.0.1:3000; #Replace port here\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n\n    location ~ /.well-known {\n        allow all;\n    }\n\n    client_max_body_size 50m;\n}\n</code></pre>\n<!--kg-card-end: markdown--><p>Save this out. Now create a symbolic link to have this appear in sites enabled, and restart Nginx.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">ln -s /etc/nginx/sites-available/myapp /etc/nginx/sites-enabled/myapp \n\nservice nginx restart\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"run-your-app\">Run your app</h2><p>Now your web server is pointing to the correct place, but your app isn't actually running. To keep your app running continuously, we'll use PM2.</p><p>Install pm2 globally:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">npm install pm2 -g\n</code></pre>\n<!--kg-card-end: markdown--><p>Go to your app's directory, and start your app using PM2:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">cd /home/myapp\n\npm2 start bin/www\n</code></pre>\n<!--kg-card-end: markdown--><p>If successful, PM2 should then list your app as running.</p><p>You can run as many express apps on one server as you like:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">┌──────────┬────┬──────┬───────┬────────┬─────────┬────────┬─────┬───────────┬──────┬──────────┐\n│ App name │ id │ mode │ pid   │ status │ restart │ uptime │ cpu │ mem       │ user │ watching │\n├──────────┼────┼──────┼───────┼────────┼─────────┼────────┼─────┼───────────┼──────┼──────────┤\n│ www      │ 0  │ fork │ 8953  │ online │ 79      │ 35h    │ 0%  │ 44.6 MB   │ root │ disabled │\n│ www      │ 1  │ fork │ 18195 │ online │ 0       │ 3D     │ 0%  │ 22.3 MB   │ root │ disabled │\n│ www      │ 2  │ fork │ 19990 │ online │ 0       │ 33h    │ 0%  │ 49.2 MB   │ root │ disabled │\n└──────────┴────┴──────┴───────┴────────┴─────────┴────────┴─────┴───────────┴──────┴──────────┘\n</code></pre>\n<!--kg-card-end: markdown--><p>Your app should now be accessible via your domain.</p><h2 id=\"final-items\">Final items</h2><p>Your app is up and running, but you're not in the clear yet. To have things fully configured, you'll need to set up grunt or gulp to compress your source for production.</p><p>Configuring gulp files is a tutorial in its own right. Otherwise, you're good to go to serve static files directly out of the <code>/public</code> folder.</p>","url":"https://hackersandslackers.com/create-an-expressjs-app/","uuid":"048b6212-5dbf-429c-b86d-d3fc65238e06","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5a10394c3858167c7082486e"}}]}},"pageContext":{"slug":"nodejs","limit":12,"skip":0,"numberOfPages":1,"humanPageNumber":1,"prevPageNumber":null,"nextPageNumber":null,"previousPagePath":null,"nextPagePath":null}}