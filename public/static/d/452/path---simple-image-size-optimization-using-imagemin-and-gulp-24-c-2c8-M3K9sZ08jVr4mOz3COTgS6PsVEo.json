{"data":{"ghostPost":{"id":"Ghost__Post__5c12d7bfe875ad7bb867373e","title":"Image Compression Using Gulp and Imagemin","slug":"simple-image-size-optimization-using-imagemin-and-gulp","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/11/imagemin-6@2x.jpg","excerpt":"The simplest way to optimize page speed without breaking everything.\n","custom_excerpt":"The simplest way to optimize page speed without breaking everything.\n","created_at_pretty":"16 November, 2018","published_at_pretty":"22 November, 2018","updated_at_pretty":"27 December, 2018","created_at":"2018-11-16T18:46:04.000-05:00","published_at":"2018-11-21T20:49:01.000-05:00","updated_at":"2018-12-26T23:25:33.000-05:00","meta_title":"Image Compression Using Gulp and Imagemin | Hackers and Slackers","meta_description":"The simplest way to optimize page speed without breaking everything.\n","og_description":"The simplest way to optimize page speed without breaking everything\n","og_image":"https://hackersandslackers.com/content/images/2018/11/imagemin-6@2x.jpg","og_title":"Image Compression Using Gulp and Imagemin | Hackers and Slackers","twitter_description":"The simplest way to optimize page speed without breaking everything\n","twitter_image":"https://hackersandslackers.com/content/images/2018/11/imagemin-6@2x.jpg","twitter_title":"Image Compression Using Gulp and Imagemin | Hackers and Slackers","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"JavaScript","slug":"javascript","description":"JavaScript covering both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","feature_image":null,"meta_description":"JavaScript topics, both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","meta_title":"Javascript Tutorials | Hackers and Slackers","visibility":"public"},"tags":[{"name":"JavaScript","slug":"javascript","description":"JavaScript covering both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","feature_image":null,"meta_description":"JavaScript topics, both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","meta_title":"Javascript Tutorials | Hackers and Slackers","visibility":"public"},{"name":"Frontend","slug":"frontend","description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","feature_image":null,"meta_description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","meta_title":"Frontend Development | Hackers and Slackers","visibility":"public"}],"plaintext":"I promised myself I wouldn’t get involved in any more Gulp tutorials; task\nrunners aren’t exactly the sexiest topic in the world, and chances are if you’ve\nmade it to this blog, you’ve either solidified a CI/CD pipeline for going live\nwith software, or you simply don’t need one. We’ll make an exception this time,\nbecause gulp-imagemin  is particularly dope.\n\nImagemin [https://github.com/imagemin/imagemin]  is a standalone Node library\nwhich also comes with a CLI [https://github.com/imagemin/imagemin-cli], and of\ncourse, a Gulp plugin [https://github.com/sindresorhus/gulp-imagemin]. In short,\n imagemin  compresses images in a given directory and is intelligent enough to\nrecognize images it has already compressed. This is huge because it means we can\nrecklessly tell imagemin  to compress the same folder of images hundreds of\ntimes, and each image will only be compressed exactly once.\n\nFor this tutorial, we’ll be taking gulp-imagemin and creating a task to compress\nimages in complex folder structures.\n\nUsing Imagemin on Complex Folder Structures\nWe’ve probably mentioned this once or twice before, but this blog is a theme\nrunning on a Ghost [https://ghost.org/]  stack. The thing about Ghost (and\nprobably any other blogging platform) is that it stores content in a date-based\nfolder hierarchy. /images  looks like this:\n\n/images\n├─ /2017\n│  └─ 01\n│  └─ 02\n│  └─ 03\n│  └─ 04\n│  └─ 05\n│  └─ 06\n│  └─ 07\n│  └─ 08\n│  └─ 09\n│  └─ 10\n│  └─ 11\n│  └─ 12\n└─ /2018\n   └─ 01\n   └─ 02\n   └─ 03\n   └─ 04\n   └─ 05\n   └─ 06\n   └─ 07\n   └─ 08\n   └─ 09\n   └─ 10\n   └─ 11\n\n\nImagemin  does not  work recursively, so we’ll need to handle looping through\nthis file structure ourselves.\n\nStarting our Gulpfile\nLet’s get started by going through the barebones of the libraries required to\nmake this happen:\n\nvar gulp = require('gulp'),\n  imagemin = require('gulp-imagemin'),\n  fs = require('fs'),\n  path = require('path');\n\n\ngulp-imagemin is the core Gulp plugin we need to compress our images, but is\nactually useless on it’s own — we need to also import plugins-for-a-plugin; \ngulp-imagemin requires a separate plugin for each image type we need to express.\n\nWe’re also requiring fs and path  here, which will let us walk through folder\nstructures programmatically.\n\nImagemin Plugins\nAs mentioned imagemin itself has plugins per image type: only require the ones\nyou think you’ll need:\n\nvar gulp = require('gulp'),\n  imagemin = require('gulp-imagemin'),\n  imageminWebp = require('imagemin-webp'),\n  imageminJpegtran = require('imagemin-jpegtran'),\n  imageminPngquant = require('imagemin-pngquant'),\n  imageminGifSicle = require('imagemin-gifsicle'),\n  imageminOptiPng = require('imagemin-optipng'),\n  imageminSvgo = require('imagemin-svgo'),\n  fs = require('fs'),\n  path = require('path');\n\n\nFor the sake of keeping this tutorial simple, we’ll limit our use case to JPGs.\n\nA particular standout here worth mentioning here is WebP\n[https://developers.google.com/speed/webp/]: a “next-gen” image compression for\nthe web which supposedly offers the best image quality for the smallest file\nsize available.\n\nLet’s Get This Going\nSome people (myself included) like to specify paths to their assets as a single\nvariable in their Gulpfile. This is even more relevant in the case of anybody\nusing Ghost, where images are in a totally different file structure from where\nour Gulpfile lives.\n\nvar gulp = require('gulp'),\n  imagemin = require('gulp-imagemin'),\n  imageminJpegtran = require('imagemin-jpegtran'),\n  fs = require('fs'),\n  path = require('path');\nvar paths = {\n  styles: {\n    src: 'src/less/*.less',\n    dest: 'assets/css'\n  },\n  scripts: {\n    src: 'src/js/*.js',\n    dest: 'assets/js'\n  },\n  html: {\n    src: 'views/*.hbs',\n    dest: 'assets/'\n  },\n  images: {\n    src: '/var/www/my-theme/content/images/2018/',\n    dest: '/var/www/my-theme/content/images/2018/'\n  }\n};\n\n\nLooping Through Folders\nWe need to look in our /images  folder are recursively find all folders\ncontaining images. Referencing the image path we set in paths, we’ll build an\narray of targeted folders:\n\nfunction image_loop() {\n  var folder_arr = []\n  fs.readdir(paths.images.src, function(err, folders) {\n    for(var i =0; i < folders.length; i++){\n      var folder_path = path.join(paths.images.src, folders[i]);\n      folder_arr.push(folder_path);\n    }\n    for(var i =0; i < folder_arr.length; i++) {\n        images(folder_arr[i]);\n    }\n  });\n}\n\n\nfs.readdir()  is a method that returns the contents of any directory. We'll\ncreate a function called image_loop which loops through all folders in the\ntarget directory, and will then call another function to compress the contents:\n\nfunction image_loop() { \n   fs.readdir(paths.images.src, function(err, folders) { \n      for(var i =0; i < folders.length; i++){ \n         var folder_path = path.join(paths.images.src, folders[i]);   \n         images(folders[i]); \n       } \n   }); \n }\n\n\nCompressing Images in Each Folder\nimage_loop  calls function images  once per folder to compress the contents of\neach folder. Here’s where we actually get to use imagemin:\n\nfunction image_loop() {\n  fs.readdir(paths.images.src, function(err, folders) {\n    for(var i =0; i < folders.length; i++){\n      var folder_path = path.join(paths.images.src, folders[i]);\n      images(folders[i]);\n    }\n  });\n}\n\n\nSimple enough, all we’re doing is:\n\n * Looking for files ending in .jpg  in each folder\n * Running imageminJpegtran to compress each JPG file\n * Specifying verbose, which prints the result to the console (for example: \n   “Minified 0 images”)\n * Writing files to the destination (which is the same as the source, thus\n   overwriting our files)\n\nPut it All Together\nvar gulp = require('gulp'),\n  imagemin = require('gulp-imagemin'),\n  imageminJpegtran = require('imagemin-jpegtran'),\n  fs = require('fs'),\n  path = require('path');\nvar paths = {\n  styles: {\n    src: 'src/less/*.less',\n    dest: 'assets/css'\n  },\n  scripts: {\n    src: 'src/js/*.js',\n    dest: 'assets/js'\n  },\n  html: {\n    src: 'views/*.hbs',\n    dest: 'assets/'\n  },\n  images: {\n    src: '/var/www/my-theme/content/images/2018/',\n    dest: '/var/www/my-theme/content/images/2018/'\n  }\n};\nfunction images(folder_path) {\n  return gulp.src(folder_path + '/*.jpg')\n  .pipe(imagemin(\n    [imageminJpegtran({progressive: true})],\n    {verbose: true}\n  ))\n  .pipe(gulp.dest(paths.images.dest));\n}\nfunction image_loop() {\n  fs.readdir(paths.images.src, function(err, folders) {\n    for(var i =0; i < folders.length; i++){\n      var folder_path = path.join(paths.images.src, folders[i]);\n      images(folders[i]);\n    }\n  });\n}\nvar build = gulp.parallel(styles, scripts, image_loop);\ngulp.task('default', build);\n\n\nAnd there you have it; a Gulpfile which compresses your images without intruding\nrequiring any sort of relinking.\n\nIf you’re interested in imagemin  or further optimizing your site, I highly\nrecommend Google’s recently announced beta of https://web.dev [https://web.dev/]\n. This is an excellent resource for auditing your site for opportunities on\nspeed, SEO, and more.","html":"<p>I promised myself I wouldn’t get involved in any more Gulp tutorials; task runners aren’t exactly the sexiest topic in the world, and chances are if you’ve made it to this blog, you’ve either solidified a CI/CD pipeline for going live with software, or you simply don’t need one. We’ll make an exception this time, because <strong><strong>gulp-imagemin</strong></strong> is particularly dope.</p><p><a href=\"https://github.com/imagemin/imagemin\" rel=\"noopener\"><strong><strong>Imagemin</strong></strong></a> is a standalone Node library which also comes with a <a href=\"https://github.com/imagemin/imagemin-cli\" rel=\"noopener\">CLI</a>, and of course, a <a href=\"https://github.com/sindresorhus/gulp-imagemin\" rel=\"noopener\">Gulp plugin</a>. In short, <em>imagemin</em> compresses images in a given directory and is intelligent enough to recognize images it has already compressed. This is huge because it means we can recklessly tell <em>imagemin</em> to compress the same folder of images hundreds of times, and each image will only be compressed exactly once.</p><p>For this tutorial, we’ll be taking <strong><strong>gulp-imagemin </strong></strong>and creating a task to compress images in complex folder structures.</p><h3 id=\"using-imagemin-on-complex-folder-structures\">Using Imagemin on Complex Folder Structures</h3><p>We’ve probably mentioned this once or twice before, but this blog is a theme running on a <a href=\"https://ghost.org/\" rel=\"noopener\"><strong><strong>Ghost</strong></strong></a><strong><strong> </strong></strong>stack. The thing about Ghost (and probably any other blogging platform) is that it stores content in a date-based folder hierarchy. <strong><strong>/images</strong></strong> looks like this:</p><pre><code class=\"language-bash\">/images\n├─ /2017\n│  └─ 01\n│  └─ 02\n│  └─ 03\n│  └─ 04\n│  └─ 05\n│  └─ 06\n│  └─ 07\n│  └─ 08\n│  └─ 09\n│  └─ 10\n│  └─ 11\n│  └─ 12\n└─ /2018\n   └─ 01\n   └─ 02\n   └─ 03\n   └─ 04\n   └─ 05\n   └─ 06\n   └─ 07\n   └─ 08\n   └─ 09\n   └─ 10\n   └─ 11\n</code></pre>\n<p><strong><strong>Imagemin</strong></strong> does <em>not</em> work recursively, so we’ll need to handle looping through this file structure ourselves.</p><h3 id=\"starting-our-gulpfile\">Starting our Gulpfile</h3><p>Let’s get started by going through the barebones of the libraries required to make this happen:</p><pre><code class=\"language-javascript\">var gulp = require('gulp'),\n  imagemin = require('gulp-imagemin'),\n  fs = require('fs'),\n  path = require('path');\n</code></pre>\n<p><strong><strong>gulp-imagemin </strong></strong>is the core Gulp plugin we need to compress our images, but is actually useless on it’s own — we need to also import <em>plugins-for-a-plugin; </em>gulp-imagemin requires a separate plugin for each image type we need to express.</p><p>We’re also requiring <strong><strong>fs </strong></strong>and <strong><strong>path</strong></strong> here, which will let us walk through folder structures programmatically.</p><h3 id=\"imagemin-plugins\">Imagemin Plugins</h3><p>As mentioned imagemin itself has plugins per image type: only require the ones you think you’ll need:</p><pre><code class=\"language-javascript\">var gulp = require('gulp'),\n  imagemin = require('gulp-imagemin'),\n  imageminWebp = require('imagemin-webp'),\n  imageminJpegtran = require('imagemin-jpegtran'),\n  imageminPngquant = require('imagemin-pngquant'),\n  imageminGifSicle = require('imagemin-gifsicle'),\n  imageminOptiPng = require('imagemin-optipng'),\n  imageminSvgo = require('imagemin-svgo'),\n  fs = require('fs'),\n  path = require('path');\n</code></pre>\n<p>For the sake of keeping this tutorial simple, we’ll limit our use case to JPGs.</p><p>A particular standout here worth mentioning here is <a href=\"https://developers.google.com/speed/webp/\" rel=\"noopener\">WebP</a>: a “next-gen” image compression for the web which supposedly offers the best image quality for the smallest file size available.</p><h3 id=\"let-s-get-this-going\">Let’s Get This Going</h3><p>Some people (myself included) like to specify paths to their assets as a single variable in their Gulpfile. This is even more relevant in the case of anybody using <strong><strong>Ghost, </strong></strong>where images are in a totally different file structure from where our Gulpfile lives.</p><pre><code class=\"language-javascript\">var gulp = require('gulp'),\n  imagemin = require('gulp-imagemin'),\n  imageminJpegtran = require('imagemin-jpegtran'),\n  fs = require('fs'),\n  path = require('path');\nvar paths = {\n  styles: {\n    src: 'src/less/*.less',\n    dest: 'assets/css'\n  },\n  scripts: {\n    src: 'src/js/*.js',\n    dest: 'assets/js'\n  },\n  html: {\n    src: 'views/*.hbs',\n    dest: 'assets/'\n  },\n  images: {\n    src: '/var/www/my-theme/content/images/2018/',\n    dest: '/var/www/my-theme/content/images/2018/'\n  }\n};\n</code></pre>\n<h3 id=\"looping-through-folders\">Looping Through Folders</h3><p>We need to look in our <strong><strong>/images</strong></strong> folder are recursively find all folders containing images. Referencing the image path we set in <strong><strong>paths</strong></strong>, we’ll build an array of targeted folders:</p><pre><code class=\"language-javascript\">function image_loop() {\n  var folder_arr = []\n  fs.readdir(paths.images.src, function(err, folders) {\n    for(var i =0; i &lt; folders.length; i++){\n      var folder_path = path.join(paths.images.src, folders[i]);\n      folder_arr.push(folder_path);\n    }\n    for(var i =0; i &lt; folder_arr.length; i++) {\n        images(folder_arr[i]);\n    }\n  });\n}\n</code></pre>\n<p><code>fs.readdir()</code> is a method that returns the contents of any directory. We'll create a function called <strong><strong>image_loop </strong></strong>which loops through all folders in the target directory, and will then call another function to compress the contents:</p><pre><code class=\"language-javascript\">function image_loop() { \n   fs.readdir(paths.images.src, function(err, folders) { \n      for(var i =0; i &lt; folders.length; i++){ \n         var folder_path = path.join(paths.images.src, folders[i]);   \n         images(folders[i]); \n       } \n   }); \n }\n</code></pre>\n<h3 id=\"compressing-images-in-each-folder\">Compressing Images in Each Folder</h3><p><strong><strong>image_loop</strong></strong> calls function <strong><strong>images</strong></strong> once per folder to compress the contents of each folder. Here’s where we actually get to use <strong><strong>imagemin:</strong></strong></p><pre><code class=\"language-javascript\">function image_loop() {\n  fs.readdir(paths.images.src, function(err, folders) {\n    for(var i =0; i &lt; folders.length; i++){\n      var folder_path = path.join(paths.images.src, folders[i]);\n      images(folders[i]);\n    }\n  });\n}\n</code></pre>\n<p>Simple enough, all we’re doing is:</p><ul><li>Looking for files ending in <strong><strong>.jpg</strong></strong> in each folder</li><li>Running <strong><strong>imageminJpegtran </strong></strong>to compress each JPG file</li><li>Specifying <strong><strong>verbose</strong></strong>, which prints the result to the console (for example: <em>“Minified 0 images”</em>)</li><li>Writing files to the destination (which is the same as the source, thus overwriting our files)</li></ul><h2 id=\"put-it-all-together\">Put it All Together</h2><pre><code class=\"language-javascript\">var gulp = require('gulp'),\n  imagemin = require('gulp-imagemin'),\n  imageminJpegtran = require('imagemin-jpegtran'),\n  fs = require('fs'),\n  path = require('path');\nvar paths = {\n  styles: {\n    src: 'src/less/*.less',\n    dest: 'assets/css'\n  },\n  scripts: {\n    src: 'src/js/*.js',\n    dest: 'assets/js'\n  },\n  html: {\n    src: 'views/*.hbs',\n    dest: 'assets/'\n  },\n  images: {\n    src: '/var/www/my-theme/content/images/2018/',\n    dest: '/var/www/my-theme/content/images/2018/'\n  }\n};\nfunction images(folder_path) {\n  return gulp.src(folder_path + '/*.jpg')\n  .pipe(imagemin(\n    [imageminJpegtran({progressive: true})],\n    {verbose: true}\n  ))\n  .pipe(gulp.dest(paths.images.dest));\n}\nfunction image_loop() {\n  fs.readdir(paths.images.src, function(err, folders) {\n    for(var i =0; i &lt; folders.length; i++){\n      var folder_path = path.join(paths.images.src, folders[i]);\n      images(folders[i]);\n    }\n  });\n}\nvar build = gulp.parallel(styles, scripts, image_loop);\ngulp.task('default', build);\n</code></pre>\n<p>And there you have it; a Gulpfile which compresses your images without intruding requiring any sort of relinking.</p><p>If you’re interested in <strong><strong>imagemin</strong></strong> or further optimizing your site, I highly recommend Google’s recently announced beta of <a href=\"https://web.dev/\" rel=\"noopener\">https://web.dev</a>. This is an excellent resource for auditing your site for opportunities on speed, SEO, and more.</p>","url":"https://hackersandslackers.com/simple-image-size-optimization-using-imagemin-and-gulp/","uuid":"e80f7a95-da5e-417f-8a71-683772fd93a9","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5bef56bc5bebbe659bef57c0"}},"pageContext":{"slug":"simple-image-size-optimization-using-imagemin-and-gulp"}}