{"data":{"ghostTag":{"slug":"software-development","name":"Software Development","visibility":"public","feature_image":null,"description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","meta_description":"General software development principals and tools. Receive insights applicable to building any application."},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736ee","title":"Structuring Your Flask Application","slug":"structuring-your-flask-app","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/09/flaskblueprints2@2x.jpg","excerpt":"Leverage Blueprints, Flask-Assets, and the Application Factory.","custom_excerpt":"Leverage Blueprints, Flask-Assets, and the Application Factory.","created_at_pretty":"02 September, 2018","published_at_pretty":"15 October, 2018","updated_at_pretty":"23 February, 2019","created_at":"2018-09-02T03:02:29.000-04:00","published_at":"2018-10-15T08:00:00.000-04:00","updated_at":"2019-02-23T11:21:49.000-05:00","meta_title":"Structuring your Flask Application | Hackers and Slackers","meta_description":"Follow best practices when building your Flask apps. Leverage Blueprints, Flask-Assets, and the Application Factory.","og_description":"Follow best practices when building your Flask apps. Leverage Blueprints, Flask-Assets, and the Application Factory.","og_image":"https://hackersandslackers.com/content/images/2018/09/flaskblueprints2@2x.jpg","og_title":"Structuring your Flask App Like an Adult | Hackers and Slackers","twitter_description":"Follow best practices when building your Flask apps. Leverage Blueprints, Flask-Assets, and the Application Factory.","twitter_image":"https://hackersandslackers.com/content/images/2018/09/flaskblueprints2@2x.jpg","twitter_title":"Structuring your Flask App Like an Adult | Hackers and Slackers","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"},{"name":"#Building Flask Apps","slug":"building-flask-apps","description":"Python’s fast-growing and flexible microframework. Can handle apps as simple as API endpoints, to monoliths remininiscent of Django.","feature_image":"https://hackersandslackers.com/content/images/2019/03/flask-gettingstarted.jpg","meta_description":"Python’s fastest growing, most flexible, and perhaps most Pythonic framework.","meta_title":"Building Flask Apps","visibility":"internal"}],"plaintext":"When we first started developing in Flask, most of us took the 5 lines of code\nin the quick-start guide and ran with it. Compared to every other web framework,\ngetting a \"Hello world\" to flash on screen without being hassled with database\nconfigurations, template preferences, or reverse proxy setups felt a lot like\nrobbing a bank.\n\nAt some point or another, we inevitably pause the party and take a look around.\nAll of our views are smashed into a single file named something meaningless like\n app.py. All logic lives in the root directory. We're in our 30s and the app\nwe've just created looks as terrible as our bathrooms. It's time to get our shit\ntogether.\n\nThe Flask Application Factory\nThe overwhelming preference to start a Flask application is to use a structure\ndubbed the Application Factory\n[http://flask.pocoo.org/docs/1.0/patterns/appfactories/]. The gist is to keep\nthe initialization preferences of our application in a single __init__.py  file,\nsometimes borrowing help from peer files such as db.py  or models.py. Either\nway, the gist is to keep global logic separated from the other parts.\n\nA simple app using the application factory method might look something like\nthis:\n\n[app]\n├── myapp/\n│   ├── __init__.py\n│   ├── db.py\n│   ├── forms.py\n│   ├── models.py\n│   ├── views.py\n│   ├── static/\n│   └── templates/\n├── config.py\n├── requirements.txt\n├── setup.py\n├── Pipfile\n├── Pipfile.lock\n├── README.md\n├── app.json\n└── wsgi.py\n\n\nThe main takeaway here being the presence of the myapp  directory which now\nhouses our app logic, and the presence of our good friend __init__.py.\n\nAn example of what might live in __init.py__  could be something like this:\n\nimport os\nimport sys\nfrom flask import Flask, g\nfrom config import BaseConfig\nfrom flask_login import LoginManager\nfrom flask_pymongo import PyMongo\n\n\ndef create_app():\n    app = Flask(__name__, instance_relative_config=True)\n    app.config.from_object('config.BaseConfig')\n    login = LoginManager()\n\n    with app.app_context():\n        from . import views\n        from . import auth\n        login.init_app(app)\n        mongo = PyMongo(app, app.config['MONGO_URI'])\n        app.register_blueprint(views.main)\n        app.register_blueprint(admin.admin)\n\n        return app\n\n\nHere we initialize our app and the dependencies we'd like to initialize within a\nsingle function. Most familiar might be the first two lines of our function: The\nfirst creating our app object, and the second loading a config from a class in a\nconfig file.\n\nAnother common practice is to keep libraries which need to run init_app  in this\nfile as well. This could be something like the LoginManager  seen in the example\nabove, or a global database configuration. Lastly, this is also where we would\nregister any Blueprints  as well.\n\nUsing Blueprints in Flask\nWhile the Application Factory is an excellent first step to building cohesive\napps, we haven't solved the problem of organizing our app into separation of\nconcerns. Blueprints  are a way for us to separate our app into parts which\nshare very little with one another. Prime examples would include apps with an \nadmin  panel with an accompanying client-facing  side, or apps where the \"logged\nin\" state is vastly different from the app's \"logged out\"  state. In these\ncases, it seems silly to mix both logic and static assets into a single lump,\nwhich is where Blueprints come in.\n\nNOTE:  If you're a Django person and this is all starting to sound familiar,\nthat's because we can equate Flask's Blueprints  to Django's concept of apps. \nThere are differences and added flexibility, but the concept remains the same.\n\nRegistering a part of your app as a Blueprint begins with the following two\nlines:\n\nfrom flask import Blueprint\n\nauth = Blueprint('auth', __name__)\n\n\nWhen we registered the admin  Blueprint previously in __init__.py, the line \napp.register_blueprint(admin.admin)  is essentially saying \"look for a Blueprint \n named admin  in a module (either file or folder structure) called admin.\"  It's\nimportant not to overlook the concept that Blueprints can either be single files\nor entirely standalone file structures with their own templates and static\nfiles.  For instance, a Flask app with completely decoupled Blueprints might be\nstructured as follows:\n\n[app]\n├── myapp/\n│   ├── __init__.py\n│   ├── admin/\n│   │    ├── __init__.py\n│   │    ├── views.py\n│   │    ├── forms.py\n│   │    ├── static/\n│   │\t └── templates/\n│   ├── frontend/\n│   │    ├── __init__.py\n│   │    ├── views.py\n│   │    ├── forms.py\n│   │    ├── static/\n│   │\t └── templates/  \n│   ├── db.py\n│   ├── forms.py\n│   ├── models.py\n│   └── views.py\n├── config.py\n├── requirements.txt\n├── setup.py\n├── Pipfile\n├── Pipfile.lock\n├── README.md\n├── app.json\n└── wsgi.py\n        \n\n\nIn the case above, each Blueprint  stands as though it were its own Python\nmodule. Each blueprint contains its own logic, templates, and static files -\npresumably encapsulated in a way which makes sense.\n\nUsing Flask-Assets with Blueprints\nWe've already forced a lot of information down your throat, but there's one last\nthing worth mentioning in this overview of working with Blueprints, which is\nworking with assets. We've previously looked at the Flask-Static-Compress \nlibrary for static asset management, but Blueprints  lend themselves better to \nFlask-Assets  way of thinking.\n\nFlask-Assets  is a library which creates a bundle (aka compressed) of assets\nupfront. Thus, the start of a Blueprint definition might now look something like\nthis:\n\nfrom flask import Blueprint\nfrom flask_assets import Environment, Bundle, build\nimport sass\n\nauth = Blueprint('admin', __name__)\n\nassets = Environment(admin)\nscss = Bundle('scss/main.scss', 'scss/forms.scss', filters='libsass', output='build/css/style.css')\nassets.register('scss_all', scss)\nscss.build()\n\n\nEnvironment  states the context of our asset bundle, which is admin, the current\nBlueprint. \n\nBundle  takes any number of files to compressed together as arguments. Then we\nmust pass the type of \"filter\" the assets are (typically a precompiler) and of\ncourse an output destination for the Bundle.\n\n.register()  registers the bundle we just created, not unlike the way we\nregistered our Blueprint.\n\n.build()  must be called explicitly in order to build the bundle at runtime.\nConversely, we could intentionally exclude .build()  if we expect our assets are\nnot to change.\n\nAnd Now You Know Everything\n...or not, really. The most we should take from this post is:\n\n * There's a better way to structure our apps.\n * There are many potential decisions we can make about the structure of our\n   app.\n * There's way more stuff we need to Google or look up on StackOverflow.\n\nTruthfully, there are plenty of resources within Flask's documentation\n[http://flask.pocoo.org/docs/1.0/tutorial/views/#]  or around the internet that\ncovers the topic of Flask app organization and its granular topics more than\nthis single post could ever hope to. Nonetheless, here's to hoping you're\nfeeling a sense of direction in these crazy, adult lives of ours.","html":"<p>When we first started developing in Flask, most of us took the 5 lines of code in the quick-start guide and ran with it. Compared to every other web framework, getting a \"Hello world\" to flash on screen without being hassled with database configurations, template preferences, or reverse proxy setups felt a lot like robbing a bank.</p><p>At some point or another, we inevitably pause the party and take a look around. All of our views are smashed into a single file named something meaningless like <code>app.py</code>. All logic lives in the root directory. We're in our 30s and the app we've just created looks as terrible as our bathrooms. It's time to get our shit together.</p><h2 id=\"the-flask-application-factory\">The Flask Application Factory</h2><p>The overwhelming preference to start a Flask application is to use a structure dubbed the <a href=\"http://flask.pocoo.org/docs/1.0/patterns/appfactories/\">Application Factory</a>. The gist is to keep the initialization preferences of our application in a single <code>__init__.py</code> file, sometimes borrowing help from peer files such as <code>db.py</code> or <code>models.py</code>. Either way, the gist is to keep global logic separated from the other parts.</p><p>A simple app using the application factory method might look something like this:</p><pre><code class=\"language-shell\">[app]\n├── myapp/\n│   ├── __init__.py\n│   ├── db.py\n│   ├── forms.py\n│   ├── models.py\n│   ├── views.py\n│   ├── static/\n│   └── templates/\n├── config.py\n├── requirements.txt\n├── setup.py\n├── Pipfile\n├── Pipfile.lock\n├── README.md\n├── app.json\n└── wsgi.py\n</code></pre>\n<p>The main takeaway here being the presence of the <strong>myapp</strong> directory which now houses our app logic, and the presence of our good friend <code>__init__.py</code>.</p><p>An example of what might live in <code>__init.py__</code> could be something like this:</p><pre><code class=\"language-python\">import os\nimport sys\nfrom flask import Flask, g\nfrom config import BaseConfig\nfrom flask_login import LoginManager\nfrom flask_pymongo import PyMongo\n\n\ndef create_app():\n    app = Flask(__name__, instance_relative_config=True)\n    app.config.from_object('config.BaseConfig')\n    login = LoginManager()\n\n    with app.app_context():\n        from . import views\n        from . import auth\n        login.init_app(app)\n        mongo = PyMongo(app, app.config['MONGO_URI'])\n        app.register_blueprint(views.main)\n        app.register_blueprint(admin.admin)\n\n        return app\n</code></pre>\n<p>Here we initialize our app and the dependencies we'd like to initialize within a single function. Most familiar might be the first two lines of our function: The first creating our app object, and the second loading a config from a class in a config file.</p><p>Another common practice is to keep libraries which need to run <code>init_app</code> in this file as well. This could be something like the <code>LoginManager</code> seen in the example above, or a global database configuration. Lastly, this is also where we would register any <strong>Blueprints</strong> as well.</p><h2 id=\"using-blueprints-in-flask\">Using Blueprints in Flask</h2><p>While the Application Factory is an excellent first step to building cohesive apps, we haven't solved the problem of organizing our app into <em>separation of concerns</em>. <strong>Blueprints</strong> are a way for us to separate our app into parts which share very little with one another. Prime examples would include apps with an <em>admin</em> panel with an accompanying <em>client-facing</em> side, or apps where the \"<em>logged in\" </em>state is vastly different from the app's \"<em>logged out\"</em> state. In these cases, it seems silly to mix both logic and static assets into a single lump, which is where Blueprints come in.</p><p><strong>NOTE:</strong> If you're a Django person and this is all starting to sound familiar, that's because we can equate Flask's <strong>Blueprints</strong> to Django's concept of <strong>apps.</strong> There are differences and added flexibility, but the concept remains the same.</p><p>Registering a part of your app as a Blueprint begins with the following two lines:</p><pre><code class=\"language-python\">from flask import Blueprint\n\nauth = Blueprint('auth', __name__)\n</code></pre>\n<p>When we registered the <code>admin</code> Blueprint previously in <code>__init__.py</code>, the line <code>app.register_blueprint(admin.admin)</code> is essentially saying \"look for a <strong>Blueprint</strong> named <em>admin</em> in a module (either file or folder structure) called <em>admin.\"</em> It's important not to overlook the concept that Blueprints can either be single files or <em>entirely standalone file structures with their own templates and static files.</em> For instance, a Flask app with completely decoupled Blueprints might be structured as follows:</p><pre><code class=\"language-shell\">[app]\n├── myapp/\n│   ├── __init__.py\n│   ├── admin/\n│   │    ├── __init__.py\n│   │    ├── views.py\n│   │    ├── forms.py\n│   │    ├── static/\n│   │\t └── templates/\n│   ├── frontend/\n│   │    ├── __init__.py\n│   │    ├── views.py\n│   │    ├── forms.py\n│   │    ├── static/\n│   │\t └── templates/  \n│   ├── db.py\n│   ├── forms.py\n│   ├── models.py\n│   └── views.py\n├── config.py\n├── requirements.txt\n├── setup.py\n├── Pipfile\n├── Pipfile.lock\n├── README.md\n├── app.json\n└── wsgi.py\n        \n</code></pre>\n<p>In the case above, each <strong>Blueprint</strong> stands as though it were its own Python module. Each blueprint contains its own logic, templates, and static files - presumably encapsulated in a way which makes sense.</p><h2 id=\"using-flask-assets-with-blueprints\">Using Flask-Assets with Blueprints</h2><p>We've already forced a lot of information down your throat, but there's one last thing worth mentioning in this overview of working with <strong>Blueprints, </strong>which is working with assets. We've previously looked at the <code>Flask-Static-Compress</code> library for static asset management, but <strong>Blueprints</strong> lend themselves better to <code>Flask-Assets</code> way of thinking.</p><p><code>Flask-Assets</code> is a library which creates a bundle (aka compressed) of assets upfront. Thus, the start of a Blueprint definition might now look something like this:</p><pre><code class=\"language-shell\">from flask import Blueprint\nfrom flask_assets import Environment, Bundle, build\nimport sass\n\nauth = Blueprint('admin', __name__)\n\nassets = Environment(admin)\nscss = Bundle('scss/main.scss', 'scss/forms.scss', filters='libsass', output='build/css/style.css')\nassets.register('scss_all', scss)\nscss.build()\n</code></pre>\n<p><code>Environment</code> states the context of our asset bundle, which is admin, the current Blueprint. </p><p><code>Bundle</code> takes any number of files to compressed together as arguments. Then we must pass the type of \"filter\" the assets are (typically a precompiler) and of course an output destination for the Bundle.</p><p><code>.register()</code> registers the bundle we just created, not unlike the way we registered our Blueprint.</p><p><code>.build()</code> must be called explicitly in order to build the bundle at runtime. Conversely, we could intentionally exclude <code>.build()</code> if we expect our assets are not to change.</p><h2 id=\"and-now-you-know-everything\">And Now You Know Everything</h2><p>...or not, really. The most we should take from this post is:</p><ul><li>There's a better way to structure our apps.</li><li>There are many potential decisions we can make about the structure of our app.</li><li>There's way more stuff we need to Google or look up on StackOverflow.</li></ul><p>Truthfully, there are plenty of resources within <a href=\"http://flask.pocoo.org/docs/1.0/tutorial/views/#\">Flask's documentation</a> or around the internet that covers the topic of Flask app organization and its granular topics more than this single post could ever hope to. Nonetheless, here's to hoping you're feeling a sense of direction in these crazy, adult lives of ours.</p>","url":"https://hackersandslackers.com/structuring-your-flask-app/","uuid":"4345eb76-e1ce-471a-94b9-f06a43c3ad27","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b8b8b05852e5c07171fcab7"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867371a","title":"Compile Frontend JavaScript with Babel and Gulp","slug":"babel-ecma-script","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/10/babel-1@2x.jpg","excerpt":"Using ECMAScript functions on the frontend the quick and dirty way.","custom_excerpt":"Using ECMAScript functions on the frontend the quick and dirty way.","created_at_pretty":"04 October, 2018","published_at_pretty":"06 October, 2018","updated_at_pretty":"02 February, 2019","created_at":"2018-10-03T23:05:08.000-04:00","published_at":"2018-10-06T06:20:00.000-04:00","updated_at":"2019-02-02T04:55:50.000-05:00","meta_title":"Frontend JavaScript with Babel | Hackers and Slackers","meta_description":"Babel looks at new ECMA syntax (like require,  const or promise) and compiles code which is logic-equivalent to these features using vanilla Javascript.","og_description":"Babel looks at new ECMA syntax (like require,  const or promise) and compiles code which is logic-equivalent to these features using vanilla Javascript.","og_image":"https://hackersandslackers.com/content/images/2018/10/babel-1@2x.jpg","og_title":"Compile Frontend JavaScript with Babel and Gulp","twitter_description":"Babel looks at new ECMA syntax (like require,  const or promise) and compiles code which is logic-equivalent to these features using vanilla Javascript.","twitter_image":"https://hackersandslackers.com/content/images/2018/10/babel-1@2x.jpg","twitter_title":"Compile Frontend JavaScript with Babel and Gulp","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"JavaScript","slug":"javascript","description":"JavaScript covering both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","feature_image":null,"meta_description":"JavaScript topics, both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","meta_title":"Javascript Tutorials | Hackers and Slackers","visibility":"public"},"tags":[{"name":"JavaScript","slug":"javascript","description":"JavaScript covering both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","feature_image":null,"meta_description":"JavaScript topics, both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","meta_title":"Javascript Tutorials | Hackers and Slackers","visibility":"public"},{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"}],"plaintext":"NOTE: This post has not aged particularly well. This is made evident by the\npresence of the word \"Gulp\" present throughout the post.\n\n\n--------------------------------------------------------------------------------\n\nAs you may have already deduced from the occasional glaring holes in my\nprogramming knowledge, I haven’t spent as much of my life programming than,\nwell, anybody who haphazardly threw away an 8-year product management career.\nApparently, a lot can happen in 8 years... especially when it comes to\nJavaScript.\nPutting aside that whole server-side  NodeJS thing or whatever it’s called,\nthere’s years worth of mindfucks for those of us who fairly recently returned to\ndev. In our absence, the world has been Grunting, Gulping, Yarning and even\nNPMing. Let’s assume we’ve gotten past all of that... phew. Oh wait, I forgot to\nmention the monstrosity of “hey by way there’s this mess of a hardly-explained\n(protocol? organization? Fancy Github Repo?) called Babel that we all depend on\nto do meaningful shit in the browser these days.”\n\nIf you’re here because you’re trying to figure what the hell all these ‘const’\nand ‘import’ keywords are doing in modern-day browser JavaScript, consider this\nhalf focus-group and half getting-started tutorial. For the rest of you\nexperienced JS devs out there, perhaps you should stay. No, by all means, I’d\nlike you to sit here and think about the kind of ecosystem you’ve decided to\npatch together. Do it; otherwise, I might just give Kik a call to see what other\ntiny NPM modules they’d like to arbitrarily demand the removal of... remember\nthat? Exactly. Now think about what you’ve done.\n\nECMAScript and the Backwards-Compatible Web\nAny Actionscript veterans in the house? No? Just me? Great. Anyway, There’s\nsomething that ActionScript, JavaScript, and a bunch of Whatever-scripts have in\ncommon: they’re all implementations of ECMAScript: the ancestral equivalent of\ncomparing Latin to Spanish or French, but just one added detail: ECMAScript is\nstill a living language, and constantly improving. If some nation of cool cats\nstill spoke Latin as an active language and were constantly coming up with sick\nnew slang terms, those speaking French or Spanish would be powerless to come up\nwith phrases nearly as cool as “lit” or \"fam\"  (or whatever those Latin\nequivalents would be).\n\nThe problem is web browsers are inherently backward-compatible monstrosities.\nMost revenue-generating companies look at their >5% user base using Internet\nExplorer three and a half, and think “oh my god, that’s five percent of our\npotential revenue” (it isn’t, but whatever). That’s where we stand.\n\nNew features? For the INTERNET?\nI remember one particular weekend I rented a hotel room for the sole purpose of\nwrapping up an app based on MongoDB Stitch at the time. I was pretty confident I\nhad it all figured out, but found, something about Mongo’s quick start guides\nfelt off (I mean, more off than the rest of their nearly unreadable docs). Why\ndid Mongo insist on inline JavaScript? Haven’t we evolved past the days where\nPHP, HTML, CSS, and JS all lived on the same page?\n\nAs everybody-who-wasn’t-me at time already knows, JavaScript has been reaping\nthe benefits of new evolutions in ECMAScript over the years, but there’s a\ncatch: only the most modern browsers know what the hell to do with these new\nfeatures (duh), and they only do so with the dreaded  blocks thrown on HTML\npages. Attempting to use modern ECMA features in a linked JS file which hasn’t\nbeen pre-compiled is like dividing by zero. Seriously, you might die.\n\nBabel to the Rescue\nMore research only lead to more questions. Who is this Browserify wizard\n[http://browserify.org/]  and why is he dead? What is Webpack doing to fund all\ntheir highly produced branding, and why would anybody purchase a Webpack T-shirt\n[https://webpack.threadless.com/]? Finally, the biggest question of all: who the\nhell is this Babel guy who gives off as an electric explosion in your face on\nhard drugs?\n\nI can't even the difference between a compiler and a Marvel franchise anymore.I\nthink it was at this point in my journey of catching up on the last decade where\nI went truly mad and began pacing around my room, verbally assaulting inanimate\nobjects, and eventually even found myself washed up in a Wendys down the street,\nshivering and crying to myself. \n\nNow that I've been released from the psyche ward and are free to wander the\nstreets again, I've managed to piece together a bare-minimum understanding of\nwhat the hell is going on.\n\nWhat the Hell is Going On\nBecause Javascript as a language is destined to be backwards compatible to a\nyear when OJ Simpson was on trial and Windows 95 was considered cutting-edge\ntechnology, Babel  aims to \"improve\" browser Javascript. Because we can't\nactually improve or change the underlying technology, Babel looks at new-fangled\nECMA syntax (containing words like require,const  or promise) and compiles logic\nequivalent to these features with vanilla Javascript. If that sounds similar to\nhow Gulp  takes CSS preprocessors (like LESS  or SASS) and turns those files\ninto interpretable browser code, well, that's exactly what happens. \n\nGulp  is not be the only way to utilize new ECMAScript features. Babel syntax\ncan be compiled a number of ways, such as Babel's CLI\n[https://babeljs.io/docs/en/babel-cli], or from Server-side JS, or Webpack  if\nyou're Mister-Fancy-Pants. In fact, the trend across the board is that compiling\nyour site with modules via Webpack is winning dramatically. For all we know,\nthis could be the last Babel Gulp tutorial ever written.\n\nRight now we're focusing on the ability to use ECMAScript features on the\nfrontend; a common use-case for things like... well... theming the presentation\nlayer for a blog. If we can pull it off with Gulp, you probably won't struggle\nmuch with future methods.\n\nBabel NPM Packages\nAlright, so Babel isn't just a single NPM package. It's a lot. Let's see what's\nthere in a basic package.json:\n\n{\n  \"name\": \"example\",\n  \"scripts\": {\n    \"build\": \"babel src -d lib\"\n  },\n  \"presets\": [\n    \"env\"\n  ],\n  \"engines\": {\n    \"node\": \"8.12.0\"\n  },\n  \"dependencies\": {\n    \"@babel/polyfill\": \"^7.0.0\",\n    \"@babel/runtime\": \"^7.1.2\",\n    \"@babel/runtime-corejs2\": \"^7.1.2\",\n    \"babel-runtime\": \"^6.26.0\",\n    \"gulp-resolve-dependencies\": \"^2.2.0\",\n    \"gulp-sourcemaps\": \"^2.6.4\",\n    \"gulp-uglify-es\": \"^1.0.4\",\n  },\n  \"devDependencies\": {\n    \"@babel/cli\": \"^7.1.2\",\n    \"@babel/core\": \"^7.1.2\",\n    \"@babel/plugin-syntax-dynamic-import\": \"^7.0.0\",\n    \"@babel/plugin-transform-runtime\": \"^7.1.0\",\n    \"@babel/preset-env\": \"^7.1.0\",\n  }\n}\n\nLet's not go through all these in detail- in fact, let's take a look at our \ngulpfile.js:\n\n'use strict';\n\nvar gulp = require('gulp'),\n  concat = require('gulp-concat'),\n  autoprefixer = require('gulp-autoprefixer'),\n  sourcemaps = require('gulp-sourcemaps'),\n  babel = require('gulp-babel'),\n  resolveDependencies = require('gulp-resolve-dependencies'),\n\n\nvar paths = {\n  scripts: {\n    src: 'src/js/*.js',\n    dest: 'assets/js'\n  }\n};\n\nfunction scripts() {\n  return gulp.src(paths.scripts.src)\n    .pipe(babel({\n          presets: ['@babel/env'],\n          plugins: ['@babel/transform-runtime', '@babel/plugin-syntax-dynamic-import']\n    }))\n    .on('error', console.error.bind(console))\n    .pipe(resolveDependencies({\n            pattern: /\\* @requires [\\s-]*(.*\\.js)/g\n        }))\n    .pipe(concat('main.min.js'))\n    .pipe(gulp.dest(paths.scripts.dest));\n}\n\nNote that I've gone ahead and removed anything from the file that has nothing to\ndo with Babel - everything seen here is strictly relevant to building a\n'scripts' task. The gist is this:\n\nbabel  accepts two arrays:\n\n * Presets  refers to the version of ECMAScript we're targeting, and what we\n   have implies the latest.\n * Plugins  allow us to pass any plugins Babel supports; in this case, we're\n   rendering stuff at runtime. Let's not get into it too far.\n\nThe rest of the function is simple: we catch errors if any arise, we resolve\nrequired dependencies, and then we finally bunch everything into a single file\nand shove it in our destination folder.\n\nJust to be Clear\nWhen it comes to the best  way of achieving ECMAScript 2015 or 2016 etc in the\nbrowser,  I'm no expert. As previously mentioned, the understanding I've passed\non to you is a sort of bare minimum to start doing great things. \n\nAs far as what others are doing, I'd be willing to bet that the vast majority of\ndevs utilizing newer ECMAScript functions are running frameworks like React,\nwhile the rest have reached a consensus that Webpack is king and Gulp lame.\nThese things may be true.\n\nNo matter, this new found power of ours opens a lot of doors. Just wait until\nyou see what we do with MongoDB Stitch.","html":"<p><strong>NOTE</strong>: This post has not aged particularly well. This is made evident by the presence of the word \"Gulp\" present throughout the post.</p><hr><p>As you may have already deduced from the occasional glaring holes in my programming knowledge, I haven’t spent as much of my life programming than, well, anybody who haphazardly threw away an 8-year product management career. Apparently, a lot can happen in 8 years... especially when it comes to JavaScript.<br>Putting aside that whole server-side  NodeJS thing or whatever it’s called, there’s years worth of mindfucks for those of us who fairly recently returned to dev. In our absence, the world has been Grunting, Gulping, Yarning and even NPMing. Let’s assume we’ve gotten past all of that... phew. Oh wait, I forgot to mention the monstrosity of “hey by way there’s this mess of a hardly-explained (protocol? organization? Fancy Github Repo?) called Babel that we all depend on to do meaningful shit in the browser these days.”</p><p>If you’re here because you’re trying to figure what the hell all these ‘const’ and ‘import’ keywords are doing in modern-day browser JavaScript, consider this half focus-group and half getting-started tutorial. For the rest of you experienced JS devs out there, perhaps you should stay. No, by all means, I’d like you to sit here and think about the kind of ecosystem you’ve decided to patch together. Do it; otherwise, I might just give Kik a call to see what other tiny NPM modules they’d like to arbitrarily demand the removal of... remember that? Exactly. Now think about what you’ve done.</p><h2 id=\"ecmascript-and-the-backwards-compatible-web\">ECMAScript and the Backwards-Compatible Web</h2><p>Any Actionscript veterans in the house? No? Just me? Great. Anyway, There’s something that ActionScript, JavaScript, and a bunch of Whatever-scripts have in common: they’re all implementations of ECMAScript: the ancestral equivalent of comparing Latin to Spanish or French, but just one added detail: ECMAScript is still a living language, and constantly improving. If some nation of cool cats still spoke Latin as an active language and were constantly coming up with sick new slang terms, those speaking French or Spanish would be powerless to come up with phrases nearly as cool as “lit” or \"fam\"  (or whatever those Latin equivalents would be).</p><p>The problem is web browsers are inherently backward-compatible monstrosities. Most revenue-generating companies look at their &gt;5% user base using Internet Explorer three and a half, and think “oh my god, that’s five percent of our potential revenue” (it isn’t, but whatever). That’s where we stand.</p><h2 id=\"new-features-for-the-internet\">New features? For the INTERNET?</h2><p>I remember one particular weekend I rented a hotel room for the sole purpose of wrapping up an app based on MongoDB Stitch at the time. I was pretty confident I had it all figured out, but found, something about Mongo’s quick start guides felt off (I mean, more off than the rest of their nearly unreadable docs). Why did Mongo insist on inline JavaScript? Haven’t we evolved past the days where PHP, HTML, CSS, and JS all lived on the same page?</p><p>As everybody-who-wasn’t-me at time already knows, JavaScript has been reaping the benefits of new evolutions in ECMAScript over the years, but there’s a catch: only the most modern browsers know what the hell to do with these new features (duh), and they only do so with the dreaded  blocks thrown on HTML pages. Attempting to use modern ECMA features in a linked JS file which hasn’t been pre-compiled is like dividing by zero. Seriously, you might die.</p><h2 id=\"babel-to-the-rescue\">Babel to the Rescue</h2><p>More research only lead to more questions. Who is this <a href=\"http://browserify.org/\">Browserify wizard</a> and why is he dead? What is Webpack doing to fund all their highly produced branding, and why would anybody purchase a <a href=\"https://webpack.threadless.com/\">Webpack T-shirt</a>? Finally, the biggest question of all: who the hell is this Babel guy who gives off as an electric explosion in your face on hard drugs?</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-1.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/babel2-1.jpg\" class=\"kg-image\"><figcaption><em>I can't even the difference between a compiler and a Marvel franchise anymore.&nbsp;</em></figcaption></figure><p>I think it was at this point in my journey of catching up on the last decade where I went truly mad and began pacing around my room, verbally assaulting inanimate objects, and eventually even found myself washed up in a Wendys down the street, shivering and crying to myself. </p><p>Now that I've been released from the psyche ward and are free to wander the streets again, I've managed to piece together a bare-minimum understanding of what the hell is going on.</p><h3 id=\"what-the-hell-is-going-on\">What the Hell is Going On</h3><p>Because Javascript as a language is destined to be backwards compatible to a year when OJ Simpson was on trial and Windows 95 was considered cutting-edge technology, <strong>Babel</strong> aims to \"improve\" browser Javascript. Because we can't actually improve or change the underlying technology, Babel looks at new-fangled ECMA syntax (containing words like <code>require</code>,  <code>const</code> or <code>promise</code>) and compiles logic equivalent to these features with vanilla Javascript. If that sounds similar to how <strong>Gulp</strong> takes CSS preprocessors (like <em>LESS</em> or <em>SASS</em>) and turns those files into interpretable browser code, well, that's exactly what happens. </p><p><strong>Gulp</strong> is not be the only way to utilize new ECMAScript features. Babel syntax can be compiled a number of ways, such as <a href=\"https://babeljs.io/docs/en/babel-cli\">Babel's CLI</a>, or from Server-side JS, or <strong>Webpack</strong> if you're Mister-Fancy-Pants. In fact, the trend across the board is that compiling your site with modules via Webpack is winning dramatically. For all we know, this could be the last Babel Gulp tutorial ever written.</p><p>Right now we're focusing on the ability to use ECMAScript features on the frontend; a common use-case for things like... well... theming the presentation layer for a blog. If we can pull it off with Gulp, you probably won't struggle much with future methods.</p><h2 id=\"babel-npm-packages\">Babel NPM Packages</h2><p>Alright, so Babel isn't just a single NPM package. It's a lot. Let's see what's there in a basic <code>package.json</code>:</p><pre><code>{\n  \"name\": \"example\",\n  \"scripts\": {\n    \"build\": \"babel src -d lib\"\n  },\n  \"presets\": [\n    \"env\"\n  ],\n  \"engines\": {\n    \"node\": \"8.12.0\"\n  },\n  \"dependencies\": {\n    \"@babel/polyfill\": \"^7.0.0\",\n    \"@babel/runtime\": \"^7.1.2\",\n    \"@babel/runtime-corejs2\": \"^7.1.2\",\n    \"babel-runtime\": \"^6.26.0\",\n    \"gulp-resolve-dependencies\": \"^2.2.0\",\n    \"gulp-sourcemaps\": \"^2.6.4\",\n    \"gulp-uglify-es\": \"^1.0.4\",\n  },\n  \"devDependencies\": {\n    \"@babel/cli\": \"^7.1.2\",\n    \"@babel/core\": \"^7.1.2\",\n    \"@babel/plugin-syntax-dynamic-import\": \"^7.0.0\",\n    \"@babel/plugin-transform-runtime\": \"^7.1.0\",\n    \"@babel/preset-env\": \"^7.1.0\",\n  }\n}</code></pre><p>Let's not go through all these in detail- in fact, let's take a look at our <strong>gulpfile.js</strong>:</p><pre><code>'use strict';\n\nvar gulp = require('gulp'),\n  concat = require('gulp-concat'),\n  autoprefixer = require('gulp-autoprefixer'),\n  sourcemaps = require('gulp-sourcemaps'),\n  babel = require('gulp-babel'),\n  resolveDependencies = require('gulp-resolve-dependencies'),\n\n\nvar paths = {\n  scripts: {\n    src: 'src/js/*.js',\n    dest: 'assets/js'\n  }\n};\n\nfunction scripts() {\n  return gulp.src(paths.scripts.src)\n    .pipe(babel({\n          presets: ['@babel/env'],\n          plugins: ['@babel/transform-runtime', '@babel/plugin-syntax-dynamic-import']\n    }))\n    .on('error', console.error.bind(console))\n    .pipe(resolveDependencies({\n            pattern: /\\* @requires [\\s-]*(.*\\.js)/g\n        }))\n    .pipe(concat('main.min.js'))\n    .pipe(gulp.dest(paths.scripts.dest));\n}</code></pre><p>Note that I've gone ahead and removed anything from the file that has nothing to do with Babel - everything seen here is strictly relevant to building a 'scripts' task. The gist is this:</p><p><strong>babel</strong> accepts two arrays:</p><ul><li><em>Presets</em> refers to the version of ECMAScript we're targeting, and what we have implies the latest.</li><li><em>Plugins</em> allow us to pass any plugins Babel supports; in this case, we're rendering stuff at runtime. Let's not get into it too far.</li></ul><p>The rest of the function is simple: we catch errors if any arise, we resolve required dependencies, and then we finally bunch everything into a single file and shove it in our destination folder.</p><h2 id=\"just-to-be-clear\">Just to be Clear</h2><p>When it comes to the <em>best</em> way of achieving ECMAScript 2015 or 2016 etc in the browser,  I'm no expert. As previously mentioned, the understanding I've passed on to you is a sort of bare minimum to start doing great things. </p><p>As far as what others are doing, I'd be willing to bet that the vast majority of devs utilizing newer ECMAScript functions are running frameworks like React, while the rest have reached a consensus that Webpack is king and Gulp lame. These things may be true.</p><p>No matter, this new found power of ours opens a lot of doors. Just wait until you see what we do with <strong>MongoDB Stitch</strong>.</p><p></p><p></p>","url":"https://hackersandslackers.com/babel-ecma-script/","uuid":"04fe6342-9462-4d3c-9e6d-bc000e17824a","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5bb583642361b479aa119366"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673701","title":"Flask Routing & Sessions: A Subtle Symphony","slug":"the-art-of-building-flask-routes","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/09/flaskroutes@2x.jpg","excerpt":"With great flexibility comes great responsibility .","custom_excerpt":"With great flexibility comes great responsibility .","created_at_pretty":"17 September, 2018","published_at_pretty":"19 September, 2018","updated_at_pretty":"17 November, 2018","created_at":"2018-09-17T05:05:03.000-04:00","published_at":"2018-09-19T08:58:00.000-04:00","updated_at":"2018-11-16T20:57:42.000-05:00","meta_title":"Flask Routing & Sessions: A Subtle Symphony | Hackers and Slackers","meta_description":"There's nothing wrong with being a worker drone repeating worthless projects and contributing nothing to humanity. I'd personally prefer using Flask.","og_description":"There's nothing wrong with being a worker drone repeating worthless projects and contributing nothing to humanity. I'd personally prefer using Flask.","og_image":"https://hackersandslackers.com/content/images/2018/09/flaskroutes@2x.jpg","og_title":"Flask Routing & Sessions: A Subtle Symphony | Hackers and Slackers","twitter_description":"There's nothing wrong with being a worker drone repeating worthless projects and contributing nothing to humanity. I'd personally prefer using Flask.","twitter_image":"https://hackersandslackers.com/content/images/2018/09/flaskroutes@2x.jpg","twitter_title":"Flask Routing & Sessions: A Subtle Symphony | Hackers and Slackers","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"},{"name":"#Building Flask Apps","slug":"building-flask-apps","description":"Python’s fast-growing and flexible microframework. Can handle apps as simple as API endpoints, to monoliths remininiscent of Django.","feature_image":"https://hackersandslackers.com/content/images/2019/03/flask-gettingstarted.jpg","meta_description":"Python’s fastest growing, most flexible, and perhaps most Pythonic framework.","meta_title":"Building Flask Apps","visibility":"internal"}],"plaintext":"It isn't often you find somebody sad or miserable enough to detail the inner\nworkings of web framework features, such as sessions or routing. This is\nunderstandably so; we use frameworks because presumably hate dealing with these\nthings from scratch. This is especially so when it comes to Flask, which only\nreleased version 1.0 a few months ago, introducing breaking changes rendering\nprevious documentation more-or-less worthless. \n\nGoogling some of Flask's critical features mostly returns one-liners from the\napp's authors (half of which are useless, as they are for older versions of\nFlask). Stack Overflow threads mostly sit in silence, and even Kite\n[https://kite.com/], AKA \"The smart copilot for programmers\" returns blank pages\nof documentation, akin to the blank stare of a clueless Golden Retriever.\n\nIn retrospect, it was probably a poor choice for me to pick up 4 separate\nFlask-based projects during this time.\n\nWe're in a historic place in time where a team of developers put together\nsomething beautiful, yet somehow feels undersold. It seems as though the niche\nmarket of \"those who can't do, teach\" remains untapped for Flask, as the usual\nsuspects have yet to \"do\". This leaves newcomers like myself to hack away for\ntheir own survival in the meantime. I've only just turned that mental corner\nwhere Flask's quirks are as comforting as home-cooked meal, as opposed to\nfrustrating single-word methods containing 6 words of documentation on average.\n\nThe good news is I am still technically alive, after spending weeks building\nFlask applications mostly through trial and error. The bad news is that I've\nbecome Mr. Robot  in the process. That said, if there will ever be an ideal\nmoment in my life to write about Flask, now is the time. As reality slowly slips\naway in 1s and 0s, I may as well pass along  what I've learned.\n\nBroad Strokes\nIt only takes a couple minutes into explaining what Flask is when you realize\nthat Flask, at its core, is overwhelmingly just the “V” in “MVC”. Jinja handles\nthe templates, and something like SQLAlchemy will likely handle your models.\nFlask has an abundance of third-party libraries to handle business logic, but it\nis the core Flask package that we all agreed to gather around. This speaks\nvolumes about the quality of Flask’s simple yet powerful request handling.\n\nI'll  break down as many of Flask's out-of-the-box features, focusing on what\nmatters most (in my opinion). Take a look at some of the Flask libraries we'll\nbe playing around with:\n\n# app.py\nfrom flask import Flask, render_template, request, redirect, Session, g\nimport os\n\nConfiguring Our App\nAs always, we create our app with app = Flask(name). Equally uninteresting is\nour configuration setup, which we'll import via a class in config.py:\n\n# app.py\nfrom flask import Flask, render_template, request, redirect, Session, g\nimport config\nimport os\n\n# Our app\napp = Flask(__name__)\n\n# Load our config variables\napp.config.from_object('config.ProductionConfig')\n\nA number of things in our config are absolutely essential for sessions to work.\nBelow is an example config file:\n\n# config.py\nimport os\n\nclass ProductionConfig():\n    \"\"\"Set app config vars.\"\"\"\n    SECRET_KEY = os.urandom(24)\n    SESSION_TYPE = null\n    SESSION_COOKIE_NAME = 'session name'\n    SESSION_PERMANENT = True\n    PERMANENT_SESSION_LIFETIME = timedelta(days=31) (2678400 seconds)\n\nSECRET_KEY  is critical: this variable needs to exist in out config for sessions\nto function properly. The best way to handle is is by generating a key as seen\nabove.\n\nSESSION_TYPE  allows us to specify where our session data should be stored. This\nis set null by default, but Flask supports a number of options:\n\n * RedisSessionInterface:  Uses the Redis key-value store as a session backend. \n * MemcachedSessionInterface:  Uses the Memcached as a session backend. \n * FileSystemSessionInterface:  werkzeug.contrib.cache.FileSystemCache  as a\n   session backend.\n * MongoDBSessionInterface:  Uses MongoDB as a backend \n   [http://api.mongodb.org/python/current/index.html]via pymongo\n * SqlAlchemySessionInterface:  Uses SQLAlchemy, or rather Flask-SQLAlchemy\n   [https://pythonhosted.org/Flask-SQLAlchemy/]\n\nThere are plenty more variables you can set if you want to take a look here\n[http://flask.pocoo.org/docs/1.0/config/].\n\nSessions and Contexts\nUnlike cookie-based sessions, Flask sessions are handled and stored on the\nserver-side. A session object is simply a dict which is accessible throughout\nthe application a global level, referring to a single 'logged-in user'. As long\nas the session is active, any context of our app will be able to retrieve,\nmodify, or delete the values held in this session object,\n\n# Save a value to the user's session.\nsession['username'] = 'MyUsername' \n\n# IMPORTANT: \"True\" forces our changes to be recognized.\nsession.modified = True: \n\n# Retrieve session values at any time, anywhere \nsession.get('username') = True\n\nSeeing as how sessions are accessible globally, it is also important to note\nthat sessions can last a very long time; pretty much self explanatory given the \nSESSION_PERMANENT = True  configuration option.  It's a good idea to set a\nsession timeout period, or better yet, close them by the user's own request.\nClearing a session is as simple as resetting the session dictionary values back\nto None  by using the pop  method: session.pop('value', None).\n\nThe Application Context\nBesides undying global sessions,  Flask also provides us with a feature with an\nobject more suitable for storing and passing temporary values between app\ncontexts. This object known simply as g. While  technically an abbreviation for\n\"global\",g  is really just a convenient place to store temporarily store values\nwhich you can always depend on to be by your side.\n\n# app.py\nfrom Flask import g\n\nIt's important to note that values assigned to g  only exist within the context\nthey were created by default. For example, if we store information to the object\ndue to some user interaction on the dashboard, these values are lost once the\nuser moves to another part of our app. That said, values assigned to g  can\ntechnically be passed between contexts if we return g.value. This distinction\nbetween always-alive sessions  and every dying g  should be indicative of what\nreach respective object does.  Spoiler alert: sensitive (or contextually\nuseless) data should be stored temporarily with g, where values which will\ncontinuously be useful in determining the functionality of our should should\nreside in session.\n\nInterestingly enough, Flask has a decorator  specifically for terminating values\nsaved to g  in the case we'd want to ensure the swift and total annihilation of\nsuch data. For instance, if we were to assign a database connection to g  using\ng.db = connect_to_database(), we'd want to make sure that connection is closed\nas fast as possible before we forget:\n\n# app.py\ndef db_stuff():\n    g.db = database_connection()\n    g.db.somequeryorwhatever\n    return g.db\n\n@app.teardown_appcontext\ndef teardown_db():\n    db = g.pop('db', None)\n\nRoutes & Decorators\nWe're surely familiar with the concepts behind routing users to deserved views\nby now. Before we look at the juicy stuff, consider this boring route for a\nboring product, where the homepage is a dashboard:\n\n# app.py\n@app.route('/', methods=['GET', 'POST', 'OPTIONS'])\ndef dashboard():\n    \"\"\"Boring route.\"\"\"\n    return render_template('/dashboard.html')\n\nOh snap, our landing page is a /dashboard?  How will we know which user's\ndashboard to display when they visit the dashboard, or any other page for that\nmatter? If only there were a way to intercept every request a user makes to our\napp?\n\nFlask comes with a bunch of insanely useful decorators. Python decorators are\nfunctions which either 'wrap'  other functions in additional logic, or in our\ncase, intercept functions to do with them what we what. Flask has a vast\nplethora of logic decorators, ranging from detecting first-time visitors,\nhandling exceptions, executing logic before/after page loads, etc. Even the\nroute we set above is a decorator!\n\n@flask.before_request\nAdding before_request  to our app allows us to run logic prior to the\naforementioned request. With this power, we can do things like treat users\ndifferently (such as recognized or anonymous users), or just execute some sort\nof unique logic upon page load. \n\nIn this simple case, we check to see if a visitor has an active session every\ntime they hit a route. This way, if a user's session expired between before\nhitting a route in our app, we can prompt them to log in... or whatever. \n\nbefore_request doesn't accept any value parameters - the handler is mostly\nintended to perform tasks such as making a database query necessary for our app\nto run, or make sure users are still logged in.\n\n# app.py\n@app.before_request\ndef before_request():\n    \"\"\"Handle multiple users.\"\"\"\n    if 'username' in session:\n        return render_template('/dashboard.html')\n    else:\n        return render_template('/login.html')\n\n@flask.url_value_preprocessor\nUnlike before_request, url_value_preprocessor  does  accept incoming data. This\nallows us to handle data being posted to any part of our app before we even\nbother serving up views. Not only does this provide a convenient separation of\nconcerns, but also helps us avoid callback hell, which yes, can happen in Python\ntoo.\n\nLet's say we're accepting a POST request, where we create a view for our user's\npersonal details. When the user passes us their email address, we decide to\nretrieve the user's records by hitting an API, and passing the results to the\nview.\n\nWithout modularizing our code, we'd have to handle things like waiting on API\ncalls in the same functions as  our routes. Not only is this shitty repetitive\ncode, but running numerous API calls and rendering a view all at once is going\nto eventually break. Go ahead and ask the NodeJS guys. They'll know.\n\n# app.py\n@app.url_value_preprocessor\ndef url_value_preprocessor(endpoint, values):\n    \"\"\"Handle data sent to any route.\"\"\"\n       if request.args:\n           email = request.args.get('email')\n           r = requests.post(endpoint, headers=headers, data=email)\n           session['usermetadata'] = r\n           session.modified = True\n           return session\n\nYou're Only Getting Started\nWe've only covered small percentage of convenient tools Flask offers us. Go\nahead and see how many decorators [http://flask.pocoo.org/docs/1.0/api/]   you\ncan fuck with. Yeah dude, shit is legit - and we haven't even talked about the\nFlask-Login package yet.\n\nThe beauty of lightweight frameworks is that they focus on the problems that\ndrive us to web frameworks in the first place. Flask is clearly designed to\nhandle serving views, standing up APIs, and handling user management\neffectively. Contrast this with frameworks like Django, which forces rigid app\nsetup in what can commonly be an  hour-long setup or greater. I'll truthfully\nalways have a place in my heart for Django as the fathers of Python MVC: I would\ncan say with confidence that without the creation of Django (as well as the\nofficial $10 dollar intro book from Barnes and Noble) I never would have\ntransitioned from an obnoxious product manager  personality to the kind of guy\nwho owns multiple Python t-shirts. Hmm. Now that I think about it, maybe I\nshould've stayed an office tool as opposed to solving all these complex\nproblems. oh well.\n\nFlask is indicative of a new direction of framework design - or rather lack\nthereof. Programmers who know what they're doing  can express themselves outside\nof traditional boundaries set by other frameworks, surely designed to keep\nidiots from ruining everything. There's nothing wrong with being a worker drone\nrepeating the same worthless projects,  using same libraries, and essentially\ncontributing nothing to humanity. I'd personally prefer to take the freedom and\nspeed of Flask any day.","html":"<p>It isn't often you find somebody sad or miserable enough to detail the inner workings of web framework features, such as sessions or routing. This is understandably so; we use frameworks because presumably hate dealing with these things from scratch. This is especially so when it comes to Flask, which only released version 1.0 a few months ago, introducing breaking changes rendering previous documentation more-or-less worthless. </p><p>Googling some of Flask's critical features mostly returns one-liners from the app's authors (half of which are useless, as they are for older versions of Flask). Stack Overflow threads mostly sit in silence, and even <a href=\"https://kite.com/\">Kite</a>, AKA <em>\"The smart copilot for programmers\" </em>returns blank pages of documentation, akin to the blank stare of a clueless Golden Retriever.</p><p><strong><em>In retrospect, it was probably a poor choice for me to pick up 4 separate Flask-based projects during this time.</em></strong></p><p>We're in a historic place in time where a team of developers put together something beautiful, yet somehow feels undersold. It seems as though the niche market of \"those who can't do, teach\" remains untapped for Flask, as the usual suspects have yet to \"do\". This leaves newcomers like myself to hack away for their own survival in the meantime. I've only just turned that mental corner where Flask's quirks are as comforting as home-cooked meal, as opposed to frustrating single-word methods containing 6 words of documentation on average.</p><p>The good news is I am still technically alive, after spending weeks building Flask applications mostly through trial and error. The bad news is that I've become <em>Mr. Robot</em> in the process. That said, if there will ever be an ideal moment in my life to write about Flask, now is the time. As reality slowly slips away in 1s and 0s, I may as well pass along  what I've learned.</p><h2 id=\"broad-strokes\">Broad Strokes</h2><p>It only takes a couple minutes into explaining what Flask is when you realize that Flask, at its core, is overwhelmingly just the “V” in “MVC”. Jinja handles the templates, and something like SQLAlchemy will likely handle your models. Flask has an abundance of third-party libraries to handle business logic, but it is the core Flask package that we all agreed to gather around. This speaks volumes about the quality of Flask’s simple yet powerful request handling.</p><p>I'll  break down as many of Flask's out-of-the-box features, focusing on what matters most (in my opinion). Take a look at some of the Flask libraries we'll be playing around with:</p><pre><code># app.py\nfrom flask import Flask, render_template, request, redirect, Session, g\nimport os</code></pre><h2 id=\"configuring-our-app\">Configuring Our App</h2><p>As always, we create our app with <code>app = Flask(name)</code><em>. </em>Equally uninteresting is our configuration setup, which we'll import via a class in <code>config.py</code>:</p><pre><code># app.py\nfrom flask import Flask, render_template, request, redirect, Session, g\nimport config\nimport os\n\n# Our app\napp = Flask(__name__)\n\n# Load our config variables\napp.config.from_object('config.ProductionConfig')</code></pre><p>A number of things in our config are absolutely essential for sessions to work. Below is an example config file:</p><pre><code># config.py\nimport os\n\nclass ProductionConfig():\n    \"\"\"Set app config vars.\"\"\"\n    SECRET_KEY = os.urandom(24)\n    SESSION_TYPE = null\n    SESSION_COOKIE_NAME = 'session name'\n    SESSION_PERMANENT = True\n    PERMANENT_SESSION_LIFETIME = timedelta(days=31) (2678400 seconds)</code></pre><p><strong>SECRET_KEY</strong> is critical: this variable needs to exist in out config for sessions to function properly. The best way to handle is is by generating a key as seen above.</p><p><strong>SESSION_TYPE</strong> allows us to specify where our session data should be stored. This is set null by default, but Flask supports a number of options:</p><ul><li><a href=\"https://pythonhosted.org/Flask-Session/#flask.ext.session.RedisSessionInterface\">RedisSessionInterface</a>:<strong> </strong>Uses the Redis key-value store as a session backend. </li><li><a href=\"https://pythonhosted.org/Flask-Session/#flask.ext.session.MemcachedSessionInterface\">MemcachedSessionInterface</a>:<strong> </strong>Uses the Memcached as a session backend. </li><li><a href=\"https://pythonhosted.org/Flask-Session/#flask.ext.session.FileSystemSessionInterface\">FileSystemSessionInterface</a>:<strong> </strong><code>werkzeug.contrib.cache.FileSystemCache</code> as a session backend.</li><li><a href=\"https://pythonhosted.org/Flask-Session/#flask.ext.session.MongoDBSessionInterface\">MongoDBSessionInterface</a>:<strong> </strong>Uses MongoDB as a backend<a href=\"http://api.mongodb.org/python/current/index.html\"> </a>via <code>pymongo</code></li><li><a href=\"https://pythonhosted.org/Flask-Session/#flask.ext.session.SqlAlchemySessionInterface\">SqlAlchemySessionInterface</a>:<strong> </strong>Uses SQLAlchemy, or rather <a href=\"https://pythonhosted.org/Flask-SQLAlchemy/\">Flask-SQLAlchemy</a></li></ul><p>There are plenty more variables you can set if you want to take a look <a href=\"http://flask.pocoo.org/docs/1.0/config/\">here</a>.</p><h2 id=\"sessions-and-contexts\">Sessions and Contexts</h2><p>Unlike cookie-based sessions, Flask sessions are handled and stored on the server-side. A session object is simply a dict which is accessible throughout the application a global level, referring to a single 'logged-in user'. As long as the session is active, any context of our app will be able to retrieve, modify, or delete the values held in this session object,</p><pre><code># Save a value to the user's session.\nsession['username'] = 'MyUsername' \n\n# IMPORTANT: \"True\" forces our changes to be recognized.\nsession.modified = True: \n\n# Retrieve session values at any time, anywhere \nsession.get('username') = True</code></pre><p>Seeing as how sessions are accessible globally, it is also important to note that sessions can last a very long time; pretty much self explanatory given the <code>SESSION_PERMANENT = True</code> configuration option.  It's a good idea to set a session timeout period, or better yet, close them by the user's own request. Clearing a session is as simple as resetting the session dictionary values back to <em>None</em> by using the <strong>pop</strong> method: <code>session.pop('value', None)</code>.</p><h3 id=\"the-application-context\">The Application Context</h3><p>Besides undying global sessions,  Flask also provides us with a feature with an object more suitable for storing and passing temporary values between app contexts. This object known simply as <code>g</code>. While<strong> </strong>technically an abbreviation for \"global\",  <code>g</code> is really just a convenient place to store temporarily store values which you can always depend on to be by your side.</p><pre><code># app.py\nfrom Flask import g</code></pre><p>It's important to note that values assigned to <code>g</code> <em>only exist within the context they were created </em>by default. For example, if we store information to the object due to some user interaction on the dashboard, these values are lost once the user moves to another part of our app. That said, values assigned to <code>g</code> can technically be passed between contexts if we <code>return g.value</code>. This distinction between always-alive <em>sessions</em> and every dying <em>g</em> should be indicative of what reach respective object does.  Spoiler alert: sensitive (or contextually useless) data should be stored temporarily with <code>g</code>, where values which will continuously be useful in determining the functionality of our should should reside in <code>session</code><em>.</em></p><p>Interestingly enough, Flask has a <em>decorator</em> specifically for terminating values saved to <code>g</code> in the case we'd want to ensure the swift and total annihilation of such data. For instance, if we were to assign a database connection to <code>g</code> using  <code>g.db = connect_to_database()</code>, we'd want to make sure that connection is closed as fast as possible before we forget:</p><pre><code># app.py\ndef db_stuff():\n    g.db = database_connection()\n    g.db.somequeryorwhatever\n    return g.db\n\n@app.teardown_appcontext\ndef teardown_db():\n    db = g.pop('db', None)</code></pre><h2 id=\"routes-decorators\">Routes &amp; Decorators</h2><p>We're surely familiar with the concepts behind routing users to deserved views by now. Before we look at the juicy stuff, consider this boring route for a boring product, where the homepage is a dashboard:</p><pre><code># app.py\n@app.route('/', methods=['GET', 'POST', 'OPTIONS'])\ndef dashboard():\n    \"\"\"Boring route.\"\"\"\n    return render_template('/dashboard.html')</code></pre><p>Oh snap, our landing page is a /<em>dashboard?</em> How will we know which user's dashboard to display when they visit the dashboard, or any other page for that matter? If only there were a way to intercept every request a user makes to our app?</p><p>Flask comes with a bunch of insanely useful <strong><em>decorators</em></strong>. Python decorators are functions which either 'wrap'  other functions in additional logic, or in our case, intercept functions to do with them what we what. Flask has a vast plethora of logic decorators, ranging from detecting first-time visitors, handling exceptions, executing logic before/after page loads, etc. Even the route we set above is a decorator!</p><h3 id=\"-flask-before_request\">@flask.before_request</h3><p>Adding <strong>before_request</strong> to our app allows us to run logic prior to the aforementioned request. With this power, we can do things like treat users differently (such as recognized or anonymous users), or just execute some sort of unique logic upon page load. </p><p>In this simple case, we check to see if a visitor has an active session every time they hit a route. This way, if a user's session expired between before hitting a route in our app, we can prompt them to log in... or whatever. </p><p><strong>before_request </strong>doesn't accept any value parameters - the handler is mostly intended to perform tasks such as making a database query necessary for our app to run, or make sure users are still logged in.</p><pre><code># app.py\n@app.before_request\ndef before_request():\n    \"\"\"Handle multiple users.\"\"\"\n    if 'username' in session:\n        return render_template('/dashboard.html')\n    else:\n        return render_template('/login.html')</code></pre><h3 id=\"-flask-url_value_preprocessor\">@flask.url_value_preprocessor</h3><p>Unlike <em>before_request</em><strong>, url_value_preprocessor</strong> <em>does</em> accept incoming data. This allows us to handle data being posted to any part of our app before we even bother serving up views. Not only does this provide a convenient separation of concerns, but also helps us avoid <em>callback hell, </em>which yes, can happen in Python too.</p><p>Let's say we're accepting a POST request, where we create a view for our user's personal details. When the user passes us their email address, we decide to retrieve the user's records by hitting an API, and passing the results to the view.</p><p>Without modularizing our code, we'd have to handle things like waiting on API calls in the same functions as  our routes. Not only is this shitty repetitive code, but running numerous API calls and rendering a view all at once is going to eventually break. Go ahead and ask the NodeJS guys. They'll know.</p><pre><code># app.py\n@app.url_value_preprocessor\ndef url_value_preprocessor(endpoint, values):\n    \"\"\"Handle data sent to any route.\"\"\"\n       if request.args:\n           email = request.args.get('email')\n           r = requests.post(endpoint, headers=headers, data=email)\n           session['usermetadata'] = r\n           session.modified = True\n           return session</code></pre><h2 id=\"you-re-only-getting-started\">You're Only Getting Started</h2><p>We've only covered small percentage of convenient tools Flask offers us. Go ahead and see <a href=\"http://flask.pocoo.org/docs/1.0/api/\">how many decorators</a>  you can fuck with. Yeah dude, shit is legit - and we haven't even talked about the Flask-Login package yet.</p><p>The beauty of lightweight frameworks is that they focus on the problems that drive us to web frameworks in the first place. Flask is clearly designed to handle serving views, standing up APIs, and handling user management effectively. Contrast this with frameworks like <strong>Django</strong>, which forces rigid app setup in what can commonly be an  hour-long setup or greater. I'll truthfully always have a place in my heart for Django as the fathers of Python MVC: I would can say with confidence that without the creation of Django (as well as the official $10 dollar intro book from Barnes and Noble) I never would have transitioned from an obnoxious product manager  personality to the kind of guy who owns multiple Python t-shirts. Hmm. Now that I think about it, maybe I should've stayed an office tool as opposed to solving all these complex problems. oh well.</p><p>Flask is indicative of a new direction of framework design - or rather lack thereof. Programmers who <em>know what they're doing</em> can express themselves outside of traditional boundaries set by other frameworks, surely designed to keep idiots from ruining everything. There's nothing wrong with being a worker drone repeating the same worthless projects,  using same libraries, and essentially contributing nothing to humanity. I'd personally prefer to take the freedom and speed of Flask any day.</p><p></p>","url":"https://hackersandslackers.com/the-art-of-building-flask-routes/","uuid":"67a6407a-5804-4bd0-812d-219561e2488a","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b9f6e3ff79bcf0717187d8b"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736d2","title":"Recreate JIRA Service Desk in Python & Flask","slug":"building-a-better-jira","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/08/jsd@2x.jpg","excerpt":"When SaaS doesn't cut it, beat it down and take everything its got.","custom_excerpt":"When SaaS doesn't cut it, beat it down and take everything its got.","created_at_pretty":"11 August, 2018","published_at_pretty":"31 August, 2018","updated_at_pretty":"02 February, 2019","created_at":"2018-08-11T14:02:52.000-04:00","published_at":"2018-08-31T10:25:00.000-04:00","updated_at":"2019-02-02T05:11:05.000-05:00","meta_title":"When SaaS doesn't cut it, beat it down and take everything its got | Hackers And Slackers","meta_description":"Vanilla helpdesks tend to dehumanize customers. We all think we're special, but a cold support queue reminds us otherwise. We can build something  better.","og_description":"Vanilla helpdesks tend to dehumanize customers. We all think we're special, but a cold support queue reminds us otherwise. We can build something  better.","og_image":"https://hackersandslackers.com/content/images/2018/08/jsd@2x.jpg","og_title":"Recreate JIRA Service Desk in Python & Flask","twitter_description":"Vanilla helpdesks tend to dehumanize customers. We all think we're special, but a cold support queue reminds us otherwise. We can build something  better.","twitter_image":"https://hackersandslackers.com/content/images/2018/08/jsd@2x.jpg","twitter_title":"Recreate JIRA Service Desk in Python & Flask","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Atlassian","slug":"atlassian","description":"Beef up JIRA and Confluence by scripting and automating nearly anything. Empower teams with customized workflows and philosophies.","feature_image":null,"meta_description":"Beef up JIRA and Confluence by scripting and automating nearly anything. Empower teams with customized workflows and philosophies.","meta_title":"Atlassian Development for JIRA and Confluence. | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Atlassian","slug":"atlassian","description":"Beef up JIRA and Confluence by scripting and automating nearly anything. Empower teams with customized workflows and philosophies.","feature_image":null,"meta_description":"Beef up JIRA and Confluence by scripting and automating nearly anything. Empower teams with customized workflows and philosophies.","meta_title":"Atlassian Development for JIRA and Confluence. | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"},{"name":"REST APIs","slug":"restapis","description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","feature_image":null,"meta_description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","meta_title":"Consuming and Building REST APIs | Hackers and Slackers","visibility":"public"}],"plaintext":"When it comes to SaaS products in the realm of Service desks, JIRA Service Desk\nis at the very least, just as powerful as the next solution (Zendesk comes to\nmind). This naturally begs the question: Why is JIRA Service Desk's pricing\nmodel roughly 1/10th of that of it's competitor?\n\nThe answer lies within ease of use,  but more importantly, presentation. While\nAtlassian's cloud offering is slowly playing catchup, Atlassian as a company has\nnever quite seemed to nail down the importance of a friendly user interface, nor\nthe importance of this when it comes to worldwide adoption. To see what I mean,\nhere's an example that Atlassian themselves tout on their own documentation as a\n\"ready for production\" customer portal:\n\nI'm convinced this is purposefully hideous to force the purchase of plugins.To\nyour average software developer (Atlassian's core demographic for years), one\nmight see nothing wrong with this interface, but as somebody `who has rolled out\nover 30 of these desks for over 6 thousand people, layouts such as these commit\nnumerous UI atrocities which simply are not acceptable for top enterprise\nsoftware.\n\nWhat do we do about this? We build an alternative, of course.\n\nMethod to This Madness\nOur focus is not on JIRA as a product,  but rather an API. Instead of attempting\nto work within JIRA’s boundaries via customization or add-ons, we can take\nmatters into our own hands by owning the application that users use to interact\nwith a JIRA instance. By using the JIRA API, we can not only extend features but\nactually ‘rebuild’ the application to gain full control over the UI or\nadditional logic. JIRA is a hideous yet entirely necessary Java application,\nwhich makes it a perfect candidate for recreation.\n\nWe're going to use Flask for this. Shocking, I know. Here's the obligatory file\nstructure of our project:\n\nmyproject\n├─ app.py\n├─ jira.py\n├─ /static\n│  └─ js\n│  └─ less\n│  └─ img\n└─ /templates\n   └─ layout.html\n   └─ index.html\n\n\nThis tutorial will be working against the JIRA Server  API for Service Desk -\nthat said, Cloud users should still find this applicable.\n\nPulling Your Service Desk Form\nBefore we get nuts building our application, we’ll need to be sure that a\nService Desk already exists in JIRA with our expected intake form. Remember: our\nend goal is to simply consume JIRA as an API, but that entails interacting with\nsomething that exists in the first place.\n\nWith your Service Desk created, there’s one annoyance we need to resolve before\ngetting into code: determining your Service Desk’s ID number. Like most things\nin JIRA, Service Desks are identified by an ID which is simply an arbitrary\ngrouping of integers in some way. What is the official way to find this ID, you\nmight ask? Why, by extracting it from the portal’s URL or by inspecting your XHR\nrequests, of course! Remember: JIRA hates you, that’s why we’re doing this in\nthe first place.\n\nWith your Service Desk ID handy, we can finally break into retrieving our desk\nvia the Service Desk API:\n\nimport requests\nfrom jira_config import jira_username, jira_password\n\nrequest_types_endpoint = \"https://yourjirainstance.com/rest/servicedeskapi/servicedesk/[SERVICEDESKID]/requesttype/\"\n\nheaders = {'Content-Type': 'application/json'}\n\ndef fieldsPerRequest(id):\n    \"\"\"Get form fields per request type.\"\"\"\n    r = requests.get(request_types_endpoint + id + '/field', auth=(jira_username, jira_password), headers=headers)\n    form = r.json()\n    return form\n\n\ndef serviceDeskRequestTypes():\n    \"\"\"Get request types.\"\"\"\n    request_array = []\n    r = requests.get(request_types_endpoint, auth=(jira_username, jira_password), headers=headers)\n    for requesttype in r.json()['values']:\n        id = requesttype['id']\n        request_dict = {\n            'name': requesttype['name'],\n            'description': requesttype['description'],\n            'icon': requesttype['icon']['_links']['iconUrls']['32x32'],\n            'fields': fieldsPerRequest(id)\n        }\n        request_array.append(request_dict)\n    return request_array\n\n\nserviceDeskRequestTypes()\nBy using the request_types_endpoint  URL, our function serviceDeskRequestTypes() \n returns the request types  of a given JIRA service desk; or in other words, the\n types of requests users can submit.  This alone only gives us high-level\ninformation about the types of requests we allow but doesn't go into further\ndetail such as the actual resulting form. That's where our next function comes\nin.\n\nfieldsPerRequest()\nThis function gets passed the ID of each request type. With that, we extend our\nendpoint to look like \n'https://yourjirainstance.com/rest/servicedeskapi/servicedesk/[SERVICEDESKID]/requesttype/[REQUESTID]/field'\n. Looping through each request type gives up exactly what we need: every request\ntype and every form field per request type.\n\nuserSession()\nThere's another thing left to consider: what if the user isn't currently logged\nin to JIRA? At the very least, we need to check to see if a JIRA session is\nactive:\n\nuser_session_endpoint = 'https://jira.we.co/rest/auth/1/session'\n\ndef getUserSession():\n    \"\"\"Get logged-in user.\"\"\"\n    r = requests.get(user_session_endpoint, headers=headers)\n    if r.status_code == 200:\n        return r.json()\n    else:\n        return False\n\n\nIf the user is logged in to JIRA, we'll receive a 200 code letting us know\neverything is alright. The body of the response will also contain the name of\nthe user plus some extra metadata. What if the user isn't  logged in? Let's get\nto that in a bit.\n\nEasy Routing\nOur view will be nice and simple:\n\nfrom jira import request_forms, user_details\n\n@app.route('/', methods=['GET', 'POST', 'OPTIONS'])\ndef home():\n    \"\"\"Landing page.\"\"\"\n    if user_details == False:\n        return redirect('https://example.com')\n    else:\n        return render_template('/index.html', requests=request_forms)\n\n\nNotice that all we're doing is making sure the user is signed in to JIRA. But\nwhat's with the example.com, you ask? Well, because I'm leaving this part up to\nyou, dear friend. There's really a number of things we can do, but it depends\nentirely on your situation. For instance:\n\n * You can handle basic auth on your own\n * Register an OAuth application to handle sign-ins (perhaps the most robust\n   solution)\n * If your JIRA instance is behind SSO, you may want to send users to your\n   company's  SAML partner\n * Simply throw an error message\n\nWhatever you decide to do, it's not really my problem. Obligatory smiley face\nemoji :).\n\nThe Template\nRemember: the main reason most of you are probably doing this is to control the\npresentation layer as you see fit. That said, here comes a call of presentation\nlayer text, in the form of a Jinja template:\n\n{% block form %}\n  <div>\n    <h3 class=\"subtitle\">Submit new requests here</h3>\n    <ul class=\"collapsible\">\n      {% for request in requests %}\n      <li class=\"{{request.name}}\">\n        <div class=\"collapsible-header\">\n          <img src=\"{{request.icon}}\">\n          <div class=\"info\">\n            <h5>{{request.name}}</h5>\n            <p>{{request.description}}</p>\n          </div>\n        </div>\n        <div class=\"collapsible-body\">\n          <div class=\"row\">\n            <form method=\"post\">\n              <div>\n                {% for field in request.fields.requestTypeFields %}\n                  {% if field.name in ('Category', 'Product') %}\n                    <div class=\"input-field\">\n                      <select id=\"{{request.name}} {{field.name}}\">\n                        <option value=\"Choose your option\" disabled selected>Choose your option</option>\n                        {% for option in field.validValues %}\n                          <option value=\"{{option.label}}\">{{option.label}}</option>\n                        {% endfor %}\n                      </select>\n                      <label>{{field.name}}</label>\n                    </div>\n                  {% elif field.name == 'Description' %}\n                    <div class=\"input-field\">\n                      <textarea id=\"{{field.name}}\" class=\"materialize-textarea\" placeholder=\"{{field.description}}\"></textarea>\n                      <label for=\"{{request.name}} {{field.name}}\">{{field.name}}</label>\n                    </div>\n                  {% else %}\n                    <div class=\"input-field\">\n                      <input placeholder=\"{{field.description}}\" id=\"{{request.name}} {{field.name}}\" type=\"text\" class=\"validate\">\n                      <label for=\"{{request.name}} {{field.name}}\">{{field.name}}</label>\n                    </div>\n                  {% endif %}\n                {% endfor %}\n                <input type=\"button\" value=\"Submit\" class=\"btn cyan lighten-3 formsubmit\">\n              </div>\n            </form>\n          </div>\n        </div>\n      </li>\n      {% endfor %}\n    </ul>\n  </div>\n{% endblock %}\n\n\nBecause we passed the Service Desk JSON we extracted from the JIRA API to our\nform, we can go crazy setting our labels, placeholder text, or whatever,\nanywhere we please. In my example, I utilize Material Design\n[https://materializecss.com/]'s pretty package of pre-made frontend elements,\nbecause God knows nobody wants to deal with designing that shit. Sorry, I was\njust having a brief flashback to Frontend dev.\n\nThe code above explicitly looks for fields we know are dropdowns, so that we may\nfill the select options accordingly. Same goes for textarea fields. That said,\nthe way I've handled this above is, well, stupid. Instead of hardcoding if\nstatements to look for certain fields, leverage our JSON to determine the type\nof each field as you iterate over them. Do as I say, not as I do.\n\nGoing Further\nThere's so much more we can add here. Take a list of the user's opened tickets,\nfor instance. The great thing about controlling your own portal UI is that you\ncan now control the narrative of your own workload: perhaps the person in\nmarketing who started 2 weeks ago could benefit from seeing the 200 tickets\nbeing addressed before her, thus second-guessing the urge to type URGENT across\na subject line only to be violently shoved down your throat.\n\nIn all seriousness, nobody likes the experience of a vanilla helpdesk because it\ndehumanizes the customer. While our personal beliefs reassure us that we are\nspecial, entering a cold support queue is a stark suggestion that we may not be\nso special after all, which isn't exactly a fact Millennials or Executives like\nto ponder on. If nothing else, take this as a chance to build software friendly\ntowards humans with full transparency, and both parties will surely benefit.\nRemember: happy humans bides times for the inevitable robot revolution on the\nhorizon destined to eradicate mankind. Do your part!","html":"<p>When it comes to SaaS products in the realm of Service desks, JIRA Service Desk is at the very <em>least</em>, just as powerful as the next solution (Zendesk comes to mind). This naturally begs the question: Why is JIRA Service Desk's pricing model roughly 1/10th of that of it's competitor?</p><p>The answer lies within <em>ease of use,</em> but more importantly, <em>presentation</em>. While Atlassian's cloud offering is slowly playing catchup, Atlassian as a company has never quite seemed to nail down the importance of a friendly user interface, nor the importance of this when it comes to worldwide adoption. To see what I mean, here's an example that Atlassian themselves tout on their own documentation as a \"ready for production\" customer portal:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/customer-portal.png\" class=\"kg-image\"><figcaption>I'm convinced this is purposefully hideous to force the purchase of plugins.</figcaption></figure><p>To your average software developer (Atlassian's core demographic for years), one might see nothing wrong with this interface, but as somebody `who has rolled out over 30 of these desks for over 6 thousand people, layouts such as these commit numerous UI atrocities which simply are not acceptable for top enterprise software.</p><p>What do we do about this? We build an alternative, of course.</p><h2 id=\"method-to-this-madness\">Method to This Madness</h2><p>Our focus is not on JIRA as a <em>product,</em> but rather an <em>API. </em>Instead of attempting to work within JIRA’s boundaries via customization or add-ons, we can take matters into our own hands by owning the application that users use to interact with a JIRA instance. By using the JIRA API, we can not only extend features but actually ‘rebuild’ the application to gain full control over the UI or additional logic. JIRA is a hideous yet entirely necessary Java application, which makes it a perfect candidate for recreation.</p><p>We're going to use Flask for this. Shocking, I know. Here's the obligatory file structure of our project:</p><pre><code class=\"language-bash\">myproject\n├─ app.py\n├─ jira.py\n├─ /static\n│  └─ js\n│  └─ less\n│  └─ img\n└─ /templates\n   └─ layout.html\n   └─ index.html\n</code></pre>\n<p>This tutorial will be working against the JIRA <em>Server</em> API for Service Desk - that said, Cloud users should still find this applicable.</p><h2 id=\"pulling-your-service-desk-form\">Pulling Your Service Desk Form</h2><p>Before we get nuts building our application, we’ll need to be sure that a Service Desk already exists in JIRA with our expected intake form. Remember: our end goal is to simply consume JIRA as an API, but that entails interacting with something that exists in the first place.</p><p>With your Service Desk created, there’s one annoyance we need to resolve before getting into code: determining your Service Desk’s ID number. Like most things in JIRA, Service Desks are identified by an ID which is simply an arbitrary grouping of integers in some way. What is the official way to find this ID, you might ask? Why, by extracting it from the portal’s URL or by inspecting your XHR requests, of course! Remember: JIRA hates you, that’s why we’re doing this in the first place.</p><p>With your Service Desk ID handy, we can finally break into retrieving our desk via the Service Desk API:</p><pre><code class=\"language-python\">import requests\nfrom jira_config import jira_username, jira_password\n\nrequest_types_endpoint = &quot;https://yourjirainstance.com/rest/servicedeskapi/servicedesk/[SERVICEDESKID]/requesttype/&quot;\n\nheaders = {'Content-Type': 'application/json'}\n\ndef fieldsPerRequest(id):\n    &quot;&quot;&quot;Get form fields per request type.&quot;&quot;&quot;\n    r = requests.get(request_types_endpoint + id + '/field', auth=(jira_username, jira_password), headers=headers)\n    form = r.json()\n    return form\n\n\ndef serviceDeskRequestTypes():\n    &quot;&quot;&quot;Get request types.&quot;&quot;&quot;\n    request_array = []\n    r = requests.get(request_types_endpoint, auth=(jira_username, jira_password), headers=headers)\n    for requesttype in r.json()['values']:\n        id = requesttype['id']\n        request_dict = {\n            'name': requesttype['name'],\n            'description': requesttype['description'],\n            'icon': requesttype['icon']['_links']['iconUrls']['32x32'],\n            'fields': fieldsPerRequest(id)\n        }\n        request_array.append(request_dict)\n    return request_array\n</code></pre>\n<h3 id=\"servicedeskrequesttypes-\">serviceDeskRequestTypes()</h3><p>By using the <em>request_types_endpoint</em> URL, our function <code>serviceDeskRequestTypes()</code> returns the <strong>request types</strong> of a given JIRA service desk; or in other words, the <em>types of requests users can submit.</em> This alone only gives us high-level information about the types of requests we allow but doesn't go into further detail such as the actual resulting form. That's where our next function comes in.</p><h3 id=\"fieldsperrequest-\">fieldsPerRequest()</h3><p>This function gets passed the ID of each request type. With that, we extend our endpoint to look like <code>'https://yourjirainstance.com/rest/servicedeskapi/servicedesk/[SERVICEDESKID]/requesttype/[REQUESTID]/field'</code>. Looping through each request type gives up exactly what we need: every request type and every form field per request type.</p><h3 id=\"usersession-\">userSession()</h3><p>There's another thing left to consider: what if the user isn't currently logged in to JIRA? At the very least, we need to check to see if a JIRA session is active:</p><pre><code class=\"language-python\">user_session_endpoint = 'https://jira.we.co/rest/auth/1/session'\n\ndef getUserSession():\n    &quot;&quot;&quot;Get logged-in user.&quot;&quot;&quot;\n    r = requests.get(user_session_endpoint, headers=headers)\n    if r.status_code == 200:\n        return r.json()\n    else:\n        return False\n</code></pre>\n<p>If the user is logged in to JIRA, we'll receive a 200 code letting us know everything is alright. The body of the response will also contain the name of the user plus some extra metadata. What if the user <em>isn't</em> logged in? Let's get to that in a bit.</p><h2 id=\"easy-routing\">Easy Routing</h2><p>Our view will be nice and simple:</p><pre><code class=\"language-python\">from jira import request_forms, user_details\n\n@app.route('/', methods=['GET', 'POST', 'OPTIONS'])\ndef home():\n    &quot;&quot;&quot;Landing page.&quot;&quot;&quot;\n    if user_details == False:\n        return redirect('https://example.com')\n    else:\n        return render_template('/index.html', requests=request_forms)\n</code></pre>\n<p>Notice that all we're doing is making sure the user is signed in to JIRA. But what's with the <em>example.com</em>, you ask? Well, because I'm leaving this part up to you, dear friend. There's really a number of things we can do, but it depends entirely on your situation. For instance:</p><ul><li>You can handle basic auth on your own</li><li>Register an OAuth application to handle sign-ins (perhaps the most robust solution)</li><li>If your JIRA instance is behind SSO, you may want to send users to your company's  SAML partner</li><li>Simply throw an error message</li></ul><p>Whatever you decide to do, it's not really my problem. Obligatory smiley face emoji :).</p><h2 id=\"the-template\">The Template</h2><p>Remember: the main reason most of you are probably doing this is to control the presentation layer as you see fit. That said, here comes a call of presentation layer text, in the form of a Jinja template:</p><pre><code class=\"language-jinja\">{% block form %}\n  &lt;div&gt;\n    &lt;h3 class=&quot;subtitle&quot;&gt;Submit new requests here&lt;/h3&gt;\n    &lt;ul class=&quot;collapsible&quot;&gt;\n      {% for request in requests %}\n      &lt;li class=&quot;{{request.name}}&quot;&gt;\n        &lt;div class=&quot;collapsible-header&quot;&gt;\n          &lt;img src=&quot;{{request.icon}}&quot;&gt;\n          &lt;div class=&quot;info&quot;&gt;\n            &lt;h5&gt;{{request.name}}&lt;/h5&gt;\n            &lt;p&gt;{{request.description}}&lt;/p&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;collapsible-body&quot;&gt;\n          &lt;div class=&quot;row&quot;&gt;\n            &lt;form method=&quot;post&quot;&gt;\n              &lt;div&gt;\n                {% for field in request.fields.requestTypeFields %}\n                  {% if field.name in ('Category', 'Product') %}\n                    &lt;div class=&quot;input-field&quot;&gt;\n                      &lt;select id=&quot;{{request.name}} {{field.name}}&quot;&gt;\n                        &lt;option value=&quot;Choose your option&quot; disabled selected&gt;Choose your option&lt;/option&gt;\n                        {% for option in field.validValues %}\n                          &lt;option value=&quot;{{option.label}}&quot;&gt;{{option.label}}&lt;/option&gt;\n                        {% endfor %}\n                      &lt;/select&gt;\n                      &lt;label&gt;{{field.name}}&lt;/label&gt;\n                    &lt;/div&gt;\n                  {% elif field.name == 'Description' %}\n                    &lt;div class=&quot;input-field&quot;&gt;\n                      &lt;textarea id=&quot;{{field.name}}&quot; class=&quot;materialize-textarea&quot; placeholder=&quot;{{field.description}}&quot;&gt;&lt;/textarea&gt;\n                      &lt;label for=&quot;{{request.name}} {{field.name}}&quot;&gt;{{field.name}}&lt;/label&gt;\n                    &lt;/div&gt;\n                  {% else %}\n                    &lt;div class=&quot;input-field&quot;&gt;\n                      &lt;input placeholder=&quot;{{field.description}}&quot; id=&quot;{{request.name}} {{field.name}}&quot; type=&quot;text&quot; class=&quot;validate&quot;&gt;\n                      &lt;label for=&quot;{{request.name}} {{field.name}}&quot;&gt;{{field.name}}&lt;/label&gt;\n                    &lt;/div&gt;\n                  {% endif %}\n                {% endfor %}\n                &lt;input type=&quot;button&quot; value=&quot;Submit&quot; class=&quot;btn cyan lighten-3 formsubmit&quot;&gt;\n              &lt;/div&gt;\n            &lt;/form&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/li&gt;\n      {% endfor %}\n    &lt;/ul&gt;\n  &lt;/div&gt;\n{% endblock %}\n</code></pre>\n<p>Because we passed the Service Desk JSON we extracted from the JIRA API to our form, we can go crazy setting our labels, placeholder text, or whatever, anywhere we please. In my example, I utilize <a href=\"https://materializecss.com/\">Material Design</a>'s pretty package of pre-made frontend elements, because God knows nobody wants to deal with designing that shit. Sorry, I was just having a brief flashback to Frontend dev.</p><p>The code above explicitly looks for fields we know are dropdowns, so that we may fill the select options accordingly. Same goes for textarea fields. That said, the way I've handled this above is, well, stupid. Instead of hardcoding if statements to look for certain fields, leverage our JSON to determine the type of each field as you iterate over them. Do as I say, not as I do.</p><h2 id=\"going-further\">Going Further</h2><p>There's so much more we can add here. Take a list of the user's opened tickets, for instance. The great thing about controlling your own portal UI is that you can now control the narrative of your own workload: perhaps the person in marketing who started 2 weeks ago could benefit from seeing the 200 tickets being addressed before her, thus second-guessing the urge to type <strong>URGENT </strong>across a subject line only to be violently shoved down your throat.</p><p>In all seriousness, nobody likes the experience of a vanilla helpdesk because it dehumanizes the customer. While our personal beliefs reassure us that we are special, entering a cold support queue is a stark suggestion that we may not be so special after all, which isn't exactly a fact Millennials or Executives like to ponder on. If nothing else, take this as a chance to build software friendly towards humans with full transparency, and both parties will surely benefit. Remember: happy humans bides times for the inevitable robot revolution on the horizon destined to eradicate mankind. Do your part!</p>","url":"https://hackersandslackers.com/building-a-better-jira/","uuid":"789d1406-0dbf-432e-aaa0-32d10f7d6337","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b6f24cc0cd9b8583e46ab5b"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736eb","title":"Pipenv: Better Environment Management for Python","slug":"pipenv-python-environment-management","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/04/pipenv.jpg","excerpt":"Effortlessly manage your Python environment and dependencies.","custom_excerpt":"Effortlessly manage your Python environment and dependencies.","created_at_pretty":"27 August, 2018","published_at_pretty":"30 August, 2018","updated_at_pretty":"10 April, 2019","created_at":"2018-08-27T19:40:53.000-04:00","published_at":"2018-08-30T07:36:00.000-04:00","updated_at":"2019-04-10T09:09:36.000-04:00","meta_title":"Effortlessly manage your Python environment | Hackers And Slackers","meta_description":"Pipenv serves as both an environment management tool as well as a sort of 'package.json' for your Python app.","og_description":"Pipenv serves as both an environment management tool as well as a sort of 'package.json' for your Python app.","og_image":"https://hackersandslackers.com/content/images/2019/04/pipenv-2.jpg","og_title":"Pipenv: Better Environment Management for Python","twitter_description":"Pipenv serves as both an environment management tool as well as a sort of 'package.json' for your Python app.","twitter_image":"https://hackersandslackers.com/content/images/2019/04/pipenv-1.jpg","twitter_title":"Pipenv: Better Environment Management for Python","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"}],"plaintext":"As a shoutout to my fellow Data Engineers, I'm going to take a step back from\ntypical data science workflows. When we build standalone applications, we\nprobably don't want to be tossing around Miniconda's 720 software packages in\nproduction, nor would we ever want to commit the source of any dependencies to\nGithub. This is where Pipenv comes in handy: it serves as both an environment\nmanagement tool, as well as a sort of package.json  for your Python app.\n\nThe combination of virtualenv  and virtualenvwrapper  have reigned supreme for\nsome time. While this combination is a totally fine solution, I've noticed even\nsenior developers gloss over the existence of a better alternative, pipenv,\nwhich makes package management way, way easier. This is especially important in\ncases such as building apps for Heroku, where we're pushing to an otherwise\nagnostic environment which must explicitly be kept in sync with our local setup\nto ensure anything works.\n\nApologies in advance for what might seem a bit like Python 101, but I've been\nfinding that the following information might be more relevant to some than we\nmight presume.\n\nWhy Pipenv?\nPipenv's shell interface is entirely user-friendly. Rarely will developers find\nthemselves needing to type more than two words, perhaps a single argument, to\nachieve a series of tasks which were previously less trivial. Pipenv also does\nan excellent job of documenting all dependencies in the resulting Pipfile  and \nPipfile.lock, which are easily generated and capture our project's dependencies\nto be handed off to the next poor bloke. Finally, Pipenv does us the luxury of\nkeeping installed dependencies out of our project folder and instead creates\nvirtual environments in parallel with our Python Path. This keeps folders\npotentially holding hundreds of dependencies out of our project folders,\n mitigates any risk of us committing these packages to any git repos (if you're\na nodejs person, you know what I mean with npm  and node_modules).\n\nCreating Environments\nUnsurprisingly, we get started with pip3 install pipenv. This may as well be the\nfirst and last package you install on your python path.\n\nWhile in your project folder, give ‘pipenv shell’ a go. If an environment has\nnot been created in this folder previously, this will create a new environment\nfor this directory. If an environment does exist, this same command will be used\nto activate the environment. Compare this to the syntax of virtualenv:\n\n$ virtualenv myenv\n$ source myenv/bin/activate\n\n\nWhen creating environments, ‘pipenv shell’ can also take additional arguments\nsuch as —python, which allows you to specify which installed version of python\nto use for this environment:\n\n$ pipenv shell —python 3.7\n\n\nWhile in the shell, we can install packages using pip as expected.\n\nManaging packages\nThe point of environments is not only to isolate dependencies, but also to track\nthem so that our environment is both transferable and easily reproducible.\nChances are you’re familiar with the typical output of pip freeze:\n\naadict==0.2.3\nasset==0.6.12\nbeautifulsoup4==4.6.1\ncertifi==2018.4.16\nchardet==3.0.4\nclick==6.7\ndecorator==4.3.0\ndnspython==1.15.0\nFlask==1.0.2\nFlask-Assets==0.12\nFlask-Login==0.4.1\nFlask-Static-Compress==1.0.2\nglobre==0.1.5\ngunicorn==19.9.0\nidna==2.7\ninfinity==1.4\nintervals==0.8.1\nitsdangerous==0.24\njac==0.17.1\nJinja2==2.10\nlessc==0.1.2\nlesscpy==0.13.0\nMarkupSafe==1.0\nordereddict==1.1\nply==3.11\npymongo==3.7.1\nrequests==2.19.1\nrjsmin==1.0.12\nsix==1.11.0\nSQLAlchemy==1.2.10\nSQLAlchemy-Utils==0.33.3\nurllib3==1.23\nvalidators==0.12.2\nwebassets==0.12.1\nWerkzeug==0.14.1\nWTForms==2.2.1\nWTForms-Alchemy==0.16.7\nWTForms-Components==0.10.3\n\npip freeze  is a great human-friendly way to see what you have installed in your\nenvironment; but what about robots? This wouldn't be Hackers And Slackers if we\ndidn't have a robot-friendly solution, now would it? Check out the output of \npipenv lock, which writes to a file called Pipfile.lock  in your local\nenvironment:\n\n{\n    \"_meta\": {\n        \"hash\": {\n            \"sha256\": \"668ab7d6f7db268048ca01a717c1cf77b8b4f373ed8074e48a9f22517975a306\"\n        },\n        \"pipfile-spec\": 6,\n        \"requires\": {\n            \"python_version\": \"3.7\"\n        },\n        \"sources\": [\n            {\n                \"name\": \"pypi\",\n                \"url\": \"https://pypi.org/simple\",\n                \"verify_ssl\": true\n            }\n        ]\n    },\n    \"default\": {\n        \"asn1crypto\": {\n            \"hashes\": [\n                \"sha256:2f1adbb7546ed199e3c90ef23ec95c5cf3585bac7d11fb7eb562a3fe89c64e87\",\n                \"sha256:9d5c20441baf0cb60a4ac34cc447c6c189024b6b4c6cd7877034f4965c464e49\"\n            ],\n            \"version\": \"==0.24.0\"\n        },\n        \"certifi\": {\n            \"hashes\": [\n                \"sha256:13e698f54293db9f89122b0581843a782ad0934a4fe0172d2a980ba77fc61bb7\",\n                \"sha256:9fa520c1bacfb634fa7af20a76bcbd3d5fb390481724c597da32c719a7dca4b0\"\n            ],\n            \"version\": \"==2018.4.16\"\n        },\n        \"cffi\": {\n            \"hashes\": [\n                \"sha256:151b7eefd035c56b2b2e1eb9963c90c6302dc15fbd8c1c0a83a163ff2c7d7743\",\n                \"sha256:1553d1e99f035ace1c0544050622b7bc963374a00c467edafac50ad7bd276aef\",\n                \"sha256:1b0493c091a1898f1136e3f4f991a784437fac3673780ff9de3bcf46c80b6b50\",\n                \"sha256:2ba8a45822b7aee805ab49abfe7eec16b90587f7f26df20c71dd89e45a97076f\",\n                \"sha256:3bb6bd7266598f318063e584378b8e27c67de998a43362e8fce664c54ee52d30\",\n                \"sha256:3c85641778460581c42924384f5e68076d724ceac0f267d66c757f7535069c93\",\n                \"sha256:3eb6434197633b7748cea30bf0ba9f66727cdce45117a712b29a443943733257\",\n                \"sha256:495c5c2d43bf6cebe0178eb3e88f9c4aa48d8934aa6e3cddb865c058da76756b\",\n                \"sha256:4c91af6e967c2015729d3e69c2e51d92f9898c330d6a851bf8f121236f3defd3\",\n                \"sha256:57b2533356cb2d8fac1555815929f7f5f14d68ac77b085d2326b571310f34f6e\",\n                \"sha256:770f3782b31f50b68627e22f91cb182c48c47c02eb405fd689472aa7b7aa16dc\",\n                \"sha256:79f9b6f7c46ae1f8ded75f68cf8ad50e5729ed4d590c74840471fc2823457d04\",\n                \"sha256:7a33145e04d44ce95bcd71e522b478d282ad0eafaf34fe1ec5bbd73e662f22b6\",\n                \"sha256:857959354ae3a6fa3da6651b966d13b0a8bed6bbc87a0de7b38a549db1d2a359\",\n                \"sha256:87f37fe5130574ff76c17cab61e7d2538a16f843bb7bca8ebbc4b12de3078596\",\n                \"sha256:95d5251e4b5ca00061f9d9f3d6fe537247e145a8524ae9fd30a2f8fbce993b5b\",\n                \"sha256:9d1d3e63a4afdc29bd76ce6aa9d58c771cd1599fbba8cf5057e7860b203710dd\",\n                \"sha256:a36c5c154f9d42ec176e6e620cb0dd275744aa1d804786a71ac37dc3661a5e95\",\n                \"sha256:a6a5cb8809091ec9ac03edde9304b3ad82ad4466333432b16d78ef40e0cce0d5\",\n                \"sha256:ae5e35a2c189d397b91034642cb0eab0e346f776ec2eb44a49a459e6615d6e2e\",\n                \"sha256:b0f7d4a3df8f06cf49f9f121bead236e328074de6449866515cea4907bbc63d6\",\n                \"sha256:b75110fb114fa366b29a027d0c9be3709579602ae111ff61674d28c93606acca\",\n                \"sha256:ba5e697569f84b13640c9e193170e89c13c6244c24400fc57e88724ef610cd31\",\n                \"sha256:be2a9b390f77fd7676d80bc3cdc4f8edb940d8c198ed2d8c0be1319018c778e1\",\n                \"sha256:ca1bd81f40adc59011f58159e4aa6445fc585a32bb8ac9badf7a2c1aa23822f2\",\n                \"sha256:d5d8555d9bfc3f02385c1c37e9f998e2011f0db4f90e250e5bc0c0a85a813085\",\n                \"sha256:e55e22ac0a30023426564b1059b035973ec82186ddddbac867078435801c7801\",\n                \"sha256:e90f17980e6ab0f3c2f3730e56d1fe9bcba1891eeea58966e89d352492cc74f4\",\n                \"sha256:ecbb7b01409e9b782df5ded849c178a0aa7c906cf8c5a67368047daab282b184\",\n                \"sha256:ed01918d545a38998bfa5902c7c00e0fee90e957ce036a4000a88e3fe2264917\",\n                \"sha256:edabd457cd23a02965166026fd9bfd196f4324fe6032e866d0f3bd0301cd486f\",\n                \"sha256:fdf1c1dc5bafc32bc5d08b054f94d659422b05aba244d6be4ddc1c72d9aa70fb\"\n            ],\n            \"version\": \"==1.11.5\"\n        },\n        \"chardet\": {\n            \"hashes\": [\n                \"sha256:84ab92ed1c4d4f16916e05906b6b75a6c0fb5db821cc65e70cbd64a3e2a5eaae\",\n                \"sha256:fc323ffcaeaed0e0a02bf4d117757b98aed530d9ed4531e3e15460124c106691\"\n            ],\n            \"version\": \"==3.0.4\"\n        },\n        \"cryptography\": {\n            \"hashes\": [\n                \"sha256:21af753934f2f6d1a10fe8f4c0a64315af209ef6adeaee63ca349797d747d687\",\n                \"sha256:27bb401a20a838d6d0ea380f08c6ead3ccd8c9d8a0232dc9adcc0e4994576a66\",\n                \"sha256:29720c4253263cff9aea64585adbbe85013ba647f6e98367efff9db2d7193ded\",\n                \"sha256:2a35b7570d8f247889784010aac8b384fd2e4a47b33e15c4a60b45a7c1944120\",\n                \"sha256:42c531a6a354407f42ee07fda5c2c0dc822cf6d52744949c182f2b295fbd4183\",\n                \"sha256:5eb86f03f9c4f0ac2336ac5431271072ddf7ecc76b338e26366732cfac58aa19\",\n                \"sha256:67f7f57eae8dede577f3f7775957f5bec93edd6bdb6ce597bb5b28e1bdf3d4fb\",\n                \"sha256:6ec84edcbc966ae460560a51a90046503ff0b5b66157a9efc61515c68059f6c8\",\n                \"sha256:7ba834564daef87557e7fcd35c3c3183a4147b0b3a57314e53317360b9b201b3\",\n                \"sha256:7d7f084cbe1fdb82be5a0545062b59b1ad3637bc5a48612ac2eb428ff31b31ea\",\n                \"sha256:82409f5150e529d699e5c33fa8fd85e965104db03bc564f5f4b6a9199e591f7c\",\n                \"sha256:87d092a7c2a44e5f7414ab02fb4145723ebba411425e1a99773531dd4c0e9b8d\",\n                \"sha256:8c56ef989342e42b9fcaba7c74b446f0cc9bed546dd00034fa7ad66fc00307ef\",\n                \"sha256:9449f5d4d7c516a6118fa9210c4a00f34384cb1d2028672100ee0c6cce49d7f6\",\n                \"sha256:bc2301170986ad82d9349a91eb8884e0e191209c45f5541b16aa7c0cfb135978\",\n                \"sha256:c132bab45d4bd0fff1d3fe294d92b0a6eb8404e93337b3127bdec9f21de117e6\",\n                \"sha256:c3d945b7b577f07a477700f618f46cbc287af3a9222cd73035c6ef527ef2c363\",\n                \"sha256:cee18beb4c807b5c0b178f4fa2fae03cef9d51821a358c6890f8b23465b7e5d2\",\n                \"sha256:d01dfc5c2b3495184f683574e03c70022674ca9a7be88589c5aba130d835ea90\"\n            ],\n            \"version\": \"==2.3\"\n        },\n        \"defusedxml\": {\n            \"hashes\": [\n                \"sha256:24d7f2f94f7f3cb6061acb215685e5125fbcdc40a857eff9de22518820b0a4f4\",\n                \"sha256:702a91ade2968a82beb0db1e0766a6a273f33d4616a6ce8cde475d8e09853b20\"\n            ],\n            \"version\": \"==0.5.0\"\n        },\n        \"idna\": {\n            \"hashes\": [\n                \"sha256:156a6814fb5ac1fc6850fb002e0852d56c0c8d2531923a51032d1b70760e186e\",\n                \"sha256:684a38a6f903c1d71d6d5fac066b58d7768af4de2b832e426ec79c30daa94a16\"\n            ],\n            \"version\": \"==2.7\"\n        },\n        \"jira\": {\n            \"hashes\": [\n                \"sha256:9adeead4d5f5a6aff74c630787f8bd2d4b0e154f3a3036641298064e91b2d25d\",\n                \"sha256:e2a94adff98e45b29ded030adc76103eab34fa7d4d57303f211f572bedba0e93\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==2.0.0\"\n        },\n        \"numpy\": {\n            \"hashes\": [\n                \"sha256:14fb76bde161c87dcec52d91c78f65aa8a23aa2e1530a71f412dabe03927d917\",\n                \"sha256:21041014b7529237994a6b578701c585703fbb3b1bea356cdb12a5ea7804241c\",\n                \"sha256:24f3bb9a5f6c3936a8ccd4ddfc1210d9511f4aeb879a12efd2e80bec647b8695\",\n                \"sha256:34033b581bc01b1135ca2e3e93a94daea7c739f21a97a75cca93e29d9f0c8e71\",\n                \"sha256:3fbccb399fe9095b1c1d7b41e7c7867db8aa0d2347fc44c87a7a180cedda112b\",\n                \"sha256:50718eea8e77a1bedcc85befd22c8dbf5a24c9d2c0c1e36bbb8d7a38da847eb3\",\n                \"sha256:55daf757e5f69aa75b4477cf4511bf1f96325c730e4ad32d954ccb593acd2585\",\n                \"sha256:61efc65f325770bbe787f34e00607bc124f08e6c25fdf04723848585e81560dc\",\n                \"sha256:62cb836506f40ce2529bfba9d09edc4b2687dd18c56cf4457e51c3e7145402fd\",\n                \"sha256:64c6acf5175745fd1b7b7e17c74fdbfb7191af3b378bc54f44560279f41238d3\",\n                \"sha256:674ea7917f0657ddb6976bd102ac341bc493d072c32a59b98e5b8c6eaa2d5ec0\",\n                \"sha256:73a816e441dace289302e04a7a34ec4772ed234ab6885c968e3ca2fc2d06fe2d\",\n                \"sha256:78c35dc7ad184aebf3714dbf43f054714c6e430e14b9c06c49a864fb9e262030\",\n                \"sha256:7f17efe9605444fcbfd990ba9b03371552d65a3c259fc2d258c24fb95afdd728\",\n                \"sha256:816645178f2180be257a576b735d3ae245b1982280b97ae819550ce8bcdf2b6b\",\n                \"sha256:924f37e66db78464b4b85ed4b6d2e5cda0c0416e657cac7ccbef14b9fa2c40b5\",\n                \"sha256:a17a8fd5df4fec5b56b4d11c9ba8b9ebfb883c90ec361628d07be00aaa4f009a\",\n                \"sha256:aaa519335a71f87217ca8a680c3b66b61960e148407bdf5c209c42f50fe30f49\",\n                \"sha256:ae3864816287d0e86ead580b69921daec568fe680857f07ee2a87bf7fd77ce24\",\n                \"sha256:b5f8c15cb9173f6cdf0f994955e58d1265331029ae26296232379461a297e5f2\",\n                \"sha256:c3ac359ace241707e5a48fe2922e566ac666aacacf4f8031f2994ac429c31344\",\n                \"sha256:c7c660cc0209fdf29a4e50146ca9ac9d8664acaded6b6ae2f5d0ae2e91a0f0cd\",\n                \"sha256:d690a2ff49f6c3bc35336693c9924fe5916be3cc0503fe1ea6c7e2bf951409ee\",\n                \"sha256:e2317cf091c2e7f0dacdc2e72c693cc34403ca1f8e3807622d0bb653dc978616\",\n                \"sha256:f28e73cf18d37a413f7d5de35d024e6b98f14566a10d82100f9dc491a7d449f9\",\n                \"sha256:f2a778dd9bb3e4590dbe3bbac28e7c7134280c4ec97e3bf8678170ee58c67b21\",\n                \"sha256:f5a758252502b466b9c2b201ea397dae5a914336c987f3a76c3741a82d43c96e\",\n                \"sha256:fb4c33a404d9eff49a0cdc8ead0af6453f62f19e071b60d283f9dc05581e4134\"\n            ],\n            \"markers\": \"python_version >= '2.7' and python_version != '3.2.*' and python_version != '3.3.*' and python_version != '3.0.*' and python_version != '3.1.*'\",\n            \"version\": \"==1.15.0\"\n        },\n        \"oauthlib\": {\n            \"hashes\": [\n                \"sha256:ac35665a61c1685c56336bda97d5eefa246f1202618a1d6f34fccb1bdd404162\",\n                \"sha256:d883b36b21a6ad813953803edfa563b1b579d79ca758fe950d1bc9e8b326025b\"\n            ],\n            \"version\": \"==2.1.0\"\n        },\n        \"pandas\": {\n            \"hashes\": [\n                \"sha256:11975fad9edbdb55f1a560d96f91830e83e29bed6ad5ebf506abda09818eaf60\",\n                \"sha256:12e13d127ca1b585dd6f6840d3fe3fa6e46c36a6afe2dbc5cb0b57032c902e31\",\n                \"sha256:1c87fcb201e1e06f66e23a61a5fea9eeebfe7204a66d99df24600e3f05168051\",\n                \"sha256:242e9900de758e137304ad4b5663c2eff0d798c2c3b891250bd0bd97144579da\",\n                \"sha256:26c903d0ae1542890cb9abadb4adcb18f356b14c2df46e4ff657ae640e3ac9e7\",\n                \"sha256:2e1e88f9d3e5f107b65b59cd29f141995597b035d17cc5537e58142038942e1a\",\n                \"sha256:31b7a48b344c14691a8e92765d4023f88902ba3e96e2e4d0364d3453cdfd50db\",\n                \"sha256:4fd07a932b4352f8a8973761ab4e84f965bf81cc750fb38e04f01088ab901cb8\",\n                \"sha256:5b24ca47acf69222e82530e89111dd9d14f9b970ab2cd3a1c2c78f0c4fbba4f4\",\n                \"sha256:647b3b916cc8f6aeba240c8171be3ab799c3c1b2ea179a3be0bd2712c4237553\",\n                \"sha256:66b060946046ca27c0e03e9bec9bba3e0b918bafff84c425ca2cc2e157ce121e\",\n                \"sha256:6efa9fa6e1434141df8872d0fa4226fc301b17aacf37429193f9d70b426ea28f\",\n                \"sha256:be4715c9d8367e51dbe6bc6d05e205b1ae234f0dc5465931014aa1c4af44c1ba\",\n                \"sha256:bea90da782d8e945fccfc958585210d23de374fa9294a9481ed2abcef637ebfc\",\n                \"sha256:d785fc08d6f4207437e900ffead930a61e634c5e4f980ba6d3dc03c9581748c7\",\n                \"sha256:de9559287c4fe8da56e8c3878d2374abc19d1ba2b807bfa7553e912a8e5ba87c\",\n                \"sha256:f4f98b190bb918ac0bc0e3dd2ab74ff3573da9f43106f6dba6385406912ec00f\",\n                \"sha256:f71f1a7e2d03758f6e957896ed696254e2bc83110ddbc6942018f1a232dd9dad\",\n                \"sha256:fb944c8f0b0ab5c1f7846c686bc4cdf8cde7224655c12edcd59d5212cd57bec0\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==0.23.4\"\n        },\n        \"pbr\": {\n            \"hashes\": [\n                \"sha256:1b8be50d938c9bb75d0eaf7eda111eec1bf6dc88a62a6412e33bf077457e0f45\",\n                \"sha256:b486975c0cafb6beeb50ca0e17ba047647f229087bd74e37f4a7e2cac17d2caa\"\n            ],\n            \"version\": \"==4.2.0\"\n        },\n        \"psycopg2-binary\": {\n            \"hashes\": [\n                \"sha256:04afb59bbbd2eab3148e6816beddc74348078b8c02a1113ea7f7822f5be4afe3\",\n                \"sha256:098b18f4d8857a8f9b206d1dc54db56c2255d5d26458917e7bcad61ebfe4338f\",\n                \"sha256:0bf855d4a7083e20ead961fda4923887094eaeace0ab2d76eb4aa300f4bbf5bd\",\n                \"sha256:197dda3ffd02057820be83fe4d84529ea70bf39a9a4daee1d20ffc74eb3d042e\",\n                \"sha256:278ef63afb4b3d842b4609f2c05ffbfb76795cf6a184deeb8707cd5ed3c981a5\",\n                \"sha256:3cbf8c4fc8f22f0817220891cf405831559f4d4c12c4f73913730a2ea6c47a47\",\n                \"sha256:4305aed922c4d9d6163ab3a41d80b5a1cfab54917467da8168552c42cad84d32\",\n                \"sha256:47ee296f704fb8b2a616dec691cdcfd5fa0f11943955e88faa98cbd1dc3b3e3d\",\n                \"sha256:4a0e38cb30457e70580903367161173d4a7d1381eb2f2cfe4e69b7806623f484\",\n                \"sha256:4d6c294c6638a71cafb82a37f182f24321f1163b08b5d5ca076e11fe838a3086\",\n                \"sha256:4f3233c366500730f839f92833194fd8f9a5c4529c8cd8040aa162c3740de8e5\",\n                \"sha256:5221f5a3f4ca2ddf0d58e8b8a32ca50948be9a43351fda797eb4e72d7a7aa34d\",\n                \"sha256:5c6ca0b507540a11eaf9e77dee4f07c131c2ec80ca0cffa146671bf690bc1c02\",\n                \"sha256:789bd89d71d704db2b3d5e67d6d518b158985d791d3b2dec5ab85457cfc9677b\",\n                \"sha256:7b94d29239efeaa6a967f3b5971bd0518d2a24edd1511edbf4a2c8b815220d07\",\n                \"sha256:89bc65ef3301c74cf32db25334421ea6adbe8f65601ea45dcaaf095abed910bb\",\n                \"sha256:89d6d3a549f405c20c9ae4dc94d7ed2de2fa77427a470674490a622070732e62\",\n                \"sha256:97521704ac7127d7d8ba22877da3c7bf4a40366587d238ec679ff38e33177498\",\n                \"sha256:a395b62d5f44ff6f633231abe568e2203b8fabf9797cd6386aa92497df912d9a\",\n                \"sha256:a6d32c37f714c3f34158f3fa659f3a8f2658d5f53c4297d45579b9677cc4d852\",\n                \"sha256:a89ee5c26f72f2d0d74b991ce49e42ddeb4ac0dc2d8c06a0f2770a1ab48f4fe0\",\n                \"sha256:b4c8b0ef3608e59317bfc501df84a61e48b5445d45f24d0391a24802de5f2d84\",\n                \"sha256:b5fcf07140219a1f71e18486b8dc28e2e1b76a441c19374805c617aa6d9a9d55\",\n                \"sha256:b86f527f00956ecebad6ab3bb30e3a75fedf1160a8716978dd8ce7adddedd86f\",\n                \"sha256:be4c4aa22ba22f70de36c98b06480e2f1697972d49eb20d525f400d204a6d272\",\n                \"sha256:c2ac7aa1a144d4e0e613ac7286dae85671e99fe7a1353954d4905629c36b811c\",\n                \"sha256:de26ef4787b5e778e8223913a3e50368b44e7480f83c76df1f51d23bd21cea16\",\n                \"sha256:e70ebcfc5372dc7b699c0110454fc4263967f30c55454397e5769eb72c0eb0ce\",\n                \"sha256:eadbd32b6bc48b67b0457fccc94c86f7ccc8178ab839f684eb285bb592dc143e\",\n                \"sha256:ecbc6dfff6db06b8b72ae8a2f25ff20fbdcb83cb543811a08f7cb555042aa729\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==2.7.5\"\n        },\n        \"pycparser\": {\n            \"hashes\": [\n                \"sha256:99a8ca03e29851d96616ad0404b4aad7d9ee16f25c9f9708a11faf2810f7b226\"\n            ],\n            \"version\": \"==2.18\"\n        },\n        \"pyjwt\": {\n            \"hashes\": [\n                \"sha256:30b1380ff43b55441283cc2b2676b755cca45693ae3097325dea01f3d110628c\",\n                \"sha256:4ee413b357d53fd3fb44704577afac88e72e878716116270d722723d65b42176\"\n            ],\n            \"version\": \"==1.6.4\"\n        },\n        \"python-dateutil\": {\n            \"hashes\": [\n                \"sha256:1adb80e7a782c12e52ef9a8182bebeb73f1d7e24e374397af06fb4956c8dc5c0\",\n                \"sha256:e27001de32f627c22380a688bcc43ce83504a7bc5da472209b4c70f02829f0b8\"\n            ],\n            \"version\": \"==2.7.3\"\n        },\n        \"pytz\": {\n            \"hashes\": [\n                \"sha256:a061aa0a9e06881eb8b3b2b43f05b9439d6583c206d0a6c340ff72a7b6669053\",\n                \"sha256:ffb9ef1de172603304d9d2819af6f5ece76f2e85ec10692a524dd876e72bf277\"\n            ],\n            \"version\": \"==2018.5\"\n        },\n        \"requests\": {\n            \"hashes\": [\n                \"sha256:63b52e3c866428a224f97cab011de738c36aec0185aa91cfacd418b5d58911d1\",\n                \"sha256:ec22d826a36ed72a7358ff3fe56cbd4ba69dd7a6718ffd450ff0e9df7a47ce6a\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==2.19.1\"\n        },\n        \"requests-oauthlib\": {\n            \"hashes\": [\n                \"sha256:8886bfec5ad7afb391ed5443b1f697c6f4ae98d0e5620839d8b4499c032ada3f\",\n                \"sha256:e21232e2465808c0e892e0e4dbb8c2faafec16ac6dc067dd546e9b466f3deac8\"\n            ],\n            \"version\": \"==1.0.0\"\n        },\n        \"requests-toolbelt\": {\n            \"hashes\": [\n                \"sha256:42c9c170abc2cacb78b8ab23ac957945c7716249206f90874651971a4acff237\",\n                \"sha256:f6a531936c6fa4c6cfce1b9c10d5c4f498d16528d2a54a22ca00011205a187b5\"\n            ],\n            \"version\": \"==0.8.0\"\n        },\n        \"six\": {\n            \"hashes\": [\n                \"sha256:70e8a77beed4562e7f14fe23a786b54f6296e34344c23bc42f07b15018ff98e9\",\n                \"sha256:832dc0e10feb1aa2c68dcc57dbb658f1c7e65b9b61af69048abc87a2db00a0eb\"\n            ],\n            \"version\": \"==1.11.0\"\n        },\n        \"sqlalchemy\": {\n            \"hashes\": [\n                \"sha256:72325e67fb85f6e9ad304c603d83626d1df684fdf0c7ab1f0352e71feeab69d8\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==1.2.10\"\n        },\n        \"urllib3\": {\n            \"hashes\": [\n                \"sha256:a68ac5e15e76e7e5dd2b8f94007233e01effe3e50e8daddf69acfd81cb686baf\",\n                \"sha256:b5725a0bd4ba422ab0e66e89e030c806576753ea3ee08554382c14e685d117b5\"\n            ],\n            \"markers\": \"python_version != '3.0.*' and python_version != '3.3.*' and python_version != '3.1.*' and python_version != '3.2.*' and python_version < '4' and python_version >= '2.6'\",\n            \"version\": \"==1.23\"\n        }\n    },\n    \"develop\": {}\n}\n\n\nPipfile.lock  is Python's very own equivalent to package-lock.json. With \nPipfile.lock  present, future developers need only to type the command pipenv\ninstall  to install the exact dependencies in your project with all the correct\nversions. What's more, Pipfile.lock is actually a must-have for Heroku \ndevelopment, which uses this file to wisely produce environments upon\ndeployment.\n\nWhat about updating all packages past their locked version, you might ask? Check\nout the output of pipenv update, which updates all packages to their latest, and\nupdates the corresponding .lock file accordingly:\n\nYou had me at Snake emoji.When to Use Conda or Virtualenv\nIf you're strictly in the data science  profession, chances are that none of\nthis nonsense interests you - you and all your friends are always working with\nthe full Anaconda suite (which has its own similar environment manager), and you\ndon't care for shipping products. You're a scientist, not some sort of blue\ncollar data equivalent of manufacturing. \n\nEven if you're engineer, virtualenv  still has it's place. Take Lambda Functions\nin AWS for example: if you're looking to create a zip of dependencies to upload\nto your Lambda, it's much simpler to have those packages to live in your local\nworking folder. \n\nI'm sure you're itching to hear more on the topic of Python environment\nmanagement, but the analytics say that 90% of readers have already bounced by\nthis point. To the remaining 10%... you are all that I live for.","html":"<p>As a shoutout to my fellow Data Engineers, I'm going to take a step back from typical data science workflows. When we build standalone applications, we probably don't want to be tossing around Miniconda's 720 software packages in production, nor would we ever want to commit the source of any dependencies to Github. This is where Pipenv comes in handy: it serves as both an environment management tool, as well as a sort of <em>package.json</em> for your Python app.</p><p>The combination of <code>virtualenv</code> and <code>virtualenvwrapper</code> have reigned supreme for some time. While this combination is a totally fine solution, I've noticed even senior developers gloss over the existence of a better alternative, <code>pipenv</code>, which makes package management way, way easier. This is especially important in cases such as building apps for Heroku, where we're pushing to an otherwise agnostic environment which must explicitly be kept in sync with our local setup to ensure anything works.</p><p>Apologies in advance for what might seem a bit like Python 101, but I've been finding that the following information might be more relevant to some than we might presume.</p><h2 id=\"why-pipenv\">Why Pipenv?</h2><p>Pipenv's shell interface is entirely user-friendly. Rarely will developers find themselves needing to type more than two words, perhaps a single argument, to achieve a series of tasks which were previously less trivial. Pipenv also does an excellent job of documenting all dependencies in the resulting <strong>Pipfile</strong> and <strong>Pipfile.lock</strong>, which are easily generated and capture our project's dependencies to be handed off to the next poor bloke. Finally, Pipenv does us the luxury of keeping installed dependencies out of our project folder and instead creates virtual environments in parallel with our Python Path. This keeps folders potentially holding hundreds of dependencies out of our project folders,  mitigates any risk of us committing these packages to any git repos (if you're a nodejs person, you know what I mean with <em>npm</em> and <em>node_modules</em>).</p><h2 id=\"creating-environments\">Creating Environments</h2><p>Unsurprisingly, we get started with <code>pip3 install pipenv</code>. This may as well be the first and last package you install on your python path.</p><p>While in your project folder, give ‘pipenv shell’ a go. If an environment has not been created in this folder previously, this will create a new environment for this directory. If an environment does exist, this same command will be used to activate the environment. Compare this to the syntax of virtualenv:</p><pre><code class=\"language-shell\">$ virtualenv myenv\n$ source myenv/bin/activate\n</code></pre>\n<p>When creating environments, ‘pipenv shell’ can also take additional arguments such as —python, which allows you to specify which installed version of python to use for this environment:</p><pre><code class=\"language-shell\">$ pipenv shell —python 3.7\n</code></pre>\n<p>While in the shell, we can install packages using pip as expected.</p><h2 id=\"managing-packages\">Managing packages</h2><p>The point of environments is not only to isolate dependencies, but also to track them so that our environment is both transferable and easily reproducible. Chances are you’re familiar with the typical output of <code>pip freeze</code>:</p><pre><code>aadict==0.2.3\nasset==0.6.12\nbeautifulsoup4==4.6.1\ncertifi==2018.4.16\nchardet==3.0.4\nclick==6.7\ndecorator==4.3.0\ndnspython==1.15.0\nFlask==1.0.2\nFlask-Assets==0.12\nFlask-Login==0.4.1\nFlask-Static-Compress==1.0.2\nglobre==0.1.5\ngunicorn==19.9.0\nidna==2.7\ninfinity==1.4\nintervals==0.8.1\nitsdangerous==0.24\njac==0.17.1\nJinja2==2.10\nlessc==0.1.2\nlesscpy==0.13.0\nMarkupSafe==1.0\nordereddict==1.1\nply==3.11\npymongo==3.7.1\nrequests==2.19.1\nrjsmin==1.0.12\nsix==1.11.0\nSQLAlchemy==1.2.10\nSQLAlchemy-Utils==0.33.3\nurllib3==1.23\nvalidators==0.12.2\nwebassets==0.12.1\nWerkzeug==0.14.1\nWTForms==2.2.1\nWTForms-Alchemy==0.16.7\nWTForms-Components==0.10.3</code></pre><p><code>pip freeze</code> is a great human-friendly way to see what you have installed in your environment; but what about robots? This wouldn't be Hackers And Slackers if we didn't have a robot-friendly solution, now would it? Check out the output of <code>pipenv lock</code>, which writes to a file called <code>Pipfile.lock</code> in your local environment:</p><pre><code>{\n    \"_meta\": {\n        \"hash\": {\n            \"sha256\": \"668ab7d6f7db268048ca01a717c1cf77b8b4f373ed8074e48a9f22517975a306\"\n        },\n        \"pipfile-spec\": 6,\n        \"requires\": {\n            \"python_version\": \"3.7\"\n        },\n        \"sources\": [\n            {\n                \"name\": \"pypi\",\n                \"url\": \"https://pypi.org/simple\",\n                \"verify_ssl\": true\n            }\n        ]\n    },\n    \"default\": {\n        \"asn1crypto\": {\n            \"hashes\": [\n                \"sha256:2f1adbb7546ed199e3c90ef23ec95c5cf3585bac7d11fb7eb562a3fe89c64e87\",\n                \"sha256:9d5c20441baf0cb60a4ac34cc447c6c189024b6b4c6cd7877034f4965c464e49\"\n            ],\n            \"version\": \"==0.24.0\"\n        },\n        \"certifi\": {\n            \"hashes\": [\n                \"sha256:13e698f54293db9f89122b0581843a782ad0934a4fe0172d2a980ba77fc61bb7\",\n                \"sha256:9fa520c1bacfb634fa7af20a76bcbd3d5fb390481724c597da32c719a7dca4b0\"\n            ],\n            \"version\": \"==2018.4.16\"\n        },\n        \"cffi\": {\n            \"hashes\": [\n                \"sha256:151b7eefd035c56b2b2e1eb9963c90c6302dc15fbd8c1c0a83a163ff2c7d7743\",\n                \"sha256:1553d1e99f035ace1c0544050622b7bc963374a00c467edafac50ad7bd276aef\",\n                \"sha256:1b0493c091a1898f1136e3f4f991a784437fac3673780ff9de3bcf46c80b6b50\",\n                \"sha256:2ba8a45822b7aee805ab49abfe7eec16b90587f7f26df20c71dd89e45a97076f\",\n                \"sha256:3bb6bd7266598f318063e584378b8e27c67de998a43362e8fce664c54ee52d30\",\n                \"sha256:3c85641778460581c42924384f5e68076d724ceac0f267d66c757f7535069c93\",\n                \"sha256:3eb6434197633b7748cea30bf0ba9f66727cdce45117a712b29a443943733257\",\n                \"sha256:495c5c2d43bf6cebe0178eb3e88f9c4aa48d8934aa6e3cddb865c058da76756b\",\n                \"sha256:4c91af6e967c2015729d3e69c2e51d92f9898c330d6a851bf8f121236f3defd3\",\n                \"sha256:57b2533356cb2d8fac1555815929f7f5f14d68ac77b085d2326b571310f34f6e\",\n                \"sha256:770f3782b31f50b68627e22f91cb182c48c47c02eb405fd689472aa7b7aa16dc\",\n                \"sha256:79f9b6f7c46ae1f8ded75f68cf8ad50e5729ed4d590c74840471fc2823457d04\",\n                \"sha256:7a33145e04d44ce95bcd71e522b478d282ad0eafaf34fe1ec5bbd73e662f22b6\",\n                \"sha256:857959354ae3a6fa3da6651b966d13b0a8bed6bbc87a0de7b38a549db1d2a359\",\n                \"sha256:87f37fe5130574ff76c17cab61e7d2538a16f843bb7bca8ebbc4b12de3078596\",\n                \"sha256:95d5251e4b5ca00061f9d9f3d6fe537247e145a8524ae9fd30a2f8fbce993b5b\",\n                \"sha256:9d1d3e63a4afdc29bd76ce6aa9d58c771cd1599fbba8cf5057e7860b203710dd\",\n                \"sha256:a36c5c154f9d42ec176e6e620cb0dd275744aa1d804786a71ac37dc3661a5e95\",\n                \"sha256:a6a5cb8809091ec9ac03edde9304b3ad82ad4466333432b16d78ef40e0cce0d5\",\n                \"sha256:ae5e35a2c189d397b91034642cb0eab0e346f776ec2eb44a49a459e6615d6e2e\",\n                \"sha256:b0f7d4a3df8f06cf49f9f121bead236e328074de6449866515cea4907bbc63d6\",\n                \"sha256:b75110fb114fa366b29a027d0c9be3709579602ae111ff61674d28c93606acca\",\n                \"sha256:ba5e697569f84b13640c9e193170e89c13c6244c24400fc57e88724ef610cd31\",\n                \"sha256:be2a9b390f77fd7676d80bc3cdc4f8edb940d8c198ed2d8c0be1319018c778e1\",\n                \"sha256:ca1bd81f40adc59011f58159e4aa6445fc585a32bb8ac9badf7a2c1aa23822f2\",\n                \"sha256:d5d8555d9bfc3f02385c1c37e9f998e2011f0db4f90e250e5bc0c0a85a813085\",\n                \"sha256:e55e22ac0a30023426564b1059b035973ec82186ddddbac867078435801c7801\",\n                \"sha256:e90f17980e6ab0f3c2f3730e56d1fe9bcba1891eeea58966e89d352492cc74f4\",\n                \"sha256:ecbb7b01409e9b782df5ded849c178a0aa7c906cf8c5a67368047daab282b184\",\n                \"sha256:ed01918d545a38998bfa5902c7c00e0fee90e957ce036a4000a88e3fe2264917\",\n                \"sha256:edabd457cd23a02965166026fd9bfd196f4324fe6032e866d0f3bd0301cd486f\",\n                \"sha256:fdf1c1dc5bafc32bc5d08b054f94d659422b05aba244d6be4ddc1c72d9aa70fb\"\n            ],\n            \"version\": \"==1.11.5\"\n        },\n        \"chardet\": {\n            \"hashes\": [\n                \"sha256:84ab92ed1c4d4f16916e05906b6b75a6c0fb5db821cc65e70cbd64a3e2a5eaae\",\n                \"sha256:fc323ffcaeaed0e0a02bf4d117757b98aed530d9ed4531e3e15460124c106691\"\n            ],\n            \"version\": \"==3.0.4\"\n        },\n        \"cryptography\": {\n            \"hashes\": [\n                \"sha256:21af753934f2f6d1a10fe8f4c0a64315af209ef6adeaee63ca349797d747d687\",\n                \"sha256:27bb401a20a838d6d0ea380f08c6ead3ccd8c9d8a0232dc9adcc0e4994576a66\",\n                \"sha256:29720c4253263cff9aea64585adbbe85013ba647f6e98367efff9db2d7193ded\",\n                \"sha256:2a35b7570d8f247889784010aac8b384fd2e4a47b33e15c4a60b45a7c1944120\",\n                \"sha256:42c531a6a354407f42ee07fda5c2c0dc822cf6d52744949c182f2b295fbd4183\",\n                \"sha256:5eb86f03f9c4f0ac2336ac5431271072ddf7ecc76b338e26366732cfac58aa19\",\n                \"sha256:67f7f57eae8dede577f3f7775957f5bec93edd6bdb6ce597bb5b28e1bdf3d4fb\",\n                \"sha256:6ec84edcbc966ae460560a51a90046503ff0b5b66157a9efc61515c68059f6c8\",\n                \"sha256:7ba834564daef87557e7fcd35c3c3183a4147b0b3a57314e53317360b9b201b3\",\n                \"sha256:7d7f084cbe1fdb82be5a0545062b59b1ad3637bc5a48612ac2eb428ff31b31ea\",\n                \"sha256:82409f5150e529d699e5c33fa8fd85e965104db03bc564f5f4b6a9199e591f7c\",\n                \"sha256:87d092a7c2a44e5f7414ab02fb4145723ebba411425e1a99773531dd4c0e9b8d\",\n                \"sha256:8c56ef989342e42b9fcaba7c74b446f0cc9bed546dd00034fa7ad66fc00307ef\",\n                \"sha256:9449f5d4d7c516a6118fa9210c4a00f34384cb1d2028672100ee0c6cce49d7f6\",\n                \"sha256:bc2301170986ad82d9349a91eb8884e0e191209c45f5541b16aa7c0cfb135978\",\n                \"sha256:c132bab45d4bd0fff1d3fe294d92b0a6eb8404e93337b3127bdec9f21de117e6\",\n                \"sha256:c3d945b7b577f07a477700f618f46cbc287af3a9222cd73035c6ef527ef2c363\",\n                \"sha256:cee18beb4c807b5c0b178f4fa2fae03cef9d51821a358c6890f8b23465b7e5d2\",\n                \"sha256:d01dfc5c2b3495184f683574e03c70022674ca9a7be88589c5aba130d835ea90\"\n            ],\n            \"version\": \"==2.3\"\n        },\n        \"defusedxml\": {\n            \"hashes\": [\n                \"sha256:24d7f2f94f7f3cb6061acb215685e5125fbcdc40a857eff9de22518820b0a4f4\",\n                \"sha256:702a91ade2968a82beb0db1e0766a6a273f33d4616a6ce8cde475d8e09853b20\"\n            ],\n            \"version\": \"==0.5.0\"\n        },\n        \"idna\": {\n            \"hashes\": [\n                \"sha256:156a6814fb5ac1fc6850fb002e0852d56c0c8d2531923a51032d1b70760e186e\",\n                \"sha256:684a38a6f903c1d71d6d5fac066b58d7768af4de2b832e426ec79c30daa94a16\"\n            ],\n            \"version\": \"==2.7\"\n        },\n        \"jira\": {\n            \"hashes\": [\n                \"sha256:9adeead4d5f5a6aff74c630787f8bd2d4b0e154f3a3036641298064e91b2d25d\",\n                \"sha256:e2a94adff98e45b29ded030adc76103eab34fa7d4d57303f211f572bedba0e93\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==2.0.0\"\n        },\n        \"numpy\": {\n            \"hashes\": [\n                \"sha256:14fb76bde161c87dcec52d91c78f65aa8a23aa2e1530a71f412dabe03927d917\",\n                \"sha256:21041014b7529237994a6b578701c585703fbb3b1bea356cdb12a5ea7804241c\",\n                \"sha256:24f3bb9a5f6c3936a8ccd4ddfc1210d9511f4aeb879a12efd2e80bec647b8695\",\n                \"sha256:34033b581bc01b1135ca2e3e93a94daea7c739f21a97a75cca93e29d9f0c8e71\",\n                \"sha256:3fbccb399fe9095b1c1d7b41e7c7867db8aa0d2347fc44c87a7a180cedda112b\",\n                \"sha256:50718eea8e77a1bedcc85befd22c8dbf5a24c9d2c0c1e36bbb8d7a38da847eb3\",\n                \"sha256:55daf757e5f69aa75b4477cf4511bf1f96325c730e4ad32d954ccb593acd2585\",\n                \"sha256:61efc65f325770bbe787f34e00607bc124f08e6c25fdf04723848585e81560dc\",\n                \"sha256:62cb836506f40ce2529bfba9d09edc4b2687dd18c56cf4457e51c3e7145402fd\",\n                \"sha256:64c6acf5175745fd1b7b7e17c74fdbfb7191af3b378bc54f44560279f41238d3\",\n                \"sha256:674ea7917f0657ddb6976bd102ac341bc493d072c32a59b98e5b8c6eaa2d5ec0\",\n                \"sha256:73a816e441dace289302e04a7a34ec4772ed234ab6885c968e3ca2fc2d06fe2d\",\n                \"sha256:78c35dc7ad184aebf3714dbf43f054714c6e430e14b9c06c49a864fb9e262030\",\n                \"sha256:7f17efe9605444fcbfd990ba9b03371552d65a3c259fc2d258c24fb95afdd728\",\n                \"sha256:816645178f2180be257a576b735d3ae245b1982280b97ae819550ce8bcdf2b6b\",\n                \"sha256:924f37e66db78464b4b85ed4b6d2e5cda0c0416e657cac7ccbef14b9fa2c40b5\",\n                \"sha256:a17a8fd5df4fec5b56b4d11c9ba8b9ebfb883c90ec361628d07be00aaa4f009a\",\n                \"sha256:aaa519335a71f87217ca8a680c3b66b61960e148407bdf5c209c42f50fe30f49\",\n                \"sha256:ae3864816287d0e86ead580b69921daec568fe680857f07ee2a87bf7fd77ce24\",\n                \"sha256:b5f8c15cb9173f6cdf0f994955e58d1265331029ae26296232379461a297e5f2\",\n                \"sha256:c3ac359ace241707e5a48fe2922e566ac666aacacf4f8031f2994ac429c31344\",\n                \"sha256:c7c660cc0209fdf29a4e50146ca9ac9d8664acaded6b6ae2f5d0ae2e91a0f0cd\",\n                \"sha256:d690a2ff49f6c3bc35336693c9924fe5916be3cc0503fe1ea6c7e2bf951409ee\",\n                \"sha256:e2317cf091c2e7f0dacdc2e72c693cc34403ca1f8e3807622d0bb653dc978616\",\n                \"sha256:f28e73cf18d37a413f7d5de35d024e6b98f14566a10d82100f9dc491a7d449f9\",\n                \"sha256:f2a778dd9bb3e4590dbe3bbac28e7c7134280c4ec97e3bf8678170ee58c67b21\",\n                \"sha256:f5a758252502b466b9c2b201ea397dae5a914336c987f3a76c3741a82d43c96e\",\n                \"sha256:fb4c33a404d9eff49a0cdc8ead0af6453f62f19e071b60d283f9dc05581e4134\"\n            ],\n            \"markers\": \"python_version &gt;= '2.7' and python_version != '3.2.*' and python_version != '3.3.*' and python_version != '3.0.*' and python_version != '3.1.*'\",\n            \"version\": \"==1.15.0\"\n        },\n        \"oauthlib\": {\n            \"hashes\": [\n                \"sha256:ac35665a61c1685c56336bda97d5eefa246f1202618a1d6f34fccb1bdd404162\",\n                \"sha256:d883b36b21a6ad813953803edfa563b1b579d79ca758fe950d1bc9e8b326025b\"\n            ],\n            \"version\": \"==2.1.0\"\n        },\n        \"pandas\": {\n            \"hashes\": [\n                \"sha256:11975fad9edbdb55f1a560d96f91830e83e29bed6ad5ebf506abda09818eaf60\",\n                \"sha256:12e13d127ca1b585dd6f6840d3fe3fa6e46c36a6afe2dbc5cb0b57032c902e31\",\n                \"sha256:1c87fcb201e1e06f66e23a61a5fea9eeebfe7204a66d99df24600e3f05168051\",\n                \"sha256:242e9900de758e137304ad4b5663c2eff0d798c2c3b891250bd0bd97144579da\",\n                \"sha256:26c903d0ae1542890cb9abadb4adcb18f356b14c2df46e4ff657ae640e3ac9e7\",\n                \"sha256:2e1e88f9d3e5f107b65b59cd29f141995597b035d17cc5537e58142038942e1a\",\n                \"sha256:31b7a48b344c14691a8e92765d4023f88902ba3e96e2e4d0364d3453cdfd50db\",\n                \"sha256:4fd07a932b4352f8a8973761ab4e84f965bf81cc750fb38e04f01088ab901cb8\",\n                \"sha256:5b24ca47acf69222e82530e89111dd9d14f9b970ab2cd3a1c2c78f0c4fbba4f4\",\n                \"sha256:647b3b916cc8f6aeba240c8171be3ab799c3c1b2ea179a3be0bd2712c4237553\",\n                \"sha256:66b060946046ca27c0e03e9bec9bba3e0b918bafff84c425ca2cc2e157ce121e\",\n                \"sha256:6efa9fa6e1434141df8872d0fa4226fc301b17aacf37429193f9d70b426ea28f\",\n                \"sha256:be4715c9d8367e51dbe6bc6d05e205b1ae234f0dc5465931014aa1c4af44c1ba\",\n                \"sha256:bea90da782d8e945fccfc958585210d23de374fa9294a9481ed2abcef637ebfc\",\n                \"sha256:d785fc08d6f4207437e900ffead930a61e634c5e4f980ba6d3dc03c9581748c7\",\n                \"sha256:de9559287c4fe8da56e8c3878d2374abc19d1ba2b807bfa7553e912a8e5ba87c\",\n                \"sha256:f4f98b190bb918ac0bc0e3dd2ab74ff3573da9f43106f6dba6385406912ec00f\",\n                \"sha256:f71f1a7e2d03758f6e957896ed696254e2bc83110ddbc6942018f1a232dd9dad\",\n                \"sha256:fb944c8f0b0ab5c1f7846c686bc4cdf8cde7224655c12edcd59d5212cd57bec0\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==0.23.4\"\n        },\n        \"pbr\": {\n            \"hashes\": [\n                \"sha256:1b8be50d938c9bb75d0eaf7eda111eec1bf6dc88a62a6412e33bf077457e0f45\",\n                \"sha256:b486975c0cafb6beeb50ca0e17ba047647f229087bd74e37f4a7e2cac17d2caa\"\n            ],\n            \"version\": \"==4.2.0\"\n        },\n        \"psycopg2-binary\": {\n            \"hashes\": [\n                \"sha256:04afb59bbbd2eab3148e6816beddc74348078b8c02a1113ea7f7822f5be4afe3\",\n                \"sha256:098b18f4d8857a8f9b206d1dc54db56c2255d5d26458917e7bcad61ebfe4338f\",\n                \"sha256:0bf855d4a7083e20ead961fda4923887094eaeace0ab2d76eb4aa300f4bbf5bd\",\n                \"sha256:197dda3ffd02057820be83fe4d84529ea70bf39a9a4daee1d20ffc74eb3d042e\",\n                \"sha256:278ef63afb4b3d842b4609f2c05ffbfb76795cf6a184deeb8707cd5ed3c981a5\",\n                \"sha256:3cbf8c4fc8f22f0817220891cf405831559f4d4c12c4f73913730a2ea6c47a47\",\n                \"sha256:4305aed922c4d9d6163ab3a41d80b5a1cfab54917467da8168552c42cad84d32\",\n                \"sha256:47ee296f704fb8b2a616dec691cdcfd5fa0f11943955e88faa98cbd1dc3b3e3d\",\n                \"sha256:4a0e38cb30457e70580903367161173d4a7d1381eb2f2cfe4e69b7806623f484\",\n                \"sha256:4d6c294c6638a71cafb82a37f182f24321f1163b08b5d5ca076e11fe838a3086\",\n                \"sha256:4f3233c366500730f839f92833194fd8f9a5c4529c8cd8040aa162c3740de8e5\",\n                \"sha256:5221f5a3f4ca2ddf0d58e8b8a32ca50948be9a43351fda797eb4e72d7a7aa34d\",\n                \"sha256:5c6ca0b507540a11eaf9e77dee4f07c131c2ec80ca0cffa146671bf690bc1c02\",\n                \"sha256:789bd89d71d704db2b3d5e67d6d518b158985d791d3b2dec5ab85457cfc9677b\",\n                \"sha256:7b94d29239efeaa6a967f3b5971bd0518d2a24edd1511edbf4a2c8b815220d07\",\n                \"sha256:89bc65ef3301c74cf32db25334421ea6adbe8f65601ea45dcaaf095abed910bb\",\n                \"sha256:89d6d3a549f405c20c9ae4dc94d7ed2de2fa77427a470674490a622070732e62\",\n                \"sha256:97521704ac7127d7d8ba22877da3c7bf4a40366587d238ec679ff38e33177498\",\n                \"sha256:a395b62d5f44ff6f633231abe568e2203b8fabf9797cd6386aa92497df912d9a\",\n                \"sha256:a6d32c37f714c3f34158f3fa659f3a8f2658d5f53c4297d45579b9677cc4d852\",\n                \"sha256:a89ee5c26f72f2d0d74b991ce49e42ddeb4ac0dc2d8c06a0f2770a1ab48f4fe0\",\n                \"sha256:b4c8b0ef3608e59317bfc501df84a61e48b5445d45f24d0391a24802de5f2d84\",\n                \"sha256:b5fcf07140219a1f71e18486b8dc28e2e1b76a441c19374805c617aa6d9a9d55\",\n                \"sha256:b86f527f00956ecebad6ab3bb30e3a75fedf1160a8716978dd8ce7adddedd86f\",\n                \"sha256:be4c4aa22ba22f70de36c98b06480e2f1697972d49eb20d525f400d204a6d272\",\n                \"sha256:c2ac7aa1a144d4e0e613ac7286dae85671e99fe7a1353954d4905629c36b811c\",\n                \"sha256:de26ef4787b5e778e8223913a3e50368b44e7480f83c76df1f51d23bd21cea16\",\n                \"sha256:e70ebcfc5372dc7b699c0110454fc4263967f30c55454397e5769eb72c0eb0ce\",\n                \"sha256:eadbd32b6bc48b67b0457fccc94c86f7ccc8178ab839f684eb285bb592dc143e\",\n                \"sha256:ecbc6dfff6db06b8b72ae8a2f25ff20fbdcb83cb543811a08f7cb555042aa729\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==2.7.5\"\n        },\n        \"pycparser\": {\n            \"hashes\": [\n                \"sha256:99a8ca03e29851d96616ad0404b4aad7d9ee16f25c9f9708a11faf2810f7b226\"\n            ],\n            \"version\": \"==2.18\"\n        },\n        \"pyjwt\": {\n            \"hashes\": [\n                \"sha256:30b1380ff43b55441283cc2b2676b755cca45693ae3097325dea01f3d110628c\",\n                \"sha256:4ee413b357d53fd3fb44704577afac88e72e878716116270d722723d65b42176\"\n            ],\n            \"version\": \"==1.6.4\"\n        },\n        \"python-dateutil\": {\n            \"hashes\": [\n                \"sha256:1adb80e7a782c12e52ef9a8182bebeb73f1d7e24e374397af06fb4956c8dc5c0\",\n                \"sha256:e27001de32f627c22380a688bcc43ce83504a7bc5da472209b4c70f02829f0b8\"\n            ],\n            \"version\": \"==2.7.3\"\n        },\n        \"pytz\": {\n            \"hashes\": [\n                \"sha256:a061aa0a9e06881eb8b3b2b43f05b9439d6583c206d0a6c340ff72a7b6669053\",\n                \"sha256:ffb9ef1de172603304d9d2819af6f5ece76f2e85ec10692a524dd876e72bf277\"\n            ],\n            \"version\": \"==2018.5\"\n        },\n        \"requests\": {\n            \"hashes\": [\n                \"sha256:63b52e3c866428a224f97cab011de738c36aec0185aa91cfacd418b5d58911d1\",\n                \"sha256:ec22d826a36ed72a7358ff3fe56cbd4ba69dd7a6718ffd450ff0e9df7a47ce6a\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==2.19.1\"\n        },\n        \"requests-oauthlib\": {\n            \"hashes\": [\n                \"sha256:8886bfec5ad7afb391ed5443b1f697c6f4ae98d0e5620839d8b4499c032ada3f\",\n                \"sha256:e21232e2465808c0e892e0e4dbb8c2faafec16ac6dc067dd546e9b466f3deac8\"\n            ],\n            \"version\": \"==1.0.0\"\n        },\n        \"requests-toolbelt\": {\n            \"hashes\": [\n                \"sha256:42c9c170abc2cacb78b8ab23ac957945c7716249206f90874651971a4acff237\",\n                \"sha256:f6a531936c6fa4c6cfce1b9c10d5c4f498d16528d2a54a22ca00011205a187b5\"\n            ],\n            \"version\": \"==0.8.0\"\n        },\n        \"six\": {\n            \"hashes\": [\n                \"sha256:70e8a77beed4562e7f14fe23a786b54f6296e34344c23bc42f07b15018ff98e9\",\n                \"sha256:832dc0e10feb1aa2c68dcc57dbb658f1c7e65b9b61af69048abc87a2db00a0eb\"\n            ],\n            \"version\": \"==1.11.0\"\n        },\n        \"sqlalchemy\": {\n            \"hashes\": [\n                \"sha256:72325e67fb85f6e9ad304c603d83626d1df684fdf0c7ab1f0352e71feeab69d8\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==1.2.10\"\n        },\n        \"urllib3\": {\n            \"hashes\": [\n                \"sha256:a68ac5e15e76e7e5dd2b8f94007233e01effe3e50e8daddf69acfd81cb686baf\",\n                \"sha256:b5725a0bd4ba422ab0e66e89e030c806576753ea3ee08554382c14e685d117b5\"\n            ],\n            \"markers\": \"python_version != '3.0.*' and python_version != '3.3.*' and python_version != '3.1.*' and python_version != '3.2.*' and python_version &lt; '4' and python_version &gt;= '2.6'\",\n            \"version\": \"==1.23\"\n        }\n    },\n    \"develop\": {}\n}\n</code></pre><p><code>Pipfile.lock</code> is Python's very own equivalent to <code>package-lock.json</code>. With <code>Pipfile.lock</code> present, future developers need only to type the command <code>pipenv install</code> to install the exact dependencies in your project with all the correct versions. What's more, Pipfile.lock is actually a must-have for <strong>Heroku</strong> development, which uses this file to wisely produce environments upon deployment.</p><p>What about updating all packages past their locked version, you might ask? Check out the output of <code>pipenv update</code>, which updates all packages to their latest, and updates the corresponding .lock file accordingly:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/2018-08-29_18-52-30.gif\" class=\"kg-image\"><figcaption>You had me at Snake emoji.</figcaption></figure><h2 id=\"when-to-use-conda-or-virtualenv\">When to Use Conda or Virtualenv</h2><p>If you're strictly in the data <em>science</em> profession, chances are that none of this nonsense interests you - you and all your friends are always working with the full Anaconda suite (which has its own similar environment manager), and you don't care for shipping products. You're a scientist, not some sort of blue collar data equivalent of manufacturing. </p><p>Even if you're engineer, <code>virtualenv</code> still has it's place. Take Lambda Functions in AWS for example: if you're looking to create a zip of dependencies to upload to your Lambda, it's much simpler to have those packages to live in your local working folder. </p><p>I'm sure you're itching to hear more on the topic of Python environment management, but the analytics say that 90% of readers have already bounced by this point. To the remaining 10%... you are all that I live for.</p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p>","url":"https://hackersandslackers.com/pipenv-python-environment-management/","uuid":"0d7b1982-a0a4-4e69-abdb-ecca53665ed3","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b848c058d5a814c505a70b6"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736d8","title":"The End-to-End Guide to Handling Forms in Flask","slug":"guide-to-building-forms-in-flask","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/08/forms@2x.jpg","excerpt":"The subtle art of consensually capturing personal data.","custom_excerpt":"The subtle art of consensually capturing personal data.","created_at_pretty":"15 August, 2018","published_at_pretty":"15 August, 2018","updated_at_pretty":"09 April, 2019","created_at":"2018-08-14T22:13:40.000-04:00","published_at":"2018-08-15T06:25:00.000-04:00","updated_at":"2019-04-08T23:17:31.000-04:00","meta_title":"The End-to-End Guide to Handling Forms in Flask | Hackers And Slackers","meta_description":"Learn how to build complex form logic in Flask using the WTForms Python library! Cover the backend logic as well as best practices for form Jinja templates.","og_description":"Learn how to build complex form logic in Flask using the WTForms Python library! Cover the backend logic as well as best practices for form Jinja templates.","og_image":"https://hackersandslackers.com/content/images/2018/08/forms@2x.jpg","og_title":"The End-to-End Guide to Building Forms in Flask","twitter_description":"Learn how to build complex form logic in Flask using the WTForms Python library! Cover the backend logic as well as best practices for form Jinja templates.","twitter_image":"https://hackersandslackers.com/content/images/2018/08/forms@2x.jpg","twitter_title":"The End-to-End Guide to Building Forms in Flask","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"},{"name":"#Building Flask Apps","slug":"building-flask-apps","description":"Python’s fast-growing and flexible microframework. Can handle apps as simple as API endpoints, to monoliths remininiscent of Django.","feature_image":"https://hackersandslackers.com/content/images/2019/03/flask-gettingstarted.jpg","meta_description":"Python’s fastest growing, most flexible, and perhaps most Pythonic framework.","meta_title":"Building Flask Apps","visibility":"internal"}],"plaintext":"Happy Tuesday everybody! To start this week hot, let's talk about something that\neverybody hates: forms. The only thing more painful than filling out a web form\nis creating one, much less a functional one with feedback. Listen, if you're\ninto creating pleasant form UI experiences, you're probably into some freaky\nshit. Call me.\n\nFlask's youth is an advantage in one regard, in that there are only so many\nlibraries available to handle any given task. In this case, there's only one:\nthe aptly named WTForms.\n\nIf you don't have an immediate pressing need to create a Flask form and feel\nlike ditching this post to check out Instagram, be my guest, but know this:\nhandling form authentication, data submission, and session management is the\npinnacle of app development. This weird data collection traditional we\nexperience every day actually touches on nearly all aspects of app development.\nYou could argue that he who creates forms is a harbinger of a golden age: a hero\nwho brings us to the pinnacle of Western technology. Then again, there's always\nInstagram.\n\nThe Gist of it All\nBefore laying down some code snippets for you to mindlessly copy+paste, it helps\nto understand conceptually what we're about to throw down.\n\nAt a minimum, creating a form has us working routes, form  models, and templates\n. Since you already understand the concept of MVC, that entire last sentence was\nprobably redundant, and I should probably just delete it as opposed to\ncontinuing to write this second sentence contemplating my own redundancy. Oh\nwell.\n\nWe'll keep our routes in app.py  for a compact little app.\n\nmyproject\n├─ app.py\n├─ config.py\n├─ forms.py\n├─ db.py\n├─ /static\n│  ├─ /src\n│  │  ├─ js\n│  │  └─ less\n│  └─ /dist\n│     ├─ js\n│     ├─ css\n│     └─ img\n└─ /templates\n   └─ layout.html\n   └─ index.html\n   └─ form.html\n\n\nHere's the game plan: our form, with all its fields, labels, and potential error\nmessages, will live in forms.py. app.py  will contain the logic of not only\nrouting to the page serving the form, but also validating user input, which\ncovers anything from error checking to session creation. \n\nform.html  will be the presentation layer template which will get loaded into \nindex.html  in this case. Both of those templates are wrapped by layout.html \nwhich is basically just metadata and shit you already know — we’ve been through\nthis. Let’s start off by creating our forms.py.\n\nWhat The Form\nWTForms  has a nice little monopoly over the Python form handling industry\ndating back to Django, so at least we aren't burdened with choices here. Set up\nyour environment and let's install everything we need:\n\npipenv shell\npip3 install Flask WTForms Flask-Login\n\n\nThat'll hold us over for now. In forms.py,  we're going to do two main imports:\n\nfrom wtforms import Form, StringField, PasswordField, validators, SubmitField, SelectField\n\nfrom wtforms.validators import ValidationError, DataRequired, Email, EqualTo, Length\n\n\nForms really boil down into these two things: types of input, and validation of\nsaid input. There are plenty more fields and validators available, but this is\nwhat we'd need for a user signup form. Guess what we're making. \n\nClassy as Form\nForms in your app will always be defined 1-to-1 with a Python class declaration.\nIt's kind of like working with models, except they're forms. Just wait until\nyour forms work with models.\n\nfrom wtforms import Form, StringField, PasswordField, validators, SubmitField, SelectField\nfrom wtforms.validators import ValidationError, DataRequired, Email, EqualTo, Length\n\n\nclass SignupForm(Form):\n    \"\"\"User Signup Form.\"\"\"\n\n    name = StringField('Name', [\n        validators.DataRequired(message=('Don\\'t be shy!'))\n    ])\n    email = StringField('Email', [\n        Length(min=6, message=(u'Little short for an email address?')),\n        Email(message=('That\\'s not a valid email address.')),\n        DataRequired(message=('That\\'s not a valid email address.'))\n    ])\n    password = PasswordField('Password', validators=[\n        DataRequired(message=\"Please enter a password.\"),\n    ])\n    confirm = PasswordField('Repeat Password', validators=[\n            EqualTo(password, message='Passwords must match.')\n            ])\n    website = StringField('Website')\n    submit = SubmitField('Register')\n\n    def validate_email(self, email):\n        \"\"\"Email validation.\"\"\"\n        user = User.query.filter_by(email=email.data).first()\n        if user is not None:\n            raise ValidationError('Please use a different email address.')\n\n\nAs expected, every variable child of our class is a field. Field types are\ndeclared immediately (such as StringField()) and accept a label (name of the\nfield) as well as validators, which are conditions which must be met for the\nfield to be considered valid. A single field can accept an infinite number of\nvalidators, which would come in handy if you're a stickler for password\nsecurity. As well as setting the validators, we also set the error message to\npass to the user for that particular field if they are to submit invalid\ninformation. Fields accept other parameters as well, such as placeholder text,\nif you're interested in that side of things\n[https://wtforms.readthedocs.io/en/stable/fields.html#the-field-base-class].\n\nSome validators are more sophisticated enough to handle heavy-lifting: note how \nEmail()  is a validator in itself which handles the nonsense of looking for an\n'@' symbol (or whatever it is PHP guys did in the 90's). There’s even a regex\nvalidator available if you want to go full pro-mode.\n\nHardcore Validation XXX\nYou'll notice the example provided contains a validate_email()  function to\ncheck the database for a user record match. We can basically write any custom\nlogic we want to validate forms this way, in case the event that the standard\nvalidators just don't cut it.\n\nForming the Actual Form\nAlright, it's that time. Jinja's form handling isn't as daunting as this next\nwall of text might seem, once you get in the groove of things:\n\n{% block content %}\n<div class=\"formwrapper\">\n  <form method=post>\n    <div class=\"name\">\n      {{ form.name(placeholder='Joe Blah') }} {{ form.name.label }}\n      {% if form.name.errors %}\n        <ul class=\"errors\">{% for error in form.name.errors %}<li>{{ error }}</li>{% endfor %}</ul>\n      {% endif %}\n    </div>\n    <div class=\"email\">\n      {{ form.email }} {{ form.email.label }}\n      {% if form.email.errors %}\n        <ul class=\"errors\">{% for error in form.email.errors %}<li>{{ error }}</li>{% endfor %}</ul>\n      {% endif %}\n    </div>\n    <div class=\"password\">\n      {{ form.password }} {{ form.password.label }}\n      {% if form.password.errors %}\n        <ul class=\"errors\">{% for error in form.password.errors %}<li>{{ error }}</li>{% endfor %}</ul>\n      {% endif %}\n    </div>\n    <div class=\"confirm\">\n      {{ form.confirm }} {{ form.confirm.label }}\n      {% if form.confirm.errors %}\n        <ul class=\"errors\">{% for error in form.password.errors %}<li>{{ error }}</li>{% endfor %}</ul>\n      {% endif %}\n    </div>\n    <div class=\"website\">\n      {{ form.website(placeholder='http://example.com') }} {{ form.website.label }}\n    </div>\n    <div class=\"submitbutton\">\n      <input id=\"submit\" type=\"submit\" value=\"Submit\">\n    </div>\n  </form>\n</div>\n\n{% for message in get_flashed_messages() %}\n<div class=\"alert alert-warning\">\n    <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\n    {{ message }}\n</div>\n{% endfor %}\n\n\nNotice that our form contains a method, but neither a destination nor an action.\nMore on that late.\n\nEach form field is pulling in three dynamic assets: the form itself, the display\nname, and a space reserved for error handling. This general layout is robust\nenough to handle returning multiple errors per field, which we obviously would\nprefer to keep in-line with the offending fields for UI purposes.\n\nAnother way of handling errors is by utilizing Flask's flash  module. A 'flash'\nis a temporary modal telling the user what they did wrong, which can be closed\nor simply expire after a number of seconds. We're using both forms of error\nhandling here for educational purposes, but you probably won't need to most of\nthe time.\n\nDrop Some Logic on These Fools\napp.py  contains the route to the form, which allows for both GET and POST \nmethods. Submitting a form in Flask cleverly routes the user to the page they're\nalready on. Depending on what the logic decides, the user will experience\neither: \n\n * Instant in-line errors, with no visible change of page.\n * A successful redirect to wherever they hoped the form would take them.\n\nfrom flask import Flask, url_for, render_template, Markup, redirect, request, flash\nfrom flask import session as login_session\nfrom forms import SignupForm\nimport config\nfrom models import User, users, login_manager\nfrom db import users_col\nimport logging\nimport sys\nimport json\n\n\napp = Flask(__name__, static_url_path='', static_folder=\"static\", template_folder=\"templates\")\ncompress = FlaskStaticCompress(app)\napp.config.from_object('config.Config')\n\n\n@app.route('/signup', methods=['GET', 'POST'])\ndef signup():\n    \"\"\"Signup Form.\"\"\"\n    signup_form = SignupForm()\n    if request.method == 'POST':\n        if signup_form.validate():\n            flash('Logged in successfully.')\n            return render_template('/dashboard.html', template=\"dashbord-template\")\n    return render_template('/signup.html', form=signup_form, template=\"form-page\")\n\n\nYou'll recognize SignupForm() as our good old buddy from forms.py  which has\nbeen imported here. Because the user submitted their form, they will experience\nthe page with everything that lives within if request.method == 'POST':  this\ntime around. Determining validation is as simple as the next line: if\nsignup_form.validate():. This one-liner will validate each field individually,\nand deliver the proper errors to the offending fields. This level of black magic\nsaves us a huge headache and actually means that creating additional forms in\nthe future won't be all that different from simply adjusting the class and\ntemplate we already made. All that negative form talk I dropped earlier was a\ntest. You passed.\n\nWhat happens next?\nAs you might infer from the conditional statements, the user will either\nsuccessfully complete the form and move on to the next page, or they might find\nthemselves in a Ancient Greek version of hell where they find themselves\nincorrectly filling out the same form forever. Sucks to suck.\n\nIf this were a real signup form, we'd handle user creation and database\ninteraction here as well. As great as that sounds, I'll save your time as I know\nyou still have an Instagram to check. Hats off to anybody who has made it\nthrough this rambling nonsense  - you deserve it.","html":"<p>Happy Tuesday everybody! To start this week hot, let's talk about something that everybody hates: forms. The only thing more painful than filling out a web form is creating one, much less a functional one with feedback. Listen, if you're into creating pleasant form UI experiences, you're probably into some freaky shit. Call me.</p><p>Flask's youth is an advantage in one regard, in that there are only so many libraries available to handle any given task. In this case, there's only one: the aptly named WTForms.</p><p>If you don't have an immediate pressing need to create a Flask form and feel like ditching this post to check out Instagram, be my guest, but know this: handling form authentication, data submission, and session management is the pinnacle of app development. This weird data collection traditional we experience every day actually touches on nearly all aspects of app development. You could argue that he who creates forms is a harbinger of a golden age: a hero who brings us to the pinnacle of Western technology. Then again, there's always Instagram.</p><h2 id=\"the-gist-of-it-all\">The Gist of it All</h2><p>Before laying down some code snippets for you to mindlessly copy+paste, it helps to understand conceptually what we're about to throw down.</p><p>At a minimum, creating a form has us working <strong>routes</strong>, form<strong> models</strong>, and <strong>templates</strong>. Since you already understand the concept of MVC, that entire last sentence was probably redundant, and I should probably just delete it as opposed to continuing to write this second sentence contemplating my own redundancy. Oh well.</p><p>We'll keep our routes in <code>app.py</code> for a compact little app.</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">myproject\n├─ app.py\n├─ config.py\n├─ forms.py\n├─ db.py\n├─ /static\n│  ├─ /src\n│  │  ├─ js\n│  │  └─ less\n│  └─ /dist\n│     ├─ js\n│     ├─ css\n│     └─ img\n└─ /templates\n   └─ layout.html\n   └─ index.html\n   └─ form.html\n</code></pre>\n<!--kg-card-end: markdown--><p>Here's the game plan: our form, with all its fields, labels, and potential error messages, will live in <code>forms.py</code>. <code>app.py</code><strong> </strong>will contain the logic of not only routing to the page serving the form, but also validating user input, which covers anything from error checking to session creation. </p><p><code>form.html</code> will be the presentation layer template which will get loaded into <code>index.html</code> in this case. Both of those templates are wrapped by <code>layout.html</code> which is basically just metadata and shit you already know — we’ve been through this. Let’s start off by creating our <code>forms.py</code><strong>.</strong></p><h2 id=\"what-the-form\">What The Form</h2><p><code>WTForms</code> has a nice little monopoly over the Python form handling industry dating back to Django, so at least we aren't burdened with choices here. Set up your environment and let's install everything we need:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">pipenv shell\npip3 install Flask WTForms Flask-Login\n</code></pre>\n<!--kg-card-end: markdown--><p>That'll hold us over for now. In <code>forms.py</code><strong>,</strong> we're going to do two main imports:</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">from wtforms import Form, StringField, PasswordField, validators, SubmitField, SelectField\n\nfrom wtforms.validators import ValidationError, DataRequired, Email, EqualTo, Length\n</code></pre>\n<!--kg-card-end: markdown--><p>Forms really boil down into these two things: types of input, and validation of said input. There are plenty more fields and validators available, but this is what we'd need for a user signup form. Guess what we're making. </p><h3 id=\"classy-as-form\">Classy as Form</h3><p>Forms in your app will always be defined 1-to-1 with a Python class declaration. It's kind of like working with models, except they're forms. Just wait until your forms work with models.</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">from wtforms import Form, StringField, PasswordField, validators, SubmitField, SelectField\nfrom wtforms.validators import ValidationError, DataRequired, Email, EqualTo, Length\n\n\nclass SignupForm(Form):\n    &quot;&quot;&quot;User Signup Form.&quot;&quot;&quot;\n\n    name = StringField('Name', [\n        validators.DataRequired(message=('Don\\'t be shy!'))\n    ])\n    email = StringField('Email', [\n        Length(min=6, message=(u'Little short for an email address?')),\n        Email(message=('That\\'s not a valid email address.')),\n        DataRequired(message=('That\\'s not a valid email address.'))\n    ])\n    password = PasswordField('Password', validators=[\n        DataRequired(message=&quot;Please enter a password.&quot;),\n    ])\n    confirm = PasswordField('Repeat Password', validators=[\n            EqualTo(password, message='Passwords must match.')\n            ])\n    website = StringField('Website')\n    submit = SubmitField('Register')\n\n    def validate_email(self, email):\n        &quot;&quot;&quot;Email validation.&quot;&quot;&quot;\n        user = User.query.filter_by(email=email.data).first()\n        if user is not None:\n            raise ValidationError('Please use a different email address.')\n</code></pre>\n<!--kg-card-end: markdown--><p>As expected, every variable child of our class is a field. Field types are declared immediately (such as StringField()) and accept a <em>label </em>(name of the field) as well as <em>validators</em>, which are conditions which must be met for the field to be considered valid. A single field can accept an infinite number of validators, which would come in handy if you're a stickler for password security. As well as setting the validators, we also set the error message to pass to the user for that particular field if they are to submit invalid information. Fields accept other parameters as well, such as placeholder text, if you're interested in <a href=\"https://wtforms.readthedocs.io/en/stable/fields.html#the-field-base-class\">that side of things</a>.</p><p>Some validators are more sophisticated enough to handle heavy-lifting: note how <em>Email()</em> is a validator in itself which handles the nonsense of looking for an '@' symbol (or whatever it is PHP guys did in the 90's). There’s even a regex validator available if you want to go full pro-mode.</p><h3 id=\"hardcore-validation-xxx\">Hardcore Validation XXX</h3><p>You'll notice the example provided contains a <strong>validate_email()</strong> function to check the database for a user record match. We can basically write any custom logic we want to validate forms this way, in case the event that the standard validators just don't cut it.</p><h2 id=\"forming-the-actual-form\">Forming the Actual Form</h2><p>Alright, it's that time. Jinja's form handling isn't as daunting as this next wall of text might seem, once you get in the groove of things:</p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">{% block content %}\n&lt;div class=&quot;formwrapper&quot;&gt;\n  &lt;form method=post&gt;\n    &lt;div class=&quot;name&quot;&gt;\n      {{ form.name(placeholder='Joe Blah') }} {{ form.name.label }}\n      {% if form.name.errors %}\n        &lt;ul class=&quot;errors&quot;&gt;{% for error in form.name.errors %}&lt;li&gt;{{ error }}&lt;/li&gt;{% endfor %}&lt;/ul&gt;\n      {% endif %}\n    &lt;/div&gt;\n    &lt;div class=&quot;email&quot;&gt;\n      {{ form.email }} {{ form.email.label }}\n      {% if form.email.errors %}\n        &lt;ul class=&quot;errors&quot;&gt;{% for error in form.email.errors %}&lt;li&gt;{{ error }}&lt;/li&gt;{% endfor %}&lt;/ul&gt;\n      {% endif %}\n    &lt;/div&gt;\n    &lt;div class=&quot;password&quot;&gt;\n      {{ form.password }} {{ form.password.label }}\n      {% if form.password.errors %}\n        &lt;ul class=&quot;errors&quot;&gt;{% for error in form.password.errors %}&lt;li&gt;{{ error }}&lt;/li&gt;{% endfor %}&lt;/ul&gt;\n      {% endif %}\n    &lt;/div&gt;\n    &lt;div class=&quot;confirm&quot;&gt;\n      {{ form.confirm }} {{ form.confirm.label }}\n      {% if form.confirm.errors %}\n        &lt;ul class=&quot;errors&quot;&gt;{% for error in form.password.errors %}&lt;li&gt;{{ error }}&lt;/li&gt;{% endfor %}&lt;/ul&gt;\n      {% endif %}\n    &lt;/div&gt;\n    &lt;div class=&quot;website&quot;&gt;\n      {{ form.website(placeholder='http://example.com') }} {{ form.website.label }}\n    &lt;/div&gt;\n    &lt;div class=&quot;submitbutton&quot;&gt;\n      &lt;input id=&quot;submit&quot; type=&quot;submit&quot; value=&quot;Submit&quot;&gt;\n    &lt;/div&gt;\n  &lt;/form&gt;\n&lt;/div&gt;\n\n{% for message in get_flashed_messages() %}\n&lt;div class=&quot;alert alert-warning&quot;&gt;\n    &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot;&gt;&amp;times;&lt;/button&gt;\n    {{ message }}\n&lt;/div&gt;\n{% endfor %}\n</code></pre>\n<!--kg-card-end: markdown--><p>Notice that our form contains a method, but neither a destination nor an action. More on that late.</p><p>Each form field is pulling in three dynamic assets: the form itself, the display name, and a space reserved for error handling. This general layout is robust enough to handle returning multiple errors per field, which we obviously would prefer to keep in-line with the offending fields for UI purposes.</p><p>Another way of handling errors is by utilizing Flask's <em>flash</em> module. A 'flash' is a temporary modal telling the user what they did wrong, which can be closed or simply expire after a number of seconds. We're using both forms of error handling here for educational purposes, but you probably won't need to most of the time.</p><h2 id=\"drop-some-logic-on-these-fools\">Drop Some Logic on These Fools</h2><p><code>app.py</code> contains the route to the form, which allows for both <strong>GET </strong>and <strong>POST</strong> methods. Submitting a form in Flask cleverly routes the user to the <em>page they're already on. </em>Depending on what the logic decides, the user will experience either: </p><ul><li>Instant in-line errors, with no visible change of page.</li><li>A successful redirect to wherever they hoped the form would take them.</li></ul><!--kg-card-begin: markdown--><pre><code class=\"language-python\">from flask import Flask, url_for, render_template, Markup, redirect, request, flash\nfrom flask import session as login_session\nfrom forms import SignupForm\nimport config\nfrom models import User, users, login_manager\nfrom db import users_col\nimport logging\nimport sys\nimport json\n\n\napp = Flask(__name__, static_url_path='', static_folder=&quot;static&quot;, template_folder=&quot;templates&quot;)\ncompress = FlaskStaticCompress(app)\napp.config.from_object('config.Config')\n\n\n@app.route('/signup', methods=['GET', 'POST'])\ndef signup():\n    &quot;&quot;&quot;Signup Form.&quot;&quot;&quot;\n    signup_form = SignupForm()\n    if request.method == 'POST':\n        if signup_form.validate():\n            flash('Logged in successfully.')\n            return render_template('/dashboard.html', template=&quot;dashbord-template&quot;)\n    return render_template('/signup.html', form=signup_form, template=&quot;form-page&quot;)\n</code></pre>\n<!--kg-card-end: markdown--><p>You'll recognize SignupForm() as our good old buddy from <code>forms.py</code> which has been imported here. Because the user submitted their form, they will experience the page with everything that lives within <code>if request.method == 'POST':</code> this time around. Determining validation is as simple as the next line: <code>if signup_form.validate():</code>. This one-liner will validate each field individually, and deliver the proper errors to the offending fields. This level of black magic saves us a huge headache and actually means that creating additional forms in the future won't be all that different from simply adjusting the class and template we already made. All that negative form talk I dropped earlier was a test. You passed.</p><h3 id=\"what-happens-next\">What happens next?</h3><p>As you might infer from the conditional statements, the user will either successfully complete the form and move on to the next page, or they might find themselves in a Ancient Greek version of hell where they find themselves incorrectly filling out the same form forever. Sucks to suck.</p><p>If this were a real signup form, we'd handle user creation and database interaction here as well. As great as that sounds, I'll save your time as I know you still have an Instagram to check. Hats off to anybody who has made it through this rambling nonsense  - you deserve it.</p>","url":"https://hackersandslackers.com/guide-to-building-forms-in-flask/","uuid":"7cb4b740-9bda-4d96-a28d-83487d6581ce","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b738c54c43a944face384b1"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736c6","title":"Using MongoDB Atlas as your Flask Database","slug":"using-mongodb-atlas-as-your-flask-database","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/flaskpymongo@2x.jpg","excerpt":"Since you prefer using Python and Flask, I’ll assume we both prefer enjoyable dev.","custom_excerpt":"Since you prefer using Python and Flask, I’ll assume we both prefer enjoyable dev.","created_at_pretty":"28 July, 2018","published_at_pretty":"31 July, 2018","updated_at_pretty":"07 March, 2019","created_at":"2018-07-28T13:42:54.000-04:00","published_at":"2018-07-31T16:59:00.000-04:00","updated_at":"2019-03-07T01:02:11.000-05:00","meta_title":"Using MongoDB Atlas as your Flask Database | Hackers And Slackers","meta_description":"MongoDB Atlas and Stitch are easy to use, making Mongo’s cloud offering a natural choice for quick Flask-based applications.","og_description":"MongoDB Atlas and Stitch are easy to use, making Mongo’s cloud offering a natural choice for quick Flask-based applications.","og_image":"https://hackersandslackers.com/content/images/2019/03/flaskpymongo@2x.jpg","og_title":"Using MongoDB Atlas as your Flask Database","twitter_description":"MongoDB Atlas and Stitch are easy to use, making Mongo’s cloud offering a natural choice for quick Flask-based applications.","twitter_image":"https://hackersandslackers.com/content/images/2019/03/flaskpymongo@2x.jpg","twitter_title":"Using MongoDB Atlas as your Flask Database","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"NoSQL","slug":"nosql","description":"Schemaless data for gunslingers. Heavily focused on databases such as MongoDB, as well as hosting said databases as cloud instances.","feature_image":null,"meta_description":"Schemaless data for gunslingers. Heavily focused on databases such as MongoDB, as well as hosting said databases as cloud instances.","meta_title":"NoSQL | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"},{"name":"#Building Flask Apps","slug":"building-flask-apps","description":"Python’s fast-growing and flexible microframework. Can handle apps as simple as API endpoints, to monoliths remininiscent of Django.","feature_image":"https://hackersandslackers.com/content/images/2019/03/flask-gettingstarted.jpg","meta_description":"Python’s fastest growing, most flexible, and perhaps most Pythonic framework.","meta_title":"Building Flask Apps","visibility":"internal"}],"plaintext":"It's been roughly a year since MongoDB launched their Stitch: a \"back-end as a\nservice\" cloud offering. I've been tinkering with Mongo on the cloud ever\nsince... Alright fine, \"tinkering with\"  may better be described as\"accidentally\nbecame dependent on it after developing new features in production\nenvironments,\" but I can't really complain thus-far. If you're not familiar, \nMongoDB Atlas  is MongoDB's cloud-hosted database offering; that is to say, the\nsame as any other MongoDB database, except very expensive.\n\nThe jury is still out on how MongoDB Atlas  and its counterpart Stitch  will fit\ninto the picture of next generation cloud services. That said, I can vouch that\nMongo products are simply fun to use  for developers, especially when compared\nto  traditional rigid alternatives. Since I would also group Python  and Flask \nin the 'fun to use' category, selecting MongoDB as the database for your Flask\napp makes a lot of sense.\n\nFor this tutorial we're going to set up a simple app where users can submit\ninformation via a form to MongoDB. After writing to our database, we'll query\nthe db to see the results. The result will be a Flask app with the following\nfile structure:\n\nmy-flask-project\n├── templates/\n├── static/\n├── app.py\n├── config.py\n├── currenttime.py\n└── form.py\n\n\nConnect to your Database with PyMongo\nPyMongo  is Python's go-to library for interacting with MongoDB. \n\nWe'll keep all database connection logic within db.py. After importing PyMongo,\nmost of the configuration we need to handle happens in a single line containing\nour MongoDB URI: the massive string which contains our DB location, creds, and\nauthorization DB. The string is broken down like this:\n\nmongodb+srv://[username]:[password]@[projectname]-gktww.gcp.mongodb.net/[authDB]\n\n\nAuthenticate with a [username]  and [password] you’ve set up in whichever\ndatabase handles authentication for your MongoDB instance (this is also what \n[authDB]  is referring to). \n\n[projectname]  is the unique name of your cloud instance. The rest of the URI\ncontains some nonsense, including the host of your particular instance (I’m\nusing Google Cloud, hence the .gcp in the URI). Most of this information can be\nfound just by jumping on mongodb.com [https://www.mongodb.com/]  and\ninvestigating your URI via the \"connect\" popup:\n\nThat should make things a bit easier.Now we can set up our connection:\n\nimport pymongo\n\nmongo = pymongo.MongoClient('mongodb+srv://username:password@hackerdata-gktww.gcp.mongodb.net/admin', maxPoolSize=50, connect=False)\n\n\nNote that we intentionally set the connection to False. Otherwise, we're going\nto find ourselves in a hell of managing open connections every time we interact\nwith the DB.\n\nSpeaking of the DB, we need to specify which database and collection we want to\ninteract with. This brings our config file to something as follows:\n\nimport pymongo\n\nmongo = pymongo.MongoClient('mongodb+srv://username:password@myInstance-gktww.gcp.mongodb.net/admin', maxPoolSize=50, connect=False)\n\ndb = pymongo.database.Database(mongo, 'mydatabase')\ncol = pymongo.collection.Collection(db, 'mycollection')\n\n\nLastly, if you'd like to access, say, all the objects inside of a collection (or\nsimilar query), we'll just need to add a few lines line to ensure we're reading\nthe collection's data:\n\nimport pymongo\nfrom bson.json_util import dumps\nimport json\n\nmongo = pymongo.MongoClient('mongodb+srv://username:password@myInstance-gktww.gcp.mongodb.net/admin', maxPoolSize=50, connect=False)\n\ndb = pymongo.database.Database(mongo, 'mydatabase')\ncol = pymongo.collection.Collection(db, 'mycollection')\n\ncol_results = json.loads(dumps(col.find().limit(5).sort(\"time\", -1)))\n\n\nRemember that Mongo returns BSON objects as opposed to JSON objects, which isn't\nvery useful for our purposes. To alleviate this we'll do a messy little dance to\nconvert Mongo's BSON into a string, and convert this to JSON using json.dumps().\n\nNote: the need to do this may have been something changed in recent versions of\nMongo, as I have older application functioning where this wasn't the case.\n¯\\_(ツ)_/¯.\n\nCreating a Form\nHeading over to form.py, we just need to set up a simple single-field form for\nusers to submit their URLs. For the sake of Python, let's say we're only\naccepting URLs for Jupyter noteboooks:\n\nfrom wtforms import Form, StringField, validators\nfrom wtforms.validators import DataRequired, Regexp\n\nclass myForm(Form):\n    \"\"\"Homepage form.\"\"\"\n    PlotlyURL = StringField('Provide a raw .ipynb URL from Github',\n    validators=[\n            DataRequired(),\n            Regexp(\".*\\.ipynb$\",\n            message=\"Please provide a URL ending in ipynb\"),\n          ])\n\n\nWe could have an entire tutorial just about Flask's WTForms\n[http://flask.pocoo.org/docs/1.0/patterns/wtforms/], but let's stay on topic\n and move on to currenttime.py.\n\nAdding Time Metadata\nIn a lot of cases where we store information to a database, we at least want to\nadd certain metadata such as the time something was added. This allows us to\narrange results by most recently updated, which we'll be doing in this example.\n\nfrom datetime import datetime, timezone\n\ndef getTime():\n    \"\"\"Get user's current time\"\"\"\n    rightnow = datetime.today()\n    return rightnow\n\ndef getPrettyTime():\n    \"\"\"Get user's pretty current time\"\"\"\n    rightnow = datetime.today()\n    prettytime = rightnow.ctime()\n    return prettytime\n\nyourtime = getTime()\nprettytime = getPrettyTime()\n\n\nThe variable yourtime  will be a datetime string representing the local time of\nthe user creating a new record. We will use this value to sort the queried\nresults by time. On the contrary,prettytime  will be the same time, only\nformatted in a way that is readable to humans.\n\nPutting the Pieces Together\nFinally we get to move on app.py and get this thing moving. We'll initiate our\napp by importing the necessary libraries, as well as the scripts we just\ncreated:\n\nfrom flask import Flask, render_template, Markup, request, redirect\nfrom config import col, col_results\nimport requests\nfrom form import myForm\nfrom flask_static_compress import FlaskStaticCompress\nfrom currenttime import yourtime, prettytime\nimport logging\n\n\nNote that we need to import from the DB config we set earlier is the \"col\"\nvariable; we'll only be interacting directly with the collection we want to\nmodify, and the rest is assumed within the config file itself. Now let's build a\nroute for our homepage that does two things:\n\n * Allows users to submit a URL via the simple form we created\n * Displays all previous searches by all users.\n\nfrom flask import Flask, render_template, Markup, request, redirect\nfrom config import col, col_results\nimport requests\nfrom form import myForm\nfrom flask_static_compress import FlaskStaticCompress\nfrom currenttime import yourtime, prettytime\nimport logging\n\n@app.route('/', methods=['GET', 'POST', 'OPTIONS'])\ndef home():\n    \"\"\"Landing page.\"\"\"\n    recent_searches = list(col_results)\n    return render_template('/index.html', form=myForm(), recents=recent_searches, template=\"home-template\")\n\n\nThere's only two significant lines here, but let's break them down piece by\npiece.\n\nrecent_searches\nFirst we set a recent_searches  variable which is essentially a query against\nour collection to retrieve a list of previous searches. We ask that these be\nreturned as a list()  upfront. Typically the find() method would contain the\nconstraints of our query, but we're simply asking to return all  results in the\ncollection, with a limit()  up to 5. Finally, we sort()  the results by the\nfield we refer to as 'time' is descending order, as noted by the -1 argument.\n\nThis is all probably very difficult to visualize without a graphic. Here's a\nsnapshot of the collection we're defining with dummy data added:\n\nSee why we need to differentiate \"time\" and \"prettytime\"?render_template\nWe already know [https://hackersandslackers.com/serving-static-assets-in-flask/] \n the basics of serving templates and assets in Flask, so it shouldn't be too\ndifficult to break down the last line in our route:\n\n * '/index.html'  specifies the base template we'll be serving up.\n * form=myForm()  passes the form class we created earlier to the form partial\n   we're including as part of the index page.\n * recents=recent_searches  passes the query of previous searches to the\n   template, with which we can build a widget.\n * template=\"home-template\" is a simple variable passed which we'll utilize as a\n   class on the page we're loading.\n\nThe Result\nFrom everything we've completed, you should be expecting to see a somewhat\nworthless page where users can submit links via a form, simply to see results\nposted by previous posters. If we expand on this idea just a bit, we can see how\nsomething so simple can actually be extended to a full product: \n\n> Planet Jupyter [https://planetjupyter.com]\nStyle your Jupyter Notebooks.\n\n\nPlanet Jupyter is demo product we built at H&S to style Jupyter notebooks.\nPerhaps 60% of the logic behind Planet Jupyter is the simple DB interactions we\njust covered, with the rest being added flair.\n\nThis is not a shameless plug for the barely functioning toys we've built, mind\nyou, but rather an example of simple DB interactions using Flask can be easily\nextensible into relevant, useful, products.\n\nWe hope you’ve found this tutorial to be useful!","html":"<p>It's been roughly a year since MongoDB launched their <strong>Stitch: </strong>a \"back-end as a service\" cloud offering. I've been tinkering with Mongo on the cloud ever since... Alright fine, <em>\"tinkering with\"</em> may better be described as  <em>\"accidentally became dependent on it after developing new features in production environments,\" </em>but I can't really complain thus-far. If you're not familiar, <strong>MongoDB Atlas</strong> is MongoDB's cloud-hosted database offering; that is to say, the same as any other MongoDB database, except very expensive.</p><p>The jury is still out on how MongoDB <strong>Atlas</strong> and its counterpart <strong>Stitch</strong> will fit into the picture of next generation cloud services. That said, I can vouch that Mongo products are simply <em>fun to use</em> for developers, especially when compared to  traditional rigid alternatives. Since I would also group <em>Python</em> and <em>Flask</em> in the 'fun to use' category, selecting MongoDB as the database for your Flask app makes a lot of sense.</p><p>For this tutorial we're going to set up a simple app where users can submit information via a form to MongoDB. After writing to our database, we'll query the db to see the results. The result will be a Flask app with the following file structure:</p><pre><code class=\"language-shell\">my-flask-project\n├── templates/\n├── static/\n├── app.py\n├── config.py\n├── currenttime.py\n└── form.py\n</code></pre>\n<h2 id=\"connect-to-your-database-with-pymongo\">Connect to your Database with PyMongo</h2><p><strong>PyMongo</strong> is Python's go-to library for interacting with MongoDB. </p><p>We'll keep all database connection logic within <strong>db.py</strong>. After importing PyMongo, most of the configuration we need to handle happens in a single line containing our MongoDB URI: the massive string which contains our DB location, creds, and authorization DB. The string is broken down like this:</p><pre><code class=\"language-shell\">mongodb+srv://[username]:[password]@[projectname]-gktww.gcp.mongodb.net/[authDB]\n</code></pre>\n<p>Authenticate with a <strong>[username]</strong> and <strong>[password] </strong>you’ve set up in whichever database handles authentication for your MongoDB instance (this is also what<strong> [authDB]</strong> is referring to). </p><p><strong>[projectname]</strong> is the unique name of your cloud instance. The rest of the URI contains some nonsense, including the host of your particular instance (I’m using Google Cloud, hence the .gcp in the URI). Most of this information can be found just by jumping on <a href=\"https://www.mongodb.com/\">mongodb.com</a> and investigating your URI via the \"connect\" popup:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-1.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/Screen-Shot-2018-07-30-at-9.46.42-PM.png\" class=\"kg-image\"><figcaption>That should make things a bit easier.</figcaption></figure><p>Now we can set up our connection:</p><pre><code class=\"language-python\">import pymongo\n\nmongo = pymongo.MongoClient('mongodb+srv://username:password@hackerdata-gktww.gcp.mongodb.net/admin', maxPoolSize=50, connect=False)\n</code></pre>\n<p>Note that we intentionally set the connection to <strong>False. </strong>Otherwise, we're going to find ourselves in a hell of managing open connections every time we interact with the DB.</p><p>Speaking of the DB, we need to specify which database and collection we want to interact with. This brings our config file to something as follows:</p><pre><code class=\"language-python\">import pymongo\n\nmongo = pymongo.MongoClient('mongodb+srv://username:password@myInstance-gktww.gcp.mongodb.net/admin', maxPoolSize=50, connect=False)\n\ndb = pymongo.database.Database(mongo, 'mydatabase')\ncol = pymongo.collection.Collection(db, 'mycollection')\n</code></pre>\n<p>Lastly, if you'd like to access, say, all the objects inside of a collection (or similar query), we'll just need to add a few lines line to ensure we're reading the collection's data:</p><pre><code class=\"language-python\">import pymongo\nfrom bson.json_util import dumps\nimport json\n\nmongo = pymongo.MongoClient('mongodb+srv://username:password@myInstance-gktww.gcp.mongodb.net/admin', maxPoolSize=50, connect=False)\n\ndb = pymongo.database.Database(mongo, 'mydatabase')\ncol = pymongo.collection.Collection(db, 'mycollection')\n\ncol_results = json.loads(dumps(col.find().limit(5).sort(&quot;time&quot;, -1)))\n</code></pre>\n<p>Remember that Mongo returns BSON objects as opposed to JSON objects, which isn't very useful for our purposes. To alleviate this we'll do a messy little dance to convert Mongo's BSON into a string, and convert this to JSON using <strong>json.dumps()</strong>.</p><p><strong>Note: </strong>the need to do this may have been something changed in recent versions of Mongo, as I have older application functioning where this wasn't the case. ¯\\_(ツ)_/¯.</p><h2 id=\"creating-a-form\">Creating a Form</h2><p>Heading over to <strong>form.py, </strong>we just need to set up a simple single-field form for users to submit their URLs. For the sake of Python, let's say we're only accepting URLs for Jupyter noteboooks:</p><pre><code class=\"language-python\">from wtforms import Form, StringField, validators\nfrom wtforms.validators import DataRequired, Regexp\n\nclass myForm(Form):\n    &quot;&quot;&quot;Homepage form.&quot;&quot;&quot;\n    PlotlyURL = StringField('Provide a raw .ipynb URL from Github',\n    validators=[\n            DataRequired(),\n            Regexp(&quot;.*\\.ipynb$&quot;,\n            message=&quot;Please provide a URL ending in ipynb&quot;),\n          ])\n</code></pre>\n<p>We could have an entire tutorial just about Flask's WTF<a href=\"http://flask.pocoo.org/docs/1.0/patterns/wtforms/\">orms</a>, but let's stay on topic  and move on to <strong>currenttime.py.</strong></p><h2 id=\"adding-time-metadata\">Adding Time Metadata</h2><p>In a lot of cases where we store information to a database, we at least want to add certain metadata such as the time something was added. This allows us to arrange results by most recently updated, which we'll be doing in this example.</p><pre><code class=\"language-python\">from datetime import datetime, timezone\n\ndef getTime():\n    &quot;&quot;&quot;Get user's current time&quot;&quot;&quot;\n    rightnow = datetime.today()\n    return rightnow\n\ndef getPrettyTime():\n    &quot;&quot;&quot;Get user's pretty current time&quot;&quot;&quot;\n    rightnow = datetime.today()\n    prettytime = rightnow.ctime()\n    return prettytime\n\nyourtime = getTime()\nprettytime = getPrettyTime()\n</code></pre>\n<p>The variable <strong>yourtime</strong> will be a datetime string representing the local time of the user creating a new record. We will use this value to sort the queried results by time. On the contrary,  <strong>prettytime</strong> will be the same time, only formatted in a way that is readable to humans.</p><h2 id=\"putting-the-pieces-together\">Putting the Pieces Together</h2><p>Finally we get to move on <strong>app.py </strong>and get this thing moving. We'll initiate our app by importing the necessary libraries, as well as the scripts we just created:</p><pre><code class=\"language-python\">from flask import Flask, render_template, Markup, request, redirect\nfrom config import col, col_results\nimport requests\nfrom form import myForm\nfrom flask_static_compress import FlaskStaticCompress\nfrom currenttime import yourtime, prettytime\nimport logging\n</code></pre>\n<p>Note that we need to import from the DB config we set earlier is the \"col\" variable; we'll only be interacting directly with the collection we want to modify, and the rest is assumed within the config file itself. Now let's build a route for our homepage that does two things:</p><ul><li>Allows users to submit a URL via the simple form we created</li><li>Displays all previous searches by all users.</li></ul><pre><code class=\"language-python\">from flask import Flask, render_template, Markup, request, redirect\nfrom config import col, col_results\nimport requests\nfrom form import myForm\nfrom flask_static_compress import FlaskStaticCompress\nfrom currenttime import yourtime, prettytime\nimport logging\n\n@app.route('/', methods=['GET', 'POST', 'OPTIONS'])\ndef home():\n    &quot;&quot;&quot;Landing page.&quot;&quot;&quot;\n    recent_searches = list(col_results)\n    return render_template('/index.html', form=myForm(), recents=recent_searches, template=&quot;home-template&quot;)\n</code></pre>\n<p>There's only two significant lines here, but let's break them down piece by piece.</p><h3 id=\"recent_searches\">recent_searches</h3><p>First we set a <strong>recent_searches</strong> variable which is essentially a query against our collection to retrieve a list of previous searches. We ask that these be returned as a <strong>list()</strong> upfront. Typically the <strong>find() </strong>method would contain the constraints of our query, but we're simply asking to return <em>all</em> results in the collection, with a <strong>limit()</strong> up to 5. Finally, we <strong>sort()</strong> the results by the field we refer to as 'time' is descending order, as noted by the -1 argument.</p><p>This is all probably very difficult to visualize without a graphic. Here's a snapshot of the collection we're defining with dummy data added:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/Screen-Shot-2018-07-31-at-11.08.44-AM.png\" class=\"kg-image\"><figcaption>See why we need to differentiate \"time\" and \"prettytime\"?</figcaption></figure><h3 id=\"render_template\">render_template</h3><p>We <a href=\"https://hackersandslackers.com/serving-static-assets-in-flask/\">already know</a> the basics of serving templates and assets in Flask, so it shouldn't be too difficult to break down the last line in our route:</p><ul><li><strong>'/index.html'</strong> specifies the base template we'll be serving up.</li><li><strong>form=myForm()</strong> passes the form class we created earlier to the form partial we're including as part of the index page.</li><li><strong>recents=recent_searches</strong> passes the query of previous searches to the template, with which we can build a widget.</li><li><strong>template=\"home-template\" </strong>is a simple variable passed which we'll utilize as a class on the page we're loading.</li></ul><h2 id=\"the-result\">The Result</h2><p>From everything we've completed, you should be expecting to see a somewhat worthless page where users can submit links via a form, simply to see results posted by previous posters. If we expand on this idea just a bit, we can see how something so simple can actually be extended to a full product: </p><blockquote class=\"embedly-card\" data-card-controls=\"0\"><h4><a href=\"https://planetjupyter.com\">Planet Jupyter</a></h4><p>Style your Jupyter Notebooks.</p></blockquote>\n<script async src=\"//cdn.embedly.com/widgets/platform.js\" charset=\"UTF-8\"></script><p>Planet Jupyter is demo product we built at H&amp;S to style Jupyter notebooks. Perhaps 60% of the logic behind Planet Jupyter is the simple DB interactions we just covered, with the rest being added flair.</p><p>This is not a shameless plug for the barely functioning toys we've built, mind you, but rather an example of simple DB interactions using Flask can be easily extensible into relevant, useful, products.</p><p>We hope you’ve found this tutorial to be useful!</p>","url":"https://hackersandslackers.com/using-mongodb-atlas-as-your-flask-database/","uuid":"e8c92cbd-6845-45b5-acfc-a744810eafcd","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b5cab1e2189c353565a2adf"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736c2","title":"Serving Frontend Assets in Flask","slug":"serving-static-assets-in-flask","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/flaskstatic.jpg","excerpt":"When Python developers manage presentation layers.","custom_excerpt":"When Python developers manage presentation layers.","created_at_pretty":"23 July, 2018","published_at_pretty":"23 July, 2018","updated_at_pretty":"05 April, 2019","created_at":"2018-07-22T23:56:52.000-04:00","published_at":"2018-07-23T06:22:21.000-04:00","updated_at":"2019-04-04T22:10:24.000-04:00","meta_title":"Serving Frontend Assets in Flask | Hackers And Slackers","meta_description":"flask_static_compress is a library for compressing flask assets. It can be considered to be a Python equivalent to Gulp in the context of asset compression.","og_description":"flask_static_compress is a library for compressing flask assets. It can be considered to be a Python equivalent to Gulp in the context of asset compression.","og_image":"https://hackersandslackers.com/content/images/2019/03/flaskstatic.jpg","og_title":"Serving Frontend Assets in Flask","twitter_description":"flask_static_compress is a library for compressing flask assets. It can be considered to be a Python equivalent to Gulp in the context of asset compression.","twitter_image":"https://hackersandslackers.com/content/images/2019/03/flaskstatic.jpg","twitter_title":"Serving Frontend Assets in Flask","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},{"name":"Frontend","slug":"frontend","description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","feature_image":null,"meta_description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","meta_title":"Frontend Development | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"},{"name":"#Building Flask Apps","slug":"building-flask-apps","description":"Python’s fast-growing and flexible microframework. Can handle apps as simple as API endpoints, to monoliths remininiscent of Django.","feature_image":"https://hackersandslackers.com/content/images/2019/03/flask-gettingstarted.jpg","meta_description":"Python’s fastest growing, most flexible, and perhaps most Pythonic framework.","meta_title":"Building Flask Apps","visibility":"internal"}],"plaintext":"If you're familiar with Django (or Python to any extent), you've probably\naccepted the concept of what Python guys refer to as \"static assets.\" Let's take\na moment to consider this: at some point in Django's conception a design\ndecision was made: all JavaScript, CSS, or  any assets pertaining to the\npresentation layer  belong tucked away into an isolated corner of the framework.\nAlas, it was decreed: henceforward, only two types of code exist in the\nuniverse: Python, and not-Python. Anything that isn't Python is simply a\n\"static\" asset to be dealt with either locally or via a CDN somewhere. \n\nThe implied mindset is both somewhat absurd yet also unsurprising. It's easy to\nimagine a couple of backend nerds nonchalantly writing off frontend development\nas a concept  to be stuck in a single folder. You know, all those things which\nmake an app an app? Like, anything visible to a user? These are simply\nthings-to-be-dealt-with when the frontend guys are ready with their \"make it\npretty\" nonsense. Screw it, throw it all in the /static  folder. We accept this\ndistinction to this day with little thought. Flask has carried over the same\nterminology and concept of a \"static\" folder, so this amusing cultural relic is\nhere to stay.\n\nAnyhow, we're here today to help you serve those beautiful assets of yours, as\nstatic as they may be. We'll do so by exploring the top-two libraries available\nto us: Flask-Static-Compress, and Flask-Assets.\n\nApplication Structure For Flask Apps with Frontend\nBest practices aside, we'll start with the most straightforward project\nstructure for a Flask web app. Let's work with this structure:\n\nmyproject\n├─ /static\n│  └─ /js\n│  └─ /less\n│  └─ /img\n│  └─ /build\n├─ /templates\n└─ app.py\n\n\nAll the Python we need is going to sit in a plump little app.py  file. \n\nTemplates  hold the same concept as they do to equivalent frameworks such as\nExpress: this is where we contain pages, partials, and layouts.  Flask's default\n Jinja2  templating engine has personally served me well enough to never\ninvestigate an alternative.\n\n/Static is where we'll store the raw  source  files for things like preprocessed\nstylesheets and JavaScript. At runtime, these sources files will be compressed\nand stored elsewhere in a production setting, such as that nifty /build  folder\nwe created (or feel free to call it /dist, whatever, it's your party man). \n\nIt's best practice to serve these from a CDN at runtime, but whatever.\n\nIn contrast to NodeJS apps, things like images and fonts are stored in the\n/static folder as well. This distinguishes Python's concept of /static  from,\nsay, another framework's concept of /src: instead of being a folder of only\nsource code, we pretty much have a folder of all that shit which isn't Python. \nAnd we've come full circle.\n\nCreating The Flask App Object\nfrom flask import Flask, url_for, render_template, request, Response\n\napp = Flask(__name__, static_folder=\"static\", template_folder=\"templates\")\n\n\nWe initiate our app on line 4 with app = Flask().  We create our app with three\nparameters/attributes:\n\n * __name__: Now that I think about it, I've never actually considered what this\n   first parameter is doing. Just know that you need it,\n * static_folder: Specifies the name of the folder where static assets will be\n   served. This is based on where your app believes the root folder lives.\n   Because our app is a single directory, it knows that /static  is in the\n   current directory.\n * template_folder: Same as above, but contains Jinja2 templates, AKA the files\n   which become HTML.\n\nIt's important to reiterate that these folders default to being relative to the\ncurrent location of app.py.  If we want to change this behavior, we can pass \ninstance_path=/path/to/desired/dir/  to override this behavior.\n\nMethod 1: Flask-Static-Compress\nThere's more than one way to skin a cat, and there's certainly more than one\nlibrary or philosophy for serving pages and styles in Flask. \nflask_static_compress is one such library, which we'll include in app.py:  \n\nfrom flask import Flask, url_for, render_template, request, Response\nfrom flask_static_compress import FlaskStaticCompress\n\n\nflask_static_compress [https://github.com/alanhamlett/flask-static-compress]  is\na cool library for compressing and joining assets together. If you've ever used\nGulp, it achieves some of the common tasks Gulp might, but with a MUCH different\nphilosophy. Some key differences are:\n\n * The ability to served compressed assets individually, as opposed to one giant\n   site bundle.\n * Never needing to explicitly fun a build command to create files served at\n   runtime.\n\nBefore serving any assets, we'll need a landing page for our app. While still in\n app.py,  we need to set a route for anybody who visits our site:\n\nfrom flask import Flask, url_for, render_template, request, Response\nfrom flask_static_compress import FlaskStaticCompress\n\napp = Flask(__name__, static_folder=\"static\", template_folder=\"templates\")\n\n@app.route('/', methods=['GET'])\ndef home():\n    \"\"\"Landing page.\"\"\"\n    return render_template('/index.html', title=\"Lame Site\")\n\n\nOur route listens for traffic hitting \"/\" (our root directory) and kindly serves\nthem the page index.html  as you might expect. Because we set the value of \ntemplates_folder  just now, Flask knows to serve a file living in /\ntemplates/index.html. \n\nIf you need some pointers on creating basic templates in Flask in which to load\nyour frontend assets, I'd suggest taking a look back at the previous post.\n\nFrontend YOLO Swag\nBack to your project, make .less  file and a .js  file in the appropriate\nplaces:\n\nmyproject\n├─ /build\n├─ /static\n│  └─ js\n│  │  └─ main.js\n│  └─ less\n│  │  └─ style.js\n│  └─ img\n├─ /templates\n│  └─ layout.html\n│  └─ index.html\n└─ app.py\n\n\nUse these files to brand your site accordingly. Add some images, memes,\npropaganda, viruses, etc. Whatever your heart desires.\n\nBack in app.py  we need to finish configuring our library:\n\nfrom flask import Flask, url_for, render_template, request, Response\nfrom flask_static_compress import FlaskStaticCompress\n\napp = Flask(__name__)\napp.config['COMPRESSOR_DEBUG'] = app.config.get('DEBUG')\napp.config['COMPRESSOR_STATIC_PREFIX'] = 'static'\napp.config['COMPRESSOR_OUTPUT_DIR'] = 'build'\napp.static_folder = 'static'\ncompress = FlaskStaticCompress(app)\n\n\n@app.route('/', methods=['GET'])\ndef home():\n    \"\"\"Landing page.\"\"\"\n    return render_template('/index.html', title=\"Lame Site\")\n\n\nCongrats! the main part of your application is pretty much done, just note a few\nthings:\n\n * Notice this time we set our folder paths via app.config[]  as opposed to\n   inline, in the earlier example. This is simply a matter of preference.\n * compress = FlaskStaticCompress(app) initializes our library, so definitely do\n   that.\n * Fun tidbit: app.static_folder = 'static' is a snippet which can live within\n   any route to override  the default app settings for where your folders are\n   located. \n\nCompressed 2 deff\nLet's wrap this bad boy up. Back in layout.html, let's add those static files we\ncreated.\n\n<!doctype html>\n<html>\n<head>\n  <title>{% block title %}{% endblock %} - My Lame Site</title>\n  <!-- Meta Data -->\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, viewport-fit=cover\">\n    \n  <!-- CSS -->\n  {% compress 'css' %}\n     <link href=\"{{ url_for('static', filename='less/home.less') }}\" type=\"text/less\">\n  {% endcompress %}\n    \n  <!-- JS -->\n    {% compress 'js' %}\n      <script src=\"{{ url_for('static', filename='js/previews.js') }}\"></script>\n\t{% endcompress %}\n</head>\n<body>\n  {% block content %}{% endblock %}\n</body>\n</html>\n\n\nLet's analyze this real quick:\n\n{% compress 'css' %}\n   <link href=\"{{ url_for('static', filename='less/home.less') }}\" type=\"text/less\">\n{% endcompress %}\n\n\nAll files within the {% compress 'css' %}  block will be minified and joined\ninto a single file, and then moved to the build folder we specified earlier.\nIt's that easy- no jobs to run beforehand, etc.\n\nWhat might also catch your eye is how we define the path:\n\n{{ url_for('static', filename='less/home.less') }}\n\n\nThis is a Jinja path dynamically locating our source file from our specified\nstatic doc. Well, I'll be darned.\n\nMethod 2: Flask-Assets\nFlaskStaticCompress  is great, but Flask_assets\n[http://flask-assets.readthedocs.io/en/latest/]  might even be better. If you're\nfamiliar with Webpack, consider the philosophy behind bundling.  Creating \nbundles  of frontend assets makes sense when we can draw clear distinctions of\nalike-screens in our app: this way, users don't download the entirety of our\nassets for screens they might not visit upfront, while pre-loading assets for\npages they'll probably  visit.\n\nThe Flask-Assets  library goes hand-in-hand with the concept of Flask Blueprints\n. If you aren't familiar with Blueprints just yet, I encourage you to become\nfamiliar here [https://hackersandslackers.com/structuring-your-flask-app/].\n\nTo get started, we'll install the necessary libraries:\n\n$ pip3 install flask-assets lesscpy cssmin jsmin\n\n\nThis is working under the assumption that we're be writing styles in LESS. If\nyou prefer sass, libsass  can take the place of lesscpy.\n\nThe other two libraries, cssmin  and jsmin, are for minifying CSS and JS assets\nrespectively.\n\nLet's see how we pull this off:\n\n...\nfrom flask_assets import Environment, Bundle\n\n\n# Flask-Assets Configuration\nless_bundle = Bundle('src/less/*.less',\n                     filters='less,cssmin',\n                     output='dist/css/account.css',\n                     extra={'rel': 'stylesheet/less'})\njs_bundle = Bundle('src/js/*.js',\n                   filters='jsmin',\n                   output='dist/js/main.min.js')\nassets.register('less_all', less_bundle)\nassets.register('js_all', js_bundle)\nless_bundle.build()\njs_bundle.build()\n``\n\nNotice how we only import flask_assets of all the libraries we installed- this\nis intentional. The other libraries do not need to be imported anywhere.\n\nless_bundle  and js_bundle  represent groupings of LESS and JS files to be\nstitched into one single file. Any positional arguments to be passed in to \nBundle()  will be taken as paths of sources files to bundle: we can bundle as\nmany or as few files as we want (or in our case , just import *).\n\nThe filters  argument is where we tell our Bundle()  how to treat the files\nwe've passed. In the case of less_bundle, passing less,cssmin  indicates that\nthe incoming files will be LESS files, to be compiled into CSS files, and then\noutputted as minified CSS files. the output destination, of course, is handled\nby the argument output.\n\nFinal Thoughts\nThe great thing about Flask (and Python in general) is that you're provided the\nluxury to write code in a manner which you find enjoyable. Considering Flask is\na relatively young framework, we're in a bit of a golden age where there are\njust enough libraries to suit your tastes, but not enough to get lost in an NPM\nlevel hell.\n\nIn my completely biased and untrustworthy opinion, it's hard to imagine getting\ninvolved with a Framework in a sweeter spot than where Flask is right now.","html":"<p>If you're familiar with Django (or Python to any extent), you've probably accepted the concept of what Python guys refer to as \"static assets.\" Let's take a moment to consider this: at some point in Django's conception a design decision was made: all <em>JavaScript</em>, <em>CSS</em>, or<em> any assets pertaining to the presentation layer</em> belong tucked away into an isolated corner of the framework. Alas, it was decreed: henceforward, only two types of code exist in the universe: Python, and not-Python. Anything that isn't Python is simply a \"static\" asset to be dealt with either locally or via a CDN somewhere. </p><p>The implied mindset is both somewhat absurd yet also unsurprising. It's easy to imagine a couple of backend nerds nonchalantly writing off <em>frontend development as a concept</em> to be stuck in a single folder. You know, all those things which make an app an app? Like, anything visible to a user? These are simply things-to-be-dealt-with when the frontend guys are ready with their \"make it pretty\" nonsense. Screw it, throw it all in the <strong>/static</strong> folder. We accept this distinction to this day with little thought. Flask has carried over the same terminology and concept of a \"static\" folder, so this amusing cultural relic is here to stay.</p><p>Anyhow, we're here today to help you serve those beautiful assets of yours, as static as they may be. We'll do so by exploring the top-two libraries available to us: <strong>Flask-Static-Compress</strong>, and <strong>Flask-Assets</strong>.</p><h2 id=\"application-structure-for-flask-apps-with-frontend\">Application Structure For Flask Apps with Frontend</h2><p>Best practices aside, we'll start with the most straightforward project structure for a Flask web app. Let's work with this structure:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">myproject\n├─ /static\n│  └─ /js\n│  └─ /less\n│  └─ /img\n│  └─ /build\n├─ /templates\n└─ app.py\n</code></pre>\n<!--kg-card-end: markdown--><p>All the Python we need is going to sit in a plump little <strong>app.py</strong><em> </em>file. </p><p><strong>Templates</strong> hold the same concept as they do to equivalent frameworks such as Express: this is where we contain <em>pages</em>, <em>partials</em>, and <em>layouts.</em> Flask's default <strong>Jinja2</strong> templating engine has personally served me well enough to never investigate an alternative.</p><p><strong>/Static </strong>is where we'll store the <em>raw</em> <em>source</em> files for things like preprocessed stylesheets and JavaScript. At runtime, these sources files will be compressed and stored elsewhere in a production setting, such as that nifty <strong>/build</strong> folder we created (or feel free to call it <em>/dist</em>, whatever, it's your party man). </p><p>It's best practice to serve these from a CDN at runtime, but whatever.</p><p>In contrast to NodeJS apps, things like images and fonts are stored in the /static folder as well. This distinguishes Python's concept of /<em>static</em> from, say, another framework's concept of /<em>src: </em>instead of being a folder of only source code, we pretty much have a folder of <em>all that shit which isn't Python. </em>And we've come full circle.</p><h2 id=\"creating-the-flask-app-object\">Creating The Flask App Object</h2><!--kg-card-begin: markdown--><pre><code class=\"language-python\">from flask import Flask, url_for, render_template, request, Response\n\napp = Flask(__name__, static_folder=&quot;static&quot;, template_folder=&quot;templates&quot;)\n</code></pre>\n<!--kg-card-end: markdown--><p>We initiate our app on line 4 with <code>app = Flask()</code>.  We create our app with three parameters/attributes:</p><ul><li><code>__name__</code>: Now that I think about it, I've never actually considered what this first parameter is doing. Just know that you need it,</li><li><code>static_folder</code>: Specifies the name of the folder where static assets will be served. This is based on where your app believes the root folder lives. Because our app is a single directory, it knows that /<em>static</em> is in the current directory.</li><li><code>template_folder</code>: Same as above, but contains Jinja2 templates, AKA the files which become HTML.</li></ul><p>It's important to reiterate that these folders default to being <em>relative to the current location of </em><strong>app.py</strong><em>.</em> If we want to change this behavior, we can pass <code>instance_path=/path/to/desired/dir/</code> to override this behavior.</p><h2 id=\"method-1-flask-static-compress\">Method 1: Flask-Static-Compress</h2><p>There's more than one way to skin a cat, and there's certainly more than one library or philosophy for serving pages and styles in Flask. <strong>flask_static_compress </strong>is one such library, which we'll include in <strong>app.py</strong><em>:</em> </p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">from flask import Flask, url_for, render_template, request, Response\nfrom flask_static_compress import FlaskStaticCompress\n</code></pre>\n<!--kg-card-end: markdown--><p><strong><a href=\"https://github.com/alanhamlett/flask-static-compress\">flask_static_compress</a></strong> is a cool library for compressing and joining assets together. If you've ever used Gulp, it achieves some of the common tasks Gulp might, but with a MUCH different philosophy. Some key differences are:</p><ul><li>The ability to served compressed assets individually, as opposed to one giant site bundle.</li><li>Never needing to explicitly fun a build command to create files served at runtime.</li></ul><p>Before serving any assets, we'll need a landing page for our app. While still in <strong>app.py,</strong> we need to set a route for anybody who visits our site:</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">from flask import Flask, url_for, render_template, request, Response\nfrom flask_static_compress import FlaskStaticCompress\n\napp = Flask(__name__, static_folder=&quot;static&quot;, template_folder=&quot;templates&quot;)\n\n@app.route('/', methods=['GET'])\ndef home():\n    &quot;&quot;&quot;Landing page.&quot;&quot;&quot;\n    return render_template('/index.html', title=&quot;Lame Site&quot;)\n</code></pre>\n<!--kg-card-end: markdown--><p>Our route listens for traffic hitting \"/\" (our root directory) and kindly serves them the page <strong>index.html</strong> as you might expect. Because we set the value of <code>templates_folder</code> just now, Flask knows to serve a file living in /<strong>templates/index.html</strong>. </p><p>If you need some pointers on creating basic templates in Flask in which to load your frontend assets, I'd suggest taking a look back at the previous post.</p><h3 id=\"frontend-yolo-swag\">Frontend YOLO Swag</h3><p>Back to your project, make <strong>.less</strong> file and a <strong>.js</strong> file in the appropriate places:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">myproject\n├─ /build\n├─ /static\n│  └─ js\n│  │  └─ main.js\n│  └─ less\n│  │  └─ style.js\n│  └─ img\n├─ /templates\n│  └─ layout.html\n│  └─ index.html\n└─ app.py\n</code></pre>\n<!--kg-card-end: markdown--><p>Use these files to brand your site accordingly. Add some images, memes, propaganda, viruses, etc. Whatever your heart desires.</p><p>Back in <strong>app.py</strong><em> </em>we need to finish configuring our library:</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">from flask import Flask, url_for, render_template, request, Response\nfrom flask_static_compress import FlaskStaticCompress\n\napp = Flask(__name__)\napp.config['COMPRESSOR_DEBUG'] = app.config.get('DEBUG')\napp.config['COMPRESSOR_STATIC_PREFIX'] = 'static'\napp.config['COMPRESSOR_OUTPUT_DIR'] = 'build'\napp.static_folder = 'static'\ncompress = FlaskStaticCompress(app)\n\n\n@app.route('/', methods=['GET'])\ndef home():\n    &quot;&quot;&quot;Landing page.&quot;&quot;&quot;\n    return render_template('/index.html', title=&quot;Lame Site&quot;)\n</code></pre>\n<!--kg-card-end: markdown--><p>Congrats! the main part of your application is pretty much done, just note a few things:</p><ul><li>Notice this time we set our folder paths via <em><strong>app.config[]</strong></em> as opposed to inline, in the earlier example. This is simply a matter of preference.</li><li><strong>compress = FlaskStaticCompress(app) </strong>initializes our library, so definitely do that.</li><li>Fun tidbit: <strong>app.static_folder = 'static' </strong>is a snippet which can live within any route to <em>override</em> the default app settings for where your folders are located. </li></ul><h2 id=\"compressed-2-deff\">Compressed 2 deff</h2><p>Let's wrap this bad boy up. Back in layout.html, let's add those static files we created.</p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;{% block title %}{% endblock %} - My Lame Site&lt;/title&gt;\n  &lt;!-- Meta Data --&gt;\n  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\n  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, viewport-fit=cover&quot;&gt;\n    \n  &lt;!-- CSS --&gt;\n  {% compress 'css' %}\n     &lt;link href=&quot;{{ url_for('static', filename='less/home.less') }}&quot; type=&quot;text/less&quot;&gt;\n  {% endcompress %}\n    \n  &lt;!-- JS --&gt;\n    {% compress 'js' %}\n      &lt;script src=&quot;{{ url_for('static', filename='js/previews.js') }}&quot;&gt;&lt;/script&gt;\n\t{% endcompress %}\n&lt;/head&gt;\n&lt;body&gt;\n  {% block content %}{% endblock %}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<!--kg-card-end: markdown--><p>Let's analyze this real quick:</p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">{% compress 'css' %}\n   &lt;link href=&quot;{{ url_for('static', filename='less/home.less') }}&quot; type=&quot;text/less&quot;&gt;\n{% endcompress %}\n</code></pre>\n<!--kg-card-end: markdown--><p>All files within the <code>{% compress 'css' %}</code> block will be minified and joined into a single file, and then moved to the build folder we specified earlier. It's that easy- no jobs to run beforehand, etc.</p><p>What might also catch your eye is how we define the path:</p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">{{ url_for('static', filename='less/home.less') }}\n</code></pre>\n<!--kg-card-end: markdown--><p>This is a Jinja path dynamically locating our source file from our specified static doc. Well, I'll be darned.</p><h2 id=\"method-2-flask-assets\">Method 2: Flask-Assets</h2><p><strong>FlaskStaticCompress</strong> is great, but <strong><a href=\"http://flask-assets.readthedocs.io/en/latest/\">Flask_assets</a> </strong>might even be better. If you're familiar with Webpack, consider the philosophy behind <em>bundling.</em> Creating <em>bundles</em> of frontend assets makes sense when we can draw clear distinctions of alike-screens in our app: this way, users don't download the entirety of our assets for screens they might not visit upfront, while pre-loading assets for pages they'll <em>probably</em> visit.</p><p>The <strong>Flask-Assets</strong> library goes hand-in-hand with the concept of Flask <strong>Blueprints</strong>. If you aren't familiar with Blueprints just yet, I encourage you to become familiar <a href=\"https://hackersandslackers.com/structuring-your-flask-app/\">here</a>.</p><p>To get started, we'll install the necessary libraries:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">$ pip3 install flask-assets lesscpy cssmin jsmin\n</code></pre>\n<!--kg-card-end: markdown--><p>This is working under the assumption that we're be writing styles in LESS. If you prefer sass, <strong>libsass</strong> can take the place of <strong>lesscpy</strong>.</p><p>The other two libraries, <strong>cssmin</strong> and <strong>jsmin</strong>, are for minifying CSS and JS assets respectively.</p><p>Let's see how we pull this off:</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">...\nfrom flask_assets import Environment, Bundle\n\n\n# Flask-Assets Configuration\nless_bundle = Bundle('src/less/*.less',\n                     filters='less,cssmin',\n                     output='dist/css/account.css',\n                     extra={'rel': 'stylesheet/less'})\njs_bundle = Bundle('src/js/*.js',\n                   filters='jsmin',\n                   output='dist/js/main.min.js')\nassets.register('less_all', less_bundle)\nassets.register('js_all', js_bundle)\nless_bundle.build()\njs_bundle.build()\n``</code></pre>\n<!--kg-card-end: markdown--><p>Notice how we only import flask_assets of all the libraries we installed- this is intentional. The other libraries do not need to be imported anywhere.</p><p><strong>less_bundle</strong> and <strong>js_bundle</strong> represent groupings of LESS and JS files to be stitched into one single file. Any positional arguments to be passed in to <code>Bundle()</code> will be taken as paths of sources files to bundle: we can bundle as many or as few files as we want (or in our case , just import *).</p><p>The <strong>filters</strong> argument is where we tell our <code>Bundle()</code> how to treat the files we've passed. In the case of <strong>less_bundle, </strong>passing <code>less,cssmin</code> indicates that the incoming files will be LESS files, to be compiled into CSS files, and then outputted as minified CSS files. the output destination, of course, is handled by the argument <code>output</code>.</p><h2 id=\"final-thoughts\">Final Thoughts</h2><p>The great thing about Flask (and Python in general) is that you're provided the luxury to write code in a manner which you find enjoyable. Considering Flask is a relatively young framework, we're in a bit of a golden age where there are just enough libraries to suit your tastes, but not enough to get lost in an NPM level hell.</p><p>In my completely biased and untrustworthy opinion, it's hard to imagine getting involved with a Framework in a sweeter spot than where Flask is right now. </p>","url":"https://hackersandslackers.com/serving-static-assets-in-flask/","uuid":"d1c8d104-6392-411b-86d4-75326e8e0960","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b5552047c9c156d9440c0ae"}},{"node":{"id":"Ghost__Post__5c5822200a214230dae40906","title":"Powerful Page Templates in Flask With Jinja","slug":"powerful-page-templates-in-flask-with-jinja","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/02/jinja@2x.jpg","excerpt":"Work with markup that writes itself using Flask's built-in Jinja library.","custom_excerpt":"Work with markup that writes itself using Flask's built-in Jinja library.","created_at_pretty":"04 February, 2019","published_at_pretty":"20 July, 2018","updated_at_pretty":"28 March, 2019","created_at":"2019-02-04T06:29:36.000-05:00","published_at":"2018-07-20T06:30:00.000-04:00","updated_at":"2019-03-28T05:18:50.000-04:00","meta_title":"Powerful Page Templates in Flask With Jinja | Hackers and Slackers","meta_description":"Work with markup that writes itself. Flask's built-in Jinja library allows you to create Python applications with smarter page templates.","og_description":"Work with markup that writes itself. Flask's built-in Jinja library allows you to create Python applications with smarter page templates.","og_image":"https://hackersandslackers.com/content/images/2019/02/jinja@2x.jpg","og_title":"Powerful Page Templates in Flask With Jinja","twitter_description":"Work with markup that writes itself. Flask's built-in Jinja library allows you to create Python applications with smarter page templates.","twitter_image":"https://hackersandslackers.com/content/images/2019/02/jinja@2x.jpg","twitter_title":"Powerful Page Templates in Flask With Jinja","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"},{"name":"#Building Flask Apps","slug":"building-flask-apps","description":"Python’s fast-growing and flexible microframework. Can handle apps as simple as API endpoints, to monoliths remininiscent of Django.","feature_image":"https://hackersandslackers.com/content/images/2019/03/flask-gettingstarted.jpg","meta_description":"Python’s fastest growing, most flexible, and perhaps most Pythonic framework.","meta_title":"Building Flask Apps","visibility":"internal"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"}],"plaintext":"So you want to build a web application in Python, eh? Hasn't anybody told you...\nPython is SLOW! Python is subject to CONTEXT SWITCHING! Oh, the HORROR!\n\nChances are most of these people aren't well-versed in Python at all. I enjoy\ncreating web applications in Flask more-so than I do in Node. Even if we were to\nput aside somehow the thousands of potentially malicious Javascript libraries\nneeded to stand up a simple app, or the decades of legacy knowledge needed to\ntolerate the JavaScript ecosystem without going insane: the simplicity of Flask\npaired and its libraries get the job done faster in most cases. Oh yeah, and you\ncan write backend logic in a language intended to do  so at the drop of a dime.\n\nOne of Flask's early surprises hits you when working with Jinja2. Jinja is\nFlask's default templating system, which processes templates into HTML markup to\nbe served to users at runtime. In addition to the inheritance and partial\ninclusion we've come to expect from templating systems, Jinja is particularly\nwell-equipped build pages out of raw data. You'll see what I mean.\n\nLayouts, Pages, and Partials\nLet's add three pages to our templates  folder, which is a directory typically\nreserved for template files. We'll add 3 files: layout.html, index.html, and \nnav.html.  Each of these templates represents one of three common template\n\"types\" when building in Jinja. \n\nOh, and disregard the fact that these files retain an HTML file extension- they\nare oh, so much more than that.\n\nmyproject\n├─ /templates\n│  ├─ layout.html\n│  ├─ index.html\n│  └─ nav.html\n└─ app.py\n\n\nCreate a Simple Route to Get Started\nWe'll make a brief stop in app.py  to set up the most basic logic an app can\nhave: serving up a homepage:\n\nfrom flask import Flask, render_template\n\napp = Flask(__name__, template_folder=\"templates\")\n\n@app.route('/')\ndef home():\n    \"\"\"Landing page.\"\"\"\n    return render_template('/index.html', title=\"Lame Site\")\n\n\nNote how we specify template_folder=\"templates\"  when instantiating our app\nobject; this is critical to let Flask know where templates are going to be\nstored in the project directory. Be aware that this directory is almost always\nexplicitly set as /templates. If you store your templates anywhere else, you\nhave a mental health problem.\n\nThe Bread and Butter of Template Inheritance\nLayout.html  is going to be our base template. In other words, this barebones\nfile will represent elements which should be common to all  of our app's pages,\nsuch as metadata, analytics, etc. It is the 'page we load other pages into.'  \n\nIf you're familiar with Handlebars\n[https://hackersandslackers.com/handlebars-templating-in-expressjs/], Jinja's\ntemplating concepts are the same deal with slightly different syntax. Here's a\ndecent layout.html  example:\n\n<!-- layout.html -->\n<!doctype html>\n<html>\n<head>\n  <title>{{title}}</title>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, viewport-fit=cover\">\n    <!-- Google Analytics -->\n    <script>\n    window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;\n    ga('create', 'UA-XXXXX-Y', 'auto');\n    ga('send', 'pageview');\n    </script>\n    <script async src='https://www.google-analytics.com/analytics.js'></script>\n    <!-- End Google Analytics -->\n</head>\n<body>\n  {% include 'nav.html' %}\n  {% block content %}{% endblock %}\n  {% include 'footer.html' %}\n</body>\n</html>\n\n\nNote the bracketed values in our otherwise-HTML! Each of these represents a\nreservation of \"stuff to come.\" That \"stuff\" could come in the form of a\nvariable, a partial, or code from another template. \n\nWe've just utilized three templating concepts in the above example:\n\n * The double-bracket {{title}}  is reserved to be replaced with a variable\n   named 'title' when we serve this view in Flask. We pass variables to\n   templates when we render them in the 'routes' part of our app.\n * Includes such as {% include 'nav.html' %}  are saying \"load the entirety of a\n   separate HTML file named nav.html  into this spot right here.\" This is called\n   a partial. Partials are encapsulated, standalone components intended to be\n   frequently reused throughout our app.\n * Things get real interesting with blocks, as seen in {% block content %}{%\n   endblock %}. This statement is reserving a chunk  of our template to receive\n   a corresponding chunk  of another template when such a template is loaded\n   into layout.hml. Remember: layouts are just barebones commonalities between\n   pages. To build meaningful pages, we must combine the parts of unique pages\n   (such as index.html) with layouts to create full pages. \n\nLet's look at index.html:  the file we're about to shove into layout.html:\n\n<!-- index.html -->\n{% extends 'layout.html' %}\n\n{% block content %}\n<div class=\"container\">\n<h1>My Lame site</h1>\n    <p>Hello, and welcome to my lame site! I'm so glad you're here. I'm so lonely.</p>\n</div>\n{% endblock %}\n\n\nRemember in the route we created in app.py:  our function states \"load\nindex.html when users visit /.\" We never mention layout.html  at all. That is\nbecause by including {% extends 'layout.html' %}  in  index.html, we're  stating\nthat index.html  should extend  layout.html. index.html  is our unique snowflake\nof a page, and layout  is our boring skeleton.\n\nBack to talking about blocks:  templates can contain multiple \"blocks\" of code.\nEach named block (such as  {% block content %}) in a page such as index.html \nshould correspond to an empty block we reserved in layout.html. When we serve\nthe final page, it's like we're plugging plugs into their respective sockets. We\ncan reserve as many \"blocks\" in our layout as we want, and thus serve multiple\nblocks within the same template. \n\nTo help illustrate this, let's say you're building a horrible clickbait site\nwhere your requirements dictate that horrible, invasive ads should appear\nbetween pieces of content of every page of your site. If we keep that page\nstructure to layout.html, then we can retrofit our layout to have multiple slots\nfor incoming content from index.html:  both before  and after  the horrible\nmonstrosity of an idea I already regret imagining. If index.html  contained both\n {% block content1 %}...{% endblock %}  and {% block content2 %}...{% endblock\n%}, those blocks are now independent entities which can be loaded to their\nrespective slots.\n\nPassing Data to Templates\nWhen we passed title=\"Lame Site\"  to index.html in our route, we were passing a\nsimple variable to replace {{title}}. Check out this example of what we can do\nwhen we pass JSON objects to templates:\n\n<form action=\"/submitted\" method=post>\n  {% if error %}\n   <p class=error><strong>Error:</strong> {{ error }}</p>\n  {% endif %}\n  {% for field in request.fields.requestTypeFields %}\n     {% if field.name in ('Category', 'Product', 'Dashboard Name') %}\n          <select id=\"{{request.name}} {{field.name}}\" \n                  name=\"{{field.name}}\" \n                  label=\"{{field.name}}\" \n                  class=\"input-field\">\n           <option value=\"Choose your option\" \n                   disabled \n                   selected>\n               {{field.description}}\n            </option>\n            {% for option in field.validValues %}\n                <option value=\"{{option.value}}\">\n                    {{option.label}}\n                </option>\n                {% endfor %}\n            </select>\n            <label>{{field.name}}</label>\n       {% elif field.name == 'Description' %}\n            <label for=\"{{request.name}} {{field.name}}\">\n                {{field.name}}\n            </label>\n            <textarea id=\"{{field.name}}\" \n                      class=\"materialize-textarea input-field\" \n                      placeholder=\"{{field.description}}\" \n                      name=\"{{field.name}}\">\n             </textarea>\n         {% else %}\n         <label for=\"{{request.name}} {{field.name}}\">\n             {{field.name}}\n         </label>\n         <input placeholder=\"{{field.description}}\" \n                id=\"{{request.name}} {{field.name}}\" \n                type=\"text\" \n                class=\"input-field validate\" \n                name=\"{{field.name}}\">\n         {% endif %}\n    {% endfor %}\n    <input type=\"submit\" value=\"Submit\" class=\"btn cyan formsubmit\">\n</form>\n\n\nThose are for  loops and if  statements all working against a single JSON\nobject. This specific example demonstrates building a form based on a JSON\nobject; one we've happened to fetch from JIRA. Just by passing this JSON to a\nJinja template, we can recreate an entire enterprise system's form logic in a\nsimple template block.\n\nHere's another example. This one returns feedback to a user who presumably\nfilled out a form incorrectly, thus must be chastised with popup error messages:\n\n{% with messages = get_flashed_messages() %}\n  {% if messages %}\n    <ul class=flashes>\n    {% for message in messages %}\n      <li>{{ message }}</li>\n    {% endfor %}\n    </ul>\n  {% endif %}\n{% endwith %}\n\n\nSmall But Powerful\nTemplates are one small part of Flask, but they demonstrate a greater philosophy\ngenerally consistent throughout the framework: small libraries can do big\nthings. Sometimes it may take some courage to maneuver with the tools at hand\ncleverly, but the power of the Triforce is with you. You are Hyrule's last hope,\ngreat warrior... now you must make haste in your duties to build little apps. Or\nwhatever.","html":"<p>So you want to build a web application in Python, eh? Hasn't anybody told you... Python is <em>SLOW</em>! Python is subject to <em>CONTEXT SWITCHING</em>! Oh, the <em>HORROR</em>!</p><p>Chances are most of these people aren't well-versed in Python at all. I enjoy creating web applications in Flask more-so than I do in Node. Even if we were to put aside somehow the thousands of potentially malicious Javascript libraries needed to stand up a simple app, or the decades of legacy knowledge needed to tolerate the JavaScript ecosystem without going insane: the simplicity of Flask paired and its libraries get the job done faster in most cases. Oh yeah, and you can write backend logic in a language <em>intended to do</em> so at the drop of a dime.</p><p>One of Flask's early surprises hits you when working with <strong>Jinja2</strong>. Jinja is Flask's default templating system, which processes templates into HTML markup to be served to users at runtime. In addition to the inheritance and partial inclusion we've come to expect from templating systems, Jinja is particularly well-equipped build pages out of raw data. You'll see what I mean.</p><h2 id=\"layouts-pages-and-partials\">Layouts, Pages, and Partials</h2><p>Let's add three pages to our <em>templates</em> folder, which is a directory typically reserved for template files. We'll add 3 files: <strong>layout.html, index.html, </strong>and <strong>nav.html.</strong> Each of these templates represents one of three common template \"types\" when building in Jinja. </p><p>Oh, and disregard the fact that these files retain an HTML file extension- they are oh, so much more than that.</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">myproject\n├─ /templates\n│  ├─ layout.html\n│  ├─ index.html\n│  └─ nav.html\n└─ app.py\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"create-a-simple-route-to-get-started\">Create a Simple Route to Get Started</h2><p>We'll make a brief stop in <strong>app.py</strong> to set up the most basic logic an app can have: serving up a homepage:</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">from flask import Flask, render_template\n\napp = Flask(__name__, template_folder=&quot;templates&quot;)\n\n@app.route('/')\ndef home():\n    &quot;&quot;&quot;Landing page.&quot;&quot;&quot;\n    return render_template('/index.html', title=&quot;Lame Site&quot;)\n</code></pre>\n<!--kg-card-end: markdown--><p>Note how we specify <code>template_folder=\"templates\"</code> when instantiating our app object; this is critical to let Flask know where templates are going to be stored in the project directory. Be aware that this directory is almost always explicitly set as /<em>templates. </em>If you store your templates anywhere else, you have a mental health problem.</p><h2 id=\"the-bread-and-butter-of-template-inheritance\">The Bread and Butter of Template Inheritance</h2><p><strong>Layout.html</strong> is going to be our base template. In other words, this barebones file will represent elements which should be common to <em>all</em> of our app's pages, such as metadata, analytics, etc. It is the '<em>page we load other pages into.'</em> </p><p>If you're familiar with <a href=\"https://hackersandslackers.com/handlebars-templating-in-expressjs/\">Handlebars</a>, Jinja's templating concepts are the same deal with slightly different syntax. Here's a decent <strong>layout.html</strong> example:</p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">&lt;!-- layout.html --&gt;\n&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;{{title}}&lt;/title&gt;\n  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\n  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, viewport-fit=cover&quot;&gt;\n    &lt;!-- Google Analytics --&gt;\n    &lt;script&gt;\n    window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;\n    ga('create', 'UA-XXXXX-Y', 'auto');\n    ga('send', 'pageview');\n    &lt;/script&gt;\n    &lt;script async src='https://www.google-analytics.com/analytics.js'&gt;&lt;/script&gt;\n    &lt;!-- End Google Analytics --&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  {% include 'nav.html' %}\n  {% block content %}{% endblock %}\n  {% include 'footer.html' %}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<!--kg-card-end: markdown--><p>Note the bracketed values in our otherwise-HTML! Each of these represents a reservation of \"stuff to come.\" That \"stuff\" could come in the form of a variable, a partial, or code from another template. </p><p>We've just utilized three templating concepts in the above example:</p><ul><li>The double-bracket <code>{{title}}</code> is reserved to be replaced with a variable named 'title' when we serve this view in Flask. We pass variables to templates when we render them in the 'routes' part of our app.</li><li>Includes such as <code>{% include 'nav.html' %}</code> are saying \"load the entirety of a separate HTML file named <strong>nav.html</strong> into this spot right here.\" This is called a <em>partial</em>. Partials are encapsulated, standalone components intended to be frequently reused throughout our app.</li><li>Things get real interesting with <em>blocks</em>, as seen in <code>{% block content %}{% endblock %}</code>. This statement is reserving a <em>chunk</em> of our template to receive a <em>corresponding chunk</em> of another template when such a template is loaded into <strong>layout.hml</strong>. Remember: layouts are just barebones commonalities between pages. To build meaningful pages, we must combine the parts of unique pages (such as <strong>index.html</strong>) with layouts to create full pages. </li></ul><p>Let's look at <strong>index.html:</strong> the file we're about to shove into <strong>layout.html:</strong></p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">&lt;!-- index.html --&gt;\n{% extends 'layout.html' %}\n\n{% block content %}\n&lt;div class=&quot;container&quot;&gt;\n&lt;h1&gt;My Lame site&lt;/h1&gt;\n    &lt;p&gt;Hello, and welcome to my lame site! I'm so glad you're here. I'm so lonely.&lt;/p&gt;\n&lt;/div&gt;\n{% endblock %}\n</code></pre>\n<!--kg-card-end: markdown--><p>Remember in the route we created in <strong>app.py:</strong> our function states <em>\"load index.html when users visit /.\" </em>We never mention <strong>layout.html</strong> at all. That is because by including <code>{% extends 'layout.html' %}</code><strong> </strong>in<strong> index.html, </strong>we're<strong> </strong>stating that <strong>index.html</strong> should <em>extend</em> <strong>layout.html. index.html</strong> is our unique snowflake of a page, and <strong>layout</strong> is our boring skeleton.</p><p>Back to talking about blocks:  templates can contain multiple \"blocks\" of code. Each named block (such as<strong> </strong><code>{% block content %}</code>) in a page such as <strong>index.html</strong> should correspond to an empty block we reserved in <strong>layout.html</strong>. When we serve the final page, it's like we're plugging plugs into their respective sockets. We can reserve as many \"blocks\" in our layout as we want, and thus serve multiple blocks within the same template. </p><p>To help illustrate this, let's say you're building a horrible clickbait site where your requirements dictate that horrible, invasive ads should appear between pieces of content of every page of your site. If we keep that page structure to <strong>layout.html</strong>, then we can retrofit our layout to have multiple slots for incoming content from <strong>index.html:</strong> both <em>before</em> and <em>after</em> the horrible monstrosity of an idea I already regret imagining. If <strong>index.html</strong> contained both <code>{% block content1 %}...{% endblock %}</code> and <code>{% block content2 %}...{% endblock %}</code>, those blocks are now independent entities which can be loaded to their respective slots.</p><h2 id=\"passing-data-to-templates\">Passing Data to Templates</h2><p>When we passed <code>title=\"Lame Site\"</code> to <strong>index.html </strong>in our route, we were passing a simple variable to replace <code>{{title}}</code>. Check out this example of what we can do when we pass JSON objects to templates:</p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">&lt;form action=&quot;/submitted&quot; method=post&gt;\n  {% if error %}\n   &lt;p class=error&gt;&lt;strong&gt;Error:&lt;/strong&gt; {{ error }}&lt;/p&gt;\n  {% endif %}\n  {% for field in request.fields.requestTypeFields %}\n     {% if field.name in ('Category', 'Product', 'Dashboard Name') %}\n          &lt;select id=&quot;{{request.name}} {{field.name}}&quot; \n                  name=&quot;{{field.name}}&quot; \n                  label=&quot;{{field.name}}&quot; \n                  class=&quot;input-field&quot;&gt;\n           &lt;option value=&quot;Choose your option&quot; \n                   disabled \n                   selected&gt;\n               {{field.description}}\n            &lt;/option&gt;\n            {% for option in field.validValues %}\n                &lt;option value=&quot;{{option.value}}&quot;&gt;\n                    {{option.label}}\n                &lt;/option&gt;\n                {% endfor %}\n            &lt;/select&gt;\n            &lt;label&gt;{{field.name}}&lt;/label&gt;\n       {% elif field.name == 'Description' %}\n            &lt;label for=&quot;{{request.name}} {{field.name}}&quot;&gt;\n                {{field.name}}\n            &lt;/label&gt;\n            &lt;textarea id=&quot;{{field.name}}&quot; \n                      class=&quot;materialize-textarea input-field&quot; \n                      placeholder=&quot;{{field.description}}&quot; \n                      name=&quot;{{field.name}}&quot;&gt;\n             &lt;/textarea&gt;\n         {% else %}\n         &lt;label for=&quot;{{request.name}} {{field.name}}&quot;&gt;\n             {{field.name}}\n         &lt;/label&gt;\n         &lt;input placeholder=&quot;{{field.description}}&quot; \n                id=&quot;{{request.name}} {{field.name}}&quot; \n                type=&quot;text&quot; \n                class=&quot;input-field validate&quot; \n                name=&quot;{{field.name}}&quot;&gt;\n         {% endif %}\n    {% endfor %}\n    &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; class=&quot;btn cyan formsubmit&quot;&gt;\n&lt;/form&gt;\n</code></pre>\n<!--kg-card-end: markdown--><p>Those are <code>for</code> loops and <code>if</code> statements all working against a single JSON object. This specific example demonstrates building a form based on a JSON object; one we've happened to fetch from JIRA. Just by passing this JSON to a Jinja template, we can recreate an entire enterprise system's form logic in a simple template block.</p><p>Here's another example. This one returns feedback to a user who presumably filled out a form incorrectly, thus must be chastised with popup error messages:</p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">{% with messages = get_flashed_messages() %}\n  {% if messages %}\n    &lt;ul class=flashes&gt;\n    {% for message in messages %}\n      &lt;li&gt;{{ message }}&lt;/li&gt;\n    {% endfor %}\n    &lt;/ul&gt;\n  {% endif %}\n{% endwith %}\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"small-but-powerful\">Small But Powerful</h3><p>Templates are one small part of Flask, but they demonstrate a greater philosophy generally consistent throughout the framework: small libraries can do big things. Sometimes it may take some courage to maneuver with the tools at hand cleverly, but the power of the Triforce is with you. You are Hyrule's last hope, great warrior... now you must make haste in your duties to build little apps. Or whatever.</p>","url":"https://hackersandslackers.com/powerful-page-templates-in-flask-with-jinja/","uuid":"055ba6eb-f177-4b9d-b85e-2c7730850bf1","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c5822200a214230dae40906"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867369f","title":"Creating Your First Flask Application","slug":"creating-your-first-flask-application","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/07/flask-gettingstarted@2x.jpg","excerpt":"After achieving market dominance, Flask is a Python framework impossible to avoid.","custom_excerpt":"After achieving market dominance, Flask is a Python framework impossible to avoid.","created_at_pretty":"08 July, 2018","published_at_pretty":"08 July, 2018","updated_at_pretty":"21 February, 2019","created_at":"2018-07-08T16:06:24.000-04:00","published_at":"2018-07-08T17:51:42.000-04:00","updated_at":"2019-02-21T17:05:15.000-05:00","meta_title":"Creating Your First Flask Application | Hackers and Slackers","meta_description":"After achieving market dominance, Flask is a Python framework impossible to avoid. Learn the basics of creating a Flask web app or API.","og_description":"After achieving market dominance, Flask is a Python framework impossible to avoid. Learn the basics of creating a Flask web app or API.","og_image":"https://hackersandslackers.com/content/images/2018/07/flask-gettingstarted@2x.jpg","og_title":"Creating Your First Flask Application","twitter_description":"After achieving market dominance, Flask is a Python framework impossible to avoid. Learn the basics of creating a Flask web app or API.","twitter_image":"https://hackersandslackers.com/content/images/2018/07/flask-gettingstarted@2x.jpg","twitter_title":"Creating Your First Flask Application","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Architecture","slug":"architecture","description":"Advancements in software architecture, serverless and beyond. Examples include equivalents to Lambda functions, Docker containers, Google Cloud functions,  Kubernetes, Heroku, etc.","feature_image":null,"meta_description":"Advancements in software architecture, serverless and beyond. Examples include equivalents to cloud functions, Docker containers, Kubernetes, Heroku, etc.","meta_title":"Software Architecture | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"},{"name":"#Building Flask Apps","slug":"building-flask-apps","description":"Python’s fast-growing and flexible microframework. Can handle apps as simple as API endpoints, to monoliths remininiscent of Django.","feature_image":"https://hackersandslackers.com/content/images/2019/03/flask-gettingstarted.jpg","meta_description":"Python’s fastest growing, most flexible, and perhaps most Pythonic framework.","meta_title":"Building Flask Apps","visibility":"internal"}],"plaintext":"Evidence of Flask’s rise to power has been all around us for a couple of years\nnow. Anybody paying close attention to the technology stacks chosen by startups\nhas undoubtedly noticed a flip: at some point, the industry standard flipped\naway from Django entirely. \n\nHuge bets are being placed on Flask across the industry. Plotly’s  famous Dash \nproduct is an extension of Flask which has seen significant success. Even major\ncloud providers, namely Google Cloud, are choosing to default to Flask for\nPython implementations of serverless apps. Google Cloud Functions and Google App\nEngine both ship with Flask running at their core. JetBrains finally put an\nofficial number to this trend with their 2018 Python survey\n[https://www.jetbrains.com/research/python-developers-survey-2018/]: 47%  of\ndevs report using Flask to Django’s 45%. Game: Blouses.\n\nFlask wins market dominence in 2018.Put down the pitchforks: this isn’t a Flask\nvs. Django post, nor are we implying that one framework is superior to the\nother. Both frameworks have their place, with that “place” being in the realm of\npreference.\n\nWhy Flask?\nDeveloping apps in Flask has a much different narrative than when developing in\nmore traditional MVC Frameworks. In the past, the setup of a framework would\neasily take hours: with the assumption that our app needed all the bells and\nwhistles, it was impossible to get a “Hello world!” off the ground without a\nfull understanding of database configurations, static assets, templates, and\nother things our app may not even need. This is especially a concern for the\nPython ecosystem. Few people turn to Python for the sole purpose of building a\nweb app: the vast majority of Python developers are in the field of data\nanalysis without a traditional background in application development. Asking\ndata analysts (who have mostly become accustomed to Jupyter notebooks) to pick\nup all the fundamentals of web development before even getting started is just\nunrealistic.\n\nFlask's setup is merely a copy+paste of the following five lines:\n\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello World!\"\n\n\nThose five lines create a live Flask application. Without any other knowledge\nabout the framework, we can immediately plug in any Python logic we already have\nto change “Hello world!” to match any output imaginable. While it's possible to\ncreate an entire Flask application as a single tiny file, Flask can be as\nextended to be just as powerful and complex as its predecessors. When the author\nof a Flask application deems it necessary, various Flask plugins can be pulled\nin to give us robust application logic. Examples include:\n\n * Flask-SQLAlchemy  for database interaction.\n * Flask-Sessions  for user session management.\n * Flask-Login  to manage user logins.\n * Literally hundreds [https://github.com/humiaozuzu/awesome-flask]  of other\n   libraries.\n\nThis plug-and-play structure makes Flask projects feel more expressive while\nsimultaneously providing simplicity to developers starting from 0. Not only\nthat, but reading somebody else’s source suddenly becomes simple: I know this\napp must do XYZ, because this person has imported XYZ.\n\nDissecting Flask’s “Hello World!”\nLet's go back to our 5-line application to pick apart the specifics:\n\nfrom flask import Flask \napp = Flask(__name__)\n\n\nThe most important part of the Flask Python library is Flask  with a capital “F”\n(as in: from flask import Flask).  This five-letter word creates an object which\nrefers to the entirety of the app itself: when we state app = Flask(__name__),\nwe are creating the variable app  which represents our application. Therefore,\nwhen we configure the variable app,  we’re configuring the way our entire\napplication works. For example, setting app = Flask()  can accept a few\nattributes:\n\nfrom flask import Flask\n\napp = Flask(__name__,\n            instance_relative_config=False,\n            template_folder=\"templates\",\n            static_folder=\"static\"\n            )\n\n\nThis is an example of creating a Flask app with a few specifics: the location of\nour config file, the folder in which we'll store pages templates, and the folder\nin which we'll store frontend assets (JS, CSS, images, etc.).\n\nA Basic Flask Route\nThe primary function of our app is called hello(), which is importantly wrapped\nby Flask's most important decorator: .route(). If you aren't familiar with \ndecorators  in Python, a decorator is a function for us to wrap other functions\nwith. It isn't critically important to know all the details, other than that\nFlask comes with a route decorator which allows us to serve up functions based\non which page of the app the user is loading. By setting @app.route(\"/\"), we are\nspecifying that the function hello()  should fire whenever somebody uses our\napp.\n\nOf course, we can return any value besides \"Hello world!\" if we wanted. Let's\nsay you've already a script which returns the square of a number, plus 9. We\ncould save that logic in a function called squareOfNumberPlusNine(), in a file\ncalled logic.py. Now, our script can look like this:\n\nfrom flask import Flask\nfrom logic import squareOfNumberPlusNine\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    value = squareOfNumberPlusNine(5)\n    return value\n\n\nThis would return 34  as opposed to \"Hello world!\". Without any prior knowledge\nof Python web development, we can already use Flask to plug into logic we've\nwritten and serve up a result.\n\nOther Parts of Flask's Core Library\nWe can import other things from flask  besides Flask. Here are some examples:\n\nServing Raw HTML\nMarkup  allows us to return an HTML page by rendering a string as HTML:\n\nfrom flask import Flask, Markup\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return Markup(\"<h1>Hello World!</h1>\")\n\n\nServing an HTML Page Template\nreturn_template  will return an HTML page by finding the page in our /templates \nfolder:\n\nfrom flask import Flask, render_template\napp = Flask(__name__, template_folder=\"templates\")\n\n@app.route(\"/\")\ndef hello():\n    return render_template(\"index.html\")\n\n\nServing a JSON Response \nmake_response  is suitable if our application is an API and we'd like to return\na response object:\n\nfrom flask import Flask, make_response\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    headers = {\"Content-Type\": \"application/json\"}\n    return make_response('it worked!', 200, headers=headers)\n\n\nOn the topic of creating APIs with Flask, we can also specify whether the route\nat hand is a POST, GET, or some other method. This is handled easily within the\nroute decorator:\n\nfrom flask import Flask, make_response, request\napp = Flask(__name__)\n\n@app.route(\"/\", methods=['GET'])\ndef hello():\n    if request.method != 'GET':\n        return make_response('Malformed request', 400)\n    headers = {\"Content-Type\": \"application/json\"}\n    return make_response('it worked!', 200, headers=headers)\n\n\nThe above function checks to make sure the user is accessing the endpoint with\nthe correct method first. If they've used the incorrect method, we return an\nerror.\n\nSuccumb to Flask\nEven if you chose to stick to your large Frameworks, it's easy to see why Flask\nis useful as a drop-in solution for many tasks. There are undoubtedly plenty of\nuseful Python scripts which go wasted because the final step of making them\neasily consumable by other people was never completed. Flask is an excellent way\nto achieve this last step, and the best part is: you already know how to use it.","html":"<p>Evidence of Flask’s rise to power has been all around us for a couple of years now. Anybody paying close attention to the technology stacks chosen by startups has undoubtedly noticed a flip: at some point, the industry standard flipped away from Django entirely. </p><p>Huge bets are being placed on Flask across the industry. <strong>Plotly’s</strong> famous <strong>Dash</strong> product is an extension of Flask which has seen significant success. Even major cloud providers, namely <strong>Google Cloud</strong>, are choosing to default to Flask for Python implementations of serverless apps. Google Cloud Functions and Google App Engine both ship with Flask running at their core. JetBrains finally put an official number to this trend with their <a href=\"https://www.jetbrains.com/research/python-developers-survey-2018/\">2018 Python survey</a>: <strong>47%</strong> of devs report using Flask to Django’s <strong>45%</strong>. Game: Blouses.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/Screen-Shot-2019-02-13-at-4.36.00-PM.png\" class=\"kg-image\"><figcaption>Flask wins market dominence in 2018.</figcaption></figure><p>Put down the pitchforks: this isn’t a Flask vs. Django post, nor are we implying that one framework is superior to the other. Both frameworks have their place, with that “place” being in the realm of preference.</p><h2 id=\"why-flask\">Why Flask?</h2><p>Developing apps in Flask has a much different narrative than when developing in more traditional MVC Frameworks. In the past, the setup of a framework would easily take hours: with the assumption that our app needed all the bells and whistles, it was impossible to get a “Hello world!” off the ground without a full understanding of database configurations, static assets, templates, and other things our app may not even need. This is especially a concern for the Python ecosystem. Few people turn to Python for the sole purpose of building a web app: the vast majority of Python developers are in the field of data analysis without a traditional background in application development. Asking data analysts (who have mostly become accustomed to Jupyter notebooks) to pick up all the fundamentals of web development before even getting started is just unrealistic.</p><p>Flask's setup is merely a copy+paste of the following five lines:</p><pre><code class=\"language-python\">from flask import Flask\napp = Flask(__name__)\n\n@app.route(&quot;/&quot;)\ndef hello():\n    return &quot;Hello World!&quot;\n</code></pre>\n<p>Those five lines create a live Flask application. Without any other knowledge about the framework, we can immediately plug in any Python logic we already have to change “Hello world!” to match any output imaginable. While it's possible to create an entire Flask application as a single tiny file, Flask can be as extended to be just as powerful and complex as its predecessors. When the author of a Flask application deems it necessary, various Flask plugins can be pulled in to give us robust application logic. Examples include:</p><ul><li><strong>Flask-SQLAlchemy</strong> for database interaction.</li><li><strong>Flask-Sessions</strong> for user session management.</li><li><strong>Flask-Login</strong> to manage user logins.</li><li>Literally <a href=\"https://github.com/humiaozuzu/awesome-flask\">hundreds</a> of other libraries.</li></ul><p>This plug-and-play structure makes Flask projects feel more expressive while simultaneously providing simplicity to developers starting from 0. Not only that, but reading somebody else’s source suddenly becomes simple: I know this app must do XYZ, because this person has imported XYZ.</p><h2 id=\"dissecting-flask-s-hello-world-\">Dissecting Flask’s “Hello World!”</h2><p>Let's go back to our 5-line application to pick apart the specifics:</p><pre><code class=\"language-python\">from flask import Flask \napp = Flask(__name__)\n</code></pre>\n<p>The most important part of the Flask Python library is <strong>Flask</strong> with a capital “F” (as in: <code>from flask import Flask</code>).  This five-letter word creates an object which refers to the entirety of the app itself: when we state <code>app = Flask(__name__)</code>, we are creating the variable <strong>app</strong> which represents our application. Therefore, when we configure the variable <strong>app,</strong> we’re configuring the way our entire application works. For example, setting <code>app = Flask()</code> can accept a few attributes:</p><pre><code class=\"language-python\">from flask import Flask\n\napp = Flask(__name__,\n            instance_relative_config=False,\n            template_folder=&quot;templates&quot;,\n            static_folder=&quot;static&quot;\n            )\n</code></pre>\n<p>This is an example of creating a Flask app with a few specifics: the location of our config file, the folder in which we'll store pages templates, and the folder in which we'll store frontend assets (JS, CSS, images, etc.).</p><h3 id=\"a-basic-flask-route\">A Basic Flask Route</h3><p>The primary function of our app is called <code>hello()</code>, which is importantly wrapped by Flask's most important decorator: <code>.route()</code>. If you aren't familiar with <strong>decorators</strong> in Python, a decorator is a function for us to wrap other functions with. It isn't critically important to know all the details, other than that Flask comes with a route decorator which allows us to serve up functions based on which page of the app the user is loading. By setting <code>@app.route(\"/\")</code>, we are specifying that the function <code>hello()</code> should fire whenever somebody uses our app.</p><p>Of course, we can return any value besides \"Hello world!\" if we wanted. Let's say you've already a script which returns the square of a number, plus 9. We could save that logic in a function called <code>squareOfNumberPlusNine()</code>, in a file called <code>logic.py</code>. Now, our script can look like this:</p><pre><code class=\"language-python\">from flask import Flask\nfrom logic import squareOfNumberPlusNine\napp = Flask(__name__)\n\n@app.route(&quot;/&quot;)\ndef hello():\n    value = squareOfNumberPlusNine(5)\n    return value\n</code></pre>\n<p>This would return <strong>34</strong> as opposed to \"<strong>Hello world!\"</strong>. Without any prior knowledge of Python web development, we can already use Flask to plug into logic we've written and serve up a result.</p><h2 id=\"other-parts-of-flask-s-core-library\">Other Parts of Flask's Core Library</h2><p>We can import other things <code>from flask</code> besides <code>Flask</code>. Here are some examples:</p><h3 id=\"serving-raw-html\">Serving Raw HTML</h3><p><code>Markup</code> allows us to return an HTML page by rendering a string as HTML:</p><pre><code class=\"language-python\">from flask import Flask, Markup\napp = Flask(__name__)\n\n@app.route(&quot;/&quot;)\ndef hello():\n    return Markup(&quot;&lt;h1&gt;Hello World!&lt;/h1&gt;&quot;)\n</code></pre>\n<h3 id=\"serving-an-html-page-template\">Serving an HTML Page Template</h3><p><code>return_template</code> will return an HTML page by finding the page in our <code>/templates</code> folder:</p><pre><code class=\"language-python\">from flask import Flask, render_template\napp = Flask(__name__, template_folder=&quot;templates&quot;)\n\n@app.route(&quot;/&quot;)\ndef hello():\n    return render_template(&quot;index.html&quot;)\n</code></pre>\n<h3 id=\"serving-a-json-response\">Serving a JSON Response </h3><p><code>make_response</code> is suitable if our application is an API and we'd like to return a response object:</p><pre><code class=\"language-python\">from flask import Flask, make_response\napp = Flask(__name__)\n\n@app.route(&quot;/&quot;)\ndef hello():\n    headers = {&quot;Content-Type&quot;: &quot;application/json&quot;}\n    return make_response('it worked!', 200, headers=headers)\n</code></pre>\n<p>On the topic of creating APIs with Flask, we can also specify whether the route at hand is a POST, GET, or some other method. This is handled easily within the route decorator:</p><pre><code class=\"language-python\">from flask import Flask, make_response, request\napp = Flask(__name__)\n\n@app.route(&quot;/&quot;, methods=['GET'])\ndef hello():\n    if request.method != 'GET':\n        return make_response('Malformed request', 400)\n    headers = {&quot;Content-Type&quot;: &quot;application/json&quot;}\n    return make_response('it worked!', 200, headers=headers)\n</code></pre>\n<p>The above function checks to make sure the user is accessing the endpoint with the correct method first. If they've used the incorrect method, we return an error.</p><h2 id=\"succumb-to-flask\">Succumb to Flask</h2><p>Even if you chose to stick to your large Frameworks, it's easy to see why Flask is useful as a drop-in solution for many tasks. There are undoubtedly plenty of useful Python scripts which go wasted because the final step of making them easily consumable by other people was never completed. Flask is an excellent way to achieve this last step, and the best part is: you already know how to use it.</p>","url":"https://hackersandslackers.com/creating-your-first-flask-application/","uuid":"dac63aa8-2a5d-4d3e-a6b1-cccc5785764c","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b426ec02d99b9040e300f74"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867368d","title":"Upgrading to Gulp 4.0.0","slug":"upgrading-to-gulp-4","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/06/gulp2@2x.jpg","excerpt":"Upgrading to Gulp 4 and tackling the breaking changes that come with it.","custom_excerpt":"Upgrading to Gulp 4 and tackling the breaking changes that come with it.","created_at_pretty":"27 June, 2018","published_at_pretty":"28 June, 2018","updated_at_pretty":"10 April, 2019","created_at":"2018-06-27T11:06:39.000-04:00","published_at":"2018-06-28T07:30:00.000-04:00","updated_at":"2019-04-09T21:11:52.000-04:00","meta_title":"Upgrading to Gulp 4.0.0 | Hackers and Slackers","meta_description":"Upgrading to Gulp 4 and tackling the breaking changes that come with it.","og_description":"Upgrading to Gulp 4 and tackling the breaking changes that come with it.","og_image":"https://hackersandslackers.com/content/images/2018/06/gulp2@2x.jpg","og_title":"Upgrading to Gulp 4.0.0","twitter_description":"Upgrading to Gulp 4 and tackling the breaking changes that come with it.","twitter_image":"https://hackersandslackers.com/content/images/2018/06/gulp2@2x.jpg","twitter_title":"Upgrading to Gulp 4.0.0","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},"tags":[{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},{"name":"Frontend","slug":"frontend","description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","feature_image":null,"meta_description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","meta_title":"Frontend Development | Hackers and Slackers","visibility":"public"},{"name":"ExpressJS","slug":"expressjs","description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch as a simplistic Express app can evolve into a beautiful monstrosity.","feature_image":null,"meta_description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch a simplistic Express app can evolve into a beautiful monstrosity.","meta_title":"ExpressJS Framework | Hackers and Slackers","visibility":"public"},{"name":"JavaScript","slug":"javascript","description":"JavaScript covering both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","feature_image":null,"meta_description":"JavaScript topics, both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","meta_title":"Javascript Tutorials | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"}],"plaintext":"Back in the day we touched on some of the wonderful upsides of implementing Gulp\n[https://hackersandslackers.com/using-gulp-to-make-frontend-tolerable/]  into\nyour workflow. If you have been following along and happened to install the\nlatest version of Gulp, you may has noticed something horrible happen: nothing\nworked. I probably should’ve mentioned that the latest major update to Gulp,\nGulp 4, is actually a breaking update. That's my bad.\n\nStrangely, documentation around upgrading from Gulp 3.X to Gulp 4 seems to be\nlagging way behind this release, with the closest thing to official\ndocumentation being some article a guy posted on Medium a while back.\nInteresting strategy, Gulp team.\n\nWhat's the Big Deal?\nThere are a couple architectural differences with Gulp 4, for the better.\nPreviously Gulp would allows us to hold off on executing tasks until dependent\ntask were completed. If task C were dependent on the completion of tasks both A\nand B, we would represent this as such:\n\ngulp.task('default', ['A', 'B'], function() {etc});\n\ngulp.task('A', ['C'], function() {etc});\ngulp.task('B', ['C'], function() {etc});\n\ngulp.task('C', function() {etc});\n\n\nWhile this was an effective way of handling such a workflow, Gulp has made the\nprocess a bit cleaner and easier to digest with the additions of gulp.parallel \nand gulp.series.\n\nParallel  denotes tasks which should be executed in parallel, aka the same time.\n\nSeries  defines a linear order of how tasks should be executed. Parallels can\nexist inside of series, effectively resulting in a fork of tasks before moving\nto the next task in the series:\n\ngulp.task('A', function() {etc});\ngulp.task('B', function() {etc});\n\ngulp.task('C', function() {etc});\n\ngulp.task('default', gulp.series('C', gulp.parallel('A', 'B'), function() {etc}));\n\n\nIn this case, Task C forks into Tasks A and B before converging on their merry\nway to the rest of the series.\n\nQuick Install\nTo get your hands on this, first uninstall your current versions of Gulp and\nGulp CLI:\n\nnpm uninstall gulp --save-dev\nnpm uninstall gulp -g\n\n\nThen we can go ahead and reinstall Gulp as normal. Feel free to force the\nversion:\n\nnpm install gulp-cli -g\nnpm install gulp@4.0.0 -D\n\n\nExample Gulp File\nEnough with all the jargon, we both know what you came here for. let me just\npost what I see to be the bare minimum Gulpfile for your copy and pasting\npleasure:\n\nvar gulp \t= require('gulp'),\n  \tless \t= require('gulp-less'),\n  \tconcat \t= require('gulp-concat'),\n  \tuglify \t= require('gulp-uglify'),\n  \trename \t= require('gulp-rename'),\n    handlebars = require('gulp-handlebars'),\n    declare = require('gulp-declare'),\n    cleanCSS = require('gulp-clean-css');\n\nvar paths = {\n  styles: {\n    src: 'src/less/*.less',\n    dest: 'assets/css'\n  },\n  scripts: {\n    src: 'src/js/*.js',\n    dest: 'assets/js'\n  },\n  html: {\n    src: 'views/*.hbs',\n    dest: 'assets/'\n  }\n};\n\nfunction styles() {\n  return gulp\n  \t.src(paths.styles.src, {\n      sourcemaps: true\n    })\n\t.pipe(less())\n\t.pipe(rename({\n\t  basename: 'main',\n\t  suffix: '.min'\n\t}))\n.pipe(cleanCSS({debug: true}))\n.pipe(concat('main.min.css'))\n.pipe(gulp.dest(paths.styles.dest));\n}\n\nfunction scripts() {\n  return gulp\n\t.src(paths.scripts.src, {\n\t\tsourcemaps: true\n\t})\n\t.pipe(uglify())\n\t.pipe(concat('main.min.js'))\n\t.pipe(gulp.dest(paths.scripts.dest));\n}\n\nfunction templates(){\n  gulp.src('views/*.hbs')\n    .pipe(handlebars())\n    //.pipe(wrap('Handlebars.template(<%= contents %>)'))\n    .pipe(declare({\n      namespace: 'MyApp.templates',\n      noRedeclare: true, // Avoid duplicate declarations\n    }))\n    .pipe(concat('templates.js'))\n    .pipe(gulp.dest('assets/js/'));\n}\n\nfunction watch() {\n  gulp.watch(paths.scripts.src, scripts);\n  gulp.watch(paths.styles.src, styles);\n}\n\nvar build = gulp.parallel(styles, scripts, templates, watch);\n\ngulp.task(build);\ngulp.task('default', build);\n\n\nNothing crazy here: just the typical concat and minification of source files.\n\nHopefully this helps somebody wondering why their latest Gulp installation broke\ntheir Gulpfile. Perhaps next time we'll dig down deep into the shadows of Gulp\nplugins to reveal secret elite legendary Gulp hacks for 1337 hax0rs only. Or\nnot, we could do whatever honestly.","html":"<p>Back in the day we touched on some of the wonderful upsides of <a href=\"https://hackersandslackers.com/using-gulp-to-make-frontend-tolerable/\">implementing Gulp</a> into your workflow. If you have been following along and happened to install the latest version of Gulp, you may has noticed something horrible happen: <em>nothing worked</em>. I probably should’ve mentioned that the latest major update to Gulp, Gulp 4, is actually a breaking update. That's my bad.</p><p>Strangely, documentation around upgrading from Gulp 3.X to Gulp 4 seems to be lagging way behind this release, with the closest thing to official documentation being some article a guy posted on Medium a while back. Interesting strategy, Gulp team.</p><h2 id=\"what-s-the-big-deal\">What's the Big Deal?</h2><p>There are a couple architectural differences with Gulp 4, for the better. Previously Gulp would allows us to hold off on executing tasks until dependent task were completed. If task C were dependent on the completion of tasks both A and B, we would represent this as such:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">gulp.task('default', ['A', 'B'], function() {etc});\n\ngulp.task('A', ['C'], function() {etc});\ngulp.task('B', ['C'], function() {etc});\n\ngulp.task('C', function() {etc});\n</code></pre>\n<!--kg-card-end: markdown--><p>While this was an effective way of handling such a workflow, Gulp has made the process a bit cleaner and easier to digest with the additions of <strong>gulp.parallel</strong> and <strong>gulp.series</strong>.</p><p><strong>Parallel</strong> denotes tasks which should be executed in parallel, aka the same time.</p><p><strong>Series</strong> defines a linear order of how tasks should be executed. Parallels can exist inside of series, effectively resulting in a fork of tasks before moving to the next task in the series:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">gulp.task('A', function() {etc});\ngulp.task('B', function() {etc});\n\ngulp.task('C', function() {etc});\n\ngulp.task('default', gulp.series('C', gulp.parallel('A', 'B'), function() {etc}));\n</code></pre>\n<!--kg-card-end: markdown--><p>In this case, Task C forks into Tasks A and B before converging on their merry way to the rest of the series.</p><h2 id=\"quick-install\">Quick Install</h2><p>To get your hands on this, first uninstall your current versions of Gulp and Gulp CLI:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">npm uninstall gulp --save-dev\nnpm uninstall gulp -g\n</code></pre>\n<!--kg-card-end: markdown--><p>Then we can go ahead and reinstall Gulp as normal. Feel free to force the version:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">npm install gulp-cli -g\nnpm install gulp@4.0.0 -D\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"example-gulp-file\">Example Gulp File</h2><p>Enough with all the jargon, we both know what you came here for. let me just post what I see to be the bare minimum Gulpfile for your copy and pasting pleasure:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">var gulp \t= require('gulp'),\n  \tless \t= require('gulp-less'),\n  \tconcat \t= require('gulp-concat'),\n  \tuglify \t= require('gulp-uglify'),\n  \trename \t= require('gulp-rename'),\n    handlebars = require('gulp-handlebars'),\n    declare = require('gulp-declare'),\n    cleanCSS = require('gulp-clean-css');\n\nvar paths = {\n  styles: {\n    src: 'src/less/*.less',\n    dest: 'assets/css'\n  },\n  scripts: {\n    src: 'src/js/*.js',\n    dest: 'assets/js'\n  },\n  html: {\n    src: 'views/*.hbs',\n    dest: 'assets/'\n  }\n};\n\nfunction styles() {\n  return gulp\n  \t.src(paths.styles.src, {\n      sourcemaps: true\n    })\n\t.pipe(less())\n\t.pipe(rename({\n\t  basename: 'main',\n\t  suffix: '.min'\n\t}))\n.pipe(cleanCSS({debug: true}))\n.pipe(concat('main.min.css'))\n.pipe(gulp.dest(paths.styles.dest));\n}\n\nfunction scripts() {\n  return gulp\n\t.src(paths.scripts.src, {\n\t\tsourcemaps: true\n\t})\n\t.pipe(uglify())\n\t.pipe(concat('main.min.js'))\n\t.pipe(gulp.dest(paths.scripts.dest));\n}\n\nfunction templates(){\n  gulp.src('views/*.hbs')\n    .pipe(handlebars())\n    //.pipe(wrap('Handlebars.template(&lt;%= contents %&gt;)'))\n    .pipe(declare({\n      namespace: 'MyApp.templates',\n      noRedeclare: true, // Avoid duplicate declarations\n    }))\n    .pipe(concat('templates.js'))\n    .pipe(gulp.dest('assets/js/'));\n}\n\nfunction watch() {\n  gulp.watch(paths.scripts.src, scripts);\n  gulp.watch(paths.styles.src, styles);\n}\n\nvar build = gulp.parallel(styles, scripts, templates, watch);\n\ngulp.task(build);\ngulp.task('default', build);\n</code></pre>\n<!--kg-card-end: markdown--><p>Nothing crazy here: just the typical concat and minification of source files.</p><p>Hopefully this helps somebody wondering why their latest Gulp installation broke their Gulpfile. Perhaps next time we'll dig down deep into the shadows of Gulp plugins to reveal secret elite legendary Gulp hacks for 1337 hax0rs only. Or not, we could do whatever honestly.</p>","url":"https://hackersandslackers.com/upgrading-to-gulp-4/","uuid":"deb7ac06-d159-4c66-8d8a-11442ffbb395","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b33a7ff1e2df4575e4c101c"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867368c","title":"Building Page Templates in ExpressJS With Handlebars","slug":"handlebars-templating-in-expressjs","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/handlebars.jpg","excerpt":"Building views in NodeJS by incorporating layouts, partials, and everything in between.","custom_excerpt":"Building views in NodeJS by incorporating layouts, partials, and everything in between.","created_at_pretty":"25 June, 2018","published_at_pretty":"26 June, 2018","updated_at_pretty":"05 March, 2019","created_at":"2018-06-25T16:39:57.000-04:00","published_at":"2018-06-26T18:52:57.000-04:00","updated_at":"2019-03-04T21:54:13.000-05:00","meta_title":"Handlebars Templating in ExpressJS | Hackers and Slackers","meta_description":"Building views in NodeJS by incorporating layouts, partials, and everything in between.","og_description":"Building views in NodeJS by incorporating layouts, partials, and everything in between.","og_image":"https://hackersandslackers.com/content/images/2019/03/handlebars.jpg","og_title":"Handlebars Templating in ExpressJS","twitter_description":"Building views in NodeJS by incorporating layouts, partials, and everything in between.","twitter_image":"https://hackersandslackers.com/content/images/2019/03/handlebars.jpg","twitter_title":"Handlebars Templating in ExpressJS","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},"tags":[{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},{"name":"Frontend","slug":"frontend","description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","feature_image":null,"meta_description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","meta_title":"Frontend Development | Hackers and Slackers","visibility":"public"},{"name":"ExpressJS","slug":"expressjs","description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch as a simplistic Express app can evolve into a beautiful monstrosity.","feature_image":null,"meta_description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch a simplistic Express app can evolve into a beautiful monstrosity.","meta_title":"ExpressJS Framework | Hackers and Slackers","visibility":"public"},{"name":"JavaScript","slug":"javascript","description":"JavaScript covering both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","feature_image":null,"meta_description":"JavaScript topics, both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","meta_title":"Javascript Tutorials | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"}],"plaintext":"Writing HTML sucks, thus we should do everything to minimize the time we spend\nwriting it as much as possible.  Thus, we have Handlebars\n[https://handlebarsjs.com/]: a lightweight templating system for Node.\nHandlebars allows us to avoid repetitive code by compiling the final DOM\nstructure of our site via logic, typically compiled by task runners such as\nGrunt or Gulp.\n\nIf you're involved in any sort of Node development, you're probably already\nfamiliar with Handlebars to a degree. I thought I was, but it isn't until we\nneed to start a new project from scratch that we realize that we totally forgot\nthe configuration process we took last time. That's why I'm here.\n\nLet's have a quick refresher on the parts that make up Handlebars\n\n * Layouts  are the most ambiguous high-level layer; these are commonly used to\n   set underlying page metadata as well as general layout (for lack of a better\n   term).\n * Pages  are templates which equate to one type  of page. For example, the\n   'post' page on this site is unique from, say, the homepage. Because all posts\n   share elements with one another, hundreds of posts share this same template.\n * Partials  are snippets which can be shared between pages, such as navigation.\n * A Context  is content which is passed to templates and result in being the\n   page's content\n * Helpers  are the closest we get to logic in Handlebars: these allow us to\n   display or omit content based on conditionals such as if  statements. For\n   example: showing an author's avatar only if they have uploaded an image.\n\nProject Setup\nWe're going to use the Express /views  folder to contain all of our handlebars\ngoodness. Our project should look something like this:\n\nmyapp\n├── bin\n├── build\n├── routes\n├── src\n├── views\n│   ├── layouts/\n│   ├── partials/\n│   └── error.hbs\n│   └── index.hbs\n│   └── login.hbs\n│   └── etc\n└── README.md\n└── app.js\n└── package.json\n\n\nIt's important to distinguish that we've separated our views folder into three\nclassifications for layouts, partials, and pages, where pages occupy the root \n/views  directory. It's important to keep this distinction as our structure\naffects how we serve up these templates.\n\nConfigure that Ish\nInstall handlebars:\n\nnpm install handlebars --save\n\n\nCrack open your app.js  file or whatever it is you call that thing. Require\nhandlebars:\n\nvar hbs = require( 'express-handlebars');\n\n\nNext we'll configure Express to use Handlebars as the view engine, and tell\nExpress where to find these files:\n\n// view engine setup\napp.set('view engine', 'hbs');\n\napp.engine( 'hbs', hbs( {\n  extname: 'hbs',\n  defaultView: 'default',\n  layoutsDir: __dirname + '/views/pages/',\n  partialsDir: __dirname + '/views/partials/'\n}));\n\n\nExpress assumes by default that we're storing our views in the '/views' folder,\nwhich we are. We take this a step further by specifying which subfolders our \npartials  and layouts  are in above. We can save pages  directly in /views.\n\nNotice that we're also setting a default layout. We can override this in our\nroutes if needed, but setting a default layout is useful for loading pages in an\nhtml wrapper container page metadata.\n\nKicks on Route 66\nLet's create our first route in routes/index.js. We're going to load a view\ncalled home  into a layout called default:\n\nvar express = require('express');\nvar router = express.Router();\n\nrouter.get('/', function(req, res, next) {\n  res.render('home', {layout: 'default', template: 'home-template'});\n});\n\n\nThis will render views/home.hbs  into views/layouts/default.hbs, provided are\nviews are set up correctly. We also pass a custom value template  which is\nuser-defined; more on that below.\n\nBasic Usage\nLet's finally take a look at our actual Handlebars views. Here's default.hbs:\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <title>Best Website</title>\n  <meta name=\"HandheldFriendly\" content=\"True\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, viewport-fit=cover\" />\n  <link rel=\"stylesheet\" href=\"/css/main.min.css\">\n</head>\n<body class=\"{{template}}\">\n  <div class=\"container\">\n\t  {{{body}}}\n  </div>\n  {{> footer}}\n</body>\n</html>\n\n\nWe have three values here: {{template}}  and {{{body}}}, and {{> footer}}.\n\n{{template}}  is a value with double brackets, thus is expecting linear data. We\npassed template  in our route: this sets the body class to equal home-template \non the chance that we'll want to apply page-specific styles or logic in the\nfuture.\n\n{{{body}}}  is rocking the triple brackets, and is reserved specifically to\nserve this purpose: loading templates into other templates.\n\nLastly we have {{> footer}}. This will load a partial named footer  from \nviews/partials/footer.hbs, provided that we create it. The difference between\nhow {{{body}}}  and {{> footer}}  are being loaded have to do with a general\nworkflow philosophy; pages are the main event and thus are loaded into layouts\nby their command. Partials can be called by pages at will whenever we please.\n\nThere's obviously a lot more to Handlebars- the fun doesn't truly begin until we\npull dynamic values from databases or wherever. We'll get there.","html":"<p>Writing HTML sucks, thus we should do everything to minimize the time we spend writing it as much as possible.  Thus, we have <a href=\"https://handlebarsjs.com/\">Handlebars</a>: a lightweight templating system for Node. Handlebars allows us to avoid repetitive code by compiling the final DOM structure of our site via logic, typically compiled by task runners such as Grunt or Gulp.</p><p>If you're involved in any sort of Node development, you're probably already familiar with Handlebars to a degree. I thought I was, but it isn't until we need to start a new project from scratch that we realize that we totally forgot the configuration process we took last time. That's why I'm here.</p><p>Let's have a quick refresher on the parts that make up Handlebars</p><ul><li><strong>Layouts</strong> are the most ambiguous high-level layer; these are commonly used to set underlying page metadata as well as general layout (for lack of a better term).</li><li><strong>Pages</strong> are templates which equate to one <em>type</em> of page. For example, the 'post' page on this site is unique from, say, the homepage. Because all posts share elements with one another, hundreds of posts share this same template.</li><li><strong>Partials</strong> are snippets which can be shared between pages, such as navigation.</li><li>A <strong>Context</strong> is content which is passed to templates and result in being the page's content</li><li><strong>Helpers</strong> are the closest we get to logic in Handlebars: these allow us to display or omit content based on conditionals such as <em>if</em> statements. For example: showing an author's avatar only if they have uploaded an image.</li></ul><h2 id=\"project-setup\">Project Setup</h2><p>We're going to use the Express <em>/views</em> folder to contain all of our handlebars goodness. Our project should look something like this:</p><pre><code class=\"language-bash\">myapp\n├── bin\n├── build\n├── routes\n├── src\n├── views\n│   ├── layouts/\n│   ├── partials/\n│   └── error.hbs\n│   └── index.hbs\n│   └── login.hbs\n│   └── etc\n└── README.md\n└── app.js\n└── package.json\n</code></pre>\n<p>It's important to distinguish that we've separated our views folder into three classifications for <strong>layouts</strong>, <strong>partials</strong>, and <strong>pages</strong>, where pages occupy the root <code>/views</code> directory. It's important to keep this distinction as our structure affects how we serve up these templates.</p><h2 id=\"configure-that-ish\">Configure that Ish</h2><p>Install handlebars:</p><pre><code class=\"language-bash\">npm install handlebars --save\n</code></pre>\n<p>Crack open your <code>app.js</code> file or whatever it is you call that thing. Require handlebars:</p><pre><code class=\"language-javascript\">var hbs = require( 'express-handlebars');\n</code></pre>\n<p>Next we'll configure Express to use Handlebars as the view engine, and tell Express where to find these files:</p><pre><code class=\"language-javascript\">// view engine setup\napp.set('view engine', 'hbs');\n\napp.engine( 'hbs', hbs( {\n  extname: 'hbs',\n  defaultView: 'default',\n  layoutsDir: __dirname + '/views/pages/',\n  partialsDir: __dirname + '/views/partials/'\n}));\n</code></pre>\n<p>Express assumes by default that we're storing our views in the '/views' folder, which we are. We take this a step further by specifying which subfolders our <strong>partials</strong> and <strong>layouts</strong> are in above. We can save <strong>pages</strong> directly in <code>/views</code>.</p><p>Notice that we're also setting a default layout. We can override this in our routes if needed, but setting a default layout is useful for loading pages in an html wrapper container page metadata.</p><h2 id=\"kicks-on-route-66\">Kicks on Route 66</h2><p>Let's create our first route in <code>routes/index.js</code>. We're going to load a view called <em>home</em> into a layout called <em>default</em>:</p><pre><code class=\"language-javascript\">var express = require('express');\nvar router = express.Router();\n\nrouter.get('/', function(req, res, next) {\n  res.render('home', {layout: 'default', template: 'home-template'});\n});\n</code></pre>\n<p>This will render <code>views/home.hbs</code> into <code>views/layouts/default.hbs</code>, provided are views are set up correctly. We also pass a custom value <strong>template</strong> which is user-defined; more on that below.</p><h2 id=\"basic-usage\">Basic Usage</h2><p>Let's finally take a look at our actual Handlebars views. Here's <strong>default.hbs</strong>:</p><pre><code class=\"language-handlebars\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset=&quot;utf-8&quot; /&gt;\n  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;\n  &lt;title&gt;Best Website&lt;/title&gt;\n  &lt;meta name=&quot;HandheldFriendly&quot; content=&quot;True&quot; /&gt;\n  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, viewport-fit=cover&quot; /&gt;\n  &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/main.min.css&quot;&gt;\n&lt;/head&gt;\n&lt;body class=&quot;{{template}}&quot;&gt;\n  &lt;div class=&quot;container&quot;&gt;\n\t  {{{body}}}\n  &lt;/div&gt;\n  {{&gt; footer}}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>We have three values here: <strong>{{template}}</strong> and <strong>{{{body}}}</strong>, and <strong>{{&gt; footer}}</strong>.</p><p><strong>{{template}}</strong> is a value with double brackets, thus is expecting linear data. We passed <em>template</em> in our route: this sets the body class to equal <em>home-template</em> on the chance that we'll want to apply page-specific styles or logic in the future.</p><p><strong>{{{body}}}</strong> is rocking the triple brackets, and is reserved specifically to serve this purpose: loading templates into other templates.</p><p>Lastly we have <strong>{{&gt; footer}}</strong>. This will load a partial named <em>footer</em> from <code>views/partials/footer.hbs</code>, provided that we create it. The difference between how <code>{{{body}}}</code> and <code>{{&gt; footer}}</code> are being loaded have to do with a general workflow philosophy; pages are the main event and thus are loaded into layouts by their command. Partials can be called by pages at will whenever we please.</p><p>There's obviously a lot more to Handlebars- the fun doesn't truly begin until we pull dynamic values from databases or wherever. We'll get there.</p>","url":"https://hackersandslackers.com/handlebars-templating-in-expressjs/","uuid":"9258a456-aee9-4d91-a36b-b1db735270b7","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b31531d04c0af72fa9a7681"}}]}},"pageContext":{"slug":"software-development","limit":12,"skip":12,"numberOfPages":3,"humanPageNumber":2,"prevPageNumber":1,"nextPageNumber":3,"previousPagePath":"/tag/software-development/","nextPagePath":"/tag/software-development/page/3/"}}