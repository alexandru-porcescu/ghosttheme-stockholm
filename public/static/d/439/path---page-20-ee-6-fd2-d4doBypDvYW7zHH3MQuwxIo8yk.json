{"data":{"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736de","title":"Lynx Roundup, August 23rd","slug":"lynx-roundup-august-23rd","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx54@2x.jpg","excerpt":"New open hardware!  Parallelization and why it can be hard!  Benefits from China's approach to IP!","custom_excerpt":"New open hardware!  Parallelization and why it can be hard!  Benefits from China's approach to IP!","created_at_pretty":"18 August, 2018","published_at_pretty":"23 August, 2018","updated_at_pretty":"23 August, 2018","created_at":"2018-08-18T00:21:17.000-04:00","published_at":"2018-08-23T07:00:00.000-04:00","updated_at":"2018-08-23T07:00:00.000-04:00","meta_title":"New open hardware!  Parallelization and why it can be hard!  Benefits from China's approach to IP! | Hackers And Slackers","meta_description":"New open hardware!  Parallelization and why it can be hard!  Benefits from China's approach to IP!","og_description":"New open hardware!  Parallelization and why it can be hard!  Benefits from China's approach to IP!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx54@2x.jpg","og_title":"Lynx Roundup, August 23rd","twitter_description":"New open hardware!  Parallelization and why it can be hard!  Benefits from China's approach to IP!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx54@2x.jpg","twitter_title":"Lynx Roundup, August 23rd","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.fastcompany.com/90208070/7-design-lessons-from-silicon-valleys-most-important-failure\n\n\n\nhttps://spectrum.ieee.org/semiconductors/devices/riscvs-opensource-architecture-shakes-up-chip-design\n\n\n\nhttps://logicmag.io/04-letter-from-shenzhen/\n\n\n\nhttps://semiengineering.com/why-parallelization-is-so-hard/\n\n\n\nhttps://coverclock.blogspot.com/2018/07/we-are-all-relying-on-gps-all-time.html\n\n\n\nhttps://semiengineering.com/machine-learnings-limits-3/\n\n\n\nhttps://cloudplatform.googleblog.com/2018/08/repairing-network-hardware-at-scale-with-sre-principles.html","html":"<p></p><p><a href=\"https://www.fastcompany.com/90208070/7-design-lessons-from-silicon-valleys-most-important-failure\">https://www.fastcompany.com/90208070/7-design-lessons-from-silicon-valleys-most-important-failure</a></p><p></p><p><a href=\"https://spectrum.ieee.org/semiconductors/devices/riscvs-opensource-architecture-shakes-up-chip-design\">https://spectrum.ieee.org/semiconductors/devices/riscvs-opensource-architecture-shakes-up-chip-design</a></p><p></p><p><a href=\"https://logicmag.io/04-letter-from-shenzhen/\">https://logicmag.io/04-letter-from-shenzhen/</a></p><p></p><p><a href=\"https://semiengineering.com/why-parallelization-is-so-hard/\">https://semiengineering.com/why-parallelization-is-so-hard/</a></p><p></p><p><a href=\"https://coverclock.blogspot.com/2018/07/we-are-all-relying-on-gps-all-time.html\">https://coverclock.blogspot.com/2018/07/we-are-all-relying-on-gps-all-time.html</a></p><p></p><p><a href=\"https://semiengineering.com/machine-learnings-limits-3/\">https://semiengineering.com/machine-learnings-limits-3/</a></p><p></p><p><a href=\"https://cloudplatform.googleblog.com/2018/08/repairing-network-hardware-at-scale-with-sre-principles.html\">https://cloudplatform.googleblog.com/2018/08/repairing-network-hardware-at-scale-with-sre-principles.html</a></p>","url":"https://hackersandslackers.com/lynx-roundup-august-23rd/","uuid":"913b6a55-d6ed-4e77-b08a-aae9bd768ee7","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b779ebdec281f15796ad293"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736dd","title":"Lynx Roundup, August 22nd","slug":"lynx-roundup-august-22nd","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx53@2x.jpg","excerpt":"In-browser tensor tool!  Facebook releases a tool that can answer questions about pictures!  Python classes with less boilerplate!","custom_excerpt":"In-browser tensor tool!  Facebook releases a tool that can answer questions about pictures!  Python classes with less boilerplate!","created_at_pretty":"18 August, 2018","published_at_pretty":"22 August, 2018","updated_at_pretty":"22 August, 2018","created_at":"2018-08-18T00:17:16.000-04:00","published_at":"2018-08-22T07:00:00.000-04:00","updated_at":"2018-08-22T07:00:00.000-04:00","meta_title":"In-browser tensor tool!  Facebook releases a tool that can answer questions about pictures!  Python classes with less boilerplate! | Hackers And Slackers","meta_description":"In-browser tensor tool!  Facebook releases a tool that can answer questions about pictures!  Python classes with less boilerplate!","og_description":"In-browser tensor tool!  Facebook releases a tool that can answer questions about pictures!  Python classes with less boilerplate!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx53@2x.jpg","og_title":"Lynx Roundup, August 22nd","twitter_description":"In-browser tensor tool!  Facebook releases a tool that can answer questions about pictures!  Python classes with less boilerplate!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx53@2x.jpg","twitter_title":"Lynx Roundup, August 22nd","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://github.com/mlajtos/L1\n\n\n\nhttps://blog.daftcode.pl/first-steps-with-python-type-system-30e4296722af\n\n\n\nhttps://lighttag.io/blog/embrace-the-noise/\n\n\n\nhttps://github.com/facebookresearch/pythia\n\n\n\nhttps://github.com/python-attrs/attrs\n\n\n\nhttps://www.datasciencecentral.com/profiles/blogs/practical-apache-spark-in-10-minutes-part-5-streaming\n\n\n\nhttps://hackaday.com/2018/08/02/web-pages-via-forth/","html":"<p></p><p><a href=\"https://github.com/mlajtos/L1\">https://github.com/mlajtos/L1</a></p><p></p><p><a href=\"https://blog.daftcode.pl/first-steps-with-python-type-system-30e4296722af\">https://blog.daftcode.pl/first-steps-with-python-type-system-30e4296722af</a></p><p></p><p><a href=\"https://lighttag.io/blog/embrace-the-noise/\">https://lighttag.io/blog/embrace-the-noise/</a></p><p></p><p><a href=\"https://github.com/facebookresearch/pythia\">https://github.com/facebookresearch/pythia</a></p><p></p><p><a href=\"https://github.com/python-attrs/attrs\">https://github.com/python-attrs/attrs</a></p><p></p><p><a href=\"https://www.datasciencecentral.com/profiles/blogs/practical-apache-spark-in-10-minutes-part-5-streaming\">https://www.datasciencecentral.com/profiles/blogs/practical-apache-spark-in-10-minutes-part-5-streaming</a></p><p></p><p><a href=\"https://hackaday.com/2018/08/02/web-pages-via-forth/\">https://hackaday.com/2018/08/02/web-pages-via-forth/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-august-22nd/","uuid":"1b41c44f-6313-4d32-b033-6a95724a2822","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b779dccec281f15796ad290"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736dc","title":"Lynx Roundup, August 21st","slug":"lynx-roundup-august-21st","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx52@2x.jpg","excerpt":"Stream processing in Python!  An accelerator for co-op startups!  Adding measures of uncertainty to your model!","custom_excerpt":"Stream processing in Python!  An accelerator for co-op startups!  Adding measures of uncertainty to your model!","created_at_pretty":"18 August, 2018","published_at_pretty":"21 August, 2018","updated_at_pretty":"21 August, 2018","created_at":"2018-08-18T00:11:15.000-04:00","published_at":"2018-08-21T07:00:00.000-04:00","updated_at":"2018-08-21T07:00:00.000-04:00","meta_title":"Stream processing in Python!  An accelerator for co-op startups!  Adding measures of uncertainty to your model! | Hackers And Slackers","meta_description":"Stream processing in Python!  An accelerator for co-op startups!  Adding measures of uncertainty to your model!","og_description":"Stream processing in Python!  An accelerator for co-op startups!  Adding measures of uncertainty to your model!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx52@2x.jpg","og_title":"Lynx Roundup, August 21st","twitter_description":"Stream processing in Python!  An accelerator for co-op startups!  Adding measures of uncertainty to your model!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx52@2x.jpg","twitter_title":"Lynx Roundup, August 21st","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://github.com/robinhood/faust\n\n\n\nhttp://www.iflscience.com/health-and-medicine/scientists-develop-a-strain-of-genetically-modified-rice-that-neutralizes-hiv/\n\n\n\nhttps://medium.com/@marinithiago/guys-rest-apis-are-not-databases-60db4e1120e4\n\n\n\nhttps://start.coop/\n\n\n\nhttp://w.pitula.me/2018/data-engineer-must-know/\n\n\n\nhttp://www.offconvex.org/2018/07/27/approximating-recurrent/\n\n\n\nhttps://engineering.taboola.com/using-uncertainty-interpret-model/","html":"<p></p><p><a href=\"https://github.com/robinhood/faust\">https://github.com/robinhood/faust</a></p><p></p><p><a href=\"http://www.iflscience.com/health-and-medicine/scientists-develop-a-strain-of-genetically-modified-rice-that-neutralizes-hiv/\">http://www.iflscience.com/health-and-medicine/scientists-develop-a-strain-of-genetically-modified-rice-that-neutralizes-hiv/</a></p><p></p><p><a href=\"https://medium.com/@marinithiago/guys-rest-apis-are-not-databases-60db4e1120e4\">https://medium.com/@marinithiago/guys-rest-apis-are-not-databases-60db4e1120e4</a></p><p></p><p><a href=\"https://start.coop/\">https://start.coop/</a></p><p></p><p><a href=\"http://w.pitula.me/2018/data-engineer-must-know/\">http://w.pitula.me/2018/data-engineer-must-know/</a></p><p></p><p><a href=\"http://www.offconvex.org/2018/07/27/approximating-recurrent/\">http://www.offconvex.org/2018/07/27/approximating-recurrent/</a></p><p></p><p><a href=\"https://engineering.taboola.com/using-uncertainty-interpret-model/\">https://engineering.taboola.com/using-uncertainty-interpret-model/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-august-21st/","uuid":"6b73c864-96da-42d7-bf9b-84e8d1fbfeeb","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b779c63ec281f15796ad28d"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736d6","title":"Importing Excel Datetimes Into Pandas, Part II","slug":"importing-excel-datetimes-into-pandas-part-2","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/04/excelpandas.jpg","excerpt":"Pandas and Excel Pt. 2","custom_excerpt":"Pandas and Excel Pt. 2","created_at_pretty":"13 August, 2018","published_at_pretty":"20 August, 2018","updated_at_pretty":"10 April, 2019","created_at":"2018-08-12T22:28:46.000-04:00","published_at":"2018-08-20T07:30:00.000-04:00","updated_at":"2019-04-10T00:47:31.000-04:00","meta_title":"Pandas and Excel Pt. 2 | Hackers And Slackers","meta_description":"Read date times from Excel files into a Pandas DataFrame. Utilize Python's Arrow and Toolz libraries to write a quick script for date extraction.","og_description":"Read date times from Excel files into a Pandas DataFrame. Utilize Python's Arrow and Toolz libraries to write a quick script for date extraction.","og_image":"https://hackersandslackers.com/content/images/2019/04/excelpandas-2.jpg","og_title":"Importing Excel Datetimes Into Pandas II","twitter_description":"Read date times from Excel files into a Pandas DataFrame. Utilize Python's Arrow and Toolz libraries to write a quick script for date extraction.","twitter_image":"https://hackersandslackers.com/content/images/2019/04/excelpandas-1.jpg","twitter_title":"Importing Excel Datetimes Into Pandas II","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Pandas","slug":"pandas","description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/pandasmerge.jpg","meta_description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","meta_title":"Pythons and Pandas | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Pandas","slug":"pandas","description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/pandasmerge.jpg","meta_description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","meta_title":"Pythons and Pandas | Hackers and Slackers","visibility":"public"},{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Code Snippet Corner","slug":"codesnippetcorner","description":"Real-world examples of Python being used to solve complex data problems, primarily using Jupyter notebooks.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o-1.jpg","meta_description":"Real-world examples of Python being used to solve complex data problems.","meta_title":"Python Code Snippet Corner","visibility":"public"},{"name":"#Code Snippet Corner","slug":"code-snippet-corner","description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o_o.jpg","meta_description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","meta_title":"Python Code Snippet Corner","visibility":"internal"}],"plaintext":"What if, like during my data import task a few months back, the dates & times\nare in separate columns?  This gives us a few new issues.  Let's import that\nExcel file!\n\nimport pandas as pd\nimport xlrd\nimport datetime\n\ndf = pd.read_excel(\"hasDatesAndTimes.xlsx\", sheet_name=\"Sheet1\")\n\nbook = xlrd.open_workbook(\"hasDatesAndTimes.xlsx\")\ndatemode = book.datemode\n\n\n\nAnd let's see that time variable!\n\ndf[\"Time\"]\n\n\nIndex\n Time\n 0\n 0.909907\n 1\n 0.909919\n 2\n 0.909931\n 3\n 0.909942\n 4\n 0.909954\n df[\"Time\"].map(lambda x: xlrd.xldate_as_tuple(x, datemode))\n\n\nSo far, so good....\n\ndf[\"Time\"].map(lambda x: datetime.datetime(*xlrd.xldate_as_tuple(x, \n                                              datemode)))\nValueError: year 0 is out of range\n\n\nAgh!  Plain datetime won't let us have 0 as our year.\n\nWe'll want two packages to fix this.  One is an awesome package for handling\ndates called arrow.  In order for arrow  to recognize what we want it to,\nthough, we'll need some more manipulations - I'll be using the pipe  function\nfrom toolz  in order to make that more readable.\n\nIndex\n Time\n 0\n (0, 0, 0, 21, 50, 16)\n 1\n (0, 0, 0, 21, 50, 17)\n 2\n (0, 0, 0, 21, 50, 18)\n 3\n (0, 0, 0, 21, 50, 19)\n 4\n (0, 0, 0, 21, 50, 20)\n Pipe lets us have a nice workflow where we just list the transformations we\nwant, and our value will be \"piped\" sequentially through each one.\n\nfns = [lambda x: xlrd.xldate_as_tuple(x, datemode),\n     lambda x: x[3:6],\n      lambda x: map(str, x),\n      lambda x: \"-\".join(x),\n       lambda x: arrow.get(x, \"H-m-s\"),\n       lambda x: x.format('HH:mm:ss')\n      ]\n\n\nLet's see a blow-by-blow of how one of our values gets transformed by that.\n\nfnRanges = [fns[:i+1] for i in range(len(fns))]\n[pipe(0.909907, *x) for x in fnRanges]\n\n[(0, 0, 0, 21, 50, 16),\n (21, 50, 16),\n <map at 0x7f105151af98>,\n '21-50-16',\n <Arrow [0001-01-01T21:50:16+00:00]>,\n '21:50:16']\n\n\nThe first function takes us from an Excel datetime to a datetime tuple.\n\nThe next extracts just the time variables.\n\nWe then map that all to a string (which shows up as nothing because map  is\nevaluated lazily).\n\nThen we put a dash between all those elements so it'll be easier to parse as a\ntime.\n\nThen arrow  consumes the value, with the format we specified.\n\nAnd finally gives us a neatly-formatted time, ready to be consumed by a\ndatabase!\n\nHelper Functions\ndef mapPipe(ser, fns):\n    return ser.map(lambda a: pipe(a, *fns),\n        na_action=\"ignore\" )\n\nmapPipe(df['Time'],\n   fns)\n\n\nIndex\n Time\n 0\n 21:50:16\n 1\n 21:50:17\n 2\n 21:50:18\n 3\n 21:50:19\n 4\n 21:50:20\n Dates are a bit easier - though the pipe  syntax is still helpful!\n\ndateFns = [lambda x: xlrd.xldate_as_tuple(x, datemode),\n      lambda x: arrow.get(*x),\n      lambda x: x.format('YYYY-MM-DD')\n      ]\nmapPipe(df['Date'],\n       dateFns)\n\n\nIndex\n Date\n 0\n 2018-08-12\n 1\n 2018-08-12\n 2\n 2018-08-12\n 3\n 2018-08-12\n 4\n 2018-08-12\n Put it all together....\n\n(df.assign(Date = mapPipe(df['Date'],\n       dateFns))\n   .assign(Time = mapPipe(df['Time'],\n       fns)))\n\n\nIndex\n Date\n Time\n 0\n 2018-08-12\n 21:50:16\n 1\n 2018-08-12\n 21:50:17\n 2\n 2018-08-12\n 21:50:18\n 3\n 2018-08-12\n 21:50:19\n 4\n 2018-08-12\n 21:50:20","html":"<p>What if, like during my data import task a few months back, the dates &amp; times are in separate columns?  This gives us a few new issues.  Let's import that Excel file!</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">import pandas as pd\nimport xlrd\nimport datetime\n\ndf = pd.read_excel(&quot;hasDatesAndTimes.xlsx&quot;, sheet_name=&quot;Sheet1&quot;)\n\nbook = xlrd.open_workbook(&quot;hasDatesAndTimes.xlsx&quot;)\ndatemode = book.datemode\n\n</code></pre>\n<!--kg-card-end: markdown--><p>And let's see that time variable!</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">df[&quot;Time&quot;]\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: html--><div class=\"tableContainer\">\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Index</th>\n      <th>Time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>0.909907</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>0.909919</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>0.909931</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>0.909942</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>0.909954</td>\n    </tr>\n  </tbody>\n</table>\n</div><!--kg-card-end: html--><!--kg-card-begin: markdown--><pre><code class=\"language-python\">df[&quot;Time&quot;].map(lambda x: xlrd.xldate_as_tuple(x, datemode))\n</code></pre>\n<!--kg-card-end: markdown--><p>So far, so good....</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">df[&quot;Time&quot;].map(lambda x: datetime.datetime(*xlrd.xldate_as_tuple(x, \n                                              datemode)))\nValueError: year 0 is out of range\n</code></pre>\n<!--kg-card-end: markdown--><p>Agh!  Plain datetime won't let us have 0 as our year.</p><p>We'll want two packages to fix this.  One is an awesome package for handling dates called <code>arrow</code>.  In order for <code>arrow</code> to recognize what we want it to, though, we'll need some more manipulations - I'll be using the <code>pipe</code> function from <code>toolz</code> in order to make that more readable.</p><!--kg-card-begin: html--><div class=\"tableContainer\">\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Index</th>\n      <th>Time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>(0, 0, 0, 21, 50, 16)</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>(0, 0, 0, 21, 50, 17)</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>(0, 0, 0, 21, 50, 18)</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>(0, 0, 0, 21, 50, 19)</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>(0, 0, 0, 21, 50, 20)</td>\n    </tr>\n  </tbody>\n</table>\n</div><!--kg-card-end: html--><p>Pipe lets us have a nice workflow where we just list the transformations we want, and our value will be \"piped\" sequentially through each one.</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">fns = [lambda x: xlrd.xldate_as_tuple(x, datemode),\n     lambda x: x[3:6],\n      lambda x: map(str, x),\n      lambda x: &quot;-&quot;.join(x),\n       lambda x: arrow.get(x, &quot;H-m-s&quot;),\n       lambda x: x.format('HH:mm:ss')\n      ]\n</code></pre>\n<!--kg-card-end: markdown--><p>Let's see a blow-by-blow of how one of our values gets transformed by that.</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">fnRanges = [fns[:i+1] for i in range(len(fns))]\n[pipe(0.909907, *x) for x in fnRanges]\n\n[(0, 0, 0, 21, 50, 16),\n (21, 50, 16),\n &lt;map at 0x7f105151af98&gt;,\n '21-50-16',\n &lt;Arrow [0001-01-01T21:50:16+00:00]&gt;,\n '21:50:16']\n</code></pre>\n<!--kg-card-end: markdown--><p>The first function takes us from an Excel datetime to a datetime tuple.</p><p>The next extracts just the time variables.</p><p>We then map that all to a string (which shows up as nothing because <code>map</code> is evaluated lazily).</p><p>Then we put a dash between all those elements so it'll be easier to parse as a time.</p><p>Then <code>arrow</code> consumes the value, with the format we specified.</p><p>And finally gives us a neatly-formatted time, ready to be consumed by a database!</p><h2 id=\"helper-functions\">Helper Functions</h2><!--kg-card-begin: markdown--><pre><code class=\"language-python\">def mapPipe(ser, fns):\n    return ser.map(lambda a: pipe(a, *fns),\n        na_action=&quot;ignore&quot; )\n\nmapPipe(df['Time'],\n   fns)\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: html--><div class=\"tableContainer\">\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Index</th>\n      <th>Time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>21:50:16</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>21:50:17</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>21:50:18</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>21:50:19</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>21:50:20</td>\n    </tr>\n  </tbody>\n</table>\n</div><!--kg-card-end: html--><p>Dates are a bit easier - though the <code>pipe</code> syntax is still helpful!</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">dateFns = [lambda x: xlrd.xldate_as_tuple(x, datemode),\n      lambda x: arrow.get(*x),\n      lambda x: x.format('YYYY-MM-DD')\n      ]\nmapPipe(df['Date'],\n       dateFns)\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: html--><div class=\"tableContainer\">\n    <table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Index</th>\n      <th>Date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>2018-08-12</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>2018-08-12</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>2018-08-12</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>2018-08-12</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>2018-08-12</td>\n    </tr>\n  </tbody>\n</table>\n</div><!--kg-card-end: html--><p>Put it all together....</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">(df.assign(Date = mapPipe(df['Date'],\n       dateFns))\n   .assign(Time = mapPipe(df['Time'],\n       fns)))\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: html--><div class=\"tableContainer\">\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Index</th>\n      <th>Date</th>\n      <th>Time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>2018-08-12</td>\n      <td>21:50:16</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>2018-08-12</td>\n      <td>21:50:17</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>2018-08-12</td>\n      <td>21:50:18</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>2018-08-12</td>\n      <td>21:50:19</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>2018-08-12</td>\n      <td>21:50:20</td>\n    </tr>\n  </tbody>\n</table>\n</div><!--kg-card-end: html-->","url":"https://hackersandslackers.com/importing-excel-datetimes-into-pandas-part-2/","uuid":"f106291a-af02-4b8a-87b4-7afe333a9548","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b70ecde0230162100a1daa5"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736db","title":"Lynx Roundup, August 20th","slug":"lynx-roundup-august-20th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx51@2x.jpg","excerpt":"Functional Python!  Data science resumes!  A mathematical model of hallucinations!","custom_excerpt":"Functional Python!  Data science resumes!  A mathematical model of hallucinations!","created_at_pretty":"18 August, 2018","published_at_pretty":"20 August, 2018","updated_at_pretty":"20 August, 2018","created_at":"2018-08-18T00:08:14.000-04:00","published_at":"2018-08-20T07:00:00.000-04:00","updated_at":"2018-08-20T07:00:00.000-04:00","meta_title":"Functional Python!  Data science resumes!  A mathematical model of hallucinations! | Hackers And Slackers","meta_description":"Functional Python!  Data science resumes!  A mathematical model of hallucinations!","og_description":"Functional Python!  Data science resumes!  A mathematical model of hallucinations!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx51@2x.jpg","og_title":"Lynx Roundup, August 20th","twitter_description":"Functional Python!  Data science resumes!  A mathematical model of hallucinations!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx51@2x.jpg","twitter_title":"Lynx Roundup, August 20th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.dashdaq.io/python-data-acquisition\n\n\n\nhttp://flowingdata.com/2018/07/30/searching-for-education-deserts/\n\n\n\nhttps://hackernoon.com/learn-functional-python-in-10-minutes-to-2d1651dece6f\n\n\n\nhttps://www.quantamagazine.org/a-math-theory-for-why-people-hallucinate-20180730/\n\n\n\nhttp://www.complexity-explorables.org/explorables/yokohonen/\n\n\n\nhttps://www.quora.com/How-should-someone-applying-for-data-science-positions-structure-their-resume-CV\n\n\n\nhttps://neurosciencenews.com/experience-visual-perception-9636/","html":"<p></p><p><a href=\"https://www.dashdaq.io/python-data-acquisition\">https://www.dashdaq.io/python-data-acquisition</a></p><p></p><p><a href=\"http://flowingdata.com/2018/07/30/searching-for-education-deserts/\">http://flowingdata.com/2018/07/30/searching-for-education-deserts/</a></p><p></p><p><a href=\"https://hackernoon.com/learn-functional-python-in-10-minutes-to-2d1651dece6f\">https://hackernoon.com/learn-functional-python-in-10-minutes-to-2d1651dece6f</a></p><p></p><p><a href=\"https://www.quantamagazine.org/a-math-theory-for-why-people-hallucinate-20180730/\">https://www.quantamagazine.org/a-math-theory-for-why-people-hallucinate-20180730/</a></p><p></p><p><a href=\"http://www.complexity-explorables.org/explorables/yokohonen/\">http://www.complexity-explorables.org/explorables/yokohonen/</a></p><p></p><p><a href=\"https://www.quora.com/How-should-someone-applying-for-data-science-positions-structure-their-resume-CV\">https://www.quora.com/How-should-someone-applying-for-data-science-positions-structure-their-resume-CV</a></p><p></p><p><a href=\"https://neurosciencenews.com/experience-visual-perception-9636/\">https://neurosciencenews.com/experience-visual-perception-9636/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-august-20th/","uuid":"6816a78a-f08d-46db-80d9-b9a331e4843b","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b779baeec281f15796ad28a"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736da","title":"Lynx Roundup, August 19th","slug":"lynx-roundup-august-19th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx50@2x.jpg","excerpt":"DARPA wants robots to explain themselves!  AIs finding lesions!  How to code the t-test in Python!","custom_excerpt":"DARPA wants robots to explain themselves!  AIs finding lesions!  How to code the t-test in Python!","created_at_pretty":"18 August, 2018","published_at_pretty":"19 August, 2018","updated_at_pretty":"19 August, 2018","created_at":"2018-08-18T00:04:23.000-04:00","published_at":"2018-08-19T07:00:00.000-04:00","updated_at":"2018-08-19T07:00:00.000-04:00","meta_title":"DARPA wants robots to explain themselves!  AIs finding lesions!  How to code the t-test in Python! | Hackers And Slackers","meta_description":"DARPA wants robots to explain themselves!  AIs finding lesions!  How to code the t-test in Python!","og_description":"DARPA wants robots to explain themselves!  AIs finding lesions!  How to code the t-test in Python!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx50@2x.jpg","og_title":"Lynx Roundup, August 19th","twitter_description":"DARPA wants robots to explain themselves!  AIs finding lesions!  How to code the t-test in Python!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx50@2x.jpg","twitter_title":"Lynx Roundup, August 19th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://pgaleone.eu/tensorflow/2018/07/28/understanding-tensorflow-tensors-shape-static-dynamic/\n\n\n\nhttps://machinelearningmastery.com/how-to-code-the-students-t-test-from-scratch-in-python/\n\n\n\nhttps://www.engadget.com/2018/07/23/darpa-third-wave-ai-support/\n\n\n\nhttps://www.smartcitiesworld.net/news/thailand-to-roll-out-national-iot-network-3154\n\n\n\nhttp://www.publicnet.co.uk/default/2018/07/25/pole-and-graph-a-duo-set-on-interpreting-criminal-networks/\n[http://www.publicnet.co.uk/default/2018/07/25/pole-and-graph-a-duo-set-on-interpreting-criminal-networks/?mkt_tok=eyJpIjoiWkRka1lUWTRNR1E0TkRRMyIsInQiOiJhdTArYWtRbEZnVnU3bFdhajhcLzZVS3FIcWUwU1NXMXVIVm1SOHhDbUJvUTBhMU9zQXBLVms1QkQ2M2dIcDRmelNIMlk3U1lKNWt2UDJMYmJoUW5rY253SGViU0dqUGc4eG00XC9SUUFBQW04bllRdU9ndVRPOUFVOVR6Rm1EUWF6In0%3D]\n\n\n\nhttps://easychair.org/publications/preprint/893N\n[https://easychair.org/publications/preprint/893N?mkt_tok=eyJpIjoiWkRka1lUWTRNR1E0TkRRMyIsInQiOiJhdTArYWtRbEZnVnU3bFdhajhcLzZVS3FIcWUwU1NXMXVIVm1SOHhDbUJvUTBhMU9zQXBLVms1QkQ2M2dIcDRmelNIMlk3U1lKNWt2UDJMYmJoUW5rY253SGViU0dqUGc4eG00XC9SUUFBQW04bllRdU9ndVRPOUFVOVR6Rm1EUWF6In0%3D]\n\n\n\nhttp://www.datainnovation.org/2018/07/finding-lesions-with-algorithms/","html":"<p></p><p><a href=\"https://pgaleone.eu/tensorflow/2018/07/28/understanding-tensorflow-tensors-shape-static-dynamic/\">https://pgaleone.eu/tensorflow/2018/07/28/understanding-tensorflow-tensors-shape-static-dynamic/</a></p><p></p><p><a href=\"https://machinelearningmastery.com/how-to-code-the-students-t-test-from-scratch-in-python/\">https://machinelearningmastery.com/how-to-code-the-students-t-test-from-scratch-in-python/</a></p><p></p><p><a href=\"https://www.engadget.com/2018/07/23/darpa-third-wave-ai-support/\">https://www.engadget.com/2018/07/23/darpa-third-wave-ai-support/</a></p><p></p><p><a href=\"https://www.smartcitiesworld.net/news/thailand-to-roll-out-national-iot-network-3154\">https://www.smartcitiesworld.net/news/thailand-to-roll-out-national-iot-network-3154</a></p><p></p><p><a href=\"http://www.publicnet.co.uk/default/2018/07/25/pole-and-graph-a-duo-set-on-interpreting-criminal-networks/?mkt_tok=eyJpIjoiWkRka1lUWTRNR1E0TkRRMyIsInQiOiJhdTArYWtRbEZnVnU3bFdhajhcLzZVS3FIcWUwU1NXMXVIVm1SOHhDbUJvUTBhMU9zQXBLVms1QkQ2M2dIcDRmelNIMlk3U1lKNWt2UDJMYmJoUW5rY253SGViU0dqUGc4eG00XC9SUUFBQW04bllRdU9ndVRPOUFVOVR6Rm1EUWF6In0%3D\">http://www.publicnet.co.uk/default/2018/07/25/pole-and-graph-a-duo-set-on-interpreting-criminal-networks/</a></p><p></p><p><a href=\"https://easychair.org/publications/preprint/893N?mkt_tok=eyJpIjoiWkRka1lUWTRNR1E0TkRRMyIsInQiOiJhdTArYWtRbEZnVnU3bFdhajhcLzZVS3FIcWUwU1NXMXVIVm1SOHhDbUJvUTBhMU9zQXBLVms1QkQ2M2dIcDRmelNIMlk3U1lKNWt2UDJMYmJoUW5rY253SGViU0dqUGc4eG00XC9SUUFBQW04bllRdU9ndVRPOUFVOVR6Rm1EUWF6In0%3D\">https://easychair.org/publications/preprint/893N</a></p><p></p><p><a href=\"http://www.datainnovation.org/2018/07/finding-lesions-with-algorithms/\">http://www.datainnovation.org/2018/07/finding-lesions-with-algorithms/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-august-19th/","uuid":"b9c74c8e-adf6-4a4f-9881-dd30b18d7d68","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b779ac7ec281f15796ad287"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736d9","title":"Lynx Roundup, August 18th","slug":"lynx-roundup-august-18th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/lynx71-2.jpg","excerpt":"SQL Tutorials!  Facial recognition in a spreadsheet!  Robot brains made of light!","custom_excerpt":"SQL Tutorials!  Facial recognition in a spreadsheet!  Robot brains made of light!","created_at_pretty":"18 August, 2018","published_at_pretty":"18 August, 2018","updated_at_pretty":"23 March, 2019","created_at":"2018-08-18T00:01:41.000-04:00","published_at":"2018-08-18T07:00:00.000-04:00","updated_at":"2019-03-22T23:59:05.000-04:00","meta_title":"SQL Tutorials!  Facial recognition in a spreadsheet!  Robot brains made of light! | Hackers And Slackers","meta_description":"SQL Tutorials!  Facial recognition in a spreadsheet!  Robot brains made of light!","og_description":"SQL Tutorials!  Facial recognition in a spreadsheet!  Robot brains made of light!","og_image":"https://hackersandslackers.com/content/images/2019/03/lynx71-2.jpg","og_title":"Lynx Roundup, August 18th","twitter_description":"SQL Tutorials!  Facial recognition in a spreadsheet!  Robot brains made of light!","twitter_image":"https://hackersandslackers.com/content/images/2019/03/lynx71-1.jpg","twitter_title":"Lynx Roundup, August 18th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"http://richardstartin.uk/uuids-and-compressibility/\n\n\n\nhttps://www.eversql.com/best-and-fastest-way-to-learn-sql/\n\n\n\nhttps://codeburst.io/are-companies-just-too-lazy-to-encrypt-your-data-6bd3dee4d305\n\n\n\nhttps://towardsdatascience.com/cutting-edge-face-recognition-is-complicated-these-spreadsheets-make-it-easier-e7864dbf0e1a\n\n\n\nhttps://medium.com/imandra/creating-safe-robots-with-imandra-a800d17fd0fe\n\n\n\nhttps://arstechnica.com/science/2018/07/neural-network-implemented-with-light-instead-of-electrons/\n\n\n\nhttps://dev.to/briancarroll/elm-functions-in-webassembly-50ak","html":"<p></p><p><a href=\"http://richardstartin.uk/uuids-and-compressibility/\">http://richardstartin.uk/uuids-and-compressibility/</a></p><p></p><p><a href=\"https://www.eversql.com/best-and-fastest-way-to-learn-sql/\">https://www.eversql.com/best-and-fastest-way-to-learn-sql/</a></p><p></p><p><a href=\"https://codeburst.io/are-companies-just-too-lazy-to-encrypt-your-data-6bd3dee4d305\">https://codeburst.io/are-companies-just-too-lazy-to-encrypt-your-data-6bd3dee4d305</a></p><p></p><p><a href=\"https://towardsdatascience.com/cutting-edge-face-recognition-is-complicated-these-spreadsheets-make-it-easier-e7864dbf0e1a\">https://towardsdatascience.com/cutting-edge-face-recognition-is-complicated-these-spreadsheets-make-it-easier-e7864dbf0e1a</a></p><p></p><p><a href=\"https://medium.com/imandra/creating-safe-robots-with-imandra-a800d17fd0fe\">https://medium.com/imandra/creating-safe-robots-with-imandra-a800d17fd0fe</a></p><p></p><p><a href=\"https://arstechnica.com/science/2018/07/neural-network-implemented-with-light-instead-of-electrons/\">https://arstechnica.com/science/2018/07/neural-network-implemented-with-light-instead-of-electrons/</a></p><p></p><p><a href=\"https://dev.to/briancarroll/elm-functions-in-webassembly-50ak\">https://dev.to/briancarroll/elm-functions-in-webassembly-50ak</a></p>","url":"https://hackersandslackers.com/lynx-roundup-august-18th/","uuid":"dc1ab134-eb1b-48b1-bb25-2b8feafb7f36","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b779a25ec281f15796ad284"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736d1","title":"Lynx Roundup, August 17th","slug":"lynx-roundup-august-17th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx49@2x.jpg","excerpt":"Easily converting between DBs and csv/json!  Readable breakdowns of Machine Learning Papers!  ML in BigQuery!","custom_excerpt":"Easily converting between DBs and csv/json!  Readable breakdowns of Machine Learning Papers!  ML in BigQuery!","created_at_pretty":"10 August, 2018","published_at_pretty":"17 August, 2018","updated_at_pretty":"17 August, 2018","created_at":"2018-08-10T14:11:38.000-04:00","published_at":"2018-08-17T07:00:00.000-04:00","updated_at":"2018-08-17T07:00:00.000-04:00","meta_title":"Easily converting between DBs and csv/json!  Readable breakdowns of Machine Learning Papers!  ML in BigQuery! | Hackers And Slackers","meta_description":"Easily converting between DBs and csv/json!  Readable breakdowns of Machine Learning Papers!  ML in BigQuery!","og_description":"Easily converting between DBs and csv/json!  Readable breakdowns of Machine Learning Papers!  ML in BigQuery!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx49@2x.jpg","og_title":"Lynx Roundup, August 17th","twitter_description":"Easily converting between DBs and csv/json!  Readable breakdowns of Machine Learning Papers!  ML in BigQuery!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx49@2x.jpg","twitter_title":"Lynx Roundup, August 17th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://github.com/iterative/dvc\n\n\n\nhttps://github.com/insightindustry/sqlathanor\n\n\n\nhttps://medium.com/imandra/powering-documentation-with-jupyter-notebooks-eb3c7ae10069\n\n\n\nhttps://www.imandra.ai/\n\n\n\nhttps://distill.pub/about/\n\n\n\nhttp://schaechter.asmblog.org/schaechter/2018/07/why-you-must-plot-your-growth-data-on-semi-log-graph-paper.html\n\n\n\nhttps://ai.googleblog.com/2018/07/machine-learning-in-google-bigquery.html","html":"<p></p><p><a href=\"https://github.com/iterative/dvc\">https://github.com/iterative/dvc</a></p><p></p><p><a href=\"https://github.com/insightindustry/sqlathanor\">https://github.com/insightindustry/sqlathanor</a></p><p></p><p><a href=\"https://medium.com/imandra/powering-documentation-with-jupyter-notebooks-eb3c7ae10069\">https://medium.com/imandra/powering-documentation-with-jupyter-notebooks-eb3c7ae10069</a></p><p></p><p><a href=\"https://www.imandra.ai/\">https://www.imandra.ai/</a></p><p></p><p><a href=\"https://distill.pub/about/\">https://distill.pub/about/</a></p><p></p><p><a href=\"http://schaechter.asmblog.org/schaechter/2018/07/why-you-must-plot-your-growth-data-on-semi-log-graph-paper.html\">http://schaechter.asmblog.org/schaechter/2018/07/why-you-must-plot-your-growth-data-on-semi-log-graph-paper.html</a></p><p></p><p><a href=\"https://ai.googleblog.com/2018/07/machine-learning-in-google-bigquery.html\">https://ai.googleblog.com/2018/07/machine-learning-in-google-bigquery.html</a></p>","url":"https://hackersandslackers.com/lynx-roundup-august-17th/","uuid":"18006e66-29ff-487a-a342-3f7b5c457c5b","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b6dd55a65239d07358de4e7"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736d0","title":"Lynx Roundup, August 16th","slug":"lynx-roundup-august-16th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx48@2x.jpg","excerpt":"Deciding sample sizes!  Visualizing constellations from different stars!  Policy search for Robot Controllers!","custom_excerpt":"Deciding sample sizes!  Visualizing constellations from different stars!  Policy search for Robot Controllers!","created_at_pretty":"10 August, 2018","published_at_pretty":"16 August, 2018","updated_at_pretty":"16 August, 2018","created_at":"2018-08-10T14:08:09.000-04:00","published_at":"2018-08-16T07:00:00.000-04:00","updated_at":"2018-08-16T07:00:00.000-04:00","meta_title":"Deciding sample sizes!  Visualizing constellations from different stars!  Policy search for Robot Controllers! | Hackers And Slackers","meta_description":"Deciding sample sizes!  Visualizing constellations from different stars!  Policy search for Robot Controllers!","og_description":"Deciding sample sizes!  Visualizing constellations from different stars!  Policy search for Robot Controllers!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx48@2x.jpg","og_title":"Lynx Roundup, August 16th","twitter_description":"Deciding sample sizes!  Visualizing constellations from different stars!  Policy search for Robot Controllers!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx48@2x.jpg","twitter_title":"Lynx Roundup, August 16th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"http://christine-seeman.com/2018/07/git-workflow-and-my-new-love-of-git-alias/\n\n\n\nhttps://flowingdata.com/2018/07/25/same-stars-different-constellations/\n\n\n\nhttps://www.linkedin.com/pulse/one-data-science-job-doesnt-fit-all-elena-grewal/\n\n\n\nhttp://www.pcg-random.org/posts/bounded-rands.html\n\n\n\nhttp://blog.fastforwardlabs.com/2018/07/24/ff08-launch.html\n\n\n\nhttps://arxiv.org/abs/1807.02303\n\n\n\nhttp://www.marknagelberg.com/using-python-to-figure-out-sample-sizes-for-your-study/","html":"<p></p><p><a href=\"http://christine-seeman.com/2018/07/git-workflow-and-my-new-love-of-git-alias/\">http://christine-seeman.com/2018/07/git-workflow-and-my-new-love-of-git-alias/</a></p><p></p><p><a href=\"https://flowingdata.com/2018/07/25/same-stars-different-constellations/\">https://flowingdata.com/2018/07/25/same-stars-different-constellations/</a></p><p></p><p><a href=\"https://www.linkedin.com/pulse/one-data-science-job-doesnt-fit-all-elena-grewal/\">https://www.linkedin.com/pulse/one-data-science-job-doesnt-fit-all-elena-grewal/</a></p><p></p><p><a href=\"http://www.pcg-random.org/posts/bounded-rands.html\">http://www.pcg-random.org/posts/bounded-rands.html</a></p><p></p><p><a href=\"http://blog.fastforwardlabs.com/2018/07/24/ff08-launch.html\">http://blog.fastforwardlabs.com/2018/07/24/ff08-launch.html</a></p><p></p><p><a href=\"https://arxiv.org/abs/1807.02303\">https://arxiv.org/abs/1807.02303</a></p><p></p><p><a href=\"http://www.marknagelberg.com/using-python-to-figure-out-sample-sizes-for-your-study/\">http://www.marknagelberg.com/using-python-to-figure-out-sample-sizes-for-your-study/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-august-16th/","uuid":"6ffc43c0-09de-47cc-be55-e479542bd471","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b6dd48965239d07358de4e4"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736cf","title":"Lynx Roundup, August 15th","slug":"lynx-roundup-august-15th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx47@2x.jpg","excerpt":"Quantum computing!  Vectorizing code!  Optimizing Pandas!","custom_excerpt":"Quantum computing!  Vectorizing code!  Optimizing Pandas!","created_at_pretty":"10 August, 2018","published_at_pretty":"15 August, 2018","updated_at_pretty":"15 August, 2018","created_at":"2018-08-10T14:03:34.000-04:00","published_at":"2018-08-15T07:00:00.000-04:00","updated_at":"2018-08-15T07:00:00.000-04:00","meta_title":"Quantum computing!  Vectorizing code!  Optimizing Pandas! | Hackers And Slackers","meta_description":"Quantum computing!  Vectorizing code!  Optimizing Pandas!","og_description":"Quantum computing!  Vectorizing code!  Optimizing Pandas!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx47@2x.jpg","og_title":"Lynx Roundup, August 15th","twitter_description":"Quantum computing!  Vectorizing code!  Optimizing Pandas!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx47@2x.jpg","twitter_title":"Lynx Roundup, August 15th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://hackernoon.com/data-inspired-5c78db3999b2\n\n\n\nhttp://bl.ocks.org/awoodruff/9216081\n[http://bl.ocks.org/awoodruff/9216081?utm_campaign=Data_Elixir&utm_medium=email&utm_source=Data_Elixir_192]\n\n\n\nhttps://gitcoin.co/\n\n\n\nhttps://thenextweb.com/microsoft/2018/07/24/microsoft-debuts-free-quantum-computer-programming-katas/\n\n\n\nhttps://engineering.upside.com/a-beginners-guide-to-optimizing-pandas-code-for-speed-c09ef2c6a4d6\n\n\n\nhttps://www.datascience.com/blog/straightening-loops-how-to-vectorize-data-aggregation-with-pandas-and-numpy/\n\n\n\nhttps://medium.freecodecamp.org/heres-the-resume-i-used-to-get-a-job-at-google-as-a-software-engineer-26516526f29a","html":"<p></p><p><a href=\"https://hackernoon.com/data-inspired-5c78db3999b2\">https://hackernoon.com/data-inspired-5c78db3999b2</a></p><p></p><p><a href=\"http://bl.ocks.org/awoodruff/9216081?utm_campaign=Data_Elixir&amp;utm_medium=email&amp;utm_source=Data_Elixir_192\">http://bl.ocks.org/awoodruff/9216081</a></p><p></p><p><a href=\"https://gitcoin.co/\">https://gitcoin.co/</a></p><p></p><p><a href=\"https://thenextweb.com/microsoft/2018/07/24/microsoft-debuts-free-quantum-computer-programming-katas/\">https://thenextweb.com/microsoft/2018/07/24/microsoft-debuts-free-quantum-computer-programming-katas/</a></p><p></p><p><a href=\"https://engineering.upside.com/a-beginners-guide-to-optimizing-pandas-code-for-speed-c09ef2c6a4d6\">https://engineering.upside.com/a-beginners-guide-to-optimizing-pandas-code-for-speed-c09ef2c6a4d6</a></p><p></p><p><a href=\"https://www.datascience.com/blog/straightening-loops-how-to-vectorize-data-aggregation-with-pandas-and-numpy/\">https://www.datascience.com/blog/straightening-loops-how-to-vectorize-data-aggregation-with-pandas-and-numpy/</a></p><p></p><p><a href=\"https://medium.freecodecamp.org/heres-the-resume-i-used-to-get-a-job-at-google-as-a-software-engineer-26516526f29a\">https://medium.freecodecamp.org/heres-the-resume-i-used-to-get-a-job-at-google-as-a-software-engineer-26516526f29a</a></p>","url":"https://hackersandslackers.com/lynx-roundup-august-15th/","uuid":"d74ffe07-cad6-4903-8254-465f4a0d569f","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b6dd37665239d07358de4e1"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736d8","title":"The End-to-End Guide to Handling Forms in Flask","slug":"guide-to-building-forms-in-flask","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/08/forms@2x.jpg","excerpt":"The subtle art of consensually capturing personal data.","custom_excerpt":"The subtle art of consensually capturing personal data.","created_at_pretty":"15 August, 2018","published_at_pretty":"15 August, 2018","updated_at_pretty":"09 April, 2019","created_at":"2018-08-14T22:13:40.000-04:00","published_at":"2018-08-15T06:25:00.000-04:00","updated_at":"2019-04-08T23:17:31.000-04:00","meta_title":"The End-to-End Guide to Handling Forms in Flask | Hackers And Slackers","meta_description":"Learn how to build complex form logic in Flask using the WTForms Python library! Cover the backend logic as well as best practices for form Jinja templates.","og_description":"Learn how to build complex form logic in Flask using the WTForms Python library! Cover the backend logic as well as best practices for form Jinja templates.","og_image":"https://hackersandslackers.com/content/images/2018/08/forms@2x.jpg","og_title":"The End-to-End Guide to Building Forms in Flask","twitter_description":"Learn how to build complex form logic in Flask using the WTForms Python library! Cover the backend logic as well as best practices for form Jinja templates.","twitter_image":"https://hackersandslackers.com/content/images/2018/08/forms@2x.jpg","twitter_title":"The End-to-End Guide to Building Forms in Flask","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"},{"name":"#Building Flask Apps","slug":"building-flask-apps","description":"Python’s fast-growing and flexible microframework. Can handle apps as simple as API endpoints, to monoliths remininiscent of Django.","feature_image":"https://hackersandslackers.com/content/images/2019/03/flask-gettingstarted.jpg","meta_description":"Python’s fastest growing, most flexible, and perhaps most Pythonic framework.","meta_title":"Building Flask Apps","visibility":"internal"}],"plaintext":"Happy Tuesday everybody! To start this week hot, let's talk about something that\neverybody hates: forms. The only thing more painful than filling out a web form\nis creating one, much less a functional one with feedback. Listen, if you're\ninto creating pleasant form UI experiences, you're probably into some freaky\nshit. Call me.\n\nFlask's youth is an advantage in one regard, in that there are only so many\nlibraries available to handle any given task. In this case, there's only one:\nthe aptly named WTForms.\n\nIf you don't have an immediate pressing need to create a Flask form and feel\nlike ditching this post to check out Instagram, be my guest, but know this:\nhandling form authentication, data submission, and session management is the\npinnacle of app development. This weird data collection traditional we\nexperience every day actually touches on nearly all aspects of app development.\nYou could argue that he who creates forms is a harbinger of a golden age: a hero\nwho brings us to the pinnacle of Western technology. Then again, there's always\nInstagram.\n\nThe Gist of it All\nBefore laying down some code snippets for you to mindlessly copy+paste, it helps\nto understand conceptually what we're about to throw down.\n\nAt a minimum, creating a form has us working routes, form  models, and templates\n. Since you already understand the concept of MVC, that entire last sentence was\nprobably redundant, and I should probably just delete it as opposed to\ncontinuing to write this second sentence contemplating my own redundancy. Oh\nwell.\n\nWe'll keep our routes in app.py  for a compact little app.\n\nmyproject\n├─ app.py\n├─ config.py\n├─ forms.py\n├─ db.py\n├─ /static\n│  ├─ /src\n│  │  ├─ js\n│  │  └─ less\n│  └─ /dist\n│     ├─ js\n│     ├─ css\n│     └─ img\n└─ /templates\n   └─ layout.html\n   └─ index.html\n   └─ form.html\n\n\nHere's the game plan: our form, with all its fields, labels, and potential error\nmessages, will live in forms.py. app.py  will contain the logic of not only\nrouting to the page serving the form, but also validating user input, which\ncovers anything from error checking to session creation. \n\nform.html  will be the presentation layer template which will get loaded into \nindex.html  in this case. Both of those templates are wrapped by layout.html \nwhich is basically just metadata and shit you already know — we’ve been through\nthis. Let’s start off by creating our forms.py.\n\nWhat The Form\nWTForms  has a nice little monopoly over the Python form handling industry\ndating back to Django, so at least we aren't burdened with choices here. Set up\nyour environment and let's install everything we need:\n\npipenv shell\npip3 install Flask WTForms Flask-Login\n\n\nThat'll hold us over for now. In forms.py,  we're going to do two main imports:\n\nfrom wtforms import Form, StringField, PasswordField, validators, SubmitField, SelectField\n\nfrom wtforms.validators import ValidationError, DataRequired, Email, EqualTo, Length\n\n\nForms really boil down into these two things: types of input, and validation of\nsaid input. There are plenty more fields and validators available, but this is\nwhat we'd need for a user signup form. Guess what we're making. \n\nClassy as Form\nForms in your app will always be defined 1-to-1 with a Python class declaration.\nIt's kind of like working with models, except they're forms. Just wait until\nyour forms work with models.\n\nfrom wtforms import Form, StringField, PasswordField, validators, SubmitField, SelectField\nfrom wtforms.validators import ValidationError, DataRequired, Email, EqualTo, Length\n\n\nclass SignupForm(Form):\n    \"\"\"User Signup Form.\"\"\"\n\n    name = StringField('Name', [\n        validators.DataRequired(message=('Don\\'t be shy!'))\n    ])\n    email = StringField('Email', [\n        Length(min=6, message=(u'Little short for an email address?')),\n        Email(message=('That\\'s not a valid email address.')),\n        DataRequired(message=('That\\'s not a valid email address.'))\n    ])\n    password = PasswordField('Password', validators=[\n        DataRequired(message=\"Please enter a password.\"),\n    ])\n    confirm = PasswordField('Repeat Password', validators=[\n            EqualTo(password, message='Passwords must match.')\n            ])\n    website = StringField('Website')\n    submit = SubmitField('Register')\n\n    def validate_email(self, email):\n        \"\"\"Email validation.\"\"\"\n        user = User.query.filter_by(email=email.data).first()\n        if user is not None:\n            raise ValidationError('Please use a different email address.')\n\n\nAs expected, every variable child of our class is a field. Field types are\ndeclared immediately (such as StringField()) and accept a label (name of the\nfield) as well as validators, which are conditions which must be met for the\nfield to be considered valid. A single field can accept an infinite number of\nvalidators, which would come in handy if you're a stickler for password\nsecurity. As well as setting the validators, we also set the error message to\npass to the user for that particular field if they are to submit invalid\ninformation. Fields accept other parameters as well, such as placeholder text,\nif you're interested in that side of things\n[https://wtforms.readthedocs.io/en/stable/fields.html#the-field-base-class].\n\nSome validators are more sophisticated enough to handle heavy-lifting: note how \nEmail()  is a validator in itself which handles the nonsense of looking for an\n'@' symbol (or whatever it is PHP guys did in the 90's). There’s even a regex\nvalidator available if you want to go full pro-mode.\n\nHardcore Validation XXX\nYou'll notice the example provided contains a validate_email()  function to\ncheck the database for a user record match. We can basically write any custom\nlogic we want to validate forms this way, in case the event that the standard\nvalidators just don't cut it.\n\nForming the Actual Form\nAlright, it's that time. Jinja's form handling isn't as daunting as this next\nwall of text might seem, once you get in the groove of things:\n\n{% block content %}\n<div class=\"formwrapper\">\n  <form method=post>\n    <div class=\"name\">\n      {{ form.name(placeholder='Joe Blah') }} {{ form.name.label }}\n      {% if form.name.errors %}\n        <ul class=\"errors\">{% for error in form.name.errors %}<li>{{ error }}</li>{% endfor %}</ul>\n      {% endif %}\n    </div>\n    <div class=\"email\">\n      {{ form.email }} {{ form.email.label }}\n      {% if form.email.errors %}\n        <ul class=\"errors\">{% for error in form.email.errors %}<li>{{ error }}</li>{% endfor %}</ul>\n      {% endif %}\n    </div>\n    <div class=\"password\">\n      {{ form.password }} {{ form.password.label }}\n      {% if form.password.errors %}\n        <ul class=\"errors\">{% for error in form.password.errors %}<li>{{ error }}</li>{% endfor %}</ul>\n      {% endif %}\n    </div>\n    <div class=\"confirm\">\n      {{ form.confirm }} {{ form.confirm.label }}\n      {% if form.confirm.errors %}\n        <ul class=\"errors\">{% for error in form.password.errors %}<li>{{ error }}</li>{% endfor %}</ul>\n      {% endif %}\n    </div>\n    <div class=\"website\">\n      {{ form.website(placeholder='http://example.com') }} {{ form.website.label }}\n    </div>\n    <div class=\"submitbutton\">\n      <input id=\"submit\" type=\"submit\" value=\"Submit\">\n    </div>\n  </form>\n</div>\n\n{% for message in get_flashed_messages() %}\n<div class=\"alert alert-warning\">\n    <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\n    {{ message }}\n</div>\n{% endfor %}\n\n\nNotice that our form contains a method, but neither a destination nor an action.\nMore on that late.\n\nEach form field is pulling in three dynamic assets: the form itself, the display\nname, and a space reserved for error handling. This general layout is robust\nenough to handle returning multiple errors per field, which we obviously would\nprefer to keep in-line with the offending fields for UI purposes.\n\nAnother way of handling errors is by utilizing Flask's flash  module. A 'flash'\nis a temporary modal telling the user what they did wrong, which can be closed\nor simply expire after a number of seconds. We're using both forms of error\nhandling here for educational purposes, but you probably won't need to most of\nthe time.\n\nDrop Some Logic on These Fools\napp.py  contains the route to the form, which allows for both GET and POST \nmethods. Submitting a form in Flask cleverly routes the user to the page they're\nalready on. Depending on what the logic decides, the user will experience\neither: \n\n * Instant in-line errors, with no visible change of page.\n * A successful redirect to wherever they hoped the form would take them.\n\nfrom flask import Flask, url_for, render_template, Markup, redirect, request, flash\nfrom flask import session as login_session\nfrom forms import SignupForm\nimport config\nfrom models import User, users, login_manager\nfrom db import users_col\nimport logging\nimport sys\nimport json\n\n\napp = Flask(__name__, static_url_path='', static_folder=\"static\", template_folder=\"templates\")\ncompress = FlaskStaticCompress(app)\napp.config.from_object('config.Config')\n\n\n@app.route('/signup', methods=['GET', 'POST'])\ndef signup():\n    \"\"\"Signup Form.\"\"\"\n    signup_form = SignupForm()\n    if request.method == 'POST':\n        if signup_form.validate():\n            flash('Logged in successfully.')\n            return render_template('/dashboard.html', template=\"dashbord-template\")\n    return render_template('/signup.html', form=signup_form, template=\"form-page\")\n\n\nYou'll recognize SignupForm() as our good old buddy from forms.py  which has\nbeen imported here. Because the user submitted their form, they will experience\nthe page with everything that lives within if request.method == 'POST':  this\ntime around. Determining validation is as simple as the next line: if\nsignup_form.validate():. This one-liner will validate each field individually,\nand deliver the proper errors to the offending fields. This level of black magic\nsaves us a huge headache and actually means that creating additional forms in\nthe future won't be all that different from simply adjusting the class and\ntemplate we already made. All that negative form talk I dropped earlier was a\ntest. You passed.\n\nWhat happens next?\nAs you might infer from the conditional statements, the user will either\nsuccessfully complete the form and move on to the next page, or they might find\nthemselves in a Ancient Greek version of hell where they find themselves\nincorrectly filling out the same form forever. Sucks to suck.\n\nIf this were a real signup form, we'd handle user creation and database\ninteraction here as well. As great as that sounds, I'll save your time as I know\nyou still have an Instagram to check. Hats off to anybody who has made it\nthrough this rambling nonsense  - you deserve it.","html":"<p>Happy Tuesday everybody! To start this week hot, let's talk about something that everybody hates: forms. The only thing more painful than filling out a web form is creating one, much less a functional one with feedback. Listen, if you're into creating pleasant form UI experiences, you're probably into some freaky shit. Call me.</p><p>Flask's youth is an advantage in one regard, in that there are only so many libraries available to handle any given task. In this case, there's only one: the aptly named WTForms.</p><p>If you don't have an immediate pressing need to create a Flask form and feel like ditching this post to check out Instagram, be my guest, but know this: handling form authentication, data submission, and session management is the pinnacle of app development. This weird data collection traditional we experience every day actually touches on nearly all aspects of app development. You could argue that he who creates forms is a harbinger of a golden age: a hero who brings us to the pinnacle of Western technology. Then again, there's always Instagram.</p><h2 id=\"the-gist-of-it-all\">The Gist of it All</h2><p>Before laying down some code snippets for you to mindlessly copy+paste, it helps to understand conceptually what we're about to throw down.</p><p>At a minimum, creating a form has us working <strong>routes</strong>, form<strong> models</strong>, and <strong>templates</strong>. Since you already understand the concept of MVC, that entire last sentence was probably redundant, and I should probably just delete it as opposed to continuing to write this second sentence contemplating my own redundancy. Oh well.</p><p>We'll keep our routes in <code>app.py</code> for a compact little app.</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">myproject\n├─ app.py\n├─ config.py\n├─ forms.py\n├─ db.py\n├─ /static\n│  ├─ /src\n│  │  ├─ js\n│  │  └─ less\n│  └─ /dist\n│     ├─ js\n│     ├─ css\n│     └─ img\n└─ /templates\n   └─ layout.html\n   └─ index.html\n   └─ form.html\n</code></pre>\n<!--kg-card-end: markdown--><p>Here's the game plan: our form, with all its fields, labels, and potential error messages, will live in <code>forms.py</code>. <code>app.py</code><strong> </strong>will contain the logic of not only routing to the page serving the form, but also validating user input, which covers anything from error checking to session creation. </p><p><code>form.html</code> will be the presentation layer template which will get loaded into <code>index.html</code> in this case. Both of those templates are wrapped by <code>layout.html</code> which is basically just metadata and shit you already know — we’ve been through this. Let’s start off by creating our <code>forms.py</code><strong>.</strong></p><h2 id=\"what-the-form\">What The Form</h2><p><code>WTForms</code> has a nice little monopoly over the Python form handling industry dating back to Django, so at least we aren't burdened with choices here. Set up your environment and let's install everything we need:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">pipenv shell\npip3 install Flask WTForms Flask-Login\n</code></pre>\n<!--kg-card-end: markdown--><p>That'll hold us over for now. In <code>forms.py</code><strong>,</strong> we're going to do two main imports:</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">from wtforms import Form, StringField, PasswordField, validators, SubmitField, SelectField\n\nfrom wtforms.validators import ValidationError, DataRequired, Email, EqualTo, Length\n</code></pre>\n<!--kg-card-end: markdown--><p>Forms really boil down into these two things: types of input, and validation of said input. There are plenty more fields and validators available, but this is what we'd need for a user signup form. Guess what we're making. </p><h3 id=\"classy-as-form\">Classy as Form</h3><p>Forms in your app will always be defined 1-to-1 with a Python class declaration. It's kind of like working with models, except they're forms. Just wait until your forms work with models.</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">from wtforms import Form, StringField, PasswordField, validators, SubmitField, SelectField\nfrom wtforms.validators import ValidationError, DataRequired, Email, EqualTo, Length\n\n\nclass SignupForm(Form):\n    &quot;&quot;&quot;User Signup Form.&quot;&quot;&quot;\n\n    name = StringField('Name', [\n        validators.DataRequired(message=('Don\\'t be shy!'))\n    ])\n    email = StringField('Email', [\n        Length(min=6, message=(u'Little short for an email address?')),\n        Email(message=('That\\'s not a valid email address.')),\n        DataRequired(message=('That\\'s not a valid email address.'))\n    ])\n    password = PasswordField('Password', validators=[\n        DataRequired(message=&quot;Please enter a password.&quot;),\n    ])\n    confirm = PasswordField('Repeat Password', validators=[\n            EqualTo(password, message='Passwords must match.')\n            ])\n    website = StringField('Website')\n    submit = SubmitField('Register')\n\n    def validate_email(self, email):\n        &quot;&quot;&quot;Email validation.&quot;&quot;&quot;\n        user = User.query.filter_by(email=email.data).first()\n        if user is not None:\n            raise ValidationError('Please use a different email address.')\n</code></pre>\n<!--kg-card-end: markdown--><p>As expected, every variable child of our class is a field. Field types are declared immediately (such as StringField()) and accept a <em>label </em>(name of the field) as well as <em>validators</em>, which are conditions which must be met for the field to be considered valid. A single field can accept an infinite number of validators, which would come in handy if you're a stickler for password security. As well as setting the validators, we also set the error message to pass to the user for that particular field if they are to submit invalid information. Fields accept other parameters as well, such as placeholder text, if you're interested in <a href=\"https://wtforms.readthedocs.io/en/stable/fields.html#the-field-base-class\">that side of things</a>.</p><p>Some validators are more sophisticated enough to handle heavy-lifting: note how <em>Email()</em> is a validator in itself which handles the nonsense of looking for an '@' symbol (or whatever it is PHP guys did in the 90's). There’s even a regex validator available if you want to go full pro-mode.</p><h3 id=\"hardcore-validation-xxx\">Hardcore Validation XXX</h3><p>You'll notice the example provided contains a <strong>validate_email()</strong> function to check the database for a user record match. We can basically write any custom logic we want to validate forms this way, in case the event that the standard validators just don't cut it.</p><h2 id=\"forming-the-actual-form\">Forming the Actual Form</h2><p>Alright, it's that time. Jinja's form handling isn't as daunting as this next wall of text might seem, once you get in the groove of things:</p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">{% block content %}\n&lt;div class=&quot;formwrapper&quot;&gt;\n  &lt;form method=post&gt;\n    &lt;div class=&quot;name&quot;&gt;\n      {{ form.name(placeholder='Joe Blah') }} {{ form.name.label }}\n      {% if form.name.errors %}\n        &lt;ul class=&quot;errors&quot;&gt;{% for error in form.name.errors %}&lt;li&gt;{{ error }}&lt;/li&gt;{% endfor %}&lt;/ul&gt;\n      {% endif %}\n    &lt;/div&gt;\n    &lt;div class=&quot;email&quot;&gt;\n      {{ form.email }} {{ form.email.label }}\n      {% if form.email.errors %}\n        &lt;ul class=&quot;errors&quot;&gt;{% for error in form.email.errors %}&lt;li&gt;{{ error }}&lt;/li&gt;{% endfor %}&lt;/ul&gt;\n      {% endif %}\n    &lt;/div&gt;\n    &lt;div class=&quot;password&quot;&gt;\n      {{ form.password }} {{ form.password.label }}\n      {% if form.password.errors %}\n        &lt;ul class=&quot;errors&quot;&gt;{% for error in form.password.errors %}&lt;li&gt;{{ error }}&lt;/li&gt;{% endfor %}&lt;/ul&gt;\n      {% endif %}\n    &lt;/div&gt;\n    &lt;div class=&quot;confirm&quot;&gt;\n      {{ form.confirm }} {{ form.confirm.label }}\n      {% if form.confirm.errors %}\n        &lt;ul class=&quot;errors&quot;&gt;{% for error in form.password.errors %}&lt;li&gt;{{ error }}&lt;/li&gt;{% endfor %}&lt;/ul&gt;\n      {% endif %}\n    &lt;/div&gt;\n    &lt;div class=&quot;website&quot;&gt;\n      {{ form.website(placeholder='http://example.com') }} {{ form.website.label }}\n    &lt;/div&gt;\n    &lt;div class=&quot;submitbutton&quot;&gt;\n      &lt;input id=&quot;submit&quot; type=&quot;submit&quot; value=&quot;Submit&quot;&gt;\n    &lt;/div&gt;\n  &lt;/form&gt;\n&lt;/div&gt;\n\n{% for message in get_flashed_messages() %}\n&lt;div class=&quot;alert alert-warning&quot;&gt;\n    &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot;&gt;&amp;times;&lt;/button&gt;\n    {{ message }}\n&lt;/div&gt;\n{% endfor %}\n</code></pre>\n<!--kg-card-end: markdown--><p>Notice that our form contains a method, but neither a destination nor an action. More on that late.</p><p>Each form field is pulling in three dynamic assets: the form itself, the display name, and a space reserved for error handling. This general layout is robust enough to handle returning multiple errors per field, which we obviously would prefer to keep in-line with the offending fields for UI purposes.</p><p>Another way of handling errors is by utilizing Flask's <em>flash</em> module. A 'flash' is a temporary modal telling the user what they did wrong, which can be closed or simply expire after a number of seconds. We're using both forms of error handling here for educational purposes, but you probably won't need to most of the time.</p><h2 id=\"drop-some-logic-on-these-fools\">Drop Some Logic on These Fools</h2><p><code>app.py</code> contains the route to the form, which allows for both <strong>GET </strong>and <strong>POST</strong> methods. Submitting a form in Flask cleverly routes the user to the <em>page they're already on. </em>Depending on what the logic decides, the user will experience either: </p><ul><li>Instant in-line errors, with no visible change of page.</li><li>A successful redirect to wherever they hoped the form would take them.</li></ul><!--kg-card-begin: markdown--><pre><code class=\"language-python\">from flask import Flask, url_for, render_template, Markup, redirect, request, flash\nfrom flask import session as login_session\nfrom forms import SignupForm\nimport config\nfrom models import User, users, login_manager\nfrom db import users_col\nimport logging\nimport sys\nimport json\n\n\napp = Flask(__name__, static_url_path='', static_folder=&quot;static&quot;, template_folder=&quot;templates&quot;)\ncompress = FlaskStaticCompress(app)\napp.config.from_object('config.Config')\n\n\n@app.route('/signup', methods=['GET', 'POST'])\ndef signup():\n    &quot;&quot;&quot;Signup Form.&quot;&quot;&quot;\n    signup_form = SignupForm()\n    if request.method == 'POST':\n        if signup_form.validate():\n            flash('Logged in successfully.')\n            return render_template('/dashboard.html', template=&quot;dashbord-template&quot;)\n    return render_template('/signup.html', form=signup_form, template=&quot;form-page&quot;)\n</code></pre>\n<!--kg-card-end: markdown--><p>You'll recognize SignupForm() as our good old buddy from <code>forms.py</code> which has been imported here. Because the user submitted their form, they will experience the page with everything that lives within <code>if request.method == 'POST':</code> this time around. Determining validation is as simple as the next line: <code>if signup_form.validate():</code>. This one-liner will validate each field individually, and deliver the proper errors to the offending fields. This level of black magic saves us a huge headache and actually means that creating additional forms in the future won't be all that different from simply adjusting the class and template we already made. All that negative form talk I dropped earlier was a test. You passed.</p><h3 id=\"what-happens-next\">What happens next?</h3><p>As you might infer from the conditional statements, the user will either successfully complete the form and move on to the next page, or they might find themselves in a Ancient Greek version of hell where they find themselves incorrectly filling out the same form forever. Sucks to suck.</p><p>If this were a real signup form, we'd handle user creation and database interaction here as well. As great as that sounds, I'll save your time as I know you still have an Instagram to check. Hats off to anybody who has made it through this rambling nonsense  - you deserve it.</p>","url":"https://hackersandslackers.com/guide-to-building-forms-in-flask/","uuid":"7cb4b740-9bda-4d96-a28d-83487d6581ce","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b738c54c43a944face384b1"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736d7","title":"I Owe My Job to Mr. Robot","slug":"i-owe-my-job-to-mr-robot","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/02/robot@2x.jpg","excerpt":"Entering the Dataverse.","custom_excerpt":"Entering the Dataverse.","created_at_pretty":"13 August, 2018","published_at_pretty":"14 August, 2018","updated_at_pretty":"14 February, 2019","created_at":"2018-08-13T17:30:12.000-04:00","published_at":"2018-08-14T08:00:00.000-04:00","updated_at":"2019-02-14T05:22:09.000-05:00","meta_title":"Entering the Dataverse | Hackers And Slackers","meta_description":"Throughout the course of my time as both the \"computer\" guy and a clinician, I instituted a series of projects  to make myself more efficient.","og_description":"Throughout the course of my time as both the \"computer\" guy and a clinician, I instituted a series of projects to make myself more efficient.","og_image":"https://hackersandslackers.com/content/images/2019/02/robot@2x.jpg","og_title":"I Owe My Job to Mr. Robot","twitter_description":"Throughout the course of my time as both the \"computer\" guy and a clinician, I instituted a series of projects to make myself more efficient.","twitter_image":"https://hackersandslackers.com/content/images/2019/02/robot@2x.jpg","twitter_title":"I Owe My Job to Mr. Robot","authors":[{"name":"Max Mileaf","slug":"snacks","bio":"One of three therapists in the known universe who knows how to use a computer. Finds meaning in highly protected data, in a cave, utilizing nothing but a box of scraps. ","profile_image":"https://hackersandslackers.com/content/images/2019/03/max2.jpg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Max Mileaf","slug":"snacks","bio":"One of three therapists in the known universe who knows how to use a computer. Finds meaning in highly protected data, in a cave, utilizing nothing but a box of scraps. ","profile_image":"https://hackersandslackers.com/content/images/2019/03/max2.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},"tags":[{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"}],"plaintext":"What's up data gang? If you've been reading along throughout this journey,\nyou'll realize that all of my posts have something in common (other than\nExcel...smartass), they all assume that you're already working with data...even\nif it's just cursory exposure. Well, every journey of a thousand worksheets\nbegins with a single lookup, and hopefully this story will help you position\nyourself to inner-join the fraternity of functions. \n\nFor the two of you who went out of the way to read our bios, you may have seen\nsomething interesting: I started out as a therapist...a job that does everything\nit can to avoid using hard data. You see, every clinician, no matter the\ndiscipline will tell you: \n\n1) The amount of paperwork that they need to complete is absolutely mind\nboggling (in fact, I had more paperwork doing mental health counseling than I've\never had at my desk job...which is almost entirely paperwork).\n2) Clinicians will do anything within their power to avoid doing said paperwork.\n3) They hate their electronic medical records (not their particular program, but\nthe very idea of having a system which makes things easier to track). \n\nThe issue with this Trifecta is that clinicians are paid and audited based on\ntheir notes, and as such, they've come up with the saying: \"If you didn't write\nit, it didn't happen\". With that being said, at every single clinical position\nI've ever held, I became the expert on our computer systems, as since I was\nyoung, I've always loved computers. As time went on, troubleshooting (or, let's\nbe honest...just explaining over and over again to deaf ears) computer issues\nbecame one of my essential job duties. After \"doing computers\" became a fact of\nlife, I was given access to our EMR's back-end (that is, where the data lives,\nas opposed to the front-end, which is what the user interacts with). \n\nUpon viewing this back-end data, I was ASTOUNDED with how inefficient our\nnotation was. Despite the fact that almost every clinician complained about\nhaving to do all their notes (and assessments), they were going out of their way \n to make documentation a more arduous process. It was at this moment that my\norigin story began, fixing these issues was akin to my parents being shot in\nfront of me by Joe Chill. \n\nOne thing to note is that at this time, I had never even opened Excel (that's\nhow disengaged the clinical world was from the \"business\" world), and I only had\na cursory understanding of databases and spreadsheets, stemming from an AP\ncomputer science course that I took in High School (shout out to the rest of the\nBrooklyn Technites!), and to give you an idea of the time frame here, I was a\nyear and change out of graduate school. Unfortunately, as I hear far too often,\nI was the victim of a string of horrifically bad math teachers that scared me\naway from anything that had to do with numbers all throughout college\n(interestingly, Greek letters I was just fine with...at the time, my brain\ndidn't connect that physics and inorganic chemistry were math), so I made it all\nthe way through grad school without ever taking a math class, let alone calculus\n(AP comp sci counts for an entire year of math...why I still thought I was bad\nat math now seems like lunacy).\n\nUntil, one faithful day I was given an interesting assignment at the very end of\nthe day: I could use our EMR to run a report that included every patient we had\nthat was given a specific test, but we needed a list of everyone who lacked this\nparticular test. I told my company (which as far as nonprofit clinical agencies\ngo, was actually fairly large) that I would see what I could do, and went home\nfor the day. \n\nThat night, I had DVR'ed the first season of Mr. Robot (I highly recommend\nseason 1), a show about a hacking. One thing I will say about the show is that\nit has quite possibly the ONLY realistic depiction of hacking in all of\nfiction...there's no warping into the machine to play a game of space invaders\nwhich unlocks the nastygram (read Batman vs. the Punisher to learn more about\nnastygrams), just the compiling of as much information as possible and then\nputting it all together, in fact, it illustrates that 90% of hacking is social\nengineering...which is why you should never give anyone your password (except\nme...of course). I then binged the entire first season that night, and realized\nthat I somehow understood the vast majority of the intricacies of the\nhack...almost like I spoke the same language. \n\nI came into the office the next day, and inspired by Mr. Robot, I asked a bunch\nof questions regarding the data that was available to us through the EMR, and I\nfound out that in addition to getting the list of people who had the test, I\ncould also get a list of everyone. Now, if another clinician got this far, they\nwould realize that with these two pieces of data, you could sort alphabetically\nand then just see manually who of the 12,000 people on one list weren't on the\nother, and that could probably have been a part time job for the rest of your\ndays, but I remembered the mission: Efficiency, of which to manually count was\nanathema. I then tried several search terms in google consisting of \"compare\"\nand \"list\" and after the second try, I found a tutorial for Vlookups (the irony\nof my exclusive use of index match when I have VLookup to thank for my future\ncareer isn't lost on me) and got to work. \n\nNow, with seasoned eyes, I realize that this is 12 seconds of work, write a\nquick index match and double click the lower  right corner of the cell) but at\nthis time I, and more importantly my company (comprised entirely of Luddites)\nfound it incredibly impressive and useful. \n\nImbued with a new sense of purpose, and the knowledge that I understood\ninstructions on the internet, I then began my quest to make things more\nefficient for my colleagues...billing it as \"if you use these tricks, you can\nsee your patients for longer\" (which by all means, is true). As trite as it is\nto say, I was honestly hoping to have the other clinicians work smarter...and\nnot harder. \n\n\nThroughout the course my my time as both the \"computer\" guy and a clinician, I\ninstituted a series of projects (think auto-populated note templates,\nproductivity trackers, and a nifty tool that showed you only the people who you\nhaven't seen in a given month so that you can call them), all of which I had the\ntime to do because I too was using these tools to make myself more efficient.\nOnce the time came when I had essentially automated my paperwork, my company\nbegan entrusting me with more data, and kept coming up with increasingly complex\nproblems to solve, until they realized that I was essentially building these\ntools full-time. It was at this point where I made the decision to ask if they\ncould build an analyst position for me that would allow me to see all of our\ndata, track it, trend it, and continue making new tools to help us hit our\nperformance goals (we in the biz call these Key Performance Indicators: KPIs),\nand they accepted and I moved into my first data analyst job. \n\n\nOnce I had roughly a year under my belt, I could now begin applying to jobs with\nthe data analyst skill-set (who knew that the first thing to come to mind when\nyou see \"Therapist\" isn't \"computer nerd!?) and indeed although I stayed in\nHealthcare, I moved onto companies that had more robust data needs, and more\ntools I could use to do the job, and that's where I am today...all because I was\ninspired by a morphine addicted sociopath who happened to also be a computer\nwhiz. \n\nSo, why did I take the time to write this story? Despite how cocky I can get,\neven I'm not at the level where I think strangers on the internet would want to\nread my life story. No, I'm writing this as a general template to how you can\nleverage any existing skill-set into a job working with data, by following a few\nsimple guidelines: \n\n\n1) Math isn't a skill, it's a way of thinking. Despite believing that math\nwasn't for me, after essentially doing \"math\" for the last decade or so I\nrealized that you don't need to be good at \"arithmetic\" (the actual solving of\nequations and rote calculation) in order to solve math problems, you just need\nto be the type of person who likes to find solutions and/or find flaws in\nthings. There's a reason that statistically, math majors make the best Lawyers:\nboth jobs are essentially about finding flaws, and patching over them (or using\nthem to your advantage). If you're the type of person who, instead of giving up\nwhen faced with a problem, you try to find a solution, you're a math\nperson...even if you don't know your times tables (like myself!).\n\n2) EVERY company can benefit from data, especially those that don't think they\nneed to. If your company doesn't have a data team, then they're straight up\nleaving money on the table in terms of exponential increases in efficiency. \n\n3) The corollary to number 2 is that the less a company utilizes data to their\nadvantage, the more impressive your small contribution will be. For example, I\nbuilt my entire career on being the only person in my company who knew how to do\na lookup (there were almost 5000 people at my company by the way). Use this to\nyour advantage. One thing that's great about data is that it allows you to\nDIRECTLY show how you're adding value to your company.\n\n4) This is perhaps the most important lesson I can impart on you (and indeed, I\nimpart it on my students as well...I'm still a counseling professor in my\ndowntime): It's impossible have all of the tools of a trade at your disposal at\nall times. One who has \"mastered\" their field (whatever their field may be)\nisn't the person who knows everything, it's the person who understands where to\nlook, and how to apply these instructions. No computer programmer knows all of\nthe functions and methods of a programming language off the top of their head,\nbut they do know how to read the documentation, similarly, a doctor doesn't have\nevery medication or condition memorized (at least, not after they've taken their\nStep-1) but they do know how to take test results and lookup the best cause of\naction . As such, when building your skills, focus on understanding the\ndocumentation, rather than trying to memorize all of the functions (because, as\nwe've already covered, there are about 20,000 that you'll never use).\n\nSo, with those four concepts in mind, if you've been wanting to take the data\nplunge, I implore you to identify and area within your company or team that you\nknow can be improved once the issue is identified, then be the person who\nidentifies the issue, and see if you can fix it. You never know, a chef that can\npivot out their ingredient list to cut costs and improve quality may be able to\nleverage that, and HR person can see the time to hire for particular positions\nand focus attention towards those jobs that are hard to fill, and even a\nstand-up comedian can quantify their laughs/joke and build their set that way. \n\nData is everywhere, you just need to learn to see it. \n\n- Snacksfuscious \n\nP.S. for my next post, I'm going to try something different. Did you know that\nby tweaking your computer a little bit, you can crunch numbers even faster? Next\ntime on Adventures in Excel: Hardware.","html":"<p>What's up data gang? If you've been reading along throughout this journey, you'll realize that all of my posts have something in common (other than Excel...smartass), they all assume that you're already working with data...even if it's just cursory exposure. Well, every journey of a thousand worksheets begins with a single lookup, and hopefully this story will help you position yourself to inner-join the fraternity of functions. </p><p>For the two of you who went out of the way to read our bios, you may have seen something interesting: I started out as a therapist...a job that does everything it can to avoid using hard data. You see, every clinician, no matter the discipline will tell you: </p><p>1) The amount of paperwork that they need to complete is absolutely mind boggling (in fact, I had more paperwork doing mental health counseling than I've ever had at my desk job...which is almost entirely paperwork).<br>2) Clinicians will do anything within their power to avoid doing said paperwork.<br>3) They hate their electronic medical records (not their particular program, but the very idea of having a system which makes things easier to track). </p><p>The issue with this Trifecta is that clinicians are paid and audited based on their notes, and as such, they've come up with the saying: \"If you didn't write it, it didn't happen\". With that being said, at every single clinical position I've ever held, I became the expert on our computer systems, as since I was young, I've always loved computers. As time went on, troubleshooting (or, let's be honest...just explaining over and over again to deaf ears) computer issues became one of my essential job duties. After \"doing computers\" became a fact of life, I was given access to our EMR's back-end (that is, where the data lives, as opposed to the front-end, which is what the user interacts with). </p><p>Upon viewing this back-end data, I was ASTOUNDED with how inefficient our notation was. Despite the fact that almost every clinician complained about having to do all their notes (and assessments), they were going <strong><em>out of their way</em></strong> to make documentation a more arduous process. It was at this moment that my origin story began, fixing these issues was akin to my parents being shot in front of me by Joe Chill. </p><p>One thing to note is that at this time, I had never even opened Excel (that's how disengaged the clinical world was from the \"business\" world), and I only had a cursory understanding of databases and spreadsheets, stemming from an AP computer science course that I took in High School (shout out to the rest of the Brooklyn Technites!), and to give you an idea of the time frame here, I was a year and change out of graduate school. Unfortunately, as I hear far too often, I was the victim of a string of horrifically bad math teachers that scared me away from anything that had to do with numbers all throughout college (interestingly, Greek letters I was just fine with...at the time, my brain didn't connect that physics and inorganic chemistry <strong>were </strong>math), so I made it all the way through grad school without ever taking a math class, let alone calculus (AP comp sci counts for an entire year of math...why I still thought I was bad at math now seems like lunacy).</p><p>Until, one faithful day I was given an <em>interesting </em>assignment at the very end of the day: I could use our EMR to run a report that included every patient we had that was given a specific test, but we needed a list of everyone who lacked this particular test. I told my company (which as far as nonprofit clinical agencies go, was actually fairly large) that I would see what I could do, and went home for the day. </p><p>That night, I had DVR'ed the first season of Mr. Robot (I highly recommend season 1), a show about a hacking. One thing I will say about the show is that it has quite possibly the ONLY realistic depiction of hacking in all of fiction...there's no warping into the machine to play a game of space invaders which unlocks the nastygram (read Batman vs. the Punisher to learn more about nastygrams), just the compiling of as much information as possible and then putting it all together, in fact, it illustrates that 90% of hacking is social engineering...which is why you should never give anyone your password (except me...of course). I then binged the entire first season that night, and realized that I somehow understood the vast majority of the intricacies of the hack...almost like I spoke the same <em>language. </em></p><p>I came into the office the next day, and inspired by Mr. Robot, I asked a bunch of questions regarding the data that was available to us through the EMR, and I found out that in addition to getting the list of people who had the test, I could also get a list of <em>everyone. </em>Now, if another clinician got this far, they would realize that with these two pieces of data, you could sort alphabetically and then just see manually who of the 12,000 people on one list weren't on the other, and that could probably have been a part time job for the rest of your days, but I remembered the mission: Efficiency, of which to manually count was anathema. I then tried several search terms in google consisting of \"compare\" and \"list\" and after the second try, I found a tutorial for Vlookups (the irony of my exclusive use of index match when I have VLookup to thank for my future career isn't lost on me) and got to work. </p><p>Now, with seasoned eyes, I realize that this is 12 seconds of work, write a quick index match and double click the lower  right corner of the cell) but at this time I, and more importantly my company (comprised entirely of Luddites) found it incredibly impressive and useful. </p><p>Imbued with a new sense of purpose, and the knowledge that I understood instructions on the internet, I then began my quest to make things more efficient for my colleagues...billing it as \"if you use these tricks, you can see your patients for longer\" (which by all means, is true). As trite as it is to say, I was honestly hoping to have the other clinicians work smarter...and not harder. <br></p><p>Throughout the course my my time as both the \"computer\" guy and a clinician, I instituted a series of projects (think auto-populated note templates, productivity trackers, and a nifty tool that showed you only the people who you haven't seen in a given month so that you can call them), all of which I had the time to do because I too was using these tools to make myself more efficient. Once the time came when I had essentially automated my paperwork, my company began entrusting me with more data, and kept coming up with increasingly complex problems to solve, until they realized that I was essentially building these tools full-time. It was at this point where I made the decision to ask if they could build an analyst position for me that would allow me to see all of our data, track it, trend it, and continue making new tools to help us hit our performance goals (we in the biz call these Key Performance Indicators: KPIs), and they accepted and I moved into my first data analyst job. <br></p><p>Once I had roughly a year under my belt, I could now begin applying to jobs with the data analyst skill-set (who knew that the first thing to come to mind when you see \"Therapist\" isn't \"computer nerd!?) and indeed although I stayed in Healthcare, I moved onto companies that had more robust data needs, and more tools I could use to do the job, and that's where I am today...all because I was inspired by a morphine addicted sociopath who happened to also be a computer whiz. </p><p>So, why did I take the time to write this story? Despite how cocky I can get, even I'm not at the level where I think strangers on the internet would want to read my life story. No, I'm writing this as a general template to how you can leverage any existing skill-set into a job working with data, by following a few simple guidelines: <br></p><p>1) Math isn't a skill, it's a way of thinking. Despite believing that math wasn't for me, after essentially doing \"math\" for the last decade or so I realized that you don't need to be good at \"arithmetic\" (the actual solving of equations and rote calculation) in order to solve math problems, you just need to be the type of person who likes to find solutions and/or find flaws in things. There's a reason that statistically, math majors make the best Lawyers: both jobs are essentially about finding flaws, and patching over them (or using them to your advantage). If you're the type of person who, instead of giving up when faced with a problem, you try to find a solution, you're a math person...even if you don't know your times tables (like myself!).</p><p>2) EVERY company can benefit from data, especially those that don't think they need to. If your company doesn't have a data team, then they're straight up leaving money on the table in terms of exponential increases in efficiency. </p><p>3) The corollary to number 2 is that the less a company utilizes data to their advantage, the more impressive your small contribution will be. For example, I built my entire career on being the only person in my company who knew how to do a lookup (there were almost 5000 people at my company by the way). Use this to your advantage. One thing that's great about data is that it allows you to DIRECTLY show how you're adding value to your company.</p><p>4) This is perhaps the most important lesson I can impart on you (and indeed, I impart it on my students as well...I'm still a counseling professor in my downtime): It's impossible have all of the tools of a trade at your disposal at all times. One who has \"mastered\" their field (whatever their field may be) isn't the person who knows everything, it's the person who understands where to look, and how to apply these instructions. No computer programmer knows all of the functions and methods of a programming language off the top of their head, but they do know how to read the documentation, similarly, a doctor doesn't have every medication or condition memorized (at least, not after they've taken their Step-1) but they do know how to take test results and lookup the best cause of action . As such, when building your skills, focus on understanding the documentation, rather than trying to memorize all of the functions (because, as we've already covered, there are about 20,000 that you'll never use).</p><p>So, with those four concepts in mind, if you've been wanting to take the data plunge, I implore you to identify and area within your company or team that you know can be improved once the issue is identified, then be the person who identifies the issue, and see if you can fix it. You never know, a chef that can pivot out their ingredient list to cut costs and improve quality may be able to leverage that, and HR person can see the time to hire for particular positions and focus attention towards those jobs that are hard to fill, and even a stand-up comedian can quantify their laughs/joke and build their set that way. </p><p>Data is everywhere, you just need to learn to see it. </p><p><em>- Snacksfuscious </em></p><p>P.S. for my next post, I'm going to try something different. Did you know that by tweaking your computer a little bit, you can crunch numbers even faster? Next time on Adventures in Excel: Hardware. </p>","url":"https://hackersandslackers.com/i-owe-my-job-to-mr-robot/","uuid":"0b6d4f0c-a369-4cfd-a21d-ccb6078d42fd","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b71f8648948964601ffb293"}}]}},"pageContext":{"pageNumber":19,"humanPageNumber":20,"skip":228,"limit":12,"numberOfPages":33,"previousPagePath":"/page/19","nextPagePath":"/page/21"}}