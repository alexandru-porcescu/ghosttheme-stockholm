{"data":{"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867372a","title":"Lynx Roundup, October 30th","slug":"lynx-roundup-october-30th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/123@2x.jpg","excerpt":"Crosstabs in Pandas!  Diagnosing malfunctioning Lambdas!  Event-driven systems!","custom_excerpt":"Crosstabs in Pandas!  Diagnosing malfunctioning Lambdas!  Event-driven systems!","created_at_pretty":"16 October, 2018","published_at_pretty":"30 October, 2018","updated_at_pretty":"30 October, 2018","created_at":"2018-10-16T01:59:35.000-04:00","published_at":"2018-10-30T07:00:00.000-04:00","updated_at":"2018-10-30T07:00:00.000-04:00","meta_title":"Crosstabs in Pandas!  Diagnosing malfunctioning Lambdas!  Event-driven systems! | Hackers And Slackers","meta_description":"Crosstabs in Pandas!  Diagnosing malfunctioning Lambdas!  Event-driven systems!","og_description":"Crosstabs in Pandas!  Diagnosing malfunctioning Lambdas!  Event-driven systems!","og_image":"https://hackersandslackers.com/content/images/lynx/123@2x.jpg","og_title":"Lynx Roundup, October 30th","twitter_description":"Crosstabs in Pandas!  Diagnosing malfunctioning Lambdas!  Event-driven systems!","twitter_image":"https://hackersandslackers.com/content/images/lynx/123@2x.jpg","twitter_title":"Lynx Roundup, October 30th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://medium.com/@enjalot/machine-learning-for-visualization-927a9dff1cab\n\nhttps://veekaybee.github.io/2018/09/24/the-case-of-the-broken-lambda/\n\nhttp://pbpython.com/pandas-crosstab.html\n\nhttps://github.com/parrt/dtreeviz\n\nhttps://github.com/socialcopsdev/camelot/\n\nhttps://github.com/arviz-devs/arviz\n\nhttp://www.benstopford.com/2018/10/04/designing-event-driven-systems-summary-arguments/","html":"<p></p><p><a href=\"https://medium.com/@enjalot/machine-learning-for-visualization-927a9dff1cab\">https://medium.com/@enjalot/machine-learning-for-visualization-927a9dff1cab</a></p><p><a href=\"https://veekaybee.github.io/2018/09/24/the-case-of-the-broken-lambda/\">https://veekaybee.github.io/2018/09/24/the-case-of-the-broken-lambda/</a></p><p><a href=\"http://pbpython.com/pandas-crosstab.html\">http://pbpython.com/pandas-crosstab.html</a></p><p><a href=\"https://github.com/parrt/dtreeviz\">https://github.com/parrt/dtreeviz</a></p><p><a href=\"https://github.com/socialcopsdev/camelot/\">https://github.com/socialcopsdev/camelot/</a></p><p><a href=\"https://github.com/arviz-devs/arviz\">https://github.com/arviz-devs/arviz</a></p><p><a href=\"http://www.benstopford.com/2018/10/04/designing-event-driven-systems-summary-arguments/\">http://www.benstopford.com/2018/10/04/designing-event-driven-systems-summary-arguments/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-october-30th/","uuid":"15978de4-4ad7-4982-aa12-16b445097214","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5bc57e47c0b1ac3b7ed7ac6b"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673730","title":"Create a REST API Endpoint Using AWS Lambda","slug":"create-a-rest-api-endpoint-using-aws-lambda","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/10/apigateway4-3@2x.jpg","excerpt":"Use Python and MySQL to Build an Endpoint.","custom_excerpt":"Use Python and MySQL to Build an Endpoint.","created_at_pretty":"29 October, 2018","published_at_pretty":"30 October, 2018","updated_at_pretty":"06 January, 2019","created_at":"2018-10-29T19:26:03.000-04:00","published_at":"2018-10-29T22:08:06.000-04:00","updated_at":"2019-01-05T19:57:04.000-05:00","meta_title":"Create a REST API Endpoint Using AWS Lambda | Hackers and Slackers","meta_description":"Use Python and MySQL to Build an Endpoint","og_description":"Use Python and MySQL to Build an Endpoint","og_image":"https://hackersandslackers.com/content/images/2018/10/apigateway4-3@2x.jpg","og_title":"Create a REST API Endpoint Using AWS Lambda | Hackers and Slackers","twitter_description":"Use Python and MySQL to Build an Endpoint","twitter_image":"https://hackersandslackers.com/content/images/2018/10/apigateway4-3@2x.jpg","twitter_title":"Create a REST API Endpoint Using AWS Lambda | Hackers and Slackers","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"AWS","slug":"aws","description":"Monolithic cloud architecture via microservices. Become familiar with AWS products, account administration, security practices, and tips to make it all easier.","feature_image":null,"meta_description":"Become familiar with AWS services, account administration, security practices, and tips to make it all easier.","meta_title":"Learn AWS | Hackers and Slackers","visibility":"public"},"tags":[{"name":"AWS","slug":"aws","description":"Monolithic cloud architecture via microservices. Become familiar with AWS products, account administration, security practices, and tips to make it all easier.","feature_image":null,"meta_description":"Become familiar with AWS services, account administration, security practices, and tips to make it all easier.","meta_title":"Learn AWS | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"MySQL","slug":"mysql","description":"Database configuration, building queries, and cloud hosting options for MySQL.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/mysqlrevamp_o.jpg","meta_description":"Database configuration, building queries, and cloud hosting options for MySQL.","meta_title":"Working with MySQL | Hackers and Slackers","visibility":"public"},{"name":"Architecture","slug":"architecture","description":"Advancements in software architecture, serverless and beyond. Examples include equivalents to Lambda functions, Docker containers, Google Cloud functions,  Kubernetes, Heroku, etc.","feature_image":null,"meta_description":"Advancements in software architecture, serverless and beyond. Examples include equivalents to cloud functions, Docker containers, Kubernetes, Heroku, etc.","meta_title":"Software Architecture | Hackers and Slackers","visibility":"public"},{"name":"Data Engineering","slug":"dataengineering","description":"The systematic collection and transformation of data via the creation of tools and pipelines.","feature_image":null,"meta_description":null,"meta_title":"Data Engineering | Hackers and Slackers","visibility":"public"},{"name":"#Creating APIs in AWS","slug":"create-an-aws-api","description":"Create a REST API in AWS with industry-standard services such as Lambda Functions, RDS, and API Gateway.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/pythonlambda.jpg","meta_description":"Create an API in AWS with industry-standard services such as Lambda Functions, RDS, and API Gateway.","meta_title":"Create a REST API in AWS","visibility":"internal"}],"plaintext":"Now that you know your way around API Gateway,  you have the power to create\nvast collections of endpoints. If only we could get those endpoints to actually\nreceive and return some stuff. \n\nWe'll create a GET function which will solve the common task of retrieving data\nfrom a database. The sequence will look something like:\n\n * Connect to the database\n * Execute the relevant SQL query\n * Map values returned by the query to a key/value dictionary \n * Return a response body containing the prepared response\n\nTo get started, create a project on your local machine (this is necessary as\nwe'll need to upload a library to import). We're ultimately going to have 3\nitems:\n\n * rds_config.py: Credentials for your RDS database\n * lambda_function.py: The main logic of your function, via the 'handler'\n * pymysql: A lightweight Python library to run SQL queries\n\nStoring Credentials Like an Idiot\nFor the sake of this tutorial and to avoid a security best-practices tangent,\nI'm going to do something very bad: store credentials in plain text. Don't ever\ndo this:  there are much better ways to handle secrets like these, such as using\nAWS Secrets Manager.\n\n# rds_config.py\n\ndb_username = 'myUser'\ndb_password = 'jigheu896vf7bd'\ndb_name = 'myDatabase'\n\n\nThe Holy lambda_function.py\nThis is where the magic happens. For this GET call, we're simply going to get\nall records from a table in a database and return them in a consumable way for\nwhomever will ultimately use the API.\n\nRemember that Lambda expects you to specify the function upon initialization.\nThis can be set in the \"Handler\" field here:\n\nWhere 'lambda_function' is the file, and 'handler' is the function.Let's build\nthis thing:\n\nimport sys\nimport logging\nimport rds_config\nimport pymysql\n\n# rds settings\nrds_host  = \"myDatabase.ghfghghgf.us-east-1.rds.amazonaws.com\"\nname = rds_config.db_username\npassword = rds_config.db_password\ndb_name = rds_config.db_name\n\n# logging\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n# connect using creds from rds_config.py\ntry:\n    conn = pymysql.connect(rds_host, user=name, passwd=password, db=db_name, connect_timeout=5)\nexcept:\n    logger.error(\"ERROR: Unexpected error: Could not connect to MySql instance.\")\n    sys.exit()\n\nlogger.info(\"SUCCESS: Connection to RDS mysql instance succeeded\")\n\n# array to store values to be returned\nrecords = []\n\n# executes upon API event\ndef handler(event, context):\n   with conn.cursor() as cur:\n   cur.execute(\"select * from employees\")\n   conn.commit()\n   for row in cur:\n            record = {\n                    'employee_id': row[1],\n                    'employee_info': {\n                        'firstname': row[2],\n                        'lastname': row[3],\n                        'email': row[4],\n                    }\n                }\n            records.append(record)\n    return records\n\n\n\nCheck out what's happening in our handler function. We're:\n\n * Establishing a DB connection\n * Running a select all  query for a table in our database\n * Iterating over each row returned by the query\n * Mapping values to a dict\n * Appending each generated dict to an array\n * Returning the array as our response body\n\nPyMySQL\nThe shitty thing about the AWS console is there's no way to install python\nlibraries via the UI, so we need to do this locally. In your project folder,\ninstall PyMySQL by using something like virtualenv:\n\n$ virtualenv lambdaenv\n$ source lambdaenv/bin/activate\n$ pip3 install pymysql\n\n\nThat will install the pymysql library in your environment bin. Copy that into\nyour main directory where lambda_function.py lives.\n\nGame time\nIn your project folder, make a zip file of lambda_function.py, rds_config.py,\nand PyMySQL. Upload your ZIP file via the \"Code entry type\" field:\n\nS3 could also work.Save your function and run a test via the top right menu.\nWhen asked to specify a test type, select a standard API call. Your results\nshould look like this:\n\nTest results always appear at the top of the Lambda editor page.Post Functions\nCreating a POST function isn't much more complicated. Obviously we're\nessentially doing the reverse of before: we're expecting information to be\npassed, which we'll add to a database.\n\nlambda_function.py\nimport sys\nimport logging\nimport rds_config\nimport pymysql\nimport json\n\n# rds settings\nrds_host  = \"myDatabase.ghfghghgf.us-east-1.rds.amazonaws.com\"\nname = rds_config.db_username\npassword = rds_config.db_password\ndb_name = rds_config.db_name\n\n# logging\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\ntry:\n    conn = pymysql.connect(rds_host, user=name, passwd=password, db=db_name, connect_timeout=5)\nexcept:\n    logger.error(\"ERROR: Unexpected error: Could not connect to MySql instance.\")\n    sys.exit()\n\nlogger.info(\"SUCCESS: Connection to RDS mysql instance succeeded\")\n\ndef handler(event, context):\n    data = {\n        json.dumps({\n        'key': event['id'],\n        'email': event['email'],\n        'firstname': event['firstname'],\n        'lastname': event['lastname'],\n    }\n    with conn.cursor() as cur:\n        sql = \"INSERT INTO `workers` (`key`, `email`, `firstname`, `lastname`) VALUES (%s, %s, %s, %s)\"\n        cur.execute(sql, (data['key'], data['email'], data['firstname'], data['lastname']))\n        conn.commit()\n    \n    return {\n        'statusCode': 200,\n        'body': data,\n        })\n    }\n\n\n\nParameters in a post function are contained in the event parameter we pass tot\nhe handler. We first create a dict to associate these values. Pay attention to\nhow we structured our sql query for best PyMySQL best practice.\n\nPost functions expect a response body to contain (at the very least) a status\ncode as well as a body. We'll stick to bare minimums here and tell the user is\ngood to go, and recap what was added.\n\nFor the sake of this demo we kept things simple with an insert query, but keep\nin mind this means the same record can never be added twice or updated in this\nmanner- you might be better suited by something such as REPLACE. Just something\nto keep in mind as you're building your app.","html":"<p>Now that you know your way around <strong>API Gateway,</strong> you have the power to create vast collections of endpoints. If only we could get those endpoints to actually receive and return some stuff. </p><p>We'll create a GET function which will solve the common task of retrieving data from a database. The sequence will look something like:</p><ul><li>Connect to the database</li><li>Execute the relevant SQL query</li><li>Map values returned by the query to a key/value dictionary </li><li>Return a response body containing the prepared response</li></ul><p>To get started, create a project on your local machine (this is necessary as we'll need to upload a library to import). We're ultimately going to have 3 items:</p><ul><li><strong>rds_config.py</strong>: Credentials for your RDS database</li><li><strong>lambda_function.py</strong>: The main logic of your function, via the 'handler'</li><li><strong>pymysql</strong>: A lightweight Python library to run SQL queries</li></ul><h3 id=\"storing-credentials-like-an-idiot\">Storing Credentials Like an Idiot</h3><p>For the sake of this tutorial and to avoid a security best-practices tangent, I'm going to do something very bad: store credentials in plain text. <strong>Don't ever do this:</strong> there are much better ways to handle secrets like these, such as using AWS Secrets Manager.</p><pre><code class=\"language-python\"># rds_config.py\n\ndb_username = 'myUser'\ndb_password = 'jigheu896vf7bd'\ndb_name = 'myDatabase'\n</code></pre>\n<h3 id=\"the-holy-lambda_function-py\">The Holy lambda_function.py</h3><p>This is where the magic happens. For this GET call, we're simply going to get all records from a table in a database and return them in a consumable way for whomever will ultimately use the API.</p><p>Remember that Lambda expects you to specify the function upon initialization. This can be set in the \"Handler\" field here:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-5.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/Screen-Shot-2018-05-13-at-6.11.09-PM.png\" class=\"kg-image\"><figcaption>Where 'lambda_function' is the file, and 'handler' is the function.</figcaption></figure><p>Let's build this thing:</p><pre><code class=\"language-python\">import sys\nimport logging\nimport rds_config\nimport pymysql\n\n# rds settings\nrds_host  = &quot;myDatabase.ghfghghgf.us-east-1.rds.amazonaws.com&quot;\nname = rds_config.db_username\npassword = rds_config.db_password\ndb_name = rds_config.db_name\n\n# logging\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n# connect using creds from rds_config.py\ntry:\n    conn = pymysql.connect(rds_host, user=name, passwd=password, db=db_name, connect_timeout=5)\nexcept:\n    logger.error(&quot;ERROR: Unexpected error: Could not connect to MySql instance.&quot;)\n    sys.exit()\n\nlogger.info(&quot;SUCCESS: Connection to RDS mysql instance succeeded&quot;)\n\n# array to store values to be returned\nrecords = []\n\n# executes upon API event\ndef handler(event, context):\n   with conn.cursor() as cur:\n   cur.execute(&quot;select * from employees&quot;)\n   conn.commit()\n   for row in cur:\n            record = {\n                    'employee_id': row[1],\n                    'employee_info': {\n                        'firstname': row[2],\n                        'lastname': row[3],\n                        'email': row[4],\n                    }\n                }\n            records.append(record)\n    return records\n\n</code></pre>\n<p>Check out what's happening in our handler function. We're:</p><ul><li>Establishing a DB connection</li><li>Running a <em>select all</em> query for a table in our database</li><li>Iterating over each row returned by the query</li><li>Mapping values to a dict</li><li>Appending each generated dict to an array</li><li>Returning the array as our response body</li></ul><h3 id=\"pymysql\">PyMySQL</h3><p>The shitty thing about the AWS console is there's no way to install python libraries via the UI, so we need to do this locally. In your project folder, install PyMySQL by using something like virtualenv:</p><pre><code class=\"language-python\">$ virtualenv lambdaenv\n$ source lambdaenv/bin/activate\n$ pip3 install pymysql\n</code></pre>\n<p>That will install the pymysql library in your environment bin. Copy that into your main directory where lambda_function.py lives.</p><h3 id=\"game-time\">Game time</h3><p>In your project folder, make a zip file of lambda_function.py, rds_config.py, and PyMySQL. Upload your ZIP file via the \"Code entry type\" field:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/Screen-Shot-2018-05-13-at-6.28.18-PM.png\" class=\"kg-image\"><figcaption>S3 could also work.</figcaption></figure><p>Save your function and run a test via the top right menu. When asked to specify a test type, select a standard API call. Your results should look like this:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-5.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/Screen-Shot-2018-05-13-at-6.21.23-PM.png\" class=\"kg-image\"><figcaption>Test results always appear at the top of the Lambda editor page.</figcaption></figure><h2 id=\"post-functions\">Post Functions</h2><p>Creating a POST function isn't much more complicated. Obviously we're essentially doing the reverse of before: we're expecting information to be passed, which we'll add to a database.</p><h3 id=\"lambda_function-py\">lambda_function.py</h3><pre><code class=\"language-python\">import sys\nimport logging\nimport rds_config\nimport pymysql\nimport json\n\n# rds settings\nrds_host  = &quot;myDatabase.ghfghghgf.us-east-1.rds.amazonaws.com&quot;\nname = rds_config.db_username\npassword = rds_config.db_password\ndb_name = rds_config.db_name\n\n# logging\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\ntry:\n    conn = pymysql.connect(rds_host, user=name, passwd=password, db=db_name, connect_timeout=5)\nexcept:\n    logger.error(&quot;ERROR: Unexpected error: Could not connect to MySql instance.&quot;)\n    sys.exit()\n\nlogger.info(&quot;SUCCESS: Connection to RDS mysql instance succeeded&quot;)\n\ndef handler(event, context):\n    data = {\n        json.dumps({\n        'key': event['id'],\n        'email': event['email'],\n        'firstname': event['firstname'],\n        'lastname': event['lastname'],\n    }\n    with conn.cursor() as cur:\n        sql = &quot;INSERT INTO `workers` (`key`, `email`, `firstname`, `lastname`) VALUES (%s, %s, %s, %s)&quot;\n        cur.execute(sql, (data['key'], data['email'], data['firstname'], data['lastname']))\n        conn.commit()\n    \n    return {\n        'statusCode': 200,\n        'body': data,\n        })\n    }\n\n</code></pre>\n<p>Parameters in a post function are contained in the event parameter we pass tot he handler. We first create a dict to associate these values. Pay attention to how we structured our sql query for best PyMySQL best practice.</p><p>Post functions expect a response body to contain (at the very least) a status code as well as a body. We'll stick to bare minimums here and tell the user is good to go, and recap what was added.</p><p>For the sake of this demo we kept things simple with an insert query, but keep in mind this means the same record can never be added twice or updated in this manner- you might be better suited by something such as <code>REPLACE</code>. Just something to keep in mind as you're building your app.</p>","url":"https://hackersandslackers.com/create-a-rest-api-endpoint-using-aws-lambda/","uuid":"143ebe65-2939-4930-be08-a6bbe6fc09cf","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5bd7970b97b9c46d478e36f5"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673651","title":"Building an API with Amazon's API Gateway","slug":"creating-apis-with-api-gateway","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/05/apigateway2@2x.jpg","excerpt":"Building APIs: The final frontier of cool-stuff-to-do-in-AWS.","custom_excerpt":"Building APIs: The final frontier of cool-stuff-to-do-in-AWS.","created_at_pretty":"13 May, 2018","published_at_pretty":"29 October, 2018","updated_at_pretty":"05 January, 2019","created_at":"2018-05-13T17:29:07.000-04:00","published_at":"2018-10-29T19:41:00.000-04:00","updated_at":"2019-01-05T13:28:10.000-05:00","meta_title":"Building an API with Amazon's API Gateway | Hackers and Slackers","meta_description":"Use Amazon's API Gateway to design powerful APIs to interact with other AWS services.","og_description":"Use Amazon's API Gateway to design powerful APIs to interact with other AWS services.","og_image":"https://hackersandslackers.com/content/images/2018/05/apigateway2@2x.jpg","og_title":"Building an API with Amazon's API Gateway | Hackers and Slackers","twitter_description":"Use Amazon's API Gateway to design powerful APIs to interact with other AWS services.","twitter_image":"https://hackersandslackers.com/content/images/2018/05/apigateway2@2x.jpg","twitter_title":"Building an API with Amazon's API Gateway | Hackers and Slackers","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"AWS","slug":"aws","description":"Monolithic cloud architecture via microservices. Become familiar with AWS products, account administration, security practices, and tips to make it all easier.","feature_image":null,"meta_description":"Become familiar with AWS services, account administration, security practices, and tips to make it all easier.","meta_title":"Learn AWS | Hackers and Slackers","visibility":"public"},"tags":[{"name":"AWS","slug":"aws","description":"Monolithic cloud architecture via microservices. Become familiar with AWS products, account administration, security practices, and tips to make it all easier.","feature_image":null,"meta_description":"Become familiar with AWS services, account administration, security practices, and tips to make it all easier.","meta_title":"Learn AWS | Hackers and Slackers","visibility":"public"},{"name":"DevOps","slug":"devops","description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","feature_image":null,"meta_description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","meta_title":"DevOps: Networking And Server Configuration | Hackers and Slackers","visibility":"public"},{"name":"Architecture","slug":"architecture","description":"Advancements in software architecture, serverless and beyond. Examples include equivalents to Lambda functions, Docker containers, Google Cloud functions,  Kubernetes, Heroku, etc.","feature_image":null,"meta_description":"Advancements in software architecture, serverless and beyond. Examples include equivalents to cloud functions, Docker containers, Kubernetes, Heroku, etc.","meta_title":"Software Architecture | Hackers and Slackers","visibility":"public"},{"name":"REST APIs","slug":"restapis","description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","feature_image":null,"meta_description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","meta_title":"Consuming and Building REST APIs | Hackers and Slackers","visibility":"public"},{"name":"#Creating APIs in AWS","slug":"create-an-aws-api","description":"Create a REST API in AWS with industry-standard services such as Lambda Functions, RDS, and API Gateway.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/pythonlambda.jpg","meta_description":"Create an API in AWS with industry-standard services such as Lambda Functions, RDS, and API Gateway.","meta_title":"Create a REST API in AWS","visibility":"internal"}],"plaintext":"In our last adventure, we ventured off to create our very own cloud database\n[https://hackersandslackers.com/setting-up-mysql-on-aws/]  by using Amazon's RDS \n service. We've also briefly covered\n[https://hackersandslackers.com/building-an-api-using-aws/]  the general concept\nbehind what Lambda functions. In case you've already forgotten, Lambdas are\nbasically just chunks of code in the cloud; think of them as tiny virtual\nservers, which have already been configured (and locked down) to serve one\nspecific purpose. Because that's literally what it is.\n\nThe data being stored in RDS is ultimately what we're targeting, and Lambdas \nserve as the in-between logic to serve up, modify, or add to the proper data.\nThe only piece missing from the picture is API Gateway. \n\nAs the name suggests, API Gateway  is the, uh, gateway  that users or systems\ninteract with to obtain what they're seeking. It is (hopefully) the only part of\nthis VPC structure an external user can interact with:\n\nSimple API to interact with RDS.Serving as a \"gateway\" is obviously what all\nAPIs so, but the term is also true in the sense that API Gateway  is completely\nconfigured via UI, thus engineers of any programming background can safely\nmodify endpoints, methods,  CORs  configurations, or any of the high-level API\nstructure without being locked into a programming language. API Gateway  is\ntherefore very much an enterprise-geared product: it lends itself to large teams\nand scaling. That said, if it were to be compared to building an API via a\nframework designed to do such things (such as Express or Flask) the experience\nis undoubtedly more clunky. The trade-off being made for speed is immediate\nvisibility, assurance, and a higher chance for collaboration.\n\nThe Challenge of Building a \"Well-Designed\" API\nGood APIs are premeditated. A complex API might accept multiple methods per\nendpoint, allow advanced filtering of results, or handle advanced\nAuthentication. Neither of us have the time to attempt covering all of those\nthings in detail, but I will  leave you with the knowledge that all these\nfeatures are very much possible.\n\nThe API Gateway  interface is where you'd get started. Let's blow through the\nworld's most inappropriately fast explanation of building APIs ever ,and check\nout the UI:\n\nIt ain't pretty, but it works. * Your APIs are listed on the left. You can create more than one, if you're\n   some sort of sadist.\n * The Resources pane is the full structure of your API. At the highest level,\n   'resources' refers to Endpoints,  which are the URLs your API will ultimately\n   expose.\n * Every Endpoint  can contain whichever Methods  you choose to associate with\n   them (GET, POST, PUT, etc). Even if they belong to the same endpoint, a POST\n   method could contain entirely unrelated logic from a PUT method: its your\n   responsibility to make sure your API design makes sense.\n * Finally, each Method has their expected Request and Response  structures\n   defined individually, which what the horribly designed box diagram is\n   attempting to explain on the right. The box on the left labeled CLIENT refers\n   to the requester, where the box on the right represents the triggered action.\n\nThis UI is your bread and butter. I hope you're strapped in, because walking\nthrough this interface is going to be hella boring for all of us.\n\nCreating a Method Request\nThe first step to creating an endpoint (let's say a GET endpoint) is to set the\nexpectation for what the user will send to us:\n\nAwe yea, authorization. 1. Authorization  allows you to restrict users from using your API unless they\n    follow your IAM policy.\n 2. Request Validator  lets you chose if you'd like this validation to happen\n    via the body, query string parameters, headers, or all of the above.\n 3. API Keys  are useful if you're creating an API to sell commercially or\n    enforce limited access. If your business model revolves around selling an\n    API, you can realistically do this.\n 4. Query String Parameters  are... actually forget it, you know this by now.\n 5. See above.\n 6. If preferred, the Request Body can be assigned a model,  which is\n    essentially a JSON schema. If a request is made to your endpoint which does\n    not match the request body model, it is a malformed request. We'll cover \n    models  in the advanced course, once somebody actually starts paying me to\n    write this stuff.\n\nMethod Execution: AKA \"What do we do with this?\"\nSet the game plan. 1. Integration Type  specifies which AWS service will be accepting or affected\n    by this request. The vast majority of the time, this will be Lambda. If\n    you're wondering why other AWS Services aren't present, this has been made\n    intentional over time as just about any AWS service you can interact with\n    will still need logic to do anything useful: you can't just shove a JSON\n    object in a database's face and expect to get results. Unless you're using\n    MongoDB or something.\n 2. Lambda Proxies  are generally a bad idea. They auto-format your Lambda's \n    request  and response  body to follow a very  specific structure, which is\n    presumably intended to help speed up or standardize development. The\n    downside is these structures are bloated and most likely contain useless\n    information. To get an idea of what these structures look like, check them\n    out here.\n 3. The Region  your Lambda hosted lives in.\n 4. Name of the Lamba Function  your request will be directed to.\n 5. Execution role  refers to the IAM role your Lambda policy will be a part of.\n    This is kind of an obnoxious concept, but your function has permissions as\n    though it were a user. This is presumably Amazon's way of thinking ahead to\n    extending human rights to robots.\n 6. Caller Credentials  refers to API keys, assuming you chose to use them. If\n    this is checked, the API will not be usable without an API key, thus making\n    it difficult to test\n 7. Credentials Cache  probably refers to expiring credentials or something, I'm\n    sure you'll figure it out.\n 8. Timeout  can be increased if you're dealing with an API call that takes a\n    lot of time to respond, such as occasions with heavy data sets.\n 9. URL Paths probably do something, I don't know. Who really cares?\n\nINTERMISSION: The Part Where Things Happen\nThe next step in the flow would be where the AWS service we selected to handle\nthe request would do its thing. We'll get into that next time.\n\nResponse Codes and Headers\nKeep it 200 baby. 1. While AWS provides users with standard error codes  and generic errors, you\n    can add your own specific error/success messages. Props to whoever puts in\n    the effort.\n 2. Header Mappings  are the headings returned with the response. For example,\n    this is where you might solve cross-domain issues via the \n    Access-Control-Allow-Origin  header.\n\n3. Mapping Templates  are the Content-Type  of the response returned, most\ncommonly application/json.\n\nMethod Response\nI almost never spend time hereThis step is a continuation of the previous step.\nI'm not entirely sure what the point in splitting this into two screens is, but\nI'm guessing its not important.\n\nReap Your Rewards\nAt long last, this brings us to the end of our journey. This is presumably where\n you've executed a successful AWS test or something. However, there's a final\nstep before you go live; deploying your API:\n\nDeploy your API to a live \"stage\" and retire.Next time we'll cover the logical,\nless boring part of writing actual code behind these endpoints.","html":"<p>In our last adventure, we ventured off to create our very own cloud <a href=\"https://hackersandslackers.com/setting-up-mysql-on-aws/\">database</a> by using Amazon's <strong>RDS</strong> service. We've also <a href=\"https://hackersandslackers.com/building-an-api-using-aws/\">briefly covered</a> the general concept behind what <strong>Lambda functions</strong>. In case you've already forgotten, Lambdas are basically just chunks of code in the cloud; think of them as tiny virtual servers, which have already been configured (and locked down) to serve one specific purpose. Because that's literally what it is.</p><p>The data being stored in <strong>RDS </strong>is ultimately what we're targeting, and <strong>Lambdas</strong> serve as the in-between logic to serve up, modify, or add to the proper data. The only piece missing from the picture is <strong>API Gateway</strong>. </p><p>As the name suggests, <strong>API Gateway</strong> is the, uh, <em>gateway</em> that users or systems interact with to obtain what they're seeking. It is (hopefully) the only part of this VPC structure an external user can interact with:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/apigateway_o-1.jpg\" class=\"kg-image\"><figcaption>Simple API to interact with RDS.</figcaption></figure><p>Serving as a \"gateway\" is obviously what all APIs so, but the term is also true in the sense that <strong>API Gateway</strong> is completely configured via UI, thus engineers of any programming background can safely modify <em>endpoints</em>, <em>methods,</em> <em>CORs</em> configurations, or any of the high-level API structure without being locked into a programming language. <strong>API Gateway</strong> is therefore very much an enterprise-geared product: it lends itself to large teams and scaling. That said, if it were to be compared to building an API via a framework designed to do such things (such as Express or Flask) the experience is undoubtedly more clunky. The trade-off being made for speed is immediate visibility, assurance, and a higher chance for collaboration.</p><h2 id=\"the-challenge-of-building-a-well-designed-api\">The Challenge of Building a \"Well-Designed\" API</h2><p>Good APIs are premeditated. A complex API might accept multiple methods per endpoint, allow advanced filtering of results, or handle advanced Authentication. Neither of us have the time to attempt covering all of those things in detail, but I <em>will</em> leave you with the knowledge that all these features are very much possible.  </p><p>The <strong>API Gateway</strong> interface is where you'd get started. Let's blow through the world's most inappropriately fast explanation of building APIs ever ,and check out the UI:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-5.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/apigateway_overview3.png\" class=\"kg-image\"><figcaption>It ain't pretty, but it works.</figcaption></figure><ul><li>Your <strong>APIs </strong>are listed on the left. You can create more than one, if you're some sort of sadist.</li><li>The <strong>Resources </strong>pane is the full structure of your API. At the highest level, 'resources' refers to <strong>Endpoints,</strong> which are the URLs your API will ultimately expose.</li><li>Every <strong>Endpoint</strong> can contain whichever <strong>Methods</strong> you choose to associate with them (GET, POST, PUT, etc). Even if they belong to the same endpoint, a POST method could contain entirely unrelated logic from a PUT method: its your responsibility to make sure your API design makes sense.</li><li>Finally, each <strong>Method </strong>has their expected <strong>Request </strong>and <strong>Response</strong> structures defined individually, which what the horribly designed box diagram is attempting to explain on the right. The box on the left labeled CLIENT refers to the requester, where the box on the right represents the triggered action.</li></ul><p>This UI is your bread and butter. I hope you're strapped in, because walking through this interface is going to be hella boring for all of us.</p><h3 id=\"creating-a-method-request\">Creating a Method Request</h3><p>The first step to creating an endpoint (let's say a GET endpoint) is to set the expectation for what the user will send to us:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-1.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/methodrequest_o.jpg\" class=\"kg-image\"><figcaption>Awe yea, authorization.</figcaption></figure><ol><li><strong>Authorization</strong> allows you to restrict users from using your API unless they follow your IAM policy.</li><li><strong>Request Validator</strong> lets you chose if you'd like this validation to happen via the body, query string parameters, headers, or all of the above.</li><li><strong>API Keys</strong> are useful if you're creating an API to sell commercially or enforce limited access. If your business model revolves around selling an API, you can realistically do this.</li><li><strong>Query String Parameters</strong> are... actually forget it, you know this by now.</li><li>See above.</li><li>If preferred, the <strong>Request Body </strong>can be assigned a <strong>model,</strong> which is essentially a JSON schema. If a request is made to your endpoint which does not match the request body model, it is a malformed request. We'll cover <strong>models</strong> in the advanced course, once somebody actually starts paying me to write this stuff.</li></ol><h3 id=\"method-execution-aka-what-do-we-do-with-this\">Method Execution: AKA \"What do we do with this?\"</h3><figure class=\"kg-card kg-image-card\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/methodexecution_o.jpg\" class=\"kg-image\"><figcaption>Set the game plan.</figcaption></figure><ol><li><strong>Integration Type</strong> specifies which AWS service will be accepting or affected by this request. The vast majority of the time, this will be Lambda. If you're wondering why other AWS Services aren't present, this has been made intentional over time as just about any AWS service you can interact with will still need logic to do anything useful: you can't just shove a JSON object in a database's face and expect to get results. Unless you're using MongoDB or something.</li><li><strong>Lambda Proxies</strong> are generally a bad idea. They auto-format your Lambda's <em>request</em> and <em>response</em> body to follow a very  specific structure, which is presumably intended to help speed up or standardize development. The downside is these structures are bloated and most likely contain useless information. To get an idea of what these structures look like, check them out <a href=\"https://github.com/bbilger/jrestless/tree/master/aws/gateway/jrestless-aws-gateway-handler#response-schema\">here</a>.</li><li>The <strong>Region</strong> your Lambda hosted lives in.</li><li>Name of the <strong>Lamba Function</strong> your request will be directed to.</li><li><strong>Execution role</strong> refers to the IAM role your Lambda policy will be a part of. This is kind of an obnoxious concept, but your function has permissions as though it were a user. This is presumably Amazon's way of thinking ahead to extending human rights to robots.</li><li><strong>Caller Credentials</strong> refers to API keys, assuming you chose to use them. If this is checked, the API will not be usable without an API key, thus making it difficult to test</li><li><strong>Credentials Cache</strong> probably refers to expiring credentials or something, I'm sure you'll figure it out.</li><li><strong>Timeout</strong> can be increased if you're dealing with an API call that takes a lot of time to respond, such as occasions with heavy data sets.</li><li><strong>URL Paths </strong>probably do something, I don't know. Who really cares?</li></ol><h3 id=\"intermission-the-part-where-things-happen\">INTERMISSION: The Part Where Things Happen</h3><p>The next step in the flow would be where the AWS service we selected to handle the request would do its thing. We'll get into that next time.</p><h3 id=\"response-codes-and-headers\">Response Codes and Headers</h3><figure class=\"kg-card kg-image-card\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/response_o.jpg\" class=\"kg-image\"><figcaption>Keep it 200 baby.</figcaption></figure><ol><li>While AWS provides users with standard <strong>error codes</strong> and generic errors, you can add your own specific error/success messages. Props to whoever puts in the effort.</li><li><strong>Header Mappings</strong> are the headings returned with the response. For example, this is where you might solve cross-domain issues via the <em>Access-Control-Allow-Origin</em> header.</li></ol><p>3. <strong>Mapping Templates</strong> are the <em>Content-Type</em> of the response returned, most commonly <em>application/json.</em></p><h3 id=\"method-response\">Method Response</h3><figure class=\"kg-card kg-image-card\"><img src=\"https://res-4.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/Screen-Shot-2018-10-29-at-8.54.51-PM_o.png\" class=\"kg-image\"><figcaption>I almost never spend time here</figcaption></figure><p>This step is a continuation of the previous step. I'm not entirely sure what the point in splitting this into two screens is, but I'm guessing its not important.</p><h2 id=\"reap-your-rewards\">Reap Your Rewards</h2><p>At long last, this brings us to the end of our journey. This is presumably where  you've executed a successful AWS test or something. However, there's a final step before you go live; deploying your API:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-4.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/Screen-Shot-2018-10-29-at-9.02.52-PM_o.png\" class=\"kg-image\"><figcaption>Deploy your API to a live \"stage\" and retire.</figcaption></figure><p>Next time we'll cover the logical, less boring part of writing actual code behind these endpoints.</p>","url":"https://hackersandslackers.com/creating-apis-with-api-gateway/","uuid":"ce9c1023-431b-4580-b3ca-1a3e2074f9c5","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5af8ae23092feb404eb9981e"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673729","title":"Lynx Roundup, October 29th","slug":"lynx-roundup-october-29th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/02/73-1-2@2x.jpg","excerpt":"Database schema-making tool!  Data Project Management!  Apache Pulsar (I think it's friends with Kafka!)!","custom_excerpt":"Database schema-making tool!  Data Project Management!  Apache Pulsar (I think it's friends with Kafka!)!","created_at_pretty":"16 October, 2018","published_at_pretty":"29 October, 2018","updated_at_pretty":"14 February, 2019","created_at":"2018-10-16T01:56:04.000-04:00","published_at":"2018-10-29T07:00:00.000-04:00","updated_at":"2019-02-14T05:02:36.000-05:00","meta_title":"Lynx Roundup, October 29th | Hackers and Slackers","meta_description":"Database schema-making tool!  Data Project Management!  Apache Pulsar (I think it's friends with Kafka!)!","og_description":"Database schema-making tool!  Data Project Management!  Apache Pulsar (I think it's friends with Kafka!)!","og_image":"https://hackersandslackers.com/content/images/2019/02/73-1-2@2x.jpg","og_title":"Lynx Roundup, October 29th","twitter_description":"Database schema-making tool!  Data Project Management!  Apache Pulsar (I think it's friends with Kafka!)!","twitter_image":"https://hackersandslackers.com/content/images/2019/02/73-1-2@2x.jpg","twitter_title":"Lynx Roundup, October 29th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://blog.insightdatascience.com/how-to-deliver-on-machine-learning-projects-c8d82ce642b0\n\nhttps://hackernoon.com/dbdiagram-io-a-database-diagram-designer-built-for-developers-and-analysts-975f310d4f13\n\nhttps://blog.insightdatascience.com/an-introduction-to-the-data-product-management-landscape-ef930afe6de5\n\nhttps://medium.com/datadriveninvestor/understanding-startup-valuation-a393f6fadc6f\n\nhttps://arxiv.org/abs/1809.10756\n\nhttps://blog.insightdatascience.com/how-to-deliver-on-machine-learning-projects-c8d82ce642b0\n\nhttps://jack-vanlightly.com/blog/2018/10/2/understanding-how-apache-pulsar-works","html":"<p></p><p><a href=\"https://blog.insightdatascience.com/how-to-deliver-on-machine-learning-projects-c8d82ce642b0\">https://blog.insightdatascience.com/how-to-deliver-on-machine-learning-projects-c8d82ce642b0</a></p><p><a href=\"https://hackernoon.com/dbdiagram-io-a-database-diagram-designer-built-for-developers-and-analysts-975f310d4f13\">https://hackernoon.com/dbdiagram-io-a-database-diagram-designer-built-for-developers-and-analysts-975f310d4f13</a></p><p><a href=\"https://blog.insightdatascience.com/an-introduction-to-the-data-product-management-landscape-ef930afe6de5\">https://blog.insightdatascience.com/an-introduction-to-the-data-product-management-landscape-ef930afe6de5</a></p><p><a href=\"https://medium.com/datadriveninvestor/understanding-startup-valuation-a393f6fadc6f\">https://medium.com/datadriveninvestor/understanding-startup-valuation-a393f6fadc6f</a></p><p><a href=\"https://arxiv.org/abs/1809.10756\">https://arxiv.org/abs/1809.10756</a></p><p><a href=\"https://blog.insightdatascience.com/how-to-deliver-on-machine-learning-projects-c8d82ce642b0\">https://blog.insightdatascience.com/how-to-deliver-on-machine-learning-projects-c8d82ce642b0</a></p><p><a href=\"https://jack-vanlightly.com/blog/2018/10/2/understanding-how-apache-pulsar-works\">https://jack-vanlightly.com/blog/2018/10/2/understanding-how-apache-pulsar-works</a></p>","url":"https://hackersandslackers.com/lynx-roundup-october-29th/","uuid":"b80ee4cb-cb24-4353-9e0d-cf3778cd0e2f","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5bc57d74c0b1ac3b7ed7ac64"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673728","title":"Lynx Roundup, October 28th","slug":"lynx-roundup-october-28th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/02/84-1@2x.jpg","excerpt":"C and Ruist!  Uncertainty estimates!  Data mining on graphs with Spark!","custom_excerpt":"C and Ruist!  Uncertainty estimates!  Data mining on graphs with Spark!","created_at_pretty":"16 October, 2018","published_at_pretty":"28 October, 2018","updated_at_pretty":"14 February, 2019","created_at":"2018-10-16T01:54:39.000-04:00","published_at":"2018-10-28T07:00:00.000-04:00","updated_at":"2019-02-14T05:03:08.000-05:00","meta_title":"C and Ruist!  Uncertainty estimates!  Data mining on graphs with Spark! | Hackers And Slackers","meta_description":"C and Ruist!  Uncertainty estimates!  Data mining on graphs with Spark!","og_description":"C and Ruist!  Uncertainty estimates!  Data mining on graphs with Spark!","og_image":"https://hackersandslackers.com/content/images/2019/02/84-1@2x.jpg","og_title":"Lynx Roundup, October 28th","twitter_description":"C and Ruist!  Uncertainty estimates!  Data mining on graphs with Spark!","twitter_image":"https://hackersandslackers.com/content/images/2019/02/84-1@2x.jpg","twitter_title":"Lynx Roundup, October 28th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.bloomberg.com/news/features/2018-10-04/the-big-hack-how-china-used-a-tiny-chip-to-infiltrate-america-s-top-companies\n\nhttp://dtrace.org/blogs/bmc/2018/09/28/the-relative-performance-of-c-and-rust/\n\nhttps://www.techrepublic.com/article/google-deepmind-founder-demis-hassabis-three-truths-about-ai/\n\nhttps://www.mixnode.com/blog/posts/turn-the-web-into-a-database-an-alternative-to-web-crawling-scraping\n\nhttps://towardsdatascience.com/large-scale-graph-mining-with-spark-750995050656\n\nhttps://stratechery.com/2018/data-factories/\n\nhttps://erikbern.com/2018/10/08/the-hackers-guide-to-uncertainty-estimates.html","html":"<p></p><p><a href=\"https://www.bloomberg.com/news/features/2018-10-04/the-big-hack-how-china-used-a-tiny-chip-to-infiltrate-america-s-top-companies\">https://www.bloomberg.com/news/features/2018-10-04/the-big-hack-how-china-used-a-tiny-chip-to-infiltrate-america-s-top-companies</a></p><p><a href=\"http://dtrace.org/blogs/bmc/2018/09/28/the-relative-performance-of-c-and-rust/\">http://dtrace.org/blogs/bmc/2018/09/28/the-relative-performance-of-c-and-rust/</a></p><p><a href=\"https://www.techrepublic.com/article/google-deepmind-founder-demis-hassabis-three-truths-about-ai/\">https://www.techrepublic.com/article/google-deepmind-founder-demis-hassabis-three-truths-about-ai/</a></p><p><a href=\"https://www.mixnode.com/blog/posts/turn-the-web-into-a-database-an-alternative-to-web-crawling-scraping\">https://www.mixnode.com/blog/posts/turn-the-web-into-a-database-an-alternative-to-web-crawling-scraping</a></p><p><a href=\"https://towardsdatascience.com/large-scale-graph-mining-with-spark-750995050656\">https://towardsdatascience.com/large-scale-graph-mining-with-spark-750995050656</a></p><p><a href=\"https://stratechery.com/2018/data-factories/\">https://stratechery.com/2018/data-factories/</a></p><p><a href=\"https://erikbern.com/2018/10/08/the-hackers-guide-to-uncertainty-estimates.html\">https://erikbern.com/2018/10/08/the-hackers-guide-to-uncertainty-estimates.html</a></p>","url":"https://hackersandslackers.com/lynx-roundup-october-28th/","uuid":"95c0874b-8d37-4ea3-87bf-b21ae3b49b26","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5bc57d1fc0b1ac3b7ed7ac5e"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673727","title":"Lynx Roundup, October 27th","slug":"lynx-roundup-october-27th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/125@2x.jpg","excerpt":"Data mining classsical music!  Neuroanatomy & Machine Learning!  Machine learning on Graphs!","custom_excerpt":"Data mining classsical music!  Neuroanatomy & Machine Learning!  Machine learning on Graphs!","created_at_pretty":"16 October, 2018","published_at_pretty":"27 October, 2018","updated_at_pretty":"30 October, 2018","created_at":"2018-10-16T01:50:50.000-04:00","published_at":"2018-10-27T07:00:00.000-04:00","updated_at":"2018-10-30T04:32:46.000-04:00","meta_title":"Lynx Roundup, October 27th | Hackers and Slackers","meta_description":"Data mining classsical music!  Neuroanatomy & Machine Learning!  Machine learning on Graphs!","og_description":"Data mining classsical music!  Neuroanatomy & Machine Learning!  Machine learning on Graphs!","og_image":"https://hackersandslackers.com/content/images/lynx/125@2x.jpg","og_title":"Lynx Roundup, October 27th","twitter_description":"Data mining classsical music!  Neuroanatomy & Machine Learning!  Machine learning on Graphs!","twitter_image":"https://hackersandslackers.com/content/images/lynx/125@2x.jpg","twitter_title":"Lynx Roundup, October 27th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://towardsdatascience.com/coral-cities-an-ito-design-lab-concept-c01a3f4a2722\n\nhttps://www.technologyreview.com/s/612194/data-mining-reveals-the-hidden-laws-of-evolution-behind-classical-music/\n\nhttps://aws.amazon.com/blogs/machine-learning/segmenting-brain-tissue-using-apache-mxnet-with-amazon-sagemaker-and-aws-greengrass-ml-inference-part-1/\n\nhttps://medium.com/@dtunkelang/query-understanding-divided-into-three-parts-d9cbc81a5d09\n\nhttps://blog.pythonanywhere.com/169/\n\nhttps://github.com/stellargraph/stellargraph\n\nhttps://opensource.com/article/18/10/functional-programming-python-immutable-data-structures","html":"<p></p><p><a href=\"https://towardsdatascience.com/coral-cities-an-ito-design-lab-concept-c01a3f4a2722\">https://towardsdatascience.com/coral-cities-an-ito-design-lab-concept-c01a3f4a2722</a></p><p><a href=\"https://www.technologyreview.com/s/612194/data-mining-reveals-the-hidden-laws-of-evolution-behind-classical-music/\">https://www.technologyreview.com/s/612194/data-mining-reveals-the-hidden-laws-of-evolution-behind-classical-music/</a></p><p><a href=\"https://aws.amazon.com/blogs/machine-learning/segmenting-brain-tissue-using-apache-mxnet-with-amazon-sagemaker-and-aws-greengrass-ml-inference-part-1/\">https://aws.amazon.com/blogs/machine-learning/segmenting-brain-tissue-using-apache-mxnet-with-amazon-sagemaker-and-aws-greengrass-ml-inference-part-1/</a></p><p><a href=\"https://medium.com/@dtunkelang/query-understanding-divided-into-three-parts-d9cbc81a5d09\">https://medium.com/@dtunkelang/query-understanding-divided-into-three-parts-d9cbc81a5d09</a></p><p><a href=\"https://blog.pythonanywhere.com/169/\">https://blog.pythonanywhere.com/169/</a></p><p><a href=\"https://github.com/stellargraph/stellargraph\">https://github.com/stellargraph/stellargraph</a></p><p><a href=\"https://opensource.com/article/18/10/functional-programming-python-immutable-data-structures\">https://opensource.com/article/18/10/functional-programming-python-immutable-data-structures</a></p>","url":"https://hackersandslackers.com/lynx-roundup-october-27th/","uuid":"b854e5e0-1880-4951-9d48-d90e67b3e0c6","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5bc57c3ac0b1ac3b7ed7ac58"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673726","title":"Lynx Roundup, October 26th","slug":"lynx-roundup-october-26th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/82@2x.jpg","excerpt":"Data science on a chromebook!  Graphing big datasets!  Intel's optimized Python libraries!","custom_excerpt":"Data science on a chromebook!  Graphing big datasets!  Intel's optimized Python libraries!","created_at_pretty":"16 October, 2018","published_at_pretty":"26 October, 2018","updated_at_pretty":"26 October, 2018","created_at":"2018-10-16T01:48:10.000-04:00","published_at":"2018-10-26T07:00:00.000-04:00","updated_at":"2018-10-26T07:00:00.000-04:00","meta_title":"Data science on a chromebook!  Graphing big datasets!  Intel's optimized Python libraries! | Hackers And Slackers","meta_description":"Data science on a chromebook!  Graphing big datasets!  Intel's optimized Python libraries!","og_description":"Data science on a chromebook!  Graphing big datasets!  Intel's optimized Python libraries!","og_image":"https://hackersandslackers.com/content/images/lynx/82@2x.jpg","og_title":"Lynx Roundup, October 26th","twitter_description":"Data science on a chromebook!  Graphing big datasets!  Intel's optimized Python libraries!","twitter_image":"https://hackersandslackers.com/content/images/lynx/82@2x.jpg","twitter_title":"Lynx Roundup, October 26th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.instagram.com/p/Bh6iELrnh0p/?taken-by=npekonen\n\nhttps://simplystatistics.org/2018/10/01/chromebook-data-science-an-online-data-science-program-for-anyone-with-a-web-browser/\n\nhttps://www.kdnuggets.com/2018/10/intel-unleash-faster-python-data.html\n\nhttps://theintercept.com/2018/10/02/modern-monetary-theory-conference/\n\nhttps://notesfrombelow.org/article/an-introduction-to-wobbly\n\nhttps://twitter.com/leland_mcinnes/status/1047680209921740800\n\nhttp://datashader.org/","html":"<p></p><p><a href=\"https://www.instagram.com/p/Bh6iELrnh0p/?taken-by=npekonen\">https://www.instagram.com/p/Bh6iELrnh0p/?taken-by=npekonen</a></p><p><a href=\"https://simplystatistics.org/2018/10/01/chromebook-data-science-an-online-data-science-program-for-anyone-with-a-web-browser/\">https://simplystatistics.org/2018/10/01/chromebook-data-science-an-online-data-science-program-for-anyone-with-a-web-browser/</a></p><p><a href=\"https://www.kdnuggets.com/2018/10/intel-unleash-faster-python-data.html\">https://www.kdnuggets.com/2018/10/intel-unleash-faster-python-data.html</a></p><p><a href=\"https://theintercept.com/2018/10/02/modern-monetary-theory-conference/\">https://theintercept.com/2018/10/02/modern-monetary-theory-conference/</a></p><p><a href=\"https://notesfrombelow.org/article/an-introduction-to-wobbly\">https://notesfrombelow.org/article/an-introduction-to-wobbly</a></p><p><a href=\"https://twitter.com/leland_mcinnes/status/1047680209921740800\">https://twitter.com/leland_mcinnes/status/1047680209921740800</a></p><p><a href=\"http://datashader.org/\">http://datashader.org/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-october-26th/","uuid":"cc70103d-3e7a-432d-a901-c0e4b7d493d0","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5bc57b9ac0b1ac3b7ed7ac53"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867372f","title":"Deploy Isolated Applications with Google App Engine","slug":"deploy-app-containters-with-gcp-app-engine","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/10/appengine@2x.jpg","excerpt":"Doing everything to avoid server configuration or any mild discomfort.","custom_excerpt":"Doing everything to avoid server configuration or any mild discomfort.","created_at_pretty":"25 October, 2018","published_at_pretty":"25 October, 2018","updated_at_pretty":"06 January, 2019","created_at":"2018-10-24T20:30:22.000-04:00","published_at":"2018-10-25T07:30:00.000-04:00","updated_at":"2019-01-06T11:26:06.000-05:00","meta_title":"Deploy App Containters with GCP App Engine | Hackers and Slackers","meta_description":"Doing everything to avoid server configuration or any mild discomfort.","og_description":"Doing everything to avoid server configuration or any mild discomfort.","og_image":"https://hackersandslackers.com/content/images/2018/10/appengine@2x.jpg","og_title":"Deploy App Containters with GCP App Engine | Hackers and Slackers","twitter_description":"Doing everything to avoid server configuration or any mild discomfort.","twitter_image":"https://hackersandslackers.com/content/images/2018/10/appengine@2x.jpg","twitter_title":"Deploy App Containters with GCP App Engine | Hackers and Slackers","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Google Cloud","slug":"googlecloud","description":"Evaluating Google Cloud Platform’s offerings. Get introduced with tutorials, see our vendor comparisons, and endure biased opinions on GCP as a whole.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/googleseries2.jpg","meta_description":"Evaluating Google Cloud Platform’s offerings. Get introduced with tutorials, see our vendor comparisons, and endure biased opinions on GCP as a whole.","meta_title":"The Rise of Google Cloud | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Google Cloud","slug":"googlecloud","description":"Evaluating Google Cloud Platform’s offerings. Get introduced with tutorials, see our vendor comparisons, and endure biased opinions on GCP as a whole.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/googleseries2.jpg","meta_description":"Evaluating Google Cloud Platform’s offerings. Get introduced with tutorials, see our vendor comparisons, and endure biased opinions on GCP as a whole.","meta_title":"The Rise of Google Cloud | Hackers and Slackers","visibility":"public"},{"name":"Architecture","slug":"architecture","description":"Advancements in software architecture, serverless and beyond. Examples include equivalents to Lambda functions, Docker containers, Google Cloud functions,  Kubernetes, Heroku, etc.","feature_image":null,"meta_description":"Advancements in software architecture, serverless and beyond. Examples include equivalents to cloud functions, Docker containers, Kubernetes, Heroku, etc.","meta_title":"Software Architecture | Hackers and Slackers","visibility":"public"},{"name":"DevOps","slug":"devops","description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","feature_image":null,"meta_description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","meta_title":"DevOps: Networking And Server Configuration | Hackers and Slackers","visibility":"public"},{"name":"#The Rise of Google Cloud","slug":"the-rise-of-google-cloud","description":"Build robust serverless architecture on Google Cloud Platform. Learn through tutorials, make comparisons, and hear opinions on GCP as a whole.","feature_image":"https://res-5.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/ADF7E324-9EAD-4F15-8670-AF205E6804EA.png","meta_description":"Build robust serverless architecture on Google Cloud Platform. Learn through tutorials, make comparisons, and hear opinions on GCP as a whole.","meta_title":"The Rise of Google Cloud","visibility":"internal"}],"plaintext":"We've been on a bit of a tear lately on Google Cloud lately (or at least I\nhave), and I have no desire to stop any time soon. I probably should though...\n our analytics show that half our viewers are just people struggling to us AWS.\nSpeaking of capitalizing on shitty UI, stay tuned in the future where we'll\noffer grossly overpriced unauthorized AWS certification programs.\n\nAWS aside, I'm here to talk about the other  Cloud in town - in particular,\nGoogle's solution to make sure you never configure a webserver again. This is a\ntrend that's been grinding my gears a bit: as much as I appreciate the reduction\nin effort, the costs of choosing proprietary (paid) services to avoid opening a\nLinux shell seems like a dangerous prospect over time as every day developers\nbecome more and more reliant on convenience. Then again, I'm probably just angry\nthat nobody will have to endure the pain of Python development circa 2012. \n\nRandom Old-Man Tangent About Configuring Webservers\nRemember when we all ran Apache servers, and the world decided that mod_python \nshould stop existing for no reason? The replacement was, of course, mod_wsgi:  \nan entirely undocumented way of running Python on an Apache server created by a\nsingle guy from Google (who has apparently opted to spend the entirety of his\nlife attempting to explain mod_wsgi on StackOverflow\n[https://stackoverflow.com/users/128141/graham-dumpleton]). \n\nBesides mod_wsgi, the Nginx alternatives (Gunicorn  and uWSGI) are almost\nequally insufferable to implement. Much of this can be attributed to tutorials\n(such as those posted by DigitalOcean) which dominate SEO, merely because those\ntutorials include glaring inexcusable typos  in their configuration files. This\nresults in an infinite Google search feedback loop, where you find what seems to\nbe a perfectly fine tutorial... plus 10 pages of frustrated developers\nbacklinking to said tutorial, trying to figure out where the hell the missing\ncolon is in their Nginx config. Spoiler alert: that's not the only typo, and I'm\npretty sure at this point nobody cares to put up with monetized troubleshooting\nbullshit schemes (calling it now: the slightly-false-tutorial is an elaborate\nSEO scam).  So yeah, app containers it is then.\n\nThe Benefits of App Engine\nBesides not needing to know anything about Linux, hosting on App Engine provides\na few other benefits. Considering all microservices are obfuscated in the cloud,\nwe can easily hook into other services such as setting up CRON jobs, Tasks, and\nDNS, for instance. GCP's catalogue of offerings is destined to grow, whether\nthose offerings are ferociously released from Google's ambitious backlog, or the\nresult of a partnership utilizing Google Cloud for architecture, such as MongoDB\ncloud and others. Prepare to witness fierce and unapologetic growth from GCP by\nevery metric, year-over-year. \n\nApp Engine  is also intimately close with your source code. Despite the\ndynamically typed nature of Python and Javascript, App Engine will catch fatal\nerrors when attempting to deploy your app which would not happen otherwise.\nAdding this type of interpreter adds a convenient level of 'easy mode,' where\npotentially fatal production errors are caught before deployment is even\npermitted. I even tried deploying some personal projects to App Engine which had\nbeen running live elsewhere, and App Engine was able to catch errors existing in\nmy code which had been shamelessly running in production. Oops.\n\nEven while the app is live, all errors are conveniently detected and reported\nfront and center in the app engine dashboard:\n\n\"No module named App\" seems like a pretty bad error.So yes, there are plenty of\nbenefits and reasons to use App Engine over a VPS: removal of webserver\nconfiguration, build errors caught at runtime, and easy command-line deployments\nname a few of such benefits. The question of whether or not these perks are\nworth the price tag and vendor-lock are a personal decision.\n\nCreating your First App... Engine\nGoogle provides the luxury of creating apps in a variety of languages, including\nhot new -comer to the game, PHP. Lucky us!\n\nHah, .NET is still a thing too.Google will forcefully insist you complete their\nown step-by-step tutorial, which essentially teaches you how to use git clone \nand explains the contents of their YAML file. You can follow this if you want. \n\nMore interestingly is what you'll find when you open the GCP browser shell.\nWhile working through this tutorial, it's impossible to ignore that Google Cloud\nis essentially just a giant VPS across all your projects:\n\nAll of these directories were created in different projects.Just when we were\ndone ranting, it turns out every service we pay for is just a thinly veiled\nobfuscation of something we could probably do on a 10 dollar Droplet. Fuck,\nlet's just move on.\n\nSimple Project Configuration\nPerhaps majority of what one needs to learn to deploy apps is contained within a\nsingle YAML file. Add a YAML file in your directory:\n\nruntime: python37\napi_version: 1\n\nhandlers:\n  # This configures Google App Engine to serve the files in the app's static\n  # directory.\n- url: static\n  static_dir: static\n\n  # This handler routes all requests not caught above to your main app.\n  # Required when static routes are defined. \n  # Can be omitted when there are no static files defined.\n- url: /.*\n  script: auto\n\n\nSet your Static directory if you're working in Python. Use Python 3.7.\n\nGoogle also invented its own version of .gitignore  for App Engine called \n.gcloudignore, so be aware of that.\n\nHaving worked with Flask in the past, you should presumably be familiar with a\nstartup script such as the following:\n\nfrom framewrk import create_app\n\napp = create_app()\n\nif __name__ == \"__main__\":\n    app.run(host='0.0.0.0')\n\n\nThat's pretty much it man. Just remember that Google prefers requirements.txt \nover other forms of package management (Google will actually bar Pipfile from\nbeing committed, interestingly enough). \n\nIf you're working locally, gcloud app deploy  is all you need to push to\nproduction (doesn't require a git commit, interestingly enough. gcloud app\nbrowse  will open you newly deployed app, and gcloud app logs tail -s default \nwill display your logs when something goes horribly wrong.\n\nAnd there you have it: the practical and completely cynical guide to embracing\nmodern architecture. Join us next time when we pay 50 dollars to deploy a\nsingle-click app simply because we're too lazy or unmotivated to set anything up\nourselves.","html":"<p>We've been on a bit of a tear lately on Google Cloud lately (or at least I have), and I have no desire to stop any time soon. I probably should though...  our analytics show that half our viewers are just people struggling to us AWS. Speaking of capitalizing on shitty UI, stay tuned in the future where we'll offer grossly overpriced unauthorized AWS certification programs.</p><p>AWS aside, I'm here to talk about the <em>other</em> Cloud in town - in particular, Google's solution to make sure you never configure a webserver again. This is a trend that's been grinding my gears a bit: as much as I appreciate the reduction in effort, the costs of choosing proprietary (paid) services to avoid opening a Linux shell seems like a dangerous prospect over time as every day developers become more and more reliant on convenience. Then again, I'm probably just angry that nobody will have to endure the pain of Python development circa 2012. </p><h3 id=\"random-old-man-tangent-about-configuring-webservers\">Random Old-Man Tangent About Configuring Webservers</h3><p>Remember when we all ran Apache servers, and the world decided that <strong>mod_python</strong> should stop existing for no reason? The replacement was, of course, <strong>mod_wsgi</strong>:<strong> </strong>an entirely undocumented way of running Python on an Apache server created by a single guy from Google (who has apparently opted to spend the entirety of his life attempting to <a href=\"https://stackoverflow.com/users/128141/graham-dumpleton\">explain <strong>mod_wsgi</strong> on StackOverflow</a>). </p><p>Besides <strong>mod_wsgi</strong>, the Nginx alternatives (<strong>Gunicorn</strong> and <strong>uWSGI</strong>) are almost equally insufferable to implement. Much of this can be attributed to tutorials (such as those posted by DigitalOcean) which dominate SEO, merely because those tutorials include <em>glaring inexcusable typos</em> in their configuration files. This results in an infinite Google search feedback loop, where you find what seems to be a perfectly fine tutorial... plus 10 pages of frustrated developers backlinking to said tutorial, trying to figure out where the hell the missing colon is in their Nginx config. Spoiler alert: that's not the only typo, and I'm pretty sure at this point nobody cares to put up with monetized troubleshooting bullshit schemes (calling it now: the slightly-false-tutorial is an elaborate SEO scam).  So yeah, app containers it is then.</p><h2 id=\"the-benefits-of-app-engine\">The Benefits of App Engine</h2><p>Besides not needing to know anything about Linux, hosting on App Engine provides a few other benefits. Considering all microservices are obfuscated in the cloud, we can easily hook into other services such as setting up CRON jobs, Tasks, and DNS, for instance. GCP's catalogue of offerings is destined to grow, whether those offerings are ferociously released from Google's ambitious backlog, or the result of a partnership utilizing Google Cloud for architecture, such as MongoDB cloud and others. Prepare to witness fierce and unapologetic growth from GCP by every metric, year-over-year. </p><p><strong>App Engine</strong> is also intimately close with your source code. Despite the dynamically typed nature of Python and Javascript, App Engine will catch fatal errors when attempting to deploy your app which would not happen otherwise. Adding this type of interpreter adds a convenient level of 'easy mode,' where potentially fatal production errors are caught before deployment is even permitted. I even tried deploying some personal projects to App Engine which had been running live elsewhere, and App Engine was able to catch errors existing in my code which had been shamelessly running in production. Oops.</p><p>Even while the app is live, all errors are conveniently detected and reported front and center in the app engine dashboard:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-4.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/Screen-Shot-2018-10-24-at-10.12.19-PM.png\" class=\"kg-image\"><figcaption>\"No module named App\" seems like a pretty bad error.</figcaption></figure><p>So yes, there are plenty of benefits and reasons to use App Engine over a VPS: removal of webserver configuration, build errors caught at runtime, and easy command-line deployments name a few of such benefits. The question of whether or not these perks are worth the price tag and vendor-lock are a personal decision.</p><h2 id=\"creating-your-first-app-engine\">Creating your First App... Engine</h2><p>Google provides the luxury of creating apps in a variety of languages, including hot new -comer to the game, PHP. Lucky us!</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-1.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/Screen-Shot-2018-10-24-at-10.17.59-PM.png\" class=\"kg-image\"><figcaption>Hah, .NET is still a thing too.</figcaption></figure><p>Google will forcefully insist you complete their own step-by-step tutorial, which essentially teaches you how to use <strong>git clone</strong> and explains the contents of their YAML file. You can follow this if you want. </p><p>More interestingly is what you'll find when you open the GCP browser shell. While working through this tutorial, it's impossible to ignore that Google Cloud is essentially just a giant VPS <em>across all your projects:</em></p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-4.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/Screen-Shot-2018-10-24-at-10.26.44-PM.png\" class=\"kg-image\"><figcaption>All of these directories were created in different projects.</figcaption></figure><p>Just when we were done ranting, it turns out every service we pay for is just a thinly veiled obfuscation of something we could probably do on a 10 dollar Droplet. Fuck, let's just move on.</p><h3 id=\"simple-project-configuration\">Simple Project Configuration</h3><p>Perhaps majority of what one needs to learn to deploy apps is contained within a single YAML file. Add a YAML file in your directory:</p><pre><code class=\"language-yaml\">runtime: python37\napi_version: 1\n\nhandlers:\n  # This configures Google App Engine to serve the files in the app's static\n  # directory.\n- url: static\n  static_dir: static\n\n  # This handler routes all requests not caught above to your main app.\n  # Required when static routes are defined. \n  # Can be omitted when there are no static files defined.\n- url: /.*\n  script: auto\n</code></pre>\n<p>Set your Static directory if you're working in Python. Use Python 3.7.</p><p>Google also invented its own version of <code>.gitignore</code> for App Engine called <code>.gcloudignore</code>, so be aware of that.</p><p>Having worked with Flask in the past, you should presumably be familiar with a startup script such as the following:</p><pre><code class=\"language-python\">from framewrk import create_app\n\napp = create_app()\n\nif __name__ == &quot;__main__&quot;:\n    app.run(host='0.0.0.0')\n</code></pre>\n<p>That's pretty much it man. Just remember that Google prefers <strong>requirements.txt </strong>over other forms of package management (Google will actually bar Pipfile from being committed, interestingly enough). </p><p>If you're working locally, <code>gcloud app deploy</code> is all you need to push to production (doesn't require a git commit, interestingly enough. <code>gcloud app browse</code> will open you newly deployed app, and <code>gcloud app logs tail -s default</code> will display your logs when something goes horribly wrong.</p><p>And there you have it: the practical and completely cynical guide to embracing modern architecture. Join us next time when we pay 50 dollars to deploy a single-click app simply because we're too lazy or unmotivated to set anything up ourselves.</p>","url":"https://hackersandslackers.com/deploy-app-containters-with-gcp-app-engine/","uuid":"70f7a025-6774-4555-9eff-e63eb40c4fdf","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5bd10e9e4ba34679679904f2"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673725","title":"Lynx Roundup, October 25th","slug":"lynx-roundup-october-25th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/122-3@2x.jpg","excerpt":"Composition!  Visualization of recent philosophy!  CS & Ethics!","custom_excerpt":"Composition!  Visualization of recent philosophy!  CS & Ethics!","created_at_pretty":"16 October, 2018","published_at_pretty":"25 October, 2018","updated_at_pretty":"14 November, 2018","created_at":"2018-10-16T01:45:45.000-04:00","published_at":"2018-10-25T07:00:00.000-04:00","updated_at":"2018-11-13T22:40:32.000-05:00","meta_title":"Lynx Roundup, October 25th | Hackers and Slackers","meta_description":"Composition!  Visualization of recent philosophy!  CS & Ethics!","og_description":"Composition!  Visualization of recent philosophy!  CS & Ethics!","og_image":"https://hackersandslackers.com/content/images/lynx/122-3@2x.jpg","og_title":"Lynx Roundup, October 25th","twitter_description":"Composition!  Visualization of recent philosophy!  CS & Ethics!","twitter_image":"https://hackersandslackers.com/content/images/lynx/122-3@2x.jpg","twitter_title":"Lynx Roundup, October 25th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://julesh.com/2017/04/22/on-compositionality/\n\nView this post on Instagram\n[https://www.instagram.com/p/BiENw_QHsyT/?utm_source=ig_embed&utm_medium=loading] \n   Eurasian lynx (lynx lynx) in a pine forest. Finland #wild #wildanimal\n#WildGeography #GlobalDaily #bella_shots #elegantanimals #animalelite\n#exklusive_nature #shotaward #wonderfulworld #amazing_picturez #animalsmood\n#exelent_nature #exclusive_animals #planet_of_animals #perfection_nature\n#pro_nature #greatshots #greatphotos #masters #master_shots #magic_shots\n#nature_of_our_world #igscwildlife #IgAnimal_Snaps #igcutest_animals\n#igscselect\n#macro_vision #marvelouz_animals\n[https://www.instagram.com/p/BiENw_QHsyT/?utm_source=ig_embed&utm_medium=loading]\n\nA post shared by Niko Pekonen\n[https://www.instagram.com/npekonen/?utm_source=ig_embed&utm_medium=loading] \n(@npekonen) on Apr 27, 2018 at 12:40am PDT\n\nhttp://blogs.discovermagazine.com/neuroskeptic/2018/09/29/rick-and-morty-sting\n\nhttps://github.com/dddomodossola/remi/blob/master/README.md\n\nhttps://cornellsun.com/2018/09/30/moradi-cs-needs-an-ethics-requirement/\n\nhttps://www.prisma.io/\n\nhttps://www.reddit.com/r/dataisbeautiful/comments/9kg9ym/oc_recent_philosophy_visualized/","html":"<p></p><p><a href=\"https://julesh.com/2017/04/22/on-compositionality/\">https://julesh.com/2017/04/22/on-compositionality/</a></p><figure class=\"kg-card kg-embed-card\"><blockquote class=\"instagram-media\" data-instgrm-captioned=\"\" data-instgrm-permalink=\"https://www.instagram.com/p/BiENw_QHsyT/?utm_source=ig_embed&amp;utm_medium=loading\" data-instgrm-version=\"12\" style=\" background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:658px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);\"><div style=\"padding:16px;\"> <a href=\"https://www.instagram.com/p/BiENw_QHsyT/?utm_source=ig_embed&amp;utm_medium=loading\" style=\" background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;\" target=\"_blank\"> <div style=\" display: flex; flex-direction: row; align-items: center;\"> <div style=\"background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;\"></div> <div style=\"display: flex; flex-direction: column; flex-grow: 1; justify-content: center;\"> <div style=\" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;\"></div> <div style=\" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;\"></div></div></div><div style=\"padding: 19% 0;\"></div><div style=\"display:block; height:50px; margin:0 auto 12px; width:50px;\"><svg width=\"50px\" height=\"50px\" viewbox=\"0 0 60 60\" version=\"1.1\" xmlns=\"https://www.w3.org/2000/svg\" xmlns:xlink=\"https://www.w3.org/1999/xlink\"><g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\"><g transform=\"translate(-511.000000, -20.000000)\" fill=\"#000000\"><g><path d=\"M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631\"/></g></g></g></svg></div><div style=\"padding-top: 8px;\"> <div style=\" color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;\"> View this post on Instagram</div></div><div style=\"padding: 12.5% 0;\"></div> <div style=\"display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;\"><div> <div style=\"background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);\"></div> <div style=\"background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;\"></div> <div style=\"background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);\"></div></div><div style=\"margin-left: 8px;\"> <div style=\" background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;\"></div> <div style=\" width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)\"></div></div><div style=\"margin-left: auto;\"> <div style=\" width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);\"></div> <div style=\" background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);\"></div> <div style=\" width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);\"></div></div></div></a> <p style=\" margin:8px 0 0 0; padding:0 4px;\"> <a href=\"https://www.instagram.com/p/BiENw_QHsyT/?utm_source=ig_embed&amp;utm_medium=loading\" style=\" color:#000; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none; word-wrap:break-word;\" target=\"_blank\">Eurasian lynx (lynx lynx) in a pine forest. Finland #wild #wildanimal #WildGeography #GlobalDaily #bella_shots #elegantanimals #animalelite #exklusive_nature #shotaward #wonderfulworld #amazing_picturez #animalsmood #exelent_nature #exclusive_animals #planet_of_animals #perfection_nature #pro_nature #greatshots #greatphotos #masters #master_shots #magic_shots #nature_of_our_world #igscwildlife #IgAnimal_Snaps #igcutest_animals #igscselect #macro_vision #marvelouz_animals</a></p> <p style=\" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;\">A post shared by <a href=\"https://www.instagram.com/npekonen/?utm_source=ig_embed&amp;utm_medium=loading\" style=\" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px;\" target=\"_blank\"> Niko Pekonen</a> (@npekonen) on <time style=\" font-family:Arial,sans-serif; font-size:14px; line-height:17px;\" datetime=\"2018-04-27T07:40:54+00:00\">Apr 27, 2018 at 12:40am PDT</time></p></div></blockquote>\n<script async src=\"//www.instagram.com/embed.js\"></script></figure><p><a href=\"http://blogs.discovermagazine.com/neuroskeptic/2018/09/29/rick-and-morty-sting\">http://blogs.discovermagazine.com/neuroskeptic/2018/09/29/rick-and-morty-sting</a></p><p><a href=\"https://github.com/dddomodossola/remi/blob/master/README.md\">https://github.com/dddomodossola/remi/blob/master/README.md</a></p><p><a href=\"https://cornellsun.com/2018/09/30/moradi-cs-needs-an-ethics-requirement/\">https://cornellsun.com/2018/09/30/moradi-cs-needs-an-ethics-requirement/</a></p><p><a href=\"https://www.prisma.io/\">https://www.prisma.io/</a></p><p><a href=\"https://www.reddit.com/r/dataisbeautiful/comments/9kg9ym/oc_recent_philosophy_visualized/\">https://www.reddit.com/r/dataisbeautiful/comments/9kg9ym/oc_recent_philosophy_visualized/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-october-25th/","uuid":"5d9847b0-3b15-4031-ad27-5b82ad55a930","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5bc57b09c0b1ac3b7ed7ac4a"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673724","title":"Lynx Roundup, October 24th","slug":"lynx-roundup-october-24th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/118@2x.jpg","excerpt":"Resilient architecture!  Scaling ETL!  Serverless microservices!","custom_excerpt":"Resilient architecture!  Scaling ETL!  Serverless microservices!","created_at_pretty":"16 October, 2018","published_at_pretty":"24 October, 2018","updated_at_pretty":"24 October, 2018","created_at":"2018-10-16T01:44:06.000-04:00","published_at":"2018-10-24T07:00:00.000-04:00","updated_at":"2018-10-24T07:00:00.000-04:00","meta_title":"Resilient architecture!  Scaling ETL!  Serverless microservices! | Hackers And Slackers","meta_description":"Resilient architecture!  Scaling ETL!  Serverless microservices!","og_description":"Resilient architecture!  Scaling ETL!  Serverless microservices!","og_image":"https://hackersandslackers.com/content/images/lynx/118@2x.jpg","og_title":"Lynx Roundup, October 24th","twitter_description":"Resilient architecture!  Scaling ETL!  Serverless microservices!","twitter_image":"https://hackersandslackers.com/content/images/lynx/118@2x.jpg","twitter_title":"Lynx Roundup, October 24th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://medium.com/@adhorn/patterns-for-resilient-architecture-part-3-16e8601c488e\n\nhttps://bytes.grubhub.com/scaling-etl-how-data-pipelines-evolve-as-your-business-grows-72ff6c744e6e\n\nhttps://www.jeremydaly.com/an-introduction-to-serverless-microservices/\n\nhttps://pando.com/2014/01/23/the-techtopus-how-silicon-valleys-most-celebrated-ceos-conspired-to-drive-down-100000-tech-engineers-wages/\n\nhttps://news.ycombinator.com/item?id=18014529\n\nhttps://github.com/dennybritz/reinforcement-learning\n\nhttp://xahlee.info/math/functional_geometry_2013_sussman.html","html":"<p></p><p><a href=\"https://medium.com/@adhorn/patterns-for-resilient-architecture-part-3-16e8601c488e\">https://medium.com/@adhorn/patterns-for-resilient-architecture-part-3-16e8601c488e</a></p><p><a href=\"https://bytes.grubhub.com/scaling-etl-how-data-pipelines-evolve-as-your-business-grows-72ff6c744e6e\">https://bytes.grubhub.com/scaling-etl-how-data-pipelines-evolve-as-your-business-grows-72ff6c744e6e</a></p><p><a href=\"https://www.jeremydaly.com/an-introduction-to-serverless-microservices/\">https://www.jeremydaly.com/an-introduction-to-serverless-microservices/</a></p><p><a href=\"https://pando.com/2014/01/23/the-techtopus-how-silicon-valleys-most-celebrated-ceos-conspired-to-drive-down-100000-tech-engineers-wages/\">https://pando.com/2014/01/23/the-techtopus-how-silicon-valleys-most-celebrated-ceos-conspired-to-drive-down-100000-tech-engineers-wages/</a></p><p><a href=\"https://news.ycombinator.com/item?id=18014529\">https://news.ycombinator.com/item?id=18014529</a></p><p><a href=\"https://github.com/dennybritz/reinforcement-learning\">https://github.com/dennybritz/reinforcement-learning</a></p><p><a href=\"http://xahlee.info/math/functional_geometry_2013_sussman.html\">http://xahlee.info/math/functional_geometry_2013_sussman.html</a></p>","url":"https://hackersandslackers.com/lynx-roundup-october-24th/","uuid":"296a33ab-cc5a-48d2-90a5-4b8845a18a06","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5bc57aa6c0b1ac3b7ed7ac45"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867372e","title":"MySQL, Google Cloud, and a REST API that Generates Itself","slug":"mysql-google-cloud-and-a-rest-api-that-autogenerates","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/10/mysqlagain2@2x.jpg","excerpt":"Deploy a MySQL database that auto-creates endpoints for itself.","custom_excerpt":"Deploy a MySQL database that auto-creates endpoints for itself.","created_at_pretty":"23 October, 2018","published_at_pretty":"23 October, 2018","updated_at_pretty":"02 February, 2019","created_at":"2018-10-23T14:57:12.000-04:00","published_at":"2018-10-23T18:47:28.000-04:00","updated_at":"2019-02-02T05:26:16.000-05:00","meta_title":"MySQL, Google Cloud, and a REST API | Hackers and Slackers","meta_description":"Create a MySQL database that makes its own endpoints for accessing and manipulating data.","og_description":"Create a MySQL database that makes its own endpoints for accessing and manipulating data.","og_image":"https://hackersandslackers.com/content/images/2018/10/mysqlagain2@2x.jpg","og_title":"MySQL, Google Cloud, and a REST API that Generates Itself","twitter_description":"Create a MySQL database that makes its own endpoints for accessing and manipulating data.","twitter_image":"https://hackersandslackers.com/content/images/2018/10/mysqlagain2@2x.jpg","twitter_title":"MySQL, Google Cloud, and a REST API that Generates Itself","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"MySQL","slug":"mysql","description":"Database configuration, building queries, and cloud hosting options for MySQL.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/mysqlrevamp_o.jpg","meta_description":"Database configuration, building queries, and cloud hosting options for MySQL.","meta_title":"Working with MySQL | Hackers and Slackers","visibility":"public"},"tags":[{"name":"MySQL","slug":"mysql","description":"Database configuration, building queries, and cloud hosting options for MySQL.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/mysqlrevamp_o.jpg","meta_description":"Database configuration, building queries, and cloud hosting options for MySQL.","meta_title":"Working with MySQL | Hackers and Slackers","visibility":"public"},{"name":"Google Cloud","slug":"googlecloud","description":"Evaluating Google Cloud Platform’s offerings. Get introduced with tutorials, see our vendor comparisons, and endure biased opinions on GCP as a whole.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/googleseries2.jpg","meta_description":"Evaluating Google Cloud Platform’s offerings. Get introduced with tutorials, see our vendor comparisons, and endure biased opinions on GCP as a whole.","meta_title":"The Rise of Google Cloud | Hackers and Slackers","visibility":"public"},{"name":"DevOps","slug":"devops","description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","feature_image":null,"meta_description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","meta_title":"DevOps: Networking And Server Configuration | Hackers and Slackers","visibility":"public"},{"name":"Architecture","slug":"architecture","description":"Advancements in software architecture, serverless and beyond. Examples include equivalents to Lambda functions, Docker containers, Google Cloud functions,  Kubernetes, Heroku, etc.","feature_image":null,"meta_description":"Advancements in software architecture, serverless and beyond. Examples include equivalents to cloud functions, Docker containers, Kubernetes, Heroku, etc.","meta_title":"Software Architecture | Hackers and Slackers","visibility":"public"},{"name":"Data Engineering","slug":"dataengineering","description":"The systematic collection and transformation of data via the creation of tools and pipelines.","feature_image":null,"meta_description":null,"meta_title":"Data Engineering | Hackers and Slackers","visibility":"public"},{"name":"#Working with MySQL","slug":"working-with-mysql","description":"Learn about MySQL database configuration, the query language, and cloud hosted instances.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/mysql1_o-1.jpg","meta_description":"Learn about MySQL database configuration, the query language, and cloud hosted instances.","meta_title":"Working with MySQL","visibility":"internal"},{"name":"SaaS Products","slug":"saas","description":"Third-party products and services we’ve discovered to be diamonds in the rough. These are products we’ve included in our stack based on price and value add.","feature_image":null,"meta_description":"Third-party products and services we’ve discovered to be diamonds in the rough. These are products we’ve included in our stack based on price and value add.","meta_title":"Our Picks: SaaS Products | Hackers and Slackers","visibility":"public"}],"plaintext":"It wasn’t too long ago that I haphazardly forced us down a journey of exploring\nGoogle Cloud’s cloud SQL service. The focus of this exploration was Google’s\naccompanying REST API for all of its cloud SQL instances. That API turned out to\nbe a relatively disappointing administrative API which did little to extend the\nfeatures you’d expect from the CLI or console.\n\nYou see, I’ve had a dream stuck in my head for a while now. Like most of my\nutopian dreams, this dream is related to data, or more specifically simplifying\nthe manner in which we interact with it. For industry synonymous with AI and\nautomation, many of our very own tools (including ETL tools) involve way too\nmuch manual effort in my opinion. That’s right: I’m talking about the aspiration\nto Slack while we Hack.\n\nThe pitch is this: why do we keep setting up databases, endpoints, and the logic\nto connect them when, 90% of the time, we’re building the same thing over and\nover? Let me guess: there’s a GET endpoint to get records from table X, or a\nPOST endpoint to create users. I know you’ve built this because we all have, but\nwhy do we keep building the same things over and over in isolation? It looks\nlike we might not have to anymore, but first let’s create our database.\n\nCreating a MySQL Instance in GCP \nFull disclosure here: the magical REST API thing is actually independent from\nGoogle Cloud; the service we’ll be using can integrate with any flavor of MySQL\nyou prefer, so go ahead and grab that RDS instance you live so much if you\nreally have to.\n\nFor the rest of us, hit up your GCP console and head into making a new SQL\ninstance. MySQL and Postgres are our only choices here; stick with MySQL.\n\nThere isn’t much to spinning up your instance. Just be sure to create a user and\ndatabase to work from.\n\nOh yeah, and remember to name your instance.Your SQL Firewall and Permissions\nYour instance is set to “public” by default. Oddly, “public” in this case means\n“accessible to everybody on your IP whitelist, which is empty by default,” so\nreally kind of the opposite of public really.\n\nIn fact, if you hypothetically did want to open your instance publicly, Google\nCloud will not allow it. This is good on them, and is actually fairly impressive\nthe depths they go to avoid the IP 0.0.0.0  from ever appearing anywhere in the\ninstance. Go ahead, open the shell and try to add bind address=0.0.0.0 \nyourself, wise guy (another fun fact you’ll learn in the shell: apparently GCP’s\nversion of MySQL is actually a MariaDB instance)?\n\nThe point is, whitelist your IP address. Simply \"Edit\" your instance and add\nyour address to the authorized networks.\n\nAuthorize that bad boy.The Magic API \nNow, we’ve never actually endorsed any SaaS products on Hackers and Slackers, so\nthis next part is going to feel a bit a bit weird. I’m not sure why, as the\nservice is apparently free, thus I’m clearly not getting paid for any of this.\n\nAnyway, the service is called Apisentris [https://apisentris.com/], and the idea\nis that it will build whatever time-consuming monstrosity of a REST API you were\nplanning to build to access your data for you. Via their own words:\n\nSee, I told you.What does this actually mean? It means if you create a table\ncalled articles  in your database, you will immediately have an endpoint to\nfetch said articles, and it would look like \nhttps://apisentris.com/api/v1/articles. Your client ID and credentials would\nobviously need to be provided to indicate that you're, well, you.\n\nGrabbing entire tables at once would be silly, which is why they also\nautogenerate filters based on the contents of your table:\n\nEndpoints accept query parameters to essentially create a query.Oh yeah, and you\ncan also handle user management via this API as well, if you're building an\nactual app:\n\nPretty easy to hook up into a form or whatever.I'll assume you're sold on the\nidea by now. If a free service that handles the hard parts of backend logic for\nfree isn't your cup of tea, clearly you aren't Slacker material.\n\nSetting it all up\nAs we did before with our own IP, we'll need to whitelist Apisentris' IP the\nsame way in GCP console. Their IP is 104.199.181.125.\n\nCreate a table in your database with some data just to test things out. When\nyou're logged in, you'll be able to see all the endpoints available to you and\nthe associated attributes they have:\n\nNot bad.Any way you slice it, the concept of a self-generating API is very cool\nand yet somehow still not the norm. I'm actually shocked that there are so few\npeople in the Data industry who know \"there must be a better way,\" but then\nagain, data science and software engineering are two very different things. For\nmy fellow Data Engineers out there, take this as a gift and a curse: you have\nthe gift of knowing better from your software background, but are cursed with\nwatching the world not quite realize how pointless half the things they do truly\nare.\n\nOh well. We'll be the ones building the robots anyway.","html":"<p>It wasn’t too long ago that I haphazardly forced us down a journey of exploring Google Cloud’s cloud SQL service. The focus of this exploration was Google’s accompanying REST API for all of its cloud SQL instances. That API turned out to be a relatively disappointing administrative API which did little to extend the features you’d expect from the CLI or console.</p><p>You see, I’ve had a dream stuck in my head for a while now. Like most of my utopian dreams, this dream is related to data, or more specifically simplifying the manner in which we interact with it. For industry synonymous with AI and automation, many of our very own tools (including ETL tools) involve way too much manual effort in my opinion. That’s right: I’m talking about the aspiration to Slack while we Hack.</p><p>The pitch is this: why do we keep setting up databases, endpoints, and the logic to connect them when, 90% of the time, we’re building the same thing over and over? Let me guess: there’s a GET endpoint to get records from table X, or a POST endpoint to create users. I know you’ve built this because we all have, but why do we keep building the same things over and over in isolation? It looks like we might not have to anymore, but first let’s create our database.</p><h2 id=\"creating-a-mysql-instance-in-gcp\">Creating a MySQL Instance in GCP </h2><p>Full disclosure here: the magical REST API thing is actually independent from Google Cloud; the service we’ll be using can integrate with any flavor of MySQL you prefer, so go ahead and grab that RDS instance you live so much if you really have to.</p><p>For the rest of us, hit up your GCP console and head into making a new SQL instance. MySQL and Postgres are our only choices here; stick with MySQL.</p><p>There isn’t much to spinning up your instance. Just be sure to create a user and database to work from.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-5.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/Screen-Shot-2018-10-23-at-5.15.18-PM.png\" class=\"kg-image\"><figcaption>Oh yeah, and remember to name your instance.</figcaption></figure><h3 id=\"your-sql-firewall-and-permissions\">Your SQL Firewall and Permissions</h3><p>Your instance is set to “public” by default. Oddly, “public” in this case means “accessible to everybody on your IP whitelist, which is empty by default,” so really kind of the opposite of public really.</p><p>In fact, if you hypothetically did want to open your instance publicly, Google Cloud will not allow it. This is good on them, and is actually fairly impressive the depths they go to avoid the IP <strong>0.0.0.0</strong> from ever appearing anywhere in the instance. Go ahead, open the shell and try to add <code>bind address=0.0.0.0</code> yourself, wise guy (another fun fact you’ll learn in the shell: apparently GCP’s version of MySQL is actually a MariaDB instance)?</p><p>The point is, whitelist your IP address. Simply \"Edit\" your instance and add your address to the authorized networks.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-4.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/Screen-Shot-2018-10-23-at-5.12.23-PM.png\" class=\"kg-image\"><figcaption>Authorize that bad boy.</figcaption></figure><h2 id=\"the-magic-api\">The Magic API </h2><p>Now, we’ve never actually endorsed any SaaS products on Hackers and Slackers, so this next part is going to feel a bit a bit weird. I’m not sure why, as the service is apparently free, thus I’m clearly not getting paid for any of this.</p><p>Anyway, the service is called <strong><a href=\"https://apisentris.com/\">Apisentris</a>, </strong>and the idea is that it will build whatever time-consuming monstrosity of a REST API you were planning to build to access your data for you. Via their own words:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/Screen-Shot-2018-10-23-at-5.19.16-PM.png\" class=\"kg-image\"><figcaption>See, I told you.</figcaption></figure><p>What does this actually mean? It means if you create a table called <em>articles</em> in your database, you will immediately have an endpoint to fetch said articles, and it would look like <strong>https://apisentris.com/api/v1/articles. </strong>Your client ID and credentials would obviously need to be provided to indicate that you're, well, you.</p><p>Grabbing entire tables at once would be silly, which is why they also autogenerate filters based on the contents of your table:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-5.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/Screen-Shot-2018-10-23-at-5.25.13-PM.png\" class=\"kg-image\"><figcaption>Endpoints accept query parameters to essentially create a query.</figcaption></figure><p>Oh yeah, and you can also handle user management via this API as well, if you're building an actual app:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/Screen-Shot-2018-10-23-at-5.27.43-PM.png\" class=\"kg-image\"><figcaption>Pretty easy to hook up into a form or whatever.</figcaption></figure><p>I'll assume you're sold on the idea by now. If a free service that handles the hard parts of backend logic for free isn't your cup of tea, clearly you aren't Slacker material.</p><h2 id=\"setting-it-all-up\">Setting it all up</h2><p>As we did before with our own IP, we'll need to whitelist Apisentris' IP the same way in GCP console. Their IP is <code>104.199.181.125</code>.</p><p>Create a table in your database with some data just to test things out. When you're logged in, you'll be able to see all the endpoints available to you and the associated attributes they have:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/schema.gif\" class=\"kg-image\"><figcaption>Not bad.</figcaption></figure><p>Any way you slice it, the concept of a self-generating API is very cool and yet somehow still not the norm. I'm actually shocked that there are so few people in the Data industry who know \"there must be a better way,\" but then again, data science and software engineering are two very different things. For my fellow Data Engineers out there, take this as a gift and a curse: you have the gift of knowing better from your software background, but are cursed with watching the world not quite realize how pointless half the things they do truly are.</p><p>Oh well. We'll be the ones building the robots anyway.</p>","url":"https://hackersandslackers.com/mysql-google-cloud-and-a-rest-api-that-autogenerates/","uuid":"c45478bb-54da-4563-89bd-ddd356a234d4","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5bcf6f08d7ab443ba8b7a5ab"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673723","title":"Lynx Roundup, October 23rd","slug":"lynx-roundup-october-23rd","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/120@2x.jpg","excerpt":"SQL Formatter!  Automation!  Philosophy & coding!","custom_excerpt":"SQL Formatter!  Automation!  Philosophy & coding!","created_at_pretty":"16 October, 2018","published_at_pretty":"23 October, 2018","updated_at_pretty":"23 October, 2018","created_at":"2018-10-16T01:42:17.000-04:00","published_at":"2018-10-23T07:00:00.000-04:00","updated_at":"2018-10-23T07:00:00.000-04:00","meta_title":"SQL Formatter!  Automation!  Philosophy & coding! | Hackers And Slackers","meta_description":"SQL Formatter!  Automation!  Philosophy & coding!","og_description":"SQL Formatter!  Automation!  Philosophy & coding!","og_image":"https://hackersandslackers.com/content/images/lynx/120@2x.jpg","og_title":"Lynx Roundup, October 23rd","twitter_description":"SQL Formatter!  Automation!  Philosophy & coding!","twitter_image":"https://hackersandslackers.com/content/images/lynx/120@2x.jpg","twitter_title":"Lynx Roundup, October 23rd","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://insights.dice.com/2018/09/26/tech-employees-forced-arbitration-end-good/\n\nhttps://www.cockroachlabs.com/blog/sql-fmt-online-sql-formatter/\n\nhttps://kotaku.com/telltale-employees-left-stunned-by-company-closure-no-1829272139\n\nhttps://www.gameworkersunite.org/blog/statement-on-the-telltale-layoffs\n\nhttps://logicmag.io/05-how-to-kill-your-tech-industry/\n\nhttps://www.apnews.com/78c17567c24b48c3b67be095ae0db99c/Report:-Machines-to-handle-over-half-workplace-tasks-by-2025\n\nhttp://250bpm.com/blog:133","html":"<p></p><p><a href=\"https://insights.dice.com/2018/09/26/tech-employees-forced-arbitration-end-good/\">https://insights.dice.com/2018/09/26/tech-employees-forced-arbitration-end-good/</a></p><p><a href=\"https://www.cockroachlabs.com/blog/sql-fmt-online-sql-formatter/\">https://www.cockroachlabs.com/blog/sql-fmt-online-sql-formatter/</a></p><p><a href=\"https://kotaku.com/telltale-employees-left-stunned-by-company-closure-no-1829272139\">https://kotaku.com/telltale-employees-left-stunned-by-company-closure-no-1829272139</a></p><p><a href=\"https://www.gameworkersunite.org/blog/statement-on-the-telltale-layoffs\">https://www.gameworkersunite.org/blog/statement-on-the-telltale-layoffs</a></p><p><a href=\"https://logicmag.io/05-how-to-kill-your-tech-industry/\">https://logicmag.io/05-how-to-kill-your-tech-industry/</a></p><p><a href=\"https://www.apnews.com/78c17567c24b48c3b67be095ae0db99c/Report:-Machines-to-handle-over-half-workplace-tasks-by-2025\">https://www.apnews.com/78c17567c24b48c3b67be095ae0db99c/Report:-Machines-to-handle-over-half-workplace-tasks-by-2025</a></p><p><a href=\"http://250bpm.com/blog:133\">http://250bpm.com/blog:133</a></p>","url":"https://hackersandslackers.com/lynx-roundup-october-23rd/","uuid":"8d8f7fd4-357b-4113-8e52-3b096807de5b","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5bc57a39c0b1ac3b7ed7ac40"}}]}},"pageContext":{"pageNumber":12,"humanPageNumber":13,"skip":144,"limit":12,"numberOfPages":33,"previousPagePath":"/page/12","nextPagePath":"/page/14"}}