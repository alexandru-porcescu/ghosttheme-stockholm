{"data":{"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673697","title":"Lynx Roundup, July 11th","slug":"lynx-roundup-july-11th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx7@2x.jpg","excerpt":"Daily roundup of Data Science news around the industry, 7/11/2018.","custom_excerpt":"Daily roundup of Data Science news around the industry, 7/11/2018.","created_at_pretty":"02 July, 2018","published_at_pretty":"11 July, 2018","updated_at_pretty":"25 July, 2018","created_at":"2018-07-02T02:09:25.000-04:00","published_at":"2018-07-11T07:00:00.000-04:00","updated_at":"2018-07-24T22:06:04.000-04:00","meta_title":"Lynx Roundup, July 11th | Hackers and Slackers","meta_description":"Daily roundup of Data Science news around the industry, 7/11/2018.","og_description":"Daily roundup of Data Science news around the industry, 7/11/2018.","og_image":"https://hackersandslackers.com/content/images/lynx/lynx7@2x.jpg","og_title":"Lynx Roundup, July 11th","twitter_description":"Daily roundup of Data Science news around the industry, 7/11/2018.","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx7@2x.jpg","twitter_title":"Lynx Roundup, July 11th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},{"name":"Machine Learning","slug":"machine-learning","description":"The latest developments in machine learning tools and technology available to data scientists.","feature_image":null,"meta_description":"The latest developments in machine learning tools and technology available to data scientists.","meta_title":"Machine Learning | Hackers and Slackers","visibility":"public"},{"name":"Data Science","slug":"datascience","description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","feature_image":null,"meta_description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","meta_title":"Data Science | Hackers and Slackers","visibility":"public"}],"plaintext":"https://crate.io/a/lab-notes-how-we-made-joins-23-thousand-times-faster-part-one/\n\n\n\nhttps://www.algorithm-archive.org/\n\n\n\nhttps://lemire.me/blog/2018/06/26/data-processing-on-modern-hardware/\n\n\n\nhttps://news.ycombinator.com/item?id=17372497\n\n\n\nhttps://medium.com/walmartlabs/how-we-built-a-data-pipeline-with-lambda-architecture-using-spark-spark-streaming-9d3b4b4555d3","html":"<p></p><p><a href=\"https://crate.io/a/lab-notes-how-we-made-joins-23-thousand-times-faster-part-one/\">https://crate.io/a/lab-notes-how-we-made-joins-23-thousand-times-faster-part-one/</a></p><p></p><p><a href=\"https://www.algorithm-archive.org/\">https://www.algorithm-archive.org/</a></p><p></p><p><a href=\"https://lemire.me/blog/2018/06/26/data-processing-on-modern-hardware/\">https://lemire.me/blog/2018/06/26/data-processing-on-modern-hardware/</a></p><p></p><p><a href=\"https://news.ycombinator.com/item?id=17372497\">https://news.ycombinator.com/item?id=17372497</a></p><p></p><p><a href=\"https://medium.com/walmartlabs/how-we-built-a-data-pipeline-with-lambda-architecture-using-spark-spark-streaming-9d3b4b4555d3\">https://medium.com/walmartlabs/how-we-built-a-data-pipeline-with-lambda-architecture-using-spark-spark-streaming-9d3b4b4555d3</a></p>","url":"https://hackersandslackers.com/lynx-roundup-july-11th/","uuid":"6169f835-54d7-4ec1-812e-d990e7f87d9a","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b39c195d0ac8a143588f34a"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673696","title":"Lynx Roundup, July 10th","slug":"lynx-roundup-july-10th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/02/lynx69-3.jpg","excerpt":"Daily roundup of Data Science news around the industry, 7/10/2018.","custom_excerpt":"Daily roundup of Data Science news around the industry, 7/10/2018.","created_at_pretty":"02 July, 2018","published_at_pretty":"10 July, 2018","updated_at_pretty":"28 February, 2019","created_at":"2018-07-02T02:04:39.000-04:00","published_at":"2018-07-10T07:00:00.000-04:00","updated_at":"2019-02-28T02:16:24.000-05:00","meta_title":"Lynx Roundup, July 10th | Hackers and Slackers","meta_description":"Daily roundup of Data Science news around the industry, 7/10/2018.","og_description":"Daily roundup of Data Science news around the industry, 7/10/2018.","og_image":"https://hackersandslackers.com/content/images/2019/02/lynx69-3.jpg","og_title":"Lynx Roundup, July 10th","twitter_description":"Daily roundup of Data Science news around the industry, 7/10/2018.","twitter_image":"https://hackersandslackers.com/content/images/2019/02/lynx69-3.jpg","twitter_title":"Lynx Roundup, July 10th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},{"name":"Data Science","slug":"datascience","description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","feature_image":null,"meta_description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","meta_title":"Data Science | Hackers and Slackers","visibility":"public"},{"name":"Machine Learning","slug":"machine-learning","description":"The latest developments in machine learning tools and technology available to data scientists.","feature_image":null,"meta_description":"The latest developments in machine learning tools and technology available to data scientists.","meta_title":"Machine Learning | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"}],"plaintext":"https://engineering.taboola.com/hitchhikers-guide-hyperparameter-tuning/\n\n\n\nHey, I interviewed with comet.ml!  And they didn't hire me!  Cool company\nthough.\nhttps://medium.com/comet-ml/using-fasttext-and-comet-ml-to-classify-relationships-in-knowledge-graphs-e73d27b40d67\n\n\n\nhttps://medium.com/carwow-product-engineering/sql-vs-pandas-how-to-balance-tasks-between-server-and-client-side-9e2f6c95677\n\n\n\nhttps://medium.com/@marcelogdeandrade/writing-your-own-programming-language-and-compiler-with-python-a468970ae6df\n\n\n\nhttps://medium.com/@trekhleb/permutations-combinations-algorithms-cheat-sheet-68c14879aba5","html":"<p></p><p><a href=\"https://engineering.taboola.com/hitchhikers-guide-hyperparameter-tuning/\">https://engineering.taboola.com/hitchhikers-guide-hyperparameter-tuning/</a></p><p></p><p>Hey, I interviewed with comet.ml!  And they didn't hire me!  Cool company though.  <a href=\"https://medium.com/comet-ml/using-fasttext-and-comet-ml-to-classify-relationships-in-knowledge-graphs-e73d27b40d67\">https://medium.com/comet-ml/using-fasttext-and-comet-ml-to-classify-relationships-in-knowledge-graphs-e73d27b40d67</a></p><p></p><p><a href=\"https://medium.com/carwow-product-engineering/sql-vs-pandas-how-to-balance-tasks-between-server-and-client-side-9e2f6c95677\">https://medium.com/carwow-product-engineering/sql-vs-pandas-how-to-balance-tasks-between-server-and-client-side-9e2f6c95677</a></p><p></p><p><a href=\"https://medium.com/@marcelogdeandrade/writing-your-own-programming-language-and-compiler-with-python-a468970ae6df\">https://medium.com/@marcelogdeandrade/writing-your-own-programming-language-and-compiler-with-python-a468970ae6df</a></p><p></p><p><a href=\"https://medium.com/@trekhleb/permutations-combinations-algorithms-cheat-sheet-68c14879aba5\">https://medium.com/@trekhleb/permutations-combinations-algorithms-cheat-sheet-68c14879aba5</a></p>","url":"https://hackersandslackers.com/lynx-roundup-july-10th/","uuid":"9f8efbe3-ab40-4cfc-b698-f78833276cd3","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b39c077d0ac8a143588f344"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867369e","title":"Getting Conda Envs (And Environment Variables!) To Play Nicely With Cron","slug":"conda-environments-and-cron","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/07/anaconda@2x.jpg","excerpt":"Set up CRON jobs to interact with Conda environments.","custom_excerpt":"Set up CRON jobs to interact with Conda environments.","created_at_pretty":"05 July, 2018","published_at_pretty":"09 July, 2018","updated_at_pretty":"14 April, 2019","created_at":"2018-07-05T19:27:38.000-04:00","published_at":"2018-07-09T07:00:00.000-04:00","updated_at":"2019-04-14T14:43:06.000-04:00","meta_title":"Getting Conda To Play Nicely With Cron | Hackers and Slackers","meta_description":"Setting up multiple Conda environments with separate databases to simulate a development-to-production workflow.","og_description":"Setting up multiple Conda environments with separate databases to simulate a development-to-production workflow.","og_image":"https://hackersandslackers.com/content/images/2018/07/anaconda@2x.jpg","og_title":"Getting Conda Envs (And Environment Variables!) To Play Nicely With Cron","twitter_description":"Setting up multiple Conda environments with separate databases to simulate a development-to-production workflow.","twitter_image":"https://hackersandslackers.com/content/images/2018/07/anaconda@2x.jpg","twitter_title":"Getting Conda Envs (And Environment Variables!) To Play Nicely With Cron","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Data Science","slug":"datascience","description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","feature_image":null,"meta_description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","meta_title":"Data Science | Hackers and Slackers","visibility":"public"},{"name":"Code Snippet Corner","slug":"codesnippetcorner","description":"Real-world examples of Python being used to solve complex data problems, primarily using Jupyter notebooks.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o-1.jpg","meta_description":"Real-world examples of Python being used to solve complex data problems.","meta_title":"Python Code Snippet Corner","visibility":"public"},{"name":"#Code Snippet Corner","slug":"code-snippet-corner","description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o_o.jpg","meta_description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","meta_title":"Python Code Snippet Corner","visibility":"internal"}],"plaintext":"This isn't really a tutorial on cron  in general; Better people at Linux have\nwritten way better ones than I could write.  Here's one: \nhttp://mediatemple.net/blog/news/complete-beginners-guide-cron-part-1/   This is\nmore of a code journaling exercise for a problem that I didn't find a\nneat-and-tidy answer to online when I was looking for it, and that I presume at\nleast one person will encounter at some point between now and the heat death of\nthe universe.\n\nLet's say you've got two different Conda envs:production  and development.\n Let's say that, in addition to having different packages installed, they each\nuse a separate database - development  writes to one that you can wipe and\nreconstruct to your heart's content, while production  gets used for stuff that\nactually affects customers.\n\nNot a problem!  Just a teensy bit of fiddling and you're there.  From the\nofficial docs: \nhttps://conda.io/docs/user-guide/tasks/manage-environments.html#macos-and-linux\n\nSo, for our purposes, let's say we want to set the variables from the \ndevelopment  environment.  First we create two folders to hold a simple .sh \nscript toactivate  and deactivate  the relevant environment variables:\n\n$ cd /home/matt/anaconda3/envs/development\n$ mkdir -p ./etc/conda/activate.d\n$ mkdir -p ./etc/conda/deactivate.d\n$ touch ./etc/conda/activate.d/env_vars.sh\n$ touch ./etc/conda/deactivate.d/env_vars.sh\n\n\nThen let's add the info for the database we want to access.  Edit \n./etc/conda/activate.d/env_vars.sh  to say:\n\n#!/bin/sh\n\nexport db-string='mysql+pymysql://dev:password@localhost/dev-db'\n\n\nNow edit ./etc/conda/deactivate.d/env_vars.sh  to say:\n\n#!/bin/sh\n\nunset db-string\n\n\nPresto!  Now if you source activate development  and run a script it'll all go\ngreat!\n\nCron Craziness\nIf you're running scripts by hand, this is all great.  It wouldn't even have\nwarranted a blog post!  However, a little hiccup occurs if you try to have cron \n(or something that wraps cron  - I was using the cool Ruby gem whenever  because\nthat was what was running stuff on the job server my stuff was running on) run\nthe script.\n\nI naively tried to have cron  activate the env, run it, then deactivate it.\n\nsource activate production; python /home/matta/python_workspace/dbUpdater.py; source deactivate\n\n\nThis did not work.  Research lead me to believe the reason involved rules about\nspawning subshells, a concept I vaguely understand.  What I understood more\nconcretely, however, was that this was not going to work.\n\nRun It With The Packages You Want\nEventually I discovered that I at least had access to the environment's packages\nif, instead of running the script by calling python, I ran it by calling the \npython  in the env itself.  Sooo...\n\n/home/matt/anaconda3/envs/development/bin/python /home/matta/python_workspace/dbUpdater.py\n\n\nSadly, we still have a problem - it's not loading our environment variables!\n This makes sense - Python doesn't know where those variables are, they get\nexported when we call source activate development.\n\nSourcing the Env Variables\nBuuut, since exporting the variables just happens in a .sh  script, we can run\nit directly!\n\nsource /home/matt/anaconda3/envs/development/etc/conda/activate.d/env_vars.sh ; /home/matt/anaconda3/envs/development/bin/python /home/matta/python_workspace/dbUpdater.py\n\n\nRuns in the terminal!  Should run in the cron, right?\n\nWell, in the moral sense it \"should\" - unfortunately, it does not.\n\nIt turns out that source  is actually an alias for a command whose True Name is \n..  For reasons I will not pretend to understand, cron  does not know this, and\nwill not be taught.  It is we who shall have to adjust to the machine's\npreferences.\n\nPutting It All Together\nThe command we want is:\n\n. /home/matt/anaconda3/envs/development/etc/conda/activate.d/env_vars.sh ; /home/matt/anaconda3/envs/development/bin/python /home/matta/python_workspace/dbUpdater.py\n\n\nLet's say we want it to run every day at 3AM UTC:\n\n* 3 * * * . /home/matt/anaconda3/envs/development/etc/conda/activate.d/env_vars.sh ; /home/matt/anaconda3/envs/development/bin/python /home/matta/python_workspace/dbUpdater.py\n\n\nAnd to add it directly to your crontab\n\ncrontab -l | { /bin/cat; /bin/echo \"* 3 * * * . /home/matt/anaconda3/envs/development/etc/conda/activate.d/env_vars.sh ; /home/matt/anaconda3/envs/development/bin/python /home/matta/python_workspace/dbUpdater.py\"; } | crontab -","html":"<p>This isn't really a tutorial on <code>cron</code> in general; Better people at Linux have written way better ones than I could write.  Here's one: <a href=\"http://mediatemple.net/blog/news/complete-beginners-guide-cron-part-1/\">http://mediatemple.net/blog/news/complete-beginners-guide-cron-part-1/</a>  This is more of a code journaling exercise for a problem that I didn't find a neat-and-tidy answer to online when I was looking for it, and that I presume at least one person will encounter at some point between now and the heat death of the universe.</p><p>Let's say you've got two different Conda envs:  <code>production</code> and <code>development</code>.  Let's say that, in addition to having different packages installed, they each use a separate database - <code>development</code> writes to one that you can wipe and reconstruct to your heart's content, while <code>production</code> gets used for stuff that actually affects customers.</p><p>Not a problem!  Just a teensy bit of fiddling and you're there.  From the official docs: <a href=\"https://conda.io/docs/user-guide/tasks/manage-environments.html#macos-and-linux\">https://conda.io/docs/user-guide/tasks/manage-environments.html#macos-and-linux</a></p><p>So, for our purposes, let's say we want to set the variables from the <code>development</code> environment.  First we create two folders to hold a simple <code>.sh</code> script to  <code>activate</code> and <code>deactivate</code> the relevant environment variables:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">$ cd /home/matt/anaconda3/envs/development\n$ mkdir -p ./etc/conda/activate.d\n$ mkdir -p ./etc/conda/deactivate.d\n$ touch ./etc/conda/activate.d/env_vars.sh\n$ touch ./etc/conda/deactivate.d/env_vars.sh\n</code></pre>\n<!--kg-card-end: markdown--><p>Then let's add the info for the database we want to access.  Edit <code>./etc/conda/activate.d/env_vars.sh</code> to say:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">#!/bin/sh\n\nexport db-string='mysql+pymysql://dev:password@localhost/dev-db'\n</code></pre>\n<!--kg-card-end: markdown--><p>Now edit <code>./etc/conda/deactivate.d/env_vars.sh</code> to say:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">#!/bin/sh\n\nunset db-string\n</code></pre>\n<!--kg-card-end: markdown--><p>Presto!  Now if you <code>source activate development</code> and run a script it'll all go great!</p><h2 id=\"cron-craziness\">Cron Craziness</h2><p>If you're running scripts by hand, this is all great.  It wouldn't even have warranted a blog post!  However, a little hiccup occurs if you try to have <code>cron</code> (or something that wraps <code>cron</code> - I was using the cool Ruby gem <code>whenever</code> because that was what was running stuff on the job server my stuff was running on) run the script.</p><p>I naively tried to have <code>cron</code> activate the env, run it, then deactivate it.</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">source activate production; python /home/matta/python_workspace/dbUpdater.py; source deactivate\n</code></pre>\n<!--kg-card-end: markdown--><p>This did not work.  Research lead me to believe the reason involved rules about spawning <code>subshells</code>, a concept I vaguely understand.  What I understood more concretely, however, was that this was not going to work.</p><h2 id=\"run-it-with-the-packages-you-want\">Run It With The Packages You Want</h2><p>Eventually I discovered that I at least had access to the environment's packages if, instead of running the script by calling <code>python</code>, I ran it by calling the <code>python</code> in the env itself.  Sooo...</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">/home/matt/anaconda3/envs/development/bin/python /home/matta/python_workspace/dbUpdater.py\n</code></pre>\n<!--kg-card-end: markdown--><p>Sadly, we still have a problem - it's not loading our environment variables!  This makes sense - Python doesn't know where those variables are, they get exported when we call <code>source activate development</code>.</p><h2 id=\"sourcing-the-env-variables\">Sourcing the Env Variables</h2><p>Buuut, since exporting the variables just happens in a <code>.sh</code> script, we can run it directly!</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">source /home/matt/anaconda3/envs/development/etc/conda/activate.d/env_vars.sh ; /home/matt/anaconda3/envs/development/bin/python /home/matta/python_workspace/dbUpdater.py\n</code></pre>\n<!--kg-card-end: markdown--><p>Runs in the terminal!  Should run in the <code>cron</code>, right?</p><p>Well, in the moral sense it \"should\" - unfortunately, it does not.</p><p>It turns out that <code>source</code> is actually an alias for a command whose True Name is <code>.</code>.  For reasons I will not pretend to understand, <code>cron</code> does not know this, and will not be taught.  It is we who shall have to adjust to the machine's preferences.</p><h2 id=\"putting-it-all-together\">Putting It All Together</h2><p>The command we want is:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">. /home/matt/anaconda3/envs/development/etc/conda/activate.d/env_vars.sh ; /home/matt/anaconda3/envs/development/bin/python /home/matta/python_workspace/dbUpdater.py\n</code></pre>\n<!--kg-card-end: markdown--><p>Let's say we want it to run every day at 3AM UTC:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">* 3 * * * . /home/matt/anaconda3/envs/development/etc/conda/activate.d/env_vars.sh ; /home/matt/anaconda3/envs/development/bin/python /home/matta/python_workspace/dbUpdater.py\n</code></pre>\n<!--kg-card-end: markdown--><p>And to add it directly to your <code>crontab</code></p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">crontab -l | { /bin/cat; /bin/echo &quot;* 3 * * * . /home/matt/anaconda3/envs/development/etc/conda/activate.d/env_vars.sh ; /home/matt/anaconda3/envs/development/bin/python /home/matta/python_workspace/dbUpdater.py&quot;; } | crontab -\n</code></pre>\n<!--kg-card-end: markdown-->","url":"https://hackersandslackers.com/conda-environments-and-cron/","uuid":"348836b6-1358-4baf-8dd1-40db61f57f7c","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b3ea96ad0ac8a143588f37c"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673695","title":"Lynx Roundup, July 9th","slug":"lynx-roundup-july-9th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx74@2x.jpg","excerpt":"Daily roundup of Data Science news around the industry, 7/9/2018.","custom_excerpt":"Daily roundup of Data Science news around the industry, 7/9/2018.","created_at_pretty":"02 July, 2018","published_at_pretty":"09 July, 2018","updated_at_pretty":"25 July, 2018","created_at":"2018-07-02T02:01:38.000-04:00","published_at":"2018-07-09T07:00:00.000-04:00","updated_at":"2018-07-24T22:06:04.000-04:00","meta_title":"Lynx Roundup, July 9th | Hackers and Slackers","meta_description":"Daily roundup of Data Science news around the industry, 7/9/2018.","og_description":"Daily roundup of Data Science news around the industry, 7/9/2018.","og_image":"https://hackersandslackers.com/content/images/lynx/lynx74@2x.jpg","og_title":"Lynx Roundup, July 9th","twitter_description":"Daily roundup of Data Science news around the industry, 7/9/2018.","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx74@2x.jpg","twitter_title":"Lynx Roundup, July 9th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},{"name":"Machine Learning","slug":"machine-learning","description":"The latest developments in machine learning tools and technology available to data scientists.","feature_image":null,"meta_description":"The latest developments in machine learning tools and technology available to data scientists.","meta_title":"Machine Learning | Hackers and Slackers","visibility":"public"}],"plaintext":"https://towardsdatascience.com/convolutional-neural-networks-from-the-ground-up-c67bb41454e1\n\n\n\nhttps://www.authorea.com/users/18589/articles/304710-a-short-guide-to-using-python-with-data-in-experimental-physics\n\n\n\nhttps://read.iopipe.com/the-right-way-to-do-serverless-in-python-e99535574454\n\n\n\nhttps://github.com/salesforce/decaNLP\n\n\n\nhttps://www.linkedin.com/pulse/major-minor-classifying-mode-song-alex-smith/","html":"<p></p><p><a href=\"https://towardsdatascience.com/convolutional-neural-networks-from-the-ground-up-c67bb41454e1\">https://towardsdatascience.com/convolutional-neural-networks-from-the-ground-up-c67bb41454e1</a></p><p></p><p><a href=\"https://www.authorea.com/users/18589/articles/304710-a-short-guide-to-using-python-with-data-in-experimental-physics\">https://www.authorea.com/users/18589/articles/304710-a-short-guide-to-using-python-with-data-in-experimental-physics</a></p><p></p><p><a href=\"https://read.iopipe.com/the-right-way-to-do-serverless-in-python-e99535574454\">https://read.iopipe.com/the-right-way-to-do-serverless-in-python-e99535574454</a></p><p></p><p><a href=\"https://github.com/salesforce/decaNLP\">https://github.com/salesforce/decaNLP</a></p><p></p><p><a href=\"https://www.linkedin.com/pulse/major-minor-classifying-mode-song-alex-smith/\">https://www.linkedin.com/pulse/major-minor-classifying-mode-song-alex-smith/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-july-9th/","uuid":"f5c028b1-75dd-4881-aa11-31bc4f0d86bb","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b39bfc2d0ac8a143588f340"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736a0","title":"Weekend Worker #2 - Cert Renewals","slug":"renewing-certs","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/07/encrypt3@2x.jpg","excerpt":"Renewing LetsEncrypt Certs with Certbot.","custom_excerpt":"Renewing LetsEncrypt Certs with Certbot.","created_at_pretty":"09 July, 2018","published_at_pretty":"09 July, 2018","updated_at_pretty":"19 September, 2018","created_at":"2018-07-08T20:25:30.000-04:00","published_at":"2018-07-08T20:33:37.000-04:00","updated_at":"2018-09-19T02:56:32.000-04:00","meta_title":"Weekend Worker #2 - Cert Renewals | Hackers and Slackers","meta_description":"LetsEncrypt for the awesome temporary free SSL Certs they offer. In the last use I became familiar with and implemented the use of certbot. ","og_description":"LetsEncrypt for the awesome temporary free SSL Certs they offer. In the last use I became familiar with and implemented the use of certbot. ","og_image":"https://hackersandslackers.com/content/images/2018/07/encrypt3@2x.jpg","og_title":"Weekend Worker #2 - Cert Renewals","twitter_description":"LetsEncrypt for the awesome temporary free SSL Certs they offer. In the last use I became familiar with and implemented the use of certbot. ","twitter_image":"https://hackersandslackers.com/content/images/2018/07/encrypt3@2x.jpg","twitter_title":"Weekend Worker 2: Cert Renewals | Hackers and Slackers","authors":[{"name":"Ryan Rosado","slug":"xodz","bio":"World renowned DJ who got his start from being famous on the internet. Averages 3 headshots per second in daily life and pays for all and essentials in bitcoin.","profile_image":"https://hackersandslackers.com/content/images/2019/03/ryan2.jpg","twitter":"@Zawdz","facebook":null,"website":"http://twitch.tv/xodz/videos/all"}],"primary_author":{"name":"Ryan Rosado","slug":"xodz","bio":"World renowned DJ who got his start from being famous on the internet. Averages 3 headshots per second in daily life and pays for all and essentials in bitcoin.","profile_image":"https://hackersandslackers.com/content/images/2019/03/ryan2.jpg","twitter":"@Zawdz","facebook":null,"website":"http://twitch.tv/xodz/videos/all"},"primary_tag":{"name":"DevOps","slug":"devops","description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","feature_image":null,"meta_description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","meta_title":"DevOps: Networking And Server Configuration | Hackers and Slackers","visibility":"public"},"tags":[{"name":"DevOps","slug":"devops","description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","feature_image":null,"meta_description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","meta_title":"DevOps: Networking And Server Configuration | Hackers and Slackers","visibility":"public"}],"plaintext":"It's Sunday and you know what that means... time to catch up on work outside of\nwork. \n\nI recently used LetsEncrypt for the awesome temporary free SSL Certs they offer.\nIn the last use I became familiar with and implemented the use of certbot\n[https://dedisource.com/docs/display/Public/What+is+Certbot]. \n\nI did not go so far as to automate certbot\n[https://dedisource.com/docs/display/Public/What+is+Certbot]  to check for and\nupdate near-expiring certs. But this is coming up soon...\n\nHowever, it's come time to renew so I've had to reteach myself how to do it,\ngrasping for all logs in 'history' over a few different machines, I was able to\neasily re-do it once more and this time - document Renewing LetsEncrypt Certs\nwith Certbot\n[https://dedisource.com/docs/display/Public/Renewing+LetsEncrypt+Certs+with+Certbot]\n.","html":"<p>It's Sunday and you know what that means... time to catch up on work outside of work. </p><p>I recently used LetsEncrypt for the awesome temporary free SSL Certs they offer. In the last use I became familiar with and implemented the use of <a href=\"https://dedisource.com/docs/display/Public/What+is+Certbot\">certbot</a>. </p><p>I did not go so far as to automate <a href=\"https://dedisource.com/docs/display/Public/What+is+Certbot\">certbot</a> to check for and update near-expiring certs. But this is coming up soon...</p><p>However, it's come time to renew so I've had to reteach myself how to do it, grasping for all logs in 'history' over a few different machines, I was able to easily re-do it once more and this time - document <a href=\"https://dedisource.com/docs/display/Public/Renewing+LetsEncrypt+Certs+with+Certbot\">Renewing LetsEncrypt Certs with Certbot</a>.</p>","url":"https://hackersandslackers.com/renewing-certs/","uuid":"0b6e2064-d1b0-4b92-93c1-4741899bb502","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b42ab7a2d99b9040e300f7e"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867369f","title":"Creating Your First Flask Application","slug":"creating-your-first-flask-application","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/07/flask-gettingstarted@2x.jpg","excerpt":"After achieving market dominance, Flask is a Python framework impossible to avoid.","custom_excerpt":"After achieving market dominance, Flask is a Python framework impossible to avoid.","created_at_pretty":"08 July, 2018","published_at_pretty":"08 July, 2018","updated_at_pretty":"21 February, 2019","created_at":"2018-07-08T16:06:24.000-04:00","published_at":"2018-07-08T17:51:42.000-04:00","updated_at":"2019-02-21T17:05:15.000-05:00","meta_title":"Creating Your First Flask Application | Hackers and Slackers","meta_description":"After achieving market dominance, Flask is a Python framework impossible to avoid. Learn the basics of creating a Flask web app or API.","og_description":"After achieving market dominance, Flask is a Python framework impossible to avoid. Learn the basics of creating a Flask web app or API.","og_image":"https://hackersandslackers.com/content/images/2018/07/flask-gettingstarted@2x.jpg","og_title":"Creating Your First Flask Application","twitter_description":"After achieving market dominance, Flask is a Python framework impossible to avoid. Learn the basics of creating a Flask web app or API.","twitter_image":"https://hackersandslackers.com/content/images/2018/07/flask-gettingstarted@2x.jpg","twitter_title":"Creating Your First Flask Application","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Architecture","slug":"architecture","description":"Advancements in software architecture, serverless and beyond. Examples include equivalents to Lambda functions, Docker containers, Google Cloud functions,  Kubernetes, Heroku, etc.","feature_image":null,"meta_description":"Advancements in software architecture, serverless and beyond. Examples include equivalents to cloud functions, Docker containers, Kubernetes, Heroku, etc.","meta_title":"Software Architecture | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"},{"name":"#Building Flask Apps","slug":"building-flask-apps","description":"Python’s fast-growing and flexible microframework. Can handle apps as simple as API endpoints, to monoliths remininiscent of Django.","feature_image":"https://hackersandslackers.com/content/images/2019/03/flask-gettingstarted.jpg","meta_description":"Python’s fastest growing, most flexible, and perhaps most Pythonic framework.","meta_title":"Building Flask Apps","visibility":"internal"}],"plaintext":"Evidence of Flask’s rise to power has been all around us for a couple of years\nnow. Anybody paying close attention to the technology stacks chosen by startups\nhas undoubtedly noticed a flip: at some point, the industry standard flipped\naway from Django entirely. \n\nHuge bets are being placed on Flask across the industry. Plotly’s  famous Dash \nproduct is an extension of Flask which has seen significant success. Even major\ncloud providers, namely Google Cloud, are choosing to default to Flask for\nPython implementations of serverless apps. Google Cloud Functions and Google App\nEngine both ship with Flask running at their core. JetBrains finally put an\nofficial number to this trend with their 2018 Python survey\n[https://www.jetbrains.com/research/python-developers-survey-2018/]: 47%  of\ndevs report using Flask to Django’s 45%. Game: Blouses.\n\nFlask wins market dominence in 2018.Put down the pitchforks: this isn’t a Flask\nvs. Django post, nor are we implying that one framework is superior to the\nother. Both frameworks have their place, with that “place” being in the realm of\npreference.\n\nWhy Flask?\nDeveloping apps in Flask has a much different narrative than when developing in\nmore traditional MVC Frameworks. In the past, the setup of a framework would\neasily take hours: with the assumption that our app needed all the bells and\nwhistles, it was impossible to get a “Hello world!” off the ground without a\nfull understanding of database configurations, static assets, templates, and\nother things our app may not even need. This is especially a concern for the\nPython ecosystem. Few people turn to Python for the sole purpose of building a\nweb app: the vast majority of Python developers are in the field of data\nanalysis without a traditional background in application development. Asking\ndata analysts (who have mostly become accustomed to Jupyter notebooks) to pick\nup all the fundamentals of web development before even getting started is just\nunrealistic.\n\nFlask's setup is merely a copy+paste of the following five lines:\n\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello World!\"\n\n\nThose five lines create a live Flask application. Without any other knowledge\nabout the framework, we can immediately plug in any Python logic we already have\nto change “Hello world!” to match any output imaginable. While it's possible to\ncreate an entire Flask application as a single tiny file, Flask can be as\nextended to be just as powerful and complex as its predecessors. When the author\nof a Flask application deems it necessary, various Flask plugins can be pulled\nin to give us robust application logic. Examples include:\n\n * Flask-SQLAlchemy  for database interaction.\n * Flask-Sessions  for user session management.\n * Flask-Login  to manage user logins.\n * Literally hundreds [https://github.com/humiaozuzu/awesome-flask]  of other\n   libraries.\n\nThis plug-and-play structure makes Flask projects feel more expressive while\nsimultaneously providing simplicity to developers starting from 0. Not only\nthat, but reading somebody else’s source suddenly becomes simple: I know this\napp must do XYZ, because this person has imported XYZ.\n\nDissecting Flask’s “Hello World!”\nLet's go back to our 5-line application to pick apart the specifics:\n\nfrom flask import Flask \napp = Flask(__name__)\n\n\nThe most important part of the Flask Python library is Flask  with a capital “F”\n(as in: from flask import Flask).  This five-letter word creates an object which\nrefers to the entirety of the app itself: when we state app = Flask(__name__),\nwe are creating the variable app  which represents our application. Therefore,\nwhen we configure the variable app,  we’re configuring the way our entire\napplication works. For example, setting app = Flask()  can accept a few\nattributes:\n\nfrom flask import Flask\n\napp = Flask(__name__,\n            instance_relative_config=False,\n            template_folder=\"templates\",\n            static_folder=\"static\"\n            )\n\n\nThis is an example of creating a Flask app with a few specifics: the location of\nour config file, the folder in which we'll store pages templates, and the folder\nin which we'll store frontend assets (JS, CSS, images, etc.).\n\nA Basic Flask Route\nThe primary function of our app is called hello(), which is importantly wrapped\nby Flask's most important decorator: .route(). If you aren't familiar with \ndecorators  in Python, a decorator is a function for us to wrap other functions\nwith. It isn't critically important to know all the details, other than that\nFlask comes with a route decorator which allows us to serve up functions based\non which page of the app the user is loading. By setting @app.route(\"/\"), we are\nspecifying that the function hello()  should fire whenever somebody uses our\napp.\n\nOf course, we can return any value besides \"Hello world!\" if we wanted. Let's\nsay you've already a script which returns the square of a number, plus 9. We\ncould save that logic in a function called squareOfNumberPlusNine(), in a file\ncalled logic.py. Now, our script can look like this:\n\nfrom flask import Flask\nfrom logic import squareOfNumberPlusNine\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    value = squareOfNumberPlusNine(5)\n    return value\n\n\nThis would return 34  as opposed to \"Hello world!\". Without any prior knowledge\nof Python web development, we can already use Flask to plug into logic we've\nwritten and serve up a result.\n\nOther Parts of Flask's Core Library\nWe can import other things from flask  besides Flask. Here are some examples:\n\nServing Raw HTML\nMarkup  allows us to return an HTML page by rendering a string as HTML:\n\nfrom flask import Flask, Markup\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return Markup(\"<h1>Hello World!</h1>\")\n\n\nServing an HTML Page Template\nreturn_template  will return an HTML page by finding the page in our /templates \nfolder:\n\nfrom flask import Flask, render_template\napp = Flask(__name__, template_folder=\"templates\")\n\n@app.route(\"/\")\ndef hello():\n    return render_template(\"index.html\")\n\n\nServing a JSON Response \nmake_response  is suitable if our application is an API and we'd like to return\na response object:\n\nfrom flask import Flask, make_response\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    headers = {\"Content-Type\": \"application/json\"}\n    return make_response('it worked!', 200, headers=headers)\n\n\nOn the topic of creating APIs with Flask, we can also specify whether the route\nat hand is a POST, GET, or some other method. This is handled easily within the\nroute decorator:\n\nfrom flask import Flask, make_response, request\napp = Flask(__name__)\n\n@app.route(\"/\", methods=['GET'])\ndef hello():\n    if request.method != 'GET':\n        return make_response('Malformed request', 400)\n    headers = {\"Content-Type\": \"application/json\"}\n    return make_response('it worked!', 200, headers=headers)\n\n\nThe above function checks to make sure the user is accessing the endpoint with\nthe correct method first. If they've used the incorrect method, we return an\nerror.\n\nSuccumb to Flask\nEven if you chose to stick to your large Frameworks, it's easy to see why Flask\nis useful as a drop-in solution for many tasks. There are undoubtedly plenty of\nuseful Python scripts which go wasted because the final step of making them\neasily consumable by other people was never completed. Flask is an excellent way\nto achieve this last step, and the best part is: you already know how to use it.","html":"<p>Evidence of Flask’s rise to power has been all around us for a couple of years now. Anybody paying close attention to the technology stacks chosen by startups has undoubtedly noticed a flip: at some point, the industry standard flipped away from Django entirely. </p><p>Huge bets are being placed on Flask across the industry. <strong>Plotly’s</strong> famous <strong>Dash</strong> product is an extension of Flask which has seen significant success. Even major cloud providers, namely <strong>Google Cloud</strong>, are choosing to default to Flask for Python implementations of serverless apps. Google Cloud Functions and Google App Engine both ship with Flask running at their core. JetBrains finally put an official number to this trend with their <a href=\"https://www.jetbrains.com/research/python-developers-survey-2018/\">2018 Python survey</a>: <strong>47%</strong> of devs report using Flask to Django’s <strong>45%</strong>. Game: Blouses.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/Screen-Shot-2019-02-13-at-4.36.00-PM.png\" class=\"kg-image\"><figcaption>Flask wins market dominence in 2018.</figcaption></figure><p>Put down the pitchforks: this isn’t a Flask vs. Django post, nor are we implying that one framework is superior to the other. Both frameworks have their place, with that “place” being in the realm of preference.</p><h2 id=\"why-flask\">Why Flask?</h2><p>Developing apps in Flask has a much different narrative than when developing in more traditional MVC Frameworks. In the past, the setup of a framework would easily take hours: with the assumption that our app needed all the bells and whistles, it was impossible to get a “Hello world!” off the ground without a full understanding of database configurations, static assets, templates, and other things our app may not even need. This is especially a concern for the Python ecosystem. Few people turn to Python for the sole purpose of building a web app: the vast majority of Python developers are in the field of data analysis without a traditional background in application development. Asking data analysts (who have mostly become accustomed to Jupyter notebooks) to pick up all the fundamentals of web development before even getting started is just unrealistic.</p><p>Flask's setup is merely a copy+paste of the following five lines:</p><pre><code class=\"language-python\">from flask import Flask\napp = Flask(__name__)\n\n@app.route(&quot;/&quot;)\ndef hello():\n    return &quot;Hello World!&quot;\n</code></pre>\n<p>Those five lines create a live Flask application. Without any other knowledge about the framework, we can immediately plug in any Python logic we already have to change “Hello world!” to match any output imaginable. While it's possible to create an entire Flask application as a single tiny file, Flask can be as extended to be just as powerful and complex as its predecessors. When the author of a Flask application deems it necessary, various Flask plugins can be pulled in to give us robust application logic. Examples include:</p><ul><li><strong>Flask-SQLAlchemy</strong> for database interaction.</li><li><strong>Flask-Sessions</strong> for user session management.</li><li><strong>Flask-Login</strong> to manage user logins.</li><li>Literally <a href=\"https://github.com/humiaozuzu/awesome-flask\">hundreds</a> of other libraries.</li></ul><p>This plug-and-play structure makes Flask projects feel more expressive while simultaneously providing simplicity to developers starting from 0. Not only that, but reading somebody else’s source suddenly becomes simple: I know this app must do XYZ, because this person has imported XYZ.</p><h2 id=\"dissecting-flask-s-hello-world-\">Dissecting Flask’s “Hello World!”</h2><p>Let's go back to our 5-line application to pick apart the specifics:</p><pre><code class=\"language-python\">from flask import Flask \napp = Flask(__name__)\n</code></pre>\n<p>The most important part of the Flask Python library is <strong>Flask</strong> with a capital “F” (as in: <code>from flask import Flask</code>).  This five-letter word creates an object which refers to the entirety of the app itself: when we state <code>app = Flask(__name__)</code>, we are creating the variable <strong>app</strong> which represents our application. Therefore, when we configure the variable <strong>app,</strong> we’re configuring the way our entire application works. For example, setting <code>app = Flask()</code> can accept a few attributes:</p><pre><code class=\"language-python\">from flask import Flask\n\napp = Flask(__name__,\n            instance_relative_config=False,\n            template_folder=&quot;templates&quot;,\n            static_folder=&quot;static&quot;\n            )\n</code></pre>\n<p>This is an example of creating a Flask app with a few specifics: the location of our config file, the folder in which we'll store pages templates, and the folder in which we'll store frontend assets (JS, CSS, images, etc.).</p><h3 id=\"a-basic-flask-route\">A Basic Flask Route</h3><p>The primary function of our app is called <code>hello()</code>, which is importantly wrapped by Flask's most important decorator: <code>.route()</code>. If you aren't familiar with <strong>decorators</strong> in Python, a decorator is a function for us to wrap other functions with. It isn't critically important to know all the details, other than that Flask comes with a route decorator which allows us to serve up functions based on which page of the app the user is loading. By setting <code>@app.route(\"/\")</code>, we are specifying that the function <code>hello()</code> should fire whenever somebody uses our app.</p><p>Of course, we can return any value besides \"Hello world!\" if we wanted. Let's say you've already a script which returns the square of a number, plus 9. We could save that logic in a function called <code>squareOfNumberPlusNine()</code>, in a file called <code>logic.py</code>. Now, our script can look like this:</p><pre><code class=\"language-python\">from flask import Flask\nfrom logic import squareOfNumberPlusNine\napp = Flask(__name__)\n\n@app.route(&quot;/&quot;)\ndef hello():\n    value = squareOfNumberPlusNine(5)\n    return value\n</code></pre>\n<p>This would return <strong>34</strong> as opposed to \"<strong>Hello world!\"</strong>. Without any prior knowledge of Python web development, we can already use Flask to plug into logic we've written and serve up a result.</p><h2 id=\"other-parts-of-flask-s-core-library\">Other Parts of Flask's Core Library</h2><p>We can import other things <code>from flask</code> besides <code>Flask</code>. Here are some examples:</p><h3 id=\"serving-raw-html\">Serving Raw HTML</h3><p><code>Markup</code> allows us to return an HTML page by rendering a string as HTML:</p><pre><code class=\"language-python\">from flask import Flask, Markup\napp = Flask(__name__)\n\n@app.route(&quot;/&quot;)\ndef hello():\n    return Markup(&quot;&lt;h1&gt;Hello World!&lt;/h1&gt;&quot;)\n</code></pre>\n<h3 id=\"serving-an-html-page-template\">Serving an HTML Page Template</h3><p><code>return_template</code> will return an HTML page by finding the page in our <code>/templates</code> folder:</p><pre><code class=\"language-python\">from flask import Flask, render_template\napp = Flask(__name__, template_folder=&quot;templates&quot;)\n\n@app.route(&quot;/&quot;)\ndef hello():\n    return render_template(&quot;index.html&quot;)\n</code></pre>\n<h3 id=\"serving-a-json-response\">Serving a JSON Response </h3><p><code>make_response</code> is suitable if our application is an API and we'd like to return a response object:</p><pre><code class=\"language-python\">from flask import Flask, make_response\napp = Flask(__name__)\n\n@app.route(&quot;/&quot;)\ndef hello():\n    headers = {&quot;Content-Type&quot;: &quot;application/json&quot;}\n    return make_response('it worked!', 200, headers=headers)\n</code></pre>\n<p>On the topic of creating APIs with Flask, we can also specify whether the route at hand is a POST, GET, or some other method. This is handled easily within the route decorator:</p><pre><code class=\"language-python\">from flask import Flask, make_response, request\napp = Flask(__name__)\n\n@app.route(&quot;/&quot;, methods=['GET'])\ndef hello():\n    if request.method != 'GET':\n        return make_response('Malformed request', 400)\n    headers = {&quot;Content-Type&quot;: &quot;application/json&quot;}\n    return make_response('it worked!', 200, headers=headers)\n</code></pre>\n<p>The above function checks to make sure the user is accessing the endpoint with the correct method first. If they've used the incorrect method, we return an error.</p><h2 id=\"succumb-to-flask\">Succumb to Flask</h2><p>Even if you chose to stick to your large Frameworks, it's easy to see why Flask is useful as a drop-in solution for many tasks. There are undoubtedly plenty of useful Python scripts which go wasted because the final step of making them easily consumable by other people was never completed. Flask is an excellent way to achieve this last step, and the best part is: you already know how to use it.</p>","url":"https://hackersandslackers.com/creating-your-first-flask-application/","uuid":"dac63aa8-2a5d-4d3e-a6b1-cccc5785764c","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b426ec02d99b9040e300f74"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673694","title":"Lynx Roundup, July 8th","slug":"lynx-roundup-july-8th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx71@2x.jpg","excerpt":"Daily roundup of Data Science news around the industry, 7/8/2018.","custom_excerpt":"Daily roundup of Data Science news around the industry, 7/8/2018.","created_at_pretty":"02 July, 2018","published_at_pretty":"08 July, 2018","updated_at_pretty":"14 February, 2019","created_at":"2018-07-02T01:58:47.000-04:00","published_at":"2018-07-08T07:00:00.000-04:00","updated_at":"2019-02-13T22:46:43.000-05:00","meta_title":"Lynx Roundup, July 8th | Hackers and Slackers","meta_description":"Daily roundup of Data Science news around the industry, 7/8/2018.","og_description":"Daily roundup of Data Science news around the industry, 7/8/2018.","og_image":"https://hackersandslackers.com/content/images/lynx/lynx71@2x.jpg","og_title":"Lynx Roundup, July 8th","twitter_description":"Daily roundup of Data Science news around the industry, 7/8/2018.","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx71@2x.jpg","twitter_title":"Lynx Roundup, July 8th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},{"name":"Machine Learning","slug":"machine-learning","description":"The latest developments in machine learning tools and technology available to data scientists.","feature_image":null,"meta_description":"The latest developments in machine learning tools and technology available to data scientists.","meta_title":"Machine Learning | Hackers and Slackers","visibility":"public"},{"name":"Data Science","slug":"datascience","description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","feature_image":null,"meta_description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","meta_title":"Data Science | Hackers and Slackers","visibility":"public"}],"plaintext":"Data Sciencing for Good Causes!\nhttps://projects.propublica.org/graphics/migrant-shelters-near-you\n\n\n\nData Sciencing for Bad Causes!\nhttps://boingboing.net/2018/06/26/software-formalities.html\n\n\n\nhttps://techxplore.com/news/2018-06-breakthrough-algorithm-exponentially-faster-previous.html\n\n\n\nhttps://towardsdatascience.com/getting-started-with-reading-deep-learning-research-papers-the-why-and-the-how-dfd1ac15dbc0\n\n\n\nhttps://blog.twitter.com/engineering/en_us/topics/insights/2018/ml-workflows.html","html":"<p></p><p>Data Sciencing for Good Causes!  <a href=\"https://projects.propublica.org/graphics/migrant-shelters-near-you\">https://projects.propublica.org/graphics/migrant-shelters-near-you</a></p><p></p><p>Data Sciencing for Bad Causes!  <a href=\"https://boingboing.net/2018/06/26/software-formalities.html\">https://boingboing.net/2018/06/26/software-formalities.html</a></p><p></p><p><a href=\"https://techxplore.com/news/2018-06-breakthrough-algorithm-exponentially-faster-previous.html\">https://techxplore.com/news/2018-06-breakthrough-algorithm-exponentially-faster-previous.html</a></p><p></p><p><a href=\"https://towardsdatascience.com/getting-started-with-reading-deep-learning-research-papers-the-why-and-the-how-dfd1ac15dbc0\">https://towardsdatascience.com/getting-started-with-reading-deep-learning-research-papers-the-why-and-the-how-dfd1ac15dbc0</a></p><p></p><p><a href=\"https://blog.twitter.com/engineering/en_us/topics/insights/2018/ml-workflows.html\">https://blog.twitter.com/engineering/en_us/topics/insights/2018/ml-workflows.html</a></p>","url":"https://hackersandslackers.com/lynx-roundup-july-8th/","uuid":"0307c90f-1735-4cba-ae1a-e727fc93cb21","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b39bf17d0ac8a143588f33b"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673693","title":"Lynx Roundup, June 7th","slug":"lynx-roundup-june-7th-2","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx72@2x.jpg","excerpt":"Daily roundup of Data Science news around the industry, 7/7/2018.","custom_excerpt":"Daily roundup of Data Science news around the industry, 7/7/2018.","created_at_pretty":"02 July, 2018","published_at_pretty":"07 July, 2018","updated_at_pretty":"25 July, 2018","created_at":"2018-07-02T01:32:51.000-04:00","published_at":"2018-07-07T07:00:00.000-04:00","updated_at":"2018-07-24T22:06:04.000-04:00","meta_title":"Lynx Roundup, June 7th | Hackers and Slackers","meta_description":"Daily roundup of Data Science news around the industry, 7/7/2018.","og_description":"Daily roundup of Data Science news around the industry, 7/7/2018.","og_image":"https://hackersandslackers.com/content/images/lynx/lynx72@2x.jpg","og_title":"Lynx Roundup, June 7th","twitter_description":"Daily roundup of Data Science news around the industry, 7/7/2018.","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx72@2x.jpg","twitter_title":"Lynx Roundup, June 7th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},{"name":"Machine Learning","slug":"machine-learning","description":"The latest developments in machine learning tools and technology available to data scientists.","feature_image":null,"meta_description":"The latest developments in machine learning tools and technology available to data scientists.","meta_title":"Machine Learning | Hackers and Slackers","visibility":"public"}],"plaintext":"http://treyhunner.com/2018/06/how-to-make-an-iterator-in-python/\n[http://treyhunner.com/2018/06/how-to-make-an-iterator-in-python/?__s=6nyymoyizcckrmzovbvx]\n\n\n\nhttps://lenadroid.github.io/posts/distributed-data-streaming-action.html\n[https://lenadroid.github.io/posts/distributed-data-streaming-action.html?utm_medium=email&utm_source=topic+optin&utm_campaign=awareness&utm_content=20180627+data+nl&mkt_tok=eyJpIjoiWldGak1qYzRaREk0WkRrMyIsInQiOiJCZFFhcXFSYnhvOXdxUkRkOWVcL3A5em55XC9ITDVcLzJNRWVMb2JPdXRqR0phZ2VUZTdNZ0owallqVVpUVFF3aDhcL1ZZWkxYdjN1VGFrME5EYVhONVN0SGZqRzVqQm1SZ1BudmZOVzQzRERTME1iUEhSTUNVSmM4SXVtaG9kQzBaeWMifQ%3D%3D]\n\n\n\nhttps://medium.com/mit-technology-review/this-algorithm-can-tell-which-number-sequences-a-human-will-find-interesting-8caa5f1360e6\n[https://medium.com/mit-technology-review/this-algorithm-can-tell-which-number-sequences-a-human-will-find-interesting-8caa5f1360e6?mkt_tok=eyJpIjoiWldGak1qYzRaREk0WkRrMyIsInQiOiJCZFFhcXFSYnhvOXdxUkRkOWVcL3A5em55XC9ITDVcLzJNRWVMb2JPdXRqR0phZ2VUZTdNZ0owallqVVpUVFF3aDhcL1ZZWkxYdjN1VGFrME5EYVhONVN0SGZqRzVqQm1SZ1BudmZOVzQzRERTME1iUEhSTUNVSmM4SXVtaG9kQzBaeWMifQ%3D%3D]\n\n\n\nhttps://multithreaded.stitchfix.com/blog/2018/06/21/constrained-optimization/\n[https://multithreaded.stitchfix.com/blog/2018/06/21/constrained-optimization/?utm_medium=email&utm_source=topic+optin&utm_campaign=awareness&utm_content=20180627+data+nl&mkt_tok=eyJpIjoiWldGak1qYzRaREk0WkRrMyIsInQiOiJCZFFhcXFSYnhvOXdxUkRkOWVcL3A5em55XC9ITDVcLzJNRWVMb2JPdXRqR0phZ2VUZTdNZ0owallqVVpUVFF3aDhcL1ZZWkxYdjN1VGFrME5EYVhONVN0SGZqRzVqQm1SZ1BudmZOVzQzRERTME1iUEhSTUNVSmM4SXVtaG9kQzBaeWMifQ%3D%3D]\n\n\n\nI loved that speech from The Matrix!\nhttps://news.developer.nvidia.com/ai-can-smell-illnesses-in-human-breath/","html":"<p></p><p><a href=\"http://treyhunner.com/2018/06/how-to-make-an-iterator-in-python/?__s=6nyymoyizcckrmzovbvx\">http://treyhunner.com/2018/06/how-to-make-an-iterator-in-python/</a></p><p></p><p><a href=\"https://lenadroid.github.io/posts/distributed-data-streaming-action.html?utm_medium=email&amp;utm_source=topic+optin&amp;utm_campaign=awareness&amp;utm_content=20180627+data+nl&amp;mkt_tok=eyJpIjoiWldGak1qYzRaREk0WkRrMyIsInQiOiJCZFFhcXFSYnhvOXdxUkRkOWVcL3A5em55XC9ITDVcLzJNRWVMb2JPdXRqR0phZ2VUZTdNZ0owallqVVpUVFF3aDhcL1ZZWkxYdjN1VGFrME5EYVhONVN0SGZqRzVqQm1SZ1BudmZOVzQzRERTME1iUEhSTUNVSmM4SXVtaG9kQzBaeWMifQ%3D%3D\">https://lenadroid.github.io/posts/distributed-data-streaming-action.html</a></p><p></p><p><a href=\"https://medium.com/mit-technology-review/this-algorithm-can-tell-which-number-sequences-a-human-will-find-interesting-8caa5f1360e6?mkt_tok=eyJpIjoiWldGak1qYzRaREk0WkRrMyIsInQiOiJCZFFhcXFSYnhvOXdxUkRkOWVcL3A5em55XC9ITDVcLzJNRWVMb2JPdXRqR0phZ2VUZTdNZ0owallqVVpUVFF3aDhcL1ZZWkxYdjN1VGFrME5EYVhONVN0SGZqRzVqQm1SZ1BudmZOVzQzRERTME1iUEhSTUNVSmM4SXVtaG9kQzBaeWMifQ%3D%3D\">https://medium.com/mit-technology-review/this-algorithm-can-tell-which-number-sequences-a-human-will-find-interesting-8caa5f1360e6</a></p><p></p><p><a href=\"https://multithreaded.stitchfix.com/blog/2018/06/21/constrained-optimization/?utm_medium=email&amp;utm_source=topic+optin&amp;utm_campaign=awareness&amp;utm_content=20180627+data+nl&amp;mkt_tok=eyJpIjoiWldGak1qYzRaREk0WkRrMyIsInQiOiJCZFFhcXFSYnhvOXdxUkRkOWVcL3A5em55XC9ITDVcLzJNRWVMb2JPdXRqR0phZ2VUZTdNZ0owallqVVpUVFF3aDhcL1ZZWkxYdjN1VGFrME5EYVhONVN0SGZqRzVqQm1SZ1BudmZOVzQzRERTME1iUEhSTUNVSmM4SXVtaG9kQzBaeWMifQ%3D%3D\">https://multithreaded.stitchfix.com/blog/2018/06/21/constrained-optimization/</a></p><p></p><p>I loved that speech from The Matrix!  <a href=\"https://news.developer.nvidia.com/ai-can-smell-illnesses-in-human-breath/\">https://news.developer.nvidia.com/ai-can-smell-illnesses-in-human-breath/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-june-7th-2/","uuid":"c42e0e34-fe68-41ac-9566-0f1739034527","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b39b903d0ac8a143588f337"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673692","title":"Lynx Roundup, July 6th","slug":"lynx-roundup-july-6th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx70@2x.jpg","excerpt":"Daily roundup of Data Science news around the industry, 7/6/2018.","custom_excerpt":"Daily roundup of Data Science news around the industry, 7/6/2018.","created_at_pretty":"02 July, 2018","published_at_pretty":"06 July, 2018","updated_at_pretty":"25 July, 2018","created_at":"2018-07-02T01:31:18.000-04:00","published_at":"2018-07-06T07:00:00.000-04:00","updated_at":"2018-07-24T22:06:04.000-04:00","meta_title":"Lynx Roundup, July 6th | Hackers and Slackers","meta_description":"Daily roundup of Data Science news around the industry, 7/6/2018.","og_description":"Daily roundup of Data Science news around the industry, 7/6/2018.","og_image":"https://hackersandslackers.com/content/images/lynx/lynx70@2x.jpg","og_title":"Lynx Roundup, July 6th","twitter_description":"Daily roundup of Data Science news around the industry, 7/6/2018.","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx70@2x.jpg","twitter_title":"Lynx Roundup, July 6th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},{"name":"Data Vis","slug":"datavis","description":"Visualize your data with charting tools like Matplotlib, Plotly, D3, Chart.js, Muze, Seaborn, and countless others. Primarily focused on programmatic visualization as opposed to Business Intelligence software.","feature_image":null,"meta_description":"Visualize your data with charting tools like Matplotlib, Plotly, D3, Chart.js, Muze, Seaborn, and countless others. Focused on programmatic visualization.","meta_title":"Data Visualization | Hackers and Slackers","visibility":"public"},{"name":"Data Science","slug":"datascience","description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","feature_image":null,"meta_description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","meta_title":"Data Science | Hackers and Slackers","visibility":"public"}],"plaintext":"https://viterbischool.usc.edu/news/2018/06/mathematician-m-d-solves-one-of-the-greatest-open-problems-in-the-history-of-mathematics/\n\n\n\nhttps://www.quantamagazine.org/mathematics-shows-how-to-ensure-evolution-20180626/\n\n\n\nhttp://www.storytellingwithdata.com/blog/2018/6/26/accessible-data-viz-is-better-data-viz\n\n\n\nhttps://phys.org/news/2018-06-ai-recreates-chemistry-periodic-table.html\n\n\n\nhttps://blogs.scientificamerican.com/roots-of-unity/stepping-into-a-three-torus/","html":"<p></p><p><a href=\"https://viterbischool.usc.edu/news/2018/06/mathematician-m-d-solves-one-of-the-greatest-open-problems-in-the-history-of-mathematics/\">https://viterbischool.usc.edu/news/2018/06/mathematician-m-d-solves-one-of-the-greatest-open-problems-in-the-history-of-mathematics/</a></p><p></p><p><a href=\"https://www.quantamagazine.org/mathematics-shows-how-to-ensure-evolution-20180626/\">https://www.quantamagazine.org/mathematics-shows-how-to-ensure-evolution-20180626/</a></p><p></p><p><a href=\"http://www.storytellingwithdata.com/blog/2018/6/26/accessible-data-viz-is-better-data-viz\">http://www.storytellingwithdata.com/blog/2018/6/26/accessible-data-viz-is-better-data-viz</a></p><p></p><p><a href=\"https://phys.org/news/2018-06-ai-recreates-chemistry-periodic-table.html\">https://phys.org/news/2018-06-ai-recreates-chemistry-periodic-table.html</a></p><p></p><p><a href=\"https://blogs.scientificamerican.com/roots-of-unity/stepping-into-a-three-torus/\">https://blogs.scientificamerican.com/roots-of-unity/stepping-into-a-three-torus/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-july-6th/","uuid":"88c9a3eb-3e8f-4eeb-b715-104020e1255d","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b39b8a6d0ac8a143588f332"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867369c","title":"Slicing Excel: The Way of The Knife","slug":"slicing-excel-the-way-of-the-knife","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/07/knife@2x.jpg","excerpt":"Slicing your Excel data to be presentable for the less tech-savvy.","custom_excerpt":"Slicing your Excel data to be presentable for the less tech-savvy.","created_at_pretty":"04 July, 2018","published_at_pretty":"05 July, 2018","updated_at_pretty":"21 January, 2019","created_at":"2018-07-04T00:23:29.000-04:00","published_at":"2018-07-05T09:05:47.000-04:00","updated_at":"2019-01-21T14:22:14.000-05:00","meta_title":"Slicing Excel: The Way of The Knife | Hackers and Slackers","meta_description":"Slicing your Excel data to be presentable for the less tech-savvy.","og_description":"Slicing your Excel data to be presentable for the less tech-savvy","og_image":"https://hackersandslackers.com/content/images/2018/07/knife@2x.jpg","og_title":"Slicing Excel: The Way of The Knife","twitter_description":"Slicing your Excel data to be presentable for the less tech-savvy","twitter_image":"https://hackersandslackers.com/content/images/2018/07/knife@2x.jpg","twitter_title":"Slicing Excel: The Way of The Knife","authors":[{"name":"Max Mileaf","slug":"snacks","bio":"One of three therapists in the known universe who knows how to use a computer. Finds meaning in highly protected data, in a cave, utilizing nothing but a box of scraps. ","profile_image":"https://hackersandslackers.com/content/images/2019/03/max2.jpg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Max Mileaf","slug":"snacks","bio":"One of three therapists in the known universe who knows how to use a computer. Finds meaning in highly protected data, in a cave, utilizing nothing but a box of scraps. ","profile_image":"https://hackersandslackers.com/content/images/2019/03/max2.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},"tags":[{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},{"name":"#Adventures in Excel","slug":"adventures-in-excel","description":"Excel secrets and magic. The kind of industry knowledge that could put financial analysts out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"internal"}],"plaintext":"If you've been following along with the posts in this series, and you've been\nputting some of the scenarios into practice, you've now crossed a crucial\njuncture in your never ending quest to master the bloated beast that is Excel.\nTo put things in perspective, if you've conquered all the quests that I've set\nyou upon, you should now be able to:\n\n* Open up and add macro code into an Excel Worksheet \n* Utilize lookup functions (particularly Index(Match)) to compare and validate\ndata sets \n* Build a complex formula\n* Utilize IF/AND/and OR statements in order to manipulate data and finally... \n* Understand your role in the data underground\n\nIf there was any running theme among the posts in the past, it's that if you're\nin the position in which you're forced to utilize Excel in order to analyze\ndata, you're probably grabbing a dirty version of the data-set from an\nintermediary platform (such as Tableau or Business Objects) built by a developer\nwho isn't informed as to how the end user is going to use the data. \n\nYour mission, whether you choose to accept it or not is essentially to take data\nfrom people who know data and don't know the business, and turn it into data for\npeople who know business and don't understand numbers.\nIf you're wondering if perhaps you're in this role and don't know it yet,\nthere's a simple two question litmus test\n\n=IF(AND(COLORCODING,OR(SLICE,DICE)),\"Analyst\",\"Something Else\"\n\nFor those of you who are just joining the party, that essentially says that if:\n1. If a superior of yours has ever asked you to \"slice\" and or \"dice\" the data \n2. If you're asked to color code things arbitrarily. Then you might be an\nanalyst.\n\nNow, while you're sitting at your desk (in what's most likely an Aeron chair)\nand you read the above qualifiers, the first thought that pops into your mind\nshould be: \"WTF does slice and dice mean when it comes to data analysis?\" The\nanswer may surprise you in that it's not just meaningless business lingo, it's\nactually a pretty good explanation of what you're going to be doing A LOT of\n(but fear not, in all likelihood, your boss didn't mean it like that due to what\nI'd like to call the leveraging of the synergy paradigm).\n\n\nEssentially, when one attempts to slap-chop a \"data dump\" (in the computer\npatois, that's how you say data that's pulled straight from the source), it\noften involves as the first step \"normalizing\" the data so that the format is\nlogical, and is in a position in which you can start employing some of the\nwizardry that we've been speaking about.\nThe normalization process often involves only a few steps, all of which are\nquite easy, but EXTREMELY un-intuitive, and if you follow these steps, you'll\neither be done with the normalization process, or you'll be able to figure out\nhow (all data dumps are dirty, but not all shit is created equal).\n\n1. Ensure that your data has headings!\na. Headings are essential not just because they're a logical way to organize  \n your variables, but they're are also REQUIRED to build a pivot table down the\nroad, if even one of your columns doesn't have a heading, Excel won't play nice!\n \n2. Ensure that your headings don't repeat themselves\na. While this may seem obvious, if a heading repeats itself, Excel won't pivot\nproperly, won't graph correctly AND won't upload properly in external tools\n(such as Microsoft Access, which we'll explore in a later post!) \n3. Ensure that multiple sources are all located on the same Excel workbook\n(basically, if you're pulling data from multiple places, that you paste them all\ninto the same Excel file).\na. Note that since Excel 2007, this step isn't 100% necessary, but it makes\nthings much faster in both ease of use, and in the computational sense. \n4. And finally, ensure that your variables are in the correct format...which is\nwhat we'll focus on for the rest of this post.\n\nOften, data dumps combine multiple variables into one \"string\" (a set of\ncharacters with no other format) most often last names, first names, and ID\nnumbers which is fine when you're trying to figure out how many\nSmith,Bob,8675309s exist in your data...so basically useless on it's own. This\nbrings us to the title of this post: how we're going to slice up (or \"Parse\")\nthis string so that it's useful to us. \n\nThere are a few was of going about this, but in my experience the most useful is\nsome combination of the following formulae:\n=LEFT  which returns a specified number of characters from the start of a\nstring. \n=RIGHT  which returns a specified number of characters from the end of the\nstring. \n=MID   which returns a specified number of characters from a defined point in\nthe string \n=LEN  which returns the number of characters in the string, and \n=FIND  which returns the location of a specified character or string within a\nstring. Just a word to the wise, starting from the beginning is always 0, not 1\nin any of these examples. \n\nAssuming you've got some android in you, you notice that =left  and =right  are\nbasically useless if you need to break up a string (but can be useful if you\nwind up with a data dump that gives you a preset amount of garbage to throw away\neach time, or as a second step in this process). Instead, we're going to\nleverage the fact that Data Dumps are generally exported in Comma Separated\nFormat (CSV) which means that there are going to be a lot of commas for you to\nset as \"flags\" where you want to break things up. Take the example I gave you\nbefore: Smith,Bob,8675309s. \nThis is actually a particularly mean example because you're going to need to\nbreak it into three steps for which there are multiple solutions, simply because\nthere's more than one comma to \"put your flag down\". One way you can go about it\nis as such: \n\nFirst use the \"mid\" function alongside the \"find\" command in order to separate\nthe last name from the first name and ID, like so: \n=MID(A1,FIND(\",\",A1)+1,LEN(A1))\nThe result of this will be Bob,8675309, and the reason why the +1 is included is\nso that we don't include the comma (which would start this whole circus again)\nFrom there, you can repeat the steps on the newly created Bob,8675309 in order\nto obtain the ID.\n\nOnce you have the ID number, if you return to the original string and perform \n=left(A1(find(\",\",A1)-1)  (the -1 removes the first comma as opposed to the\nsecond) you'll get \"Smith\"\n\nFinally, you can go to the Bob,8675309 string (which we'll say is located in B1)\nand perform the same steps in order to get \"Bob\" all by itself. \n\nWith all that being said, until we get a bit more advanced (yes, you can do this\nin fewer steps), assume you need one formula per comma in order to \"parse\" each\nsection, and you'll find your way. The benefit of breaking it down this way is\nthat you can drag the formula down and it'll perform the exact same steps\nregardless of how long the initial string is, as long as it has 3 commas. \n\nSo, what have we learned? \n\n 1. We've learned to slice up data dumps\n 2. We've learned to dice up the resultant strings and finally\n 3. We've learned how to take a small bit of useless garbage and turn it into\n    variables that we can use in further analysis via slicing and dicing. \n\nSo you see? Perhaps your boss knew something after all when they were asking you\nif you knew how to slice and dice data... juuuuuust kidding. \n\nNow that you have a basic fund of knowledge (and if you don't I implore you to\nread the rest of the Adventures in Excel series), the next few lessons are going\nto go into some of the crazier stuff that I've personally been asked to do\n(which my other friends on this blog could do in 5 minutes using something other\nthan Excel) and you'll learn to start a fire with some flint and a bunch of\nsticks. \n\n-Snacks out.","html":"<p>If you've been following along with the posts in this series, and you've been putting some of the scenarios into practice, you've now crossed a crucial juncture in your never ending quest to master the bloated beast that is Excel. To put things in perspective, if you've conquered all the quests that I've set you upon, you should now be able to:<br><br>* Open up and add macro code into an Excel Worksheet <br>* Utilize lookup functions (particularly Index(Match)) to compare and validate data sets <br>* Build a complex formula<br>* Utilize IF/AND/and OR statements in order to manipulate data and finally... <br>* Understand your role in the data underground<br><br>If there was any running theme among the posts in the past, it's that if you're in the position in which you're forced to utilize Excel in order to analyze data, you're probably grabbing a dirty version of the data-set from an intermediary platform (such as Tableau or Business Objects) built by a developer who isn't informed as to how the end user is going to use the data. </p><p>Your mission, whether you choose to accept it or not is essentially to take data from people who know data and don't know the business, and turn it into data for people who know business and don't understand numbers.<br>If you're wondering if perhaps you're in this role and don't know it yet, there's a simple two question litmus test</p><p><code>=IF(AND(COLORCODING,OR(SLICE,DICE)),\"Analyst\",\"Something Else\"</code><br><br>For those of you who are just joining the party, that essentially says that if:<br> 1. If a superior of yours has ever asked you to \"slice\" and or \"dice\" the data <br>2. If you're asked to color code things arbitrarily. Then you might be an analyst.<br><br>Now, while you're sitting at your desk (in what's most likely an Aeron chair) and you read the above qualifiers, the first thought that pops into your mind should be: \"WTF does slice and dice mean when it comes to data analysis?\" The answer may surprise you in that it's not just meaningless business lingo, it's actually a pretty good explanation of what you're going to be doing A LOT of (but fear not, in all likelihood, your boss didn't mean it like that due to what I'd like to call the <em><strong>leveraging of the synergy paradigm</strong></em>).</p><p><br>Essentially, when one attempts to slap-chop a \"data dump\" (in the computer patois, that's how you say data that's pulled straight from the source), it often involves as the first step \"normalizing\" the data so that the format is logical, and is in a position in which you can start employing some of the wizardry that we've been speaking about.<br>The normalization process often involves only a few steps, all of which are quite easy, but EXTREMELY un-intuitive, and if you follow these steps, you'll either be done with the normalization process, or you'll be able to figure out how (all data dumps are dirty, but not all shit is created equal).<br><br> 1. Ensure that your data has headings!    <br>\ta. Headings are essential not just because they're a logical way to organize    your variables, but they're are also REQUIRED to build a pivot table down the road, if even one of your columns doesn't have a heading, Excel won't play nice! <br>2. Ensure that your headings don't repeat themselves    <br>\ta. While this may seem obvious, if a heading repeats itself, Excel won't pivot properly, won't graph correctly AND won't upload properly in external tools (such as Microsoft Access, which we'll explore in a later post!) <br>3. Ensure that multiple sources are all located on the same Excel workbook (basically, if you're pulling data from multiple places, that you paste them all into the same Excel file).    <br>\ta. Note that since Excel 2007, this step isn't 100% necessary, but it makes things much faster in both ease of use, and in the computational sense. <br>4. And finally, ensure that your variables are in the correct format...which is what we'll focus on for the rest of this post.<br><br>Often, data dumps combine multiple variables into one \"string\" (a set of characters with no other format) most often last names, first names, and ID numbers which is fine when you're trying to figure out how many Smith,Bob,8675309s exist in your data...so basically useless on it's own. This brings us to the title of this post: how we're going to slice up (or \"Parse\") this string so that it's useful to us. <br><br>There are a few was of going about this, but in my experience the most useful is some combination of the following formulae:<br> <code>=LEFT</code> which returns a specified number of characters from the start of a string. <br><code>=RIGHT</code> which returns a specified number of characters from the end of the string. <br><code>=MID</code>  which returns a specified number of characters from a defined point in the string <br><code>=LEN</code> which returns the number of characters in the string, and <br><code>=FIND</code> which returns the location of a specified character or string within a string. Just a word to the wise, starting from the beginning is always 0, not 1 in any of these examples. <br><br>Assuming you've got some android in you, you notice that <code>=left</code> and <code>=right</code> are basically useless if you need to break up a string (but can be useful if you wind up with a data dump that gives you a preset amount of garbage to throw away each time, or as a second step in this process). Instead, we're going to leverage the fact that Data Dumps are generally exported in Comma Separated Format (CSV) which means that there are going to be a lot of commas for you to set as \"flags\" where you want to break things up. Take the example I gave you before: Smith,Bob,8675309s. <br>This is actually a particularly mean example because you're going to need to break it into three steps for which there are multiple solutions, simply because there's more than one comma to \"put your flag down\". One way you can go about it is as such: </p><p>First use the \"mid\" function alongside the \"find\" command in order to separate the last name from the first name and ID, like so: <code>=MID(A1,FIND(\",\",A1)+1,LEN(A1))</code><br>The result of this will be Bob,8675309, and the reason why the +1 is included is so that we don't include the comma (which would start this whole circus again)<br>From there, you can repeat the steps on the newly created Bob,8675309 in order to obtain the ID.</p><p>Once you have the ID number, if you return to the original string and perform <code>=left(A1(find(\",\",A1)-1)</code> (the -1 removes the first comma as opposed to the second) you'll get \"Smith\"<br><br>Finally, you can go to the Bob,8675309 string (which we'll say is located in B1) and perform the same steps in order to get \"Bob\" all by itself. </p><p>With all that being said, until we get a bit more advanced (yes, you can do this in fewer steps), assume you need one formula per comma in order to \"parse\" each section, and you'll find your way. The benefit of breaking it down this way is that you can drag the formula down and it'll perform the exact same steps regardless of how long the initial string is, as long as it has 3 commas. <br><br>So, what have we learned? </p><ol><li>We've learned to slice up data dumps</li><li>We've learned to dice up the resultant strings and finally</li><li>We've learned how to take a small bit of useless garbage and turn it into variables that we can use in further analysis via slicing and dicing. </li></ol><p>So you see? Perhaps your boss knew something after all when they were asking you if you knew how to slice and dice data... juuuuuust kidding. </p><p>Now that you have a basic fund of knowledge (and if you don't I implore you to read the rest of the Adventures in Excel series), the next few lessons are going to go into some of the crazier stuff that I've personally been asked to do (which my other friends on this blog could do in 5 minutes using something other than Excel) and you'll learn to start a fire with some flint and a bunch of sticks. <br><br>-Snacks out. </p>","url":"https://hackersandslackers.com/slicing-excel-the-way-of-the-knife/","uuid":"5e29efb4-a83c-4d03-8ec9-ffa1fb0bd5b2","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b3c4bc1d0ac8a143588f365"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673691","title":"Lynx Roundup, July 5th","slug":"lynx-roundup-july-5th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx25@2x.jpg","excerpt":"Daily roundup of Data Science news around the industry, 7/5/2018.","custom_excerpt":"Daily roundup of Data Science news around the industry, 7/5/2018.","created_at_pretty":"02 July, 2018","published_at_pretty":"05 July, 2018","updated_at_pretty":"25 July, 2018","created_at":"2018-07-02T01:27:26.000-04:00","published_at":"2018-07-05T07:00:00.000-04:00","updated_at":"2018-07-24T22:06:04.000-04:00","meta_title":"Lynx Roundup, July 5th | Hackers and Slackers","meta_description":"Daily roundup of Data Science news around the industry, 7/5/2018.","og_description":"Daily roundup of Data Science news around the industry, 7/5/2018.","og_image":"https://hackersandslackers.com/content/images/lynx/lynx25@2x.jpg","og_title":"Lynx Roundup, July 5th","twitter_description":"Daily roundup of Data Science news around the industry, 7/5/2018.","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx25@2x.jpg","twitter_title":"Lynx Roundup, July 5th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://lispcast.com/how-to-write-software/\n[https://lispcast.com/how-to-write-software/?__s=wvtwtdzek6uqqfiffffi]\n\n\n\nhttps://medium.com/@rchang/a-beginners-guide-to-data-engineering-the-series-finale-2cc92ff14b0\n\n\n\nhttps://rd.springer.com/article/10.1007/s42081-018-0009-3\n\n\n\nhttps://pgdash.io/blog/postgres-features.html\n[https://pgdash.io/blog/postgres-features.html?utm_campaign=Data_Elixir&utm_medium=email&utm_source=Data_Elixir_188]\n\n\n\nhttps://dive.media.mit.edu/\n[https://dive.media.mit.edu/?utm_campaign=Data_Elixir&utm_medium=email&utm_source=Data_Elixir_188]","html":"<p></p><p><a href=\"https://lispcast.com/how-to-write-software/?__s=wvtwtdzek6uqqfiffffi\">https://lispcast.com/how-to-write-software/</a></p><p></p><p><a href=\"https://medium.com/@rchang/a-beginners-guide-to-data-engineering-the-series-finale-2cc92ff14b0\">https://medium.com/@rchang/a-beginners-guide-to-data-engineering-the-series-finale-2cc92ff14b0</a></p><p></p><p><a href=\"https://rd.springer.com/article/10.1007/s42081-018-0009-3\">https://rd.springer.com/article/10.1007/s42081-018-0009-3</a></p><p></p><p><a href=\"https://pgdash.io/blog/postgres-features.html?utm_campaign=Data_Elixir&amp;utm_medium=email&amp;utm_source=Data_Elixir_188\">https://pgdash.io/blog/postgres-features.html</a></p><p></p><p><a href=\"https://dive.media.mit.edu/?utm_campaign=Data_Elixir&amp;utm_medium=email&amp;utm_source=Data_Elixir_188\">https://dive.media.mit.edu/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-july-5th/","uuid":"01b44a6e-b343-48c0-9e8c-13bf1f012f65","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b39b7bed0ac8a143588f32f"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867369d","title":"Extract Massive Amounts of Data from APIs in Python","slug":"extracting-massive-datasets-from-apis","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/07/usa@2x.jpg","excerpt":"Abusing REST APIs for all they’re worth.","custom_excerpt":"Abusing REST APIs for all they’re worth.","created_at_pretty":"04 July, 2018","published_at_pretty":"04 July, 2018","updated_at_pretty":"28 March, 2019","created_at":"2018-07-04T15:24:18.000-04:00","published_at":"2018-07-04T17:26:00.000-04:00","updated_at":"2019-03-28T07:55:05.000-04:00","meta_title":"Extracting Massive Datasets in Python | Hackers and Slackers","meta_description":"The data we need and crave is stashed behind APIs all around us. We have the keys to the world, but that power often comes with a few caveats.","og_description":"The data we need and crave is stashed behind APIs all around us. We have the keys to the world, but that power often comes with a few caveats.","og_image":"https://hackersandslackers.com/content/images/2018/07/usa@2x.jpg","og_title":"Extracting Massive Datasets in Python","twitter_description":"The data we need and crave is stashed behind APIs all around us. We have the keys to the world, but that power often comes with a few caveats.","twitter_image":"https://hackersandslackers.com/content/images/2018/07/usa@2x.jpg","twitter_title":"Extracting Massive Datasets in Python","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Pandas","slug":"pandas","description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/pandasmerge.jpg","meta_description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","meta_title":"Pythons and Pandas | Hackers and Slackers","visibility":"public"},{"name":"REST APIs","slug":"restapis","description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","feature_image":null,"meta_description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","meta_title":"Consuming and Building REST APIs | Hackers and Slackers","visibility":"public"}],"plaintext":"Taxation without representation. Colonialism. Not letting people eat cake. Human\nbeings rightfully meet atrocities with action in an effort to change the worked\nfor the better. Cruelty by mankind justifies revolution, and it is this writer’s\nopinion that API limitations are one such cruelty.\n\nThe data we need and crave is stashed in readily available APIs all around us.\nIt’s as though we have the keys to the world, but that power often comes with a\nfew caveats:\n\n * Your “key” only lasts a couple of hours, and if you want another one, you’ll\n   have to use some other keys to get another key.\n * You can have the ten thousand records you’re looking for, but you can only\n   pull 50 at a time.\n * You won’t know the exact structure of the data you’re getting, but it’ll\n   probably be a JSON hierarchy designed by an 8-year-old.\n\nAll men may be created equal, but APIs are not. In the spirit of this 4th of\nJuly, let us declare independence from repetitive tasks: One Script, under\nPython, for Liberty and Justice for all.\n\nProject Setup\nWe'll split our project up by separation of concern into just a few files:\n\nmyProject\n├── main.py\n├── config.py\n└── token.py\n\n\nMain.py will unsurprisingly hold the core logic of our script.\n\nConfig.py contains variables such as client secrets and endpoints which we can\neasily swap when applying this script to different APIs. For now we'll just keep\nvariables client_id  and client_secret  in there for now.\n\nToken.py  serves the purpose of Token Generation. Let's start there.\n\nThat's the Token \nSince we're assuming worst case scenarios let's focus on atrocity number one:\nAPIs which require expiring tokens. There are some tyrants in this world who\nbelieve that in order to use their API, it is necessary to to first use a client\nID and client secret to generate a Token which quickly becomes useless hours\nlater. In other words, you need to use an API every time you want to use the\nactual API. Fuck that.\n\nimport requests\nfrom config import client_id, client_secret\n\ntoken_url = 'https://api.fakeapi.com/auth/oauth2/v2/token'\n\ndef generateToken():\n    r = requests.post(token_url, auth=(client_id, client_secret), json={\"grant_type\": \"client_credentials\"})\n    bearer_token = r.json()['access_token']\n    print('new token = ', bearer_token)\n    return bearer_token\n\ntoken = generateToken()\n\n\nWe import client_id  and client_secret  from our config file off the bat: most\nservices will grant these things simply by signing up for their API.\n\nMany APIs have an endpoint which specifically serves the purpose of accepting\nthese variables and spitting out a generated token. token_url  is the variable\nwe use to store this endpoint.\n\nOur token  variable invokes our generateToken()  function which stores the\nresulting Token. With this out of the way, we can now call this function every\ntime we use the API, so we never have to worry about expiring tokens.\n\nPandas to the Rescue\nWe've established that we're looking to pull a large set of data, probably\nsomewhere in the range of thousands of records. While JSON is all fine and\ndandy, it probably isn't very useful for human beings to consume a JSON file\nwith thousands of records. \n\nAgain, we have no idea what the nature of the data coming through will look\nlike. I don't really care to manually map values to fields, and I'm guessing you\ndon't either. Pandas can help us out here: by passing the first page of records\nto Pandas, we can generate the resulting keys into columns in a Dataframe. It's\nalmost like having a database-type schema created for you simply by looking at\nthe data coming through:\n\nimport requests\nimport pandas as pd\nimport numpy as np\nimport json\nfrom token import token\n\ndef setKeys():\n    headers = {\"Authorization\":\"Bearer \" + token}\n    r = requests.get(base_url + 'users', headers=headers)\n    dataframe = pd.DataFrame(columns=r.json()['data'][0].keys())\n    return dataframe\n\nrecords_df = setKeys()\n\nWe can now store all data into records_df  moving forward, allowing us to build\na table of results.\n\nNo Nation for Pagination\nAnd here we are, one of the most obnoxious parts of programming: paginated\nresults. We want thousands of records, but we're only allowed 50 at a time. Joy.\n\nWe've already set records_df  earlier as a global variable, so we're going to\nappend every page of results we get to that Dataframe, starting at page #1. The\nfunction getRecords  is going to pull that first page for us.\n\nbase_url = 'https://api.fakeapi.com/api/1/'\n\ndef getRecords():\n    headers = {\"Authorization\": \"Bearer \" + token}\n    r = requests.get(base_url + 'users', headers=headers)\n    nextpage = r.json()['pagination']['next_link']\n    records_df = pd.DataFrame(columns=r.json()['data'][0].keys())\n    if nextpage:\n        getNextPage(nextpage)\n\ngetRecords()\n\n\nLuckily APIs if there are  additional pages of results to a request, most APIs\nwill provide a URL to said page, usually stored in the response as a value. In\nour case, you can see we find this value after making the request: nextpage =\nr.json()['pagination']['next_link']. If this value exists, we make a call to get\nthe next page of results.\n\npage = 1\n\ndef getNextPage(nextpage):\n    global page\n    page = page + 1\n    print('PAGE ', page)\n    headers = {\"Authorization\": \"Bearer \" + token}\n    r = requests.get(nextpage, headers=headers)\n    nextpage = r.json()['pagination']['next_link']\n    records = r.json()['data']\n    for user in records:\n        s  = pd.Series(user,index=user.keys())\n        global records_df\n        records_df.loc[len(records_df)] = s\n    records_df.to_csv('records.csv')\n    if nextpage:\n        getNextPage(nextpage)\n\nOur function getNextPage  hits that next page of results, and appends them to\nthe pandas DataFrame we created earlier. If another page exists after that, the\nfunction runs again, and our page increments by 1. As long as more pages exist,\nthis function will fire again and again until all innocent records are driven\nout of their comfortable native resting place and forced into our contained\ndataset. There's not much more American than that.\n\nThere's More We Can Do\nThis script is fine, but it can optimized to be even more modular to truly be\none-size-fits-all. For instance, some APIs don't tell you the number of pages \nyou should except, but rather the number of records.  In those cases, we'd have\nto divide total number of records by records per page to know how many pages to\nexpect. As much as I want to go into detail about writing loops on the 4th of\nJuly, I don't. At all.\n\nThere are plenty more examples, but this should be enough to get us thinking how\nwe can replace tedious work with machines. That sounds like a flavor that pairs\nperfectly with Bud Light and hotdogs if you ask me.","html":"<p>Taxation without representation. Colonialism. Not letting people eat cake. Human beings rightfully meet atrocities with action in an effort to change the worked for the better. Cruelty by mankind justifies revolution, and it is this writer’s opinion that API limitations are one such cruelty.</p><p>The data we need and crave is stashed in readily available APIs all around us. It’s as though we have the keys to the world, but that power often comes with a few caveats:</p><ul><li>Your “key” only lasts a couple of hours, and if you want another one, you’ll have to use some other keys to get another key.</li><li>You can have the ten thousand records you’re looking for, but you can only pull 50 at a time.</li><li>You won’t know the exact structure of the data you’re getting, but it’ll probably be a JSON hierarchy designed by an 8-year-old.</li></ul><p>All men may be created equal, but APIs are not. In the spirit of this 4th of July, let us declare independence from repetitive tasks: One Script, under Python, for Liberty and Justice for all.</p><h2 id=\"project-setup\">Project Setup</h2><p>We'll split our project up by separation of concern into just a few files:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">myProject\n├── main.py\n├── config.py\n└── token.py\n</code></pre>\n<!--kg-card-end: markdown--><p><strong>Main.py </strong>will unsurprisingly hold the core logic of our script.</p><p><strong>Config.py </strong>contains variables such as client secrets and endpoints which we can easily swap when applying this script to different APIs. For now we'll just keep variables <code>client_id</code> and <code>client_secret</code> in there for now.</p><p><strong>Token.py</strong> serves the purpose of Token Generation. Let's start there.</p><h2 id=\"that-s-the-token\">That's the Token </h2><p>Since we're assuming worst case scenarios let's focus on atrocity number one: APIs which require expiring tokens. There are some tyrants in this world who believe that in order to use their API, it is necessary to to first use a client ID and client secret to generate a Token which quickly becomes useless hours later. In other words, you need to use an API every time you want to use the actual API. Fuck that.</p><!--kg-card-begin: code--><pre><code>import requests\nfrom config import client_id, client_secret\n\ntoken_url = 'https://api.fakeapi.com/auth/oauth2/v2/token'\n\ndef generateToken():\n    r = requests.post(token_url, auth=(client_id, client_secret), json={\"grant_type\": \"client_credentials\"})\n    bearer_token = r.json()['access_token']\n    print('new token = ', bearer_token)\n    return bearer_token\n\ntoken = generateToken()\n</code></pre><!--kg-card-end: code--><p>We import <code>client_id</code> and <code>client_secret</code> from our config file off the bat: most services will grant these things simply by signing up for their API.  </p><p>Many APIs have an endpoint which specifically serves the purpose of accepting these variables and spitting out a generated token. <code>token_url</code> is the variable we use to store this endpoint.</p><p>Our <code>token</code> variable invokes our <code>generateToken()</code> function which stores the resulting Token. With this out of the way, we can now call this function every time we use the API, so we never have to worry about expiring tokens.</p><h2 id=\"pandas-to-the-rescue\">Pandas to the Rescue</h2><p>We've established that we're looking to pull a large set of data, probably somewhere in the range of thousands of records. While JSON is all fine and dandy, it probably isn't very useful for human beings to consume a JSON file with thousands of records. </p><p>Again, we have no idea what the nature of the data coming through will look like. I don't really care to manually map values to fields, and I'm guessing you don't either. Pandas can help us out here: by passing the first page of records to Pandas, we can generate the resulting keys into columns in a Dataframe. It's almost like having a database-type schema created for you simply by looking at the data coming through:</p><!--kg-card-begin: code--><pre><code>import requests\nimport pandas as pd\nimport numpy as np\nimport json\nfrom token import token\n\ndef setKeys():\n    headers = {\"Authorization\":\"Bearer \" + token}\n    r = requests.get(base_url + 'users', headers=headers)\n    dataframe = pd.DataFrame(columns=r.json()['data'][0].keys())\n    return dataframe\n\nrecords_df = setKeys()</code></pre><!--kg-card-end: code--><p>We can now store all data into <code>records_df</code> moving forward, allowing us to build a table of results.</p><h2 id=\"no-nation-for-pagination\">No Nation for Pagination</h2><p>And here we are, one of the most obnoxious parts of programming: paginated results. We want thousands of records, but we're only allowed 50 at a time. Joy.</p><p>We've already set <code>records_df</code> earlier as a global variable, so we're going to append every page of results we get to that Dataframe, starting at page #1. The function <code>getRecords</code> is going to pull that first page for us.</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">base_url = 'https://api.fakeapi.com/api/1/'\n\ndef getRecords():\n    headers = {&quot;Authorization&quot;: &quot;Bearer &quot; + token}\n    r = requests.get(base_url + 'users', headers=headers)\n    nextpage = r.json()['pagination']['next_link']\n    records_df = pd.DataFrame(columns=r.json()['data'][0].keys())\n    if nextpage:\n        getNextPage(nextpage)\n\ngetRecords()\n</code></pre>\n<!--kg-card-end: markdown--><p>Luckily APIs if there <em>are</em> additional pages of results to a request, most APIs will provide a URL to said page, usually stored in the response as a value. In our case, you can see we find this value after making the request: <code>nextpage = r.json()['pagination']['next_link']</code>. If this value exists, we make a call to get the next page of results.</p><!--kg-card-begin: code--><pre><code>page = 1\n\ndef getNextPage(nextpage):\n    global page\n    page = page + 1\n    print('PAGE ', page)\n    headers = {\"Authorization\": \"Bearer \" + token}\n    r = requests.get(nextpage, headers=headers)\n    nextpage = r.json()['pagination']['next_link']\n    records = r.json()['data']\n    for user in records:\n        s  = pd.Series(user,index=user.keys())\n        global records_df\n        records_df.loc[len(records_df)] = s\n    records_df.to_csv('records.csv')\n    if nextpage:\n        getNextPage(nextpage)</code></pre><!--kg-card-end: code--><p>Our function <code>getNextPage</code> hits that next page of results, and <em>appends them to the pandas DataFrame </em>we created earlier. If another page exists after that, the function runs again, and our page increments by 1. As long as more pages exist, this function will fire again and again until all innocent records are driven out of their comfortable native resting place and forced into our contained dataset. There's not much more American than that.</p><h2 id=\"there-s-more-we-can-do\">There's More We Can Do</h2><p>This script is fine, but it can optimized to be even more modular to truly be one-size-fits-all. For instance, some APIs don't tell you the number of <em>pages</em> you should except, but rather the number of <em>records.</em> In those cases, we'd have to divide total number of records by records per page to know how many pages to expect. As much as I want to go into detail about writing loops on the 4th of July, I don't. At all.</p><p>There are plenty more examples, but this should be enough to get us thinking how we can replace tedious work with machines. That sounds like a flavor that pairs perfectly with Bud Light and hotdogs if you ask me.</p>","url":"https://hackersandslackers.com/extracting-massive-datasets-from-apis/","uuid":"39a94407-5d5a-4038-a6b6-04fa228ad0f0","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b3d1ee2d0ac8a143588f36e"}}]}},"pageContext":{"pageNumber":24,"humanPageNumber":25,"skip":288,"limit":12,"numberOfPages":33,"previousPagePath":"/page/24","nextPagePath":"/page/26"}}