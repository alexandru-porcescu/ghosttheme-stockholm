{"data":{"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736f5","title":"Lynx Roundup, September 10th","slug":"lynx-roundup-september-10th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx72@2x.jpg","excerpt":"Bayesian view on Neural Networks!  How Chrome can still freeze even on a nigh-supercomputer!  A tour inside a chip that does Floating Point calcs!  ","custom_excerpt":"Bayesian view on Neural Networks!  How Chrome can still freeze even on a nigh-supercomputer!  A tour inside a chip that does Floating Point calcs!  ","created_at_pretty":"05 September, 2018","published_at_pretty":"10 September, 2018","updated_at_pretty":"10 September, 2018","created_at":"2018-09-05T15:45:37.000-04:00","published_at":"2018-09-10T07:00:00.000-04:00","updated_at":"2018-09-10T07:00:00.000-04:00","meta_title":"Bayesian view on Neural Networks!  How Chrome can still freeze even on a nigh-supercomputer!  A tour inside a chip that does Floating Point calcs!   | Hackers And Slackers","meta_description":"Bayesian view on Neural Networks!  How Chrome can still freeze even on a nigh-supercomputer!  A tour inside a chip that does Floating Point calcs!  ","og_description":"Bayesian view on Neural Networks!  How Chrome can still freeze even on a nigh-supercomputer!  A tour inside a chip that does Floating Point calcs!  ","og_image":"https://hackersandslackers.com/content/images/lynx/lynx72@2x.jpg","og_title":"Lynx Roundup, September 10th","twitter_description":"Bayesian view on Neural Networks!  How Chrome can still freeze even on a nigh-supercomputer!  A tour inside a chip that does Floating Point calcs!  ","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx72@2x.jpg","twitter_title":"Lynx Roundup, September 10th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"I wasn’t looking for trouble. I wasn’t trying to compile a huge project in the\nbackground (24-core CPU and I can’t move my mouse\n[http://randomascii.wordpress.com/2017/07/09/24-core-cpu-and-i-cant-move-my-mouse/]\n), I was just engaging in that most mundane of 21st century tasks, writing an\nemail at 10:30 am. And suddenly gmail hung. I kept typing but for several\nseconds but no characters were appearing on screen. Then, suddenly gmail caught\nup and I resumed my very important  email. Then it happened again, only this\ntime gmail went unresponsive for even longer. Well that’s funny\n[https://quoteinvestigator.com/2015/03/02/eureka-funny/]…\n\nI have trouble resisting a good performance mystery but in this case the draw\nwas particularly strong. I work at Google, making Chrome, for Windows, focused\non performance. Investigating this hang was actually my job. And after a lot of\nfalse starts and some hard work I figured out how Chrome, gmail, Windows, and\nour IT department were working together to prevent me from typing an email, and\nin the process I found a way to save a significant amount of memory for some web\npages in Chrome.\n\nThis investigation had so many rabbit holes that I’m going to save some of the\ndigressions for a follow-on post (which is here\n[https://randomascii.wordpress.com/2018/08/22/24-core-cpu-and-i-cant-type-an-email-part-two/]\n) , but this one will entirely explain the hangs. \n\nAs usual I had UIforETW\n[https://randomascii.wordpress.com/2015/09/01/xperf-basics-recording-a-trace-the-ultimate-easy-way/] \n running in the background, tracing to circular buffers, so I just had to type\nCtrl+Win+R and the buffers, representing the last thirty seconds or so of system\nactivity, were saved to disk. I loaded it into Windows Performance Analyzer\n[https://randomascii.wordpress.com/2012/06/19/wpaxperf-trace-analysis-reimagined/] \n (WPA), but I couldn’t definitively find the hang.\n\nWhen a Windows program stops pumping messages there will be ETW events emitted\nto indicate exactly where this happened\n[https://randomascii.wordpress.com/2012/05/05/xperf-wait-analysisfinding-idle-time/]\n, so those types of hangs are trivial to find. But apparently Chrome kept on\npumping messages. I looked for a time when one of Chrome’s crucial threads\neither went into a busy loop or went completely idle, but I couldn’t find\nanything conclusive. There were some spots where Chrome went mostly  idle, but\neven then all of the key threads kept chugging along, so I couldn’t be sure\nwhere the hang was – Chrome might have been going idle because nothing was\nhappening:\n\n  [http://randomascii.files.wordpress.com/2018/08/image.png]\n\n  [http://randomascii.files.wordpress.com/2018/08/image1.png]UIforETW has a\nbuilt-in key logger which is often useful when identifying key points in a\ntrace. However, for obvious security reasons it defaults to anonymizing the\nkeystrokes, treating every number typed as a ‘1’ and every letter as an ‘A’.\nThis was making it hard to find the exact moment of the hang so I turned the\ninput tracing from “Private” to “Full” and waited for the hang. At around 10:30\nthe next morning the hang happened again. I saved the trace buffers, and put\nthese notes into UIforETW’s trace information field:\n\nWas typing “defer to those with more scuba experience” and gmail hung around the\nend of “those” and then resumed partway through “experience”. gmail tab was PID\n27368.\n\nClearly just a normal work-related discussion of commute methods\n[https://randomascii.wordpress.com/2017/05/01/commute-challenge-2017/], but the\nimportant thing is that now I had a way of locating the hang in the ETW trace. I\nloaded the trace, looked at the keyboard data in the Generic Events field (the\nevents are emitted by UIforETW itself, each one is a purple diamond in the\nscreen shot below) and suddenly I could see exactly where the hang was, and\nclearly the dip in CPU usage was 100% correlated:\n\n  [http://randomascii.files.wordpress.com/2018/08/image2.png]\n\nOkay, but why is Chrome stopping? Here’s some foreshadowing: not shown in these\nscreenshots is that WmiPrvSE.exe\n[https://docs.microsoft.com/en-us/windows/desktop/wmisdk/wmi-start-page]  was\nconsuming an entire CPU hyperthread whenever this happened. But that shouldn’t\nmatter. I have a 24-core/48-thread machine so consuming one hyperthread means my\nmachine is still about 98% idle.\n\nI then zoomed in to the clearly-significant period where Chrome was idle and\nlooked in particular at CrRendererMain in chrome.exe (27368), the gmail tab\nprocess.\n\nAside: I just want to say thank you to 2015 me\n[https://randomascii.wordpress.com/2015/10/26/thread-naming-in-windows-time-for-something-better/] \n for asking Microsoft to improve their thread naming mechanisms, and thank you\nto Microsoft for doing everything I suggested – thread names in WPA are great!\n\nThe problem suddenly became clearer. During the 2.81 s hang this thread was\nscheduled and ran 440 separate times. Normally running every 6 ms is enough to\nmake a program responsive, but for some reason it wasn’t making any progress. I\nnoticed that every time it woke up it was on the same stack. Simplified down it\nwas:\n\nchrome_child.dll (stack base)\nKernelBase.dll!VirtualAlloc\nntoskrnl.exe!MiCommitVadCfgBits\nntoskrnl.exe!MiPopulateCfgBitMap\nntoskrnl.exe!ExAcquirePushLockExclusiveEx\nntoskrnl.exe!KeWaitForSingleObject (stack leaf)\n\nChrome is calling VirtualAlloc, which tries to update some “CfgBits” and needs\nto acquire a lock. At first I assumed that Chrome was calling VirtualAlloc 440\ntimes, which seemed like a weird thing to do, but the reality was perhaps\nweirder. Chrome called VirtualAlloc once and a lock needed to be acquired.\nChrome was signaled when that lock was available but – for 439 times in a row –\nwhen Chrome woke up and tried to acquire the lock it was unavailable. The lock\nhad been reacquired by the process that had just released it.\n\nThis is because many Windows locks are, by design, not fair\n[http://joeduffyblog.com/2006/12/14/anticonvoy-locks-in-windows-server-2003-sp1-and-windows-vista/] \n and if a thread releases a lock and then tries to reacquire it immediately then\nit can, in cases like this, reacquire it every single time. Starvation. More on\nthis next time.\n\nThe Readying Process – the one that signaled Chrome to go grab the lock – in \nevery  case was WmiPrvSE.exe, releasing the lock on this stack:\n\nntoskrnl.exe!KiSystemServiceCopyEnd (stack base)\nntoskrnl.exe!NtQueryVirtualMemory\nntoskrnl.exe!MmQueryVirtualMemory\nntoskrnl.exe!MiUnlockAndDereferenceVad\nntoskrnl.exe!ExfTryToWakePushLock (stack leaf)\n\nI got distracted by WMI for a while (more on that next time) but eventually I\nwrote a program to recreate WMI’s behavior. I had CPU sampling data that showed\nme where WmiPrvSE.exe was spending its time (some edits and simplifications\nmade):\n\nWmiPerfClass.dll!EnumSelectCounterObjects (stack base)\nWmiPerfClass.dll!ConvertCounterPath\npdh.dll!PdhiTranslateCounter\npdh.dll!GetSystemPerfData\nKernelBase.dll!blah-blah-blah\nadvapi32.dll!blah-blah-blah\nperfproc.dll!blah-blah-blah\nperfproc.dll!GetProcessVaData\nntdll.dll!NtQueryVirtualMemory\nntoskrnl.exe!NtQueryVirtualMemory\nntoskrnl.exe!MmQueryVirtualMemory\nntoskrnl.exe!MiQueryAddressSpan\nntoskrnl.exe!MiQueryAddressState\nntoskrnl.exe!MiGetNextPageTable (stack leaf)\n\nIt turns out that reproducing the slow scanning from the sampling data was quite\neasy. The interesting part of the call stack above is NtQueryVirtualMemory,\nwhich is used to scan process memory, and is called by the suggestively named \nGetProcessVaData, where Va  probably stands for  Virtual Address. My VirtualScan\nprogram just called NtQueryVirtualMemory  in the obvious loop to scan the\naddress space of a specified process, the code worked, it took a really long\ntime to scan the gmail process (10-15 seconds), and it triggered the hang. But\nwhy?\n\nThe advantage of writing the scanning loop myself was that I could start\ngenerating statistics. NtQueryVirtualMemory\n[https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/content/ntifs/nf-ntifs-ntqueryvirtualmemory] \n returns data on each contiguous range of address space that has matching\nattributes. That might mean all reserved, all committed with particular\nprotection settings, etc. The gmail process had about 26,000 of these blocks but\nI found another process (WPA\n[https://randomascii.wordpress.com/2012/06/19/wpaxperf-trace-analysis-reimagined/]\n, as it turns out) that had 16,000 memory blocks but could be scanned very\nquickly.\n\nAt some point I looked at the gmail process with vmmap\n[https://docs.microsoft.com/en-us/sysinternals/downloads/vmmap]  and noticed\nthat the gmail process had a fair amount of memory (361,836 KiB) and a lot of\nseparate blocks (49,719) coming from a single reservation in the Shareable\ncategory – a reservation with a size of 2,147,483,648 KiB, aka 2 TiB. Wot?\n\n  [http://randomascii.files.wordpress.com/2018/08/image4.png]\n\nI happened to know that the 2 TiB reservation is used for Control Flow Guard\n[http://www.alex-ionescu.com/?p=246]  (CFG), and I remembered that “CFG” showed\nup on the call stacks where the gmail Chrome process was waiting – \nMiCommitVadCfgBits  was on the stack. Maybe the large number of blocks in the\nCFG region were the problem!\n\nControl Flow Guard (CFG) is used to try to stop exploits. Its 2 TiB reservation\nis a sparse bitmap which indicates which addresses (across 128 TiB of user-mode\naddress space) are valid indirect branch targets. So I modified my virtual\nmemory scanner to count how many blocks were in the CFG region (just look for\nthe 2 TiB reservation) and how many blocks were tagged as executable. Since CFG\nmemory is used to describe  executable memory I expected to see one block of CFG\nmemory for each block of executable memory in the process. Instead I saw 98\nblocks of executable memory and 24,866  blocks of committed CFG memory. A\nsignificant discrepancy:\n\n     Scan time,  Committed, page tables, committed blocks\nTotal: 41.763s, 1457.7 MiB,    67.7 MiB,  32112, 98 code blocks\nCFG:   41.759s,  353.3 MiB,    59.2 MiB,  24866\n\nvmmap shows reservations and commited memory as blocks and my scanning tool only\ncounts committed blocks – that’s why vmmap shows 49,684 blocks where my scanning\ntool reports 24,866\n\nIn hindsight it is obvious, but what if the CFG bitmap never gets cleaned up?\nWhat if memory gets allocated in the CFG bitmap when you allocate executable\nmemory, but it doesn’t get freed when you free the executable memory. That would\nexplain this behavior.\n\nEnd-to-end repro\nThe next step was to write a VAllocStress program that allocates and then frees\nthousands of blocks of executable memory at random addresses. This executable\nneeds to have CFG enabled and needs to be 64-bit and I hit some road blocks\nbecause I didn’t really know what I was trying to do but it worked. After\nallocating and freeing this many blocks of executable memory this program should\nsit in a loop where it occasionally try to allocate/free more executable memory,\nand note when this is slow. Here is my basic algorithm for VAllocStress:\n\n 1. Spin in a loop a lot of times: 1. Allocate some executable memory with\n        VirtualAlloc at a random address\n     2. Free the memory \n    \n    \n 2. Then, spin in an infinite loop: 1. Sleep for 500 ms (don’t want to be a CPU\n        hog)\n     2. Allocate some executable memory with\n        VirtualAlloc at a fixed location\n     3. Print a message if the VirtualAlloc call\n        takes more than ~500 ms\n     4. Free the memory \n    \n    \n\nThat’s it. It’s super simple. And it was so satisfying when it worked. I ran it\nand then got my VirtualScan program to scan my VAllocStress process. I quickly\ngot confirmation that the CFG block was horribly fragmented, and the scanning\ntook a long  time. And my VAllocStress program hung for the duration of the\nscan!\n\nAt this point I had simulated the CFG fragmentation, the long scanning times,\nand the hang. Huzzah!\n\nRoot-cause\nIt turns out that v8 (Chrome’s JavaScript engine) has CodeRange objects for\nmanaging code-gen, and each CodeRange object is constrained to a 128 MiB\naddress\nrange\n[https://cs.chromium.org/chromium/src/v8/src/globals.h?q=kMaximalCodeRangeSize&dr=CSs&l=182]\n. This should be small enough to avoid the rampant CFG allocation I was seeing.\n\nBut what if you have multiple CodeRange objects, and what if those get allocated\nat random addresses and then freed? I instrumented the CodeRange constructor,\nleft gmail running, and found the smoking gun. Every couple of minutes another\nCodeRange object was created (and destroyed). Being in the debugger made it easy\nto find that WorkerThread::Start was allocating these objects, and suddenly\neverything makes sense:\n\n 1. gmail uses service workers\n    [https://developers.google.com/web/fundamentals/codelabs/offline/], probably\n    for implementing offline mode\n 2. These appear and disappear every few minutes because that’s how service\n    workers behave\n 3. Each worker thread gets a temporary CodeRange object which allocates some\n    executable pages for JITted JavaScript code from a random location in the\n    47-bit process address space\n 4. The 2 TB CFG memory reservation gets some entries every time new code pages\n    are allocated\n 5. The CFG allocations are never freed\n 6. NtQueryVirtualMemory is painfully  slow when scanning CFG memory (about 1 ms\n    per block) for reasons that I don’t understand \n\nThe slow scanning of CFG memory is actually fixed in Windows 10 RS4 (April 2018\nUpdate), which briefly had me wondering if all of this investigation was\npointless. But it’s not.\n\nMemory\nThe CFG reservation starts out as just an address reservation – no memory is\nactually committed. As executable pages are allocated however parts of the CFG\nreservation are turned into committed memory, using real memory pages. And those\npages never get freed. If you keep allocating and freeing randomly located\nblocks of executable memory then the CFG region will grow arbitrarily large!\nWell, that’s not quite true. The CFG memory block is best thought of a cache\nwith bounded size. However that is little consolation when the bounded size is \n2\nTiB, per-process [https://twitter.com/BruceDawson0xB/status/1029433717670871040]\n!\n\nThe worst I’ve seen so far is when my gmail tab had been running for eight days\nand had accumulated 353.3 MiB of CFG memory, and 59.2 MiB of page-tables to map\nthat memory, for a total waste of about 400 MiB. For some reason most people see\neither no symptoms or much milder symptoms than I do.\n\n\n\n\nResolution\nThe v8 (Chrome’s JavaScript engine) team has updated their code so that it \nreuses addresses for CodeRange objects\n[https://chromium-review.googlesource.com/c/v8/v8/+/1174837], which will squish\nthis bug quite nicely. Microsoft already fixed their CFG memory scanning\nperformance problems. Maybe some day Microsoft will free CFG regions when\nexecutable memory is freed, at least in the easy cases where large address\nranges are freed. And a vmmap bug was reported.\n\nMost of my coworkers and our customers never noticed this problem. I only\nnoticed it because:\n\n * I had gmail’s offline mode enabled\n * I was running on an old version of Windows 10\n * Our IT department was running regular WMI scans of our computers\n * I was paying attention\n * I got lucky \n\nIt seems highly improbably that, as one of the most qualified people to diagnose\nthis bug, I was the first to notice it. If any of the factors above had not been\ntrue then I would not have experienced this hang and the associated memory waste\nmight never have been found.\n\nBy the way, the reason that the hangs kept happening at 10:30 am is just because\nthat’s when our IT team ran their inventory scans. If you want to trigger a scan\nmanually, you can go to Control Panel | Configuration Manager | Actions | Select\n‘Hardware Inventory Cycle’ and then Run Now.\n\n  [http://randomascii.files.wordpress.com/2018/08/clip_image002.png]\n\nSource code\nIf you want to play along at home you can grab the source-code to VAllocStress\nand VirtualScan from github, here\n[https://github.com/randomascii/blogstuff/tree/master/cfg].\n\nRabbit holes\nThis investigation included a lot  of rabbit holes. Some were important (page\ntables), some were instructive (locks), and some were purely a waste of time\n(WMI details). I’ll talk more about these, and a vmmap bug, in a follow-up post.\nIf you want more gory details – some of which ended up being wrong or irrelevant\n– you can follow the whole investigation at crbug.com/870054\n[https://bugs.chromium.org/p/chromium/issues/detail?id=870054].\n\nHacker news discussion is here [https://news.ycombinator.com/item?id=17780127].\n\nReddit discussion is here\n[https://www.reddit.com/r/programming/comments/97zy08/24core_cpu_and_i_cant_type_an_email_part_one/]\n.\n\nRussian translation is here [https://habr.com/post/420579/].\n\nJapanese translation is here\n[https://gigazine.net/news/20180825-google-engineer-fix-chrome-hang/].\n\n\n\nZombies probably won’t consume 32 GB of your memory like they did to me, but\nzombie processes do exist, and I can help you find them and make sure that\ndevelopers fix them. Tool source link is at the bottom.\n\nIs it just me, or do Windows machines that have been up for a while seem to lose\nmemory? After a few weeks of use (or a long weekend of building Chrome over 300\ntimes) I kept noticing that Task Manager showed me running low on memory, but it\ndidn’t show the memory being used  by anything. In the example below task\nmanager shows 49.8 GB of RAM in use, plus 4.4 GB of compressed memory, and yet\nonly 5.8 GB of page/non-paged pool, few processes running, and no process using\nanywhere near enough to explain where the memory had gone:\n\n  [http://randomascii.files.wordpress.com/2018/02/image3.png]\n\nMy machine has 96 GB of RAM – lucky me – and when I don’t have any programs\nrunning I think it’s reasonable to hope that I’d have at least half of it\navailable.\n\n\n\nSometimes I have dealt with this by rebooting but that should never be\nnecessary. The Windows kernel is robust and well implemented\n[https://twitter.com/nasko/status/962573875010707457]  so this memory\ndisappearing shouldn’t happen, and yet…\n\nThe first clue came when I remembered that a coworker of mine\n[https://twitter.com/tiraniddo]  had complained of zombie processes being left\nbehind – processes that had shut down but not been cleaned up by the kernel.\nHe’d even written a tool that would dump a list of zombie processes – their\nnames and counts. His original complaint was of hundreds of zombies. I ran his\ntool and it showed 506,000 zombie processes!\n\nIt occurred to me that one cause of zombie processes could be one process\nfailing to close the handles to other processes. And the great thing about\nhaving a huge number of zombies is that they are harder to hide. So, I went to\nTask Manager’s Details tab, added the Handles column, and sorted by it. Voila. I\nimmediately saw that CcmExec.exe (part of Microsoft’s System Management Server\n[https://blogs.msdn.microsoft.com/jonathanh/2004/05/27/ccmexec-exe-and-inventory-exe-what-are-they-and-what-do-they-do/]\n) had 508,000 handles open, which is both a lot  and also amazingly close to my\nzombie count.\n\n  [http://randomascii.files.wordpress.com/2018/02/image4.png]\n\nI held my breath and killed CcmExec.exe, unsure of what would happen:\n\n\n\nThe results were as dramatic as I could imagine. As I said earlier, the Windows\nkernel is well written and when a process is killed then all of its resources\nare freed. So, those 508,000 handles that were owned by CcmExec.exe were\nabruptly closed and my available memory went up by 32 GB! Mystery solved!\n\nWhat is  a zombie process?\nUntil this point we weren’t entirely sure what was causing these processes to\nhang around. In hindsight it’s obvious that these zombies were caused by a\ntrivial user-space coding bug. The rule is that when you create a process you\nneed to call CloseHandle  on its process handle and its thread handle. If you\ndon’t care about the process then you should close the handles immediately. If\nyou do care – if you want to wait for the process to quit – \nWaitForSingleObject(hProcess, INFINITE);  – or query its exit code – \nGetExitCodeProcess(hProcess, &exitCode);  – then you need to remember to close\nthe handles after that. Similarly, if you open an existing process with \nOpenProcess  you need to close that handle when you are done.\n\nIf the process that holds on to the handles is a system process then it will\neven continue holding those handles after you log out and log back in – another\nsource of confusion during our investigation last year.\n\nSo, a zombie process is a process that has shut down but is kept around because\nsome other still-running process holds a handle to it. It’s okay for a process\nto do this briefly, but it is bad form to leave a handle unclosed for long.\n\nWhere is that memory going?\nAnother thing I’d done during the investigation was to run RamMap\n[https://docs.microsoft.com/en-us/sysinternals/downloads/rammap]. This tool\nattempts to account for every page of memory in use. Its Process Memory tab had\nshown hundreds of thousands of processes that were each using 32 KB of RAM and\npresumably those were the zombies. But ~500,000 times 32 KB only equals ~16 GB –\nwhere did the rest of the freed up memory come from? Comparing the before and\nafter Use Counts pages in RamMap explained it:\n\n  [http://randomascii.files.wordpress.com/2018/02/image5.png]\n\nWe can plainly see the ~16 GB drop in Process Private memory. We can also see a\n16 GB drop in Page Table memory. Apparently a zombie process consumes ~32 KB of\npage tables, in addition to its ~32 KB of process private memory, for a total\ncost of ~64 KB. I don’t know why zombie processes consume that much RAM, but\nit’s probably because there should never be enough of them for that to matter.\n\nA few types of memory actually increased  after killing CcmExec.exe, mostly\nMapped File and Metafile. I don’t know what that means but my guess would be\nthat that indicates more data being cached, which would be a good thing. I don’t\nnecessarily want memory to be unused, but I do want it to be available.\n\nTrivia: rammap opens all processes, including zombies, so it needs to be closed\nbefore zombies will go away\n\nI tweeted about my discovery and the investigation was picked up by another\nsoftware developer [https://twitter.com/WithinRafael]  and they reproed the bug\nusing my ProcessCreateTests\n[https://github.com/randomascii/blogstuff/tree/master/ProcessCreateTests]  tool.\nThey also passed the information to a developer at Microsoft who said it was a\nknown issue that “happens when many processes are opened and closed very quickly\n[https://twitter.com/djammmer/status/961727396423516160]”.\n\nWindows has a reputation for not handling process creation as well as Linux and\nthis investigation, and one of my previous ones\n[https://randomascii.wordpress.com/2017/07/09/24-core-cpu-and-i-cant-move-my-mouse/]\n, suggest that that reputation is well earned. I hope that Microsoft fixes this\nbug – it’s sloppy.\n\nWhy do I hit so many crazy problems?\nI work on the Windows version of Chrome, and one of my tasks is optimizing its\nbuild system, which requires doing a lot of test builds. Building chrome\ninvolves creating between 28,000 and 37,000 processes, depending on build\nsettings. When using our distributed build system (goma) these processes are\ncreated and destroyed very quickly – my fastest full build ever took about 200\nseconds. This aggressive process creation has revealed a number of interesting\nbugs, mostly in Windows or its components:\n\n * Fast process destruction led to system input hangs\n   [https://randomascii.wordpress.com/2017/07/09/24-core-cpu-and-i-cant-move-my-mouse/]\n * Synaptics driver leaked memory\n   [https://randomascii.wordpress.com/2017/09/05/hey-synaptics-can-you-please-stop-polling/] \n    whenever a process was created\n * O(n^2) log-file creation\n   [https://twitter.com/BruceDawson0xB/status/962562314456072193]  in App\n   Verifier – my next blog post?\n * A Windows kernel file buffer bug\n   [https://twitter.com/BruceDawson0xB/status/958517353435680768]  from Server\n   2008 R2 to Windows 10\n * Windows Defender delaying each goma compiler launch by 250 ms\n\nWhat now?\nIf you aren’t on a corporate managed machine then you probably don’t run\nCcmExec.exe and you will avoid this particular bug. And if you don’t build\nChrome or something equivalent then you will probably avoid this bug. But!\n\nCcmExec is not the only program that leaks process handles. I have found many\nothers leaking modest numbers of handles and there are certainly more.\n\nThe bitter reality, as all experienced programmers know, is that any mistake\nthat is not explicitly prevented will be made\n[https://twitter.com/BruceDawson0xB/status/962593405581762565]. Simply writing\n“This handle must be closed” in the documentation is insufficient. So, here is\nmy contribution towards making this something detectable, and therefore\npreventable. FindZombieHandles\n[https://github.com/randomascii/blogstuff/tree/master/FindZombieHandles]  is a\ntool, based on NtApiDotNet [https://www.nuget.org/packages/NtApiDotNet/]  and\nsample code from @tiraniddo [t@tiraniddo], that prints a list of zombies and who\nis keeping them alive. Here is sample output from my home laptop:\n\n274 total zombie processes.\n249 zombies held by IntelCpHeciSvc.exe(9428)\n249 zombies of Video.UI.exe\n14 zombies held by RuntimeBroker.exe(10784)\n11 zombies of MicrosoftEdgeCP.exe\n3 zombies of MicrosoftEdge.exe\n8 zombies held by svchost.exe(8012)\n4 zombies of ServiceHub.IdentityHost.exe\n2 zombies of cmd.exe\n2 zombies of vs_installerservice.exe\n3 zombies held by explorer.exe(7908)\n3 zombies of MicrosoftEdge.exe\n1 zombie held by devenv.exe(24284)\n1 zombie of MSBuild.exe\n1 zombie held by SynTPEnh.exe(10220)\n1 zombie of SynTPEnh.exe\n1 zombie held by tphkload.exe(5068)\n1 zombie of tpnumlkd.exe\n1 zombie held by svchost.exe(1872)\n1 zombie of userinit.exe\n\n274 zombies isn’t too bad, but it represents some bugs that should be fixed. The\nIntelCpHeciSvc.exe one is the worst, as it seems to leak a process handle every\ntime I play a video from Windows Explorer.\n\nVisual Studio leaks handles to at least two processes and one of these is easy\nto reproduce. Just fire off a build and wait ~15 minutes for MSBuild.exe to go\naway. Or, if you “set MSBUILDDISABLENODEREUSE=1” then MSBuild.exe goes away\nimmediately and every build leaks a process handle. Unfortunately some jerk  at\nMicrosoft fixed this bug\n[https://twitter.com/Tashkant/status/961645045370818563]  the moment I reported\nit, and the fix may ship in VS 15.6, so you’ll have to act quickly to see this\n(and no, I don’t really think he’s a jerk).\n\nYou can also see leaked processes using Process Explorer\n[https://docs.microsoft.com/en-us/sysinternals/downloads/process-explorer], by\nconfiguring the lower pane to show handles, as shown here (note that both the\nprocess and  thread handles are leaked in this case):\n\n  [http://randomascii.files.wordpress.com/2018/02/image6.png]\n\nJust a few of the bugs found, not all reported\n * CcmExec.exe leak [https://twitter.com/djammmer/status/961727396423516160],\n   over 500,000 zombies leaked (fixes in progress\n   [https://twitter.com/djammmer/status/964031700845019137])\n * Program Compatibility Assistant Service leaks random processes\n   [https://twitter.com/BruceDawson0xB/status/963476981273604096] (being\n   investigated [https://twitter.com/appcompatguy/status/963837005795942401])\n * devenv.exe leak [https://twitter.com/Tashkant/status/961645045370818563]  of\n   MSBuild.exe (fixed [https://twitter.com/Tashkant/status/961645045370818563])\n * devenv.exe leak\n   [https://developercommunity.visualstudio.com/content/problem/197479/devenv-holds-handles-to-servicehubhostnodex86exe-z.html] \n    of ServiceHub.Host.Node.x86.exe (bug filed\n   [https://developercommunity.visualstudio.com/content/problem/197479/devenv-holds-handles-to-servicehubhostnodex86exe-z.html]\n   )\n * IntelCpHeciSvc.exe leaks\n   [https://twitter.com/BruceDawson0xB/status/963118379371454464]  Video.UI.exe\n   for each video played (Intel passes the buck to Lenovo\n   [https://twitter.com/BruceDawson0xB/status/963118379371454464])\n * RuntimeBroker.exe leak of MicrosoftEdge and Video.UI.exe (perhaps related to \n   other bugs in RuntimeBroker.exe\n   [https://twitter.com/marypcbuk/status/964560351638548480])\n * AudioSrv service leak of Video.UI.exe\n * Handle leak in Google internal tool due to old version of psutil\n   [https://github.com/giampaolo/psutil/issues/870]\n * Lenovo’s tphkload.exe leaks one handle, their SUService.exe leaks three\n   handles\n * Synaptic’s SynTPEnh.exe leaks one handle\n * googledrivesync.exe leaks one handle (reported internally)\n\nProcess handles aren’t the only kind that can be leaked. For instance, the\n“Intel(R) Online Connect Access service” (IntelTechnologyAccessService.exe) only\nuses 4 MB of RAM, but after 30 days of uptime had created 27,504 (!!!) handles.\nI diagnosed this leak using just Task Manager and reported it here\n[https://twitter.com/BruceDawson0xB/status/965301833517289472]. I also used the\nawesome !htrace command in windbg to get stacks for the CreateEventW calls from\nIntel’s code [https://twitter.com/BruceDawson0xB/status/970896367475306497].\nThink they’ll fix this?\n\n  [http://randomascii.files.wordpress.com/2018/02/image7.png]\n\nUsing Processs Explorer I could see that NVDisplay.Container.exe from NVIDIA has\n ~5,000 handles [https://twitter.com/BruceDawson0xB/status/962428705954910208] \nto \\BaseNamedObjects\\NvXDSyncStop-61F8EBFF-D414-46A7-90AE-98DD58E4BC99 event,\ncreating a new one about every two minutes? I guess they want to be really  sure\nthat they can stop NvXDSync? Reported\n[https://twitter.com/HairySphere/status/963113789867679744], and a fix has been\nchecked in [https://twitter.com/HairySphere/status/964553497671847936].\n\n  [http://randomascii.files.wordpress.com/2018/02/image8.png]\n\nApparently Corsair Link Service leaks ~15 token handles per second\n[https://twitter.com/kasper_93/status/963132642664296449]. Reported here\n[https://twitter.com/BruceDawson0xB/status/964562328388694016].\n\nApparently Adobe’s Creative Cloud leaks tens of thousands of handles\n[https://news.ycombinator.com/item?id=16359696] – ~6,500 a day? Reported here\n[https://twitter.com/BruceDawson0xB/status/964562328388694016].\n\nApparently Razer Chroma SDK Service leaks a lot of handles\n[https://www.reddit.com/r/programming/comments/7x10z9/zombie_processes_are_eating_your_memory/du54yqa/]\n – 150,000 per hour [https://twitter.com/abyrd89/status/963149836609511424]?\nReported here [https://twitter.com/BruceDawson0xB/status/964563577368494080].\n\nApparently ETDCtrl.exe (11.x), some app associated with ELANTech/Synaptics\ntrackpads, leaks handles to shared memory. The process accumulated about 16,000\nhandles and when the process was killed about 3 GB of missing RAM was returned\nto the system – quite noticeable on an 8 GB laptop with no swap.\n\nApparently nobody has been paying attention to this for a while – hey Microsoft,\nmaybe start watching for handle leaks so that Windows runs better? And Intel and\nNVIDIA? Take a look at your code. I’ll be watching you.\n\nSo, grab FindZombieHandles\n[https://github.com/randomascii/blogstuff/tree/master/FindZombieHandles], run it\non your machine, and report or fix what you find, and use Task Manager and\nProcess Explorer as well.\n\nTwitter announcement is here\n[https://twitter.com/BruceDawson0xB/status/962942762986303488], Hacker News\ndiscussion is here [https://news.ycombinator.com/item?id=16357018], reddit\ndiscussion is here\n[https://www.reddit.com/r/programming/comments/7x10z9/zombie_processes_are_eating_your_memory/]\n.\n\nUpdates: Microsoft recommended disabling the feature that leaks handles\n[https://twitter.com/djammmer/status/964032879561924608]  and doing so has\nresolved the issue for me (and they are fixing the leaks). It’s an expensive\nfeature and it turns out we were ignoring the data anyway! Also, all Windows 10\nPIDs are multiples of four which explains why ~500,000 zombies led to PIDs in\nthe 2,000,000+ range.\n\n\n\nhttp://www.latimes.com/opinion/op-ed/la-oe-dubal-gig-companies-undercut-california-wage-law-20180814-story.html\n\n\n\nhttp://www.righto.com/2018/08/inside-die-of-intels-8087-coprocessor.html\n\n\n\nRecommender Systems: Exploring the Unknown Using Uncertainty\n[https://engineering.taboola.com/recommender-systems-exploring-the-unknown-using-uncertainty/]\n\nNeural Networks from a Bayesian Perspective\n[https://engineering.taboola.com/neural-networks-bayesian-perspective/]","html":"<p></p><figure class=\"kg-card kg-embed-card\"><p>I wasn’t looking for trouble. I wasn’t trying to compile a huge project in the background (<a href=\"http://randomascii.wordpress.com/2017/07/09/24-core-cpu-and-i-cant-move-my-mouse/\">24-core CPU and I can’t move my mouse</a>), I was just engaging in that most mundane of 21st century tasks, writing an email at 10:30 am. And suddenly gmail hung. I kept typing but for several seconds but no characters were appearing on screen. Then, suddenly gmail caught up and I resumed my <em>very important</em> email. Then it happened again, only this time gmail went unresponsive for even longer. Well <a href=\"https://quoteinvestigator.com/2015/03/02/eureka-funny/\">that’s funny</a>…</p>\n<p>I have trouble resisting a good performance mystery but in this case the draw was particularly strong. I work at Google, making Chrome, for Windows, focused on performance. Investigating this hang was actually my <em>job</em>. And after a lot of false starts and some hard work I figured out how Chrome, gmail, Windows, and our IT department were working together to prevent me from typing an email, and in the process I found a way to save a significant amount of memory for some web pages in Chrome.</p>\n<p><!--more-->This investigation had so many rabbit holes that I’m going to save some of the digressions for a follow-on post (<a href=\"https://randomascii.wordpress.com/2018/08/22/24-core-cpu-and-i-cant-type-an-email-part-two/\">which is here</a>) , but this one will entirely explain the hangs.  </p>\n<p>As usual I had <a href=\"https://randomascii.wordpress.com/2015/09/01/xperf-basics-recording-a-trace-the-ultimate-easy-way/\">UIforETW</a> running in the background, tracing to circular buffers, so I just had to type Ctrl+Win+R and the buffers, representing the last thirty seconds or so of system activity, were saved to disk. I loaded it into <a href=\"https://randomascii.wordpress.com/2012/06/19/wpaxperf-trace-analysis-reimagined/\">Windows Performance Analyzer</a> (WPA), but I couldn’t definitively find the hang.</p>\n<p>When a Windows program stops pumping messages there will be ETW events emitted to indicate <a href=\"https://randomascii.wordpress.com/2012/05/05/xperf-wait-analysisfinding-idle-time/\">exactly where this happened</a>, so those types of hangs are trivial to find. But apparently Chrome kept on pumping messages. I looked for a time when one of Chrome’s crucial threads either went into a busy loop or went completely idle, but I couldn’t find anything conclusive. There were some spots where Chrome went <em>mostly</em> idle, but even then all of the key threads kept chugging along, so I couldn’t be sure where the hang was – Chrome might have been going idle because nothing was happening:</p>\n<p><a href=\"http://randomascii.files.wordpress.com/2018/08/image.png\"><img title=\"image\" style=\"background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border-width:0;\" border=\"0\" alt=\"image\" src=\"https://randomascii.files.wordpress.com/2018/08/image_thumb.png?w=624&#038;h=182\" width=\"624\" height=\"182\"></a></p>\n<p><a href=\"http://randomascii.files.wordpress.com/2018/08/image1.png\"><img title=\"image\" style=\"background-image:none;float:right;padding-top:0;padding-left:0;margin:0 0 3px 3px;display:inline;padding-right:0;border-width:0;\" border=\"0\" alt=\"image\" src=\"https://randomascii.files.wordpress.com/2018/08/image_thumb1.png?w=163&#038;h=202\" width=\"163\" align=\"right\" height=\"202\"></a>UIforETW has a built-in key logger which is often useful when identifying key points in a trace. However, for obvious security reasons it defaults to anonymizing the keystrokes, treating every number typed as a ‘1’ and every letter as an ‘A’. This was making it hard to find the exact moment of the hang so I turned the input tracing from “Private” to “Full” and waited for the hang. At around 10:30 the next morning the hang happened again. I saved the trace buffers, and put these notes into UIforETW’s trace information field:</p>\n<blockquote>\n<p>Was typing &#8220;defer to those with more scuba experience&#8221; and gmail hung around the end of &#8220;those&#8221; and then resumed partway through &#8220;experience&#8221;. gmail tab was PID 27368.</p>\n</blockquote>\n<p>Clearly just a normal work-related discussion of <a href=\"https://randomascii.wordpress.com/2017/05/01/commute-challenge-2017/\">commute methods</a>, but the important thing is that now I had a way of locating the hang in the ETW trace. I loaded the trace, looked at the keyboard data in the Generic Events field (the events are emitted by UIforETW itself, each one is a purple diamond in the screen shot below) and suddenly I could see exactly where the hang was, and clearly the dip in CPU usage was 100% correlated:</p>\n<p><a href=\"http://randomascii.files.wordpress.com/2018/08/image2.png\"><img title=\"image\" style=\"background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border-width:0;\" border=\"0\" alt=\"image\" src=\"https://randomascii.files.wordpress.com/2018/08/image_thumb2.png?w=635&#038;h=460\" width=\"635\" height=\"460\"></a></p>\n<p>Okay, but why is Chrome stopping? Here’s some foreshadowing: not shown in these screenshots is that <a href=\"https://docs.microsoft.com/en-us/windows/desktop/wmisdk/wmi-start-page\">WmiPrvSE.exe</a> was consuming an entire CPU hyperthread whenever this happened. But that shouldn’t matter. I have a 24-core/48-thread machine so consuming one hyperthread means my machine is still about 98% idle.</p>\n<p>I then zoomed in to the clearly-significant period where Chrome was idle and looked in particular at CrRendererMain in chrome.exe (27368), the gmail tab process.</p>\n<blockquote>\n<p>Aside: I just want to say thank you to <a href=\"https://randomascii.wordpress.com/2015/10/26/thread-naming-in-windows-time-for-something-better/\">2015 me</a> for asking Microsoft to improve their thread naming mechanisms, and thank you to Microsoft for doing everything I suggested – thread names in WPA are <em>great</em>!</p>\n</blockquote>\n<p>The problem suddenly became clearer. During the 2.81 s hang this thread was scheduled and ran 440 separate times. Normally running every 6 ms is enough to make a program responsive, but for some reason it wasn’t making any progress. I noticed that every time it woke up it was on the same stack. Simplified down it was:</p>\n<blockquote>\n<p>chrome_child.dll (stack base)<br>KernelBase.dll!VirtualAlloc<br>ntoskrnl.exe!MiCommitVadCfgBits<br>ntoskrnl.exe!MiPopulateCfgBitMap<br>ntoskrnl.exe!ExAcquirePushLockExclusiveEx<br>ntoskrnl.exe!KeWaitForSingleObject (stack leaf)</p>\n</blockquote>\n<p>Chrome is calling VirtualAlloc, which tries to update some “CfgBits” and needs to acquire a lock. At first I assumed that Chrome was calling VirtualAlloc 440 times, which seemed like a weird thing to do, but the reality was perhaps weirder. Chrome called VirtualAlloc once and a lock needed to be acquired. Chrome was signaled when that lock was available but – for 439 times in a row – when Chrome woke up and tried to acquire the lock it was unavailable. The lock had been reacquired by the process that had just released it.</p>\n<p>This is because many Windows locks are, by design, <a href=\"http://joeduffyblog.com/2006/12/14/anticonvoy-locks-in-windows-server-2003-sp1-and-windows-vista/\">not fair</a> and if a thread releases a lock and then tries to reacquire it immediately then it can, in cases like this, reacquire it every single time. Starvation. More on this next time.</p>\n<p>The Readying Process – the one that signaled Chrome to go grab the lock &#8211; in <em>every</em> case was WmiPrvSE.exe, releasing the lock on this stack:</p>\n<blockquote>\n<p>ntoskrnl.exe!KiSystemServiceCopyEnd (stack base)<br>ntoskrnl.exe!NtQueryVirtualMemory<br>ntoskrnl.exe!MmQueryVirtualMemory<br>ntoskrnl.exe!MiUnlockAndDereferenceVad<br>ntoskrnl.exe!ExfTryToWakePushLock (stack leaf)</p>\n</blockquote>\n<p>I got distracted by WMI for a while (more on that next time) but eventually I wrote a program to recreate WMI’s behavior. I had CPU sampling data that showed me where WmiPrvSE.exe was spending its time (some edits and simplifications made):</p>\n<blockquote>\n<p>WmiPerfClass.dll!EnumSelectCounterObjects (stack base)<br>WmiPerfClass.dll!ConvertCounterPath<br>pdh.dll!PdhiTranslateCounter<br>pdh.dll!GetSystemPerfData<br>KernelBase.dll!blah-blah-blah<br>advapi32.dll!blah-blah-blah<br>perfproc.dll!blah-blah-blah<br>perfproc.dll!GetProcessVaData<br>ntdll.dll!NtQueryVirtualMemory<br>ntoskrnl.exe!NtQueryVirtualMemory<br>ntoskrnl.exe!MmQueryVirtualMemory<br>ntoskrnl.exe!MiQueryAddressSpan<br>ntoskrnl.exe!MiQueryAddressState<br>ntoskrnl.exe!MiGetNextPageTable (stack leaf)</p>\n</blockquote>\n<p>It turns out that reproducing the slow scanning from the sampling data was quite easy. The interesting part of the call stack above is <em>NtQueryVirtualMemory</em>, which is used to scan process memory, and is called by the suggestively named <em>GetProcessVaData</em>, where <em>Va</em> probably stands for<em> Virtual Address</em>. My VirtualScan program just called <em>NtQueryVirtualMemory</em> in the obvious loop to scan the address space of a specified process, the code worked, it took a really long time to scan the gmail process (10-15 seconds), and it triggered the hang. But why?</p>\n<p>The advantage of writing the scanning loop myself was that I could start generating statistics. <a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/content/ntifs/nf-ntifs-ntqueryvirtualmemory\"><em>NtQueryVirtualMemory</em></a> returns data on each contiguous range of address space that has matching attributes. That might mean all reserved, all committed with particular protection settings, etc. The gmail process had about 26,000 of these blocks but I found another process (<a href=\"https://randomascii.wordpress.com/2012/06/19/wpaxperf-trace-analysis-reimagined/\">WPA</a>, as it turns out) that had 16,000 memory blocks but could be scanned very quickly.</p>\n<p>At some point I looked at the gmail process with <a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/vmmap\">vmmap</a> and noticed that the gmail process had a fair amount of memory (361,836 KiB) and a lot of separate blocks (49,719) coming from a single reservation in the Shareable category – a reservation with a size of 2,147,483,648 KiB, aka 2 TiB. Wot?</p>\n<p><a href=\"http://randomascii.files.wordpress.com/2018/08/image4.png\"><img title=\"image\" style=\"background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border-width:0;\" border=\"0\" alt=\"image\" src=\"https://randomascii.files.wordpress.com/2018/08/image_thumb4.png?w=585&#038;h=225\" width=\"585\" height=\"225\"></a></p>\n<p>I happened to know that the 2 TiB reservation is used for <a href=\"http://www.alex-ionescu.com/?p=246\">Control Flow Guard</a> (CFG), and I remembered that “CFG” showed up on the call stacks where the gmail Chrome process was waiting – <em>MiCommitVadCfgBits</em> was on the stack. Maybe the large number of blocks in the CFG region were the problem!</p>\n<p>Control Flow Guard (CFG) is used to try to stop exploits. Its 2 TiB reservation is a sparse bitmap which indicates which addresses (across 128 TiB of user-mode address space) are valid indirect branch targets. So I modified my virtual memory scanner to count how many blocks were in the CFG region (just look for the 2 TiB reservation) and how many blocks were tagged as executable. Since CFG memory is used to <em>describe</em> executable memory I expected to see one block of CFG memory for each block of executable memory in the process. Instead I saw 98 blocks of executable memory and <em>24,866</em> blocks of committed CFG memory. A significant discrepancy:</p>\n<p><span style=\"font-family:courier new;\">&nbsp;&nbsp;&nbsp;&nbsp; Scan time,&nbsp; Committed, page tables, committed blocks<br>Total: 41.763s, 1457.7 MiB,&nbsp;&nbsp;&nbsp; 67.7 MiB,&nbsp; 32112, 98 code blocks<br>CFG:&nbsp;&nbsp; 41.759s,&nbsp; 353.3 MiB,&nbsp;&nbsp;&nbsp; 59.2 MiB,&nbsp; 24866</span></p>\n<blockquote>\n<p>vmmap shows reservations and commited memory as blocks and my scanning tool only counts committed blocks – that’s why vmmap shows 49,684 blocks where my scanning tool reports 24,866</p>\n</blockquote>\n<p>In hindsight it is obvious, but what if the CFG bitmap never gets cleaned up? What if memory gets allocated in the CFG bitmap when you allocate executable memory, but it doesn’t get freed when you free the executable memory. That would explain this behavior.</p>\n<h2>End-to-end repro</h2>\n<p>The next step was to write a VAllocStress program that allocates and then frees thousands of blocks of executable memory at random addresses. This executable needs to have CFG enabled and needs to be 64-bit and I hit some road blocks because I didn’t really know what I was trying to do but it worked. After allocating and freeing this many blocks of executable memory this program should sit in a loop where it occasionally try to allocate/free more executable memory, and note when this is slow. Here is my basic algorithm for VAllocStress:</p>\n<ol>\n<li>Spin in a loop a lot of times:\n<ol>\n<li>Allocate some executable memory with VirtualAlloc at a random address\n</li><li>Free the memory </li>\n</ol>\n</li><li>Then, spin in an infinite loop:\n<ol>\n<li>Sleep for 500 ms (don’t want to be a CPU hog)\n</li><li>Allocate some executable memory with VirtualAlloc at a fixed location\n</li><li>Print a message if the VirtualAlloc call takes more than ~500 ms\n</li><li>Free the memory </li>\n</ol>\n</li>\n</ol>\n<p>That’s it. It’s super simple. And it was so satisfying when it worked. I ran it and then got my VirtualScan program to scan my VAllocStress process. I quickly got confirmation that the CFG block was horribly fragmented, and the scanning took a <em>long</em> time. And my VAllocStress program hung for the duration of the scan!</p>\n<p>At this point I had simulated the CFG fragmentation, the long scanning times, and the hang. Huzzah!</p>\n<h2>Root-cause</h2>\n<p>It turns out that v8 (Chrome’s JavaScript engine) has CodeRange objects for managing code-gen, and each CodeRange object is constrained to a <a href=\"https://cs.chromium.org/chromium/src/v8/src/globals.h?q=kMaximalCodeRangeSize&amp;dr=CSs&amp;l=182\">128 MiB address range</a>. This should be small enough to avoid the rampant CFG allocation I was seeing.</p>\n<p>But what if you have multiple CodeRange objects, and what if those get allocated at random addresses and then freed? I instrumented the CodeRange constructor, left gmail running, and found the smoking gun. Every couple of minutes another CodeRange object was created (and destroyed). Being in the debugger made it easy to find that WorkerThread::Start was allocating these objects, and suddenly everything makes sense:</p>\n<ol>\n<li>gmail uses <a href=\"https://developers.google.com/web/fundamentals/codelabs/offline/\">service workers</a>, probably for implementing offline mode\n</li><li>These appear and disappear every few minutes because that’s how service workers behave\n</li><li>Each worker thread gets a temporary CodeRange object which allocates some executable pages for JITted JavaScript code from a random location in the 47-bit process address space\n</li><li>The 2 TB CFG memory reservation gets some entries every time new code pages are allocated\n</li><li>The CFG allocations are never freed\n</li><li>NtQueryVirtualMemory is <em>painfully</em> slow when scanning CFG memory (about 1 ms per block) for reasons that I don’t understand </li>\n</ol>\n<p>The slow scanning of CFG memory is actually fixed in Windows 10 RS4 (April 2018 Update), which briefly had me wondering if all of this investigation was pointless. But it’s not.</p>\n<h2>Memory</h2>\n<p>The CFG reservation starts out as just an address reservation – no memory is actually committed. As executable pages are allocated however parts of the CFG reservation are turned into committed memory, using real memory pages. And those pages never get freed. If you keep allocating and freeing randomly located blocks of executable memory then the CFG region will grow arbitrarily large! Well, that’s not quite true. The CFG memory block is best thought of a cache with bounded size. However that is little consolation when the bounded size is <a href=\"https://twitter.com/BruceDawson0xB/status/1029433717670871040\">2 TiB, per-process</a>!</p>\n<p>The worst I’ve seen so far is when my gmail tab had been running for eight days and had accumulated 353.3 MiB of CFG memory, and 59.2 MiB of page-tables to map that memory, for a total waste of about 400 MiB. For some reason most people see either no symptoms or much milder symptoms than I do.<span style=\"font-family:courier new;\"><br></span></p>\n<p>&nbsp;</p>\n<h2>Resolution</h2>\n<p>The v8 (Chrome’s JavaScript engine) team has updated their code so that it <a href=\"https://chromium-review.googlesource.com/c/v8/v8/+/1174837\">reuses addresses for CodeRange objects</a>, which will squish this bug quite nicely. Microsoft already fixed their CFG memory scanning performance problems. Maybe some day Microsoft will free CFG regions when executable memory is freed, at least in the easy cases where large address ranges are freed. And a vmmap bug was reported.</p>\n<p>Most of my coworkers and our customers never noticed this problem. I only noticed it because:</p>\n<ul>\n<li>I had gmail’s offline mode enabled\n</li><li>I was running on an old version of Windows 10\n</li><li>Our IT department was running regular WMI scans of our computers\n</li><li>I was paying attention\n</li><li>I got lucky </li>\n</ul>\n<p>It seems highly improbably that, as one of the most qualified people to diagnose this bug, I was the first to notice it. If any of the factors above had not been true then I would not have experienced this hang and the associated memory waste might never have been found.</p>\n<p>By the way, the reason that the hangs kept happening at 10:30 am is just because that’s when our IT team ran their inventory scans. If you want to trigger a scan manually, you can go to Control Panel | Configuration Manager | Actions | Select &#8216;Hardware Inventory Cycle&#8217; and then Run Now.</p>\n<p><a href=\"http://randomascii.files.wordpress.com/2018/08/clip_image002.png\"><img title=\"clip_image002\" style=\"background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border-width:0;\" border=\"0\" alt=\"clip_image002\" src=\"https://randomascii.files.wordpress.com/2018/08/clip_image002_thumb.png?w=546&#038;h=331\" width=\"546\" height=\"331\"></a></p>\n<h2>Source code</h2>\n<p>If you want to play along at home you can grab the source-code to VAllocStress and VirtualScan from github, <a href=\"https://github.com/randomascii/blogstuff/tree/master/cfg\">here</a>.</p>\n<h2>Rabbit holes</h2>\n<p>This investigation included a <em>lot</em> of rabbit holes. Some were important (page tables), some were instructive (locks), and some were purely a waste of time (WMI details). I’ll talk more about these, and a vmmap bug, in a follow-up post. If you want more gory details – some of which ended up being wrong or irrelevant – you can follow the whole investigation at <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=870054\">crbug.com/870054</a>.</p>\n<p>Hacker news discussion is <a href=\"https://news.ycombinator.com/item?id=17780127\">here</a>.</p>\n<p>Reddit discussion is <a href=\"https://www.reddit.com/r/programming/comments/97zy08/24core_cpu_and_i_cant_type_an_email_part_one/\">here</a>.</p>\n<p>Russian translation is <a href=\"https://habr.com/post/420579/\">here</a>.</p>\n<p>Japanese translation is <a href=\"https://gigazine.net/news/20180825-google-engineer-fix-chrome-hang/\">here</a>.</p>\n</figure><p></p><figure class=\"kg-card kg-embed-card\"><p>Zombies probably won’t consume 32 GB of your memory like they did to me, but zombie processes do exist, and I can help you find them and make sure that developers fix them. Tool source link is at the bottom.</p>\n<p>Is it just me, or do Windows machines that have been up for a while seem to lose memory? After a few weeks of use (or a long weekend of building Chrome over 300 times) I kept noticing that Task Manager showed me running low on memory, but it didn’t show the memory being <em>used</em> by anything. In the example below task manager shows 49.8 GB of RAM in use, plus 4.4 GB of compressed memory, and yet only 5.8 GB of page/non-paged pool, few processes running, and no process using anywhere near enough to explain where the memory had gone:</p>\n<p><a href=\"http://randomascii.files.wordpress.com/2018/02/image3.png\"><img style=\"background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border-width:0;\" title=\"image\" src=\"https://randomascii.files.wordpress.com/2018/02/image_thumb3.png?w=649&#038;h=242\" alt=\"image\" width=\"649\" height=\"242\" border=\"0\"></a></p>\n<p>My machine has 96 GB of RAM – lucky me – and when I don’t have any programs running I think it’s reasonable to hope that I’d have at least half of it available.</p>\n<p><!--more--></p>\n<p>Sometimes I have dealt with this by rebooting but that should never be necessary. The Windows kernel is <a href=\"https://twitter.com/nasko/status/962573875010707457\">robust and well implemented</a> so this memory disappearing shouldn’t happen, and yet…</p>\n<p>The first clue came when I remembered that a <a href=\"https://twitter.com/tiraniddo\">coworker of mine</a> had complained of zombie processes being left behind – processes that had shut down but not been cleaned up by the kernel. He’d even written a tool that would dump a list of zombie processes – their names and counts. His original complaint was of hundreds of zombies. I ran his tool and it showed 506,000 zombie processes!</p>\n<p>It occurred to me that one cause of zombie processes could be one process failing to close the handles to other processes. And the great thing about having a huge number of zombies is that they are harder to hide. So, I went to Task Manager’s Details tab, added the Handles column, and sorted by it. Voila. I immediately saw that CcmExec.exe (part of Microsoft’s <a href=\"https://blogs.msdn.microsoft.com/jonathanh/2004/05/27/ccmexec-exe-and-inventory-exe-what-are-they-and-what-do-they-do/\">System Management Server</a>) had 508,000 handles open, which is both a <em>lot</em>  and also amazingly close to my zombie count.</p>\n<p><a href=\"http://randomascii.files.wordpress.com/2018/02/image4.png\"><img style=\"background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border-width:0;\" title=\"image\" src=\"https://randomascii.files.wordpress.com/2018/02/image_thumb4.png?w=568&#038;h=212\" alt=\"image\" width=\"568\" height=\"212\" border=\"0\"></a></p>\n<p>I held my breath and killed CcmExec.exe, unsure of what would happen:</p>\n<p><img data-attachment-id=\"2732\" data-permalink=\"https://randomascii.wordpress.com/2018/02/11/zombie-processes-are-eating-your-memory/performance-tab-after-cropped/\" data-orig-file=\"https://randomascii.files.wordpress.com/2018/02/performance-tab-after-cropped.png?w=402&#038;h=447\" data-orig-size=\"402,447\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"Performance Tab after cropped\" data-image-description=\"\" data-medium-file=\"https://randomascii.files.wordpress.com/2018/02/performance-tab-after-cropped.png?w=402&#038;h=447?w=270\" data-large-file=\"https://randomascii.files.wordpress.com/2018/02/performance-tab-after-cropped.png?w=402&#038;h=447?w=402\" class=\"alignnone size-full wp-image-2732\" src=\"https://randomascii.files.wordpress.com/2018/02/performance-tab-after-cropped.png?w=402&#038;h=447\" alt=\"Performance Tab after cropped\" width=\"402\" height=\"447\" srcset=\"https://randomascii.files.wordpress.com/2018/02/performance-tab-after-cropped.png 402w, https://randomascii.files.wordpress.com/2018/02/performance-tab-after-cropped.png?w=135&amp;h=150 135w, https://randomascii.files.wordpress.com/2018/02/performance-tab-after-cropped.png?w=270&amp;h=300 270w\" sizes=\"(max-width: 402px) 100vw, 402px\"></p>\n<p>The results were as dramatic as I could imagine. As I said earlier, the Windows kernel is well written and when a process is killed then all of its resources are freed. So, those 508,000 handles that were owned by CcmExec.exe were abruptly closed and my available memory went up by 32 GB! Mystery solved!</p>\n<h2>What <em>is</em> a zombie process?</h2>\n<p>Until this point we weren’t entirely sure what was causing these processes to hang around. In hindsight it’s obvious that these zombies were caused by a trivial user-space coding bug. The rule is that when you create a process you need to call <em>CloseHandle</em> on its process handle and its thread handle. If you don’t care about the process then you should close the handles immediately. If you do care – if you want to wait for the process to quit – <em>WaitForSingleObject(hProcess, INFINITE);</em> – or query its exit code – <em>GetExitCodeProcess(hProcess, &amp;exitCode);</em> – then you need to remember to close the handles after that. Similarly, if you open an existing process with <em>OpenProcess</em> you need to close that handle when you are done.</p>\n<p>If the process that holds on to the handles is a system process then it will even continue holding those handles after you log out and log back in – another source of confusion during our investigation last year.</p>\n<p>So, a zombie process is a process that has shut down but is kept around because some other still-running process holds a handle to it. It’s okay for a process to do this briefly, but it is bad form to leave a handle unclosed for long.</p>\n<h2>Where is that memory going?</h2>\n<p>Another thing I’d done during the investigation was to run <a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/rammap\">RamMap</a>. This tool attempts to account for every page of memory in use. Its Process Memory tab had shown hundreds of thousands of processes that were each using 32 KB of RAM and presumably those were the zombies. But ~500,000 times 32 KB only equals ~16 GB – where did the rest of the freed up memory come from? Comparing the before and after Use Counts pages in RamMap explained it:</p>\n<p><a href=\"http://randomascii.files.wordpress.com/2018/02/image5.png\"><img style=\"background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border-width:0;\" title=\"image\" src=\"https://randomascii.files.wordpress.com/2018/02/image_thumb5.png?w=716&#038;h=498\" alt=\"image\" width=\"716\" height=\"498\" border=\"0\"></a></p>\n<p>We can plainly see the ~16 GB drop in Process Private memory. We can also see a 16 GB drop in Page Table memory. Apparently a zombie process consumes ~32 KB of page tables, in addition to its ~32 KB of process private memory, for a total cost of ~64 KB. I don’t know why zombie processes consume that much RAM, but it’s probably because there should never be enough of them for that to matter.</p>\n<p>A few types of memory actually <em>increased</em> after killing CcmExec.exe, mostly Mapped File and Metafile. I don’t know what that means but my guess would be that that indicates more data being cached, which would be a good thing. I don’t necessarily want memory to be unused, but I do want it to be available.</p>\n<blockquote><p>Trivia: rammap opens all processes, including zombies, so it needs to be closed before zombies will go away</p></blockquote>\n<p>I tweeted about my discovery and the investigation was picked up by <a href=\"https://twitter.com/WithinRafael\">another software developer</a> and they reproed the bug using my <a href=\"https://github.com/randomascii/blogstuff/tree/master/ProcessCreateTests\">ProcessCreateTests</a> tool. They also passed the information to a developer at Microsoft who said it was a known issue that “<a href=\"https://twitter.com/djammmer/status/961727396423516160\">happens when many processes are opened and closed very quickly</a>”.</p>\n<p>Windows has a reputation for not handling process creation as well as Linux and this investigation, and <a href=\"https://randomascii.wordpress.com/2017/07/09/24-core-cpu-and-i-cant-move-my-mouse/\">one of my previous ones</a>, suggest that that reputation is well earned. I hope that Microsoft fixes this bug – it’s sloppy.</p>\n<h2>Why do I hit so many crazy problems?</h2>\n<p>I work on the Windows version of Chrome, and one of my tasks is optimizing its build system, which requires doing a lot of test builds. Building chrome involves creating between 28,000 and 37,000 processes, depending on build settings. When using our distributed build system (<a href=\"https://groups.google.com/a/chromium.org/forum/#!msg/chromium-dev/q7hSGr_JNzg/p44IkGhDDgAJ\">goma</a>) these processes are created and destroyed very quickly – my fastest full build ever took about 200 seconds. This aggressive process creation has revealed a number of interesting bugs, mostly in Windows or its components:</p>\n<ul>\n<li>Fast process destruction led to <a href=\"https://randomascii.wordpress.com/2017/07/09/24-core-cpu-and-i-cant-move-my-mouse/\">system input hangs</a></li>\n<li>Synaptics driver <a href=\"https://randomascii.wordpress.com/2017/09/05/hey-synaptics-can-you-please-stop-polling/\">leaked memory</a> whenever a process was created</li>\n<li><a href=\"https://twitter.com/BruceDawson0xB/status/962562314456072193\">O(n^2) log-file creation</a> in App Verifier – my next blog post?</li>\n<li>A <a href=\"https://twitter.com/BruceDawson0xB/status/958517353435680768\">Windows kernel file buffer bug</a> from Server 2008 R2 to Windows 10</li>\n<li>Windows Defender delaying each goma compiler launch by 250 ms</li>\n</ul>\n<h2>What now?</h2>\n<p>If you aren’t on a corporate managed machine then you probably don’t run CcmExec.exe and you will avoid this particular bug. And if you don’t build Chrome or something equivalent then you will probably avoid this bug. But!</p>\n<p>CcmExec is not the only program that leaks process handles. I have found many others leaking modest numbers of handles and there are certainly more.</p>\n<p>The bitter reality, as all experienced programmers know, is that <a href=\"https://twitter.com/BruceDawson0xB/status/962593405581762565\">any mistake that is not explicitly prevented will be made</a>. Simply writing “This handle must be closed” in the documentation is insufficient. So, here is my contribution towards making this something detectable, and therefore preventable. <a href=\"https://github.com/randomascii/blogstuff/tree/master/FindZombieHandles\">FindZombieHandles</a> is a tool, based on <a href=\"https://www.nuget.org/packages/NtApiDotNet/\">NtApiDotNet</a> and sample code from <a href=\"mailto:t@tiraniddo\">@tiraniddo</a>, that prints a list of zombies and who is keeping them alive. Here is sample output from my home laptop:</p>\n<blockquote><p><span style=\"font-family:'Courier New';\">274 total zombie processes.<br>\n249 zombies held by IntelCpHeciSvc.exe(9428)<br>\n249 zombies of Video.UI.exe<br>\n14 zombies held by RuntimeBroker.exe(10784)<br>\n11 zombies of MicrosoftEdgeCP.exe<br>\n3 zombies of MicrosoftEdge.exe<br>\n8 zombies held by svchost.exe(8012)<br>\n4 zombies of ServiceHub.IdentityHost.exe<br>\n2 zombies of cmd.exe<br>\n2 zombies of vs_installerservice.exe<br>\n3 zombies held by explorer.exe(7908)<br>\n3 zombies of MicrosoftEdge.exe<br>\n1 zombie held by devenv.exe(24284)<br>\n1 zombie of MSBuild.exe<br>\n1 zombie held by SynTPEnh.exe(10220)<br>\n1 zombie of SynTPEnh.exe<br>\n1 zombie held by tphkload.exe(5068)<br>\n1 zombie of tpnumlkd.exe<br>\n1 zombie held by svchost.exe(1872)<br>\n1 zombie of userinit.exe</span></p></blockquote>\n<p>274 zombies isn’t too bad, but it represents some bugs that should be fixed. The IntelCpHeciSvc.exe one is the worst, as it seems to leak a process handle every time I play a video from Windows Explorer.</p>\n<p>Visual Studio leaks handles to at least two processes and one of these is easy to reproduce. Just fire off a build and wait ~15 minutes for MSBuild.exe to go away. Or, if you “set MSBUILDDISABLENODEREUSE=1” then MSBuild.exe goes away immediately and every build leaks a process handle. Unfortunately some <em>jerk</em> at Microsoft <a href=\"https://twitter.com/Tashkant/status/961645045370818563\">fixed this bug</a> the moment I reported it, and the fix may ship in VS 15.6, so you’ll have to act quickly to see this (and no, I don’t really think he’s a jerk).</p>\n<p>You can also see leaked processes using <a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/process-explorer\">Process Explorer</a>, by configuring the lower pane to show handles, as shown here (note that both the process <em>and</em> thread handles are leaked in this case):</p>\n<p><a href=\"http://randomascii.files.wordpress.com/2018/02/image6.png\"><img style=\"background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border-width:0;\" title=\"image\" src=\"https://randomascii.files.wordpress.com/2018/02/image_thumb6.png?w=302&#038;h=289\" alt=\"image\" width=\"302\" height=\"289\" border=\"0\"></a></p>\n<h2>Just a few of the bugs found, not all reported</h2>\n<ul>\n<li><a href=\"https://twitter.com/djammmer/status/961727396423516160\">CcmExec.exe leak</a>, over 500,000 zombies leaked (<a href=\"https://twitter.com/djammmer/status/964031700845019137\">fixes in progress</a>)</li>\n<li>Program Compatibility Assistant Service <a href=\"https://twitter.com/BruceDawson0xB/status/963476981273604096\">leaks random processes</a> (<a href=\"https://twitter.com/appcompatguy/status/963837005795942401\">being investigated</a>)</li>\n<li><a href=\"https://twitter.com/Tashkant/status/961645045370818563\">devenv.exe leak</a> of MSBuild.exe (<a href=\"https://twitter.com/Tashkant/status/961645045370818563\">fixed</a>)</li>\n<li><a href=\"https://developercommunity.visualstudio.com/content/problem/197479/devenv-holds-handles-to-servicehubhostnodex86exe-z.html\">devenv.exe leak</a> of ServiceHub.Host.Node.x86.exe (<a href=\"https://developercommunity.visualstudio.com/content/problem/197479/devenv-holds-handles-to-servicehubhostnodex86exe-z.html\">bug filed</a>)</li>\n<li><a href=\"https://twitter.com/BruceDawson0xB/status/963118379371454464\">IntelCpHeciSvc.exe leaks</a> Video.UI.exe for each video played (<a href=\"https://twitter.com/BruceDawson0xB/status/963118379371454464\">Intel passes the buck to Lenovo</a>)</li>\n<li>RuntimeBroker.exe leak of MicrosoftEdge and Video.UI.exe (perhaps related to <a href=\"https://twitter.com/marypcbuk/status/964560351638548480\">other bugs in RuntimeBroker.exe</a>)</li>\n<li>AudioSrv service leak of Video.UI.exe</li>\n<li>Handle leak in Google internal tool due to old version of <a href=\"https://github.com/giampaolo/psutil/issues/870\">psutil</a></li>\n<li>Lenovo’s tphkload.exe leaks one handle, their SUService.exe leaks three handles</li>\n<li>Synaptic’s SynTPEnh.exe leaks one handle</li>\n<li>googledrivesync.exe leaks one handle (reported internally)</li>\n</ul>\n<p>Process handles aren’t the only kind that can be leaked. For instance, the “Intel(R) Online Connect Access service” (IntelTechnologyAccessService.exe) only uses 4 MB of RAM, but after 30 days of uptime had created 27,504 (!!!) handles. I diagnosed this leak using just Task Manager and <a href=\"https://twitter.com/BruceDawson0xB/status/965301833517289472\">reported it here</a>. I also used the awesome !htrace command in windbg to <a href=\"https://twitter.com/BruceDawson0xB/status/970896367475306497\">get stacks for the CreateEventW calls from Intel&#8217;s code</a>. Think they&#8217;ll fix this?</p>\n<p><a href=\"http://randomascii.files.wordpress.com/2018/02/image7.png\"><img style=\"background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border-width:0;\" title=\"image\" src=\"https://randomascii.files.wordpress.com/2018/02/image_thumb7.png?w=782&#038;h=135\" alt=\"image\" width=\"782\" height=\"135\" border=\"0\"></a></p>\n<p>Using Processs Explorer I could see that NVDisplay.Container.exe from NVIDIA has <a href=\"https://twitter.com/BruceDawson0xB/status/962428705954910208\">~5,000 handles</a> to \\BaseNamedObjects\\NvXDSyncStop-61F8EBFF-D414-46A7-90AE-98DD58E4BC99 event, creating a new one about every two minutes? I guess they want to be <em>really</em> sure that they can stop NvXDSync? <a href=\"https://twitter.com/HairySphere/status/963113789867679744\">Reported</a>, and <a href=\"https://twitter.com/HairySphere/status/964553497671847936\">a fix has been checked in</a>.</p>\n<p><a href=\"http://randomascii.files.wordpress.com/2018/02/image8.png\"><img style=\"background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border:0;\" title=\"image\" src=\"https://randomascii.files.wordpress.com/2018/02/image_thumb8.png?w=503&#038;h=287\" alt=\"image\" width=\"503\" height=\"287\" border=\"0\"></a></p>\n<p>Apparently Corsair Link Service leaks <a href=\"https://twitter.com/kasper_93/status/963132642664296449\">~15 token handles per second</a>. Reported <a href=\"https://twitter.com/BruceDawson0xB/status/964562328388694016\">here</a>.</p>\n<p>Apparently Adobe&#8217;s Creative Cloud <a href=\"https://news.ycombinator.com/item?id=16359696\">leaks tens of thousands of handles</a> &#8211; ~6,500 a day? Reported <a href=\"https://twitter.com/BruceDawson0xB/status/964562328388694016\">here</a>.</p>\n<p>Apparently Razer Chroma SDK Service <a href=\"https://www.reddit.com/r/programming/comments/7x10z9/zombie_processes_are_eating_your_memory/du54yqa/\">leaks a lot of handles</a> &#8211; <a href=\"https://twitter.com/abyrd89/status/963149836609511424\">150,000 per hour</a>? Reported <a href=\"https://twitter.com/BruceDawson0xB/status/964563577368494080\">here</a>.</p>\n<p>Apparently ETDCtrl.exe (11.x), some app associated with ELANTech/Synaptics trackpads, leaks handles to shared memory. The process accumulated about 16,000 handles and when the process was killed about 3 GB of missing RAM was returned to the system &#8211; quite noticeable on an 8 GB laptop with no swap.</p>\n<p>Apparently nobody has been paying attention to this for a while – hey Microsoft, maybe start watching for handle leaks so that Windows runs better? And Intel and NVIDIA? Take a look at your code. I’ll be watching you.</p>\n<p>So, grab <a href=\"https://github.com/randomascii/blogstuff/tree/master/FindZombieHandles\">FindZombieHandles</a>, run it on your machine, and report or fix what you find, and use Task Manager and Process Explorer as well.</p>\n<p>Twitter announcement is <a href=\"https://twitter.com/BruceDawson0xB/status/962942762986303488\">here</a>, Hacker News discussion is <a href=\"https://news.ycombinator.com/item?id=16357018\">here</a>, reddit discussion is <a href=\"https://www.reddit.com/r/programming/comments/7x10z9/zombie_processes_are_eating_your_memory/\">here</a>.</p>\n<p>Updates: Microsoft <a href=\"https://twitter.com/djammmer/status/964032879561924608\">recommended disabling the feature that leaks handles</a> and doing so has resolved the issue for me (and they are fixing the leaks). It&#8217;s an expensive feature and it turns out we were ignoring the data anyway! Also, all Windows 10 PIDs are multiples of four which explains why ~500,000 zombies led to PIDs in the 2,000,000+ range.</p>\n</figure><p></p><p><a href=\"http://www.latimes.com/opinion/op-ed/la-oe-dubal-gig-companies-undercut-california-wage-law-20180814-story.html\">http://www.latimes.com/opinion/op-ed/la-oe-dubal-gig-companies-undercut-california-wage-law-20180814-story.html</a></p><p></p><p><a href=\"http://www.righto.com/2018/08/inside-die-of-intels-8087-coprocessor.html\">http://www.righto.com/2018/08/inside-die-of-intels-8087-coprocessor.html</a></p><p></p><figure class=\"kg-card kg-embed-card\"><blockquote class=\"wp-embedded-content\"><a href=\"https://engineering.taboola.com/recommender-systems-exploring-the-unknown-using-uncertainty/\">Recommender Systems: Exploring the Unknown Using Uncertainty</a></blockquote>\n<script type=\"text/javascript\">\n<!--//--><![CDATA[//><!--\n\t\t!function(a,b){\"use strict\";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf(\"MSIE 10\"),h=!!navigator.userAgent.match(/Trident.*rv:11\\./),i=b.querySelectorAll(\"iframe.wp-embedded-content\");for(c=0;c<i.length;c++){if(d=i[c],!d.getAttribute(\"data-secret\"))f=Math.random().toString(36).substr(2,10),d.src+=\"#?secret=\"+f,d.setAttribute(\"data-secret\",f);if(g||h)a=d.cloneNode(!0),a.removeAttribute(\"security\"),d.parentNode.replaceChild(a,d)}}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret=\"'+d.secret+'\"]'),k=b.querySelectorAll('blockquote[data-secret=\"'+d.secret+'\"]');for(e=0;e<k.length;e++)k[e].style.display=\"none\";for(e=0;e<j.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.removeAttribute(\"style\"),\"height\"===d.message){if(g=parseInt(d.value,10),g>1e3)g=1e3;else if(~~g<200)g=200;f.height=g}if(\"link\"===d.message)if(h=b.createElement(\"a\"),i=b.createElement(\"a\"),h.href=f.getAttribute(\"src\"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener(\"message\",a.wp.receiveEmbedMessage,!1),b.addEventListener(\"DOMContentLoaded\",c,!1),a.addEventListener(\"load\",c,!1)}(window,document);\n//--><!]]>\n</script><iframe sandbox=\"allow-scripts\" security=\"restricted\" src=\"https://engineering.taboola.com/recommender-systems-exploring-the-unknown-using-uncertainty/embed/\" width=\"600\" height=\"338\" title=\"&#8220;Recommender Systems: Exploring the Unknown Using Uncertainty&#8221; &#8212; Taboola Tech Blog\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" class=\"wp-embedded-content\"></iframe></figure><p></p><figure class=\"kg-card kg-embed-card\"><blockquote class=\"wp-embedded-content\"><a href=\"https://engineering.taboola.com/neural-networks-bayesian-perspective/\">Neural Networks from a Bayesian Perspective</a></blockquote>\n<script type=\"text/javascript\">\n<!--//--><![CDATA[//><!--\n\t\t!function(a,b){\"use strict\";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf(\"MSIE 10\"),h=!!navigator.userAgent.match(/Trident.*rv:11\\./),i=b.querySelectorAll(\"iframe.wp-embedded-content\");for(c=0;c<i.length;c++){if(d=i[c],!d.getAttribute(\"data-secret\"))f=Math.random().toString(36).substr(2,10),d.src+=\"#?secret=\"+f,d.setAttribute(\"data-secret\",f);if(g||h)a=d.cloneNode(!0),a.removeAttribute(\"security\"),d.parentNode.replaceChild(a,d)}}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret=\"'+d.secret+'\"]'),k=b.querySelectorAll('blockquote[data-secret=\"'+d.secret+'\"]');for(e=0;e<k.length;e++)k[e].style.display=\"none\";for(e=0;e<j.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.removeAttribute(\"style\"),\"height\"===d.message){if(g=parseInt(d.value,10),g>1e3)g=1e3;else if(~~g<200)g=200;f.height=g}if(\"link\"===d.message)if(h=b.createElement(\"a\"),i=b.createElement(\"a\"),h.href=f.getAttribute(\"src\"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener(\"message\",a.wp.receiveEmbedMessage,!1),b.addEventListener(\"DOMContentLoaded\",c,!1),a.addEventListener(\"load\",c,!1)}(window,document);\n//--><!]]>\n</script><iframe sandbox=\"allow-scripts\" security=\"restricted\" src=\"https://engineering.taboola.com/neural-networks-bayesian-perspective/embed/\" width=\"600\" height=\"338\" title=\"&#8220;Neural Networks from a Bayesian Perspective&#8221; &#8212; Taboola Tech Blog\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" class=\"wp-embedded-content\"></iframe></figure><p></p><figure class=\"kg-card kg-embed-card\"><iframe id=\"talk_frame_349129\" src=\"//speakerdeck.com/player/9e93f99e73cd4b0884ebbc4a4cdd789e\" width=\"710\" height=\"532\" style=\"border:0; padding:0; margin:0; background:transparent;\" frameborder=\"0\" allowtransparency=\"true\" allowfullscreen=\"allowfullscreen\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n</figure>","url":"https://hackersandslackers.com/lynx-roundup-september-10th/","uuid":"ac803aa5-39f6-44f0-b6f5-66e6d7907b93","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b9032611fc1fc7d92b5c4e9"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736f4","title":"Lynx Roundup, September 9th","slug":"lynx-roundup-september-9th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/83@2x.jpg","excerpt":"Healthchecks in Distributed Systems!  Optical electronics!  Benchmarking Serverless vs Elixir!","custom_excerpt":"Healthchecks in Distributed Systems!  Optical electronics!  Benchmarking Serverless vs Elixir!","created_at_pretty":"05 September, 2018","published_at_pretty":"09 September, 2018","updated_at_pretty":"09 September, 2018","created_at":"2018-09-05T15:40:59.000-04:00","published_at":"2018-09-09T07:00:00.000-04:00","updated_at":"2018-09-09T07:00:00.000-04:00","meta_title":"Healthchecks in Distributed Systems!  Optical electronics!  Benchmarking Serverless vs Elixir! | Hackers And Slackers","meta_description":"Healthchecks in Distributed Systems!  Optical electronics!  Benchmarking Serverless vs Elixir!","og_description":"Healthchecks in Distributed Systems!  Optical electronics!  Benchmarking Serverless vs Elixir!","og_image":"https://hackersandslackers.com/content/images/lynx/83@2x.jpg","og_title":"Lynx Roundup, September 9th","twitter_description":"Healthchecks in Distributed Systems!  Optical electronics!  Benchmarking Serverless vs Elixir!","twitter_image":"https://hackersandslackers.com/content/images/lynx/83@2x.jpg","twitter_title":"Lynx Roundup, September 9th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://functional.works-hub.com/learn/functor-applicative-and-why-3c5b3\n\n\n\nhttps://pudding.cool/2018/08/pockets/\n\n\n\nhttps://medium.com/@TeamCoworker/a-simple-guide-to-talking-about-workplace-issues-with-your-coworkers-1b0ce08c3a8a\n\n\n\nhttps://medium.com/coryodaniel/from-erverless-to-elixir-48752db4d7bc\n\n\n\nhttps://medium.com/@copyconstruct/health-checks-in-distributed-systems-aa8a0e8c1672\n\n\n\nhttp://www.aalto.fi/en/current/news/2018-07-30/\n\n\n\nIn my 30+ year programming career, every single, bizarrely obscure bug that took\nweeks to chase down has ended up being a one-line fix.\n\n— Josh Susser (@joshsusser) August 14, 2018\n[https://twitter.com/joshsusser/status/1029480886033506304?ref_src=twsrc%5Etfw]","html":"<p></p><p><a href=\"https://functional.works-hub.com/learn/functor-applicative-and-why-3c5b3\">https://functional.works-hub.com/learn/functor-applicative-and-why-3c5b3</a></p><p></p><p><a href=\"https://pudding.cool/2018/08/pockets/\">https://pudding.cool/2018/08/pockets/</a></p><p></p><p><a href=\"https://medium.com/@TeamCoworker/a-simple-guide-to-talking-about-workplace-issues-with-your-coworkers-1b0ce08c3a8a\">https://medium.com/@TeamCoworker/a-simple-guide-to-talking-about-workplace-issues-with-your-coworkers-1b0ce08c3a8a</a></p><p></p><p><a href=\"https://medium.com/coryodaniel/from-erverless-to-elixir-48752db4d7bc\">https://medium.com/coryodaniel/from-erverless-to-elixir-48752db4d7bc</a></p><p></p><p><a href=\"https://medium.com/@copyconstruct/health-checks-in-distributed-systems-aa8a0e8c1672\">https://medium.com/@copyconstruct/health-checks-in-distributed-systems-aa8a0e8c1672</a></p><p></p><p><a href=\"http://www.aalto.fi/en/current/news/2018-07-30/\">http://www.aalto.fi/en/current/news/2018-07-30/</a></p><p></p><figure class=\"kg-card kg-embed-card\"><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">In my 30+ year programming career, every single, bizarrely obscure bug that took weeks to chase down has ended up being a one-line fix.</p>&mdash; Josh Susser (@joshsusser) <a href=\"https://twitter.com/joshsusser/status/1029480886033506304?ref_src=twsrc%5Etfw\">August 14, 2018</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</figure>","url":"https://hackersandslackers.com/lynx-roundup-september-9th/","uuid":"92943027-0547-4ea7-b3fc-1bd90323c955","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b90314b1fc1fc7d92b5c4e4"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736f3","title":"Lynx Roundup, September 8th","slug":"lynx-roundup-september-8th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx70@2x.jpg","excerpt":"Molecular clocks!  A good Scala tutorial!  Math for Machine Learning!","custom_excerpt":"Molecular clocks!  A good Scala tutorial!  Math for Machine Learning!","created_at_pretty":"05 September, 2018","published_at_pretty":"08 September, 2018","updated_at_pretty":"08 September, 2018","created_at":"2018-09-05T15:37:43.000-04:00","published_at":"2018-09-08T07:00:00.000-04:00","updated_at":"2018-09-08T07:00:00.000-04:00","meta_title":"Molecular clocks!  A good Scala tutorial!  Math for Machine Learning! | Hackers And Slackers","meta_description":"Molecular clocks!  A good Scala tutorial!  Math for Machine Learning!","og_description":"Molecular clocks!  A good Scala tutorial!  Math for Machine Learning!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx70@2x.jpg","og_title":"Lynx Roundup, September 8th","twitter_description":"Molecular clocks!  A good Scala tutorial!  Math for Machine Learning!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx70@2x.jpg","twitter_title":"Lynx Roundup, September 8th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"Open science essentials in 2 minutes, part 4\n\nBefore a research article is published in a journal you can make it freely\navailable for anyone to read. You could do this on your own website, but you can\nalso do it on a preprint server, such as psyarxiv.com [http://psyarxiv.com/],\nwhere other researchers also share their preprints, which is supported by the \nOSF\n[https://mindhacks.com/2017/11/09/open-science-essentials-the-open-science-framework/] \n so will be around for a while, and which allows you to find others’ research\neasily.\n\nPreprint servers have been used for decades in physics, but are now becoming\nmore common across academia. Preprints allow rapid dissemination of your\nresearch, which is especially important for early career researchers. Preprints\ncan be cited and indexing services like Google Scholar will join your preprint\ncitations with the record of your eventual journal publication.\n\nPreprints also mean that work can be reviewed (and errors-caught) before final\npublication.\n\nWhat happens when my paper is published?\n\nYour work is still available in preprint form, which means that there is a\nnon-paywalled version and so more people will read and cite it. If you upload a\nversion of the manuscript after it has been accepted for publication that is\ncalled a post-print.\n\nWhat about copyright?\n\nMostly journals own the formatted, typeset version of your published manuscript.\nThis is why you often aren’t allowed to upload the PDF of this to your own\nwebsite or a preprint server, but there’s nothing stopping you uploading a\nversion with the same text (so the formatting will be different, but the\ninformation is the same).\n\nWill journals refuse my paper if it is already “published” via a preprint?\n\nMost journals\n[https://en.wikipedia.org/wiki/List_of_academic_journals_by_preprint_policy] \nallow, or even encourage preprints. A diminishing minority don’t. If you’re\ninterested you can search for specific journal policies here\n[http://www.sherpa.ac.uk/romeo/index.php].\n\nWill I get scooped?\n\nPreprints allow you to timestamp your work before publication, so they can act\nto establish priority on a findings which is protection against being scooped.\nOf course, if you have a project where you don’t want to let anyone know you are\nworking in that area until you’re published, preprints may not be suitable.\n\nWhen should I upload a preprint?\n\nUpload a preprint at the point of submission to a journal, and for each further\nsubmission and upon acceptance (making it a postprint).\n\nWhat’s to stop people uploading rubbish to a preprint server?\n\nThere’s nothing to stop this, but since your reputation for doing quality work\nis one of the most important things a scholar has I don’t recommend it.\n\nUseful links:\n\n * psyarxiv [http://psyarxiv.com/]  – preprint server for psychology\n * List of academic journals by preprint policy\n   [https://en.wikipedia.org/wiki/List_of_academic_journals_by_preprint_policy] \n   (Wikipedia)\n * Search publishers policies on preprints by journal name at ShERPA/RoMEO\n   [http://www.sherpa.ac.uk/romeo/index.php]\n * The preprint dilemma [http://science.sciencemag.org/content/357/6358/1344] \n   (Jocelyn Kaiser in Science, 2017).\n * ASAPbio Preprint FAQ [http://asapbio.org/preprint-info/preprint-faq]\n * Bourne et al (2016) Ten simple rules for considering preprints\n   [https://peerj.com/preprints/2669v1/]\n\nPart of a series:\n\n 1. Pre-registration\n    [https://mindhacks.com/2017/11/09/open-science-essentials-pre-registration/]\n 2. The Open Science Framework\n    [https://mindhacks.com/2017/11/09/open-science-essentials-the-open-science-framework/]\n 3. Reproducibility\n    [https://mindhacks.com/2018/01/02/open-science-essentials-reproducibility/]\n\n\n\nhttps://www.workplacefairness.org/independent-contractors\n\n\n\nhttps://www.electronicdesign.com/analog/can-t-afford-atomic-clock-get-molecular-one\n\n\n\nhttps://medium.com/@durga.spirit/learning-scala-from-0-60-part-i-dc095d274b78\n\n\n\nhttps://medium.com/technomancy/the-math-required-for-machine-learning-af0d90db3903\n\n\n\nhttps://medium.com/walmartlabs/how-we-build-a-robust-analytics-platform-using-spark-kafka-and-cassandra-lambda-architecture-70c2d1bc8981\n\n\n\nhttps://www.brianlikespostgres.com/cost-of-a-join.html","html":"<p></p><figure class=\"kg-card kg-embed-card\"><p><i>Open science essentials in 2 minutes, part 4</i></p>\n<p>Before a research article is published in a journal you can make it freely available for anyone to read. You could do this on your own website, but you can also do it on a preprint server, such as <a href=\"http://psyarxiv.com/\">psyarxiv.com</a>, where other researchers also share their preprints, which is supported by the <a href=\"https://mindhacks.com/2017/11/09/open-science-essentials-the-open-science-framework/\">OSF</a> so will be around for a while, and which allows you to find others&#8217; research easily.</p>\n<p>Preprint servers have been used for decades in physics, but are now becoming more common across academia. Preprints allow rapid dissemination of your research, which is especially important for early career researchers. Preprints can be cited and indexing services like Google Scholar will join your preprint citations with the record of your eventual journal publication.</p>\n<p>Preprints also mean that work can be reviewed (and errors-caught) before final publication.</p>\n<p><b>What happens when my paper is published?</b></p>\n<p>Your work is still available in preprint form, which means that there is a non-paywalled version and so more people will read and cite it. If you upload a version of the manuscript after it has been accepted for publication that is called a post-print.</p>\n<p><b>What about copyright?</b></p>\n<p>Mostly journals own the formatted, typeset version of your published manuscript. This is why you often aren&#8217;t allowed to upload the PDF of this to your own website or a preprint server, but there&#8217;s nothing stopping you uploading a version with the same text (so the formatting will be different, but the information is the same).</p>\n<p><b>Will journals refuse my paper if it is already &#8220;published&#8221; via a preprint?</b></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_academic_journals_by_preprint_policy\">Most journals</a> allow, or even encourage preprints. A diminishing minority don&#8217;t. If you&#8217;re interested you can search for specific journal policies <a href=\"http://www.sherpa.ac.uk/romeo/index.php\">here</a>.</p>\n<p><b>Will I get scooped?</b></p>\n<p>Preprints allow you to timestamp your work before publication, so they can act to establish priority on a findings which is protection against being scooped. Of course, if you have a project where you don&#8217;t want to let anyone know you are working in that area until you&#8217;re published, preprints may not be suitable.</p>\n<p><b>When should I upload a preprint?</b></p>\n<p>Upload a preprint at the point of submission to a journal, and for each further submission and upon acceptance (making it a postprint).</p>\n<p><b>What&#8217;s to stop people uploading rubbish to a preprint server?</b></p>\n<p>There&#8217;s nothing to stop this, but since your reputation for doing quality work is one of the most important things a scholar has I don&#8217;t recommend it.</p>\n<p>Useful links:</p>\n<ul>\n<li><a href=\"http://psyarxiv.com/\">psyarxiv</a> &#8211; preprint server for psychology</li>\n<li><a href=\"https://en.wikipedia.org/wiki/List_of_academic_journals_by_preprint_policy\">List of academic journals by preprint policy</a> (Wikipedia)</li>\n<li>Search publishers policies on preprints by journal name at <a href=\"http://www.sherpa.ac.uk/romeo/index.php\">ShERPA/RoMEO</a></li>\n<li><a href=\"http://science.sciencemag.org/content/357/6358/1344\">The preprint dilemma</a> (Jocelyn Kaiser in Science, 2017).</li>\n<li><a href=\"http://asapbio.org/preprint-info/preprint-faq\">ASAPbio Preprint FAQ</a></li>\n<li>Bourne et al (2016) <a href=\"https://peerj.com/preprints/2669v1/\">Ten simple rules for considering preprints</a></li>\n</ul>\n<p>Part of a series:</p>\n<ol>\n<li><a href=\"https://mindhacks.com/2017/11/09/open-science-essentials-pre-registration/\">Pre-registration</a></li>\n<li><a href=\"https://mindhacks.com/2017/11/09/open-science-essentials-the-open-science-framework/\">The Open Science Framework</a></li>\n<li><a href=\"https://mindhacks.com/2018/01/02/open-science-essentials-reproducibility/\">Reproducibility</a></li>\n</ol>\n</figure><p></p><p><a href=\"https://www.workplacefairness.org/independent-contractors\">https://www.workplacefairness.org/independent-contractors</a></p><p></p><p><a href=\"https://www.electronicdesign.com/analog/can-t-afford-atomic-clock-get-molecular-one\">https://www.electronicdesign.com/analog/can-t-afford-atomic-clock-get-molecular-one</a></p><p></p><p><a href=\"https://medium.com/@durga.spirit/learning-scala-from-0-60-part-i-dc095d274b78\">https://medium.com/@durga.spirit/learning-scala-from-0-60-part-i-dc095d274b78</a></p><p></p><p><a href=\"https://medium.com/technomancy/the-math-required-for-machine-learning-af0d90db3903\">https://medium.com/technomancy/the-math-required-for-machine-learning-af0d90db3903</a></p><p></p><p><a href=\"https://medium.com/walmartlabs/how-we-build-a-robust-analytics-platform-using-spark-kafka-and-cassandra-lambda-architecture-70c2d1bc8981\">https://medium.com/walmartlabs/how-we-build-a-robust-analytics-platform-using-spark-kafka-and-cassandra-lambda-architecture-70c2d1bc8981</a></p><p></p><p><a href=\"https://www.brianlikespostgres.com/cost-of-a-join.html\">https://www.brianlikespostgres.com/cost-of-a-join.html</a></p>","url":"https://hackersandslackers.com/lynx-roundup-september-8th/","uuid":"4ffe3b16-d886-4169-9a0e-94cc6f77b0c7","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b9030871fc1fc7d92b5c4e1"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736f2","title":"Lynx Roundup, September 7th","slug":"lynx-roundup-september-7th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/82@2x.jpg","excerpt":"Self-tuning data structures for databases!  Game AI!  Pandas internals!","custom_excerpt":"Self-tuning data structures for databases!  Game AI!  Pandas internals!","created_at_pretty":"05 September, 2018","published_at_pretty":"07 September, 2018","updated_at_pretty":"07 September, 2018","created_at":"2018-09-05T15:34:33.000-04:00","published_at":"2018-09-07T07:00:00.000-04:00","updated_at":"2018-09-07T07:00:00.000-04:00","meta_title":"Self-tuning data structures for databases!  Game AI!  Pandas internals! | Hackers And Slackers","meta_description":"Self-tuning data structures for databases!  Game AI!  Pandas internals!","og_description":"Self-tuning data structures for databases!  Game AI!  Pandas internals!","og_image":"https://hackersandslackers.com/content/images/lynx/82@2x.jpg","og_title":"Lynx Roundup, September 7th","twitter_description":"Self-tuning data structures for databases!  Game AI!  Pandas internals!","twitter_image":"https://hackersandslackers.com/content/images/lynx/82@2x.jpg","twitter_title":"Lynx Roundup, September 7th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.zdnet.com/article/zen-and-the-art-of-data-structures-from-self-tuning-to-self-designing-data-systems/\n\n\n\nhttps://www.gamedev.net/articles/programming/artificial-intelligence/the-total-beginners-guide-to-game-ai-r4942\n\n\n\nhttps://github.com/UIUC-PPL/charmpy\n\n\n\nhttps://medium.com/@NetflixTechBlog/notebook-innovation-591ee3221233\n\n\n\nhttps://tomaugspurger.github.io/pandas-moral-philosophy.html\n\n\n\nhttps://www.quantamagazine.org/how-insulin-helped-create-ant-societies-20180814/\n\n\n\nhttp://datagenetics.com/blog/august12018/index.html","html":"<p></p><p><a href=\"https://www.zdnet.com/article/zen-and-the-art-of-data-structures-from-self-tuning-to-self-designing-data-systems/\">https://www.zdnet.com/article/zen-and-the-art-of-data-structures-from-self-tuning-to-self-designing-data-systems/</a></p><p></p><p><a href=\"https://www.gamedev.net/articles/programming/artificial-intelligence/the-total-beginners-guide-to-game-ai-r4942\">https://www.gamedev.net/articles/programming/artificial-intelligence/the-total-beginners-guide-to-game-ai-r4942</a></p><p></p><p><a href=\"https://github.com/UIUC-PPL/charmpy\">https://github.com/UIUC-PPL/charmpy</a></p><p></p><p><a href=\"https://medium.com/@NetflixTechBlog/notebook-innovation-591ee3221233\">https://medium.com/@NetflixTechBlog/notebook-innovation-591ee3221233</a></p><p></p><p><a href=\"https://tomaugspurger.github.io/pandas-moral-philosophy.html\">https://tomaugspurger.github.io/pandas-moral-philosophy.html</a></p><p></p><p><a href=\"https://www.quantamagazine.org/how-insulin-helped-create-ant-societies-20180814/\">https://www.quantamagazine.org/how-insulin-helped-create-ant-societies-20180814/</a></p><p></p><p><a href=\"http://datagenetics.com/blog/august12018/index.html\">http://datagenetics.com/blog/august12018/index.html</a></p>","url":"https://hackersandslackers.com/lynx-roundup-september-7th/","uuid":"b8594043-356d-4aa9-a52f-19e38a40b0a7","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b902fc91fc1fc7d92b5c4de"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736f1","title":"Lynx Roundup, September 6th","slug":"lynx-roundup-september-6th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/81@2x.jpg","excerpt":"Hypothesis testing in Python!  Readable RegEx!  More Git tips!","custom_excerpt":"Hypothesis testing in Python!  Readable RegEx!  More Git tips!","created_at_pretty":"05 September, 2018","published_at_pretty":"06 September, 2018","updated_at_pretty":"06 September, 2018","created_at":"2018-09-05T15:31:15.000-04:00","published_at":"2018-09-06T07:00:00.000-04:00","updated_at":"2018-09-06T07:00:00.000-04:00","meta_title":"Hypothesis testing in Python!  Readable RegEx!  More Git tips! | Hackers And Slackers","meta_description":"Hypothesis testing in Python!  Readable RegEx!  More Git tips!","og_description":"Hypothesis testing in Python!  Readable RegEx!  More Git tips!","og_image":"https://hackersandslackers.com/content/images/lynx/81@2x.jpg","og_title":"Lynx Roundup, September 6th","twitter_description":"Hypothesis testing in Python!  Readable RegEx!  More Git tips!","twitter_image":"https://hackersandslackers.com/content/images/lynx/81@2x.jpg","twitter_title":"Lynx Roundup, September 6th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0201581\n\n\n\nhttps://realpython.com/advanced-git-for-pythonistas/\n\n\n\nhttps://neurosciencenews.com/anger-intelligence-narcissists-9695/\n\n\n\n15 Statistical Hypothesis Tests in Python (Cheat Sheet)\n[https://machinelearningmastery.com/statistical-hypothesis-tests-in-python-cheat-sheet/]\n\nhttps://dev.to/bachnxhedspi/verbalexpressions---regularexpression-made-easy-27a8\n\n\n\nhttps://www.quora.com/What-are-some-good-ways-of-learning-functional-reactive-programming\n\n\n\nhttps://hackernoon.com/rethinking-fast-and-slow-in-data-science-b2ce18d5b054","html":"<p></p><p><a href=\"http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0201581\">http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0201581</a></p><p></p><p><a href=\"https://realpython.com/advanced-git-for-pythonistas/\">https://realpython.com/advanced-git-for-pythonistas/</a></p><p></p><p><a href=\"https://neurosciencenews.com/anger-intelligence-narcissists-9695/\">https://neurosciencenews.com/anger-intelligence-narcissists-9695/</a></p><p></p><figure class=\"kg-card kg-embed-card\"><blockquote class=\"wp-embedded-content\"><a href=\"https://machinelearningmastery.com/statistical-hypothesis-tests-in-python-cheat-sheet/\">15 Statistical Hypothesis Tests in Python (Cheat Sheet)</a></blockquote>\n<script type=\"text/javascript\">\n<!--//--><![CDATA[//><!--\n\t\t!function(a,b){\"use strict\";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf(\"MSIE 10\"),h=!!navigator.userAgent.match(/Trident.*rv:11\\./),i=b.querySelectorAll(\"iframe.wp-embedded-content\");for(c=0;c<i.length;c++){if(d=i[c],!d.getAttribute(\"data-secret\"))f=Math.random().toString(36).substr(2,10),d.src+=\"#?secret=\"+f,d.setAttribute(\"data-secret\",f);if(g||h)a=d.cloneNode(!0),a.removeAttribute(\"security\"),d.parentNode.replaceChild(a,d)}}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret=\"'+d.secret+'\"]'),k=b.querySelectorAll('blockquote[data-secret=\"'+d.secret+'\"]');for(e=0;e<k.length;e++)k[e].style.display=\"none\";for(e=0;e<j.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.removeAttribute(\"style\"),\"height\"===d.message){if(g=parseInt(d.value,10),g>1e3)g=1e3;else if(~~g<200)g=200;f.height=g}if(\"link\"===d.message)if(h=b.createElement(\"a\"),i=b.createElement(\"a\"),h.href=f.getAttribute(\"src\"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener(\"message\",a.wp.receiveEmbedMessage,!1),b.addEventListener(\"DOMContentLoaded\",c,!1),a.addEventListener(\"load\",c,!1)}(window,document);\n//--><!]]>\n</script><iframe sandbox=\"allow-scripts\" security=\"restricted\" src=\"https://machinelearningmastery.com/statistical-hypothesis-tests-in-python-cheat-sheet/embed/\" width=\"600\" height=\"338\" title=\"&#8220;15 Statistical Hypothesis Tests in Python (Cheat Sheet)&#8221; &#8212; Machine Learning Mastery\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" class=\"wp-embedded-content\"></iframe></figure><p></p><p><a href=\"https://dev.to/bachnxhedspi/verbalexpressions---regularexpression-made-easy-27a8\">https://dev.to/bachnxhedspi/verbalexpressions---regularexpression-made-easy-27a8</a></p><p></p><p><a href=\"https://www.quora.com/What-are-some-good-ways-of-learning-functional-reactive-programming\">https://www.quora.com/What-are-some-good-ways-of-learning-functional-reactive-programming</a></p><p></p><p><a href=\"https://hackernoon.com/rethinking-fast-and-slow-in-data-science-b2ce18d5b054\">https://hackernoon.com/rethinking-fast-and-slow-in-data-science-b2ce18d5b054</a></p>","url":"https://hackersandslackers.com/lynx-roundup-september-6th/","uuid":"5036feee-598a-46a5-89dd-4d847c9eed26","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b902f031fc1fc7d92b5c4db"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736f0","title":"Lynx Roundup, September 5th","slug":"lynx-roundup-september-5th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx61@2x.jpg","excerpt":"Git tips!  Python tail call recursion!  Nested window functions in SQL!","custom_excerpt":"Git tips!  Python tail call recursion!  Nested window functions in SQL!","created_at_pretty":"05 September, 2018","published_at_pretty":"05 September, 2018","updated_at_pretty":"05 September, 2018","created_at":"2018-09-05T15:23:43.000-04:00","published_at":"2018-09-05T15:30:21.000-04:00","updated_at":"2018-09-05T15:30:21.000-04:00","meta_title":"Git tips!  Python tail call recursion!  Nested window functions in SQL! | Hackers And Slackers","meta_description":"Git tips!  Python tail call recursion!  Nested window functions in SQL!","og_description":"Git tips!  Python tail call recursion!  Nested window functions in SQL!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx61@2x.jpg","og_title":"Lynx Roundup, September 5th","twitter_description":"Git tips!  Python tail call recursion!  Nested window functions in SQL!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx61@2x.jpg","twitter_title":"Lynx Roundup, September 5th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://medium.freecodecamp.org/follow-these-simple-rules-and-youll-become-a-git-and-github-master-e1045057468f\n\n\n\nCurrying in calculus, PDEs, programming, and categories\n[https://www.johndcook.com/blog/2018/08/11/currying/]\n\nIn an effort to keep up my grueling regime of publishing at least one blog post\nper year, I’ve decided to write today about a neat little problem I ran across.\nThe problem is; how do you calculate the cumulative sum of a time series if\nthere are transactions that reset the count to 0?\n\nNaturally, there are ways to engineer around this problem without complex\nqueries doing the heavy lifting (recording the current balance along side your\ntransaction history, for example). However, if you occasionally find yourself\nbeing asked for a number crunch, half with the expectation of your response\nbeing:\n\n\n\n…it’s not a bad idea to keep this query in your back pocket.\n\nA Convoluted Example\nAlice decides to start a bank. Her engineers are clever and they decide that\nthey can save space in their transaction log by just reporting changes in the\nbalance. They keep the current balance in another table and decide if Grace the\nauditor comes around, they’ll just sum up all of the transactions in their log.\nGood job guys.\n\n\n\nBob is an exceptional client with good credit history. Grace takes a quick\nglance at his balance history and decides everything looks fine. As she leafs\nthrough the other records and pauses at Sybil’s balance history. It’s massive.\nThe problem is that Sybil’s been through a number of bankruptcies that should\nhave set her balance to 0. She breaks the news to Alice. You can imagine that\nAlice was not too happy.\n\n\n\nTo fix the problem, the engineers decide to introduce a new transaction that\nresets the balance to 0.\n\nThe Data Set\nIn order to satisfy Grace, we’ve got to come up with a balance history for both\nBob and Sybil using just transactions. Here’s our data set in Postgres SQL.\nWe’ll use text and integer columns along with small numbers to simplify the\nproblem.\n\n\nCREATE TABLE transactions (\n  id integer\n  ,account text\n  ,type text\n  ,amount integer\n);\n\nINSERT INTO transactions\nVALUES\n  (1, 'bob', 'deposit', 5)\n  ,(2, 'bob', 'withdrawal', -2)\n  ,(3, 'bob', 'deposit', 3)\n  ,(4, 'sybil', 'deposit', 5)\n  ,(5, 'sybil', 'withdrawal', -2)\n  ,(6, 'sybil', 'bankrupt', 0)\n  ,(7, 'sybil', 'deposit' , 3)\n  ,(8, 'sybil', 'deposit', 7)\n  ,(9, 'sybil', 'bankrupt', 0)\n  ,(10, 'sybil', 'deposit' , 5)\n;\n\n\nSimple Cumulative Sums\nOur first job is to calculate Bob’s balance history. This section is a review of\nbasic window functions. If you’re used to using them to create cumulative sums,\nfeel free to skip ahead. Here’s what we’re trying to produce:\n\n\n id | account |    type    | amount | sum\n----+---------+------------+--------+-----\n  1 | bob     | deposit    |      5 |   5\n  2 | bob     | withdrawal |     -2 |   3\n  3 | bob     | deposit    |      3 |   6\n\n\nA window function has two parts; the partition and the order. The partition\ndefines which columns are going to be grouped together in the window. The order\ndefines how to sort the rows in the window.\n\nIn the example above, we want to group transactions by their account. We then\nwant to order them by their ID. Now, when we use the Sum function, it will sum\nfrom the first transaction in the partition, to the current row:\n\n\nSELECT\n  id\n  ,account\n  ,type\n  ,amount\n  ,sum(amount) OVER account\nFROM transactions\nWHERE account = 'bob'\nWINDOW account AS (\n  PARTITION BY account\n  ORDER BY id\n);\n\n\nHowever, if we use the same query for Sybil, we run into our next problem.\n\n\n id | account |    type    | amount | sum\n----+---------+------------+--------+-----\n  4 | sybil   | deposit    |      5 |   5\n  5 | sybil   | withdrawal |     -2 |   3\n  6 | sybil   | bankrupt   |      0 |   3\n  7 | sybil   | deposit    |      3 |   6\n  8 | sybil   | deposit    |      7 |  13\n  9 | sybil   | bankrupt   |      0 |  13\n 10 | sybil   | deposit    |      5 |  18\n\n\nCumulative Sums With Resets\nThe trick to calculating Sybil’s balance is using a nested set of window\nfunctions to make the query sensitive to the transaction type. Here’s what we’re\ntrying to achieve:\n\n\n id | account |    type    | amount | sum\n----+---------+------------+--------+-----\n  4 | sybil   | deposit    |      5 |   5\n  5 | sybil   | withdrawal |     -2 |   3\n  6 | sybil   | bankrupt   |      0 |   0\n  7 | sybil   | deposit    |      3 |   3\n  8 | sybil   | deposit    |      7 |  10\n  9 | sybil   | bankrupt   |      0 |   0\n 10 | sybil   | deposit    |      5 |   5\n\n\nOne possible solution is to try and subtract the cumulative sum using a CASE\nstatement:\n\n\nSELECT\n  id\n  ,account\n  ,type\n  ,amount\n  ,CASE\n    WHEN type = 'bankrupt' THEN\n      -1*sum(amount) OVER account\n    ELSE\n      sum(amount) OVER account\n  END AS sum\nFROM transactions\nWHERE account = 'sybil'\nWINDOW account AS (\n  PARTITION BY account\n  ORDER BY id\n);\n\n\nThe trouble with this approach is that the window function does not use the\noutput of the last row to calculate the next row. The only thing we’ve done is\nto alter the values of the bankrupt transactions:\n\n\n id | account |    type    | amount | sum\n----+---------+------------+--------+-----\n  4 | sybil   | deposit    |      5 |   5\n  5 | sybil   | withdrawal |     -2 |   3\n  6 | sybil   | bankrupt   |      0 |  -3\n  7 | sybil   | deposit    |      3 |   6\n  8 | sybil   | deposit    |      7 |  13\n  9 | sybil   | bankrupt   |      0 | -13\n 10 | sybil   | deposit    |      5 |  18\n\n\nNesting window functions solves this problem. We’ll build up the query by first\nidentifying the transactions that reset the count:\n\n\nSELECT\n  id\n  ,account\n  ,type\n  ,amount\n  ,(type = 'bankrupt')::int AS do_reset\nFROM transactions\nWHERE account = 'sybil'\n;\n\n\nRunning that query we get:\n\n\n id | account |    type    | amount | do_reset\n----+---------+------------+--------+----------\n  4 | sybil   | deposit    |      5 |        0\n  5 | sybil   | withdrawal |     -2 |        0\n  6 | sybil   | bankrupt   |      0 |        1\n  7 | sybil   | deposit    |      3 |        0\n  8 | sybil   | deposit    |      7 |        0\n  9 | sybil   | bankrupt   |      0 |        1\n 10 | sybil   | deposit    |      5 |        0\n\n\nCasting boolean values to integers allows us to then perform a cumulative sum\nover do_reset. This sum will allow us to group transactions chronologically, by\ntheir association to a resetting transaction.\n\n\nSELECT\n  id\n  ,account\n  ,type\n  ,amount\n  ,sum((type = 'bankrupt')::int) OVER account AS reset_id\nFROM transactions\nWHERE account = 'sybil'\nWINDOW account AS (\n  PARTITION BY account\n  ORDER BY id\n);\n\n\nRunning that query we get:\n\n\n id | account |    type    | amount | reset_id\n----+---------+------------+--------+----------\n  4 | sybil   | deposit    |      5 |        0\n  5 | sybil   | withdrawal |     -2 |        0\n  6 | sybil   | bankrupt   |      0 |        1\n  7 | sybil   | deposit    |      3 |        1\n  8 | sybil   | deposit    |      7 |        1\n  9 | sybil   | bankrupt   |      0 |        2\n 10 | sybil   | deposit    |      5 |        2\n\n\nFinally, we can nest this query inside another window function, and perform a\ncumulative sum on amount, using the reset_id we’ve just created:\n\n\nSELECT\n  id\n  ,account\n  ,type\n  ,amount\n  ,sum(amount) OVER resets\nFROM (\n  SELECT\n    id\n    ,account\n    ,type\n    ,amount\n    ,sum((type = 'bankrupt')::int) OVER account AS reset_id\n  FROM transactions\n  WINDOW account AS (\n    PARTITION BY account\n    ORDER BY id\n  )\n) t\nWINDOW resets AS (\n  PARTITION BY\n    account\n    ,reset_id\n  ORDER BY id\n);\n\n\nRunning the query we get the values we expect for both Bob and Sybil. Huzzah!\n\n\n id | account |    type    | amount | sum\n----+---------+------------+--------+-----\n  1 | bob     | deposit    |      5 |   5\n  2 | bob     | withdrawal |     -2 |   3\n  3 | bob     | deposit    |      3 |   6\n  4 | sybil   | deposit    |      5 |   5\n  5 | sybil   | withdrawal |     -2 |   3\n  6 | sybil   | bankrupt   |      0 |   0\n  7 | sybil   | deposit    |      3 |   3\n  8 | sybil   | deposit    |      7 |  10\n  9 | sybil   | bankrupt   |      0 |   0\n 10 | sybil   | deposit    |      5 |   5\n\n\nConclusion\nWindow functions are a really good solution to processing time series with\nchronologically related data. This post scratches the surface of what’s\npossible.\n\nSo, the next time your boss asks you to process some time series data, consider\ngiving window functions a try.\n\n\n\n\n\nhttps://github.com/ac1235/python-tailrec\n\n\n\nhttps://github.com/Avik-Jain/100-Days-Of-ML-Code/blob/master/README.md\n\n\n\nWhat A Mathematical Formula Can Teach Us About Coincidence\n[http://blogs.discovermagazine.com/crux/2018/08/10/kolmogorov-pattern-complexity-pattern-meaning-random/]\n\nhttp://jkk.name/neural-tagger-tutorial/","html":"<p></p><p><a href=\"https://medium.freecodecamp.org/follow-these-simple-rules-and-youll-become-a-git-and-github-master-e1045057468f\">https://medium.freecodecamp.org/follow-these-simple-rules-and-youll-become-a-git-and-github-master-e1045057468f</a></p><p></p><figure class=\"kg-card kg-embed-card\"><blockquote class=\"wp-embedded-content\"><a href=\"https://www.johndcook.com/blog/2018/08/11/currying/\">Currying in calculus, PDEs, programming, and categories</a></blockquote>\n<script type=\"text/javascript\">\n<!--//--><![CDATA[//><!--\n\t\t!function(a,b){\"use strict\";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf(\"MSIE 10\"),h=!!navigator.userAgent.match(/Trident.*rv:11\\./),i=b.querySelectorAll(\"iframe.wp-embedded-content\");for(c=0;c<i.length;c++){if(d=i[c],!d.getAttribute(\"data-secret\"))f=Math.random().toString(36).substr(2,10),d.src+=\"#?secret=\"+f,d.setAttribute(\"data-secret\",f);if(g||h)a=d.cloneNode(!0),a.removeAttribute(\"security\"),d.parentNode.replaceChild(a,d)}}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret=\"'+d.secret+'\"]'),k=b.querySelectorAll('blockquote[data-secret=\"'+d.secret+'\"]');for(e=0;e<k.length;e++)k[e].style.display=\"none\";for(e=0;e<j.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.removeAttribute(\"style\"),\"height\"===d.message){if(g=parseInt(d.value,10),g>1e3)g=1e3;else if(~~g<200)g=200;f.height=g}if(\"link\"===d.message)if(h=b.createElement(\"a\"),i=b.createElement(\"a\"),h.href=f.getAttribute(\"src\"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener(\"message\",a.wp.receiveEmbedMessage,!1),b.addEventListener(\"DOMContentLoaded\",c,!1),a.addEventListener(\"load\",c,!1)}(window,document);\n//--><!]]>\n</script><iframe sandbox=\"allow-scripts\" security=\"restricted\" src=\"https://www.johndcook.com/blog/2018/08/11/currying/embed/\" width=\"600\" height=\"338\" title=\"&#8220;Currying in calculus, PDEs, programming, and categories&#8221; &#8212; John D. Cook\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" class=\"wp-embedded-content\"></iframe></figure><p></p><figure class=\"kg-card kg-embed-card\"><p>In an effort to keep up my grueling regime of publishing at least one blog post per year, I&#8217;ve decided to write today about a neat little problem I ran across. The problem is; how do you calculate the cumulative sum of a time series if there are transactions that reset the count to 0?</p>\n<p>Naturally, there are ways to engineer around this problem without complex queries doing the heavy lifting (recording the current balance along side your transaction history, for example). However, if you occasionally find yourself being asked for a number crunch, half with the expectation of your response being:</p>\n<p><img data-attachment-id=\"968\" data-permalink=\"https://llvllatrix.wordpress.com/2018/08/06/sql-nested-window-functions-and-time-series/leeroy/\" data-orig-file=\"https://llvllatrix.files.wordpress.com/2018/08/leeroy.jpeg?w=1050&#038;h=700\" data-orig-size=\"1050,700\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"leeroy\" data-image-description=\"\" data-medium-file=\"https://llvllatrix.files.wordpress.com/2018/08/leeroy.jpeg?w=1050&#038;h=700?w=300\" data-large-file=\"https://llvllatrix.files.wordpress.com/2018/08/leeroy.jpeg?w=1050&#038;h=700?w=1024\" class=\" size-full wp-image-968 aligncenter\" src=\"https://llvllatrix.files.wordpress.com/2018/08/leeroy.jpeg?w=1050&#038;h=700\" alt=\"leeroy\" width=\"1050\" height=\"700\" srcset=\"https://llvllatrix.files.wordpress.com/2018/08/leeroy.jpeg 1050w, https://llvllatrix.files.wordpress.com/2018/08/leeroy.jpeg?w=150&amp;h=100 150w, https://llvllatrix.files.wordpress.com/2018/08/leeroy.jpeg?w=300&amp;h=200 300w, https://llvllatrix.files.wordpress.com/2018/08/leeroy.jpeg?w=768&amp;h=512 768w, https://llvllatrix.files.wordpress.com/2018/08/leeroy.jpeg?w=1024&amp;h=683 1024w\" sizes=\"(max-width: 1050px) 100vw, 1050px\"></p>\n<p>&#8230;it&#8217;s not a bad idea to keep this query in your back pocket.</p>\n<h1>A Convoluted Example</h1>\n<p>Alice decides to start a bank. Her engineers are clever and they decide that they can save space in their transaction log by just reporting changes in the balance. They keep the current balance in another table and decide if Grace the auditor comes around, they&#8217;ll just sum up all of the transactions in their log. Good job guys.</p>\n<p><img data-attachment-id=\"969\" data-permalink=\"https://llvllatrix.wordpress.com/2018/08/06/sql-nested-window-functions-and-time-series/dilbert_and_wally/\" data-orig-file=\"https://llvllatrix.files.wordpress.com/2018/08/dilbert_and_wally1.jpeg?w=580&#038;h=301\" data-orig-size=\"580,301\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;1533580224&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"dilbert_and_wally\" data-image-description=\"\" data-medium-file=\"https://llvllatrix.files.wordpress.com/2018/08/dilbert_and_wally1.jpeg?w=580&#038;h=301?w=300\" data-large-file=\"https://llvllatrix.files.wordpress.com/2018/08/dilbert_and_wally1.jpeg?w=580&#038;h=301?w=580\" class=\" size-full wp-image-969 aligncenter\" src=\"https://llvllatrix.files.wordpress.com/2018/08/dilbert_and_wally1.jpeg?w=580&#038;h=301\" alt=\"dilbert_and_wally\" width=\"580\" height=\"301\" srcset=\"https://llvllatrix.files.wordpress.com/2018/08/dilbert_and_wally1.jpeg 580w, https://llvllatrix.files.wordpress.com/2018/08/dilbert_and_wally1.jpeg?w=150&amp;h=78 150w, https://llvllatrix.files.wordpress.com/2018/08/dilbert_and_wally1.jpeg?w=300&amp;h=156 300w\" sizes=\"(max-width: 580px) 100vw, 580px\"></p>\n<p>Bob is an exceptional client with good credit history. Grace takes a quick glance at his balance history and decides everything looks fine. As she leafs through the other records and pauses at Sybil&#8217;s balance history. It&#8217;s massive. The problem is that Sybil&#8217;s been through a number of bankruptcies that should have set her balance to 0. She breaks the news to Alice. You can imagine that Alice was not too happy.</p>\n<p><img data-attachment-id=\"965\" data-permalink=\"https://llvllatrix.wordpress.com/2018/08/06/sql-nested-window-functions-and-time-series/alice/\" data-orig-file=\"https://llvllatrix.files.wordpress.com/2018/08/alice.jpeg?w=580&#038;h=301\" data-orig-size=\"580,301\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;1&quot;}\" data-image-title=\"alice\" data-image-description=\"\" data-medium-file=\"https://llvllatrix.files.wordpress.com/2018/08/alice.jpeg?w=580&#038;h=301?w=300\" data-large-file=\"https://llvllatrix.files.wordpress.com/2018/08/alice.jpeg?w=580&#038;h=301?w=580\" class=\" size-full wp-image-965 aligncenter\" src=\"https://llvllatrix.files.wordpress.com/2018/08/alice.jpeg?w=580&#038;h=301\" alt=\"alice\" width=\"580\" height=\"301\" srcset=\"https://llvllatrix.files.wordpress.com/2018/08/alice.jpeg 580w, https://llvllatrix.files.wordpress.com/2018/08/alice.jpeg?w=150&amp;h=78 150w, https://llvllatrix.files.wordpress.com/2018/08/alice.jpeg?w=300&amp;h=156 300w\" sizes=\"(max-width: 580px) 100vw, 580px\"></p>\n<p>To fix the problem, the engineers decide to introduce a new transaction that resets the balance to 0.</p>\n<h1>The Data Set</h1>\n<p>In order to satisfy Grace, we&#8217;ve got to come up with a balance history for both Bob and Sybil using just transactions. Here&#8217;s our data set in Postgres SQL. We&#8217;ll use text and integer columns along with small numbers to simplify the problem.</p>\n<pre class=\"brush: sql; title: ; notranslate\" title=\"\">\nCREATE TABLE transactions (\n  id integer\n  ,account text\n  ,type text\n  ,amount integer\n);\n\nINSERT INTO transactions\nVALUES\n  (1, 'bob', 'deposit', 5)\n  ,(2, 'bob', 'withdrawal', -2)\n  ,(3, 'bob', 'deposit', 3)\n  ,(4, 'sybil', 'deposit', 5)\n  ,(5, 'sybil', 'withdrawal', -2)\n  ,(6, 'sybil', 'bankrupt', 0)\n  ,(7, 'sybil', 'deposit' , 3)\n  ,(8, 'sybil', 'deposit', 7)\n  ,(9, 'sybil', 'bankrupt', 0)\n  ,(10, 'sybil', 'deposit' , 5)\n;\n</pre>\n<h1>Simple Cumulative Sums</h1>\n<p>Our first job is to calculate Bob&#8217;s balance history. This section is a review of basic window functions. If you&#8217;re used to using them to create cumulative sums, feel free to skip ahead. Here&#8217;s what we&#8217;re trying to produce:</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n&nbsp;id | account |    type    | amount | sum\n----+---------+------------+--------+-----\n  1 | bob     | deposit    |      5 |   5\n  2 | bob     | withdrawal |     -2 |   3\n  3 | bob     | deposit    |      3 |   6\n</pre>\n<p>A window function has two parts; the partition and the order. The partition defines which columns are going to be grouped together in the window. The order defines how to sort the rows in the window.</p>\n<p>In the example above, we want to group transactions by their account. We then want to order them by their ID. Now, when we use the Sum function, it will sum from the first transaction in the partition, to the current row:</p>\n<pre class=\"brush: sql; title: ; notranslate\" title=\"\">\nSELECT\n  id\n  ,account\n  ,type\n  ,amount\n  ,sum(amount) OVER account\nFROM transactions\nWHERE account = 'bob'\nWINDOW account AS (\n  PARTITION BY account\n  ORDER BY id\n);\n</pre>\n<p>However, if we use the same query for Sybil, we run into our next problem.</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n&nbsp;id | account |    type    | amount | sum\n----+---------+------------+--------+-----\n  4 | sybil   | deposit    |      5 |   5\n  5 | sybil   | withdrawal |     -2 |   3\n  6 | sybil   | bankrupt   |      0 |   3\n  7 | sybil   | deposit    |      3 |   6\n  8 | sybil   | deposit    |      7 |  13\n  9 | sybil   | bankrupt   |      0 |  13\n 10 | sybil   | deposit    |      5 |  18\n</pre>\n<h1>Cumulative Sums With Resets</h1>\n<p>The trick to calculating Sybil&#8217;s balance is using a nested set of window functions to make the query sensitive to the transaction type. Here&#8217;s what we&#8217;re trying to achieve:</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n&nbsp;id | account |    type    | amount | sum\n----+---------+------------+--------+-----\n  4 | sybil   | deposit    |      5 |   5\n  5 | sybil   | withdrawal |     -2 |   3\n  6 | sybil   | bankrupt   |      0 |   0\n  7 | sybil   | deposit    |      3 |   3\n  8 | sybil   | deposit    |      7 |  10\n  9 | sybil   | bankrupt   |      0 |   0\n 10 | sybil   | deposit    |      5 |   5\n</pre>\n<p>One possible solution is to try and subtract the cumulative sum using a CASE statement:</p>\n<pre class=\"brush: sql; title: ; notranslate\" title=\"\">\nSELECT\n  id\n  ,account\n  ,type\n  ,amount\n  ,CASE\n    WHEN type = 'bankrupt' THEN\n      -1*sum(amount) OVER account\n    ELSE\n      sum(amount) OVER account\n  END AS sum\nFROM transactions\nWHERE account = 'sybil'\nWINDOW account AS (\n  PARTITION BY account\n  ORDER BY id\n);\n</pre>\n<p>The trouble with this approach is that the window function does not use the output of the last row to calculate the next row. The only thing we&#8217;ve done is to alter the values of the bankrupt transactions:</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n&nbsp;id | account |    type    | amount | sum\n----+---------+------------+--------+-----\n  4 | sybil   | deposit    |      5 |   5\n  5 | sybil   | withdrawal |     -2 |   3\n  6 | sybil   | bankrupt   |      0 |  -3\n  7 | sybil   | deposit    |      3 |   6\n  8 | sybil   | deposit    |      7 |  13\n  9 | sybil   | bankrupt   |      0 | -13\n 10 | sybil   | deposit    |      5 |  18\n</pre>\n<p>Nesting window functions solves this problem. We&#8217;ll build up the query by first identifying the transactions that reset the count:</p>\n<pre class=\"brush: sql; title: ; notranslate\" title=\"\">\nSELECT\n  id\n  ,account\n  ,type\n  ,amount\n  ,(type = 'bankrupt')::int AS do_reset\nFROM transactions\nWHERE account = 'sybil'\n;\n</pre>\n<p>Running that query we get:</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n&nbsp;id | account |    type    | amount | do_reset\n----+---------+------------+--------+----------\n  4 | sybil   | deposit    |      5 |        0\n  5 | sybil   | withdrawal |     -2 |        0\n  6 | sybil   | bankrupt   |      0 |        1\n  7 | sybil   | deposit    |      3 |        0\n  8 | sybil   | deposit    |      7 |        0\n  9 | sybil   | bankrupt   |      0 |        1\n 10 | sybil   | deposit    |      5 |        0\n</pre>\n<p>Casting boolean values to integers allows us to then perform a cumulative sum over do_reset. This sum will allow us to group transactions chronologically, by their association to a resetting transaction.</p>\n<pre class=\"brush: sql; title: ; notranslate\" title=\"\">\nSELECT\n  id\n  ,account\n  ,type\n  ,amount\n  ,sum((type = 'bankrupt')::int) OVER account AS reset_id\nFROM transactions\nWHERE account = 'sybil'\nWINDOW account AS (\n  PARTITION BY account\n  ORDER BY id\n);\n</pre>\n<p>Running that query we get:</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n&nbsp;id | account |    type    | amount | reset_id\n----+---------+------------+--------+----------\n  4 | sybil   | deposit    |      5 |        0\n  5 | sybil   | withdrawal |     -2 |        0\n  6 | sybil   | bankrupt   |      0 |        1\n  7 | sybil   | deposit    |      3 |        1\n  8 | sybil   | deposit    |      7 |        1\n  9 | sybil   | bankrupt   |      0 |        2\n 10 | sybil   | deposit    |      5 |        2\n</pre>\n<p>Finally, we can nest this query inside another window function, and perform a cumulative sum on amount, using the reset_id we&#8217;ve just created:</p>\n<pre class=\"brush: sql; title: ; notranslate\" title=\"\">\nSELECT\n  id\n  ,account\n  ,type\n  ,amount\n  ,sum(amount) OVER resets\nFROM (\n  SELECT\n    id\n    ,account\n    ,type\n    ,amount\n    ,sum((type = 'bankrupt')::int) OVER account AS reset_id\n  FROM transactions\n  WINDOW account AS (\n    PARTITION BY account\n    ORDER BY id\n  )\n) t\nWINDOW resets AS (\n  PARTITION BY\n    account\n    ,reset_id\n  ORDER BY id\n);\n</pre>\n<p>Running the query we get the values we expect for both Bob and Sybil. Huzzah!</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n&nbsp;id | account |    type    | amount | sum\n----+---------+------------+--------+-----\n  1 | bob     | deposit    |      5 |   5\n  2 | bob     | withdrawal |     -2 |   3\n  3 | bob     | deposit    |      3 |   6\n  4 | sybil   | deposit    |      5 |   5\n  5 | sybil   | withdrawal |     -2 |   3\n  6 | sybil   | bankrupt   |      0 |   0\n  7 | sybil   | deposit    |      3 |   3\n  8 | sybil   | deposit    |      7 |  10\n  9 | sybil   | bankrupt   |      0 |   0\n 10 | sybil   | deposit    |      5 |   5\n</pre>\n<h1>Conclusion</h1>\n<p>Window functions are a really good solution to processing time series with chronologically related data. This post scratches the surface of what&#8217;s possible.</p>\n<p>So, the next time your boss asks you to process some time series data, consider giving window functions a try.</p>\n<p><img data-attachment-id=\"967\" data-permalink=\"https://llvllatrix.wordpress.com/2018/08/06/sql-nested-window-functions-and-time-series/drake/\" data-orig-file=\"https://llvllatrix.files.wordpress.com/2018/08/drake.jpeg?w=500&#038;h=500\" data-orig-size=\"500,500\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"drake\" data-image-description=\"\" data-medium-file=\"https://llvllatrix.files.wordpress.com/2018/08/drake.jpeg?w=500&#038;h=500?w=300\" data-large-file=\"https://llvllatrix.files.wordpress.com/2018/08/drake.jpeg?w=500&#038;h=500?w=500\" class=\" size-full wp-image-967 aligncenter\" src=\"https://llvllatrix.files.wordpress.com/2018/08/drake.jpeg?w=500&#038;h=500\" alt=\"drake\" width=\"500\" height=\"500\" srcset=\"https://llvllatrix.files.wordpress.com/2018/08/drake.jpeg 500w, https://llvllatrix.files.wordpress.com/2018/08/drake.jpeg?w=150&amp;h=150 150w, https://llvllatrix.files.wordpress.com/2018/08/drake.jpeg?w=300&amp;h=300 300w\" sizes=\"(max-width: 500px) 100vw, 500px\"></p>\n</figure><p></p><p><a href=\"https://github.com/ac1235/python-tailrec\">https://github.com/ac1235/python-tailrec</a></p><p></p><p><a href=\"https://github.com/Avik-Jain/100-Days-Of-ML-Code/blob/master/README.md\">https://github.com/Avik-Jain/100-Days-Of-ML-Code/blob/master/README.md</a></p><p></p><figure class=\"kg-card kg-embed-card\"><blockquote class=\"wp-embedded-content\"><a href=\"http://blogs.discovermagazine.com/crux/2018/08/10/kolmogorov-pattern-complexity-pattern-meaning-random/\">What A Mathematical Formula Can Teach Us About Coincidence</a></blockquote>\n<script type=\"text/javascript\">\n<!--//--><![CDATA[//><!--\n\t\t!function(a,b){\"use strict\";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf(\"MSIE 10\"),h=!!navigator.userAgent.match(/Trident.*rv:11\\./),i=b.querySelectorAll(\"iframe.wp-embedded-content\");for(c=0;c<i.length;c++)if(d=i[c],!d.getAttribute(\"data-secret\")){if(f=Math.random().toString(36).substr(2,10),d.src+=\"#?secret=\"+f,d.setAttribute(\"data-secret\",f),g||h)a=d.cloneNode(!0),a.removeAttribute(\"security\"),d.parentNode.replaceChild(a,d)}else;}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret=\"'+d.secret+'\"]'),k=b.querySelectorAll('blockquote[data-secret=\"'+d.secret+'\"]');for(e=0;e<k.length;e++)k[e].style.display=\"none\";for(e=0;e<j.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.removeAttribute(\"style\"),\"height\"===d.message){if(g=parseInt(d.value,10),g>1e3)g=1e3;else if(200>~~g)g=200;f.height=g}if(\"link\"===d.message)if(h=b.createElement(\"a\"),i=b.createElement(\"a\"),h.href=f.getAttribute(\"src\"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener(\"message\",a.wp.receiveEmbedMessage,!1),b.addEventListener(\"DOMContentLoaded\",c,!1),a.addEventListener(\"load\",c,!1)}(window,document);\n//--><!]]>\n</script><iframe sandbox=\"allow-scripts\" security=\"restricted\" src=\"http://blogs.discovermagazine.com/crux/2018/08/10/kolmogorov-pattern-complexity-pattern-meaning-random/embed/\" width=\"600\" height=\"338\" title=\"Embedded WordPress Post\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" class=\"wp-embedded-content\"></iframe></figure><p></p><p><a href=\"http://jkk.name/neural-tagger-tutorial/\">http://jkk.name/neural-tagger-tutorial/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-september-5th/","uuid":"7fcd6c64-ba7d-4c32-a05f-58286dfaebe4","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b902d3f1fc1fc7d92b5c4d8"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736ef","title":"My First Experience with Docker","slug":"my-first-dockerfile","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/09/docker2@2x.jpg","excerpt":"Reboot EC2 instances with Docker.","custom_excerpt":"Reboot EC2 instances with Docker.","created_at_pretty":"05 September, 2018","published_at_pretty":"05 September, 2018","updated_at_pretty":"30 December, 2018","created_at":"2018-09-04T21:25:10.000-04:00","published_at":"2018-09-05T13:47:18.000-04:00","updated_at":"2018-12-30T07:01:05.000-05:00","meta_title":"Reboot EC2 instances with Docker | Hackers And Slackers","meta_description":"Reboot EC2 instances with Docker","og_description":"My First Experience with Docker","og_image":"https://hackersandslackers.com/content/images/2018/09/docker2@2x.jpg","og_title":"My First Experience with Docker","twitter_description":"Reboot EC2 instances with Docker","twitter_image":"https://hackersandslackers.com/content/images/2018/09/docker2@2x.jpg","twitter_title":"My First Experience with Docker","authors":[{"name":"David Aquino","slug":"david","bio":"Spent years in the military to become a killing machine using only 2 CDJs. Automated all of life's inconveniences, including investments in the financial markets.","profile_image":"https://hackersandslackers.com/content/images/2019/03/keno2.jpg","twitter":"@_k3n0","facebook":null,"website":null}],"primary_author":{"name":"David Aquino","slug":"david","bio":"Spent years in the military to become a killing machine using only 2 CDJs. Automated all of life's inconveniences, including investments in the financial markets.","profile_image":"https://hackersandslackers.com/content/images/2019/03/keno2.jpg","twitter":"@_k3n0","facebook":null,"website":null},"primary_tag":{"name":"DevOps","slug":"devops","description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","feature_image":null,"meta_description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","meta_title":"DevOps: Networking And Server Configuration | Hackers and Slackers","visibility":"public"},"tags":[{"name":"DevOps","slug":"devops","description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","feature_image":null,"meta_description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","meta_title":"DevOps: Networking And Server Configuration | Hackers and Slackers","visibility":"public"}],"plaintext":"We have a .NET application that has been running for years, but once a week, the\napplication fails to recover and needs the server needs to be rebooted.  To\npreemptively reboot the EC2 instance nightly we decided to use Docker and ECS\n scheduled tasks.\n\nHere is what the finished Dockerfile looks like:\n\nFROM amazonlinux:latest\n\nRUN yum -y update\nRUN curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\nRUN python get-pip.py\nRUN pip install boto\nCOPY ./win_reboot.py /root/\nRUN chmod +x /root/win_reboot.py\n\nCMD [\"/root/win_reboot.py\"]\n\nECS has a role with the correct access to run reboot. \n\nHere is what the python script looks like:\n\n#!/usr/bin/env python\n\nimport boto.ec2\nimport os\n\nconn = boto.ec2.connect_to_region(\"us-east-1\")\ninstance_id_list = []\nfor instance in os.environ['WINDOWS_EC2'].split(\"|\"): \nfor r in conn.get_all_instances(filters={\"tag:Name\" : instance}):\n\t[instance_id_list.append(i.id) for i in r.instances]    \nconn.reboot_instances(instance_ids=instance_id_list, dry_run=False)\n\nWe need to import boto and os here. Boto is to do the AWS magic of rebooting the\nservers and os to use an environment variable.  Here we use a pipe delimiter to\ntarget multiple EC2 instances. This will help out while testing the container on\nyour local machine because you can pass in environment variables on the command\nline using the -e flag.  There is probably a more efficient and elegant way to\ngo about this, but this works for us. \n\nKeep these files in the same directory and run: \n\ndocker build -t test-name:latest .\n\nIf you it builds successfully, you can try to run it:\n\ndocker run -it test-name:latest /bin/bash\n\nThis will run your container interactively and drop you into a bash shell.\n Alternatively, try running with environment variables passed in.\n\ndocker run test-name:latest -e WINDOWS_EC2='EC2-instance-tagName' -e AWS_DEFAULT_REGION='aws region'-e AWS_ACCESS_KEY_ID='ID GOES HERE' -e AWS_SECRET_ACCESS_KEY='KEY GOES HERE'\n\nIf all of this is working as expected, you can go to ECS in AWS and create your\ntask definition.  It will provide you commands to push your image to ECR. \n\nMaybe I'll add some screenshots here.\n\nAfter that you might find you have some extra docker images and containers to\nclean up locally. The following commands should help.  Consult the docker\ndocumentation for more information. \nhttps://docs.docker.com/engine/reference/commandline/rmi/\n\nfor i in ```docker images | grep '<none>'| awk '{ print $3 }'```; do docker rmi -f $i; done\nfor i in `docker container ls --all | awk '{ print $1 }'`; do docker container rm $i; done","html":"<p>We have a .NET application that has been running for years, but once a week, the application fails to recover and needs the server needs to be rebooted.  To preemptively reboot the EC2 instance nightly we decided to use Docker and ECS  scheduled tasks.</p><p>Here is what the finished Dockerfile looks like:</p><pre><code>FROM amazonlinux:latest\n\nRUN yum -y update\nRUN curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\nRUN python get-pip.py\nRUN pip install boto\nCOPY ./win_reboot.py /root/\nRUN chmod +x /root/win_reboot.py\n\nCMD [\"/root/win_reboot.py\"]</code></pre><p>ECS has a role with the correct access to run reboot. </p><p>Here is what the python script looks like:</p><pre><code>#!/usr/bin/env python\n\nimport boto.ec2\nimport os\n\nconn = boto.ec2.connect_to_region(\"us-east-1\")\ninstance_id_list = []\nfor instance in os.environ['WINDOWS_EC2'].split(\"|\"): \nfor r in conn.get_all_instances(filters={\"tag:Name\" : instance}):\n\t[instance_id_list.append(i.id) for i in r.instances]    \nconn.reboot_instances(instance_ids=instance_id_list, dry_run=False)</code></pre><p>We need to import boto and os here. Boto is to do the AWS magic of rebooting the servers and os to use an environment variable.  Here we use a pipe delimiter to target multiple EC2 instances. This will help out while testing the container on your local machine because you can pass in environment variables on the command line using the -e flag.  There is probably a more efficient and elegant way to go about this, but this works for us. </p><p>Keep these files in the same directory and run: </p><pre><code>docker build -t test-name:latest .</code></pre><p>If you it builds successfully, you can try to run it:</p><pre><code>docker run -it test-name:latest /bin/bash</code></pre><p>This will run your container interactively and drop you into a bash shell.  Alternatively, try running with environment variables passed in.</p><pre><code>docker run test-name:latest -e WINDOWS_EC2='EC2-instance-tagName' -e AWS_DEFAULT_REGION='aws region'-e AWS_ACCESS_KEY_ID='ID GOES HERE' -e AWS_SECRET_ACCESS_KEY='KEY GOES HERE'</code></pre><p>If all of this is working as expected, you can go to ECS in AWS and create your task definition.  It will provide you commands to push your image to ECR. </p><p>Maybe I'll add some screenshots here.</p><p>After that you might find you have some extra docker images and containers to clean up locally. The following commands should help.  Consult the docker documentation for more information. <a href=\"https://docs.docker.com/engine/reference/commandline/rmi/\">https://docs.docker.com/engine/reference/commandline/rmi/</a></p><pre><code>for i in ```docker images | grep '&lt;none&gt;'| awk '{ print $3 }'```; do docker rmi -f $i; done\nfor i in `docker container ls --all | awk '{ print $1 }'`; do docker container rm $i; done</code></pre>","url":"https://hackersandslackers.com/my-first-dockerfile/","uuid":"ddb6164b-8bb7-4a8f-b301-ac20261658eb","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b8f30761fc1fc7d92b5c4b4"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736a9","title":"Connect to your Google Cloud Compute Engine","slug":"connect-to-your-google-cloud-eompute-engine","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/07/gcp_instance@2x.jpg","excerpt":"Configuring SSH and file transfers in Google Cloud.","custom_excerpt":"Configuring SSH and file transfers in Google Cloud.","created_at_pretty":"14 July, 2018","published_at_pretty":"05 September, 2018","updated_at_pretty":"02 February, 2019","created_at":"2018-07-14T10:10:50.000-04:00","published_at":"2018-09-05T08:00:00.000-04:00","updated_at":"2019-02-02T04:52:29.000-05:00","meta_title":"Configuring SSH and file transfers in Google Cloud | Hackers And Slackers","meta_description":"Now that you've joined the Google Cloud club, you may have found yourself asking the inevitable: \"how do I connect to my damn instance?\"","og_description":"Now that you've joined the Google Cloud club, you may have found yourself asking the inevitable: \"how do I connect to my damn instance?\"","og_image":"https://hackersandslackers.com/content/images/2018/07/gcp_instance@2x.jpg","og_title":"Connect to your Google Cloud Compute Engine","twitter_description":"Now that you've joined the Google Cloud club, you may have found yourself asking the inevitable: \"how do I connect to my damn instance?\"","twitter_image":"https://hackersandslackers.com/content/images/2018/07/gcp_instance@2x.jpg","twitter_title":"Connect to your Google Cloud Compute Engine","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Google Cloud","slug":"googlecloud","description":"Evaluating Google Cloud Platform’s offerings. Get introduced with tutorials, see our vendor comparisons, and endure biased opinions on GCP as a whole.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/googleseries2.jpg","meta_description":"Evaluating Google Cloud Platform’s offerings. Get introduced with tutorials, see our vendor comparisons, and endure biased opinions on GCP as a whole.","meta_title":"The Rise of Google Cloud | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Google Cloud","slug":"googlecloud","description":"Evaluating Google Cloud Platform’s offerings. Get introduced with tutorials, see our vendor comparisons, and endure biased opinions on GCP as a whole.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/googleseries2.jpg","meta_description":"Evaluating Google Cloud Platform’s offerings. Get introduced with tutorials, see our vendor comparisons, and endure biased opinions on GCP as a whole.","meta_title":"The Rise of Google Cloud | Hackers and Slackers","visibility":"public"},{"name":"DevOps","slug":"devops","description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","feature_image":null,"meta_description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","meta_title":"DevOps: Networking And Server Configuration | Hackers and Slackers","visibility":"public"},{"name":"#The Rise of Google Cloud","slug":"the-rise-of-google-cloud","description":"Build robust serverless architecture on Google Cloud Platform. Learn through tutorials, make comparisons, and hear opinions on GCP as a whole.","feature_image":"https://res-5.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/ADF7E324-9EAD-4F15-8670-AF205E6804EA.png","meta_description":"Build robust serverless architecture on Google Cloud Platform. Learn through tutorials, make comparisons, and hear opinions on GCP as a whole.","meta_title":"The Rise of Google Cloud","visibility":"internal"}],"plaintext":"So you've taken a leap and decided to host your VPS on Google Cloud: let me be\nthe first to congratulate you on joining the clearly superior cloud platform of\nour modern era. I would apologize for being so openly opinionated, but so far\nI've only stated objective facts.\n\nNow that you've joined the club, you may have found yourself asking the\ninevitable: \"how do I connect to my damn instance?\"  If you're like me, you're\nprobably not the kind of person who enjoys this as their main solution:\n\nGoogle Cloud's in-browser terminal.Luckily for us, there are a few ways to\ninteract with your Compute Engine. Let's take a look at all of them.\n\nSet up the gcloud CLI\nIn order to SSH natively, we need to install the gcloud CLI  on our machine. Mac\nusers can download this here\n[https://cloud.google.com/sdk/docs/quickstart-macos], and Windows users can\ndownload from here [https://cloud.google.com/sdk/docs/quickstart-windows].\nClicking the downloaded file will extract the package. With your package\nextracted, run the install script install.sh  (or install.bat  for Windows) to\nstart the installation:\n\n$ ~/Downloads/google-cloud-sdk/install.sh\nWelcome to the Google Cloud SDK!\n\nTo help improve the quality of this product, we collect anonymized usage data\nand anonymized stacktraces when crashes are encountered; additional information\nis available at <https://cloud.google.com/sdk/usage-statistics>. You may choose\nto opt out of this collection now (by choosing 'N' at the below prompt), or at\nany time in the future by running the following command:\n\n    gcloud config set disable_usage_reporting true\n\nDo you want to help improve the Google Cloud SDK (Y/n)?\n\n\nContinuing the script will list the 'components' gcloud can install on your\nlocal machine, where each component is a Google Cloud product:\n\nYour current Cloud SDK version is: 214.0.0\nThe latest available version is: 214.0.0\n\n┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────┐\n│                                                  Components                                                 │\n├───────────────┬──────────────────────────────────────────────────────┬──────────────────────────┬───────────┤\n│     Status    │                         Name                         │            ID            │    Size   │\n├───────────────┼──────────────────────────────────────────────────────┼──────────────────────────┼───────────┤\n│ Not Installed │ App Engine Go Extensions                             │ app-engine-go            │ 152.8 MiB │\n│ Not Installed │ Cloud Bigtable Command Line Tool                     │ cbt                      │   6.3 MiB │\n│ Not Installed │ Cloud Bigtable Emulator                              │ bigtable                 │   4.3 MiB │\n│ Not Installed │ Cloud Datalab Command Line Tool                      │ datalab                  │   < 1 MiB │\n│ Not Installed │ Cloud Datastore Emulator                             │ cloud-datastore-emulator │  17.7 MiB │\n│ Not Installed │ Cloud Datastore Emulator (Legacy)                    │ gcd-emulator             │  38.1 MiB │\n│ Not Installed │ Cloud Pub/Sub Emulator                               │ pubsub-emulator          │  33.4 MiB │\n│ Not Installed │ Cloud SQL Proxy                                      │ cloud_sql_proxy          │   2.5 MiB │\n│ Not Installed │ Emulator Reverse Proxy                               │ emulator-reverse-proxy   │  14.5 MiB │\n│ Not Installed │ Google Cloud Build Local Builder                     │ cloud-build-local        │   4.4 MiB │\n│ Not Installed │ Google Container Local Builder                       │ container-builder-local  │   4.4 MiB │\n│ Not Installed │ Google Container Registry's Docker credential helper │ docker-credential-gcr    │   1.8 MiB │\n│ Not Installed │ gcloud Alpha Commands                                │ alpha                    │   < 1 MiB │\n│ Not Installed │ gcloud Beta Commands                                 │ beta                     │   < 1 MiB │\n│ Not Installed │ gcloud app Java Extensions                           │ app-engine-java          │ 118.6 MiB │\n│ Not Installed │ gcloud app PHP Extensions                            │ app-engine-php           │  21.9 MiB │\n│ Not Installed │ gcloud app Python Extensions                         │ app-engine-python        │   6.2 MiB │\n│ Not Installed │ gcloud app Python Extensions (Extra Libraries)       │ app-engine-python-extras │  28.5 MiB │\n│ Not Installed │ kubectl                                              │ kubectl                  │   < 1 MiB │\n│ Installed     │ BigQuery Command Line Tool                           │ bq                       │   < 1 MiB │\n│ Installed     │ Cloud SDK Core Libraries                             │ core                     │   8.3 MiB │\n│ Installed     │ Cloud Storage Command Line Tool                      │ gsutil                   │   3.6 MiB │\n└───────────────┴──────────────────────────────────────────────────────┴──────────────────────────┴───────────┘\nTo install or remove components at your current SDK version [214.0.0], run:\n  $ gcloud components install COMPONENT_ID\n  $ gcloud components remove COMPONENT_ID\n\nTo update your SDK installation to the latest version [214.0.0], run:\n  $ gcloud components update\n\n\nModify profile to update your $PATH and enable shell command\ncompletion?\n\nDo you want to continue (Y/n)?\n\n\nOnce installed, run gcloud init  in your terminal. This will prompt you to\nlogin:\n\nTo continue, you must log in. Would you like to log in (Y/n)?\n\n\nPressing 'Y' will prompt a simple browser window from which you can authenticate\nwith Google by simply selecting your Google account, as though we were using any\nother app with Google OAuth authentication. That's correct: you don't even need\nto go through the trouble of typing a password, assuming you've logged in to\nyour Google account before (I'm guessing you have).\n\n2ez authentication.Next, the terminal will prompt to specify which of your\nprojects to use. Select the project which contains your instance by entering the\nnumber seen in the resulting list:\n\nPick cloud project to use:\n [1] [my-project-1]\n [2] [my-project-2]\n ...\n Please enter your numeric choice:\n\n\nNow you're in the clear to go nuts with the gcloud  CLI:\n\ngcloud has now been configured!\nYou can use [gcloud config] to change more gcloud settings.\n\nYour active configuration is: [default]\n\n\nSSH via a Native Terminal\nUgh, so now we need to go through the process of creating public and private\nkeys etc to SSH into our instance, right? Wrong: gcloud  is so mo effin' dope\nthat there's a one-line command which will actually do this for you:\n\n$ gcloud compute config-ssh\n\nYou should now be able to use ssh/scp with your instances.\nFor example, try running:\n\n$ ssh instancename.region-b.projectname-173869\n\n\nBut there's no way it's that easy, right?\n\n$ gcloud compute ssh instancename\nEnter passphrase for key '/Users/username/.ssh/google_compute_engine':\n\nWelcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.15.0-1018-gcp x86_64)\n\n * Documentation:  https://help.ubuntu.com\n * Management:     https://landscape.canonical.com\n * Support:        https://ubuntu.com/advantage\n\n  Get cloud support with Ubuntu Advantage Cloud Guest:\n    http://www.ubuntu.com/business/services/cloud\n\n30 packages can be updated.\n0 updates are security updates.\n\n\nIt really is that easy. For as long as you use your local machine, you will only\never need to used the command gcloud compute ssh instancename  to connect to\nyour instance.\n\nGet and Put Files\nYou might be thinking that the next order of business would be to config SFTP in\norder to manage files on your instance. Believe it or not, there's a simpler\nway.\n\nDownloading Files from your Instance\ngcloud  comes with a built-in tool to download and upload files to your instance\nvia the CLI. To download files from your server, check out this one-liner:\n\ngcloud compute scp [LOCAL_FILE_PATH] [INSTANCE_NAME]:~/path/to/file/on/server\n\n\nUploading Files to your Instance\nThe same command can be reversed to upload as well:\n\ngcloud compute scp --recurse [INSTANCE_NAME]:[REMOTE_DIR] [LOCAL_DIR]\n\n\nOther Methods\nWhen we begin to look into other methods of interacting with our Computer Engine\ninstance, the general youth of GCP becomes apparent.\n\nAt the time of writing, Google's own documentation lacks information on how to\nconnect via SFTP, as the only mention of SFTP is this broken anchor link. Google\nalso provides a RDP  Chrome add-on\n[https://chrome.google.com/webstore/detail/chrome-rdp-for-google-clo/mpbbnannobiobpnfblimoapbephgifkm/] \n specifically for connecting to Compute instances, but my own attempts have\nshown this to be broken as well:\n\nWhy can't I click on you?!?!Despite these setbacks, the combination of SSH and\ngetting/putting files should be more than enough to satisfy anybody's needs for\nnow. Google Cloud Platform is only getting better with time, and is doing so at\na pace which scare other providers.","html":"<p>So you've taken a leap and decided to host your VPS on Google Cloud: let me be the first to congratulate you on joining the clearly superior cloud platform of our modern era. I would apologize for being so openly opinionated, but so far I've only stated objective facts.</p><p>Now that you've joined the club, you may have found yourself asking the inevitable: \"<em>how do I connect to my damn instance?\"</em> If you're like me, you're probably not the kind of person who enjoys this as their main solution:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-1.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/ssh.gif\" class=\"kg-image\"><figcaption>Google Cloud's in-browser terminal.</figcaption></figure><p>Luckily for us, there are a few ways to interact with your Compute Engine. Let's take a look at all of them.</p><h2 id=\"set-up-the-gcloud-cli\">Set up the gcloud CLI</h2><p>In order to SSH natively, we need to install the <strong>gcloud CLI</strong> on our machine. Mac users can download this <a href=\"https://cloud.google.com/sdk/docs/quickstart-macos\">here</a>, and Windows users can download from <a href=\"https://cloud.google.com/sdk/docs/quickstart-windows\">here</a>. Clicking the downloaded file will extract the package. With your package extracted, run the install script <code>install.sh</code> (or <code>install.bat</code> for Windows) to start the installation:</p><pre><code class=\"language-bash\">$ ~/Downloads/google-cloud-sdk/install.sh\nWelcome to the Google Cloud SDK!\n\nTo help improve the quality of this product, we collect anonymized usage data\nand anonymized stacktraces when crashes are encountered; additional information\nis available at &lt;https://cloud.google.com/sdk/usage-statistics&gt;. You may choose\nto opt out of this collection now (by choosing 'N' at the below prompt), or at\nany time in the future by running the following command:\n\n    gcloud config set disable_usage_reporting true\n\nDo you want to help improve the Google Cloud SDK (Y/n)?\n</code></pre>\n<p>Continuing the script will list the 'components' gcloud can install on your local machine, where each component is a Google Cloud product:</p><pre><code class=\"language-bash\">Your current Cloud SDK version is: 214.0.0\nThe latest available version is: 214.0.0\n\n┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────┐\n│                                                  Components                                                 │\n├───────────────┬──────────────────────────────────────────────────────┬──────────────────────────┬───────────┤\n│     Status    │                         Name                         │            ID            │    Size   │\n├───────────────┼──────────────────────────────────────────────────────┼──────────────────────────┼───────────┤\n│ Not Installed │ App Engine Go Extensions                             │ app-engine-go            │ 152.8 MiB │\n│ Not Installed │ Cloud Bigtable Command Line Tool                     │ cbt                      │   6.3 MiB │\n│ Not Installed │ Cloud Bigtable Emulator                              │ bigtable                 │   4.3 MiB │\n│ Not Installed │ Cloud Datalab Command Line Tool                      │ datalab                  │   &lt; 1 MiB │\n│ Not Installed │ Cloud Datastore Emulator                             │ cloud-datastore-emulator │  17.7 MiB │\n│ Not Installed │ Cloud Datastore Emulator (Legacy)                    │ gcd-emulator             │  38.1 MiB │\n│ Not Installed │ Cloud Pub/Sub Emulator                               │ pubsub-emulator          │  33.4 MiB │\n│ Not Installed │ Cloud SQL Proxy                                      │ cloud_sql_proxy          │   2.5 MiB │\n│ Not Installed │ Emulator Reverse Proxy                               │ emulator-reverse-proxy   │  14.5 MiB │\n│ Not Installed │ Google Cloud Build Local Builder                     │ cloud-build-local        │   4.4 MiB │\n│ Not Installed │ Google Container Local Builder                       │ container-builder-local  │   4.4 MiB │\n│ Not Installed │ Google Container Registry's Docker credential helper │ docker-credential-gcr    │   1.8 MiB │\n│ Not Installed │ gcloud Alpha Commands                                │ alpha                    │   &lt; 1 MiB │\n│ Not Installed │ gcloud Beta Commands                                 │ beta                     │   &lt; 1 MiB │\n│ Not Installed │ gcloud app Java Extensions                           │ app-engine-java          │ 118.6 MiB │\n│ Not Installed │ gcloud app PHP Extensions                            │ app-engine-php           │  21.9 MiB │\n│ Not Installed │ gcloud app Python Extensions                         │ app-engine-python        │   6.2 MiB │\n│ Not Installed │ gcloud app Python Extensions (Extra Libraries)       │ app-engine-python-extras │  28.5 MiB │\n│ Not Installed │ kubectl                                              │ kubectl                  │   &lt; 1 MiB │\n│ Installed     │ BigQuery Command Line Tool                           │ bq                       │   &lt; 1 MiB │\n│ Installed     │ Cloud SDK Core Libraries                             │ core                     │   8.3 MiB │\n│ Installed     │ Cloud Storage Command Line Tool                      │ gsutil                   │   3.6 MiB │\n└───────────────┴──────────────────────────────────────────────────────┴──────────────────────────┴───────────┘\nTo install or remove components at your current SDK version [214.0.0], run:\n  $ gcloud components install COMPONENT_ID\n  $ gcloud components remove COMPONENT_ID\n\nTo update your SDK installation to the latest version [214.0.0], run:\n  $ gcloud components update\n\n\nModify profile to update your $PATH and enable shell command\ncompletion?\n\nDo you want to continue (Y/n)?\n</code></pre>\n<p>Once installed, run <code>gcloud init</code> in your terminal. This will prompt you to login:</p><pre><code class=\"language-bash\">To continue, you must log in. Would you like to log in (Y/n)?\n</code></pre>\n<p>Pressing 'Y' will prompt a simple browser window from which you can authenticate with Google by simply selecting your Google account, as though we were using any other app with Google OAuth authentication. That's correct: you don't even need to go through the trouble of typing a password, assuming you've logged in to your Google account before (I'm guessing you have).</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-1.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/Screen-Shot-2018-09-04-at-3.36.26-PM.png\" class=\"kg-image\"><figcaption>2ez authentication.</figcaption></figure><p>Next, the terminal will prompt to specify which of your projects to use. Select the project which contains your instance by entering the number seen in the resulting list:</p><pre><code class=\"language-bash\">Pick cloud project to use:\n [1] [my-project-1]\n [2] [my-project-2]\n ...\n Please enter your numeric choice:\n</code></pre>\n<p>Now you're in the clear to go nuts with the <strong>gcloud</strong> CLI:</p><pre><code class=\"language-bash\">gcloud has now been configured!\nYou can use [gcloud config] to change more gcloud settings.\n\nYour active configuration is: [default]\n</code></pre>\n<h2 id=\"ssh-via-a-native-terminal\">SSH via a Native Terminal</h2><p>Ugh, so now we need to go through the process of creating public and private keys etc to SSH into our instance, right? Wrong: <strong>gcloud</strong> is so mo effin' dope that there's a one-line command which will actually do this for you:</p><pre><code class=\"language-bash\">$ gcloud compute config-ssh\n\nYou should now be able to use ssh/scp with your instances.\nFor example, try running:\n\n$ ssh instancename.region-b.projectname-173869\n</code></pre>\n<p>But there's no way it's that easy, right?</p><pre><code class=\"language-bash\">$ gcloud compute ssh instancename\nEnter passphrase for key '/Users/username/.ssh/google_compute_engine':\n\nWelcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.15.0-1018-gcp x86_64)\n\n * Documentation:  https://help.ubuntu.com\n * Management:     https://landscape.canonical.com\n * Support:        https://ubuntu.com/advantage\n\n  Get cloud support with Ubuntu Advantage Cloud Guest:\n    http://www.ubuntu.com/business/services/cloud\n\n30 packages can be updated.\n0 updates are security updates.\n</code></pre>\n<p>It really is that easy. For as long as you use your local machine, you will only ever need to used the command <code>gcloud compute ssh instancename</code> to connect to your instance.</p><h2 id=\"get-and-put-files\">Get and Put Files</h2><p>You might be thinking that the next order of business would be to config SFTP in order to manage files on your instance. Believe it or not, there's a simpler way.</p><h3 id=\"downloading-files-from-your-instance\">Downloading Files from your Instance</h3><p><strong>gcloud</strong> comes with a built-in tool to download and upload files to your instance via the CLI. To download files from your server, check out this one-liner:</p><pre><code class=\"language-bash\">gcloud compute scp [LOCAL_FILE_PATH] [INSTANCE_NAME]:~/path/to/file/on/server\n</code></pre>\n<h3 id=\"uploading-files-to-your-instance\">Uploading Files to your Instance</h3><p>The same command can be reversed to upload as well:</p><pre><code class=\"language-bash\">gcloud compute scp --recurse [INSTANCE_NAME]:[REMOTE_DIR] [LOCAL_DIR]\n</code></pre>\n<h2 id=\"other-methods\">Other Methods</h2><p>When we begin to look into other methods of interacting with our Computer Engine instance, the general youth of GCP becomes apparent.</p><p>At the time of writing, Google's own documentation lacks information on how to connect via <strong>SFTP, </strong>as the only mention of SFTP is this <a href=\"https://cloud.google.com/compute/docs/instances/transfer-files#filebrowser\">broken anchor link</a>. Google also provides a <strong>RDP</strong> <a href=\"https://chrome.google.com/webstore/detail/chrome-rdp-for-google-clo/mpbbnannobiobpnfblimoapbephgifkm/\">Chrome add-on</a> specifically for connecting to Compute instances, but my own attempts have shown this to be broken as well:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-5.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/rdp.png\" class=\"kg-image\"><figcaption>Why can't I click on you?!?!</figcaption></figure><p>Despite these setbacks, the combination of SSH and getting/putting files should be more than enough to satisfy anybody's needs for now. Google Cloud Platform is only getting better with time, and is doing so at a pace which scare other providers.</p>","url":"https://hackersandslackers.com/connect-to-your-google-cloud-eompute-engine/","uuid":"774f9ff4-8fe2-4951-b240-5de2f80bc266","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b4a046a1c20005e9422c102"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736ec","title":"Tuning Machine Learning Hyperparameters with Binary Search","slug":"tuning-machine-learning-hyperparameters-with-binary-search","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/08/ai2@2x.jpg","excerpt":"Tune the n_estimators parameter in for a Random Forests classifier in scikit-learn in Python.","custom_excerpt":"Tune the n_estimators parameter in for a Random Forests classifier in scikit-learn in Python.","created_at_pretty":"30 August, 2018","published_at_pretty":"03 September, 2018","updated_at_pretty":"14 February, 2019","created_at":"2018-08-29T21:35:41.000-04:00","published_at":"2018-09-03T07:30:00.000-04:00","updated_at":"2019-02-13T22:50:35.000-05:00","meta_title":"Tune the n_estimators parameter in for a Random Forests classifier in scikit-learn in Python | Hackers And Slackers","meta_description":"RandomizedSearchCV goes noticeably faster than a full GridSearchCV but it still takes a while - which can be rough.","og_description":"Code Snippet Corner: Tuning Machine Learning Hyperparameters with Binary Search","og_image":"https://hackersandslackers.com/content/images/2018/08/ai2@2x.jpg","og_title":"Code Snippet Corner: Tuning Machine Learning Hyperparameters with Binary Search","twitter_description":"Tune the n_estimators parameter in for a Random Forests classifier in scikit-learn in Python","twitter_image":"https://hackersandslackers.com/content/images/2018/08/ai2@2x.jpg","twitter_title":"Code Snippet Corner: Tuning Machine Learning Hyperparameters with Binary Search","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Code Snippet Corner","slug":"codesnippetcorner","description":"Real-world examples of Python being used to solve complex data problems, primarily using Jupyter notebooks.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o-1.jpg","meta_description":"Real-world examples of Python being used to solve complex data problems.","meta_title":"Python Code Snippet Corner","visibility":"public"},"tags":[{"name":"Code Snippet Corner","slug":"codesnippetcorner","description":"Real-world examples of Python being used to solve complex data problems, primarily using Jupyter notebooks.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o-1.jpg","meta_description":"Real-world examples of Python being used to solve complex data problems.","meta_title":"Python Code Snippet Corner","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Data Science","slug":"datascience","description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","feature_image":null,"meta_description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","meta_title":"Data Science | Hackers and Slackers","visibility":"public"},{"name":"Machine Learning","slug":"machine-learning","description":"The latest developments in machine learning tools and technology available to data scientists.","feature_image":null,"meta_description":"The latest developments in machine learning tools and technology available to data scientists.","meta_title":"Machine Learning | Hackers and Slackers","visibility":"public"},{"name":"#Code Snippet Corner","slug":"code-snippet-corner","description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o_o.jpg","meta_description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","meta_title":"Python Code Snippet Corner","visibility":"internal"}],"plaintext":"Ah, hyperparameter tuning.  Time & compute-intensive.  Frequently containing\nweird non-linearities in how changing a parameter changes the score and/or the\ntime it takes to train the model.\n\nRandomizedSearchCV  goes noticeably faster than a full GridSearchCV  but it\nstill takes a while - which can be rough, because in my experience you do still\nneed to be iterative with it and experiment with different distributions.  Plus,\nthen you've got hyper-hyperparameters to tune - how many iterations SHOULD you\nrun it for, anyway?\n\nI've been experimenting with using the trusty old Binary Search to tune\nhyperparameters.  I'm finding it has two advantages.\n\n 1. It's blazing fast\n 2. The performance is competitive with a Randomized Search\n 3. It gives you a rough sketch of \"the lay of the land\".  An initial binary\n    search can then provide parameters for future searches, including with Grid\n    or Randomized Searches.\n\nCode is here\n[https://github.com/mattalhonte/binary-grid-search/blob/master/binarygridsearch/binarygridsearch.py]\n\nNotebook summary is here\n[https://github.com/mattalhonte/binary-grid-search/blob/master/Binary%20Search%20Interactive%20(n_estimators).ipynb]\n\nLet's see it in action!\n\nfrom sklearn.ensemble import RandomForestClassifier\n\n\nWe'll be using a Random Forest classifier, because, as with all my code posts,\nit's what I've been using recently.\n\nfrom sklearn.datasets import load_breast_cancer\ndata = load_breast_cancer()\nX, y = data.data, data.target\n\n\nWe'll be using scikit-learn's breast cancer dataset, because I remembered that\nthese packages I'm posting about have built-in demo datasets that I should be\nusing for posts.\n\nrfArgs = {\"random_state\": 0,\n          \"n_jobs\": -1,\n          \"class_weight\": \"balanced\",\n         \"oob_score\": True}\n\n\nLet's set our random_state  for better reproducibility.\nWe'll set n_jobs=-1  because obviously we want to use all our cores, we are not\npatient people.\n\n\nWe'll have class_weight=\"balanced\"  because that'll compensate for the fact that\nthe breast cancer dataset (like most medical datasets) has unbalanced classes.\nWe'll use oob_score  because we like being lazy, part of the appeal of Random\nForests is the opportunity to be extra lazy (no need to normalize features!),\nand oob  lets us be even lazier  by giving some built-in cross-validation.\n\nNow let's define a function that'll take all this, and spit out a score.  I\nwrote the binary search function to take a function like this as an argument -\nscikit-learn is usually pretty consistent when it comes to the interface it\nprovides you, but sometimes different algorithms need to work a little\ndifferently.  For instance, since we'll be using Area Under \nprecision_recall_curve  as our metric (a good choice for classifiers with\nunbalanced classes!), it takes a teensy bit of extra fiddling to get it to play\nnicely with our oob_decision_function_.\n\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import auc\n\ndef getForestAccuracy(X, y, kwargs):\n    clf = RandomForestClassifier(**kwargs)\n    clf.fit(X, y)\n    y_pred = clf.oob_decision_function_[:, 1]\n    precision, recall, _ = precision_recall_curve(y, y_pred)\n    return auc(recall, precision)\n\n\nWe'll try to optimize the n_estimators  parameter first.  For two reasons:\n\n 1. Finding a good mix between speed and accuracy here will make it easier to\n    tune subsequent parameters.\n 2. It's the most straightforward to decide upper and lower bounds for.  Other\n    ones (like, say, max_depth) require a little work to figure the potential\n    range to search in.\n\nOkay!  So, let's put our lower limit as 32 and our upper limit as 128, because I\nread in a StackOverflow post that there's a paper that says to search within\nthat range.\n\nn_estimators = bgs.compareValsBaseCase(X, \n                    y, \n                    getForestAccuracy,        \n                    rfArgs, \n                    \"n_estimators\", \n                    0, \n                    18, \n                    128)\n\nbgs.showTimeScoreChartAndGraph(n_estimators)\n\n\nPlotting score, time, and the ratio between them - we're not just optimizing for\nthe best score right now, we're looking for tipping points that give us good\ntradeoffs.  Scores and times are normalized for a more-meaningful ratio between\nthem.\n\nn_estimators\n score\n time\n scoreTimeRatio\n 0\n 32\n 1.073532\n 0.002459\n 1.000000\n 1\n 128\n 1.867858\n 1.002459\n 0.000000\n 2\n 80\n 2.052255\n 0.440060\n 0.006443\n 3\n 56\n 1.605447\n 0.075185\n 0.044843\n 4\n 68\n 1.910411\n 0.107187\n 0.036721\n 5\n 74\n 2.066440\n 0.377136\n 0.008320\n 6\n 77\n 2.066440\n 0.388378\n 0.007955\n 7\n 75\n 2.073532\n 0.457481\n 0.006141\n n_estimators\n score\n time\n 0\n 32\n 0.988663\n 0.180521\n 1\n 128\n 0.989403\n 0.587113\n 2\n 80\n 0.989575\n 0.358446\n 3\n 56\n 0.989159\n 0.210091\n 4\n 68\n 0.989443\n 0.223102\n 5\n 74\n 0.989588\n 0.332861\n 6\n 77\n 0.989588\n 0.337432\n 7\n 75\n 0.989595\n 0.365529\n Hrm, looks like the score starts getting somewhere interesting around 68, and\ntime starts shooting up at about 80.  Let's do another with those as our bounds!\n\nn_estimators = bgs.compareValsBaseCase(X, \n                    y, \n                    getForestAccuracy,        \n                    rfArgs, \n                    \"n_estimators\", \n                    0, \n                    68, \n                    80)\n\nbgs.showTimeScoreChartAndGraph(n_estimators)\n\n\nn_estimators\n score\n time\n scoreTimeRatio\n 0\n 68\n 6.390333\n 0.333407\n 0.135692\n 1\n 80\n 7.223667\n 1.064343\n 0.000000\n 2\n 74\n 7.307000\n 0.404471\n 0.123622\n 3\n 71\n 6.307000\n 0.064343\n 1.000000\n 4\n 72\n 6.390333\n 0.175190\n 0.325419\n n_estimators\n score\n time\n 0\n 68\n 0.989443\n 0.344220\n 1\n 80\n 0.989575\n 0.355580\n 2\n 74\n 0.989588\n 0.345324\n 3\n 71\n 0.989430\n 0.340038\n 4\n 72\n 0.989443\n 0.341761\n 71 looks like our winner!  Or close enough for our purposes while we then go\noptimize other things.  And we only had to train our model 13 times - as opposed\nto the 96 we would have with a brute-force grid search.\n\nHopefully this will become a series on using this to tune other RF\nhyperparameters - other ones have some interesting quirks that I'd like to\nexpound upon.  Or you could just look at the GitHub repo for spoilers.  Or both!","html":"<p>Ah, hyperparameter tuning.  Time &amp; compute-intensive.  Frequently containing weird non-linearities in how changing a parameter changes the score and/or the time it takes to train the model.</p><p><code>RandomizedSearchCV</code> goes noticeably faster than a full <code>GridSearchCV</code> but it still takes a while - which can be rough, because in my experience you do still need to be iterative with it and experiment with different distributions.  Plus, then you've got hyper-hyperparameters to tune - how many iterations SHOULD you run it for, anyway?</p><p>I've been experimenting with using the trusty old Binary Search to tune hyperparameters.  I'm finding it has two advantages.</p><ol><li>It's blazing fast</li><li>The performance is competitive with a Randomized Search</li><li>It gives you a rough sketch of \"the lay of the land\".  An initial binary search can then provide parameters for future searches, including with Grid or Randomized Searches.</li></ol><p>Code is <a href=\"https://github.com/mattalhonte/binary-grid-search/blob/master/binarygridsearch/binarygridsearch.py\">here</a></p><p>Notebook summary is <a href=\"https://github.com/mattalhonte/binary-grid-search/blob/master/Binary%20Search%20Interactive%20(n_estimators).ipynb\">here</a></p><p>Let's see it in action!</p><pre><code class=\"language-python\">from sklearn.ensemble import RandomForestClassifier\n</code></pre>\n<p>We'll be using a Random Forest classifier, because, as with all my code posts, it's what I've been using recently.</p><pre><code class=\"language-python\">from sklearn.datasets import load_breast_cancer\ndata = load_breast_cancer()\nX, y = data.data, data.target\n</code></pre>\n<p>We'll be using scikit-learn's breast cancer dataset, because I remembered that these packages I'm posting about have built-in demo datasets that I should be using for posts.</p><pre><code class=\"language-python\">rfArgs = {&quot;random_state&quot;: 0,\n          &quot;n_jobs&quot;: -1,\n          &quot;class_weight&quot;: &quot;balanced&quot;,\n         &quot;oob_score&quot;: True}\n</code></pre>\n<p>Let's set our <code>random_state</code> for better reproducibility.<br>We'll set <code>n_jobs=-1</code> because obviously we want to use all our cores, we are not patient people.</p><p><br>We'll have <code>class_weight=\"balanced\"</code> because that'll compensate for the fact that the breast cancer dataset (like most medical datasets) has unbalanced classes.<br>We'll use <code>oob_score</code> because we like being lazy, part of the appeal of Random Forests is the opportunity to be extra lazy (no need to normalize features!), and <code>oob</code> lets us be <em>even lazier</em> by giving some built-in cross-validation.</p><p>Now let's define a function that'll take all this, and spit out a score.  I wrote the binary search function to take a function like this as an argument - scikit-learn is usually pretty consistent when it comes to the interface it provides you, but sometimes different algorithms need to work a little differently.  For instance, since we'll be using Area Under <code>precision_recall_curve</code> as our metric (a good choice for classifiers with unbalanced classes!), it takes a teensy bit of extra fiddling to get it to play nicely with our <code>oob_decision_function_</code>.</p><pre><code class=\"language-python\">from sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import auc\n\ndef getForestAccuracy(X, y, kwargs):\n    clf = RandomForestClassifier(**kwargs)\n    clf.fit(X, y)\n    y_pred = clf.oob_decision_function_[:, 1]\n    precision, recall, _ = precision_recall_curve(y, y_pred)\n    return auc(recall, precision)\n</code></pre>\n<p>We'll try to optimize the <code>n_estimators</code> parameter first.  For two reasons:</p><ol><li>Finding a good mix between speed and accuracy here will make it easier to tune subsequent parameters.</li><li>It's the most straightforward to decide upper and lower bounds for.  Other ones (like, say, <code>max_depth</code>) require a little work to figure the potential range to search in.</li></ol><p>Okay!  So, let's put our lower limit as 32 and our upper limit as 128, because I read in a StackOverflow post that there's a paper that says to search within that range.</p><pre><code class=\"language-python\">n_estimators = bgs.compareValsBaseCase(X, \n                    y, \n                    getForestAccuracy,        \n                    rfArgs, \n                    &quot;n_estimators&quot;, \n                    0, \n                    18, \n                    128)\n\nbgs.showTimeScoreChartAndGraph(n_estimators)\n</code></pre>\n<p>Plotting score, time, and the ratio between them - we're not just optimizing for the best score right now, we're looking for tipping points that give us good tradeoffs.  Scores and times are normalized for a more-meaningful ratio between them.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/visualization--2-.png\" class=\"kg-image\"></figure><div class=\"tableContainer\">\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>n_estimators</th>\n      <th>score</th>\n      <th>time</th>\n      <th>scoreTimeRatio</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>32</td>\n      <td>1.073532</td>\n      <td>0.002459</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>128</td>\n      <td>1.867858</td>\n      <td>1.002459</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>80</td>\n      <td>2.052255</td>\n      <td>0.440060</td>\n      <td>0.006443</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>56</td>\n      <td>1.605447</td>\n      <td>0.075185</td>\n      <td>0.044843</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>68</td>\n      <td>1.910411</td>\n      <td>0.107187</td>\n      <td>0.036721</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>74</td>\n      <td>2.066440</td>\n      <td>0.377136</td>\n      <td>0.008320</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>77</td>\n      <td>2.066440</td>\n      <td>0.388378</td>\n      <td>0.007955</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>75</td>\n      <td>2.073532</td>\n      <td>0.457481</td>\n      <td>0.006141</td>\n    </tr>\n  </tbody>\n</table>\n</div><div class=\"tableContainer\">\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>n_estimators</th>\n      <th>score</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>32</td>\n      <td>0.988663</td>\n      <td>0.180521</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>128</td>\n      <td>0.989403</td>\n      <td>0.587113</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>80</td>\n      <td>0.989575</td>\n      <td>0.358446</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>56</td>\n      <td>0.989159</td>\n      <td>0.210091</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>68</td>\n      <td>0.989443</td>\n      <td>0.223102</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>74</td>\n      <td>0.989588</td>\n      <td>0.332861</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>77</td>\n      <td>0.989588</td>\n      <td>0.337432</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>75</td>\n      <td>0.989595</td>\n      <td>0.365529</td>\n    </tr>\n  </tbody>\n</table>\n</div><p>Hrm, looks like the score starts getting somewhere interesting around 68, and time starts shooting up at about 80.  Let's do another with those as our bounds!</p><pre><code class=\"language-python\">n_estimators = bgs.compareValsBaseCase(X, \n                    y, \n                    getForestAccuracy,        \n                    rfArgs, \n                    &quot;n_estimators&quot;, \n                    0, \n                    68, \n                    80)\n\nbgs.showTimeScoreChartAndGraph(n_estimators)\n</code></pre>\n<figure class=\"kg-card kg-image-card\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/max_depth.png\" class=\"kg-image\"></figure><div class=\"tableContainer\">\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>n_estimators</th>\n      <th>score</th>\n      <th>time</th>\n      <th>scoreTimeRatio</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>68</td>\n      <td>6.390333</td>\n      <td>0.333407</td>\n      <td>0.135692</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>80</td>\n      <td>7.223667</td>\n      <td>1.064343</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>74</td>\n      <td>7.307000</td>\n      <td>0.404471</td>\n      <td>0.123622</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>71</td>\n      <td>6.307000</td>\n      <td>0.064343</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>72</td>\n      <td>6.390333</td>\n      <td>0.175190</td>\n      <td>0.325419</td>\n    </tr>\n  </tbody>\n</table>\n</div><div class=\"tableContainer\">\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>n_estimators</th>\n      <th>score</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>68</td>\n      <td>0.989443</td>\n      <td>0.344220</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>80</td>\n      <td>0.989575</td>\n      <td>0.355580</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>74</td>\n      <td>0.989588</td>\n      <td>0.345324</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>71</td>\n      <td>0.989430</td>\n      <td>0.340038</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>72</td>\n      <td>0.989443</td>\n      <td>0.341761</td>\n    </tr>\n  </tbody>\n</table>\n</div><p>71 looks like our winner!  Or close enough for our purposes while we then go optimize other things.  And we only had to train our model 13 times - as opposed to the 96 we would have with a brute-force grid search.</p><p>Hopefully this will become a series on using this to tune other RF hyperparameters - other ones have some interesting quirks that I'd like to expound upon.  Or you could just look at the GitHub repo for spoilers.  Or both!</p>","url":"https://hackersandslackers.com/tuning-machine-learning-hyperparameters-with-binary-search/","uuid":"ca7241c3-52cd-4910-86dc-0bb5474d07af","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b8749ed4b98380b152292ea"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736e4","title":"Lynx Roundup, September 3rd","slug":"lynx-roundup-august-29th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx60@2x.jpg","excerpt":"Hippocratic oath for coders!  Dynamic programming!  A delightful cartoon about the cute robot who controls a nuclear missile!","custom_excerpt":"Hippocratic oath for coders!  Dynamic programming!  A delightful cartoon about the cute robot who controls a nuclear missile!","created_at_pretty":"18 August, 2018","published_at_pretty":"03 September, 2018","updated_at_pretty":"03 September, 2018","created_at":"2018-08-18T00:54:36.000-04:00","published_at":"2018-09-03T07:00:00.000-04:00","updated_at":"2018-09-03T07:00:00.000-04:00","meta_title":"Hippocratic oath for coders!  Dynamic programming!  A delightful cartoon about the cute robot who controls a nuclear missile! | Hackers And Slackers","meta_description":"Hippocratic oath for coders!  Dynamic programming!  A delightful cartoon about the cute robot who controls a nuclear missile!","og_description":"Hippocratic oath for coders!  Dynamic programming!  A delightful cartoon about the cute robot who controls a nuclear missile!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx60@2x.jpg","og_title":"Lynx Roundup, September 3rd","twitter_description":"Hippocratic oath for coders!  Dynamic programming!  A delightful cartoon about the cute robot who controls a nuclear missile!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx60@2x.jpg","twitter_title":"Lynx Roundup, September 3rd","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.fastcompany.com/90215922/why-we-spent-two-years-rewriting-the-code-of-ethics-for-computing\n\n\n\nhttps://spectrum.ieee.org/view-from-the-valley/at-work/tech-careers/engineers-say-no-thanks-to-silicon-valley-recruiters-citing-ethical-concerns\n\n\n\nhttps://medium.com/@johnmark/why-open-source-failed-6cae5d6a9f6\n\n\n\nSome neat computing history!\n\n\n\nhttps://en.wikipedia.org/wiki/Cyc\n\n\n\nhttps://lukasmericle.github.io/dynprotut/\n\n\n\n\n\nhttps://www.nytimes.com/2018/08/10/smarter-living/how-to-negotiate-salary.html","html":"<p></p><p><a href=\"https://www.fastcompany.com/90215922/why-we-spent-two-years-rewriting-the-code-of-ethics-for-computing\">https://www.fastcompany.com/90215922/why-we-spent-two-years-rewriting-the-code-of-ethics-for-computing</a></p><p></p><p><a href=\"https://spectrum.ieee.org/view-from-the-valley/at-work/tech-careers/engineers-say-no-thanks-to-silicon-valley-recruiters-citing-ethical-concerns\">https://spectrum.ieee.org/view-from-the-valley/at-work/tech-careers/engineers-say-no-thanks-to-silicon-valley-recruiters-citing-ethical-concerns</a></p><p></p><p><a href=\"https://medium.com/@johnmark/why-open-source-failed-6cae5d6a9f6\">https://medium.com/@johnmark/why-open-source-failed-6cae5d6a9f6</a></p><p></p><p>Some neat computing history!</p><p></p><p><a href=\"https://en.wikipedia.org/wiki/Cyc\">https://en.wikipedia.org/wiki/Cyc</a></p><p></p><p><a href=\"https://lukasmericle.github.io/dynprotut/\">https://lukasmericle.github.io/dynprotut/</a></p><p></p><figure class=\"kg-card kg-embed-card\"><iframe width=\"459\" height=\"344\" src=\"https://www.youtube.com/embed/KFz0xVi25LE?feature=oembed\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe></figure><p></p><p><a href=\"https://www.nytimes.com/2018/08/10/smarter-living/how-to-negotiate-salary.html\">https://www.nytimes.com/2018/08/10/smarter-living/how-to-negotiate-salary.html</a></p>","url":"https://hackersandslackers.com/lynx-roundup-august-29th/","uuid":"89994750-2b67-4432-b99a-8099fd26f184","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b77a68cec281f15796ad2a5"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736e9","title":"Lynx Roundup, September 2nd","slug":"lynx-roundup-september-2nd","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/77@2x.jpg","excerpt":"A pocket calculator with all-optical circuitry!  Complaints from a Google Chrome dev!  Health checks in Distributed Systems!","custom_excerpt":"A pocket calculator with all-optical circuitry!  Complaints from a Google Chrome dev!  Health checks in Distributed Systems!","created_at_pretty":"18 August, 2018","published_at_pretty":"02 September, 2018","updated_at_pretty":"02 September, 2018","created_at":"2018-08-18T01:14:01.000-04:00","published_at":"2018-09-02T07:00:00.000-04:00","updated_at":"2018-09-02T12:41:01.000-04:00","meta_title":"A pocket calculator with all-optical circuitry!  Complaints from a Google Chrome dev!  Health checks in Distributed Systems! | Hackers And Slackers","meta_description":"A pocket calculator with all-optical circuitry!  Complaints from a Google Chrome dev!  Health checks in Distributed Systems!","og_description":"A pocket calculator with all-optical circuitry!  Complaints from a Google Chrome dev!  Health checks in Distributed Systems!","og_image":"https://hackersandslackers.com/content/images/lynx/77@2x.jpg","og_title":"Lynx Roundup, September 2nd","twitter_description":"A pocket calculator with all-optical circuitry!  Complaints from a Google Chrome dev!  Health checks in Distributed Systems!","twitter_image":"https://hackersandslackers.com/content/images/lynx/77@2x.jpg","twitter_title":"Lynx Roundup, September 2nd","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://medium.com/@TeamCoworker/a-simple-guide-to-talking-about-workplace-issues-with-your-coworkers-1b0ce08c3a8a\n\n\n\nhttps://medium.com/coryodaniel/from-erverless-to-elixir-48752db4d7bc\n\n\n\nhttps://medium.com/@copyconstruct/health-checks-in-distributed-systems-aa8a0e8c1672\n\n\n\nhttp://www.aalto.fi/en/current/news/2018-07-30/\n\n\n\nIn my 30+ year programming career, every single, bizarrely obscure bug that took\nweeks to chase down has ended up being a one-line fix.\n\n— Josh Susser (@joshsusser) August 14, 2018\n[https://twitter.com/joshsusser/status/1029480886033506304?ref_src=twsrc%5Etfw]\n\nhttps://randomascii.wordpress.com/2018/08/16/24-core-cpu-and-i-cant-type-an-email-part-one/\n\n\n\nhttps://pudding.cool/2018/08/pockets/","html":"<p></p><p><a href=\"https://medium.com/@TeamCoworker/a-simple-guide-to-talking-about-workplace-issues-with-your-coworkers-1b0ce08c3a8a\">https://medium.com/@TeamCoworker/a-simple-guide-to-talking-about-workplace-issues-with-your-coworkers-1b0ce08c3a8a</a></p><p></p><p><a href=\"https://medium.com/coryodaniel/from-erverless-to-elixir-48752db4d7bc\">https://medium.com/coryodaniel/from-erverless-to-elixir-48752db4d7bc</a></p><p></p><p><a href=\"https://medium.com/@copyconstruct/health-checks-in-distributed-systems-aa8a0e8c1672\">https://medium.com/@copyconstruct/health-checks-in-distributed-systems-aa8a0e8c1672</a></p><p></p><p><a href=\"http://www.aalto.fi/en/current/news/2018-07-30/\">http://www.aalto.fi/en/current/news/2018-07-30/</a></p><p></p><figure class=\"kg-card kg-embed-card\"><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">In my 30+ year programming career, every single, bizarrely obscure bug that took weeks to chase down has ended up being a one-line fix.</p>&mdash; Josh Susser (@joshsusser) <a href=\"https://twitter.com/joshsusser/status/1029480886033506304?ref_src=twsrc%5Etfw\">August 14, 2018</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</figure><p></p><p><a href=\"https://randomascii.wordpress.com/2018/08/16/24-core-cpu-and-i-cant-type-an-email-part-one/\">https://randomascii.wordpress.com/2018/08/16/24-core-cpu-and-i-cant-type-an-email-part-one/</a></p><p></p><p><a href=\"https://pudding.cool/2018/08/pockets/\">https://pudding.cool/2018/08/pockets/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-september-2nd/","uuid":"44a1e4c2-931b-4fbd-ad62-c256046373a4","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b77ab19ec281f15796ad2b4"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736e8","title":"Lynx Roundup, September 1st","slug":"lynx-roundup-september-1st","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/02/79-6@2x.jpg","excerpt":"Open science!  Awesome Scala tutorial!  JOINs in Postgres!","custom_excerpt":"Open science!  Awesome Scala tutorial!  JOINs in Postgres!","created_at_pretty":"18 August, 2018","published_at_pretty":"01 September, 2018","updated_at_pretty":"14 February, 2019","created_at":"2018-08-18T01:09:43.000-04:00","published_at":"2018-09-01T07:00:00.000-04:00","updated_at":"2019-02-14T05:20:33.000-05:00","meta_title":"Open science!  Awesome Scala tutorial!  JOINs in Postgres! | Hackers And Slackers","meta_description":"Open science!  Awesome Scala tutorial!  JOINs in Postgres!","og_description":"Open science!  Awesome Scala tutorial!  JOINs in Postgres!","og_image":"https://hackersandslackers.com/content/images/2019/02/79-6@2x.jpg","og_title":"Lynx Roundup, September 1st","twitter_description":"Open science!  Awesome Scala tutorial!  JOINs in Postgres!","twitter_image":"https://hackersandslackers.com/content/images/2019/02/79-6@2x.jpg","twitter_title":"Lynx Roundup, September 1st","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://mindhacks.com/2018/08/14/open-science-essentials-preprints/\n\n\n\nhttps://www.workplacefairness.org/independent-contractors\n\n\n\nhttps://medium.com/@durga.spirit/learning-scala-from-0-60-part-i-dc095d274b78\n\n\n\nhttps://medium.com/technomancy/the-math-required-for-machine-learning-af0d90db3903\n\n\n\nhttps://medium.com/walmartlabs/how-we-build-a-robust-analytics-platform-using-spark-kafka-and-cassandra-lambda-architecture-70c2d1bc8981\n\n\n\nhttps://www.brianlikespostgres.com/cost-of-a-join.html\n\n\n\nhttps://functional.works-hub.com/learn/functor-applicative-and-why-3c5b3","html":"<p></p><p><a href=\"https://mindhacks.com/2018/08/14/open-science-essentials-preprints/\">https://mindhacks.com/2018/08/14/open-science-essentials-preprints/</a></p><p></p><p><a href=\"https://www.workplacefairness.org/independent-contractors\">https://www.workplacefairness.org/independent-contractors</a></p><p></p><p><a href=\"https://medium.com/@durga.spirit/learning-scala-from-0-60-part-i-dc095d274b78\">https://medium.com/@durga.spirit/learning-scala-from-0-60-part-i-dc095d274b78</a></p><p></p><p><a href=\"https://medium.com/technomancy/the-math-required-for-machine-learning-af0d90db3903\">https://medium.com/technomancy/the-math-required-for-machine-learning-af0d90db3903</a></p><p></p><p><a href=\"https://medium.com/walmartlabs/how-we-build-a-robust-analytics-platform-using-spark-kafka-and-cassandra-lambda-architecture-70c2d1bc8981\">https://medium.com/walmartlabs/how-we-build-a-robust-analytics-platform-using-spark-kafka-and-cassandra-lambda-architecture-70c2d1bc8981</a></p><p></p><p><a href=\"https://www.brianlikespostgres.com/cost-of-a-join.html\">https://www.brianlikespostgres.com/cost-of-a-join.html</a></p><p></p><p><a href=\"https://functional.works-hub.com/learn/functor-applicative-and-why-3c5b3\">https://functional.works-hub.com/learn/functor-applicative-and-why-3c5b3</a></p><p></p>","url":"https://hackersandslackers.com/lynx-roundup-september-1st/","uuid":"23aec75e-72d1-46a5-b388-39da35b90c79","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b77aa17ec281f15796ad2b1"}}]}},"pageContext":{"pageNumber":17,"humanPageNumber":18,"skip":204,"limit":12,"numberOfPages":33,"previousPagePath":"/page/17","nextPagePath":"/page/19"}}