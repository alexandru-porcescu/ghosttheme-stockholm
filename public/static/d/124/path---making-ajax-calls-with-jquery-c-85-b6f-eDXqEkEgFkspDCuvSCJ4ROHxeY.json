{"data":{"ghostPost":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673644","title":"Make Your First API Calls with JQuery AJAX","slug":"making-ajax-calls-with-jquery","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/jquery-2-2.jpg","excerpt":"Beginner's guide to consuming endpoints via Frontend Javascript.","custom_excerpt":"Beginner's guide to consuming endpoints via Frontend Javascript.","created_at_pretty":"24 April, 2018","published_at_pretty":"25 April, 2018","updated_at_pretty":"28 March, 2019","created_at":"2018-04-23T20:20:21.000-04:00","published_at":"2018-04-25T01:00:00.000-04:00","updated_at":"2019-03-28T09:44:00.000-04:00","meta_title":"Make Your First API Calls with JQuery AJAX | Hackers and Slackers","meta_description":"Beginner's guide to consuming endpoints via Frontend Javascript. Quick Introduction to REST APIs, as well as a hands-on tutorial.","og_description":"Beginner's guide to consuming endpoints via Frontend Javascript. Quick Introduction to REST APIs, as well as a hands-on tutorial.","og_image":"https://hackersandslackers.com/content/images/2019/03/jquery-2-2.jpg","og_title":"Make Your First API Calls with JQuery AJAX","twitter_description":"Beginner's guide to consuming endpoints via Frontend Javascript. Quick Introduction to REST APIs, as well as a hands-on tutorial.","twitter_image":"https://hackersandslackers.com/content/images/2019/03/jquery-2-1.jpg","twitter_title":"Make Your First API Calls with JQuery AJAX","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Frontend","slug":"frontend","description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","feature_image":null,"meta_description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","meta_title":"Frontend Development | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Frontend","slug":"frontend","description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","feature_image":null,"meta_description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","meta_title":"Frontend Development | Hackers and Slackers","visibility":"public"},{"name":"REST APIs","slug":"restapis","description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","feature_image":null,"meta_description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","meta_title":"Consuming and Building REST APIs | Hackers and Slackers","visibility":"public"},{"name":"JavaScript","slug":"javascript","description":"JavaScript covering both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","feature_image":null,"meta_description":"JavaScript topics, both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","meta_title":"Javascript Tutorials | Hackers and Slackers","visibility":"public"}],"plaintext":"The information age is over: we have all the information now. All of it. We're\nin a unique place in human history where we've somehow managed to mine more data\nthan we know what to do with... and a lot of that data is easily accessible via\nAPIs.\n\nWe're going to get our feet wet with REST APIs today, thus allowing us to\ninteract with meaningful information. Making Ajax GET calls with JQuery  is\nperhaps as basic as it gets: there's a good chance we already know all this\nstuff, but even I constantly forget the exact syntax of everyday functions.\nChances are I'm going to come back to this post at some point just to copy and\npaste the snippets below. \n\nIntroduction to REST APIs\nIf you're new to executing AJAX requests, chances are you may be new to REST\nAPIs in general. This crash course is going to be fast and rough around the\nedges, so strap in.\n\nIn the most simple sense, a REST API endpoint is a URL. It just so happens that\nthis URL probably expects more from you than simply visiting it, and as a\nresult, should output something useful for you. API Endpoints will almost always\noutput either JSON or XML; these responses will give you information varying\nfrom error codes to the actual data you seek.\n\nREST APIs expect requests to come in one of the following forms:\n\n * GET: A request looking for read-only data. Some GET requests simply need to\n   be copy and pasted into a browser window to receive results, but usually we\n   need to either authenticate or specify what we're looking for.\n * POST: A write  request to the target resource. Expects that new information\n   will come as a result of this request.\n * PUT: Updates pre-existing data somewhere, likely in some database.\n * PATCH: Somewhat similar to PUT, and in my experience rarely used at all.\n * DELETE: Expects that information will be deleted as a result of the request\n\nIf this all seems like new information, I'd highly recommend downloading Postman\n[https://www.getpostman.com/]  to become familiar with how API calls are\nstructured.\n\nFor now, we'll focus on working with a simple GET endpoint.\n\nLearning By Doing\nIf you've been checking out Snkia's roundup posts\n[https://hackersandslackers.com/tag/roundup/]  lately, you may have noticed\nnifty link previews being generated. To demonstrate how to make API calls via a\nfrontend client with JQuery, we'll be walking through how to create link\npreviews using the LinkPreview API [https://www.linkpreview.net/]. This service\nserves as a good tutorial because:\n\n * It's an example of a simple GET endpoint\n * There's a quick and immediately useful end result\n * It's free\n\nTell me That Ain't Insecurr\nI want to stress here that we're doing this for the sake of learning; while this\nis probably the fastest  way to start working with an API, it is most definitely\n not secure.\n\nMaking calls with private keys stored and passed via the client side exposes\nyour key publicly. In a production environment, this is like shoving your\npassword in people's faces. People will most definitely want to steal and\nexploit your private key: if what you were doing didn't have any value, it\nwouldn't require a key in the first place.\n\nHopefully this has scared you enough to consider passing credentials in the\nfuture. That said, there's another solid reason we selected LinkPreview as\ntoday's example. LinkPreview offers domain whitelisting for requests, so even if\nsomebody did steal your key, they'd only be able to use it from your domain ;).\n\nMake sure you whitelist the domain you'll be working from.Fetch Me Daddy\nGo get started with an API key over at LinkPreview  if you're following along.\nI'm going to assume you already have JQuery  readily available from here\nforward.\n\nTo get started, we'll wait for our document to load, and set two critical\nvariables: the API URL, and our API key.\n\n$( document ).ready(function() {\n  var api_url = 'https://api.linkpreview.net'\n  var key = '5b578yg9yvi8sogirbvegoiufg9v9g579gviuiub8' // not real\n});\n\n\nIf you're following along what we've done with Lynx Roundups, our next step is\nto get all the relevant  <a>  tags on a page, loop through them, and replace\nthem with their respective link previews.\n\n$( document ).ready(function() {\n  var api_url = 'https://api.linkpreview.net'\n  var key = '5b578yg9yvi8sogirbvegoiufg9v9g579gviuiub8' // not real\n  \n  $( \".content a\" ).each(function( index, element ) {\n      console.log($( this ).text());\n  }\n});\n\n\nThe JQuery  .each  method creates a loop which iterates over every element\nmatching the provided selector. In our example, we only want <a>  tags in the\ncontent of our page; otherwise we would get all  links, like navigation links\nand so forth.\n\nNow it's time to bring in that $.ajax()  thing we've been going off about.\n\n$( document ).ready(function() {\n  var api_url = 'https://api.linkpreview.net'\n  var key = '5b578yg9yvi8sogirbvegoiufg9v9g579gviuiub8' // not real\n\n  $( \".content a\" ).each(function( index, element ) {\n\n    $.ajax({\n        url: api_url + \"?key=\" + key + \" &q=\" + $( this ).text(),\n        contentType: \"application/json\",\n        dataType: 'json',\n        success: function(result){\n            console.log(result);\n        }\n    })\n  });\n});\n\n\nThis is how Ajax request are structured: the contents of $.ajax()  is\nessentially an object taking values it will use to construct the request. The\nabove example is about as simple as it gets for making a barebones GET call.\nWe're looping through each <a>  tag and passing its contents (the url) to the\nAPI, and receiving an object in response.\n\nAjax requests can take way more parameters than the ones we just specified. I\nrecommend reading over the JQuery Ajax documentation\n[http://api.jquery.com/jquery.ajax/]  closely; not only for the sake of these\nrequests, but understanding the potential items we can specify will solidify an\nunderstanding for REST APIs in general.\n\nThe line contentType: \"application/json\"  specifies that the content coming back\nto us will be in JSON format - this is a very common header when dealing with\nREST APIs. \n\nWith any luck, your response should come back looking like:\n\n{\n    \"title\":\"Google\",\n    \"description\":\"Search webpages, images, videos and more.\",\n    \"image\":\"https//:www.google.com/images/logo.png\",\n    \"url\":\"https://www.google.com/\"\n}\n\n\nIf you'd like to use this in a meaningful way, feel free to do something like\nthe mess I've put together below:\n\n$( document ).ready(function() {\n  var api_url = 'https://api.linkpreview.net'\n  var key = '5b578yg9yvi8sogirbvegoiufg9v9g579gviuiub8' // not real\n\n  $( \".content a\" ).each(function( index, element ) {\n    $.ajax({\n        url: api_url + \"?key=\" + key + \" &q=\" + $( this ).text(),\n        contentType: \"application/json\",\n        dataType: 'json',\n        success: function(result){\n            $( element ).after(\n            '<a href=\"' + result.url + '\"> \\n ' +\n              '<div class=\"link-preview\"> \\n ' +\n                '<div class=\"preview-image\" style=\"background-image:url(' + result.image + ');\"></div> \\n ' + \n                '<div style=\"width:70%;\" class=\"link-info\"> \\n ' +\n                  '<h4>' + result.title +'</h4> \\n ' +\n                  '<p>' + result.description +'</p> \\n ' +\n                '</div><br> \\n ' +\n                  '<a href=\"' + result.url + '\" class=\"url-info\"><i class=\"far fa-link\"></i>' + result.url + '</a> \\n ' +\n                '</div></a>');\n            $( element ).remove();\n        }\n    })\n  });\n});\n\n\nThat template should serve you well for most GET API calls you're going to make\nvia JQuery. Go wild and see what you can do to leverage APIs and expose some\npeople's personal data or whatever.\n\nSee how I just created HTML by stringing together a bunch of ugly strings in\nJavascript? Don't do that; there are countless better ways to handle this, they\njust so happen to be out of scope for this post.If we were to truly complete\nthis example, we'd want to refine our logic to ensure we're not receiving\nnonsense. There's no validation on what's coming back in these calls, so there's\nnothing in place to protect us in the case that a page doesn't comply with our\nformat.","html":"<p>The information age is over: we have all the information now. All of it. We're in a unique place in human history where we've somehow managed to mine more data than we know what to do with... and a lot of that data is easily accessible via APIs.</p><p>We're going to get our feet wet with REST APIs today, thus allowing us to interact with meaningful information. Making Ajax GET calls with <strong>JQuery</strong> is perhaps as basic as it gets: there's a good chance we already know all this stuff, but even I constantly forget the exact syntax of everyday functions. Chances are I'm going to come back to this post at some point just to copy and paste the snippets below. </p><h2 id=\"introduction-to-rest-apis\">Introduction to REST APIs</h2><p>If you're new to executing AJAX requests, chances are you may be new to REST APIs in general. This crash course is going to be fast and rough around the edges, so strap in.</p><p>In the most simple sense, a REST API endpoint is a URL. It just so happens that this URL probably expects more from you than simply visiting it, and as a result, should output something useful for you. API Endpoints will almost always output either JSON or XML; these responses will give you information varying from error codes to the actual data you seek.</p><p>REST APIs expect requests to come in one of the following forms:</p><ul><li><strong>GET</strong>: A request looking for read-only data. Some GET requests simply need to be copy and pasted into a browser window to receive results, but usually we need to either authenticate or specify what we're looking for.</li><li><strong>POST</strong>: A <em>write</em> request to the target resource. Expects that new information will come as a result of this request.</li><li><strong>PUT</strong>: Updates pre-existing data somewhere, likely in some database.</li><li><strong>PATCH</strong>: Somewhat similar to PUT, and in my experience rarely used at all.</li><li><strong>DELETE: </strong>Expects that information will be deleted as a result of the request</li></ul><p>If this all seems like new information, I'd highly recommend downloading <a href=\"https://www.getpostman.com/\">Postman</a> to become familiar with how API calls are structured.</p><p>For now, we'll focus on working with a simple GET endpoint.</p><h2 id=\"learning-by-doing\">Learning By Doing</h2><p>If you've been checking out <a href=\"https://hackersandslackers.com/tag/roundup/\">Snkia's roundup posts</a> lately, you may have noticed nifty link previews being generated. To demonstrate how to make API calls via a frontend client with <strong>JQuery</strong>, we'll be walking through how to create link previews using the <a href=\"https://www.linkpreview.net/\">LinkPreview API</a>. This service serves as a good tutorial because:</p><ul><li>It's an example of a simple GET endpoint</li><li>There's a quick and immediately useful end result</li><li>It's free</li></ul><h3 id=\"tell-me-that-ain-t-insecurr\">Tell me That Ain't Insecurr</h3><p>I want to stress here that we're doing this for the sake of learning; while this is probably the <em>fastest</em> way to start working with an API, it is most definitely <strong>not secure</strong>.</p><p>Making calls with private keys stored and passed via the client side exposes your key publicly. In a production environment, this is like shoving your password in people's faces. People will most definitely want to steal and exploit your private key: if what you were doing didn't have any value, it wouldn't require a key in the first place.</p><p>Hopefully this has scared you enough to consider passing credentials in the future. That said, there's another solid reason we selected LinkPreview as today's example. LinkPreview offers domain whitelisting for requests, so even if somebody did steal your key, they'd only be able to use it from your domain ;).</p><figure class=\"kg-card kg-image-card\"><img src=\"https://hackersandslackers.com/content/images/2019/02/Screen-Shot-2018-11-25-at-6.06.44-AM.png\" class=\"kg-image\"><figcaption>Make sure you whitelist the domain you'll be working from.</figcaption></figure><h2 id=\"fetch-me-daddy\">Fetch Me Daddy</h2><p>Go get started with an API key over at <strong>LinkPreview</strong> if you're following along. I'm going to assume you already have <strong>JQuery</strong> readily available from here forward.</p><p>To get started, we'll wait for our document to load, and set two critical variables: the API URL, and our API key.</p><pre><code class=\"language-javascript\">$( document ).ready(function() {\n  var api_url = 'https://api.linkpreview.net'\n  var key = '5b578yg9yvi8sogirbvegoiufg9v9g579gviuiub8' // not real\n});\n</code></pre>\n<p>If you're following along what we've done with Lynx Roundups, our next step is to get all the <em>relevant</em> <code>&lt;a&gt;</code> tags on a page, loop through them, and replace them with their respective link previews.</p><pre><code class=\"language-javascript\">$( document ).ready(function() {\n  var api_url = 'https://api.linkpreview.net'\n  var key = '5b578yg9yvi8sogirbvegoiufg9v9g579gviuiub8' // not real\n  \n  $( &quot;.content a&quot; ).each(function( index, element ) {\n      console.log($( this ).text());\n  }\n});\n</code></pre>\n<p>The <strong>JQuery</strong> <code>.each</code> method creates a loop which iterates over every element matching the provided selector. In our example, we only want <code>&lt;a&gt;</code> tags in the content of our page; otherwise we would get <em>all</em> links, like navigation links and so forth.</p><p>Now it's time to bring in that <code>$.ajax()</code> thing we've been going off about.</p><pre><code class=\"language-javascript\">$( document ).ready(function() {\n  var api_url = 'https://api.linkpreview.net'\n  var key = '5b578yg9yvi8sogirbvegoiufg9v9g579gviuiub8' // not real\n\n  $( &quot;.content a&quot; ).each(function( index, element ) {\n\n    $.ajax({\n        url: api_url + &quot;?key=&quot; + key + &quot; &amp;q=&quot; + $( this ).text(),\n        contentType: &quot;application/json&quot;,\n        dataType: 'json',\n        success: function(result){\n            console.log(result);\n        }\n    })\n  });\n});\n</code></pre>\n<p>This is how Ajax request are structured: the contents of <code>$.ajax()</code> is essentially an object taking values it will use to construct the request. The above example is about as simple as it gets for making a barebones GET call. We're looping through each <code>&lt;a&gt;</code> tag and passing its contents (the url) to the API, and receiving an object in response.</p><p><strong>Ajax </strong>requests can take way more parameters than the ones we just specified. I recommend reading over the <a href=\"http://api.jquery.com/jquery.ajax/\">JQuery Ajax documentation</a> closely; not only for the sake of these requests, but understanding the potential items we can specify will solidify an understanding for REST APIs in general.</p><p>The line <code>contentType: \"application/json\"</code> specifies that the content coming back to us will be in JSON format - this is a very common header when dealing with REST APIs. </p><p>With any luck, your response should come back looking like:</p><pre><code class=\"language-json\">{\n    &quot;title&quot;:&quot;Google&quot;,\n    &quot;description&quot;:&quot;Search webpages, images, videos and more.&quot;,\n    &quot;image&quot;:&quot;https//:www.google.com/images/logo.png&quot;,\n    &quot;url&quot;:&quot;https://www.google.com/&quot;\n}\n</code></pre>\n<p>If you'd like to use this in a meaningful way, feel free to do something like the mess I've put together below:</p><pre><code class=\"language-javascript\">$( document ).ready(function() {\n  var api_url = 'https://api.linkpreview.net'\n  var key = '5b578yg9yvi8sogirbvegoiufg9v9g579gviuiub8' // not real\n\n  $( &quot;.content a&quot; ).each(function( index, element ) {\n    $.ajax({\n        url: api_url + &quot;?key=&quot; + key + &quot; &amp;q=&quot; + $( this ).text(),\n        contentType: &quot;application/json&quot;,\n        dataType: 'json',\n        success: function(result){\n            $( element ).after(\n            '&lt;a href=&quot;' + result.url + '&quot;&gt; \\n ' +\n              '&lt;div class=&quot;link-preview&quot;&gt; \\n ' +\n                '&lt;div class=&quot;preview-image&quot; style=&quot;background-image:url(' + result.image + ');&quot;&gt;&lt;/div&gt; \\n ' + \n                '&lt;div style=&quot;width:70%;&quot; class=&quot;link-info&quot;&gt; \\n ' +\n                  '&lt;h4&gt;' + result.title +'&lt;/h4&gt; \\n ' +\n                  '&lt;p&gt;' + result.description +'&lt;/p&gt; \\n ' +\n                '&lt;/div&gt;&lt;br&gt; \\n ' +\n                  '&lt;a href=&quot;' + result.url + '&quot; class=&quot;url-info&quot;&gt;&lt;i class=&quot;far fa-link&quot;&gt;&lt;/i&gt;' + result.url + '&lt;/a&gt; \\n ' +\n                '&lt;/div&gt;&lt;/a&gt;');\n            $( element ).remove();\n        }\n    })\n  });\n});\n</code></pre>\n<p>That template should serve you well for most GET API calls you're going to make via <strong>JQuery</strong>. Go wild and see what you can do to leverage APIs and expose some people's personal data or whatever.</p><div class=\"protip\">\n    See how I just created HTML by stringing together a bunch of ugly strings in Javascript? Don't do that; there are countless better ways to handle this, they just so happen to be out of scope for this post.\n</div><p>If we were to truly complete this example, we'd want to refine our logic to ensure we're not receiving nonsense. There's no validation on what's coming back in these calls, so there's nothing in place to protect us in the case that a page doesn't comply with our format.</p>","url":"https://hackersandslackers.com/making-ajax-calls-with-jquery/","uuid":"1fbf30e7-7ab7-48bb-8976-f100fdced4e0","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5ade784572a629364c5364c7"}},"pageContext":{"slug":"making-ajax-calls-with-jquery"}}