{"data":{"ghostPost":{"id":"Ghost__Post__5c12d7bfe875ad7bb867365d","title":"JIRA Analysis in Tableau","slug":"jira-analysis-in-tableau","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/05/tableau3@2x.jpg","excerpt":"Utilizing Tableau Desktop to visualize data pulled from JIRA.","custom_excerpt":"Utilizing Tableau Desktop to visualize data pulled from JIRA.","created_at_pretty":"27 May, 2018","published_at_pretty":"27 May, 2018","updated_at_pretty":"28 March, 2019","created_at":"2018-05-27T13:16:31.000-04:00","published_at":"2018-05-27T17:38:37.000-04:00","updated_at":"2019-03-28T05:50:40.000-04:00","meta_title":"JIRA Analysis in Tableau | Hackers and Slackers","meta_description":"Utilizing Tableau Desktop to visualize data pulled from JIRA","og_description":"Utilizing Tableau Desktop to visualize data pulled from JIRA","og_image":"https://hackersandslackers.com/content/images/2018/05/tableau3@2x.jpg","og_title":"JIRA Analysis in Tableau","twitter_description":"Utilizing Tableau Desktop to visualize data pulled from JIRA","twitter_image":"https://hackersandslackers.com/content/images/2018/05/tableau3@2x.jpg","twitter_title":"JIRA Analysis in Tableau","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Tableau","slug":"tableau","description":"Dissect Tableau server and implement hacks to improve your workflow, or simply become familiar with the Tableau desktop user interface.","feature_image":null,"meta_description":"Dissect Tableau server and implement hacks to improve your workflow, or simply become familiar with the Tableau desktop user interface.","meta_title":"Tableau Desktop & Server | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Tableau","slug":"tableau","description":"Dissect Tableau server and implement hacks to improve your workflow, or simply become familiar with the Tableau desktop user interface.","feature_image":null,"meta_description":"Dissect Tableau server and implement hacks to improve your workflow, or simply become familiar with the Tableau desktop user interface.","meta_title":"Tableau Desktop & Server | Hackers and Slackers","visibility":"public"},{"name":"BI","slug":"business-intelligence","description":"Business Intelligence, otherwise known as \"making nice reports for executives to ignore.\"","feature_image":null,"meta_description":null,"meta_title":"Business Intelligence Tools | Hackers and Slackers","visibility":"public"},{"name":"Atlassian","slug":"atlassian","description":"Beef up JIRA and Confluence by scripting and automating nearly anything. Empower teams with customized workflows and philosophies.","feature_image":null,"meta_description":"Beef up JIRA and Confluence by scripting and automating nearly anything. Empower teams with customized workflows and philosophies.","meta_title":"Atlassian Development for JIRA and Confluence. | Hackers and Slackers","visibility":"public"}],"plaintext":"Greetings to all my feathered friends upon this fine Memorial Day weekend.\nSeeing as how you're here, it appears as though we have a lot in common. Namely,\nwe've chosen to spend our three-day weekends on the internet, as opposed to\noutside.\n\nI've been meaning to build a  widget for this very blog for quite some time now.\nThe vision is to embed a custom Kanban board, which would pull issues from our\nprivate JIRA instance to be publicly displayed and formatted to our liking. To\nmy knowledge, nobody has bothered to attempt building something like this yet;\nprobably for good reason. There are a few gotchas off the bat: for one, JIRA\ncloud's REST API has introduced a \"bug\" which disallows cross-domain calls.\nFine.\n\nMy frustration with propriety software has come down to this: we're going to use\ntwo highly-protected closed source behemoth products against one another. Here's\nthe plan:\n\n * Pull JIRA issues into Tableau\n * Format the data in a worksheet\n * Output our data to a MongoDB database\n * Build a Kanban widget to display these issues\n * Hack the shit out of both JIRA and Tableau to make this process automated\n\nIf this seems like a convoluted way of achieving a small goal, it absolutely is\n- the goal is just as much to become familiar with these systems as is the end\nprize. There's a lot going on here, so for part 1 let's do a dry run of getting\nour issues from JIRA to MongoDB.\n\nThe Extraction\nPulling all issues from JIRA would normally be a simple API call, but in the\nspirit of learning new things we'll try out JIRA's Tableau connector\n[https://marketplace.atlassian.com/apps/1214641/all-in-one-tableau-connector-for-jira]\n. This essentially enables an endpoint specifically for Tableau to pull JIRA\ndata from. After installing the JIRA add-on, we'll be able to produce a URL for\nTableau to consume via the Web Data Connector source:\n\nThe connector allows us to select the data we're looking to pull from JIRA\nupfront. Keep our scope in mind: we're looking to simply display a \"card\" (think\nTrello for all you noobs out there) per issue, so we're only concerned with the\ninformation we'd need to build that. I've boiled this down to:\n\n * Key\n * Issue Type\n * Summary\n * Description\n * Status\n * Creator\n * Priority\n * Epic link\n * Epic Name\n * Epic Color\n\nThe field selection screen when setting up our connector.Work That Sheet\nWith our data imported, create a new worksheet. If you've used Tableau before\nyou're probably very aware of the default column limit on Worksheets. Before we\ndo anything, go to Analysis  > Table Layout  > Advanced  to increase the max\ncolumns from 6 to whatever, let's say 12.\n\nWARING: super sick advanced Tableau hacks incoming.Drag your data into the\n\"rows\" shelf to get something like this:\n\nOur first look at the data.There are a few problems here we need to clean up.\nFirst, take a look at the \"Epic Color\" column.\n\nEyes as Blue as ghx-label-7\nFor some reason, JIRA finds it appropriate to label its colors this cryptic\n code of ghx-label-#. Go ahead and add this to the long list of shitty decisions\nAtlassian has chosen to pursue.\n\nKeeping our goal in mind, we need \"epic colors\" to add some style and flavor to\nour board. Could we make the board without this? Probably, if you're a quitter.\nI'm going to save you some time here. I went ahead and inspected the epic\nelements in my JIRA instance to extract their hex values. Create a new\ncalculated field and add this query to manually map the label nonsense to actual\nvalues:\n\nIF [Epic Colour] = \"ghx-label-1\"\nTHEN \"#42526E\"\nELSEIF [Epic Colour] = \"ghx-label-2\"\nTHEN \"#FFC400\"\nELSEIF [Epic Colour] = \"ghx-label-3\"\nTHEN \"#FFE380\"\nELSEIF [Epic Colour] = \"ghx-label-4\"\nTHEN \"#4C9AFF\"\nELSEIF [Epic Colour] = \"ghx-label-5\"\nTHEN \"#00C7E6\"\nELSEIF [Epic Colour] = \"ghx-label-6\"\nTHEN \"#79F2C0\"\nELSEIF [Epic Colour] = \"ghx-label-7\"\nTHEN \"#C0B6F2\"\nELSEIF [Epic Colour] = \"ghx-label-8\"\nTHEN \"#998DD9\"\nELSEIF [Epic Colour] = \"ghx-label-9\"\nTHEN \"#FFBDAD\"\nELSEIF [Epic Colour] = \"ghx-label-10\"\nTHEN \"#B3D4FF\"\nELSEIF [Epic Colour] = \"ghx-label-11\"\nTHEN \"#79E2F2\"\nELSEIF [Epic Colour] = \"ghx-label-12\"\nTHEN \"#EBECF0\"\nELSEIF [Epic Colour] = \"ghx-label-13\"\nTHEN \"#57D9A3\"\nELSEIF [Epic Colour] = \"ghx-label-14\"\nTHEN \"#FF8F73\"\nELSEIF [Epic Colour] = \"ghx-label-15\"\nTHEN \"#57D9A3\"\nELSEIF [Epic Colour] = \"ghx-label-16\"\nTHEN \"#57D9A3\"\nELSEIF [Epic Colour] = \"ghx-label-17\"\nTHEN \"#57D9A3\"\nEND\n\nReplace the \"Epic Color\" field with this new calculated field to reveal our next\nproblem.\n\nEpic Lynx\nIf you check out our sheet now, we'll see the proper colors values come through,\nbut they will only be appearing for what seems to be one issue per \"Epic\" in our\nsheet:\n\nFeel free to moan and groan a bit while we realize what's happening. We're\nlooking at a list of issues  here, where epics  are themselves to be considered\nan issue. Therefore, only issues which are epics will have colors: issues which\nare linked  to said epics, however, will not. This is annoying. It took me a bit\nto come up with the following solution, although I'd be curious to hear if\nanybody has a better way of doing this.\n\nGo ahead and create a new worksheet. Add Epic Link  and Epic Color  to the\nsheet, and filter out the null values:\n\nCreating a table to perform a SQL-like JOINSo here's the game plan. Stay with me\non this one: we're going to use this sheet as a new source to perform a join \nwith our original data. Once we join on Epic Link, every issue containing an\nepic link will have the parent color as a field as well.\n\nExport this data as a CSV. Go back to Data Sources, open a new data source, and\nselect the CSV we just created. Create an inner merge and associate by epic\nlink:\n\nCreating JOINs via a UI!Now we're getting somewhere. Go back to the original\nsheet and drag the color field from the new data source on to the shelf:\n\nThe result.Pro move. Calculated.\n\nMondo Bongo\nYou'll notice I switched the order of our rows around to have \"Issue key\" as the\nfirst column. Originally I made the mistake of not doing this, only to realize\nthat Tableau will not export merged cells into a CSV. We need to order our\ncolumns starting with the most unique first to avoid any cell merging.\n\nExport that bad boy.\n\nThis is where we'll import our data into MongoDB. How dope is MongoDB, you ask?\nWell, one feature is the ability to import a CSV into an empty database to\nautomatically create the resulting schema and populate it with your values.\nYeah, it's that sick.\n\nI won't turn this into a MongoDB tutorial. Setting up a MongoDB Atlas cluster is\nsomewhat straightforward, and we can use the MongoDB Compass  client to simply\nimport the CSV we created.\n\nWhat Next?\nAs mentioned, our first take at this is going to be a dry run of building this\nwidget with our initial data import. We'll be building this widget in an\nExpressJS app, so next we'll focus on how to connect our app to MongoDB and\nextract this data.\n\nAfter that, we'll need to find a way to automate this process moving forward.\nFull disclosure: Tableau most definitely will not play nice with this, and I'm\niffy on how possible this is. All I know is I've got a Tableau Server instance\nup and running, and I paid good money for it. Therefore, it is my right to break\nit.\n\nI hope at least one or two people have found this to be helpful or interesting\nthus far. Again, I realize this process is a completely roundabout way of\naccomplishing this task... this is mostly a way for us to learn the ins-and-outs\nof these systems. Perhaps we might even build something special. Just think: if\nwe manage to close the loop on this system, we can leverage a GUI to create apps\nnearly as fast as we can imagine them.","html":"<p>Greetings to all my feathered friends upon this fine Memorial Day weekend. Seeing as how you're here, it appears as though we have a lot in common. Namely, we've chosen to spend our three-day weekends on the internet, as opposed to outside.</p><p>I've been meaning to build a  widget for this very blog for quite some time now. The vision is to embed a custom Kanban board, which would pull issues from our private JIRA instance to be publicly displayed and formatted to our liking. To my knowledge, nobody has bothered to attempt building something like this yet; probably for good reason. There are a few gotchas off the bat: for one, JIRA cloud's REST API has introduced a \"bug\" which disallows cross-domain calls. Fine.</p><p>My frustration with propriety software has come down to this: we're going to use two highly-protected closed source behemoth products against one another. Here's the plan:</p><ul><li>Pull JIRA issues into Tableau</li><li>Format the data in a worksheet</li><li>Output our data to a MongoDB database</li><li>Build a Kanban widget to display these issues</li><li>Hack the shit out of both JIRA and Tableau to make this process automated</li></ul><p>If this seems like a convoluted way of achieving a small goal, it absolutely is - the goal is just as much to become familiar with these systems as is the end prize. There's a lot going on here, so for part 1 let's do a dry run of getting our issues from JIRA to MongoDB.</p><h2 id=\"the-extraction\">The Extraction</h2><p>Pulling all issues from JIRA would normally be a simple API call, but in the spirit of learning new things we'll try out <a href=\"https://marketplace.atlassian.com/apps/1214641/all-in-one-tableau-connector-for-jira\">JIRA's Tableau connector</a>. This essentially enables an endpoint specifically for Tableau to pull JIRA data from. After installing the JIRA add-on, we'll be able to produce a URL for Tableau to consume via the Web Data Connector source:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card\"><img src=\"https://hackersandslackers.com/content/images/2018/05/Screenshot-2018-05-27-13.42.11.png\" class=\"kg-image\" alt=\"Connector\"></figure><!--kg-card-end: image--><p>The connector allows us to select the data we're looking to pull from JIRA upfront. Keep our scope in mind: we're looking to simply display a \"card\" (think Trello for all you noobs out there) per issue, so we're only concerned with the information we'd need to build that. I've boiled this down to:</p><ul><li>Key</li><li>Issue Type</li><li>Summary</li><li>Description</li><li>Status</li><li>Creator</li><li>Priority</li><li>Epic link</li><li>Epic Name</li><li>Epic Color</li></ul><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://hackersandslackers.com/content/images/2018/05/Screenshot-2018-05-27-13.52.24.png\" class=\"kg-image\" alt=\"Fields\"><figcaption>The field selection screen when setting up our connector.</figcaption></figure><!--kg-card-end: image--><h2 id=\"work-that-sheet\">Work That Sheet</h2><p>With our data imported, create a new worksheet. If you've used Tableau before you're probably very aware of the default column limit on Worksheets. Before we do anything, go to <strong>Analysis</strong> &gt; <strong>Table Layout</strong> &gt; <strong>Advanced</strong> to increase the max columns from 6 to whatever, let's say 12.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://hackersandslackers.com/content/images/2018/05/Screenshot-2018-05-27-16.02.46.png\" class=\"kg-image\" alt=\"Increase columns\"><figcaption>WARING: super sick advanced Tableau hacks incoming.</figcaption></figure><!--kg-card-end: image--><p>Drag your data into the \"rows\" shelf to get something like this:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://hackersandslackers.com/content/images/2019/03/tableausheet.png\" class=\"kg-image\"><figcaption>Our first look at the data.</figcaption></figure><!--kg-card-end: image--><p>There are a few problems here we need to clean up. First, take a look at the \"Epic Color\" column.</p><h3 id=\"eyes-as-blue-as-ghx-label-7\">Eyes as Blue as ghx-label-7</h3><p>For some reason, JIRA finds it appropriate to label its colors this cryptic  code of <em>ghx-label-#</em>. Go ahead and add this to the long list of shitty decisions Atlassian has chosen to pursue.</p><p>Keeping our goal in mind, we need \"epic colors\" to add some style and flavor to our board. Could we make the board without this? Probably, if you're a quitter. I'm going to save you some time here. I went ahead and inspected the epic elements in my JIRA instance to extract their hex values. Create a new calculated field and add this query to manually map the label nonsense to actual values:</p><!--kg-card-begin: code--><pre><code>IF [Epic Colour] = \"ghx-label-1\"\nTHEN \"#42526E\"\nELSEIF [Epic Colour] = \"ghx-label-2\"\nTHEN \"#FFC400\"\nELSEIF [Epic Colour] = \"ghx-label-3\"\nTHEN \"#FFE380\"\nELSEIF [Epic Colour] = \"ghx-label-4\"\nTHEN \"#4C9AFF\"\nELSEIF [Epic Colour] = \"ghx-label-5\"\nTHEN \"#00C7E6\"\nELSEIF [Epic Colour] = \"ghx-label-6\"\nTHEN \"#79F2C0\"\nELSEIF [Epic Colour] = \"ghx-label-7\"\nTHEN \"#C0B6F2\"\nELSEIF [Epic Colour] = \"ghx-label-8\"\nTHEN \"#998DD9\"\nELSEIF [Epic Colour] = \"ghx-label-9\"\nTHEN \"#FFBDAD\"\nELSEIF [Epic Colour] = \"ghx-label-10\"\nTHEN \"#B3D4FF\"\nELSEIF [Epic Colour] = \"ghx-label-11\"\nTHEN \"#79E2F2\"\nELSEIF [Epic Colour] = \"ghx-label-12\"\nTHEN \"#EBECF0\"\nELSEIF [Epic Colour] = \"ghx-label-13\"\nTHEN \"#57D9A3\"\nELSEIF [Epic Colour] = \"ghx-label-14\"\nTHEN \"#FF8F73\"\nELSEIF [Epic Colour] = \"ghx-label-15\"\nTHEN \"#57D9A3\"\nELSEIF [Epic Colour] = \"ghx-label-16\"\nTHEN \"#57D9A3\"\nELSEIF [Epic Colour] = \"ghx-label-17\"\nTHEN \"#57D9A3\"\nEND</code></pre><!--kg-card-end: code--><p>Replace the \"Epic Color\" field with this new calculated field to reveal our next problem.</p><h3 id=\"epic-lynx\">Epic Lynx</h3><p>If you check out our sheet now, we'll see the proper colors values come through, but they will only be appearing for what seems to be one issue per \"Epic\" in our sheet:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card\"><img src=\"https://hackersandslackers.com/content/images/2018/05/Screenshot-2018-05-27-16.18.05.png\" class=\"kg-image\" alt=\"Epic Colors\"></figure><!--kg-card-end: image--><p>Feel free to moan and groan a bit while we realize what's happening. We're looking at a list of <em>issues</em> here, where <em>epics</em> are themselves to be considered an issue. Therefore, only issues which are epics will have colors: issues which are <em>linked</em> to said epics, however, will not. This is annoying. It took me a bit to come up with the following solution, although I'd be curious to hear if anybody has a better way of doing this.</p><p>Go ahead and create a new worksheet. Add <strong>Epic Link</strong> and <strong>Epic Color</strong> to the sheet, and filter out the null values:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://hackersandslackers.com/content/images/2018/05/Screenshot-2018-05-27-16.26.24.png\" class=\"kg-image\" alt=\"Epic Color Sheet\"><figcaption>Creating a table to perform a SQL-like JOIN</figcaption></figure><!--kg-card-end: image--><p>So here's the game plan. Stay with me on this one: we're going to use this sheet as a new source to perform a <strong>join</strong> with our original data. Once we join on <strong>Epic Link</strong>, every issue containing an epic link will have the parent color as a field as well.</p><p>Export this data as a CSV. Go back to Data Sources, open a new data source, and select the CSV we just created. Create an inner merge and associate by epic link:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://hackersandslackers.com/content/images/2018/05/Screenshot-2018-05-27-16.31.36.png\" class=\"kg-image\" alt=\"Merge Inner\"><figcaption>Creating JOINs via a UI!</figcaption></figure><!--kg-card-end: image--><p>Now we're getting somewhere. Go back to the original sheet and drag the color field from the new data source on to the shelf:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://hackersandslackers.com/content/images/2018/05/Screenshot-2018-05-27-16.33.27.png\" class=\"kg-image\" alt=\"Issues with colors\"><figcaption>The result.</figcaption></figure><!--kg-card-end: image--><p>Pro move. Calculated.</p><h2 id=\"mondo-bongo\">Mondo Bongo</h2><p>You'll notice I switched the order of our rows around to have \"Issue key\" as the first column. Originally I made the mistake of not doing this, only to realize that Tableau will not export merged cells into a CSV. We need to order our columns starting with the most unique first to avoid any cell merging.</p><p>Export that bad boy.</p><p>This is where we'll import our data into MongoDB. How dope is MongoDB, you ask? Well, one feature is the ability to import a CSV into an empty database to automatically create the resulting schema and populate it with your values. Yeah, it's that sick.</p><p>I won't turn this into a MongoDB tutorial. Setting up a MongoDB Atlas cluster is somewhat straightforward, and we can use the <strong>MongoDB Compass</strong> client to simply import the CSV we created.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card\"><img src=\"https://hackersandslackers.com/content/images/2018/05/Screenshot-2018-05-27-16.40.19.png\" class=\"kg-image\" alt=\"MongoDB\"></figure><!--kg-card-end: image--><h2 id=\"what-next\">What Next?</h2><p>As mentioned, our first take at this is going to be a dry run of building this widget with our initial data import. We'll be building this widget in an ExpressJS app, so next we'll focus on how to connect our app to MongoDB and extract this data.</p><p>After that, we'll need to find a way to automate this process moving forward. Full disclosure: Tableau most definitely will not play nice with this, and I'm iffy on how possible this is. All I know is I've got a Tableau Server instance up and running, and I paid good money for it. Therefore, it is my right to break it.</p><p>I hope at least one or two people have found this to be helpful or interesting thus far. Again, I realize this process is a completely roundabout way of accomplishing this task... this is mostly a way for us to learn the ins-and-outs of these systems. Perhaps we might even build something special. Just think: if we manage to close the loop on this system, we can leverage a GUI to create apps nearly as fast as we can imagine them.</p>","url":"https://hackersandslackers.com/jira-analysis-in-tableau/","uuid":"e3aebe6d-5ae2-4fca-97f5-b805c77cad60","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b0ae7ef057ed3587f8621b3"}},"pageContext":{"slug":"jira-analysis-in-tableau"}}