{"data":{"ghostPost":{"id":"Ghost__Post__5c12d7bfe875ad7bb867364b","title":"Python's Requests Library: Bring Your Scripts to the Web","slug":"pythons-requests-library","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/05/snek@2x.jpg","excerpt":"Get familiar with what might become your most used Python library.","custom_excerpt":"Get familiar with what might become your most used Python library.","created_at_pretty":"01 May, 2018","published_at_pretty":"02 May, 2018","updated_at_pretty":"25 November, 2018","created_at":"2018-05-01T18:38:59.000-04:00","published_at":"2018-05-01T20:10:32.000-04:00","updated_at":"2018-11-25T09:55:28.000-05:00","meta_title":"Python's Requests Library | Hackers and Slackers","meta_description":"Get familiar with what might become your most used Python library","og_description":"APIs like a snake","og_image":"https://hackersandslackers.com/content/images/2018/05/snek@2x.jpg","og_title":"Python's Requests Library","twitter_description":"APIs like a snake","twitter_image":"https://hackersandslackers.com/content/images/2018/05/snek@2x.jpg","twitter_title":"Python's Requests Library","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"REST APIs","slug":"restapis","description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","feature_image":null,"meta_description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","meta_title":"Consuming and Building REST APIs | Hackers and Slackers","visibility":"public"},{"name":"Atlassian","slug":"atlassian","description":"Beef up JIRA and Confluence by scripting and automating nearly anything. Empower teams with customized workflows and philosophies.","feature_image":null,"meta_description":"Beef up JIRA and Confluence by scripting and automating nearly anything. Empower teams with customized workflows and philosophies.","meta_title":"Atlassian Development for JIRA and Confluence. | Hackers and Slackers","visibility":"public"}],"plaintext":"Last episode [https://hackersandslackers.com/making-ajax-calls-with-jquery/]  we\ncovered every programming noob's favorite 'A-ha' moment: making GET requests\nusing AJAX. Stepping stones such as these can serve as great turning points in a\ncareer, but they also expose how little we still know. For instance, when we\nintegrated the functional logic of APIs on the client side, we actually broke a\ncardinal rule: storing and passing private keys on the client side like an\nidiot. Does that make everything we learned useless? Not entirely, but kinda\nyeah.\n\nToday we'll do the equivalent in Python by using the requests  library. Requests\nis successor to Urllib, both of which are simple tools to retrieve or modify\ninformation on the web, most commonly in the case of APIs.\n\nWe'll be using JIRA's API as an example of how to format GET and POST requests.\nJIRA's API in particular is an excellent example of a powerful and useful API.\nThere's a ton we can do, thus a perfect demonstration of how much power one\nlibrary can give you.\n\nBatteries Not Included\nEven I sometimes forget that requests is not a built-in Python library. Make\nsure requests  is installed in your environment via pip install requests.\n\nCreate a file in your directory called creds.py  to store your credentials. Make\nsure to add that file to your .gitignore  if you plan on committing anything any\ntime soon.\n\n# creds.py\nusername = fake.user\npassword = securepassword123\n\n\nThe only libraries we need to import are requests  and json. Make sure you\nimport your credentials from the file you created earlier.\n\nimport requests\nimport json\nfrom creds import username, password\n\n\nGET Requests\nAs long as you have a URL, you can make a GET request. The requests library will\nreturn the content of any page it hits; if you make a request to an HTML page,\nyour response will be that page's HTML source.\n\nWhen we know what sort of data we're expecting to receive back, we can specify\nthe expected content type  by passing the headers  argument, and specifying the \nContent-Type. Authentication is handled via passing arguments as well,\nspecifically the auth  argument. Take a look at what you can pass in a GET\nrequest:\n\nCommon GET Arguments\n * url:  The URL we will either retrieve or pass the information along to.\n * parameters  (optional):  Depending on the API, some URLs can accept a\n   dictionary of variables to be passed along with the URL. These are called\n   query strings; you notice these all the time whenever you come across a URL\n   that looks like nonsense... that nonsense is information!\n * headers  (optional): A collection of metadata sent along with the request.\n   Our browsers send HTTP headers every time we visit a site, but the scope of\n   what a header value might cover ranges from tokens to content types.\n * auth  (optional):  Method for logging in if needed. Basic/Digest/Custom HTTP\n   Auth.\n\nLet’s GET Some\nWe're going to make a relatively simple request to pull open tickets from a JIRA\nproject called EXM.\n\nThis request will:\n\n * Accept our destination's base URL\n * Append 'search/' (the endpoint for searching issues)\n * Pass two parameters:  A query to return issues A flag to show the issue\n   history\n * Authenticate with our username/password\n * Print the result\n\nimport requests\nimport json\nfrom creds import username\nfrom creds import password\n\nbase_url = 'https://examplejira.com/rest/api/2/'\nheaders = {'Content-Type': 'application/json'}\nparams = {\n    'jql': 'project = EXM AND resolution is not EMPTY',\n    'expand': 'changelog',\n}\n\nreq = requests.get(base_url + 'search/', headers=headers, params=params, auth=(username, password))\n\nprint(req.content)\n\n\nNotice that setting a variable equal to the request will equal the result of\nthat request. Printing r  alone would return a numerical status code (200, 404,\netc). The response that comes back from request such as r  are actually complex\nobjects — printing r.json()  will display the contents of the response as a JSON\nobject. Alternatively, r.text  returns the raw response as a string.\n\nIf your response comes back with an error, remember that you can always debug\nyour requests via Postman [https://www.getpostman.com/].\n\nIf all went well with our request, r.json()  should return something similar to\nthe following:\n\n{  \n   \"expand\":\"schema,names\",\n   \"startAt\":0,\n   \"maxResults\":50,\n   \"total\":63,\n   \"issues\":[  \n      {  \n         \"expand\":\"operations,versionedRepresentations,editmeta,changelog,renderedFields\",\n         \"id\":\"10558\",\n         \"self\":\"https://hackersandslackers.atlassian.net/rest/api/2/issue/10558\",\n         \"key\":\"HSB-63\",\n         \"fields\":{  \n            \"issuetype\":{  \n               \"self\":\"https://hackersandslackers.atlassian.net/rest/api/2/issuetype/10007\",\n               \"id\":\"10007\",\n               \"description\":\"Non-development related content task\",\n               \"iconUrl\":\"https://hackersandslackers.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10306&avatarType=issuetype\",\n               \"name\":\"Content\",\n               \"subtask\":false,\n               \"avatarId\":10306\n            },\n         }\n    ]\n}\n\n\nThe entirety of the request is probably much longer (depending on how many\nissues you have). Notice how JIRA will only return a maximum of 50 results\nunless otherwise specified (this is one of the parameters they accept). Feel\nfree to check out JIRA's API documentation to see what else you can do, but be\nwarned: their docs kind of suck.\n\nRetrieving information is cool, but modifying it is even better. Here's a use\ncase which might be immediately useful: creating a user.\n\nPOST Requests\nIn addition to the arguments GET requests can receive, POST requests can also\naccept arguments like as data.  This is where we tell the API the specifics of\nwhat we're trying to do.\n\nCommon POST Arguments\n * url: Endpoint URL.\n * params  (optional): Dictionary of variables to be passed as parameters of a\n   query string.\n * body  (optional): A JSON or  ML object sent in the body of the Request.\n * headers  (optional):  Dictionary of HTTP Headers to send with the Request.\n * auth  (optional):  Auth to enable Basic/Digest/Custom HTTP Auth.\n\nLet There be Users\nThe main difference between this request and the last will be what we pass via\nthe data  argument. For example's sake we'll be creating a user named bro  with\nthe appropriate broiest details.\n\nTake special note of json.dumps(userdata). If an endpoint is expecting JSON (it\nprobably is) we need to explicitly convert our dictionary of values to JSON\nbefore making this request.\n\nimport requests\nimport json\nfrom creds import username\nfrom creds import password\n\nbase_url = \"https://examplejira.com/rest/api/2/\"\nheaders = {'Content-Type': 'application/json'}\nuserdata = {\n  'username': 'bro',\n  'name': 'Bro',\n  'password': '32456456',\n  'email': 'bro@broiest.com',\n  \"notification\" : \"true\"\n}\n\nreq = requests.post(base_url + 'user/', data=json.dumps(userdata), headers=headers, auth=(username, password))\n\nprint(req.content)\n\n\n\nYou just created a user. That's basically like giving birth to a child.\nCongratulations.\n\nAdvanced POST Requests\nAs fun as it is to create bro users in JIRA instances, one-off usage of APIs\nlike this isn't really useful. We haven't done anything that we couldn't have\njust done ourselves via the UI.\n\nTo spice things up, here's a very real use case: importing a list of users via a\nCSV. As we speak, people in corporations around the world are manually adding\nthousands of users by hand to internal SaaS products. Don't be that person.\n\nThis request will do the following:\n\n * Use pandas  to open users.csv   (presumably this CSV should have columns for\n   name, email, etc)\n * Generate a random password using secrets\n * Use the CSV to create accounts with each user's information\n * Output the result to users_created.csv\n * \n\n# JIRA User Import\n\nimport pandas as pd\nimport requests\nimport secrets\nimport json\n\n# store credentials\nfrom creds import username\nfrom creds import password\n\n# dataframe from csv\nuser_df = pd.read_csv('users.csv')\n\n# store results of import\nrows_list = []\n\nheaders = {'Content-Type': 'application/json'}\nbase_url = \"https://examplejira.com/rest/api/2/\"\n\n# generate 20-character password\ndef generate_password():\n    alphabet = string.ascii_letters + string.digits\n    password = ''.join(secrets.choice(alphabet) for i in range(20))\n    return password\n\n# iterate and create users\nfor index, row in user_df.iterrows():\n    userdata = {\n        \"name\": row['email'].split('@')[0],\n        \"password\": generate_password(),\n        \"emailAddress\": row['email'],\n        \"displayName\": row['name'],\n        \"notification\" : \"true\"\n    }\n    req = requests.post(base_url + 'user/', data=json.dumps(userdata), headers=headers, auth=(jirauser, password))\n    rows_list.append(userdata) # adds row to array to be tracked\n    # create & export results to a csv\n    users_imported_df = pd.DataFrame(rows_list)\n    users_imported_df.to_csv('users_created.csv')\n\n\n\nIf this worked for you, take a moment to put something in perspective: you just\nautomated somebody's entire 9-5 job in a few minutes.\n\nAlso feel free to reflect on our purpose as a species. If automating this was so\nstraightforward, why do so many of us choose not to automate more tasks? Is our\nentire economy a hoax created to grant the masses an illusion of free will? Are\nwe running around in circles trying to solve problems we create ourselves, to\npay the bills which come with being employed? Finally: if robots are clearly\nthis superior, is there a purpose for the human race at all?\n\nNow you're asking the real questions. Hail Megatron.","html":"<p><a href=\"https://hackersandslackers.com/making-ajax-calls-with-jquery/\">Last episode</a> we covered every programming noob's favorite 'A-ha' moment: making GET requests using AJAX. Stepping stones such as these can serve as great turning points in a career, but they also expose how little we still know. For instance, when we integrated the functional logic of APIs on the client side, we actually broke a cardinal rule: storing and passing private keys on the client side like an idiot. Does that make everything we learned useless? Not entirely, but kinda yeah.</p><p>Today we'll do the equivalent in Python by using the <em>requests</em> library. Requests is successor to Urllib, both of which are simple tools to retrieve or modify information on the web, most commonly in the case of APIs.</p><p>We'll be using JIRA's API as an example of how to format GET and POST requests. JIRA's API in particular is an excellent example of a powerful and useful API. There's a ton we can do, thus a perfect demonstration of how much power one library can give you.</p><h2 id=\"batteries-not-included\">Batteries Not Included</h2><p>Even I sometimes forget that requests is not a built-in Python library. Make sure <strong>requests</strong> is installed in your environment via <code>pip install requests</code>.</p><p>Create a file in your directory called <code>creds.py</code> to store your credentials. Make sure to add that file to your <code>.gitignore</code> if you plan on committing anything any time soon.</p><pre><code class=\"language-python\"># creds.py\nusername = fake.user\npassword = securepassword123\n</code></pre>\n<p>The only libraries we need to import are <code>requests</code> and <code>json</code>. Make sure you import your credentials from the file you created earlier.</p><pre><code class=\"language-python\">import requests\nimport json\nfrom creds import username, password\n</code></pre>\n<h2 id=\"get-requests\">GET Requests</h2><p>As long as you have a URL, you can make a GET request. The requests library will return the content of any page it hits; if you make a request to an HTML page, your response will be that page's HTML source.</p><p>When we know what sort of data we're expecting to receive back, we can specify the expected <em>content type</em> by passing the <em>headers</em> argument, and specifying the <em>Content-Type</em>. Authentication is handled via passing arguments as well, specifically the <em>auth</em> argument. Take a look at what you can pass in a GET request:</p><h3 id=\"common-get-arguments\">Common GET Arguments</h3><ul><li><strong>url:</strong> The URL we will either retrieve or pass the information along to.</li><li><strong>parameters</strong> (optional):  Depending on the API, some URLs can accept a dictionary of variables to be passed along with the URL. These are called query strings; you notice these all the time whenever you come across a URL that looks like nonsense... that nonsense is information!</li><li><strong>headers</strong> (optional): A collection of metadata sent along with the request. Our browsers send HTTP headers every time we visit a site, but the scope of what a header value might cover ranges from tokens to content types.</li><li><strong>auth</strong> (optional):  Method for logging in if needed. Basic/Digest/Custom HTTP Auth.</li></ul><h3 id=\"let-s-get-some\">Let’s GET Some</h3><p>We're going to make a relatively simple request to pull open tickets from a JIRA project called <em>EXM.</em></p><p>This request will:</p><ul><li>Accept our destination's base URL</li><li>Append 'search/' (the endpoint for searching issues)</li><li>Pass two parameters:  A query to return issues A flag to show the issue history</li><li>Authenticate with our username/password</li><li>Print the result</li></ul><pre><code class=\"language-python\">import requests\nimport json\nfrom creds import username\nfrom creds import password\n\nbase_url = 'https://examplejira.com/rest/api/2/'\nheaders = {'Content-Type': 'application/json'}\nparams = {\n    'jql': 'project = EXM AND resolution is not EMPTY',\n    'expand': 'changelog',\n}\n\nreq = requests.get(base_url + 'search/', headers=headers, params=params, auth=(username, password))\n\nprint(req.content)\n</code></pre>\n<p>Notice that setting a variable equal to the request will equal the result of that request. Printing <code>r</code> alone would return a numerical status code (200, 404, etc). The response that comes back from request such as <code>r</code> are actually complex objects — printing <code>r.json()</code> will display the contents of the response as a JSON object. Alternatively, <code>r.text</code> returns the raw response as a string.</p><p>If your response comes back with an error, remember that you can always debug your requests via <a href=\"https://www.getpostman.com/\" rel=\"noopener\">Postman</a>.</p><p>If all went well with our request, <code>r.json()</code> should return something similar to the following:</p><pre><code class=\"language-json\">{  \n   &quot;expand&quot;:&quot;schema,names&quot;,\n   &quot;startAt&quot;:0,\n   &quot;maxResults&quot;:50,\n   &quot;total&quot;:63,\n   &quot;issues&quot;:[  \n      {  \n         &quot;expand&quot;:&quot;operations,versionedRepresentations,editmeta,changelog,renderedFields&quot;,\n         &quot;id&quot;:&quot;10558&quot;,\n         &quot;self&quot;:&quot;https://hackersandslackers.atlassian.net/rest/api/2/issue/10558&quot;,\n         &quot;key&quot;:&quot;HSB-63&quot;,\n         &quot;fields&quot;:{  \n            &quot;issuetype&quot;:{  \n               &quot;self&quot;:&quot;https://hackersandslackers.atlassian.net/rest/api/2/issuetype/10007&quot;,\n               &quot;id&quot;:&quot;10007&quot;,\n               &quot;description&quot;:&quot;Non-development related content task&quot;,\n               &quot;iconUrl&quot;:&quot;https://hackersandslackers.atlassian.net/secure/viewavatar?size=xsmall&amp;avatarId=10306&amp;avatarType=issuetype&quot;,\n               &quot;name&quot;:&quot;Content&quot;,\n               &quot;subtask&quot;:false,\n               &quot;avatarId&quot;:10306\n            },\n         }\n    ]\n}\n</code></pre>\n<p>The entirety of the request is probably much longer (depending on how many issues you have). Notice how JIRA will only return a maximum of 50 results unless otherwise specified (this is one of the parameters they accept). Feel free to check out JIRA's API documentation to see what else you can do, but be warned: their docs kind of suck.</p><p>Retrieving information is cool, but modifying it is even better. Here's a use case which might be immediately useful: creating a user.</p><h2 id=\"post-requests\">POST Requests</h2><p>In addition to the arguments GET requests can receive, POST requests can also accept arguments like as <em>data.</em> This is where we tell the API the specifics of what we're trying to do.</p><h3 id=\"common-post-arguments\">Common POST Arguments</h3><ul><li><strong>url</strong>: Endpoint URL.</li><li><strong>params</strong> (optional): Dictionary of variables to be passed as parameters of a query string.</li><li><strong>body</strong> (optional): A JSON or  ML object sent in the body of the Request.</li><li><strong>headers</strong> (optional):  Dictionary of HTTP Headers to send with the Request.</li><li><strong>auth</strong> (optional):  Auth to enable Basic/Digest/Custom HTTP Auth.</li></ul><h3 id=\"let-there-be-users\">Let There be Users</h3><p>The main difference between this request and the last will be what we pass via the <em>data</em> argument. For example's sake we'll be creating a user named <em>bro</em> with the appropriate broiest details.</p><p>Take special note of <code>json.dumps(userdata)</code>. If an endpoint is expecting JSON (it probably is) we need to explicitly convert our dictionary of values to JSON before making this request.</p><pre><code class=\"language-python\">import requests\nimport json\nfrom creds import username\nfrom creds import password\n\nbase_url = &quot;https://examplejira.com/rest/api/2/&quot;\nheaders = {'Content-Type': 'application/json'}\nuserdata = {\n  'username': 'bro',\n  'name': 'Bro',\n  'password': '32456456',\n  'email': 'bro@broiest.com',\n  &quot;notification&quot; : &quot;true&quot;\n}\n\nreq = requests.post(base_url + 'user/', data=json.dumps(userdata), headers=headers, auth=(username, password))\n\nprint(req.content)\n\n</code></pre>\n<p>You just created a user. That's basically like giving birth to a child. Congratulations.</p><h2 id=\"advanced-post-requests\">Advanced POST Requests</h2><p>As fun as it is to create bro users in JIRA instances, one-off usage of APIs like this isn't really useful. We haven't done anything that we couldn't have just done ourselves via the UI.</p><p>To spice things up, here's a very real use case: importing a list of users via a CSV. As we speak, people in corporations around the world are manually adding thousands of users by hand to internal SaaS products. Don't be that person.</p><p>This request will do the following:</p><ul><li>Use <strong>pandas</strong> to open <em>users.csv</em>  (presumably this CSV should have columns for name, email, etc)  </li><li>Generate a random password using <strong>secrets</strong></li><li>Use the CSV to create accounts with each user's information</li><li>Output the result to <em>users_created.csv</em></li><li></li></ul><pre><code class=\"language-python\"># JIRA User Import\n\nimport pandas as pd\nimport requests\nimport secrets\nimport json\n\n# store credentials\nfrom creds import username\nfrom creds import password\n\n# dataframe from csv\nuser_df = pd.read_csv('users.csv')\n\n# store results of import\nrows_list = []\n\nheaders = {'Content-Type': 'application/json'}\nbase_url = &quot;https://examplejira.com/rest/api/2/&quot;\n\n# generate 20-character password\ndef generate_password():\n    alphabet = string.ascii_letters + string.digits\n    password = ''.join(secrets.choice(alphabet) for i in range(20))\n    return password\n\n# iterate and create users\nfor index, row in user_df.iterrows():\n    userdata = {\n        &quot;name&quot;: row['email'].split('@')[0],\n        &quot;password&quot;: generate_password(),\n        &quot;emailAddress&quot;: row['email'],\n        &quot;displayName&quot;: row['name'],\n        &quot;notification&quot; : &quot;true&quot;\n    }\n    req = requests.post(base_url + 'user/', data=json.dumps(userdata), headers=headers, auth=(jirauser, password))\n    rows_list.append(userdata) # adds row to array to be tracked\n    # create &amp; export results to a csv\n    users_imported_df = pd.DataFrame(rows_list)\n    users_imported_df.to_csv('users_created.csv')\n\n</code></pre>\n<p>If this worked for you, take a moment to put something in perspective: you just automated somebody's entire 9-5 job in a few minutes.</p><p>Also feel free to reflect on our purpose as a species. If automating this was so straightforward, why do so many of us choose not to automate more tasks? Is our entire economy a hoax created to grant the masses an illusion of free will? Are we running around in circles trying to solve problems we create ourselves, to pay the bills which come with being employed? Finally: if robots are clearly this superior, is there a purpose for the human race at all?</p><p>Now you're asking the real questions. Hail Megatron.</p>","url":"https://hackersandslackers.com/pythons-requests-library/","uuid":"9ee37ee8-83d1-452a-acb4-b90b96cf6725","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5ae8ec83ed09bd1cb7110e65"}},"pageContext":{"slug":"pythons-requests-library"}}