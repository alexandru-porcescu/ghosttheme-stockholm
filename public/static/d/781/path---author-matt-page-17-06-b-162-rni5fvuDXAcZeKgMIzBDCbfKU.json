{"data":{"ghostAuthor":{"slug":"matt","name":"Matthew Alhonte","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","cover_image":"https://res-1.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/lynxcover_o.jpg","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","location":"Center of the Universe","website":null,"twitter":"@MattAlhonte","facebook":null},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736b9","title":"Lynx Roundup, August 2nd","slug":"lynx-roundup-august-2nd","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx34@2x.jpg","excerpt":"Web architecture!  Goodreads!  Migration!","custom_excerpt":"Web architecture!  Goodreads!  Migration!","created_at_pretty":"21 July, 2018","published_at_pretty":"02 August, 2018","updated_at_pretty":"02 August, 2018","created_at":"2018-07-20T22:28:35.000-04:00","published_at":"2018-08-02T07:00:00.000-04:00","updated_at":"2018-08-02T13:24:43.000-04:00","meta_title":"Web architecture!  Goodreads!  Migration! | Hackers And Slackers","meta_description":"Web architecture!  Goodreads!  Migration!","og_description":"Web architecture!  Goodreads!  Migration!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx34@2x.jpg","og_title":"Lynx Roundup, August 2nd","twitter_description":"Web architecture!  Goodreads!  Migration!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx34@2x.jpg","twitter_title":"Lynx Roundup, August 2nd","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://muratbuffalo.blogspot.com/2018/07/if-youre-not-writing-program-dont-use.html\n\n\n\nhttps://engineering.videoblocks.com/web-architecture-101-a3224e126947?ref=abhimanyu\n\n\n\nhttps://www.deps.co/blog/google-cloud-platform-good-bad-ugly/\n\n\n\nhttps://aws.amazon.com/blogs/big-data/how-goodreads-offloads-amazon-dynamodb-tables-to-amazon-s3-and-queries-them-using-amazon-athena/\n\n\n\nhttps://medium.com/prodopsio/migrating-a-100k-requests-per-minute-production-from-aws-elastic-beanstalk-to-ecs-ed26b62ff98c\n\n\n\nhttps://engineering.depop.com/aws-migration-a-depop-story-1444e9aaad31","html":"<p></p><p><a href=\"https://muratbuffalo.blogspot.com/2018/07/if-youre-not-writing-program-dont-use.html\">https://muratbuffalo.blogspot.com/2018/07/if-youre-not-writing-program-dont-use.html</a></p><p></p><p><a href=\"https://engineering.videoblocks.com/web-architecture-101-a3224e126947?ref=abhimanyu\">https://engineering.videoblocks.com/web-architecture-101-a3224e126947?ref=abhimanyu</a></p><p></p><p><a href=\"https://www.deps.co/blog/google-cloud-platform-good-bad-ugly/\">https://www.deps.co/blog/google-cloud-platform-good-bad-ugly/</a></p><p></p><p><a href=\"https://aws.amazon.com/blogs/big-data/how-goodreads-offloads-amazon-dynamodb-tables-to-amazon-s3-and-queries-them-using-amazon-athena/\">https://aws.amazon.com/blogs/big-data/how-goodreads-offloads-amazon-dynamodb-tables-to-amazon-s3-and-queries-them-using-amazon-athena/</a></p><p></p><p><a href=\"https://medium.com/prodopsio/migrating-a-100k-requests-per-minute-production-from-aws-elastic-beanstalk-to-ecs-ed26b62ff98c\">https://medium.com/prodopsio/migrating-a-100k-requests-per-minute-production-from-aws-elastic-beanstalk-to-ecs-ed26b62ff98c</a></p><p></p><p><a href=\"https://engineering.depop.com/aws-migration-a-depop-story-1444e9aaad31\">https://engineering.depop.com/aws-migration-a-depop-story-1444e9aaad31</a></p>","url":"https://hackersandslackers.com/lynx-roundup-august-2nd/","uuid":"959e3cf3-69a1-40cc-a13e-b19a6fba6745","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b529a53529141018f9dad0e"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736b8","title":"Lynx Roundup, August 1st","slug":"lynx-roundup-august-1st","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/lynx60-2.jpg","excerpt":"Cassandra!  Text mining!  And make sure to Support Vector Machines!","custom_excerpt":"Cassandra!  Text mining!  And make sure to Support Vector Machines!","created_at_pretty":"21 July, 2018","published_at_pretty":"01 August, 2018","updated_at_pretty":"23 March, 2019","created_at":"2018-07-20T22:26:17.000-04:00","published_at":"2018-08-01T07:00:00.000-04:00","updated_at":"2019-03-22T23:54:09.000-04:00","meta_title":"Lynx Roundup, August 1st | Hackers And Slackers","meta_description":"Cassandra!  Text mining!  And make sure to Support Vector Machines!","og_description":"Cassandra!  Text mining!  And make sure to Support Vector Machines!","og_image":"https://hackersandslackers.com/content/images/2019/03/lynx60-2.jpg","og_title":"Lynx Roundup, August 1st","twitter_description":"Cassandra!  Text mining!  And make sure to Support Vector Machines!","twitter_image":"https://hackersandslackers.com/content/images/2019/03/lynx60-1.jpg","twitter_title":"Lynx Roundup, August 1st","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://aws.amazon.com/blogs/database/stream-changes-from-amazon-rds-for-postgresql-using-amazon-kinesis-data-streams-and-aws-lambda/\n\n\n\nhttps://github.com/alexklibisz/elastik-nearest-neighbors/\n\n\n\nhttps://dzone.com/articles/best-practices-for-cassandra-data-modeling\n\n\n\nhttps://www.kdnuggets.com/2018/07/text-mining-command-line.html\n\n\n\nhttps://www.datacamp.com/community/tutorials/svm-classification-scikit-learn-python\n\n\n\nhttps://datacenterfrontier.com/as-cloud-investment-surges-whats-the-new-normal-for-data-centers/","html":"<p></p><p><a href=\"https://aws.amazon.com/blogs/database/stream-changes-from-amazon-rds-for-postgresql-using-amazon-kinesis-data-streams-and-aws-lambda/\">https://aws.amazon.com/blogs/database/stream-changes-from-amazon-rds-for-postgresql-using-amazon-kinesis-data-streams-and-aws-lambda/</a></p><p></p><p><a href=\"https://github.com/alexklibisz/elastik-nearest-neighbors/\">https://github.com/alexklibisz/elastik-nearest-neighbors/</a></p><p></p><p><a href=\"https://dzone.com/articles/best-practices-for-cassandra-data-modeling\">https://dzone.com/articles/best-practices-for-cassandra-data-modeling</a></p><p></p><p><a href=\"https://www.kdnuggets.com/2018/07/text-mining-command-line.html\">https://www.kdnuggets.com/2018/07/text-mining-command-line.html</a></p><p></p><p><a href=\"https://www.datacamp.com/community/tutorials/svm-classification-scikit-learn-python\">https://www.datacamp.com/community/tutorials/svm-classification-scikit-learn-python</a></p><p></p><p><a href=\"https://datacenterfrontier.com/as-cloud-investment-surges-whats-the-new-normal-for-data-centers/\">https://datacenterfrontier.com/as-cloud-investment-surges-whats-the-new-normal-for-data-centers/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-august-1st/","uuid":"1b245639-3d17-41bd-8c26-6976662d07a7","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b5299c9529141018f9dad0b"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736b7","title":"Lynx Roundup, July 31st","slug":"lynx-roundup-july-31st","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx24-2@2x.jpg","excerpt":"NumPy!  Spark!  Turbulent viscosity!","custom_excerpt":"NumPy!  Spark!  Turbulent viscosity!","created_at_pretty":"21 July, 2018","published_at_pretty":"31 July, 2018","updated_at_pretty":"31 July, 2018","created_at":"2018-07-20T22:22:53.000-04:00","published_at":"2018-07-31T07:00:00.000-04:00","updated_at":"2018-07-31T07:00:00.000-04:00","meta_title":"NumPy!  Spark!  Turbulent viscosity! | Hackers And Slackers","meta_description":"NumPy!  Spark!  Turbulent viscosity!","og_description":"NumPy!  Spark!  Turbulent viscosity!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx24-2@2x.jpg","og_title":"Lynx Roundup, July 31st","twitter_description":"NumPy!  Spark!  Turbulent viscosity!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx24-2@2x.jpg","twitter_title":"Lynx Roundup, July 31st","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"http://zwmiller.com/projects/setting_up_spark_cluster.html\n\n\n\nhttp://zwmiller.com/blogs/why_numpy_is_so_great.html\n\n\n\nhttps://www.quora.com/How-do-you-print-Hello-World-in-assembly-language-Is-this-much-more-difficult-than-it-would-be-in-machine-language\n\n\n\nhttps://www.quora.com/What-is-the-concept-of-turbulent-viscosity\n\n\n\nShots fired!http://blog.memsql.com/nosql/","html":"<p></p><p><a href=\"http://zwmiller.com/projects/setting_up_spark_cluster.html\">http://zwmiller.com/projects/setting_up_spark_cluster.html</a></p><p></p><p><a href=\"http://zwmiller.com/blogs/why_numpy_is_so_great.html\">http://zwmiller.com/blogs/why_numpy_is_so_great.html</a></p><p></p><p><a href=\"https://www.quora.com/How-do-you-print-Hello-World-in-assembly-language-Is-this-much-more-difficult-than-it-would-be-in-machine-language\">https://www.quora.com/How-do-you-print-Hello-World-in-assembly-language-Is-this-much-more-difficult-than-it-would-be-in-machine-language</a></p><p></p><p><a href=\"https://www.quora.com/What-is-the-concept-of-turbulent-viscosity\">https://www.quora.com/What-is-the-concept-of-turbulent-viscosity</a></p><p></p><p>Shots fired!  <a href=\"http://blog.memsql.com/nosql/\">http://blog.memsql.com/nosql/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-july-31st/","uuid":"db867837-2278-433d-8f99-2f5596f8ef00","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b5298fd529141018f9dad08"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736c4","title":"All That Is Solid Melts Into Graphs","slug":"all-that-is-solid-melts-into-graphs","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/07/iceberg@2x.jpg","excerpt":"Reshaping Pandas dataframes with a real-life example, and graphing it with Altair.","custom_excerpt":"Reshaping Pandas dataframes with a real-life example, and graphing it with Altair.","created_at_pretty":"26 July, 2018","published_at_pretty":"30 July, 2018","updated_at_pretty":"02 February, 2019","created_at":"2018-07-25T21:53:23.000-04:00","published_at":"2018-07-30T07:30:00.000-04:00","updated_at":"2019-02-02T04:07:03.000-05:00","meta_title":"All That Is Solid Melts Into Graphs | Hackers and Slackers","meta_description":"Reshaping Pandas dataframes with a real-life example, and graphing it with Altair","og_description":"Reshaping Pandas dataframes with a real-life example, and graphing it with #Altair","og_image":"https://hackersandslackers.com/content/images/2018/07/iceberg@2x.jpg","og_title":"All That Is Solid Melts Into Graphs","twitter_description":"Reshaping Pandas dataframes with a real-life example, and graphing it with #Altair","twitter_image":"https://hackersandslackers.com/content/images/2018/07/iceberg@2x.jpg","twitter_title":"All That Is Solid Melts Into Graphs","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Pandas","slug":"pandas","description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/pandasmerge.jpg","meta_description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","meta_title":"Pythons and Pandas | Hackers and Slackers","visibility":"public"},{"name":"Code Snippet Corner","slug":"codesnippetcorner","description":"Real-world examples of Python being used to solve complex data problems, primarily using Jupyter notebooks.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o-1.jpg","meta_description":"Real-world examples of Python being used to solve complex data problems.","meta_title":"Python Code Snippet Corner","visibility":"public"},{"name":"#Code Snippet Corner","slug":"code-snippet-corner","description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o_o.jpg","meta_description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","meta_title":"Python Code Snippet Corner","visibility":"internal"}],"plaintext":"Last few Code Snippet Corners were about using Pandas as an easy way to handle\ninput and output between files & databases.  Let's shift gears a little bit!\n Among other reasons, because earlier today I discovered a package that\nexclusively does that, which means I can stop importing the massive Pandas\npackage when all I really wanted to do with it was take advantage of its I/O\nmodules.Check it out [https://github.com/insightindustry/sqlathanor]! \n\nSo, rather than the entrances & exits, let's focus on all the crazy ways you can\nreshape data with Pandas!\n\nOur Data\nFor our demonstration, I'll use a dataset based on something I was once actually\nsent.  It was a big CSV with sensor readings from HVAC systems.  Each line had a\ndifferent house, a different room, a datetime, and readings from a bunch of\ndifferent types of sensors.  Oh, hrm, I probably shouldn't use data I got from a\nclient.  Uh...\n\nBONUS SECTION!\nGENERATING DUMMY TEMPERATURE DATA\n(Feel free to skip to next part if you don't care)\n\nWe want it to fluctuate, but we don't want to just make a bunch of totally\nrandom values - a reading should have some relationship to the reading taken a\nsecond earlier.\n\nLet's use NumPy  for some Randomness, and the accumulate  and repeat  functions\nfrom itertools.  Maybe I'll do an in-depth post on these at some point, but the\ncode I'll be writing with them will be pretty short and hopefully somewhat\nself-demonstrating.  If you wanna go deeper here's some good material: Official\nDocs [https://docs.python.org/3/library/itertools.html], Good article\n[https://realpython.com/python-itertools/]\n\nimport numpy as np\nfrom itertools import accumulate, repeat\n\n\nWe want there to be some random \"noise\", but we also want the occasional\nsubstantive change.  We'll reflect this by having it so that 90% of the time we\nget a small fluctuation, with a 10% chance of a smaller fluctuation. \n\ndef genTempDataPoint(x, *args):\n    if np.random.rand(1) <= 0.9:\n        return x + np.random.uniform(-3,3,1)[0]\n    else:\n        return x + np.random.uniform(-10,10,1)[0]\n\n\n  Now let's see some test points!\n\nlist(accumulate(repeat(70, 5), genTempDataPoint))\n[70,\n 69.00258239202094,\n 59.34919781643355,\n 56.60722073795931,\n 57.265078261782946]\n\n\nSure, fine, why not.  Good enough for our purposes!   Now let's put it all\ntogether so we can just call it with a base temp and the number of points we\nwant.\n\ndef genTempData(base, n):\n    return list(accumulate(repeat(base, n), \n                           genTempDataPoint))\n\n\nTo simulate the dataset, we actually need to mix it up.  Or else what good are\nthe GroupBys gonna be?  So, let's create a problem to fix later!  Here's a\nfunction to create a simplified version of the dataset - each row will have a\nlocation ID, a number corresponding to time (just raw ints, I'm not making\nactual datetimes - I've spent too much time on this part already).  We'll also\ngenerate humidity values, to add another monkey wrench to fix later (we'll still\nuse the genTempData  function).\n\nfrom itertools import chain\n\ndef makeLocation(name, base1, n1, base2, n2):\n    return [(x[0], name, x[1][0], x[1][1]) \n        for x in enumerate(zip(genTempData(base1, n1),\n              genTempData(base2, n2)) )]\n\nbigList = list(chain.from_iterable(makeLocation(str(x), \n                                                70, \n                                                15,\n                                                40, \n                                                15) \n                         for x in range(5)))\nnp.random.shuffle(bigList)\n\ndf = pd.DataFrame(bigList, \n                  columns = [\"Time\", \"Loc\", \"Temp\", \"Hum\"])\n\n\nBack To The Main Plot\nLet's look at some test rows!\n\n# Viewing test rows\n\ndf.iloc[:5]\nTime\tLoc\tTemp     \tHum\n10\t4\t68.396970\t34.169753\n13\t0\t80.288846\t42.076786\n7\t4\t69.923273\t37.967951\n6\t0\t71.781362\t41.186802\n5\t2\t62.678844\t37.321636\n\n\nNow, when I'm getting started with a new dataset, one of the first things I like\nto do is make some graphs.  As of late, my favorite package has been Altair\n[https://altair-viz.github.io/].  Looks very nice by default, is pretty easy to\niterate with, and has nice declarative syntax.\n\nOnly one problem!  It wants date in \"long-form\" - as in, rather than each row\nhaving several variables of interest, each row has one (or more) \"ID\" variables,\none numerical value, and the name of the variable we're measuring.  So for\ninstance, something more like this:\n\nTime\tLoc\tvariable\tvalue\n10\t4\tTemp\t        68.396970\n13\t0\tTemp\t        80.288846\n7\t4\tTemp\t        69.923273\n6\t0\tTemp\t        71.781362\n5\t2\tTemp\t        62.678844\n\n\nNot quite sure why!  Buuut, that's kind of a feature of modern coding - we're\nsitting on an inheritance of libraries that have built up over the years, and so\nmore often than not we're just building the \"plumbing\" between existing stuff.\n It's cool!  And good!  It lets us separate Function from Implementation.  We\ndon't need to know what's going on under the hood - we just need to know thing X\nwill produce an output we want, and that in order to get it we first need to\nreshape what we've already got into an input that it'll accept.  Since that's\nsuch a huge part of coding these days, Pandas' power in that realm is super\nuseful.\n\nSooo, how do we get from here to there?  Shockingly easily!\n\nmelted = pd.melt(df, id_vars=[\"Time\", \"Loc\"])\n\n\nDone!\n\nWell, obviously we're not REALLY done yet.  Half the point of having such terse,\nexpressive code is that we can do MORE things!\n\nLet's say we want to see how humidity & temperature change over the course of\nthe day.  First, we'll have to grab all the readings from a single location.\n Let's say Location 3!\n\nloc3 = melted[melted[\"Loc\"]==\"3\"]\n\n\nAltair's pretty neat.\n\n(alt.Chart(loc3)\n .mark_line()\n .encode(x='Time:O', #We're encoding time as an Ordinal \n         y='value:Q',\n         color='variable:N'))\n\n\nHrm, lot of room there at the bottom.  If we were in an interactive session, we\ncould make this interactive (zoomable and navigable!) by just adding the \n.interactive()  method to the end, but I don't know how to do that in the blog.\n Regardless, it's pretty easy to rescale if we want a closer look!\n\n(alt.Chart(loc3)\n .mark_line()\n .encode(x='Time:O',\n         y=alt.Y('value:Q', scale=alt.Scale(zero=False)),\n         color='variable:N'))\n\n\nLet's try it with just temperature, and color will encode the location!\n\nmeltedJustTemp = pd.melt(df, \n                         id_vars=[\"Time\", \"Loc\"],\n                        value_vars= [\"Temp\"])\n\n(alt.Chart(meltedJustTemp)\n .mark_line()\n .encode(x='Time:O',\n         y='value:Q',\n         color='Loc:N'))\n\n\nLet's zoom in again...\n\n(alt.Chart(meltedJustTemp)\n .mark_line()\n .encode(x='Time:O',\n         y=alt.Y('value:Q', scale=alt.Scale(zero=False)),\n         color='Loc:N'))\n\n\nAltair also lets us Facet our graphs extremely flexibly & painlessly.\n\nalt.Chart(melted).mark_line().encode(\n      x='Time:O',\n      y=alt.Y('value:Q', scale=alt.Scale(zero=False)),\n      color='Loc:N',\n      column=\"variable\")\n\n\nOr how about another way!  Let's see humidity & temp, location by location.\n\nalt.Chart(melted).mark_line().encode(\n      x='Time:O',\n      y=alt.Y('value:Q', scale=alt.Scale(zero=False)),\n      color='variable:N',\n      row=\"Loc\")\n\n\nWe could make them nicer (there's a WIDE array of customizations), but I'm\nlooking to simulate Exploratory Data Analysis.  I can't think of another\ngraphing package in Python that has quite this level of \"instant gratification\"\nfor so many different variations.","html":"<p>Last few Code Snippet Corners were about using Pandas as an easy way to handle input and output between files &amp; databases.  Let's shift gears a little bit!  Among other reasons, because earlier today I discovered a package that exclusively does that, which means I can stop importing the massive Pandas package when all I really wanted to do with it was take advantage of its I/O modules.  <a href=\"https://github.com/insightindustry/sqlathanor\">Check it out</a>! </p><p>So, rather than the entrances &amp; exits, let's focus on all the crazy ways you can reshape data with Pandas!</p><h2 id=\"our-data\">Our Data</h2><p>For our demonstration, I'll use a dataset based on something I was once actually sent.  It was a big CSV with sensor readings from HVAC systems.  Each line had a different house, a different room, a datetime, and readings from a bunch of different types of sensors.  Oh, hrm, I probably shouldn't use data I got from a client.  Uh...</p><h2 id=\"bonus-section-\">BONUS SECTION!</h2><h3 id=\"generating-dummy-temperature-data\">GENERATING DUMMY TEMPERATURE DATA</h3><p><strong>(Feel free to skip to next part if you don't care)</strong></p><p>We want it to fluctuate, but we don't want to just make a bunch of totally random values - a reading should have some relationship to the reading taken a second earlier.</p><p>Let's use <code>NumPy</code> for some Randomness, and the <code>accumulate</code> and <code>repeat</code> functions from <code>itertools</code>.  Maybe I'll do an in-depth post on these at some point, but the code I'll be writing with them will be pretty short and hopefully somewhat self-demonstrating.  If you wanna go deeper here's some good material: <a href=\"https://docs.python.org/3/library/itertools.html\">Official Docs</a>, <a href=\"https://realpython.com/python-itertools/\">Good article</a></p><pre><code class=\"language-python\">import numpy as np\nfrom itertools import accumulate, repeat\n</code></pre>\n<p>We want there to be some random \"noise\", but we also want the occasional substantive change.  We'll reflect this by having it so that 90% of the time we get a small fluctuation, with a 10% chance of a smaller fluctuation. </p><pre><code class=\"language-python\">def genTempDataPoint(x, *args):\n    if np.random.rand(1) &lt;= 0.9:\n        return x + np.random.uniform(-3,3,1)[0]\n    else:\n        return x + np.random.uniform(-10,10,1)[0]\n</code></pre>\n<p> Now let's see some test points!</p><pre><code class=\"language-python\">list(accumulate(repeat(70, 5), genTempDataPoint))\n[70,\n 69.00258239202094,\n 59.34919781643355,\n 56.60722073795931,\n 57.265078261782946]\n</code></pre>\n<p>Sure, fine, why not.  Good enough for our purposes!   Now let's put it all together so we can just call it with a base temp and the number of points we want.</p><pre><code class=\"language-python\">def genTempData(base, n):\n    return list(accumulate(repeat(base, n), \n                           genTempDataPoint))\n</code></pre>\n<p>To simulate the dataset, we actually need to mix it up.  Or else what good are the GroupBys gonna be?  So, let's create a problem to fix later!  Here's a function to create a simplified version of the dataset - each row will have a location ID, a number corresponding to time (just raw ints, I'm not making actual datetimes - I've spent too much time on this part already).  We'll also generate humidity values, to add another monkey wrench to fix later (we'll still use the <code>genTempData</code> function).</p><pre><code class=\"language-python\">from itertools import chain\n\ndef makeLocation(name, base1, n1, base2, n2):\n    return [(x[0], name, x[1][0], x[1][1]) \n        for x in enumerate(zip(genTempData(base1, n1),\n              genTempData(base2, n2)) )]\n\nbigList = list(chain.from_iterable(makeLocation(str(x), \n                                                70, \n                                                15,\n                                                40, \n                                                15) \n                         for x in range(5)))\nnp.random.shuffle(bigList)\n\ndf = pd.DataFrame(bigList, \n                  columns = [&quot;Time&quot;, &quot;Loc&quot;, &quot;Temp&quot;, &quot;Hum&quot;])\n</code></pre>\n<h2 id=\"back-to-the-main-plot\">Back To The Main Plot</h2><p>Let's look at some test rows!</p><pre><code class=\"language-python\"># Viewing test rows\n\ndf.iloc[:5]\nTime\tLoc\tTemp     \tHum\n10\t4\t68.396970\t34.169753\n13\t0\t80.288846\t42.076786\n7\t4\t69.923273\t37.967951\n6\t0\t71.781362\t41.186802\n5\t2\t62.678844\t37.321636\n</code></pre>\n<p>Now, when I'm getting started with a new dataset, one of the first things I like to do is make some graphs.  As of late, my favorite package has been <a href=\"https://altair-viz.github.io/\">Altair</a>.  Looks very nice by default, is pretty easy to iterate with, and has nice declarative syntax.</p><p>Only one problem!  It wants date in \"long-form\" - as in, rather than each row having several variables of interest, each row has one (or more) \"ID\" variables, one numerical value, and the name of the variable we're measuring.  So for instance, something more like this:</p><pre><code class=\"language-python\">Time\tLoc\tvariable\tvalue\n10\t4\tTemp\t        68.396970\n13\t0\tTemp\t        80.288846\n7\t4\tTemp\t        69.923273\n6\t0\tTemp\t        71.781362\n5\t2\tTemp\t        62.678844\n</code></pre>\n<p>Not quite sure why!  Buuut, that's kind of a feature of modern coding - we're sitting on an inheritance of libraries that have built up over the years, and so more often than not we're just building the \"plumbing\" between existing stuff.  It's cool!  And good!  It lets us separate Function from Implementation.  We don't need to know what's going on under the hood - we just need to know thing X will produce an output we want, and that in order to get it we first need to reshape what we've already got into an input that it'll accept.  Since that's such a huge part of coding these days, Pandas' power in that realm is super useful.</p><p>Sooo, how do we get from here to there?  Shockingly easily!</p><pre><code class=\"language-python\">melted = pd.melt(df, id_vars=[&quot;Time&quot;, &quot;Loc&quot;])\n</code></pre>\n<p>Done!</p><p>Well, obviously we're not REALLY done yet.  Half the point of having such terse, expressive code is that we can do MORE things!</p><p>Let's say we want to see how humidity &amp; temperature change over the course of the day.  First, we'll have to grab all the readings from a single location.  Let's say Location 3!</p><pre><code class=\"language-python\">loc3 = melted[melted[&quot;Loc&quot;]==&quot;3&quot;]\n</code></pre>\n<p>Altair's pretty neat.</p><pre><code class=\"language-python\">(alt.Chart(loc3)\n .mark_line()\n .encode(x='Time:O', #We're encoding time as an Ordinal \n         y='value:Q',\n         color='variable:N'))\n</code></pre>\n<figure class=\"kg-card kg-image-card\"><img src=\"https://res-4.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/visualization--2--1.png\" class=\"kg-image\"></figure><p>Hrm, lot of room there at the bottom.  If we were in an interactive session, we could make this interactive (zoomable and navigable!) by just adding the <code>.interactive()</code> method to the end, but I don't know how to do that in the blog.  Regardless, it's pretty easy to rescale if we want a closer look!</p><pre><code class=\"language-python\">(alt.Chart(loc3)\n .mark_line()\n .encode(x='Time:O',\n         y=alt.Y('value:Q', scale=alt.Scale(zero=False)),\n         color='variable:N'))\n</code></pre>\n<figure class=\"kg-card kg-image-card\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/visualization--3--2.png\" class=\"kg-image\"></figure><p>Let's try it with just temperature, and color will encode the location!</p><pre><code class=\"language-python\">meltedJustTemp = pd.melt(df, \n                         id_vars=[&quot;Time&quot;, &quot;Loc&quot;],\n                        value_vars= [&quot;Temp&quot;])\n\n(alt.Chart(meltedJustTemp)\n .mark_line()\n .encode(x='Time:O',\n         y='value:Q',\n         color='Loc:N'))\n</code></pre>\n<figure class=\"kg-card kg-image-card\"><img src=\"https://res-5.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/visualization--4--2.png\" class=\"kg-image\"></figure><p>Let's zoom in again...</p><pre><code class=\"language-python\">(alt.Chart(meltedJustTemp)\n .mark_line()\n .encode(x='Time:O',\n         y=alt.Y('value:Q', scale=alt.Scale(zero=False)),\n         color='Loc:N'))\n</code></pre>\n<figure class=\"kg-card kg-image-card\"><img src=\"https://res-5.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/visualization--4--2.png\" class=\"kg-image\"></figure><p>Altair also lets us Facet our graphs extremely flexibly &amp; painlessly.</p><pre><code class=\"language-python\">alt.Chart(melted).mark_line().encode(\n      x='Time:O',\n      y=alt.Y('value:Q', scale=alt.Scale(zero=False)),\n      color='Loc:N',\n      column=&quot;variable&quot;)\n</code></pre>\n<figure class=\"kg-card kg-image-card\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/visualization--5--1.png\" class=\"kg-image\"></figure><p>Or how about another way!  Let's see humidity &amp; temp, location by location.</p><pre><code class=\"language-python\">alt.Chart(melted).mark_line().encode(\n      x='Time:O',\n      y=alt.Y('value:Q', scale=alt.Scale(zero=False)),\n      color='variable:N',\n      row=&quot;Loc&quot;)\n</code></pre>\n<figure class=\"kg-card kg-image-card\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/visualization--6--1.png\" class=\"kg-image\"></figure><p>We could make them nicer (there's a WIDE array of customizations), but I'm looking to simulate Exploratory Data Analysis.  I can't think of another graphing package in Python that has quite this level of \"instant gratification\" for so many different variations.</p>","url":"https://hackersandslackers.com/all-that-is-solid-melts-into-graphs/","uuid":"603156b0-ee55-4aaa-b5cd-34950389cd08","page":false,"codeinjection_foot":"<script>\n    hljs.configure({language: ['python']})\n </script>","codeinjection_head":"","comment_id":"5b5929932714bc41b8a370c5"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736b6","title":"Lynx Roundup, July 30th","slug":"lynx-roundup-july-30th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx23@2x.jpg","excerpt":"Random Python!  Random seeds!  Scikit changes!","custom_excerpt":"Random Python!  Random seeds!  Scikit changes!","created_at_pretty":"21 July, 2018","published_at_pretty":"30 July, 2018","updated_at_pretty":"30 July, 2018","created_at":"2018-07-20T22:21:16.000-04:00","published_at":"2018-07-30T07:00:00.000-04:00","updated_at":"2018-07-30T07:00:00.000-04:00","meta_title":"Random Python!  Random seeds!  Scikit changes! | Hackers And Slackers","meta_description":"Random Python!  Random seeds!  Scikit changes!","og_description":"Random Python!  Random seeds!  Scikit changes!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx23@2x.jpg","og_title":"Lynx Roundup, July 30th","twitter_description":"Random Python!  Random seeds!  Scikit changes!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx23@2x.jpg","twitter_title":"Lynx Roundup, July 30th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://realpython.com/python-random/\n\n\n\nhttps://www.dataschool.io/how-to-update-your-scikit-learn-code-for-2018/\n\n\n\nhttps://github.com/accelero-cloud/appkernel\n\n\n\nhttps://openlab-flowers.inria.fr/t/how-many-random-seeds-should-i-use-statistical-power-analysis-in-deep-reinforcement-learning-experiments/457\n\n\n\nhttps://www.hergertarian.com/keras-layers-intro","html":"<p></p><p><a href=\"https://realpython.com/python-random/\">https://realpython.com/python-random/</a></p><p></p><p><a href=\"https://www.dataschool.io/how-to-update-your-scikit-learn-code-for-2018/\">https://www.dataschool.io/how-to-update-your-scikit-learn-code-for-2018/</a></p><p></p><p><a href=\"https://github.com/accelero-cloud/appkernel\">https://github.com/accelero-cloud/appkernel</a></p><p></p><p><a href=\"https://openlab-flowers.inria.fr/t/how-many-random-seeds-should-i-use-statistical-power-analysis-in-deep-reinforcement-learning-experiments/457\">https://openlab-flowers.inria.fr/t/how-many-random-seeds-should-i-use-statistical-power-analysis-in-deep-reinforcement-learning-experiments/457</a></p><p></p><p><a href=\"https://www.hergertarian.com/keras-layers-intro\">https://www.hergertarian.com/keras-layers-intro</a></p>","url":"https://hackersandslackers.com/lynx-roundup-july-30th/","uuid":"aea7f17b-0fde-42c2-91c9-ea374e70bace","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b52989c529141018f9dad05"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736b5","title":"Lynx Roundup, July 29th","slug":"lynx-roundup-july-29th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/04/90.jpg","excerpt":"National AI Strategies!  Your personal AI strategy!  Image classifiers and stuff they've never seen before!","custom_excerpt":"National AI Strategies!  Your personal AI strategy!  Image classifiers and stuff they've never seen before!","created_at_pretty":"21 July, 2018","published_at_pretty":"29 July, 2018","updated_at_pretty":"10 April, 2019","created_at":"2018-07-20T22:18:58.000-04:00","published_at":"2018-07-29T07:00:00.000-04:00","updated_at":"2019-04-10T04:22:38.000-04:00","meta_title":"National AI Strategies!  Your personal AI strategy!  Image classifiers and stuff they've never seen before! | Hackers And Slackers","meta_description":"National AI Strategies!  Your personal AI strategy!  Image classifiers and stuff they've never seen before!","og_description":"National AI Strategies!  Your personal AI strategy!  Image classifiers and stuff they've never seen before!","og_image":"https://hackersandslackers.com/content/images/2019/04/90-2.jpg","og_title":"Lynx Roundup, July 29th","twitter_description":"National AI Strategies!  Your personal AI strategy!  Image classifiers and stuff they've never seen before!","twitter_image":"https://hackersandslackers.com/content/images/2019/04/90-1.jpg","twitter_title":"Lynx Roundup, July 29th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://blog.thedataincubator.com/2018/07/survive-rise-of-ai-data-facilitator\n[https://blog.thedataincubator.com/2018/07/survive-rise-of-ai-data-facilitator/?utm_source=Master+List&utm_campaign=b3f590f6d3-JulyNewsletter_Master&utm_medium=email&utm_term=0_44fcdef9e7-b3f590f6d3-463706345&mc_cid=b3f590f6d3&mc_eid=9090defae1]\n\n\n\nhttps://machinelearningmastery.com/statistical-power-and-power-analysis-in-python/\n[https://machinelearningmastery.com/statistical-power-and-power-analysis-in-python/?__s=bdhbwhyixbffzpidq1p6]\n\n\n\nhttps://medium.com/politics-ai/an-overview-of-national-ai-strategies-2a70ec6edfd\n\n\n\nhttps://petewarden.com/2018/07/06/what-image-classifiers-can-do-about-unknown-objects/\n[https://petewarden.com/2018/07/06/what-image-classifiers-can-do-about-unknown-objects/?utm_campaign=Artificial%2BIntelligence%2BWeekly&utm_medium=email&utm_source=Artificial_Intelligence_Weekly_80]\n\n\n\nhttps://towardsdatascience.com/an-end-to-end-project-on-time-series-analysis-and-forecasting-with-python-4835e6bf050b","html":"<p></p><p><a href=\"https://blog.thedataincubator.com/2018/07/survive-rise-of-ai-data-facilitator/?utm_source=Master+List&amp;utm_campaign=b3f590f6d3-JulyNewsletter_Master&amp;utm_medium=email&amp;utm_term=0_44fcdef9e7-b3f590f6d3-463706345&amp;mc_cid=b3f590f6d3&amp;mc_eid=9090defae1\">https://blog.thedataincubator.com/2018/07/survive-rise-of-ai-data-facilitator</a></p><p></p><p><a href=\"https://machinelearningmastery.com/statistical-power-and-power-analysis-in-python/?__s=bdhbwhyixbffzpidq1p6\">https://machinelearningmastery.com/statistical-power-and-power-analysis-in-python/</a></p><p></p><p><a href=\"https://medium.com/politics-ai/an-overview-of-national-ai-strategies-2a70ec6edfd\">https://medium.com/politics-ai/an-overview-of-national-ai-strategies-2a70ec6edfd</a></p><p></p><p><a href=\"https://petewarden.com/2018/07/06/what-image-classifiers-can-do-about-unknown-objects/?utm_campaign=Artificial%2BIntelligence%2BWeekly&amp;utm_medium=email&amp;utm_source=Artificial_Intelligence_Weekly_80\">https://petewarden.com/2018/07/06/what-image-classifiers-can-do-about-unknown-objects/</a></p><p></p><p><a href=\"https://towardsdatascience.com/an-end-to-end-project-on-time-series-analysis-and-forecasting-with-python-4835e6bf050b\">https://towardsdatascience.com/an-end-to-end-project-on-time-series-analysis-and-forecasting-with-python-4835e6bf050b</a></p>","url":"https://hackersandslackers.com/lynx-roundup-july-29th/","uuid":"2fb4efb9-3c73-43c4-b0bf-1c4bbee005de","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b529812529141018f9dad02"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736b4","title":"Lynx Roundup, July 28th","slug":"lynx-roundup-july-28th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx21@2x.jpg","excerpt":"Accessing paywalled research!  Linting code in Jupyter!  Properties of numbers!","custom_excerpt":"Accessing paywalled research!  Linting code in Jupyter!  Properties of numbers!","created_at_pretty":"21 July, 2018","published_at_pretty":"28 July, 2018","updated_at_pretty":"28 July, 2018","created_at":"2018-07-20T22:16:38.000-04:00","published_at":"2018-07-28T07:00:00.000-04:00","updated_at":"2018-07-28T07:00:00.000-04:00","meta_title":"Accessing paywalled research!  Linting code in Jupyter!  Properties of numbers! | Hackers And Slackers","meta_description":"Accessing paywalled research!  Linting code in Jupyter!  Properties of numbers!","og_description":"Accessing paywalled research!  Linting code in Jupyter!  Properties of numbers!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx21@2x.jpg","og_title":"Lynx Roundup, July 28th","twitter_description":"Accessing paywalled research!  Linting code in Jupyter!  Properties of numbers!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx21@2x.jpg","twitter_title":"Lynx Roundup, July 28th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"http://www.numbergossip.com/list\n[http://www.numbergossip.com/list?utm_medium=email&utm_source=topic+optin&utm_campaign=awareness&utm_content=20180711+data+nl&mkt_tok=eyJpIjoiWldRMU5qRmhOamxtTlRnNCIsInQiOiJlbitsTWxrU1dsWGsxQ1FXenBacW8rM01qdnJybkZrUEZSZ2ZqSkF3dGZIdkN2NUxGM0lrdlF5ZGdCUHBad0xxK1lwTVdnUXd0bDg0WGl5bjQzOGFIaDllN21iN3hvRHE2OGdGZytEaXQzV0F0K1cyZVFTS2t3TzZnNnBxd1V6NiJ9]\n\n\n\nhttps://vitals.lifehacker.com/how-to-access-paywalled-scientific-journal-articles-1827516361\n\n\n\nhttps://neurosciencenews.com/computer-human-brain-9555/\n\n\n\nhttps://github.com/mlshapiro/jupyterlab-flake8\n\n\n\nhttps://www.dataiq.co.uk/article/how-ai-will-help-save-100000-lives\n[https://www.dataiq.co.uk/article/how-ai-will-help-save-100000-lives?utm_source=Master+List&utm_campaign=b3f590f6d3-JulyNewsletter_Master&utm_medium=email&utm_term=0_44fcdef9e7-b3f590f6d3-463706345&mc_cid=b3f590f6d3&mc_eid=9090defae1]","html":"<p></p><p><a href=\"http://www.numbergossip.com/list?utm_medium=email&amp;utm_source=topic+optin&amp;utm_campaign=awareness&amp;utm_content=20180711+data+nl&amp;mkt_tok=eyJpIjoiWldRMU5qRmhOamxtTlRnNCIsInQiOiJlbitsTWxrU1dsWGsxQ1FXenBacW8rM01qdnJybkZrUEZSZ2ZqSkF3dGZIdkN2NUxGM0lrdlF5ZGdCUHBad0xxK1lwTVdnUXd0bDg0WGl5bjQzOGFIaDllN21iN3hvRHE2OGdGZytEaXQzV0F0K1cyZVFTS2t3TzZnNnBxd1V6NiJ9\">http://www.numbergossip.com/list</a></p><p></p><p><a href=\"https://vitals.lifehacker.com/how-to-access-paywalled-scientific-journal-articles-1827516361\">https://vitals.lifehacker.com/how-to-access-paywalled-scientific-journal-articles-1827516361</a></p><p></p><p><a href=\"https://neurosciencenews.com/computer-human-brain-9555/\">https://neurosciencenews.com/computer-human-brain-9555/</a></p><p></p><p><a href=\"https://github.com/mlshapiro/jupyterlab-flake8\">https://github.com/mlshapiro/jupyterlab-flake8</a></p><p></p><p><a href=\"https://www.dataiq.co.uk/article/how-ai-will-help-save-100000-lives?utm_source=Master+List&amp;utm_campaign=b3f590f6d3-JulyNewsletter_Master&amp;utm_medium=email&amp;utm_term=0_44fcdef9e7-b3f590f6d3-463706345&amp;mc_cid=b3f590f6d3&amp;mc_eid=9090defae1\">https://www.dataiq.co.uk/article/how-ai-will-help-save-100000-lives</a></p>","url":"https://hackersandslackers.com/lynx-roundup-july-28th/","uuid":"6bf5a449-3983-4f11-a84e-0a79b4c8f5c9","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b529786529141018f9dacff"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736b3","title":"Lynx Roundup, July 27th","slug":"lynx-roundup-july-27th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx49@2x.jpg","excerpt":"Hidden Python features!  Visual system!  REST vs GraphQL!","custom_excerpt":"Hidden Python features!  Visual system!  REST vs GraphQL!","created_at_pretty":"21 July, 2018","published_at_pretty":"27 July, 2018","updated_at_pretty":"28 July, 2018","created_at":"2018-07-20T22:14:02.000-04:00","published_at":"2018-07-27T07:00:00.000-04:00","updated_at":"2018-07-28T17:49:43.000-04:00","meta_title":"Hidden Python features!  Visual system!  REST vs GraphQL! | Hackers And Slackers","meta_description":"Hidden Python features!  Visual system!  REST vs GraphQL!","og_description":"Hidden Python features!  Visual system!  REST vs GraphQL!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx49@2x.jpg","og_title":"Lynx Roundup, July 27th","twitter_description":"Hidden Python features!  Visual system!  REST vs GraphQL!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx49@2x.jpg","twitter_title":"Lynx Roundup, July 27th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://stackoverflow.com/questions/101268/hidden-features-of-python\n\n\n\nhttps://www.quora.com/Which-fields-of-advanced-mathematics-and-statistics-are-finding-their-way-into-data-science-or-will-find-their-way-into-data-science-in-the-next-few-decades\n\n\n\nhttps://medicalxpress.com/news/2018-07-brain-vision-tracks.html\n\n\n\nhttps://www.moesif.com/blog/technical/graphql/REST-vs-GraphQL-APIs-the-good-the-bad-the-ugly/\n[https://www.moesif.com/blog/technical/graphql/REST-vs-GraphQL-APIs-the-good-the-bad-the-ugly/?utm_medium=email&utm_source=topic+optin&utm_campaign=awareness&utm_content=20180711+data+nl&mkt_tok=eyJpIjoiWldRMU5qRmhOamxtTlRnNCIsInQiOiJlbitsTWxrU1dsWGsxQ1FXenBacW8rM01qdnJybkZrUEZSZ2ZqSkF3dGZIdkN2NUxGM0lrdlF5ZGdCUHBad0xxK1lwTVdnUXd0bDg0WGl5bjQzOGFIaDllN21iN3hvRHE2OGdGZytEaXQzV0F0K1cyZVFTS2t3TzZnNnBxd1V6NiJ9]\n\n\n\nhttps://medium.com/@rchang/a-beginners-guide-to-data-engineering-the-series-finale-2cc92ff14b0\n[https://medium.com/@rchang/a-beginners-guide-to-data-engineering-the-series-finale-2cc92ff14b0?mkt_tok=eyJpIjoiWldRMU5qRmhOamxtTlRnNCIsInQiOiJlbitsTWxrU1dsWGsxQ1FXenBacW8rM01qdnJybkZrUEZSZ2ZqSkF3dGZIdkN2NUxGM0lrdlF5ZGdCUHBad0xxK1lwTVdnUXd0bDg0WGl5bjQzOGFIaDllN21iN3hvRHE2OGdGZytEaXQzV0F0K1cyZVFTS2t3TzZnNnBxd1V6NiJ9]","html":"<p></p><p><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python\">https://stackoverflow.com/questions/101268/hidden-features-of-python</a></p><p></p><p><a href=\"https://www.quora.com/Which-fields-of-advanced-mathematics-and-statistics-are-finding-their-way-into-data-science-or-will-find-their-way-into-data-science-in-the-next-few-decades\">https://www.quora.com/Which-fields-of-advanced-mathematics-and-statistics-are-finding-their-way-into-data-science-or-will-find-their-way-into-data-science-in-the-next-few-decades</a></p><p></p><p><a href=\"https://medicalxpress.com/news/2018-07-brain-vision-tracks.html\">https://medicalxpress.com/news/2018-07-brain-vision-tracks.html</a></p><p></p><p><a href=\"https://www.moesif.com/blog/technical/graphql/REST-vs-GraphQL-APIs-the-good-the-bad-the-ugly/?utm_medium=email&amp;utm_source=topic+optin&amp;utm_campaign=awareness&amp;utm_content=20180711+data+nl&amp;mkt_tok=eyJpIjoiWldRMU5qRmhOamxtTlRnNCIsInQiOiJlbitsTWxrU1dsWGsxQ1FXenBacW8rM01qdnJybkZrUEZSZ2ZqSkF3dGZIdkN2NUxGM0lrdlF5ZGdCUHBad0xxK1lwTVdnUXd0bDg0WGl5bjQzOGFIaDllN21iN3hvRHE2OGdGZytEaXQzV0F0K1cyZVFTS2t3TzZnNnBxd1V6NiJ9\">https://www.moesif.com/blog/technical/graphql/REST-vs-GraphQL-APIs-the-good-the-bad-the-ugly/</a></p><p></p><p><a href=\"https://medium.com/@rchang/a-beginners-guide-to-data-engineering-the-series-finale-2cc92ff14b0?mkt_tok=eyJpIjoiWldRMU5qRmhOamxtTlRnNCIsInQiOiJlbitsTWxrU1dsWGsxQ1FXenBacW8rM01qdnJybkZrUEZSZ2ZqSkF3dGZIdkN2NUxGM0lrdlF5ZGdCUHBad0xxK1lwTVdnUXd0bDg0WGl5bjQzOGFIaDllN21iN3hvRHE2OGdGZytEaXQzV0F0K1cyZVFTS2t3TzZnNnBxd1V6NiJ9\">https://medium.com/@rchang/a-beginners-guide-to-data-engineering-the-series-finale-2cc92ff14b0</a></p>","url":"https://hackersandslackers.com/lynx-roundup-july-27th/","uuid":"acc15502-eda0-413b-9c8e-72e6809d2a43","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b5296ea529141018f9dacfc"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736b2","title":"Lynx Roundup, July 26th","slug":"lynx-roundup-july-26th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/04/159-3.jpg","excerpt":"Map data!  Clean scientific code!  Some Quora questions I thought were cool!","custom_excerpt":"Map data!  Clean scientific code!  Some Quora questions I thought were cool!","created_at_pretty":"21 July, 2018","published_at_pretty":"26 July, 2018","updated_at_pretty":"10 April, 2019","created_at":"2018-07-20T22:10:16.000-04:00","published_at":"2018-07-26T07:00:00.000-04:00","updated_at":"2019-04-10T04:23:10.000-04:00","meta_title":"Map data!  Clean scientific code!  Some Quora questions I thought were cool! | Hackers And Slackers","meta_description":"Map data!  Clean scientific code!  Some Quora questions I thought were cool!","og_description":"Map data!  Clean scientific code!  Some Quora questions I thought were cool!","og_image":"https://hackersandslackers.com/content/images/2019/04/159-5.jpg","og_title":"Lynx Roundup, July 26th","twitter_description":"Map data!  Clean scientific code!  Some Quora questions I thought were cool!","twitter_image":"https://hackersandslackers.com/content/images/2019/04/159-4.jpg","twitter_title":"Lynx Roundup, July 26th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"http://geoffboeing.com/2018/07/comparing-city-street-orientations/\n\n\n\nhttps://softwareengineering.stackexchange.com/questions/373633/programming-cleanly-when-writing-scientific-code\n\n\n\nhttps://www.quora.com/What-is-the-most-interesting-algorithm\n\n\n\nhttps://www.quora.com/What-are-the-10-algorithms-one-must-know-in-order-to-solve-most-algorithm-problems\n\n\n\nhttps://www.quora.com/What-are-the-most-interesting-Stack-Overflow-questions","html":"<p></p><p><a href=\"http://geoffboeing.com/2018/07/comparing-city-street-orientations/\">http://geoffboeing.com/2018/07/comparing-city-street-orientations/</a></p><p></p><p><a href=\"https://softwareengineering.stackexchange.com/questions/373633/programming-cleanly-when-writing-scientific-code\">https://softwareengineering.stackexchange.com/questions/373633/programming-cleanly-when-writing-scientific-code</a></p><p></p><p><a href=\"https://www.quora.com/What-is-the-most-interesting-algorithm\">https://www.quora.com/What-is-the-most-interesting-algorithm</a></p><p></p><p><a href=\"https://www.quora.com/What-are-the-10-algorithms-one-must-know-in-order-to-solve-most-algorithm-problems\">https://www.quora.com/What-are-the-10-algorithms-one-must-know-in-order-to-solve-most-algorithm-problems</a></p><p></p><p><a href=\"https://www.quora.com/What-are-the-most-interesting-Stack-Overflow-questions\">https://www.quora.com/What-are-the-most-interesting-Stack-Overflow-questions</a></p>","url":"https://hackersandslackers.com/lynx-roundup-july-26th/","uuid":"7e544784-e6c1-429a-a462-1ea01d8f6cdb","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b529608529141018f9dacf9"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736b1","title":"Lynx Roundup, July 25th","slug":"lynx-roundup-july-25th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx18@2x.jpg","excerpt":"Analyzing images!  Ethical data!  What people think when they hear \"Possibly\"!","custom_excerpt":"Analyzing images!  Ethical data!  What people think when they hear \"Possibly\"!","created_at_pretty":"21 July, 2018","published_at_pretty":"25 July, 2018","updated_at_pretty":"25 July, 2018","created_at":"2018-07-20T22:07:55.000-04:00","published_at":"2018-07-25T07:00:00.000-04:00","updated_at":"2018-07-25T07:00:00.000-04:00","meta_title":"Analyzing images!  Ethical data!  What people think when they hear \"Possibly\"! | Hackers And Slackers","meta_description":"Analyzing images!  Ethical data!  What people think when they hear \"Possibly\"!","og_description":"Analyzing images!  Ethical data!  What people think when they hear \"Possibly\"!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx18@2x.jpg","og_title":"Lynx Roundup, July 25th","twitter_description":"Analyzing images!  Ethical data!  What people think when they hear \"Possibly\"!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx18@2x.jpg","twitter_title":"Lynx Roundup, July 25th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.mobihealthnews.com/content/prototype-uses-googles-radar-ai-tech-noninvasively-measure-glucose-levels\n\n\n\nhttps://flowingdata.com/2018/07/06/how-people-interpret-probability-through-words/\n\n\n\nhttp://mattturck.com/bigdata2018/\n\n\n\nhttps://www.kdnuggets.com/2018/07/basic-image-data-analysis-numpy-opencv-p1.html\n\n\n\nhttps://machinelearningmastery.com/effect-size-measures-in-python/","html":"<p></p><p><a href=\"https://www.mobihealthnews.com/content/prototype-uses-googles-radar-ai-tech-noninvasively-measure-glucose-levels\">https://www.mobihealthnews.com/content/prototype-uses-googles-radar-ai-tech-noninvasively-measure-glucose-levels</a></p><p></p><p><a href=\"https://flowingdata.com/2018/07/06/how-people-interpret-probability-through-words/\">https://flowingdata.com/2018/07/06/how-people-interpret-probability-through-words/</a></p><p></p><p><a href=\"http://mattturck.com/bigdata2018/\">http://mattturck.com/bigdata2018/</a></p><p></p><p><a href=\"https://www.kdnuggets.com/2018/07/basic-image-data-analysis-numpy-opencv-p1.html\">https://www.kdnuggets.com/2018/07/basic-image-data-analysis-numpy-opencv-p1.html</a></p><p></p><p><a href=\"https://machinelearningmastery.com/effect-size-measures-in-python/\">https://machinelearningmastery.com/effect-size-measures-in-python/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-july-25th/","uuid":"03bdff08-3af8-480c-a764-52c83c68fb20","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b52957b529141018f9dacf6"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736b0","title":"Lynx Roundup, July 24th","slug":"lynx-roundup-july-24th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx17@2x.jpg","excerpt":"Databases!  Parallelizing Pandas!  Massive treasure trove of research on data visualizations!","custom_excerpt":"Databases!  Parallelizing Pandas!  Massive treasure trove of research on data visualizations!","created_at_pretty":"21 July, 2018","published_at_pretty":"24 July, 2018","updated_at_pretty":"25 July, 2018","created_at":"2018-07-20T22:05:38.000-04:00","published_at":"2018-07-24T07:00:00.000-04:00","updated_at":"2018-07-24T22:06:04.000-04:00","meta_title":"Databases!  Parallelizing Pandas!  Massive treasure trove of research on data visualizations! | Hackers And Slackers","meta_description":"Databases!  Parallelizing Pandas!  Massive treasure trove of research on data visualizations!","og_description":"Databases!  Parallelizing Pandas!  Massive treasure trove of research on data visualizations!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx17@2x.jpg","og_title":"Lynx Roundup, July 24th","twitter_description":"Databases!  Parallelizing Pandas!  Massive treasure trove of research on data visualizations!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx17@2x.jpg","twitter_title":"Lynx Roundup, July 24th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.dataquest.io/blog/data-science-project-style-guide/\n\n\n\nhttps://rise.cs.berkeley.edu/blog/pandas-on-ray-early-lessons/\n[https://rise.cs.berkeley.edu/blog/pandas-on-ray-early-lessons/?utm_campaign=Data_Elixir&utm_medium=email&utm_source=Data_Elixir_190]\n\n\n\nhttps://thomaslarock.com/2018/07/databases-101/\n[https://thomaslarock.com/2018/07/databases-101/?utm_campaign=Data_Elixir&utm_medium=email&utm_source=Data_Elixir_190]\n\n\n\nhttps://github.com/mathisonian/awesome-visualization-research\n[https://github.com/mathisonian/awesome-visualization-research?utm_campaign=Data_Elixir&utm_medium=email&utm_source=Data_Elixir_190]\n\n\n\nhttps://johncarlosbaez.wordpress.com/2018/07/10/random-points-on-a-sphere-part-1/","html":"<p></p><p><a href=\"https://www.dataquest.io/blog/data-science-project-style-guide/\">https://www.dataquest.io/blog/data-science-project-style-guide/</a></p><p></p><p><a href=\"https://rise.cs.berkeley.edu/blog/pandas-on-ray-early-lessons/?utm_campaign=Data_Elixir&amp;utm_medium=email&amp;utm_source=Data_Elixir_190\">https://rise.cs.berkeley.edu/blog/pandas-on-ray-early-lessons/</a></p><p></p><p><a href=\"https://thomaslarock.com/2018/07/databases-101/?utm_campaign=Data_Elixir&amp;utm_medium=email&amp;utm_source=Data_Elixir_190\">https://thomaslarock.com/2018/07/databases-101/</a></p><p></p><p><a href=\"https://github.com/mathisonian/awesome-visualization-research?utm_campaign=Data_Elixir&amp;utm_medium=email&amp;utm_source=Data_Elixir_190\">https://github.com/mathisonian/awesome-visualization-research</a></p><p></p><p><a href=\"https://johncarlosbaez.wordpress.com/2018/07/10/random-points-on-a-sphere-part-1/\">https://johncarlosbaez.wordpress.com/2018/07/10/random-points-on-a-sphere-part-1/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-july-24th/","uuid":"1c4d6683-d910-47bd-9442-bf382e708437","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b5294f2529141018f9dacf3"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736ac","title":"Trash Pandas: Messy, Convenient DB Operations via Pandas","slug":"trash-pandas","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/07/racoon@2x.jpg","excerpt":"(And a way to clean it up with SQLAlchemy).","custom_excerpt":"(And a way to clean it up with SQLAlchemy).","created_at_pretty":"19 July, 2018","published_at_pretty":"23 July, 2018","updated_at_pretty":"17 November, 2018","created_at":"2018-07-18T20:26:25.000-04:00","published_at":"2018-07-23T08:30:00.000-04:00","updated_at":"2018-11-16T20:50:25.000-05:00","meta_title":"(And a way to clean it up with SQLAlchemy) | Hackers And Slackers","meta_description":"Python has an extremely handy little tool called f-strings that make string templating a snap!  ","og_description":"Trash Pandas: Messy, Convenient DB Operations via Pandas","og_image":"https://hackersandslackers.com/content/images/2018/07/racoon@2x.jpg","og_title":"Trash Pandas: Messy, Convenient DB Operations via Pandas","twitter_description":"(And a way to clean it up with SQLAlchemy)","twitter_image":"https://hackersandslackers.com/content/images/2018/07/racoon@2x.jpg","twitter_title":"Trash Pandas: Messy, Convenient DB Operations via Pandas","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Pandas","slug":"pandas","description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/pandasmerge.jpg","meta_description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","meta_title":"Pythons and Pandas | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Pandas","slug":"pandas","description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/pandasmerge.jpg","meta_description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","meta_title":"Pythons and Pandas | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Data Science","slug":"datascience","description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","feature_image":null,"meta_description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","meta_title":"Data Science | Hackers and Slackers","visibility":"public"},{"name":"#Data Analysis with Pandas","slug":"data-analysis-pandas","description":"Analyze data with Python's Pandas. Start from the basics or see real-life examples of using Pandas to solve problems.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/pandasseries-1.jpg","meta_description":"Analyze data with Python's Pandas. Start from the basics or see real-life examples of using Pandas to solve problems.","meta_title":"Data Analysis with Pandas","visibility":"internal"}],"plaintext":"Let's say you were continuing our task from last week\n[https://hackersandslackers.com/code-snippet-corner-a-dirty-way-of-cleaning-data-ft-pandas-sql/]\n: Taking a bunch of inconsistent Excel files and CSVs, and putting them into a\ndatabase.\n\nLet's say you've been given a new CSV that conflicts with some rows you've\nalready entered, and you're told that these rows are the correct values.\n\nWhy Not Use Pandas' Built-in Method?\nPandas' built-in to_sql  DataFrame method won't be useful here.  Remember, it\nwrites as a block - if you set the if_exists  flag to \"replace\", that'll make it\nreplace the entire DB table with a new one based on the DF you're uploading.\n And if you're doing this piecemeal, you presumably don't want that.\n\nLast week, we just made a new DataFrame out of each row and appended it to the\nDB table.  That won't work here - we need an Update.  Writing each update by\nhand would be annoying, though - luckily we can use code to generate more code!\n Python has an extremely handy little tool called f-strings  that make string\ntemplating a snap!\n\ndef updateStr(row):\n    return (f\"UPDATE books \"\n            f\"\"\"SET author = '{x.author}' \"\"\"\n            f\"\"\"WHERE id = {x.id};\"\"\")\n\n\nLet's walk through that.  It takes a row from a Dataframe - note that we're\nusing dot notation here instead of the bracket notation.  The reason we're doing\nthat is because, instead of using iterrows()  like last week, we'll be using \nitertuples  because the docstring for iterrows()  said I should.  One reason for\nthis is that iterrows()  gives a pandas Series, which will store everything as\nthe same datatype, which will be annoying in some cases.  I think it's supposed\nto be faster too?itertuples()  instead gives us Named Tuples, which is kind of\nlike a dictionary, except we have to use dot notation instead of square\nbrackets.\n\nSooo, we take a Named Tuple, and then the f-string goes to work.  It's mostly\njust a convenient way of formatting strings with variables - any code inside\ncurly parentheses will be evaluated.  They're convenient, flexible, and\nsupposedly pretty well-optimized!  Let's give it a spin.  Let's say we have a\nDataFrame df2  that only contains the rows to be updated...\n\ncnx = create_engine('mysql+pymysql://root:cracked1@localhost/appointments', echo=False)\nfor x in df2.itertuples(index=False):\n    print(updateStr(x))\nUPDATE books SET author = 'Abby' WHERE id = 3;\nUPDATE books SET author = 'Brian' WHERE id = 7;\nUPDATE books SET author = 'Celestine' WHERE id = 9;\n\n\nSweet!  Now let's actually execute it.  We'll be using the execute()  function\nin Pandas' io.sql  module.  I get the feeling I'm not supposed to, primarily\nbecause it doesn't have an entry in the official Pandas documentation, and I\nonly found it by poking around the module code.  But hey, it works!  (Warning\nfrom last time applies super-duper-extra-double this time!)\n\nfor x in df2.itertuples(index=False):\n    pd.io.sql.execute(updateStr(x), cnx)\n\n\nAnd now let's see if it worked...\n\npd.io.sql.read_sql_table(\"books\", cnx)\n   author copies  id\n     Abby      2   3\n    Brian          7\nCelestine      7   9`\n\n\nSweet!\n\nNow all that's well and good, but surely we're not the first person to try to\nmake SQL statements by calling Python functions!  How about a slightly less\nerror-prone way of doing this?\n\nSQLAlchemy\nI'll level with you - I've never actually used SQLAlchemy for anything but\nconnecting Pandas to databases before via the create_engine()  function.  But\nthat's why blogging's great - gives you an excuse to finally check out that\nthing you knew was gonna be useful!\n\nSQLAlchemy first needs some information about our table, then it'll let us\ncreate statements doing things to said table automagically.  We can either\ndefine it ourselves (maybe in a future post!) or read an existing table.  I\nfound the default way of doing this a little to\n\"has-a-couple-too-many-steps-and-function-args\"-y, so I packaged the version of\nthe command that worked into a little function.  I encourage you all to do the\nsame!\n\ndef loadTable(cnx, tableName):\n    meta = MetaData(bind=cnx) \n    return Table(tableName, meta, autoload=True, autoload_with=cnx)\n\n#Binding it to the Engine will make sure it uses the right SQL dialect\n\n\nThere we go!  Now, let's load our books  table...\n\nbooks = loadTable(cnx, \"books\")\n\n\nAnd here's the cool part!  Now that we have our table object, it has a bunch of\nbuilt-in methods for doing SQL things!  We can print an example...\n\nstr(books.update())\n'UPDATE books SET index=:index, author=:author, copies=:copies, id=:id'\n\n\nIf we call books.update, it'll do exactly that.  It also has a handy string\nrepresentation, for debugging and sanity checks.\n\nSQLAlchemy wants us to have a Connection  in addition to our Engine.  Well,\nalright then.\n\nconn = cnx.connect()\n\n\nFine, happy now?  Good.\n\nSQLAlchemy lets us build SQL statements by chain methods, which is fantastically\nuseful.  Less error-prone, easier to pass collections.  Our basic pattern would\nbe, based on iterating with itertuples...\n\nfor x in df2.itertuples(index=False):\n    stmt = (books\n          .update()\n          .where(books.c.id == x.id)\n          .values(author=x.author)\n         )\n    conn.execute(stmt)\n\n\nSuccess!","html":"<p>Let's say you were continuing our task from <em><a href=\"https://hackersandslackers.com/code-snippet-corner-a-dirty-way-of-cleaning-data-ft-pandas-sql/\">last week</a></em>: Taking a bunch of inconsistent Excel files and CSVs, and putting them into a database.</p><p>Let's say you've been given a new CSV that conflicts with some rows you've already entered, and you're told that these rows are the correct values.</p><h2 id=\"why-not-use-pandas-built-in-method\">Why Not Use Pandas' Built-in Method?</h2><p>Pandas' built-in <code>to_sql</code> DataFrame method won't be useful here.  Remember, it writes as a block - if you set the <code>if_exists</code> flag to <code>\"replace\"</code>, that'll make it replace the entire DB table with a new one based on the DF you're uploading.  And if you're doing this piecemeal, you presumably don't want that.</p><p>Last week, we just made a new DataFrame out of each row and appended it to the DB table.  That won't work here - we need an Update.  Writing each update by hand would be annoying, though - luckily we can use code to generate more code!  Python has an extremely handy little tool called <code>f-strings</code> that make string templating a snap!  </p><pre><code class=\"language-python\">def updateStr(row):\n    return (f&quot;UPDATE books &quot;\n            f&quot;&quot;&quot;SET author = '{x.author}' &quot;&quot;&quot;\n            f&quot;&quot;&quot;WHERE id = {x.id};&quot;&quot;&quot;)\n</code></pre>\n<p>Let's walk through that.  It takes a row from a Dataframe - note that we're using dot notation here instead of the bracket notation.  The reason we're doing that is because, instead of using <code>iterrows()</code> like last week, we'll be using <code>itertuples</code> because the docstring for <code>iterrows()</code> said I should.  One reason for this is that <code>iterrows()</code> gives a pandas Series, which will store everything as the same datatype, which will be annoying in some cases.  I think it's supposed to be faster too?  <code>itertuples()</code> instead gives us Named Tuples, which is kind of like a dictionary, except we have to use dot notation instead of square brackets.  </p><p>Sooo, we take a Named Tuple, and then the f-string goes to work.  It's mostly just a convenient way of formatting strings with variables - any code inside curly parentheses will be evaluated.  They're convenient, flexible, and supposedly pretty well-optimized!  Let's give it a spin.  Let's say we have a DataFrame <code>df2</code> that only contains the rows to be updated...</p><pre><code class=\"language-python\">cnx = create_engine('mysql+pymysql://root:cracked1@localhost/appointments', echo=False)\nfor x in df2.itertuples(index=False):\n    print(updateStr(x))\nUPDATE books SET author = 'Abby' WHERE id = 3;\nUPDATE books SET author = 'Brian' WHERE id = 7;\nUPDATE books SET author = 'Celestine' WHERE id = 9;\n</code></pre>\n<p>Sweet!  Now let's actually execute it.  We'll be using the <code>execute()</code> function in Pandas' <code>io.sql</code> module.  I get the feeling I'm not supposed to, primarily because it doesn't have an entry in the official Pandas documentation, and I only found it by poking around the module code.  But hey, it works!  (Warning from last time applies super-duper-extra-double this time!)</p><pre><code class=\"language-python\">for x in df2.itertuples(index=False):\n    pd.io.sql.execute(updateStr(x), cnx)\n</code></pre>\n<p>And now let's see if it worked...</p><pre><code class=\"language-python\">pd.io.sql.read_sql_table(&quot;books&quot;, cnx)\n   author copies  id\n     Abby      2   3\n    Brian          7\nCelestine      7   9`\n</code></pre>\n<p>Sweet!</p><p>Now all that's well and good, but surely we're not the first person to try to make SQL statements by calling Python functions!  How about a slightly less error-prone way of doing this?</p><h1 id=\"sqlalchemy\">SQLAlchemy</h1><p>I'll level with you - I've never actually used SQLAlchemy for anything but connecting Pandas to databases before via the <code>create_engine()</code> function.  But that's why blogging's great - gives you an excuse to finally check out that thing you knew was gonna be useful!</p><p>SQLAlchemy first needs some information about our table, then it'll let us create statements doing things to said table automagically.  We can either define it ourselves (maybe in a future post!) or read an existing table.  I found the default way of doing this a little to \"has-a-couple-too-many-steps-and-function-args\"-y, so I packaged the version of the command that worked into a little function.  I encourage you all to do the same!</p><pre><code class=\"language-python\">def loadTable(cnx, tableName):\n    meta = MetaData(bind=cnx) \n    return Table(tableName, meta, autoload=True, autoload_with=cnx)\n\n#Binding it to the Engine will make sure it uses the right SQL dialect\n</code></pre>\n<p>There we go!  Now, let's load our <code>books</code> table...</p><pre><code class=\"language-python\">books = loadTable(cnx, &quot;books&quot;)\n</code></pre>\n<p>And here's the cool part!  Now that we have our table object, it has a bunch of built-in methods for doing SQL things!  We can print an example...</p><pre><code class=\"language-python\">str(books.update())\n'UPDATE books SET index=:index, author=:author, copies=:copies, id=:id'\n</code></pre>\n<p>If we call <code>books.update</code>, it'll do exactly that.  It also has a handy string representation, for debugging and sanity checks.</p><p>SQLAlchemy wants us to have a <code>Connection</code> in addition to our <code>Engine</code>.  Well, alright then.</p><pre><code class=\"language-python\">conn = cnx.connect()\n</code></pre>\n<p>Fine, happy now?  Good.</p><p>SQLAlchemy lets us build SQL statements by chain methods, which is fantastically useful.  Less error-prone, easier to pass collections.  Our basic pattern would be, based on iterating with <code>itertuples</code>...</p><pre><code class=\"language-python\">for x in df2.itertuples(index=False):\n    stmt = (books\n          .update()\n          .where(books.c.id == x.id)\n          .values(author=x.author)\n         )\n    conn.execute(stmt)\n</code></pre>\n<p>Success!</p>","url":"https://hackersandslackers.com/trash-pandas/","uuid":"8a789f92-fbde-48b5-8bdf-01206e340cc1","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b4fdab10dda8433e079043f"}}]}},"pageContext":{"slug":"matt","limit":12,"skip":192,"numberOfPages":24,"humanPageNumber":17,"prevPageNumber":16,"nextPageNumber":18,"previousPagePath":"/author/matt/page/16/","nextPagePath":"/author/matt/page/18/"}}