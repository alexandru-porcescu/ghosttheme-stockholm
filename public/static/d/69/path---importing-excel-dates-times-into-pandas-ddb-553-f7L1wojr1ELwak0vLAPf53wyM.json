{"data":{"ghostPost":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736d3","title":"Importing Excel Datetimes Into Pandas, Part I","slug":"importing-excel-dates-times-into-pandas","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/04/excelpandaspart1-1.jpg","excerpt":"Pandas & Excel, Part 1.","custom_excerpt":"Pandas & Excel, Part 1.","created_at_pretty":"13 August, 2018","published_at_pretty":"13 August, 2018","updated_at_pretty":"10 April, 2019","created_at":"2018-08-12T20:21:40.000-04:00","published_at":"2018-08-13T07:30:00.000-04:00","updated_at":"2019-04-09T23:40:15.000-04:00","meta_title":"Pandas & Excel, Part 1 | Hackers And Slackers","meta_description":"Import dates & times from Excel .xlsx files into Pandas!","og_description":"Import dates & times from Excel .xlsx files into Pandas!","og_image":"https://hackersandslackers.com/content/images/2019/04/excelpandaspart1-1-2.jpg","og_title":"Importing Excel Datetimes Into Pandas","twitter_description":"Import dates & times from Excel .xlsx files into Pandas!","twitter_image":"https://hackersandslackers.com/content/images/2019/04/excelpandaspart1-1-1.jpg","twitter_title":"Importing Excel Datetimes Into Pandas","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Pandas","slug":"pandas","description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/pandasmerge.jpg","meta_description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","meta_title":"Pythons and Pandas | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Pandas","slug":"pandas","description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/pandasmerge.jpg","meta_description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","meta_title":"Pythons and Pandas | Hackers and Slackers","visibility":"public"},{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Code Snippet Corner","slug":"codesnippetcorner","description":"Real-world examples of Python being used to solve complex data problems, primarily using Jupyter notebooks.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o-1.jpg","meta_description":"Real-world examples of Python being used to solve complex data problems.","meta_title":"Python Code Snippet Corner","visibility":"public"},{"name":"#Code Snippet Corner","slug":"code-snippet-corner","description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o_o.jpg","meta_description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","meta_title":"Python Code Snippet Corner","visibility":"internal"}],"plaintext":"Different file formats are different!  For all kinds of reasons!\n\nA few months back, I had to import some Excel files into a database. In this\nprocess I learned so much about the delightfully unique way Excel stores dates &\ntimes!\n\nThe basic datetime will be a decimal number, like 43324.909907407404.  The\nnumber before the decimal is the day, the number afterwards is the time.  So\nfar, so good - this is pretty common for computers.  The date is often the\nnumber of days past a certain date, and the time is the number of seconds.\n\nSo, let's load our excel sheet!  Pandas of course has a painless way of doing\nthis.\n\nimport pandas as pd\n\ndfRaw = pd.read_excel(\"hasDates.xlsx\", sheet_name=\"Sheet1\")\n\ndfRaw[\"dateTimes\"]\n\n\n0\n 0\n 43324.909907\n 1\n 43324.909919\n 2\n 43324.909931\n 3\n 43324.909942\n 4\n 43324.909954\n Sadly, we can't yet convert these.  Different Excel files start at different\ndates, and you'll get a very wrong result if you use the wrong one.  Luckily,\nthere are tools that'll go into the file and extract what we need!  Enter xlrd:\n\nimport xlrd\n\nbook = xlrd.open_workbook(\"hasDates.xlsx\")\ndatemode = book.datemode\n\n\nxlrd  also has a handy function for turning those dates into a datetime  tuple\nthat'll play nicely with Python.\n\ndfRaw[\"dateTimes\"].map(lambda x: \n          xlrd.xldate_as_tuple(x, datemode))\n\n\n0\n 0\n (2018, 8, 12, 21, 50, 16)\n 1\n (2018, 8, 12, 21, 50, 17)\n 2\n (2018, 8, 12, 21, 50, 18)\n 3\n (2018, 8, 12, 21, 50, 19)\n 4\n (2018, 8, 12, 21, 50, 20)\n And once we've got that, simple enough to convert to proper datetimes!\n\nimport datetime\n\ndfRaw[\"dateTimes\"].map(lambda x: \n          datetime.datetime(*xlrd.xldate_as_tuple(x, \n                                                  datemode)))\n\n\n0\n 0\n 2018-08-12 21:50:16\n 1\n 2018-08-12 21:50:17\n 2\n 2018-08-12 21:50:18\n 3\n 2018-08-12 21:50:19\n 4\n 2018-08-12 21:50:20\n Stick around for Part 2, where we look at some messier situations.","html":"<p>Different file formats are different!  For all kinds of reasons!</p><p>A few months back, I had to import some Excel files into a database. In this process I learned so much about the delightfully unique way Excel stores dates &amp; times!  </p><p>The basic datetime will be a decimal number, like <code>43324.909907407404</code>.  The number before the decimal is the day, the number afterwards is the time.  So far, so good - this is pretty common for computers.  The date is often the number of days past a certain date, and the time is the number of seconds.  </p><p>So, let's load our excel sheet!  Pandas of course has a painless way of doing this.</p><pre><code class=\"language-python\">import pandas as pd\n\ndfRaw = pd.read_excel(&quot;hasDates.xlsx&quot;, sheet_name=&quot;Sheet1&quot;)\n\ndfRaw[&quot;dateTimes&quot;]\n</code></pre>\n<div class=\"tableContainer\">\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>43324.909907</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>43324.909919</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>43324.909931</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>43324.909942</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>43324.909954</td>\n    </tr>\n  </tbody>\n</table>\n</div><p>Sadly, we can't yet convert these.  Different Excel files start at different dates, and you'll get a very wrong result if you use the wrong one.  Luckily, there are tools that'll go into the file and extract what we need!  Enter <code>xlrd</code>:</p><pre><code class=\"language-python\">import xlrd\n\nbook = xlrd.open_workbook(&quot;hasDates.xlsx&quot;)\ndatemode = book.datemode\n</code></pre>\n<p><code>xlrd</code> also has a handy function for turning those dates into a <code>datetime</code> tuple that'll play nicely with Python.</p><pre><code class=\"language-python\">dfRaw[&quot;dateTimes&quot;].map(lambda x: \n          xlrd.xldate_as_tuple(x, datemode))\n</code></pre>\n<div class=\"tableContainer\">\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>(2018, 8, 12, 21, 50, 16)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>(2018, 8, 12, 21, 50, 17)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>(2018, 8, 12, 21, 50, 18)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>(2018, 8, 12, 21, 50, 19)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>(2018, 8, 12, 21, 50, 20)</td>\n    </tr>\n  </tbody>\n</table>\n</div><p>And once we've got that, simple enough to convert to proper datetimes!</p><pre><code class=\"language-python\">import datetime\n\ndfRaw[&quot;dateTimes&quot;].map(lambda x: \n          datetime.datetime(*xlrd.xldate_as_tuple(x, \n                                                  datemode)))\n</code></pre>\n<div class=\"tableContainer\">\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2018-08-12 21:50:16</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2018-08-12 21:50:17</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2018-08-12 21:50:18</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2018-08-12 21:50:19</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2018-08-12 21:50:20</td>\n    </tr>\n  </tbody>\n</table>\n</div><p>Stick around for Part 2, where we look at some messier situations.</p>","url":"https://hackersandslackers.com/importing-excel-dates-times-into-pandas/","uuid":"727f6571-8ca4-4abc-b278-c7517cdaa29b","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b70cf140230162100a1da9b"}},"pageContext":{"slug":"importing-excel-dates-times-into-pandas"}}