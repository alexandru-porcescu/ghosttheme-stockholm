{"data":{"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673702","title":"Lynx Roundup, September 19th","slug":"lynx-roundup-september-19th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/02/86-2@2x.jpg","excerpt":"Space shuttle software!  Serverless best practices!  A for-real new organ discovered!","custom_excerpt":"Space shuttle software!  Serverless best practices!  A for-real new organ discovered!","created_at_pretty":"19 September, 2018","published_at_pretty":"19 September, 2018","updated_at_pretty":"14 February, 2019","created_at":"2018-09-18T22:27:56.000-04:00","published_at":"2018-09-19T07:00:00.000-04:00","updated_at":"2019-02-14T05:15:40.000-05:00","meta_title":"Space shuttle software!  Serverless best practices!  A for-real new organ discovered! | Hackers And Slackers","meta_description":"Space shuttle software!  Serverless best practices!  A for-real new organ discovered!","og_description":"Space shuttle software!  Serverless best practices!  A for-real new organ discovered!","og_image":"https://hackersandslackers.com/content/images/2019/02/86-2@2x.jpg","og_title":"Lynx Roundup, September 19th","twitter_description":"Space shuttle software!  Serverless best practices!  A for-real new organ discovered!","twitter_image":"https://hackersandslackers.com/content/images/2019/02/86-2@2x.jpg","twitter_title":"Lynx Roundup, September 19th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://spaceflight.nasa.gov/shuttle/reference/shutref/orbiter/avionics/\n\n\n\n\n\nhttps://medium.com/@PaulDJohnston/serverless-best-practices-b3c97d551535\n\n\n\n\n\nhttps://www.newsweek.com/scientists-discover-new-micro-organ-hiding-our-immune-system-1086757\n\n\n\n\n\nhttps://www.oreilly.com/ideas/its-time-to-establish-big-data-standards\n\n\n\n\n\nhttps://discuss.ocaml.org/t/ocaml-mooc-third-edition/2458\n\n\n\n\n\nhttps://www.quora.com/When-is-it-most-appropriate-to-take-the-arithmetic-mean-vs-geometric-mean-vs-harmonic-mean","html":"<p></p><p></p><p><a href=\"https://spaceflight.nasa.gov/shuttle/reference/shutref/orbiter/avionics/\">https://spaceflight.nasa.gov/shuttle/reference/shutref/orbiter/avionics/</a></p><p></p><p></p><p><a href=\"https://medium.com/@PaulDJohnston/serverless-best-practices-b3c97d551535\">https://medium.com/@PaulDJohnston/serverless-best-practices-b3c97d551535</a></p><p></p><p></p><p><a href=\"https://www.newsweek.com/scientists-discover-new-micro-organ-hiding-our-immune-system-1086757\">https://www.newsweek.com/scientists-discover-new-micro-organ-hiding-our-immune-system-1086757</a></p><p></p><p></p><p><a href=\"https://www.oreilly.com/ideas/its-time-to-establish-big-data-standards\">https://www.oreilly.com/ideas/its-time-to-establish-big-data-standards</a></p><p></p><p></p><p><a href=\"https://discuss.ocaml.org/t/ocaml-mooc-third-edition/2458\">https://discuss.ocaml.org/t/ocaml-mooc-third-edition/2458</a></p><p></p><p></p><p><a href=\"https://www.quora.com/When-is-it-most-appropriate-to-take-the-arithmetic-mean-vs-geometric-mean-vs-harmonic-mean\">https://www.quora.com/When-is-it-most-appropriate-to-take-the-arithmetic-mean-vs-geometric-mean-vs-harmonic-mean</a></p>","url":"https://hackersandslackers.com/lynx-roundup-september-19th/","uuid":"3aa731ed-0fa6-40cd-9dc5-02175c4324f7","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5ba1b42c9ef94d562ceaf0ac"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673700","title":"Tuning Random Forests Hyperparameters with Binary Search Part III: min_samples_leaf","slug":"random-forests-hyperparameters-min_samples_leaf","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/09/codecorner2-1-1@2x.jpg","excerpt":"Tune the min_samples_leaf parameter in for a Random Forests classifier in scikit-learn in Python\n.","custom_excerpt":"Tune the min_samples_leaf parameter in for a Random Forests classifier in scikit-learn in Python\n.","created_at_pretty":"17 September, 2018","published_at_pretty":"17 September, 2018","updated_at_pretty":"19 February, 2019","created_at":"2018-09-16T21:33:48.000-04:00","published_at":"2018-09-17T07:30:00.000-04:00","updated_at":"2019-02-19T03:44:33.000-05:00","meta_title":"Tuning Random Forests Hyperparameters with Binary Search Part III: min_samples_leaf | Hackers and Slackers","meta_description":"Tune the min_samples_leaf parameter in for a Random Forests classifier in scikit-learn in Python\n","og_description":"Tuning Random Forests Hyperparameters with Binary Search Part III: min_samples_leaf","og_image":"https://hackersandslackers.com/content/images/2018/09/codecorner2-1-1@2x.jpg","og_title":"Tuning Random Forests Hyperparameters with Binary Search Part III: min_samples_leaf","twitter_description":"Tune the min_samples_leaf parameter in for a Random Forests classifier in scikit-learn in Python\n","twitter_image":"https://hackersandslackers.com/content/images/2018/09/codecorner2-1-1@2x.jpg","twitter_title":"Tuning Random Forests Hyperparameters with Binary Search Part III: min_samples_leaf","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Code Snippet Corner","slug":"codesnippetcorner","description":"Real-world examples of Python being used to solve complex data problems, primarily using Jupyter notebooks.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o-1.jpg","meta_description":"Real-world examples of Python being used to solve complex data problems.","meta_title":"Python Code Snippet Corner","visibility":"public"},"tags":[{"name":"Code Snippet Corner","slug":"codesnippetcorner","description":"Real-world examples of Python being used to solve complex data problems, primarily using Jupyter notebooks.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o-1.jpg","meta_description":"Real-world examples of Python being used to solve complex data problems.","meta_title":"Python Code Snippet Corner","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Data Science","slug":"datascience","description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","feature_image":null,"meta_description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","meta_title":"Data Science | Hackers and Slackers","visibility":"public"},{"name":"Machine Learning","slug":"machine-learning","description":"The latest developments in machine learning tools and technology available to data scientists.","feature_image":null,"meta_description":"The latest developments in machine learning tools and technology available to data scientists.","meta_title":"Machine Learning | Hackers and Slackers","visibility":"public"},{"name":"#Code Snippet Corner","slug":"code-snippet-corner","description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o_o.jpg","meta_description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","meta_title":"Python Code Snippet Corner","visibility":"internal"}],"plaintext":"Part 1 (n_estimators) here\n[https://hackersandslackers.com/code-snippet-corner-tuning-machine-learning-hyperparameters-with-binary-search/]\nPart 2 (max_depth) here\n[https://hackersandslackers.com/code-snippet-corner-tuning-random-learning-hyperparameters-with-binary-search/]\nNotebook here\n[https://github.com/mattalhonte/binary-grid-search/blob/master/Introspect%20Trees%20(Samples).ipynb]\n\n\n--------------------------------------------------------------------------------\n\nAnother parameter, another set of quirks!\n\nmin_samples_leaf  is sort of similar to max_depth.  It helps us avoid\noverfitting.  It's also non-obvious what you should use as your upper and lower\nlimits to search between.  Let's do what we did last week - build a forest with\nno parameters, see what it does, and use the upper and lower limits!\n\nimport pandas as pd\n\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import auc\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import load_breast_cancer\n\n\ndata = load_breast_cancer()\nX, y = data.data, data.target\n\nrfArgs = {\"random_state\": 0,\n          \"n_jobs\": -1,\n          \"class_weight\": \"balanced\",\n         \"n_estimators\": 18,\n         \"oob_score\": True}\n\nclf = RandomForestClassifier(**rfArgs)\nclf.fit(X, y)\n\n\nLet's use the handy function from here\n[https://aysent.github.io/2015/11/08/random-forest-leaf-visualization.html]  to\ncrawl the number of samples in a tree's leaf nodes: \n\ndef leaf_samples(tree, node_id = 0):\n    left_child = tree.children_left[node_id]\n    right_child = tree.children_right[node_id]\n    \n    if left_child == _tree.TREE_LEAF:\n        samples = np.array([tree.n_node_samples[node_id]])\n        \n    else:\n        \n        left_samples = leaf_samples(tree, left_child)\n        right_samples = leaf_samples(tree, right_child)\n        \n        samples = np.append(left_samples, right_samples)\n        \n    return samples\n\n\nLast week we made a function to grab them for a whole forest - since this is the\nsecond time we're doing this, and we may do it again, let's make a modular\nlittle function that takes a crawler function as an argument!\n\ndef getForestParams(X, y, param, kwargs):\n    clf = RandomForestClassifier(**kwargs)\n    clf.fit(X, y)\n    params = np.hstack([param(estimator.tree_) \n                 for estimator in clf.estimators_])\n    return {\"min\": params.min(),\n           \"max\": params.max()}\n\n\nLet's see it in action!\n\ndata = load_breast_cancer()\nX, y = data.data, data.target\n\nrfArgs = {\"random_state\": 0,\n          \"n_jobs\": -1,\n          \"class_weight\": \"balanced\",\n         \"n_estimators\": 18,\n         \"oob_score\": True}\n\ngetForestParams(X, y, leaf_samples, rfArgs)\n#> {'max': 199, 'min': 1}\n\n\nAlmost ready to start optimizing!  Since part of what we get out of optimizing \nmin_samples_leaf  is regularization (and because it's just good practice!),\nlet's make a metric with some cross-validation.  Luckily, Scikit  has a builtin \ncross_val_score  function.  We'll just need to do a teensy bit of tweaking to\nmake it use the area under a precision_recall_curve.\n\nfrom sklearn.model_selection import cross_val_score\n\ndef auc_prc(estimator, X, y):\n    estimator.fit(X, y)\n    y_pred = estimator.oob_decision_function_[:, 1]\n    precision, recall, _ = precision_recall_curve(y, y_pred)\n    return auc(recall, precision)\n\ndef getForestAccuracyCV(X, y, kwargs):\n    clf = RandomForestClassifier(**kwargs)\n    return np.mean(cross_val_score(clf, X, y, scoring=auc_prc, cv=5))\n\n\nAwesome, now we have a metric that can be fed into our binary search.\n\nmin_samples_leaf = bgs.compareValsBaseCase(X, \n                    y, \n                    getForestAccuracyCV,        \n                    rfArgs, \n                    \"min_samples_leaf\", \n                    0, \n                    1, \n                    199)\nbgs.showTimeScoreChartAndGraph(min_samples_leaf)\n\n\nmin_samples_leaf\n score\n time\n 1\n 0.981662\n 1.402102\n 199\n 0.506455\n 1.416349\n 100\n 0.506455\n 1.401090\n 51\n 0.506455\n 1.394548\n 26\n 0.975894\n 1.396503\n 14\n 0.982954\n 1.398522\n 7\n 0.979888\n 1.398929\n 10\n 0.984789\n 1.404815\n 12\n 0.986302\n 1.391171\n \nmin_samples_leaf\n score\n time\n scoreTimeRatio\n 1\n 0.992414\n 0.473848\n 0.082938\n 199\n 0.002084\n 1.039718\n 0.000000\n 100\n 0.002084\n 0.433676\n 0.000111\n 51\n 0.002084\n 0.173824\n 0.000396\n 26\n 0.980393\n 0.251484\n 0.154448\n 14\n 0.995105\n 0.331692\n 0.118839\n 7\n 0.988716\n 0.347858\n 0.112585\n 10\n 0.998930\n 0.581632\n 0.067998\n 12\n 1.002084\n 0.039718\n 1.000000\n Looks like the action's between 1 and 51.  More than that, and the score goes\nwhile simultaneously increasing the runtime - the opposite of what we want!\n\nmin_samples_leaf = bgs.compareValsBaseCase(X, \n                    y, \n                    getForestAccuracyCV,        \n                    rfArgs, \n                    \"min_samples_leaf\", \n                    0, \n                    1, \n                    14)\nbgs.showTimeScoreChartAndGraph(min_samples_leaf)\n\n\nmin_samples_leaf\n score\n time\n 1\n 0.981662\n 1.389387\n 51\n 0.506455\n 1.403807\n 26\n 0.975894\n 1.404517\n 14\n 0.982954\n 1.385420\n 7\n 0.979888\n 1.398840\n 10\n 0.984789\n 1.393863\n 12\n 0.986302\n 1.411774\n \nmin_samples_leaf\n score\n time\n scoreTimeRatio\n 1\n 0.992414\n 0.188492\n 0.200671\n 51\n 0.002084\n 0.735618\n 0.000000\n 26\n 0.980393\n 0.762561\n 0.048920\n 14\n 0.995105\n 0.037944\n 1.000000\n 7\n 0.988716\n 0.547179\n 0.068798\n 10\n 0.998930\n 0.358303\n 0.106209\n 12\n 1.002084\n 1.037944\n 0.036709\n Big drop-off after 26, it seems!\n\nmin_samples_leaf = bgs.compareValsBaseCase(X, \n                    y, \n                    getForestAccuracyCV,        \n                    rfArgs, \n                    \"min_samples_leaf\", \n                    0, \n                    1, \n                    26)\nbgs.showTimeScoreChartAndGraph(min_samples_leaf)\n\n\nmin_samples_leaf\n score\n time\n 1\n 0.981662\n 1.407957\n 26\n 0.975894\n 1.398042\n 14\n 0.982954\n 1.396782\n 7\n 0.979888\n 1.396096\n 10\n 0.984789\n 1.402322\n 12\n 0.986302\n 1.401080\n \nmin_samples_leaf\n score\n time\n scoreTimeRatio\n 1\n 0.650270\n 1.084306\n 0.040144\n 26\n 0.096077\n 0.248406\n 0.000000\n 14\n 0.774346\n 0.142157\n 0.954016\n 7\n 0.479788\n 0.084306\n 1.000000\n 10\n 0.950677\n 0.609184\n 0.221294\n 12\n 1.096077\n 0.504512\n 0.336668\n One more with 14 as our upper limit!\n\nmin_samples_leaf = bgs.compareValsBaseCase(X, \n                    y, \n                    getForestAccuracyCV,        \n                    rfArgs, \n                    \"min_samples_leaf\", \n                    0, \n                    1, \n                    14)\nbgs.showTimeScoreChartAndGraph(min_samples_leaf)\n\n\nmin_samples_leaf\n score\n time\n 1\n 0.981662\n 1.401341\n 14\n 0.982954\n 1.400361\n 7\n 0.979888\n 1.402408\n 4\n 0.981121\n 1.401396\n 3\n 0.983580\n 1.401332\n \nmin_samples_leaf\n score\n time\n scoreTimeRatio\n 1\n 0.992414\n 0.188492\n 0.200671\n 51\n 0.002084\n 0.735618\n 0.000000\n 26\n 0.980393\n 0.762561\n 0.048920\n 14\n 0.995105\n 0.037944\n 1.000000\n 7\n 0.988716\n 0.547179\n 0.068798\n 10\n 0.998930\n 0.358303\n 0.106209\n 12\n 1.002084\n 1.037944\n 0.036709\n 3 it is!I suppose when it gets this small we could use a regular Grid Search,\nbut...maybe next week!  Or maybe another variable!  Or maybe benchmarks vs \nGridSearchCV  and/or RandomizedSearchCV.  Who knows what the future holds?","html":"<p>Part 1 (n_estimators) <a href=\"https://hackersandslackers.com/code-snippet-corner-tuning-machine-learning-hyperparameters-with-binary-search/\">here</a><br>Part 2 (max_depth) <a href=\"https://hackersandslackers.com/code-snippet-corner-tuning-random-learning-hyperparameters-with-binary-search/\">here</a><br>Notebook <a href=\"https://github.com/mattalhonte/binary-grid-search/blob/master/Introspect%20Trees%20(Samples).ipynb\">here</a></p><hr><p>Another parameter, another set of quirks!</p><p><code>min_samples_leaf</code> is sort of similar to <code>max_depth</code>.  It helps us avoid overfitting.  It's also non-obvious what you should use as your upper and lower limits to search between.  Let's do what we did last week - build a forest with no parameters, see what it does, and use the upper and lower limits!</p><pre><code class=\"language-python\">import pandas as pd\n\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import auc\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import load_breast_cancer\n\n\ndata = load_breast_cancer()\nX, y = data.data, data.target\n\nrfArgs = {&quot;random_state&quot;: 0,\n          &quot;n_jobs&quot;: -1,\n          &quot;class_weight&quot;: &quot;balanced&quot;,\n         &quot;n_estimators&quot;: 18,\n         &quot;oob_score&quot;: True}\n\nclf = RandomForestClassifier(**rfArgs)\nclf.fit(X, y)\n</code></pre>\n<p>Let's use the handy function from <a href=\"https://aysent.github.io/2015/11/08/random-forest-leaf-visualization.html\">here</a> to crawl the number of samples in a tree's leaf nodes: </p><pre><code class=\"language-python\">def leaf_samples(tree, node_id = 0):\n    left_child = tree.children_left[node_id]\n    right_child = tree.children_right[node_id]\n    \n    if left_child == _tree.TREE_LEAF:\n        samples = np.array([tree.n_node_samples[node_id]])\n        \n    else:\n        \n        left_samples = leaf_samples(tree, left_child)\n        right_samples = leaf_samples(tree, right_child)\n        \n        samples = np.append(left_samples, right_samples)\n        \n    return samples\n</code></pre>\n<p>Last week we made a function to grab them for a whole forest - since this is the second time we're doing this, and we may do it again, let's make a modular little function that takes a crawler function as an argument!</p><pre><code class=\"language-python\">def getForestParams(X, y, param, kwargs):\n    clf = RandomForestClassifier(**kwargs)\n    clf.fit(X, y)\n    params = np.hstack([param(estimator.tree_) \n                 for estimator in clf.estimators_])\n    return {&quot;min&quot;: params.min(),\n           &quot;max&quot;: params.max()}\n</code></pre>\n<p>Let's see it in action!</p><pre><code class=\"language-python\">data = load_breast_cancer()\nX, y = data.data, data.target\n\nrfArgs = {&quot;random_state&quot;: 0,\n          &quot;n_jobs&quot;: -1,\n          &quot;class_weight&quot;: &quot;balanced&quot;,\n         &quot;n_estimators&quot;: 18,\n         &quot;oob_score&quot;: True}\n\ngetForestParams(X, y, leaf_samples, rfArgs)\n#&gt; {'max': 199, 'min': 1}\n</code></pre>\n<p>Almost ready to start optimizing!  Since part of what we get out of optimizing <code>min_samples_leaf</code> is regularization (and because it's just good practice!), let's make a metric with some cross-validation.  Luckily, <strong>Scikit</strong> has a builtin <code>cross_val_score</code> function.  We'll just need to do a teensy bit of tweaking to make it use the area under a <code>precision_recall_curve</code>.</p><pre><code class=\"language-python\">from sklearn.model_selection import cross_val_score\n\ndef auc_prc(estimator, X, y):\n    estimator.fit(X, y)\n    y_pred = estimator.oob_decision_function_[:, 1]\n    precision, recall, _ = precision_recall_curve(y, y_pred)\n    return auc(recall, precision)\n\ndef getForestAccuracyCV(X, y, kwargs):\n    clf = RandomForestClassifier(**kwargs)\n    return np.mean(cross_val_score(clf, X, y, scoring=auc_prc, cv=5))\n</code></pre>\n<p>Awesome, now we have a metric that can be fed into our binary search.</p><pre><code class=\"language-python\">min_samples_leaf = bgs.compareValsBaseCase(X, \n                    y, \n                    getForestAccuracyCV,        \n                    rfArgs, \n                    &quot;min_samples_leaf&quot;, \n                    0, \n                    1, \n                    199)\nbgs.showTimeScoreChartAndGraph(min_samples_leaf)\n</code></pre>\n<div class=\"tableContainer\">\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>min_samples_leaf</th>\n      <th>score</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>0.981662</td>\n      <td>1.402102</td>\n    </tr>\n    <tr>\n      <th>199</th>\n      <td>0.506455</td>\n      <td>1.416349</td>\n    </tr>\n    <tr>\n      <th>100</th>\n      <td>0.506455</td>\n      <td>1.401090</td>\n    </tr>\n    <tr>\n      <th>51</th>\n      <td>0.506455</td>\n      <td>1.394548</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>0.975894</td>\n      <td>1.396503</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>0.982954</td>\n      <td>1.398522</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0.979888</td>\n      <td>1.398929</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>0.984789</td>\n      <td>1.404815</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>0.986302</td>\n      <td>1.391171</td>\n    </tr>\n  </tbody>\n</table>\n<br>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>min_samples_leaf</th>\n      <th>score</th>\n      <th>time</th>\n      <th>scoreTimeRatio</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>0.992414</td>\n      <td>0.473848</td>\n      <td>0.082938</td>\n    </tr>\n    <tr>\n      <th>199</th>\n      <td>0.002084</td>\n      <td>1.039718</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>100</th>\n      <td>0.002084</td>\n      <td>0.433676</td>\n      <td>0.000111</td>\n    </tr>\n    <tr>\n      <th>51</th>\n      <td>0.002084</td>\n      <td>0.173824</td>\n      <td>0.000396</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>0.980393</td>\n      <td>0.251484</td>\n      <td>0.154448</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>0.995105</td>\n      <td>0.331692</td>\n      <td>0.118839</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0.988716</td>\n      <td>0.347858</td>\n      <td>0.112585</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>0.998930</td>\n      <td>0.581632</td>\n      <td>0.067998</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>1.002084</td>\n      <td>0.039718</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div><figure class=\"kg-card kg-image-card\"><img src=\"https://res-4.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/min_samples_leaf1.png\" class=\"kg-image\"></figure><p>Looks like the action's between 1 and 51.  More than that, and the score goes while simultaneously increasing the runtime - the opposite of what we want!</p><pre><code class=\"language-python\">min_samples_leaf = bgs.compareValsBaseCase(X, \n                    y, \n                    getForestAccuracyCV,        \n                    rfArgs, \n                    &quot;min_samples_leaf&quot;, \n                    0, \n                    1, \n                    14)\nbgs.showTimeScoreChartAndGraph(min_samples_leaf)\n</code></pre>\n<div class=\"tableContainer\">\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>min_samples_leaf</th>\n      <th>score</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>0.981662</td>\n      <td>1.389387</td>\n    </tr>\n    <tr>\n      <th>51</th>\n      <td>0.506455</td>\n      <td>1.403807</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>0.975894</td>\n      <td>1.404517</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>0.982954</td>\n      <td>1.385420</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0.979888</td>\n      <td>1.398840</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>0.984789</td>\n      <td>1.393863</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>0.986302</td>\n      <td>1.411774</td>\n    </tr>\n  </tbody>\n</table>\n<br>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>min_samples_leaf</th>\n      <th>score</th>\n      <th>time</th>\n      <th>scoreTimeRatio</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>0.992414</td>\n      <td>0.188492</td>\n      <td>0.200671</td>\n    </tr>\n    <tr>\n      <th>51</th>\n      <td>0.002084</td>\n      <td>0.735618</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>0.980393</td>\n      <td>0.762561</td>\n      <td>0.048920</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>0.995105</td>\n      <td>0.037944</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0.988716</td>\n      <td>0.547179</td>\n      <td>0.068798</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>0.998930</td>\n      <td>0.358303</td>\n      <td>0.106209</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>1.002084</td>\n      <td>1.037944</td>\n      <td>0.036709</td>\n    </tr>\n  </tbody>\n</table>\n</div><figure class=\"kg-card kg-image-card\"><img src=\"https://res-4.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/min_samples_leaf2.png\" class=\"kg-image\"></figure><p>Big drop-off after 26, it seems!</p><pre><code class=\"language-python\">min_samples_leaf = bgs.compareValsBaseCase(X, \n                    y, \n                    getForestAccuracyCV,        \n                    rfArgs, \n                    &quot;min_samples_leaf&quot;, \n                    0, \n                    1, \n                    26)\nbgs.showTimeScoreChartAndGraph(min_samples_leaf)\n</code></pre>\n<div class=\"tableContainer\">\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>min_samples_leaf</th>\n      <th>score</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>0.981662</td>\n      <td>1.407957</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>0.975894</td>\n      <td>1.398042</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>0.982954</td>\n      <td>1.396782</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0.979888</td>\n      <td>1.396096</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>0.984789</td>\n      <td>1.402322</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>0.986302</td>\n      <td>1.401080</td>\n    </tr>\n  </tbody>\n</table>\n<br>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>min_samples_leaf</th>\n      <th>score</th>\n      <th>time</th>\n      <th>scoreTimeRatio</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>0.650270</td>\n      <td>1.084306</td>\n      <td>0.040144</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>0.096077</td>\n      <td>0.248406</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>0.774346</td>\n      <td>0.142157</td>\n      <td>0.954016</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0.479788</td>\n      <td>0.084306</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>0.950677</td>\n      <td>0.609184</td>\n      <td>0.221294</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>1.096077</td>\n      <td>0.504512</td>\n      <td>0.336668</td>\n    </tr>\n  </tbody>\n</table>\n</div><figure class=\"kg-card kg-image-card\"><img src=\"https://res-4.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/min_samples_leaf3.png\" class=\"kg-image\"></figure><p>One more with 14 as our upper limit!</p><pre><code class=\"language-python\">min_samples_leaf = bgs.compareValsBaseCase(X, \n                    y, \n                    getForestAccuracyCV,        \n                    rfArgs, \n                    &quot;min_samples_leaf&quot;, \n                    0, \n                    1, \n                    14)\nbgs.showTimeScoreChartAndGraph(min_samples_leaf)\n</code></pre>\n<div class=\"tableContainer\">\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>min_samples_leaf</th>\n      <th>score</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>0.981662</td>\n      <td>1.401341</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>0.982954</td>\n      <td>1.400361</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0.979888</td>\n      <td>1.402408</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.981121</td>\n      <td>1.401396</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.983580</td>\n      <td>1.401332</td>\n    </tr>\n  </tbody>\n</table>\n<br>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>min_samples_leaf</th>\n      <th>score</th>\n      <th>time</th>\n      <th>scoreTimeRatio</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>0.992414</td>\n      <td>0.188492</td>\n      <td>0.200671</td>\n    </tr>\n    <tr>\n      <th>51</th>\n      <td>0.002084</td>\n      <td>0.735618</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>0.980393</td>\n      <td>0.762561</td>\n      <td>0.048920</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>0.995105</td>\n      <td>0.037944</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0.988716</td>\n      <td>0.547179</td>\n      <td>0.068798</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>0.998930</td>\n      <td>0.358303</td>\n      <td>0.106209</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>1.002084</td>\n      <td>1.037944</td>\n      <td>0.036709</td>\n    </tr>\n  </tbody>\n</table>\n</div><figure class=\"kg-card kg-image-card\"><img src=\"https://res-1.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/min_samples_leaf4.png\" class=\"kg-image\"><figcaption>3 it is!</figcaption></figure><p>I suppose when it gets this small we could use a regular Grid Search, but...maybe next week!  Or maybe another variable!  Or maybe benchmarks vs <code>GridSearchCV</code> and/or <code>RandomizedSearchCV</code>.  Who knows what the future holds?</p>","url":"https://hackersandslackers.com/random-forests-hyperparameters-min_samples_leaf/","uuid":"766a3eb8-aacc-47c6-91a9-744b84613626","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b9f047cab64c97c60f7be90"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736fc","title":"Lynx Roundup, September 17th","slug":"lynx-roundup-september-17th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/86@2x.jpg","excerpt":"Dealing with missing values in clinical machine learning!  Recursive SQL queries with CTEs!  SAT (NP stuff) in Python!","custom_excerpt":"Dealing with missing values in clinical machine learning!  Recursive SQL queries with CTEs!  SAT (NP stuff) in Python!","created_at_pretty":"05 September, 2018","published_at_pretty":"17 September, 2018","updated_at_pretty":"17 September, 2018","created_at":"2018-09-05T16:56:22.000-04:00","published_at":"2018-09-17T07:00:00.000-04:00","updated_at":"2018-09-17T07:00:00.000-04:00","meta_title":"Dealing with missing values in clinical machine learning!  Recursive SQL queries with CTEs!  SAT (NP stuff) in Python! | Hackers And Slackers","meta_description":"Dealing with missing values in clinical machine learning!  Recursive SQL queries with CTEs!  SAT (NP stuff) in Python!","og_description":"Dealing with missing values in clinical machine learning!  Recursive SQL queries with CTEs!  SAT (NP stuff) in Python!","og_image":"https://hackersandslackers.com/content/images/lynx/86@2x.jpg","og_title":"Lynx Roundup, September 17th","twitter_description":"Dealing with missing values in clinical machine learning!  Recursive SQL queries with CTEs!  SAT (NP stuff) in Python!","twitter_image":"https://hackersandslackers.com/content/images/lynx/86@2x.jpg","twitter_title":"Lynx Roundup, September 17th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"Efficient and effective machine learning on clinical data with missing\ninformation\n[https://static.epcc.ed.ac.uk/dissertations/hpc-msc/2016-2017/Adeyinka_Lipede-MSc-dissertation.pdf]\n\n\n\nhttps://haughtcodeworks.com/blog/software-development/recursive-sql-queries-using-ctes/\n\n\n\nhttps://www.quora.com/What-programming-language-that-has-appeared-recently-in-the-last-10-years-are-you-currently-interested-in-or-want-to-learn/answer/Phil-Jones\n\n\n\nhttps://sahandsaba.com/understanding-sat-by-implementing-a-simple-sat-solver-in-python.html\n\n\n\nhttp://web.stanford.edu/~ouster/cgi-bin/sayings.php\n\n\n\nhttps://www.ece.cmu.edu/news-and-events/story/2018/08/rethinking-social-networks.html\n\n\n\nhttps://blogs.scientificamerican.com/observations/how-can-we-promote-cooperation-in-an-uncooperative-society/","html":"<p></p><p><a href=\"https://static.epcc.ed.ac.uk/dissertations/hpc-msc/2016-2017/Adeyinka_Lipede-MSc-dissertation.pdf\">Efficient and effective machine learning on clinical data with missing information</a></p><p></p><p><a href=\"https://haughtcodeworks.com/blog/software-development/recursive-sql-queries-using-ctes/\">https://haughtcodeworks.com/blog/software-development/recursive-sql-queries-using-ctes/</a></p><p></p><p><a href=\"https://www.quora.com/What-programming-language-that-has-appeared-recently-in-the-last-10-years-are-you-currently-interested-in-or-want-to-learn/answer/Phil-Jones\">https://www.quora.com/What-programming-language-that-has-appeared-recently-in-the-last-10-years-are-you-currently-interested-in-or-want-to-learn/answer/Phil-Jones</a></p><p></p><p><a href=\"https://sahandsaba.com/understanding-sat-by-implementing-a-simple-sat-solver-in-python.html\">https://sahandsaba.com/understanding-sat-by-implementing-a-simple-sat-solver-in-python.html</a></p><p></p><p><a href=\"http://web.stanford.edu/~ouster/cgi-bin/sayings.php\">http://web.stanford.edu/~ouster/cgi-bin/sayings.php</a></p><p></p><p><a href=\"https://www.ece.cmu.edu/news-and-events/story/2018/08/rethinking-social-networks.html\">https://www.ece.cmu.edu/news-and-events/story/2018/08/rethinking-social-networks.html</a></p><p></p><p><a href=\"https://blogs.scientificamerican.com/observations/how-can-we-promote-cooperation-in-an-uncooperative-society/\">https://blogs.scientificamerican.com/observations/how-can-we-promote-cooperation-in-an-uncooperative-society/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-september-17th/","uuid":"c0a3e578-feda-4e54-9ede-8cd8da5c69ac","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b9042f61fc1fc7d92b5c501"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736fb","title":"Lynx Roundup, September 16th","slug":"lynx-roundup-september-16th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/02/85-2-1@2x.jpg","excerpt":"What Ada Lovelace's program did!  Data science for good!  DynamoDB vs Cassandra!","custom_excerpt":"What Ada Lovelace's program did!  Data science for good!  DynamoDB vs Cassandra!","created_at_pretty":"05 September, 2018","published_at_pretty":"16 September, 2018","updated_at_pretty":"14 February, 2019","created_at":"2018-09-05T16:37:14.000-04:00","published_at":"2018-09-16T07:00:00.000-04:00","updated_at":"2019-02-14T05:17:10.000-05:00","meta_title":"Lynx Roundup, September 16th | Hackers and Slackers","meta_description":"What Ada Lovelace's program did!  Data science for good!  DynamoDB vs Cassandra!","og_description":"What Ada Lovelace's program did!  Data science for good!  DynamoDB vs Cassandra!","og_image":"https://hackersandslackers.com/content/images/2019/02/85-2-1@2x.jpg","og_title":"Lynx Roundup, September 16th","twitter_description":"What Ada Lovelace's program did!  Data science for good!  DynamoDB vs Cassandra!","twitter_image":"https://hackersandslackers.com/content/images/2019/02/85-2-1@2x.jpg","twitter_title":"Lynx Roundup, September 16th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"http://blogs.discovermagazine.com/d-brief/2018/07/26/octopuses-mdma-molly-social\n\nhttps://towardsdatascience.com/a-data-science-for-good-machine-learning-project-walk-through-in-python-part-one-1977dd701dbc\n\n\n\nhttps://github.com/nteract/papermill\n\n\n\nhttps://twobithistory.org/2018/08/18/ada-lovelace-note-g.html\n\n\n\nhttps://medium.com/@dtunkelang/real-talk-about-synonyms-and-search-bb5cf41a8741\n\n\n\nhttps://tinkering.xyz/abusing-type-annotations/\n\n\n\nhttps://www.kdnuggets.com/2018/08/dynamodb-vs-cassandra.html","html":"<p><a href=\"http://blogs.discovermagazine.com/d-brief/2018/07/26/octopuses-mdma-molly-social/#.W50pbP5KjVs\">http://blogs.discovermagazine.com/d-brief/2018/07/26/octopuses-mdma-molly-social</a></p><p><a href=\"https://towardsdatascience.com/a-data-science-for-good-machine-learning-project-walk-through-in-python-part-one-1977dd701dbc\">https://towardsdatascience.com/a-data-science-for-good-machine-learning-project-walk-through-in-python-part-one-1977dd701dbc</a></p><p></p><p><a href=\"https://github.com/nteract/papermill\">https://github.com/nteract/papermill</a></p><p></p><p><a href=\"https://twobithistory.org/2018/08/18/ada-lovelace-note-g.html\">https://twobithistory.org/2018/08/18/ada-lovelace-note-g.html</a></p><p></p><p><a href=\"https://medium.com/@dtunkelang/real-talk-about-synonyms-and-search-bb5cf41a8741\">https://medium.com/@dtunkelang/real-talk-about-synonyms-and-search-bb5cf41a8741</a></p><p></p><p><a href=\"https://tinkering.xyz/abusing-type-annotations/\">https://tinkering.xyz/abusing-type-annotations/</a></p><p></p><p><a href=\"https://www.kdnuggets.com/2018/08/dynamodb-vs-cassandra.html\">https://www.kdnuggets.com/2018/08/dynamodb-vs-cassandra.html</a></p>","url":"https://hackersandslackers.com/lynx-roundup-september-16th/","uuid":"00cc58fc-7d42-47f5-a56f-7b0eae9f7cac","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b903e7a1fc1fc7d92b5c4fc"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736fa","title":"Lynx Roundup, September 15th","slug":"lynx-roundup-september-15th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/02/83-3@2x.jpg","excerpt":"Learning Go as a Pythonista!  Speeding up SQLAlchemy!  Cool NIPS talk!","custom_excerpt":"Learning Go as a Pythonista!  Speeding up SQLAlchemy!  Cool NIPS talk!","created_at_pretty":"05 September, 2018","published_at_pretty":"15 September, 2018","updated_at_pretty":"14 February, 2019","created_at":"2018-09-05T16:29:20.000-04:00","published_at":"2018-09-15T07:00:00.000-04:00","updated_at":"2019-02-14T05:16:35.000-05:00","meta_title":"Learning Go as a Pythonista!  Speeding up SQLAlchemy!  Cool NIPS talk! | Hackers And Slackers","meta_description":"Learning Go as a Pythonista!  Speeding up SQLAlchemy!  Cool NIPS talk!","og_description":"Learning Go as a Pythonista!  Speeding up SQLAlchemy!  Cool NIPS talk!","og_image":"https://hackersandslackers.com/content/images/2019/02/83-3@2x.jpg","og_title":"Lynx Roundup, September 15th","twitter_description":"Learning Go as a Pythonista!  Speeding up SQLAlchemy!  Cool NIPS talk!","twitter_image":"https://hackersandslackers.com/content/images/2019/02/83-3@2x.jpg","twitter_title":"Lynx Roundup, September 15th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://engineering.shopspring.com/speed-up-with-eager-loading-in-sqlalchemy-87a176cfd7ad\n\n\n\nAstonishing graphic from @CNN [https://twitter.com/CNN?ref_src=twsrc%5Etfw],\nidentifying civilian massacres in Yemen with the bomb makers - Raytheon,\nLockheed Martin and General Dynamics. This should be standard in war reporting.\nSearing images. https://t.co/EZqkSsAri6  pic.twitter.com/NWJvPuN7ct\n[https://t.co/NWJvPuN7ct]\n\n— Tim Shorrock (@TimothyS) August 18, 2018\n[https://twitter.com/TimothyS/status/1030920463822868480?ref_src=twsrc%5Etfw]\n 🔥 This yawning Lynx under the snow\n[https://www.reddit.com/r/lynxes/comments/99j0sx/this_yawning_lynx_under_the_snow/?ref_source=embed&ref=share] \n from\n lynxes [https://www.reddit.com/r/lynxes/]\n \nhttps://gizmodo.com/your-brain-tries-to-change-focus-four-times-per-second-1828517983\n\nhttps://towardsdatascience.com/moving-to-go-from-python-9ebbd9a8aec4\n\n\n\nhttps://github.com/NVIDIA/vid2vid","html":"<p></p><p><a href=\"https://engineering.shopspring.com/speed-up-with-eager-loading-in-sqlalchemy-87a176cfd7ad\">https://engineering.shopspring.com/speed-up-with-eager-loading-in-sqlalchemy-87a176cfd7ad</a></p><p></p><figure class=\"kg-card kg-embed-card\"><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Astonishing graphic from <a href=\"https://twitter.com/CNN?ref_src=twsrc%5Etfw\">@CNN</a>, identifying civilian massacres in Yemen with the bomb makers - Raytheon, Lockheed Martin and General Dynamics. This should be standard in war reporting. Searing images. <a href=\"https://t.co/EZqkSsAri6\">https://t.co/EZqkSsAri6</a> <a href=\"https://t.co/NWJvPuN7ct\">pic.twitter.com/NWJvPuN7ct</a></p>&mdash; Tim Shorrock (@TimothyS) <a href=\"https://twitter.com/TimothyS/status/1030920463822868480?ref_src=twsrc%5Etfw\">August 18, 2018</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</figure><figure class=\"kg-card kg-embed-card\">\n    <blockquote class=\"reddit-card\">\n      <a href=\"https://www.reddit.com/r/lynxes/comments/99j0sx/this_yawning_lynx_under_the_snow/?ref_source=embed&amp;ref=share\">🔥 This yawning Lynx under the snow</a> from\n      <a href=\"https://www.reddit.com/r/lynxes/\">lynxes</a>\n    </blockquote>\n    <script async src=\"https://embed.redditmedia.com/widgets/platform.js\" charset=\"UTF-8\"></script>\n</figure><p><a href=\"https://gizmodo.com/your-brain-tries-to-change-focus-four-times-per-second-1828517983\">https://gizmodo.com/your-brain-tries-to-change-focus-four-times-per-second-1828517983</a></p><figure class=\"kg-card kg-embed-card\"><iframe width=\"480\" height=\"270\" src=\"https://www.youtube.com/embed/Qi1Yry33TQE?feature=oembed\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe></figure><p><a href=\"https://towardsdatascience.com/moving-to-go-from-python-9ebbd9a8aec4\">https://towardsdatascience.com/moving-to-go-from-python-9ebbd9a8aec4</a></p><p></p><p><a href=\"https://github.com/NVIDIA/vid2vid\">https://github.com/NVIDIA/vid2vid</a></p>","url":"https://hackersandslackers.com/lynx-roundup-september-15th/","uuid":"f623b6d3-cbc4-4bf9-890c-fdbb093277fb","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b903ca01fc1fc7d92b5c4f9"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736f9","title":"Lynx Roundup, September 14th","slug":"lynx-roundup-september-14th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/02/84-1-1@2x.jpg","excerpt":"Random Forests hyperparameters!  Combining CNNs and RNNs!  Generating mazes!","custom_excerpt":"Random Forests hyperparameters!  Combining CNNs and RNNs!  Generating mazes!","created_at_pretty":"05 September, 2018","published_at_pretty":"14 September, 2018","updated_at_pretty":"14 February, 2019","created_at":"2018-09-05T16:22:54.000-04:00","published_at":"2018-09-14T07:00:00.000-04:00","updated_at":"2019-02-14T05:17:52.000-05:00","meta_title":"Random Forests hyperparameters!  Combining CNNs and RNNs!  Generating mazes! | Hackers And Slackers","meta_description":"Random Forests hyperparameters!  Combining CNNs and RNNs!  Generating mazes!","og_description":"Random Forests hyperparameters!  Combining CNNs and RNNs!  Generating mazes!","og_image":"https://hackersandslackers.com/content/images/2019/02/84-1-1@2x.jpg","og_title":"Lynx Roundup, September 14th","twitter_description":"Random Forests hyperparameters!  Combining CNNs and RNNs!  Generating mazes!","twitter_image":"https://hackersandslackers.com/content/images/2019/02/84-1-1@2x.jpg","twitter_title":"Lynx Roundup, September 14th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.quantamagazine.org/how-network-math-can-help-you-make-friends-20180820/\n\n\n\nhttps://neurosciencenews.com/revenge-neuroscience-9717/\n\n\n\nhttps://gizmodo.com/museum-visitor-falls-into-giant-hole-that-looks-like-a-1828462859\n\n\n\nhttps://distill.pub/2018/differentiable-parameterizations/\n\n\n\nhttps://www.datasciencecentral.com/profiles/blogs/combining-cnns-and-rnns-crazy-or-genius\n\n\n\nHyperparameters and Tuning Strategies for Random Forest\n[https://arxiv.org/pdf/1804.03515.pdf]\n\n\n\nhttp://jelv.is/blog/Generating-Mazes-with-Inductive-Graphs/","html":"<p></p><p><a href=\"https://www.quantamagazine.org/how-network-math-can-help-you-make-friends-20180820/\">https://www.quantamagazine.org/how-network-math-can-help-you-make-friends-20180820/</a></p><p></p><p><a href=\"https://neurosciencenews.com/revenge-neuroscience-9717/\">https://neurosciencenews.com/revenge-neuroscience-9717/</a></p><p></p><p><a href=\"https://gizmodo.com/museum-visitor-falls-into-giant-hole-that-looks-like-a-1828462859\">https://gizmodo.com/museum-visitor-falls-into-giant-hole-that-looks-like-a-1828462859</a></p><p></p><p><a href=\"https://distill.pub/2018/differentiable-parameterizations/\">https://distill.pub/2018/differentiable-parameterizations/</a></p><p></p><p><a href=\"https://www.datasciencecentral.com/profiles/blogs/combining-cnns-and-rnns-crazy-or-genius\">https://www.datasciencecentral.com/profiles/blogs/combining-cnns-and-rnns-crazy-or-genius</a></p><p></p><p><a href=\"https://arxiv.org/pdf/1804.03515.pdf\">Hyperparameters and Tuning Strategies for Random Forest</a></p><p></p><p><a href=\"http://jelv.is/blog/Generating-Mazes-with-Inductive-Graphs/\">http://jelv.is/blog/Generating-Mazes-with-Inductive-Graphs/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-september-14th/","uuid":"748a924b-e8dd-4e11-8d60-cf61b8cab1a9","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b903b1e1fc1fc7d92b5c4f6"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736ff","title":"Roll On Through: Create an Iterative List in Excel Without Any Real Coding","slug":"create-an-iterative-list-in-excel","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/09/excelif@2x.jpg","excerpt":"This isn't standard programming...THIS IS EXCEL!","custom_excerpt":"This isn't standard programming...THIS IS EXCEL!","created_at_pretty":"11 September, 2018","published_at_pretty":"13 September, 2018","updated_at_pretty":"02 February, 2019","created_at":"2018-09-11T18:07:12.000-04:00","published_at":"2018-09-13T08:00:00.000-04:00","updated_at":"2019-02-02T14:41:37.000-05:00","meta_title":"Create an Iterative List in Excel | Hackers And Slackers","meta_description":"We get creative in Excel by making FOR loops without using VBA.","og_description":"We get creative in Excel by making FOR loops without using VBA.","og_image":"https://hackersandslackers.com/content/images/2018/09/excelif@2x.jpg","og_title":"Create an Iterative List in Excel Without Any Real Coding","twitter_description":"We get creative in Excel by making FOR loops without using VBA.","twitter_image":"https://hackersandslackers.com/content/images/2018/09/excelif@2x.jpg","twitter_title":"Create an Iterative List in Excel Without Any Real Coding","authors":[{"name":"Max Mileaf","slug":"snacks","bio":"One of three therapists in the known universe who knows how to use a computer. Finds meaning in highly protected data, in a cave, utilizing nothing but a box of scraps. ","profile_image":"https://hackersandslackers.com/content/images/2019/03/max2.jpg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Max Mileaf","slug":"snacks","bio":"One of three therapists in the known universe who knows how to use a computer. Finds meaning in highly protected data, in a cave, utilizing nothing but a box of scraps. ","profile_image":"https://hackersandslackers.com/content/images/2019/03/max2.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},"tags":[{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},{"name":"#Adventures in Excel","slug":"adventures-in-excel","description":"Excel secrets and magic. The kind of industry knowledge that could put financial analysts out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"internal"}],"plaintext":"Hi there dear reader, so, I know that in the previous article that I penned, I\nstated that I'd be showing you how to create buttons that you can interact with\n(and I know you know that because you're reading these in order...right?) but I\nrecently had to create something that was so cool, I had to write about it (once\nyou've drank enough data Kool-Aid, you too will find solutions to data\nmanipulation problems cool).\n\nHere's the scene: we've got a list of people, each with a particular issue,\nhowever, due to why I needed to put the data together, we needed to combine all\nof the issues that each person had in a single cell for the person they were\nassociated with. \n\nNow, if this were regular computer programming, the solution would be simple:\ncreate an iterative FOR loop. What is this you ask? it's a pretty standard\ncomputer programming function (up there with the IF statement and the OR\nstatement) that does a particular thing FOR a certain period of time in which a\nparticular condition is true (like for instance, as long as the person's name\nremains the same. Granted, you can do FOR loops in VBA, but it's not as easy as\nit should be, and we'd probably have to do most of the same steps in order to\nget the full benefit. \n\nHowever, this isn't standard programming...THIS IS EXCEL! As such, we needed to\nget creative, and approximate the FOR loop without using VBA. Here's what we had\nto work with: \n\n * A list of names (in this case, it'll be column A) \n * A unique ID for each of the people on the list (This will be Column B)\n * An issue (in this case, a diagnosis) that each person had, and each line has\n   a different issue, even if it's the same person. (Column C)\n * A bunch of other information that isn't important for this trick. (Who\n   cares?)\n\nHere's how we go about doing it: \n\n 1. Sort the entire list by the ID, that way, the data for the same people are\n    all next to each other. \n 2. Create two new columns, one that does the heavy lifting, and one that\n    signifies (or \"Flags) that Excel should stop iterating. \n 3. In the first of the two created columns (let's put a heading on it called\n    \"combined\") put in the following formula starting with cell D2 and populate\n    your whole column:\n    =IF(B1=B2,CONCATENATE(D1, \";\",C2),C2)\n\n\t\tWhat this is doing is checking to see if the two IDs match (and thus are the\nsame people) and it builds a string combining all of the issues every time\nthere's a match. In the end, column D is going to be the column where the \"work\"\nis done. Of note, the \";\" added in the middle is for aesthetics, feel free to\nignore it, or just plug in some other type of spacer.\n\n\t4. In the second of the created columns (let's call this one \"flag) put in the\nfollowing formula: =IF(B2=B3,\"\",1)\n\n\tThis basically adds a 1 (or whatever you decide to write in) on the last line\nof each loop, signifying that Excel should start the process over on the next\nline instead of continuing to build the string. you start on the cell below the\ninitial cell so that you don't accidentally put the flag on the first line (as\nthe heading and the name is never going to match) This leads us to the final\nstep:\n\n\t5. Filter the sheet by the \"flag\" column for 1, and if so desired, copy and\npaste this filtered list into a new sheet.\n\nThis final step allows you to hide all rows that aren't the final row in the\nloop, thus giving you only 1 line per person with the combined issues that the\nperson had! See below for the finished product.\n\nRemember, the flag column has the following formula =IF(b2=b3,\"\",1)So there you\ngo, using only 2 columns and as many formulas you can easily inject a loop into\nExcel! This technique has many uses, as you may want to continue running a\nformula down a column until a certain \"thing\" happens elsewhere on the\nsheet...the possibilities are endless! \n\nSo today, we've learned the following:\n\n 1. What iterators and FOR loops do in computer programming.\n 2. How to create and utilize an iterator to complete any task that needs to\n    continue running until a particular goal is reached.\n\nNext time, I think we'll probably delve back into Active X and Form controls, so\nthat you can improve the life of your less savvy co-workers, and make yourself\nlook like a boss in the meantime.\n\nSigning off,\n\n-Snacks","html":"<p>Hi there dear reader, so, I know that in the previous article that I penned, I stated that I'd be showing you how to create buttons that you can interact with (and I know you know that because you're reading these in order...right?) but I recently had to create something that was so cool, I had to write about it (once you've drank enough data Kool-Aid, you too will find solutions to data manipulation problems cool).</p><p>Here's the scene: we've got a list of people, each with a particular issue, however, due to why I needed to put the data together, we needed to combine all of the issues that each person had in a single cell for the person they were associated with. </p><p>Now, if this were <em>regular </em>computer programming, the solution would be simple: create an iterative FOR loop. What is this you ask? it's a pretty standard computer programming function (up there with the IF statement and the OR statement) that does a particular thing <em>FOR </em>a certain period of time in which a particular condition is true (like for instance, as long as the person's name remains the same. Granted, you can do FOR loops in VBA, but it's not as easy as it should be, and we'd probably have to do most of the same steps in order to get the full benefit. </p><p>However, this isn't standard programming...THIS IS EXCEL! As such, we needed to get creative, and approximate the FOR loop without using VBA. Here's what we had to work with: </p><ul><li>A list of names (in this case, it'll be column A) </li><li>A unique ID for each of the people on the list (This will be Column B)</li><li>An issue (in this case, a diagnosis) that each person had, and each line has a different issue, even if it's the same person. (Column C)</li><li>A bunch of other information that isn't important for this trick. (Who cares?)</li></ul><p>Here's how we go about doing it: </p><ol><li>Sort the entire list by the ID, that way, the data for the same people are all next to each other. </li><li>Create two new columns, one that does the heavy lifting, and one that signifies (or \"Flags) that Excel should stop iterating. </li><li>In the first of the two created columns (let's put a heading on it called \"combined\") put in the following formula starting with cell D2 and populate your whole column:<br> <code>=IF(B1=B2,CONCATENATE(D1, \";\",C2),C2)</code></li></ol><p>\t\tWhat this is doing is checking to see if the two IDs match (and thus are the same people) and it builds a string combining all of the issues every time there's a match. In the end, column D is going to be the column where the \"work\" is done. Of note, the \";\" added in the middle is for aesthetics, feel free to ignore it, or just plug in some other type of spacer.</p><p>\t4. In the second of the created columns (let's call this one \"flag) put in the following formula: <code>=IF(B2=B3,\"\",1)</code></p><p>\tThis basically adds a 1 (or whatever you decide to write in) on the last line of each loop, signifying that Excel should start the process over on the next line instead of continuing to build the string. you start on the cell below the initial cell so that you don't accidentally put the flag on the <em>first </em>line (as the heading and the name is never going to match) This leads us to the final step:</p><p>\t5. Filter the sheet by the \"flag\" column for 1, and if so desired, copy and paste this filtered list into a new sheet.</p><p>This final step allows you to hide all rows that aren't the final row in the loop, thus giving you only 1 line per person with the combined issues that the person had! See below for the finished product.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/image.png\" class=\"kg-image\"><figcaption>Remember, the flag column has the following formula =IF(b2=b3,\"\",1)</figcaption></figure><p>So there you go, using only 2 columns and as many formulas you can easily inject a loop into Excel! This technique has many uses, as you may want to continue running a formula down a column until a certain \"thing\" happens elsewhere on the sheet...the possibilities are endless! </p><p>So today, we've learned the following:</p><ol><li>What iterators and FOR loops do in computer programming.</li><li>How to create and utilize an iterator to complete any task that needs to continue running until a particular goal is reached.</li></ol><p>Next time, I think we'll probably delve back into Active X and Form controls, so that you can improve the life of your less savvy co-workers, and make yourself look like a boss in the meantime.</p><p>Signing off,</p><p>-Snacks</p><p></p><p></p>","url":"https://hackersandslackers.com/create-an-iterative-list-in-excel/","uuid":"44966a6d-9b66-441f-9213-5bbea6842fdb","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b983c901fc1fc7d92b5c53d"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736f8","title":"Lynx Roundup, September 13th","slug":"lynx-roundup-september-13th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/02/82@2x.jpg","excerpt":"Cartography!  R & Music!  Time Series forecasting in Python!","custom_excerpt":"Cartography!  R & Music!  Time Series forecasting in Python!","created_at_pretty":"05 September, 2018","published_at_pretty":"13 September, 2018","updated_at_pretty":"14 February, 2019","created_at":"2018-09-05T16:17:41.000-04:00","published_at":"2018-09-13T07:00:00.000-04:00","updated_at":"2019-02-14T05:18:37.000-05:00","meta_title":"Cartography!  R & Music!  Time Series forecasting in Python! | Hackers And Slackers","meta_description":"Cartography!  R & Music!  Time Series forecasting in Python!","og_description":"Cartography!  R & Music!  Time Series forecasting in Python!","og_image":"https://hackersandslackers.com/content/images/2019/02/82@2x.jpg","og_title":"Lynx Roundup, September 13th","twitter_description":"Cartography!  R & Music!  Time Series forecasting in Python!","twitter_image":"https://hackersandslackers.com/content/images/2019/02/82@2x.jpg","twitter_title":"Lynx Roundup, September 13th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"http://129.187.45.33/CartographyPlayground/\n\n\n\nhttps://r-music.rbind.io/posts/2018-08-19-chords-analysis-with-the-chorrrds-package/\n\n\n\nhttps://www.dropsalesforce.com/\n\n\n\nhttp://mchap.io/using-foia-data-and-unix-to-halve-major-source-of-parking-tickets.html\n\n\n\nhttps://www.r-bloggers.com/agile-framework-for-creating-an-roi-driven-data-science-practice/\n\n\n\nhttps://www.theverge.com/2018/8/21/17761424/ai-algorithm-art-machine-vision-perception-tom-white-treachery-imagenet\n\n\n\nA Gentle Introduction to Exponential Smoothing for Time Series Forecasting in\nPython\n[https://machinelearningmastery.com/exponential-smoothing-for-time-series-forecasting-in-python/]","html":"<p></p><p><a href=\"http://129.187.45.33/CartographyPlayground/\">http://129.187.45.33/CartographyPlayground/</a></p><p></p><p><a href=\"https://r-music.rbind.io/posts/2018-08-19-chords-analysis-with-the-chorrrds-package/\">https://r-music.rbind.io/posts/2018-08-19-chords-analysis-with-the-chorrrds-package/</a></p><p></p><p><a href=\"https://www.dropsalesforce.com/\">https://www.dropsalesforce.com/</a></p><p></p><p><a href=\"http://mchap.io/using-foia-data-and-unix-to-halve-major-source-of-parking-tickets.html\">http://mchap.io/using-foia-data-and-unix-to-halve-major-source-of-parking-tickets.html</a></p><p></p><p><a href=\"https://www.r-bloggers.com/agile-framework-for-creating-an-roi-driven-data-science-practice/\">https://www.r-bloggers.com/agile-framework-for-creating-an-roi-driven-data-science-practice/</a></p><p></p><p><a href=\"https://www.theverge.com/2018/8/21/17761424/ai-algorithm-art-machine-vision-perception-tom-white-treachery-imagenet\">https://www.theverge.com/2018/8/21/17761424/ai-algorithm-art-machine-vision-perception-tom-white-treachery-imagenet</a></p><p></p><figure class=\"kg-card kg-embed-card\"><blockquote class=\"wp-embedded-content\"><a href=\"https://machinelearningmastery.com/exponential-smoothing-for-time-series-forecasting-in-python/\">A Gentle Introduction to Exponential Smoothing for Time Series Forecasting in Python</a></blockquote>\n<script type=\"text/javascript\">\n<!--//--><![CDATA[//><!--\n\t\t!function(a,b){\"use strict\";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf(\"MSIE 10\"),h=!!navigator.userAgent.match(/Trident.*rv:11\\./),i=b.querySelectorAll(\"iframe.wp-embedded-content\");for(c=0;c<i.length;c++){if(d=i[c],!d.getAttribute(\"data-secret\"))f=Math.random().toString(36).substr(2,10),d.src+=\"#?secret=\"+f,d.setAttribute(\"data-secret\",f);if(g||h)a=d.cloneNode(!0),a.removeAttribute(\"security\"),d.parentNode.replaceChild(a,d)}}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret=\"'+d.secret+'\"]'),k=b.querySelectorAll('blockquote[data-secret=\"'+d.secret+'\"]');for(e=0;e<k.length;e++)k[e].style.display=\"none\";for(e=0;e<j.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.removeAttribute(\"style\"),\"height\"===d.message){if(g=parseInt(d.value,10),g>1e3)g=1e3;else if(~~g<200)g=200;f.height=g}if(\"link\"===d.message)if(h=b.createElement(\"a\"),i=b.createElement(\"a\"),h.href=f.getAttribute(\"src\"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener(\"message\",a.wp.receiveEmbedMessage,!1),b.addEventListener(\"DOMContentLoaded\",c,!1),a.addEventListener(\"load\",c,!1)}(window,document);\n//--><!]]>\n</script><iframe sandbox=\"allow-scripts\" security=\"restricted\" src=\"https://machinelearningmastery.com/exponential-smoothing-for-time-series-forecasting-in-python/embed/\" width=\"600\" height=\"338\" title=\"&#8220;A Gentle Introduction to Exponential Smoothing for Time Series Forecasting in Python&#8221; &#8212; Machine Learning Mastery\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" class=\"wp-embedded-content\"></iframe></figure>","url":"https://hackersandslackers.com/lynx-roundup-september-13th/","uuid":"1413d775-d0b0-4357-87a7-3343560ebd07","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b9039e51fc1fc7d92b5c4f2"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736fe","title":"So You've Fucked up your Python Path","slug":"so-youve-fucked-up-your-python-path","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/09/pythonpath-3@2x.jpg","excerpt":"A timeless hazing ritual for new Python devs, and how to fix it.","custom_excerpt":"A timeless hazing ritual for new Python devs, and how to fix it.","created_at_pretty":"11 September, 2018","published_at_pretty":"12 September, 2018","updated_at_pretty":"02 February, 2019","created_at":"2018-09-11T07:56:57.000-04:00","published_at":"2018-09-12T08:04:00.000-04:00","updated_at":"2019-02-02T04:47:15.000-05:00","meta_title":"How to Recover from a Broken Python Path | Hackers and Slackers","meta_description":"Deleting your native system Python: a coming of age story. Learn how to fix your broken Python path without wiping your machine.","og_description":"Deleting your native system Python: a coming of age story. Learn how to fix your broken Python path without wiping your machine.","og_image":"https://hackersandslackers.com/content/images/2018/09/pythonpath-3@2x.jpg","og_title":"How to Recover from a Broken Python Path | Hackers and Slackers","twitter_description":"Deleting your native system Python: a coming of age story. Learn how to fix your broken Python path without wiping your machine.","twitter_image":"https://hackersandslackers.com/content/images/2018/09/pythonpath-3@2x.jpg","twitter_title":"How to Recover from a Broken Python Path | Hackers and Slackers","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"DevOps","slug":"devops","description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","feature_image":null,"meta_description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","meta_title":"DevOps: Networking And Server Configuration | Hackers and Slackers","visibility":"public"}],"plaintext":"I remember back to when I first learned Python. It was a strange decision for a\nhappily employed post-graduate to make, especially for a time when many were\nscreaming for the death of the language with Guido's (outrageous?) grand reveal\nof Python 3.  The Ruby on Rails guys seemed to be doing just fine. Those were\nthe days.\n\nAfter weeks of sweating over a keyboard in the basement of an illegal BedStuy\nhostel, I had finally set out what I had hoped to achieve. It was the greatest\ncredential any programmer could possibly strive for: yes ladies and gentlemen,\nnone other than yours truly became an officially recognized licensed\nprofessional: I had just completed the last Python course in Codecademy.\n\nCongrats! You know nothing.Armed with this new unfathomable knowledge, I was\nready to take on the world. I did have a few gaps in my knowledge, such as:\n\n * Experience with Linux\n * General idea of what a terminal is and why anybody would use one\n * Basic understanding of the internet\n * Motor skills needed to survive\n\nThat aside, I was determined. Nothing could stop me, which turns out to be a\nreally bad attitude when you're SSHed into a VPS with root access, and zero\nhesitation to wreak havoc upon any and all system files. You see where this is\ngoing.\n\nDear Stack Overflow: I Think I Deleted Python\nDisabling your system's native Python version, whether via deletion or a\nmisconfigured PATH, is a coming-of-age cliché as timeless as losing one's\nvirginity on prom night. Young developers flock to Stack Overflow pleading for\nhelp, while those senior enough to reply sigh a gasp of nostalgia before\nreassuring them that their efforts are pointless. \"Ah yes,\" they reminisce, \"I\nremember my first devastating life-altering failure. To be young again.\"\n\nIf you're lucky enough to be unaware, UNIX based systems depend on their\nnatively installed version of Python to run, well, almost everything. If Python\nis unavailable for just a moment, the developer loses the ability to use:\n\n * vi\n * vim\n * nano\n * grep\n * source\n * wait, SOURCE?\n\nYep, the command you'd normally use to relaunch a corrupted startup file (such\nas the one that holds your PATH  variable) is totally unusable. Not that it\nmatters, what are you going to do, edit it?  Oh right, you just ruined every\nbash text editor. I'd actually be more interested in seeing what DOES work\nwithout Python configuring on Mac/Linux, other than moving up and down your file\nstructure helplessly, trying to quantify the damage you just wrecked upon your\nwork, life, and career.\n\nSo, Should I Kill Myself?\nHow to destroy everything ever.Calm yourself and stick with me here; I have no\ninterest in writing long-winded posts without providing any sort of solution.\nThat said, I have no problem making you sit down and think about what you've\ndone while I bother getting to the point. Nobody else has fixed this for you\nyet, and I need to improve my site's metrics, so it seems like we need each\nother on this one.\n\nBesides, don't be so hard on yourself. Not even a week ago, I sat with a Senior\nDeveloper to review my development stack, and how that would fit into the\ncurrent ecosystem of the department. Naturally I explained that I prefer running\n Flask  on Python 3.7, as I adjusted my motorcycle jacket and sat forward to\ncasually   extinguish a cigarette on his desk. Even through my vision was\nobstructed by the timelessly classic aviators resting on my face, I could see\nthe letters roll across the terminal window before him as he typed. The poor\nbastard running a 4-year old Linux distribution had just checked if Python 3 was\ninstalled on his live production instance, when his fingertips unleashed the\nunmistakable export PATH=..., seconds away from linking CentOS' native Python\nfrom Python 2.7 to Python 3.7. My exact reaction was something along the lines\nof \"OH GOD NO DON'T DO THAT STOP HOLY MOTHER OF JESUS FUCK!\" \n\nHe stopped typing. The day was saved, and I was able to explain the importance\nof leaving native Python versions intact on the systems they come installed on.\nThen, I myself fucked up the Python path maybe an hour later. On production.\n\nWe all do dumb things sometimes. That doesn't mean you're dumb. Well, except in\nmy case, having done this countless times before. Some of us simply like to live\ndangerously. Fortune favors the bold, and so on.\n\nRetro meme outta nowhere!Getting out of this Mess\nNow that we've hit rock bottom, where do we go from here? Well, two things to\nkeep in mind:\n\n 1. Not everything  is broken without Python. Extreme foreshadowing.\n 2. Restarting a terminal will automatically run all startup scripts.\n\nBy now you know that .bash_profile  and .bashrc  are critically important to\nyour system, considering how badly you've fucked things up just now. These files\nset important variables for your system every time you open your terminal; more\nspecifically, .bash_profile  kicks in on any sort of user log in (such as SSH)\nwhere .bashrc  fires every time a new additional terminal window is opened. Even\nif your startup files are corrupted, the system will always love them and turn\nto them regardless of how horribly disfigured you left them. Talk about a spark\nof hope.\n\nOn Mac OSX\nI'll admit I'm a bit embarrassed at how long it took me to realize this: even\nthough you ruined every text editor known to man, there's one resilient enough\nto hold strong. The name? TextEdit.\n\nReveal hidden files in OSX easily.In your root directory, a combo ofShift + Cmd + .  displays all hidden files.\nCheck out bash_profile. Fix it, save it, reopen terminal. Cancel the suicide\nparty. Pop the Champagne.\n\nOn Linux\nNo GUI can save us now, but what can? Perhaps a command so stupid, so simple,\nthat it couldn't possibly need Python to work:\n\necho 'export PATH=\"/YOUR/ORIGINAL/PATH/2.7/bin:${PATH}\"' >> ~/.bash_profile\n\n\nThis appends the text you provide to the end of an existing file. .bash_profile \nand .bashrc  both only pay attention to the last exported PATH in the document,\nwhich means the rest of your file will work, and the only PATH which is\nrespected is the one which you've presumably entered correctly this time around.\nRestart your terminal. Get back in the game son: it ain't about how hard you\nhit, but how hard you can get hit and keep moving forward.\n\nSidenote\nWe're not exactly conducting rocket science here (data science is a close second\nperhaps? Just kidding. We barely know what's going on most of the time). I felt\ncompelled to write this post for two reasons: one being how common and\ndestructive this pitfall can be for most people, but more importantly, the\nknee-jerk reaction veterans have in response to this problem is \"good luck,\nyou're fucked.\" \n\nI'm not here to comment on the integrity of our fine anonymous internet\ncommunities, but the discrepancy between how devastating losing a server can be\ndoesn't seem to met with much urgency by anybody with insight. Nobody taught me\nhow to work around these issues. Had I listened to anonymous internet advice, I\nprobably wouldn't let entire servers of sensitive data for dead, including my\npersonal machines. I worked through it, and quite frankly, I'm kind of a fucking\nidiot [https://hackersandslackers.com/about/], as is our mission statement. If\nan idiot who majored in nonsense and learned a programming language before\nlearning Linux can work through this, I would expect the same of those with much\nmore intelligence than I to, at the very least, attempt the same.","html":"<p>I remember back to when I first learned Python. It was a strange decision for a happily employed post-graduate to make, especially for a time when many were screaming for the death of the language with Guido's (outrageous?) grand reveal of Python 3.  The Ruby on Rails guys seemed to be doing just fine. Those were the days.</p><p>After weeks of sweating over a keyboard in the basement of an illegal BedStuy hostel, I had finally set out what I had hoped to achieve. It was the greatest credential any programmer could possibly strive for: yes ladies and gentlemen, none other than yours truly became an <em>officially recognized licensed professional</em>: I had just completed the last Python course in Codecademy.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-5.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/python-codecademy-champion.png\" class=\"kg-image\"><figcaption>Congrats! You know nothing.</figcaption></figure><p>Armed with this new unfathomable knowledge, I was ready to take on the world. I did have a few gaps in my knowledge, such as:</p><ul><li>Experience with Linux</li><li>General idea of what a terminal is and why anybody would use one</li><li>Basic understanding of the internet</li><li>Motor skills needed to survive</li></ul><p>That aside, I was determined. Nothing could stop me, which turns out to be a really bad attitude when you're SSHed into a VPS with root access, and zero hesitation to wreak havoc upon any and all system files. You see where this is going.</p><h2 id=\"dear-stack-overflow-i-think-i-deleted-python\">Dear Stack Overflow: I Think I Deleted Python</h2><style>\n    iframe{\n    height: 423px !important;\n        margin-bottom: 20px;\n    }\n</style>  <script type=\"text/javascript\" src=\"https://ssl.gstatic.com/trends_nrtr/1709_RC01/embed_loader.js\"></script>\n  <script type=\"text/javascript\">\n    trends.embed.renderExploreWidget(\"TIMESERIES\", {\"comparisonItem\":[{\"keyword\":\"python path\",\"geo\":\"US\",\"time\":\"2004-01-01 2019-02-02\"}],\"category\":0,\"property\":\"\"}, {\"exploreQuery\":\"date=all&geo=US&q=python%20path\",\"guestPath\":\"https://trends.google.com:443/trends/embed/\"});\n  </script><p>Disabling your system's native Python version, whether via deletion or a misconfigured <code>PATH</code>, is a coming-of-age cliché as timeless as losing one's virginity on prom night. Young developers flock to Stack Overflow pleading for help, while those senior enough to reply sigh a gasp of nostalgia before reassuring them that their efforts are pointless. \"<em>Ah yes,\" </em>they reminisce, \"<em>I remember my first devastating life-altering failure. To be young again.\"</em></p><p>If you're lucky enough to be unaware, UNIX based systems depend on their natively installed version of Python to run, well, almost everything. If Python is unavailable for just a moment, the developer loses the ability to use:</p><ul><li>vi</li><li>vim</li><li>nano</li><li>grep</li><li>source</li><li>wait, <em>SOURCE?</em></li></ul><p>Yep, the command you'd normally use to relaunch a corrupted startup file (such as the one that holds your <code>PATH</code> variable) is totally unusable. Not that it matters, what are you going to do, <em>edit it?</em> Oh right, you just ruined <em>every bash text editor. </em>I'd actually be more interested in seeing what DOES work without Python configuring on Mac/Linux, other than moving up and down your file structure helplessly, trying to quantify the damage you just wrecked upon your work, life, and career.</p><h3 id=\"so-should-i-kill-myself\">So, Should I Kill Myself?</h3><figure class=\"kg-card kg-image-card\"><img src=\"https://res-4.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/nRrH6Gn.gif\" class=\"kg-image\"><figcaption>How to destroy everything ever.</figcaption></figure><p>Calm yourself and stick with me here; I have no interest in writing long-winded posts without providing any sort of solution. That said, I have no problem making you sit down and think about what you've done while I bother getting to the point. Nobody else has fixed this for you yet, and I need to improve my site's metrics, so it seems like we need each other on this one.</p><p>Besides, don't be so hard on yourself. Not even a week ago, I sat with a Senior Developer to review my development stack, and how that would fit into the current ecosystem of the department. Naturally I explained that I prefer running <strong>Flask</strong> on <strong>Python 3.7</strong>, as I adjusted my motorcycle jacket and sat forward to casually   extinguish a cigarette on his desk. Even through my vision was obstructed by the timelessly classic aviators resting on my face, I could see the letters roll across the terminal window before him as he typed. The poor bastard running a 4-year old Linux distribution had just checked if Python 3 was installed <strong>on his live production instance</strong>, when his fingertips unleashed the unmistakable <code>export PATH=...</code>, seconds away from linking CentOS' native Python from Python 2.7 to Python 3.7. My exact reaction was something along the lines of \"OH GOD NO DON'T DO THAT STOP HOLY MOTHER OF JESUS FUCK!\" </p><p>He stopped typing. The day was saved, and I was able to explain the importance of leaving native Python versions intact on the systems they come installed on. Then, I myself fucked up the Python path maybe an hour later. On production.  </p><p>We all do dumb things sometimes. That doesn't mean you're dumb. Well, except in my case, having done this countless times before. Some of us simply like to live dangerously. Fortune favors the bold, and so on.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/arNjoZz.gif\" class=\"kg-image\"><figcaption>Retro meme outta nowhere!</figcaption></figure><h2 id=\"getting-out-of-this-mess\">Getting out of this Mess</h2><p>Now that we've hit rock bottom, where do we go from here? Well, two things to keep in mind:</p><ol><li>Not <em>everything</em> is broken without Python. Extreme foreshadowing.</li><li>Restarting a terminal will automatically run all startup scripts.</li></ol><p>By now you know that <code>.bash_profile</code> and <code>.bashrc</code> are critically important to your system, considering how badly you've fucked things up just now. These files set important variables for your system every time you open your terminal; more specifically, <code>.bash_profile</code> kicks in on any sort of user log in (such as SSH) where <code>.bashrc</code> fires every time a new additional terminal window is opened. Even if your startup files are corrupted, the system will always love them and turn to them regardless of how horribly disfigured you left them. Talk about a spark of hope.</p><h3 id=\"on-mac-osx\">On Mac OSX</h3><p>I'll admit I'm a bit embarrassed at how long it took me to realize this: even though you ruined every text editor known to man, there's one resilient enough to hold strong. The name? <strong>TextEdit.</strong></p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/ngA6gj0.gif\" class=\"kg-image\"><figcaption>Reveal hidden files in OSX easily.</figcaption></figure><p>In your root directory, a combo of  <code>Shift + Cmd + .</code> displays all hidden files. Check out bash_profile. Fix it, save it, reopen terminal. Cancel the suicide party. Pop the Champagne.</p><h3 id=\"on-linux\">On Linux</h3><p>No GUI can save us now, but what can? Perhaps a command so stupid, so simple, that it couldn't possibly need Python to work:</p><pre><code class=\"language-bash\">echo 'export PATH=&quot;/YOUR/ORIGINAL/PATH/2.7/bin:${PATH}&quot;' &gt;&gt; ~/.bash_profile\n</code></pre>\n<p>This <em>appends </em>the text you provide to the end of an existing file. <code>.bash_profile</code> and <code>.bashrc</code> both only pay attention to the last exported PATH in the document, which means the rest of your file will work, and the only PATH which is respected is the one which you've <em>presumably entered correctly this time around</em>. Restart your terminal. Get back in the game son: it ain't about how hard you hit, but how hard you can get hit and keep moving forward.</p><h2 id=\"sidenote\">Sidenote</h2><p>We're not exactly conducting rocket science here (data science is a close second perhaps? Just kidding. We barely know what's going on most of the time). I felt compelled to write this post for two reasons: one being how common and destructive this pitfall can be for most people, but more importantly, the knee-jerk reaction veterans have in response to this problem is \"good luck, you're fucked.\" </p><p>I'm not here to comment on the integrity of our fine anonymous internet communities, but the discrepancy between how devastating losing a server can be doesn't seem to met with much urgency by anybody with insight. Nobody taught me how to work around these issues. Had I listened to anonymous internet advice, I probably wouldn't let entire servers of sensitive data for dead, including my personal machines. I worked through it, and quite frankly, I'm <a href=\"https://hackersandslackers.com/about/\">kind of a <em>fucking idiot</em></a><em>, </em>as is our mission statement. If an idiot who majored in nonsense and learned a programming language before learning Linux can work through this, I would expect the same of those with much more intelligence than I to, at the very least, attempt the same.</p>","url":"https://hackersandslackers.com/so-youve-fucked-up-your-python-path/","uuid":"5de62a8f-94c9-4e70-8034-d46fb9369a73","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b97ad891fc1fc7d92b5c537"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736f7","title":"Lynx Roundup, September 12th","slug":"lynx-roundup-september-12th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/81-1@2x.jpg","excerpt":"Scientific Python in the browser!  Visualizing Random Forests!  Multiple random bits I found on doing things with SQL that you probably shouldn't do!","custom_excerpt":"Scientific Python in the browser!  Visualizing Random Forests!  Multiple random bits I found on doing things with SQL that you probably shouldn't do!","created_at_pretty":"05 September, 2018","published_at_pretty":"12 September, 2018","updated_at_pretty":"12 September, 2018","created_at":"2018-09-05T15:53:09.000-04:00","published_at":"2018-09-12T07:00:00.000-04:00","updated_at":"2018-09-12T07:00:00.000-04:00","meta_title":"Scientific Python in the browser!  Visualizing Random Forests!  Multiple random bits I found on doing things with SQL that you probably shouldn't do! | Hackers And Slackers","meta_description":"Scientific Python in the browser!  Visualizing Random Forests!  Multiple random bits I found on doing things with SQL that you probably shouldn't do!","og_description":"Scientific Python in the browser!  Visualizing Random Forests!  Multiple random bits I found on doing things with SQL that you probably shouldn't do!","og_image":"https://hackersandslackers.com/content/images/lynx/81-1@2x.jpg","og_title":"Lynx Roundup, September 12th","twitter_description":"Scientific Python in the browser!  Visualizing Random Forests!  Multiple random bits I found on doing things with SQL that you probably shouldn't do!","twitter_image":"https://hackersandslackers.com/content/images/lynx/81-1@2x.jpg","twitter_title":"Lynx Roundup, September 12th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://stackoverflow.com/questions/900055/is-sql-or-even-tsql-turing-complete\n\n\n\nhttps://www.quora.com/After-being-a-data-scientist-for-years-what-new-things-do-you-still-learn-about-SQL/answer/Keegan-McNamara?share=d160b17e&srid=JXMt\n[https://www.quora.com/After-being-a-data-scientist-for-years-what-new-things-do-you-still-learn-about-SQL/answer/Keegan-McNamara?share=d160b17e&srid=JXMt]\n\n\n\nhttps://medium.com/@StrikingLoo/exploratory-data-analysis-with-pandas-and-jupyter-notebooks-36008090d813\n\n\n\nhttps://towardsdatascience.com/how-to-visualize-a-decision-tree-from-a-random-forest-in-python-using-scikit-learn-38ad2d75f21c\n\n\n\nhttps://www.cbsnews.com/news/the-connection-between-busy-hands-and-brain-chemistry/\n\n\n\nhttps://logicmag.io/04-see-no-evil/\n\n\n\nhttp://droettboom.com/blog/2018/04/04/python-in-the-browser/","html":"<p></p><p><a href=\"https://stackoverflow.com/questions/900055/is-sql-or-even-tsql-turing-complete\">https://stackoverflow.com/questions/900055/is-sql-or-even-tsql-turing-complete</a></p><p></p><p><a href=\"https://www.quora.com/After-being-a-data-scientist-for-years-what-new-things-do-you-still-learn-about-SQL/answer/Keegan-McNamara?share=d160b17e&amp;srid=JXMt\">https://www.quora.com/After-being-a-data-scientist-for-years-what-new-things-do-you-still-learn-about-SQL/answer/Keegan-McNamara?share=d160b17e&amp;srid=JXMt</a></p><p></p><p><a href=\"https://medium.com/@StrikingLoo/exploratory-data-analysis-with-pandas-and-jupyter-notebooks-36008090d813\">https://medium.com/@StrikingLoo/exploratory-data-analysis-with-pandas-and-jupyter-notebooks-36008090d813</a></p><p></p><p><a href=\"https://towardsdatascience.com/how-to-visualize-a-decision-tree-from-a-random-forest-in-python-using-scikit-learn-38ad2d75f21c\">https://towardsdatascience.com/how-to-visualize-a-decision-tree-from-a-random-forest-in-python-using-scikit-learn-38ad2d75f21c</a></p><p></p><p><a href=\"https://www.cbsnews.com/news/the-connection-between-busy-hands-and-brain-chemistry/\">https://www.cbsnews.com/news/the-connection-between-busy-hands-and-brain-chemistry/</a></p><p></p><p><a href=\"https://logicmag.io/04-see-no-evil/\">https://logicmag.io/04-see-no-evil/</a></p><p></p><p><a href=\"http://droettboom.com/blog/2018/04/04/python-in-the-browser/\">http://droettboom.com/blog/2018/04/04/python-in-the-browser/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-september-12th/","uuid":"2e75efbf-caf6-41a0-a66e-2021fe73dbb6","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b9034251fc1fc7d92b5c4ef"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736f6","title":"Lynx Roundup, September 11th","slug":"lynx-roundup-september-11th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx73-2@2x.jpg","excerpt":"Type annotations in Python!  Hyperparameter tuning!  Adding mathematical rigor to Machine Learning!","custom_excerpt":"Type annotations in Python!  Hyperparameter tuning!  Adding mathematical rigor to Machine Learning!","created_at_pretty":"05 September, 2018","published_at_pretty":"11 September, 2018","updated_at_pretty":"12 September, 2018","created_at":"2018-09-05T15:50:24.000-04:00","published_at":"2018-09-11T07:00:00.000-04:00","updated_at":"2018-09-11T23:57:01.000-04:00","meta_title":"Type annotations in Python!  Hyperparameter tuning!  Adding mathematical rigor to Machine Learning! | Hackers And Slackers","meta_description":"Type annotations in Python!  Hyperparameter tuning!  Adding mathematical rigor to Machine Learning!","og_description":"Type annotations in Python!  Hyperparameter tuning!  Adding mathematical rigor to Machine Learning!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx73-2@2x.jpg","og_title":"Lynx Roundup, September 11th","twitter_description":"Type annotations in Python!  Hyperparameter tuning!  Adding mathematical rigor to Machine Learning!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx73-2@2x.jpg","twitter_title":"Lynx Roundup, September 11th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.jeremyjordan.me/hyperparameter-tuning/\n\n\n\nhttps://github.com/indicodatasolutions/enso\n\n\n\nhttps://www.quora.com/How-does-a-data-compression-software-such-as-winzip-7zip-or-winrar-compress-a-4-gigabyte-file-to-3-megabyte\n\n\n\nWhich of these books do you own? pic.twitter.com/LhzNN34YI0\n[https://t.co/LhzNN34YI0]\n\n— Rohit 🤯 (@romiem) August 17, 2018\n[https://twitter.com/romiem/status/1030438339390910464?ref_src=twsrc%5Etfw]\n\nhttps://dev.to/dstarner/using-pythons-type-annotations-4cfe\n\n\n\nhttps://medium.com/technomancy/the-blunt-guide-to-mathematically-rigorous-machine-learning-c53263d45c7b","html":"<p></p><p><a href=\"https://www.jeremyjordan.me/hyperparameter-tuning/\">https://www.jeremyjordan.me/hyperparameter-tuning/</a></p><p></p><p><a href=\"https://github.com/indicodatasolutions/enso\">https://github.com/indicodatasolutions/enso</a></p><p></p><p><a href=\"https://www.quora.com/How-does-a-data-compression-software-such-as-winzip-7zip-or-winrar-compress-a-4-gigabyte-file-to-3-megabyte\">https://www.quora.com/How-does-a-data-compression-software-such-as-winzip-7zip-or-winrar-compress-a-4-gigabyte-file-to-3-megabyte</a></p><p></p><figure class=\"kg-card kg-embed-card\"><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Which of these books do you own? <a href=\"https://t.co/LhzNN34YI0\">pic.twitter.com/LhzNN34YI0</a></p>&mdash; Rohit 🤯 (@romiem) <a href=\"https://twitter.com/romiem/status/1030438339390910464?ref_src=twsrc%5Etfw\">August 17, 2018</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</figure><p></p><p><a href=\"https://dev.to/dstarner/using-pythons-type-annotations-4cfe\">https://dev.to/dstarner/using-pythons-type-annotations-4cfe</a></p><p></p><p><a href=\"https://medium.com/technomancy/the-blunt-guide-to-mathematically-rigorous-machine-learning-c53263d45c7b\">https://medium.com/technomancy/the-blunt-guide-to-mathematically-rigorous-machine-learning-c53263d45c7b</a></p>","url":"https://hackersandslackers.com/lynx-roundup-september-11th/","uuid":"d953b8e6-2d4b-41e8-8303-fbb10cf440ed","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b9033801fc1fc7d92b5c4ec"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736fd","title":"Tuning Random  Forests Hyperparameters with Binary Search Part II: max_depth","slug":"tuning-random-forests-hyperparameters-with-binary-search","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/09/codecorner@2x.jpg","excerpt":"Tune the max_depth parameter in for a Random Forests classifier in scikit-learn in Python","custom_excerpt":"Tune the max_depth parameter in for a Random Forests classifier in scikit-learn in Python","created_at_pretty":"09 September, 2018","published_at_pretty":"10 September, 2018","updated_at_pretty":"14 April, 2019","created_at":"2018-09-09T19:14:32.000-04:00","published_at":"2018-09-10T07:30:00.000-04:00","updated_at":"2019-04-14T14:33:14.000-04:00","meta_title":"Code snippet corner is back! Tune the max_depth parameter in for a Random Forests classifier in scikit-learn in Python | Hackers And Slackers","meta_description":"While n_estimators has a tradeoff between speed & score, max_depth can improve both.  By limiting the depth of your trees, you can reduce overfitting.","og_description":"While n_estimators has a tradeoff between speed & score, max_depth can improve both.  By limiting the depth of your trees, you can reduce overfitting.","og_image":"https://hackersandslackers.com/content/images/2018/09/codecorner@2x.jpg","og_title":"Tuning Random  Forests Hyperparameters with Binary Search Part II: max_depth","twitter_description":"While n_estimators has a tradeoff between speed & score, max_depth can improve both.  By limiting the depth of your trees, you can reduce overfitting.","twitter_image":"https://hackersandslackers.com/content/images/2018/09/codecorner@2x.jpg","twitter_title":"Tuning Random  Forests Hyperparameters with Binary Search Part II: max_depth","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Code Snippet Corner","slug":"codesnippetcorner","description":"Real-world examples of Python being used to solve complex data problems, primarily using Jupyter notebooks.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o-1.jpg","meta_description":"Real-world examples of Python being used to solve complex data problems.","meta_title":"Python Code Snippet Corner","visibility":"public"},"tags":[{"name":"Code Snippet Corner","slug":"codesnippetcorner","description":"Real-world examples of Python being used to solve complex data problems, primarily using Jupyter notebooks.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o-1.jpg","meta_description":"Real-world examples of Python being used to solve complex data problems.","meta_title":"Python Code Snippet Corner","visibility":"public"},{"name":"Machine Learning","slug":"machine-learning","description":"The latest developments in machine learning tools and technology available to data scientists.","feature_image":null,"meta_description":"The latest developments in machine learning tools and technology available to data scientists.","meta_title":"Machine Learning | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Data Science","slug":"datascience","description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","feature_image":null,"meta_description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","meta_title":"Data Science | Hackers and Slackers","visibility":"public"},{"name":"#Code Snippet Corner","slug":"code-snippet-corner","description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o_o.jpg","meta_description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","meta_title":"Python Code Snippet Corner","visibility":"internal"}],"plaintext":"Continued from here\n[https://hackersandslackers.com/code-snippet-corner-tuning-machine-learning-hyperparameters-with-binary-search/]\n.\n\nNotebook for this post is here\n[https://github.com/mattalhonte/binary-grid-search/blob/master/Introspect%20Trees%20(Depth).ipynb]\n.\n\nBinary search code itself is here\n[https://github.com/mattalhonte/binary-grid-search/blob/master/binarygridsearch/binarygridsearch.py]\n.\n\n\n--------------------------------------------------------------------------------\n\nmax_depth  is an interesting parameter.  While n_estimators  has a tradeoff\nbetween speed & score, max_depth  has the possibility of improving both.  By\nlimiting the depth of your trees, you can reduce overfitting.\n\nUnfortunately, deciding on upper & lower bounds is less than straightforward.\n It'll depend on your dataset.  Luckily, I found a post on StackOverflow that\nhad a link to a blog post that had a promising methodology\n[https://aysent.github.io/2015/11/08/random-forest-leaf-visualization.html].\n\nFirst, we build a tree with default arguments and fit it to our data. \n\nimport pandas as pd\n\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import auc\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import load_breast_cancer\n\n\ndata = load_breast_cancer()\nX, y = data.data, data.target\n\nrfArgs = {\"random_state\": 0,\n          \"n_jobs\": -1,\n          \"class_weight\": \"balanced\",\n         \"n_estimators\": 18,\n         \"oob_score\": True}\n\nclf = RandomForestClassifier(**rfArgs)\nclf.fit(X, y)\n\n\nNow, let's see how deep the trees get when we don't impose any sort of max_depth\n. We'll use the code from that wonderful blog post to crawl our Random Forest,\nand get the height of every tree.\n\n#From here: https://aysent.github.io/2015/11/08/random-forest-leaf-visualization.html\ndef leaf_depths(tree, node_id = 0):\n    \n    '''\n    tree.children_left and tree.children_right store ids\n    of left and right chidren of a given node\n    '''\n    left_child = tree.children_left[node_id]\n    right_child = tree.children_right[node_id]\n\n    '''\n    If a given node is terminal, \n    both left and right children are set to _tree.TREE_LEAF\n    '''\n    if left_child == _tree.TREE_LEAF:\n        \n        '''\n        Set depth of terminal nodes to 0\n        '''\n        depths = np.array([0])\n    else:\n        '''\n        Get depths of left and right children and\n        increment them by 1\n        '''\n        left_depths = leaf_depths(tree, left_child) + 1\n        right_depths = leaf_depths(tree, right_child) + 1\n \n        depths = np.append(left_depths, right_depths)\n \n    return depths\n\nallDepths = [leaf_depths(estimator.tree_) \n             for estimator in clf.estimators_]\n\nnp.hstack(allDepths).min()\n#> 2\nnp.hstack(allDepths).max()\n#> 9\n\n\nWe'll be searching between 2 and 9!\n\nLet's bring back our old make a helper function to easily return scores.\n\ndef getForestAccuracy(X, y, kwargs):\n    clf = RandomForestClassifier(**kwargs)\n    clf.fit(X, y)\n    y_pred = clf.oob_decision_function_[:, 1]\n    precision, recall, _ = precision_recall_curve(y, y_pred)\n    return auc(recall, precision)\n\n\nmax_depth = bgs.compareValsBaseCase(X, \n                    y, \n                    getForestAccuracy,        \n                    rfArgs, \n                    \"max_depth\", \n                    0, \n                    2, \n                    9)\nbgs.showTimeScoreChartAndGraph(max_depth, html=True)\n\n\nmax_depth\n score\n time\n 2\n 0.987707\n 0.145360\n 9\n 0.987029\n 0.147563\n 6\n 0.986247\n 0.140514\n 4\n 0.968316\n 0.140164\n \nmax_depth\n score\n time\n scoreTimeRatio\n 2\n 1.051571\n 0.837377\n 0.175986\n 9\n 1.016649\n 1.135158\n 0.103478\n 6\n 0.976311\n 0.182516\n 1.000000\n 4\n 0.051571\n 0.135158\n 0.000000\n So, for our purposes, 9 will function as our baseline since that was the\nbiggest depth that it built with default arguments.\n\nLooks like a max_depth  of 2 has a slightly higher score than 9, and is slightly\nfaster!  Interestingly, it's slightly slower than  4 or 6.  Not sure why that\nis.","html":"<p>Continued from <a href=\"https://hackersandslackers.com/code-snippet-corner-tuning-machine-learning-hyperparameters-with-binary-search/\">here</a>.</p><p>Notebook for this post is <a href=\"https://github.com/mattalhonte/binary-grid-search/blob/master/Introspect%20Trees%20(Depth).ipynb\">here</a>.</p><p>Binary search code itself is <a href=\"https://github.com/mattalhonte/binary-grid-search/blob/master/binarygridsearch/binarygridsearch.py\">here</a>.</p><!--kg-card-begin: hr--><hr><!--kg-card-end: hr--><p><code>max_depth</code> is an interesting parameter.  While <code>n_estimators</code> has a tradeoff between speed &amp; score, <code>max_depth</code> has the possibility of improving both.  By limiting the depth of your trees, you can reduce overfitting.</p><p>Unfortunately, deciding on upper &amp; lower bounds is less than straightforward.  It'll depend on your dataset.  Luckily, I found a post on StackOverflow that had a link to a blog post that had a promising <a href=\"https://aysent.github.io/2015/11/08/random-forest-leaf-visualization.html\">methodology</a>.  </p><p>First, we build a tree with default arguments and fit it to our data. </p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">import pandas as pd\n\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import auc\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import load_breast_cancer\n\n\ndata = load_breast_cancer()\nX, y = data.data, data.target\n\nrfArgs = {&quot;random_state&quot;: 0,\n          &quot;n_jobs&quot;: -1,\n          &quot;class_weight&quot;: &quot;balanced&quot;,\n         &quot;n_estimators&quot;: 18,\n         &quot;oob_score&quot;: True}\n\nclf = RandomForestClassifier(**rfArgs)\nclf.fit(X, y)\n</code></pre>\n<!--kg-card-end: markdown--><p>Now, let's see how deep the trees get when we don't impose any sort of <code>max_depth</code>. We'll use the code from that wonderful blog post to crawl our Random Forest, and get the height of every tree.</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">#From here: https://aysent.github.io/2015/11/08/random-forest-leaf-visualization.html\ndef leaf_depths(tree, node_id = 0):\n    \n    '''\n    tree.children_left and tree.children_right store ids\n    of left and right chidren of a given node\n    '''\n    left_child = tree.children_left[node_id]\n    right_child = tree.children_right[node_id]\n\n    '''\n    If a given node is terminal, \n    both left and right children are set to _tree.TREE_LEAF\n    '''\n    if left_child == _tree.TREE_LEAF:\n        \n        '''\n        Set depth of terminal nodes to 0\n        '''\n        depths = np.array([0])\n    else:\n        '''\n        Get depths of left and right children and\n        increment them by 1\n        '''\n        left_depths = leaf_depths(tree, left_child) + 1\n        right_depths = leaf_depths(tree, right_child) + 1\n \n        depths = np.append(left_depths, right_depths)\n \n    return depths\n\nallDepths = [leaf_depths(estimator.tree_) \n             for estimator in clf.estimators_]\n\nnp.hstack(allDepths).min()\n#&gt; 2\nnp.hstack(allDepths).max()\n#&gt; 9\n</code></pre>\n<!--kg-card-end: markdown--><p>We'll be searching between 2 and 9!  </p><p>Let's bring back our old make a helper function to easily return scores.</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">def getForestAccuracy(X, y, kwargs):\n    clf = RandomForestClassifier(**kwargs)\n    clf.fit(X, y)\n    y_pred = clf.oob_decision_function_[:, 1]\n    precision, recall, _ = precision_recall_curve(y, y_pred)\n    return auc(recall, precision)\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code class=\"language-python\">max_depth = bgs.compareValsBaseCase(X, \n                    y, \n                    getForestAccuracy,        \n                    rfArgs, \n                    &quot;max_depth&quot;, \n                    0, \n                    2, \n                    9)\nbgs.showTimeScoreChartAndGraph(max_depth, html=True)\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card\"><img src=\"https://hackersandslackers.com/content/images/2018/09/max_depth.png\" class=\"kg-image\"></figure><!--kg-card-end: image--><!--kg-card-begin: html--><div class=\"tableContainer\">\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>max_depth</th>\n      <th>score</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>2</td>\n      <td>0.987707</td>\n      <td>0.145360</td>\n    </tr>\n    <tr>\n      <td>9</td>\n      <td>0.987029</td>\n      <td>0.147563</td>\n    </tr>\n    <tr>\n      <td>6</td>\n      <td>0.986247</td>\n      <td>0.140514</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>0.968316</td>\n      <td>0.140164</td>\n    </tr>\n  </tbody>\n</table>\n<br>\n</div>\n\n<div class=\"tableContainer\">\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>max_depth</th>\n      <th>score</th>\n      <th>time</th>\n      <th>scoreTimeRatio</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>2</td>\n      <td>1.051571</td>\n      <td>0.837377</td>\n      <td>0.175986</td>\n    </tr>\n    <tr>\n      <td>9</td>\n      <td>1.016649</td>\n      <td>1.135158</td>\n      <td>0.103478</td>\n    </tr>\n    <tr>\n      <td>6</td>\n      <td>0.976311</td>\n      <td>0.182516</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>0.051571</td>\n      <td>0.135158</td>\n      <td>0.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div><!--kg-card-end: html--><p>So, for our purposes, 9 will function as our baseline since that was the biggest depth that it built with default arguments.  </p><p>Looks like a <code>max_depth</code> of 2 has a slightly higher score than 9, and is slightly faster!  Interestingly, it's slightly slower than  4 or 6.  Not sure why that is.</p>","url":"https://hackersandslackers.com/tuning-random-forests-hyperparameters-with-binary-search/","uuid":"3c92aed0-61ed-4c1a-b7d5-cc47c709764b","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b95a9581fc1fc7d92b5c51f"}}]}},"pageContext":{"pageNumber":16,"humanPageNumber":17,"skip":192,"limit":12,"numberOfPages":33,"previousPagePath":"/page/16","nextPagePath":"/page/18"}}