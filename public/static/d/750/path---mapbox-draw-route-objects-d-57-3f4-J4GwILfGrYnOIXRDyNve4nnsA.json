{"data":{"ghostPost":{"id":"Ghost__Post__5c17ddd4418434084a873d2a","title":"Drawing Mapbox Route Objects via the Directions API","slug":"mapbox-draw-route-objects","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/02/mapboxroutes.jpg","excerpt":"Using the Mapbox Directions API to visually draw routes.","custom_excerpt":"Using the Mapbox Directions API to visually draw routes.","created_at_pretty":"17 December, 2018","published_at_pretty":"28 February, 2019","updated_at_pretty":"03 March, 2019","created_at":"2018-12-17T12:33:08.000-05:00","published_at":"2019-02-28T09:15:52.000-05:00","updated_at":"2019-03-03T16:21:52.000-05:00","meta_title":"Draw Route Objects with Mapbox Directions API | Hackers and Slackers","meta_description":"Using the Mapbox Directions API to visually draw routes.","og_description":"Using the Mapbox Directions API to visually draw routes.","og_image":"https://hackersandslackers.com/content/images/2019/02/mapboxroutes.jpg","og_title":"Drawing Route Objects with Mapbox Directions API","twitter_description":"Using the Mapbox Directions API to visually draw routes.","twitter_image":"https://hackersandslackers.com/content/images/2019/02/mapboxroutes.jpg","twitter_title":"Drawing Route Objects with Mapbox Directions API","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Data Vis","slug":"datavis","description":"Visualize your data with charting tools like Matplotlib, Plotly, D3, Chart.js, Muze, Seaborn, and countless others. Primarily focused on programmatic visualization as opposed to Business Intelligence software.","feature_image":null,"meta_description":"Visualize your data with charting tools like Matplotlib, Plotly, D3, Chart.js, Muze, Seaborn, and countless others. Focused on programmatic visualization.","meta_title":"Data Visualization | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Data Vis","slug":"datavis","description":"Visualize your data with charting tools like Matplotlib, Plotly, D3, Chart.js, Muze, Seaborn, and countless others. Primarily focused on programmatic visualization as opposed to Business Intelligence software.","feature_image":null,"meta_description":"Visualize your data with charting tools like Matplotlib, Plotly, D3, Chart.js, Muze, Seaborn, and countless others. Focused on programmatic visualization.","meta_title":"Data Visualization | Hackers and Slackers","visibility":"public"},{"name":"Data Science","slug":"datascience","description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","feature_image":null,"meta_description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","meta_title":"Data Science | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"#Mapping Data with Mapbox","slug":"mapping-data-with-mapbox","description":"A full exploration into Mapbox: the sweetheart of geovisualization amongst data scientists. Learn the core product or see why the API rivals Google Maps.","feature_image":"https://hackersandslackers.com/content/images/2019/03/mapbox.jpg","meta_description":"A full exploration into Mapbox: the sweetheart of geovisualization amongst data scientists. Learn the core product or see why the API rivals Google Maps.","meta_title":"Mapping Data with Mapbox","visibility":"internal"}],"plaintext":"If you've been here before, you probably already know our affinity for Mapbox \nand the visualization tools it provides data scientists and analysts. In the\npast, we've covered encoding location data from raw addresses\n[https://hackersandslackers.com/preparing-data-for-mapbox-geocoding/], as well\nas an exploration of Mapbox Studio\n[https://hackersandslackers.com/map-data-visualization-with-mapbox/]  for those\ngetting acquainted with the tool. Today we're going a step further: drawing\ndirections on a map.\n\nIt sounds simple enough: we already know how to geocode addresses, so all we\nneed to do is literally go from point A to point B. That said, things always\ntend to get tricky, and if you've never worked with GeoJSON\n[http://geojson.org/]  before, you're in for a treat.\n\nLoad Up Some Data\nI'm going to assume you have a DataFrame ready containing these columns:\n\n * origin_longitude\n * origin_latitude\n * destination_longitude\n * destination_latitude\n * Name/description of this route \n\nIf you want to play along, there are plenty of free datasets out there to play\nwith - I sourced some information from BigQuery while I was testing things out.\n\nimport os\nimport pandas as pd\nimport requests\nimport json\n\nroutes_df = pd.read_csv('datasources/routes.csv').head(10)\ntoken = os.environ.get('mapbox_token')\n\n\nSo far so good- all we've done is load our data, and save our Mapbox token from\nan environment variable.\n\nMapbox Directions Endpoint\nNext, we're going to use Mapbox's Directions API\n[https://docs.mapbox.com/api/navigation/#directions]  to return a route for us.\nThe anatomy of a GET call to receive directions looks like this:\n\nhttps://api.mapbox.com/directions/v5/mapbox/{{method_of_transportation}}/{{origin_longitude}},{{origin_latitude}};{{destination_longitude}},{{destination_latitude}}\n\nPARAMS:\naccess_token={{your_mapbox_access_token}}\ngeometries=geojson\n\n\n * method_of_transportation refers to one of the three methods that Mapbox\n   offers for creating routes: driving-traffic, driving, walking, and cycling.\n   Note that there is currently no way to draw route objects which follow public\n   transit: this is perhaps Mapbox's biggest downfall at the moment.\n   Nevertheless, if this is something you need, data can be imported from Google\n   maps to be used with Mapbox.\n * access_token  can be either your public token (visible upon login at\n   mapbox.com) or a generated secret token.\n * geometries  accepts the method by which to draw the object. This can be \n   GeoJSON,  polyline, or polyline6. Let's stick with GeoJSON.\n\nConstructing API Requests\nLet's construct a request per row in our DataFrame. By using Pandas' apply, we\nfire a function per row to do just that:\n\nimport os\nimport pandas as pd\nimport requests\nimport json\n\nroutes_df = pd.read_csv('datasources/routes.csv').head(10)\ntoken = os.environ.get('mapbox_token')\n\ndef create_route_json(row):\n    \"\"\"Get route JSON.\"\"\"\n    base_url = 'https://api.mapbox.com/directions/v5/mapbox/driving/'\n    url = base_url + str(row['home_longitude']) + \\\n        ',' + str(row['home_latitude']) + \\\n        ';' + str(row['destination_longitude']) + \\\n        ',' + str(row['destination_latitude'])\n    params = {\n        'geometries': 'geojson',\n        'access_token': token\n    }\n    req = requests.get(url, params=params)\n    route_json = req.json()['routes'][0]\n    # Now what?\n\n\nroutes_df.apply(create_route_json, axis=1)\n\n\nHere's where things get a little tricky. You see, GeoJSON abides by a strict\nformat. It looks something like this:\n\n{\n  \"type\": \"Feature\",\n  \"geometry\": {\n    \"coordinates\": [\n      [ -73.985897, 40.748133 ], [ -73.985046, 40.747773 ], \n      [ -73.984579, 40.748431 ], [ -73.973437, 40.743885 ],\n      [ -73.972844, 40.744452 ], [ -73.970728, 40.743885 ], \n      [ -73.970611, 40.735137 ], [ -73.9714, 40.733734 ],\n      [ -73.973503, 40.732341 ], [ -73.969823, 40.729864 ], \n      [ -73.969243, 40.727535 ], [ -73.975074, 40.711418 ],\n      [ -73.976603, 40.710276 ], [ -73.978077, 40.710587 ], \n      [ -73.979462, 40.70932 ], [ -73.992664, 40.708145 ],\n      [ -73.996237, 40.707307 ], [ -74.001135, 40.704086 ], \n      [ -74.0055, 40.70243 ], [ -74.006778, 40.703628 ],\n      [ -74.009173, 40.702484 ], [ -74.010637, 40.70371 ], \n      [ -74.014535, 40.703624 ], [ -74.014665, 40.704034 ],\n      [ -74.017057, 40.703259 ]\n    ],\n    \"type\": \"LineString\"\n  },\n  \"legs\": [{\n      \"summary\": \"\",\n      \"weight\": 3873.3,\n      \"duration\": 3873.3,\n      \"steps\": [],\n      \"distance\": 9660.2\n  }],\n  \"weight_name\": \"duration\",\n  \"weight\": 3873.3,\n  \"duration\": 3873.3,\n  \"distance\": 9660.2,\n  \"properties\": {\n    \"name\": \"Empire State\"\n  }\n}\n\n\nFor the sake of being difficult, the Mapbox Directions API doesn't return\nresponses in exactly this format. Instead, their response looks like this:\n\n{\n  \"routes\": [{\n    \"geometry\": {\n      \"coordinates\": [\n        [-73.985897, 40.748133],\n        [-73.985046, 40.747773],\n        [-73.984579, 40.748431],\n        [-73.973437, 40.743885],\n        [-73.972844, 40.744452],\n        [-73.970728, 40.743885],\n        [-73.970611, 40.735137],\n        [-73.9714, 40.733734],\n        [-73.973503, 40.732341],\n        [-73.969823, 40.729864],\n        [-73.969243, 40.727535],\n        [-73.975074, 40.711418],\n        [-73.976603, 40.710276],\n        [-73.978077, 40.710587],\n        [-73.979462, 40.70932],\n        [-73.992664, 40.708145],\n        [-73.996237, 40.707307],\n        [-74.001135, 40.704086],\n        [-74.0055, 40.70243],\n        [-74.006778, 40.703628],\n        [-74.009173, 40.702484],\n        [-74.010637, 40.70371],\n        [-74.014535, 40.703624],\n        [-74.014665, 40.704034],\n        [-74.017057, 40.703259]\n      ],\n      \"type\": \"LineString\"\n    },\n    \"legs\": [{\n      \"summary\": \"\",\n      \"weight\": 3873.3,\n      \"duration\": 3873.3,\n      \"steps\": [],\n      \"distance\": 9660.2\n    }],\n    \"weight_name\": \"duration\",\n    \"weight\": 3873.3,\n    \"duration\": 3873.3,\n    \"distance\": 9660.2\n  }],\n  \"waypoints\": [{\n      \"distance\": 34.00158252003884,\n      \"name\": \"West 33rd Street\",\n      \"location\": [\n        -73.985897,\n        40.748133\n      ]\n    },\n    {\n      \"distance\": 6.627227256764976,\n      \"name\": \"\",\n      \"location\": [\n        -74.017057,\n        40.703259\n      ]\n    }\n  ],\n  \"code\": \"Ok\",\n  \"uuid\": \"cjsomodyl025642o6f1jsddx6\"\n}\n\n\nThe format isn't too  far off, but it's different enough to not work. \n\nFormatting GeoJSON Correctly\nWe need to write a function to take the response Mapbox has given us and\ntransform it into a usable GeoJSON format:\n\nimport os\nimport pandas as pd\nimport requests\nimport json\n\nroutes_df = pd.read_csv('datasources/routes.csv').head(10)\ntoken = os.environ.get('mapbox_token')\n\n\ndef create_route_geojson(route_json, name):\n    \"\"\"Properly formats GeoJson for Mapbox visualization.\"\"\"\n    routes_dict = {\n        \"type\": \"Feature\",\n        \"geometry\": {\n            \"type\": \"LineString\"\n        },\n        \"weight_name\": \"duration\",\n        \"weight\": 718.9,\n        \"duration\": 0,\n        \"distance\": 0,\n        \"properties\": {\n            \"name\": \"\"\n        }\n    }\n    routes_dict['geometry']['coordinates'] = route_json['geometry']['coordinates']\n    routes_dict['legs'] = route_json['legs']\n    routes_dict['duration'] = route_json['legs'][0]['duration']\n    routes_dict['distance'] = route_json['legs'][0]['distance']\n    routes_dict['properties']['name'] = name\n    with open('dataoutput/' + name + '.json', 'w') as f:\n        json.dump(routes_dict, \n                  f, \n                  sort_keys=True, \n                  indent=4, \n                  ensure_ascii=False)\n        \n\ndef create_walking_route(row):\n    \"\"\"Get route JSON.\"\"\"\n    base_url = 'https://api.mapbox.com/directions/v5/mapbox/driving/'\n    url = base_url + str(row['home_longitude']) + \\\n        ',' + str(row['home_latitude']) + \\\n        ';' + str(row['destination_longitude']) + \\\n        ',' + str(row['destination_latitude'])\n    params = {\n        'geometries': 'geojson',\n        'access_token': token\n    }\n    req = requests.get(url, params=params)\n    route_json = req.json()['routes'][0]\n    create_route_geojson(route_json, str(int(row['route_id'])))\n\n\nroutes_df.apply(create_walking_route, axis=1)\n\n\nIt's not pretty, but it's reliable: we explicitly create the JSON structure we\nneed with routes_dict, and modify it with the API responses coming back from\nMapbox. Of course, we're still doing this one at a time, for every row in our\nDataFrame.\n\nYou'll notice I save each JSON file locally for now. In the future, we'll write\na script to automate the process of uploading our GeoJSON objects and adding\nthem to the proper Tilesets, but right now I just want to see that our work paid\noff!\n\nBy using Mapbox studio, we can see the result of our first route:\n\nA \"Driving\" Route from the Empire State Building to Battery Park.Aha! Would you\nlook at that- Mapbox knew to take the FDR drive. That's some promising stuff.\n\nDrawing Routes En Masse\nNaturally, this is only the tip of the iceberg: of the DataFrame of information\nwe loaded up, we've so far only viewed a single result. If anything in data is\nworth doing, it must be done thousands of times systematically without fail.\nLuckily, Mapbox provides us with the tools to do this: from lending us an S3\nbucket, to modifying datasets via the API, there's nothing to fear.\n\nTune in next time when do more... stuff!","html":"<p>If you've been here before, you probably already know our affinity for <strong>Mapbox</strong> and the visualization tools it provides data scientists and analysts. In the past, we've covered <a href=\"https://hackersandslackers.com/preparing-data-for-mapbox-geocoding/\">encoding location data from raw addresses</a>, as well as an <a href=\"https://hackersandslackers.com/map-data-visualization-with-mapbox/\">exploration of Mapbox Studio</a> for those getting acquainted with the tool. Today we're going a step further: drawing directions on a map.</p><p>It sounds simple enough: we already know how to geocode addresses, so all we need to do is literally go from point A to point B. That said, things always tend to get tricky, and if you've never worked with <a href=\"http://geojson.org/\">GeoJSON</a> before, you're in for a treat.</p><h2 id=\"load-up-some-data\">Load Up Some Data</h2><p>I'm going to assume you have a DataFrame ready containing these columns:</p><ul><li>origin_longitude</li><li>origin_latitude</li><li>destination_longitude</li><li>destination_latitude</li><li>Name/description of this route </li></ul><p>If you want to play along, there are plenty of free datasets out there to play with - I sourced some information from <strong>BigQuery </strong>while I was testing things out.</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">import os\nimport pandas as pd\nimport requests\nimport json\n\nroutes_df = pd.read_csv('datasources/routes.csv').head(10)\ntoken = os.environ.get('mapbox_token')\n</code></pre>\n<!--kg-card-end: markdown--><p>So far so good- all we've done is load our data, and save our Mapbox token from an environment variable.</p><h2 id=\"mapbox-directions-endpoint\">Mapbox Directions Endpoint</h2><p>Next, we're going to use Mapbox's <a href=\"https://docs.mapbox.com/api/navigation/#directions\">Directions API</a> to return a route for us. The anatomy of a GET call to receive directions looks like this:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">https://api.mapbox.com/directions/v5/mapbox/{{method_of_transportation}}/{{origin_longitude}},{{origin_latitude}};{{destination_longitude}},{{destination_latitude}}\n\nPARAMS:\naccess_token={{your_mapbox_access_token}}\ngeometries=geojson\n</code></pre>\n<!--kg-card-end: markdown--><ul><li><strong>method_of_transportation </strong>refers to one of the three methods that Mapbox offers for creating routes: <em>driving-traffic</em>, <em>driving</em>, <em>walking</em>, and <em>cycling</em>. Note that there is currently no way to draw route objects which follow public transit: this is perhaps Mapbox's biggest downfall at the moment. Nevertheless, if this is something you need, data can be imported from Google maps to be used with Mapbox.</li><li><strong>access_token</strong> can be either your public token (visible upon login at mapbox.com) or a generated secret token.</li><li><strong>geometries</strong> accepts the method by which to draw the object. This can be <em>GeoJSON,</em> <em>polyline, </em>or <em>polyline6. </em>Let's stick with GeoJSON.</li></ul><h2 id=\"constructing-api-requests\">Constructing API Requests</h2><p>Let's construct a request per row in our DataFrame. By using Pandas' apply, we fire a function per row to do just that:</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">import os\nimport pandas as pd\nimport requests\nimport json\n\nroutes_df = pd.read_csv('datasources/routes.csv').head(10)\ntoken = os.environ.get('mapbox_token')\n\ndef create_route_json(row):\n    &quot;&quot;&quot;Get route JSON.&quot;&quot;&quot;\n    base_url = 'https://api.mapbox.com/directions/v5/mapbox/driving/'\n    url = base_url + str(row['home_longitude']) + \\\n        ',' + str(row['home_latitude']) + \\\n        ';' + str(row['destination_longitude']) + \\\n        ',' + str(row['destination_latitude'])\n    params = {\n        'geometries': 'geojson',\n        'access_token': token\n    }\n    req = requests.get(url, params=params)\n    route_json = req.json()['routes'][0]\n    # Now what?\n\n\nroutes_df.apply(create_route_json, axis=1)\n</code></pre>\n<!--kg-card-end: markdown--><p>Here's where things get a little tricky. You see, GeoJSON abides by a strict format. It looks something like this:</p><!--kg-card-begin: markdown--><pre><code class=\"language-json\">{\n  &quot;type&quot;: &quot;Feature&quot;,\n  &quot;geometry&quot;: {\n    &quot;coordinates&quot;: [\n      [ -73.985897, 40.748133 ], [ -73.985046, 40.747773 ], \n      [ -73.984579, 40.748431 ], [ -73.973437, 40.743885 ],\n      [ -73.972844, 40.744452 ], [ -73.970728, 40.743885 ], \n      [ -73.970611, 40.735137 ], [ -73.9714, 40.733734 ],\n      [ -73.973503, 40.732341 ], [ -73.969823, 40.729864 ], \n      [ -73.969243, 40.727535 ], [ -73.975074, 40.711418 ],\n      [ -73.976603, 40.710276 ], [ -73.978077, 40.710587 ], \n      [ -73.979462, 40.70932 ], [ -73.992664, 40.708145 ],\n      [ -73.996237, 40.707307 ], [ -74.001135, 40.704086 ], \n      [ -74.0055, 40.70243 ], [ -74.006778, 40.703628 ],\n      [ -74.009173, 40.702484 ], [ -74.010637, 40.70371 ], \n      [ -74.014535, 40.703624 ], [ -74.014665, 40.704034 ],\n      [ -74.017057, 40.703259 ]\n    ],\n    &quot;type&quot;: &quot;LineString&quot;\n  },\n  &quot;legs&quot;: [{\n      &quot;summary&quot;: &quot;&quot;,\n      &quot;weight&quot;: 3873.3,\n      &quot;duration&quot;: 3873.3,\n      &quot;steps&quot;: [],\n      &quot;distance&quot;: 9660.2\n  }],\n  &quot;weight_name&quot;: &quot;duration&quot;,\n  &quot;weight&quot;: 3873.3,\n  &quot;duration&quot;: 3873.3,\n  &quot;distance&quot;: 9660.2,\n  &quot;properties&quot;: {\n    &quot;name&quot;: &quot;Empire State&quot;\n  }\n}\n</code></pre>\n<!--kg-card-end: markdown--><p>For the sake of being difficult, the Mapbox Directions API doesn't return responses in exactly this format. Instead, their response looks like this:</p><!--kg-card-begin: markdown--><pre><code class=\"language-json\">{\n  &quot;routes&quot;: [{\n    &quot;geometry&quot;: {\n      &quot;coordinates&quot;: [\n        [-73.985897, 40.748133],\n        [-73.985046, 40.747773],\n        [-73.984579, 40.748431],\n        [-73.973437, 40.743885],\n        [-73.972844, 40.744452],\n        [-73.970728, 40.743885],\n        [-73.970611, 40.735137],\n        [-73.9714, 40.733734],\n        [-73.973503, 40.732341],\n        [-73.969823, 40.729864],\n        [-73.969243, 40.727535],\n        [-73.975074, 40.711418],\n        [-73.976603, 40.710276],\n        [-73.978077, 40.710587],\n        [-73.979462, 40.70932],\n        [-73.992664, 40.708145],\n        [-73.996237, 40.707307],\n        [-74.001135, 40.704086],\n        [-74.0055, 40.70243],\n        [-74.006778, 40.703628],\n        [-74.009173, 40.702484],\n        [-74.010637, 40.70371],\n        [-74.014535, 40.703624],\n        [-74.014665, 40.704034],\n        [-74.017057, 40.703259]\n      ],\n      &quot;type&quot;: &quot;LineString&quot;\n    },\n    &quot;legs&quot;: [{\n      &quot;summary&quot;: &quot;&quot;,\n      &quot;weight&quot;: 3873.3,\n      &quot;duration&quot;: 3873.3,\n      &quot;steps&quot;: [],\n      &quot;distance&quot;: 9660.2\n    }],\n    &quot;weight_name&quot;: &quot;duration&quot;,\n    &quot;weight&quot;: 3873.3,\n    &quot;duration&quot;: 3873.3,\n    &quot;distance&quot;: 9660.2\n  }],\n  &quot;waypoints&quot;: [{\n      &quot;distance&quot;: 34.00158252003884,\n      &quot;name&quot;: &quot;West 33rd Street&quot;,\n      &quot;location&quot;: [\n        -73.985897,\n        40.748133\n      ]\n    },\n    {\n      &quot;distance&quot;: 6.627227256764976,\n      &quot;name&quot;: &quot;&quot;,\n      &quot;location&quot;: [\n        -74.017057,\n        40.703259\n      ]\n    }\n  ],\n  &quot;code&quot;: &quot;Ok&quot;,\n  &quot;uuid&quot;: &quot;cjsomodyl025642o6f1jsddx6&quot;\n}\n</code></pre>\n<!--kg-card-end: markdown--><p>The format isn't <em>too</em> far off, but it's different enough to not work. </p><h2 id=\"formatting-geojson-correctly\">Formatting GeoJSON Correctly</h2><p>We need to write a function to take the response Mapbox has given us and transform it into a usable GeoJSON format:</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">import os\nimport pandas as pd\nimport requests\nimport json\n\nroutes_df = pd.read_csv('datasources/routes.csv').head(10)\ntoken = os.environ.get('mapbox_token')\n\n\ndef create_route_geojson(route_json, name):\n    &quot;&quot;&quot;Properly formats GeoJson for Mapbox visualization.&quot;&quot;&quot;\n    routes_dict = {\n        &quot;type&quot;: &quot;Feature&quot;,\n        &quot;geometry&quot;: {\n            &quot;type&quot;: &quot;LineString&quot;\n        },\n        &quot;weight_name&quot;: &quot;duration&quot;,\n        &quot;weight&quot;: 718.9,\n        &quot;duration&quot;: 0,\n        &quot;distance&quot;: 0,\n        &quot;properties&quot;: {\n            &quot;name&quot;: &quot;&quot;\n        }\n    }\n    routes_dict['geometry']['coordinates'] = route_json['geometry']['coordinates']\n    routes_dict['legs'] = route_json['legs']\n    routes_dict['duration'] = route_json['legs'][0]['duration']\n    routes_dict['distance'] = route_json['legs'][0]['distance']\n    routes_dict['properties']['name'] = name\n    with open('dataoutput/' + name + '.json', 'w') as f:\n        json.dump(routes_dict, \n                  f, \n                  sort_keys=True, \n                  indent=4, \n                  ensure_ascii=False)\n        \n\ndef create_walking_route(row):\n    &quot;&quot;&quot;Get route JSON.&quot;&quot;&quot;\n    base_url = 'https://api.mapbox.com/directions/v5/mapbox/driving/'\n    url = base_url + str(row['home_longitude']) + \\\n        ',' + str(row['home_latitude']) + \\\n        ';' + str(row['destination_longitude']) + \\\n        ',' + str(row['destination_latitude'])\n    params = {\n        'geometries': 'geojson',\n        'access_token': token\n    }\n    req = requests.get(url, params=params)\n    route_json = req.json()['routes'][0]\n    create_route_geojson(route_json, str(int(row['route_id'])))\n\n\nroutes_df.apply(create_walking_route, axis=1)\n</code></pre>\n<!--kg-card-end: markdown--><p>It's not pretty, but it's reliable: we explicitly create the JSON structure we need with <code>routes_dict</code>, and modify it with the API responses coming back from Mapbox. Of course, we're still doing this one at a time, for every row in our DataFrame.</p><p>You'll notice I save each JSON file locally for now. In the future, we'll write a script to automate the process of uploading our GeoJSON objects and adding them to the proper Tilesets, but right now I just want to see that our work paid off!</p><p>By using Mapbox studio, we can see the result of our first route:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://hackersandslackers.com/content/images/2019/02/Screen-Shot-2019-02-28-at-8.05.21-AM.png\" class=\"kg-image\"><figcaption>A \"Driving\" Route from the Empire State Building to Battery Park.</figcaption></figure><!--kg-card-end: image--><p>Aha! Would you look at that- Mapbox knew to take the FDR drive. That's some promising stuff.</p><h3 id=\"drawing-routes-en-masse\">Drawing Routes En Masse</h3><p>Naturally, this is only the tip of the iceberg: of the DataFrame of information we loaded up, we've so far only viewed a single result. If anything in data is worth doing, it must be done thousands of times systematically without fail. Luckily, Mapbox provides us with the tools to do this: from lending us an S3 bucket, to modifying datasets via the API, there's nothing to fear.</p><p>Tune in next time when do more... stuff!</p>","url":"https://hackersandslackers.com/mapbox-draw-route-objects/","uuid":"ef0a4639-8818-475b-9a25-6a20b13c1ecf","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c17ddd4418434084a873d2a"}},"pageContext":{"slug":"mapbox-draw-route-objects"}}