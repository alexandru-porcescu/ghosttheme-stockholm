{"data":{"ghostTag":{"slug":"excel","name":"Excel","visibility":"public","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business."},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736ff","title":"Roll On Through: Create an Iterative List in Excel Without Any Real Coding","slug":"create-an-iterative-list-in-excel","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/09/excelif@2x.jpg","excerpt":"This isn't standard programming...THIS IS EXCEL!","custom_excerpt":"This isn't standard programming...THIS IS EXCEL!","created_at_pretty":"11 September, 2018","published_at_pretty":"13 September, 2018","updated_at_pretty":"02 February, 2019","created_at":"2018-09-11T18:07:12.000-04:00","published_at":"2018-09-13T08:00:00.000-04:00","updated_at":"2019-02-02T14:41:37.000-05:00","meta_title":"Create an Iterative List in Excel | Hackers And Slackers","meta_description":"We get creative in Excel by making FOR loops without using VBA.","og_description":"We get creative in Excel by making FOR loops without using VBA.","og_image":"https://hackersandslackers.com/content/images/2018/09/excelif@2x.jpg","og_title":"Create an Iterative List in Excel Without Any Real Coding","twitter_description":"We get creative in Excel by making FOR loops without using VBA.","twitter_image":"https://hackersandslackers.com/content/images/2018/09/excelif@2x.jpg","twitter_title":"Create an Iterative List in Excel Without Any Real Coding","authors":[{"name":"Max Mileaf","slug":"snacks","bio":"One of three therapists in the known universe who knows how to use a computer. Finds meaning in highly protected data, in a cave, utilizing nothing but a box of scraps. ","profile_image":"https://hackersandslackers.com/content/images/2019/03/max2.jpg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Max Mileaf","slug":"snacks","bio":"One of three therapists in the known universe who knows how to use a computer. Finds meaning in highly protected data, in a cave, utilizing nothing but a box of scraps. ","profile_image":"https://hackersandslackers.com/content/images/2019/03/max2.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},"tags":[{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},{"name":"#Adventures in Excel","slug":"adventures-in-excel","description":"Excel secrets and magic. The kind of industry knowledge that could put financial analysts out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"internal"}],"plaintext":"Hi there dear reader, so, I know that in the previous article that I penned, I\nstated that I'd be showing you how to create buttons that you can interact with\n(and I know you know that because you're reading these in order...right?) but I\nrecently had to create something that was so cool, I had to write about it (once\nyou've drank enough data Kool-Aid, you too will find solutions to data\nmanipulation problems cool).\n\nHere's the scene: we've got a list of people, each with a particular issue,\nhowever, due to why I needed to put the data together, we needed to combine all\nof the issues that each person had in a single cell for the person they were\nassociated with. \n\nNow, if this were regular computer programming, the solution would be simple:\ncreate an iterative FOR loop. What is this you ask? it's a pretty standard\ncomputer programming function (up there with the IF statement and the OR\nstatement) that does a particular thing FOR a certain period of time in which a\nparticular condition is true (like for instance, as long as the person's name\nremains the same. Granted, you can do FOR loops in VBA, but it's not as easy as\nit should be, and we'd probably have to do most of the same steps in order to\nget the full benefit. \n\nHowever, this isn't standard programming...THIS IS EXCEL! As such, we needed to\nget creative, and approximate the FOR loop without using VBA. Here's what we had\nto work with: \n\n * A list of names (in this case, it'll be column A) \n * A unique ID for each of the people on the list (This will be Column B)\n * An issue (in this case, a diagnosis) that each person had, and each line has\n   a different issue, even if it's the same person. (Column C)\n * A bunch of other information that isn't important for this trick. (Who\n   cares?)\n\nHere's how we go about doing it: \n\n 1. Sort the entire list by the ID, that way, the data for the same people are\n    all next to each other. \n 2. Create two new columns, one that does the heavy lifting, and one that\n    signifies (or \"Flags) that Excel should stop iterating. \n 3. In the first of the two created columns (let's put a heading on it called\n    \"combined\") put in the following formula starting with cell D2 and populate\n    your whole column:\n    =IF(B1=B2,CONCATENATE(D1, \";\",C2),C2)\n\n\t\tWhat this is doing is checking to see if the two IDs match (and thus are the\nsame people) and it builds a string combining all of the issues every time\nthere's a match. In the end, column D is going to be the column where the \"work\"\nis done. Of note, the \";\" added in the middle is for aesthetics, feel free to\nignore it, or just plug in some other type of spacer.\n\n\t4. In the second of the created columns (let's call this one \"flag) put in the\nfollowing formula: =IF(B2=B3,\"\",1)\n\n\tThis basically adds a 1 (or whatever you decide to write in) on the last line\nof each loop, signifying that Excel should start the process over on the next\nline instead of continuing to build the string. you start on the cell below the\ninitial cell so that you don't accidentally put the flag on the first line (as\nthe heading and the name is never going to match) This leads us to the final\nstep:\n\n\t5. Filter the sheet by the \"flag\" column for 1, and if so desired, copy and\npaste this filtered list into a new sheet.\n\nThis final step allows you to hide all rows that aren't the final row in the\nloop, thus giving you only 1 line per person with the combined issues that the\nperson had! See below for the finished product.\n\nRemember, the flag column has the following formula =IF(b2=b3,\"\",1)So there you\ngo, using only 2 columns and as many formulas you can easily inject a loop into\nExcel! This technique has many uses, as you may want to continue running a\nformula down a column until a certain \"thing\" happens elsewhere on the\nsheet...the possibilities are endless! \n\nSo today, we've learned the following:\n\n 1. What iterators and FOR loops do in computer programming.\n 2. How to create and utilize an iterator to complete any task that needs to\n    continue running until a particular goal is reached.\n\nNext time, I think we'll probably delve back into Active X and Form controls, so\nthat you can improve the life of your less savvy co-workers, and make yourself\nlook like a boss in the meantime.\n\nSigning off,\n\n-Snacks","html":"<p>Hi there dear reader, so, I know that in the previous article that I penned, I stated that I'd be showing you how to create buttons that you can interact with (and I know you know that because you're reading these in order...right?) but I recently had to create something that was so cool, I had to write about it (once you've drank enough data Kool-Aid, you too will find solutions to data manipulation problems cool).</p><p>Here's the scene: we've got a list of people, each with a particular issue, however, due to why I needed to put the data together, we needed to combine all of the issues that each person had in a single cell for the person they were associated with. </p><p>Now, if this were <em>regular </em>computer programming, the solution would be simple: create an iterative FOR loop. What is this you ask? it's a pretty standard computer programming function (up there with the IF statement and the OR statement) that does a particular thing <em>FOR </em>a certain period of time in which a particular condition is true (like for instance, as long as the person's name remains the same. Granted, you can do FOR loops in VBA, but it's not as easy as it should be, and we'd probably have to do most of the same steps in order to get the full benefit. </p><p>However, this isn't standard programming...THIS IS EXCEL! As such, we needed to get creative, and approximate the FOR loop without using VBA. Here's what we had to work with: </p><ul><li>A list of names (in this case, it'll be column A) </li><li>A unique ID for each of the people on the list (This will be Column B)</li><li>An issue (in this case, a diagnosis) that each person had, and each line has a different issue, even if it's the same person. (Column C)</li><li>A bunch of other information that isn't important for this trick. (Who cares?)</li></ul><p>Here's how we go about doing it: </p><ol><li>Sort the entire list by the ID, that way, the data for the same people are all next to each other. </li><li>Create two new columns, one that does the heavy lifting, and one that signifies (or \"Flags) that Excel should stop iterating. </li><li>In the first of the two created columns (let's put a heading on it called \"combined\") put in the following formula starting with cell D2 and populate your whole column:<br> <code>=IF(B1=B2,CONCATENATE(D1, \";\",C2),C2)</code></li></ol><p>\t\tWhat this is doing is checking to see if the two IDs match (and thus are the same people) and it builds a string combining all of the issues every time there's a match. In the end, column D is going to be the column where the \"work\" is done. Of note, the \";\" added in the middle is for aesthetics, feel free to ignore it, or just plug in some other type of spacer.</p><p>\t4. In the second of the created columns (let's call this one \"flag) put in the following formula: <code>=IF(B2=B3,\"\",1)</code></p><p>\tThis basically adds a 1 (or whatever you decide to write in) on the last line of each loop, signifying that Excel should start the process over on the next line instead of continuing to build the string. you start on the cell below the initial cell so that you don't accidentally put the flag on the <em>first </em>line (as the heading and the name is never going to match) This leads us to the final step:</p><p>\t5. Filter the sheet by the \"flag\" column for 1, and if so desired, copy and paste this filtered list into a new sheet.</p><p>This final step allows you to hide all rows that aren't the final row in the loop, thus giving you only 1 line per person with the combined issues that the person had! See below for the finished product.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/image.png\" class=\"kg-image\"><figcaption>Remember, the flag column has the following formula =IF(b2=b3,\"\",1)</figcaption></figure><p>So there you go, using only 2 columns and as many formulas you can easily inject a loop into Excel! This technique has many uses, as you may want to continue running a formula down a column until a certain \"thing\" happens elsewhere on the sheet...the possibilities are endless! </p><p>So today, we've learned the following:</p><ol><li>What iterators and FOR loops do in computer programming.</li><li>How to create and utilize an iterator to complete any task that needs to continue running until a particular goal is reached.</li></ol><p>Next time, I think we'll probably delve back into Active X and Form controls, so that you can improve the life of your less savvy co-workers, and make yourself look like a boss in the meantime.</p><p>Signing off,</p><p>-Snacks</p><p></p><p></p>","url":"https://hackersandslackers.com/create-an-iterative-list-in-excel/","uuid":"44966a6d-9b66-441f-9213-5bbea6842fdb","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b983c901fc1fc7d92b5c53d"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736ed","title":"Dynamic Tension! Creating and Using Dynamic Named Ranges in Excel","slug":"dynamic-named-ranges-in-excel","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/08/maxidk@2x.jpg","excerpt":"Dynamically load data in smart pivot tables.","custom_excerpt":"Dynamically load data in smart pivot tables.","created_at_pretty":"30 August, 2018","published_at_pretty":"01 September, 2018","updated_at_pretty":"02 February, 2019","created_at":"2018-08-30T17:00:23.000-04:00","published_at":"2018-08-31T21:13:00.000-04:00","updated_at":"2019-02-02T03:50:02.000-05:00","meta_title":"Dynamic Named Ranges in Excel | Hackers And Slackers","meta_description":"Use a named dynamic range and a form control to dynamically auto-populate and refresh Excel pivot tables.","og_description":"Use a named dynamic range and a form control to dynamically auto-populate and refresh Excel pivot tables.","og_image":"https://hackersandslackers.com/content/images/2018/08/maxidk@2x.jpg","og_title":"Dynamic Tension! Creating and Using Dynamic Named Ranges in Excel","twitter_description":"Use a named dynamic range and a form control to dynamically auto-populate and refresh Excel pivot tables.","twitter_image":"https://hackersandslackers.com/content/images/2018/08/maxidk@2x.jpg","twitter_title":"Dynamic Tension! Creating and Using Dynamic Named Ranges in Excel","authors":[{"name":"Max Mileaf","slug":"snacks","bio":"One of three therapists in the known universe who knows how to use a computer. Finds meaning in highly protected data, in a cave, utilizing nothing but a box of scraps. ","profile_image":"https://hackersandslackers.com/content/images/2019/03/max2.jpg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Max Mileaf","slug":"snacks","bio":"One of three therapists in the known universe who knows how to use a computer. Finds meaning in highly protected data, in a cave, utilizing nothing but a box of scraps. ","profile_image":"https://hackersandslackers.com/content/images/2019/03/max2.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},"tags":[{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},{"name":"Data Analysis","slug":"data-analysis","description":"Drawing meaningful conclusions from data. Includes interpretation, dashboard creation, and data manipulation.","feature_image":null,"meta_description":"Drawing meaningful conclusions from data. Includes interpretation, dashboard creation, and data manipulation.","meta_title":"Data Analysis | Hackers and Slackers","visibility":"public"},{"name":"#Adventures in Excel","slug":"adventures-in-excel","description":"Excel secrets and magic. The kind of industry knowledge that could put financial analysts out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"internal"}],"plaintext":"First things first, 10 points to anyone who understands what the title is\nreferring to (that's either Charles Atlas' workout philosophy, or one of core\ntenants of Bokononism in Kurt Vonnegut's standout Cat's Cradle). \n\nNow, with my obscure reference quota filled for the day, let's assume that\nyou've been working as an analyst for some time now. As stated in a previous\npost, generally you're likely to get promoted into a management position, where\nyou no longer need your formidable skills of analysis, and they too, like all\ngood things, will atrophy to nothingness. However, for those of you who have\ndemonstrated such overwhelming nuance of technique that your company fears the\nloss of your truly awe-inspiring abilities more than they love adhering to the\nPeter Principle, there may indeed be another road.\n\nThis unlikely confluence of events generally begins after the fifth or sixth\ntime that you've been asked to write a step-by-step tutorial showing how you\nbuilt a specific report, only to find out that if written out in a truly \nstep-wise fashion would take up 16 pages, and thus would never EVER be looked\nat. This phenomenon serves a dual purpose: \n\n 1. It misleads your company into believing that what you do is complex.\n 2. It is taken as evidence that you are a literal wizard, and you can't train a\n    muggle to do magic. \n\nOnce your company has taken the bait, they may realize that you are a true elite\noperator, and that the loss of your abilities would result in a substantial\ndrain on your business' intelligence. Enter the Lead Analyst (also called a head\nanalyst, chief analyst, or executive analyst if where you work is incredibly far\nup it's own ass). This job title exists solely to reward those of you who have\nbuilt up enough number crunching credit to make your employer realize that if\nthey promote you to a manager, they lose, and if they don't promote you at all,\nyou can leave at any time. \n\nSo, hotshot, what does this job involve? Simply put, your company no longer\nquestions you about...basically anything (and if they ever do, say you're\ncompiling, always works) and you might even be entrusted to speak directly to\nthe notorious Dataratti that we spoke of several posts ago (they're all actually\nreally cool guys, and appreciate being able to talk to someone who understands\nwhat their job and capabilities actually are). In exchange for these two awesome\nperks, all you have to be able to do is build reports that can be used by anyone\n...\n\nNow all of you who work in the field and have to engage in this practice just\nlet out an enormous sigh, and the reason for this is because now you have to\nwrite reports that:\n\n1. Can't use macros because the end user doesn't know what a macro is.\n2. Need to have built in constraints because \"it just needs to be there to work\"\nis literally begging someone to mess up a perfectly good formula.\n3. Can't rely on the manual typing of actual formulae because explaining to\nsomeone that the \"dollar sign isn't a typo\" to someone never quite sticks.\n4. Can't utilize your own macros because the end user isn't going to have access\nto them, and finally... \n5. You can no longer say things like \"pivot out\", \"lookup\", or \"index\" and\ninstead need to break each of those things down into a series of button clicks\n(hence why the documentation becomes 16 pages).\n\nWith that being said, let's jump into one of the easiest ways that you can build\nreports that allow even the unenlightened the ability to touch the sun: using a\nnamed dynamic range and a form control to auto-populate and refresh a pivot\ntable.\n\nNow, if any of those words are unfamiliar to you, you need to go back to the\nbeginning of the series (with special attention to the post regarding naming\nranges and active-X controls) so that you know how to do the following:\n\n 1. Build a pivot table\n 2. Name a range\n\nIf you've got the tricks in the bag, let's get going. In order to get this trick\nto work the first step is building a named dynamic range. This is a glorious\ntrick that takes the convenience of naming a range (being able to grab that\ninformation from anywhere in a workbook) along with the UNLIMITED POWER of\nassociating anything that someone may plug into the range with the name. \n\nFirst, let's start with a sample data-set of super heroes and their secret\nidentities, like so (you'll need developer active for this to work): \n\nMiles Morales and Amadeus Cho notwithstandingSo, now's where the magic happens:\nclick formulas-->Name Manager\n\nNote the dialogue box.In the resulting dialog box, click \"new\":\n\nSeen here: how these become 16 page tutorialsIn the resulting dialog box, name\nthe range whatever you want (just remember...no spaces), but the magic really\nhappens at the bottom where it says \"refers to\", as shown here: \n\nPictured here: what the coolest thing looks like before it happensNow, in that\nbox, you'll notice that you can put in a formula, and this one is KEY to\nremember both for this, and anytime you want to make a dynamic range in the\nfuture, and it is: \n=OFFSET(Sheet1!$A$1,0,0,COUNTA(Sheet1!$A:$A),COUNTA(Sheet1!$1:$1))\n* substitute the name of your worksheet for sheet1. \nEssentially, OFFSET  is how you set your imaginary cursor (remember, you CAN\ntechnically do everything you see in Excel from a command line, and this is how\nit knows where you are). It requires 3-5 variables: \n\n * The first (the reference) is what you want your \"mouse\" to select before it\n   finds it's way elsewhere.\n * The second and third is the number of rows and columns you want to move in\n   order to select your next item. You can end here, but you'd just wind up\n   moving your \"cursor\" to another cell. Instead, we set this to zero for both\n   because you don't want to move anywhere. \n * The 4th is the hight (in cells) of what you're selecting (that way, you can\n   select any number of cells vertically from where your cursor wound up) and we\n   use \"COUNTA\" here to mean the number of cells that aren't blank in column A.\n * The 5th and final variable is the width which serves the same function as\n   height in the other direction. By using \"COUNTA\" here, we're selecting the\n   number of columns that aren't blank in row 1.\n\nIf you did everything right, you should end up like this: \n\nNow you can officially claim to be \"Dynamic\" on your resumeIf you're thinking\nwith portals, you may have already pieced together what we've done here: by\nnaming the range, we can substitute any variable that'll support an array with\nthe name of the range, AND by using that offset formula, we've just made it so\nthat no matter what you throw into this first sheet, it gets added to the range.\n \n\nThis by itself is very cool, and very useful, but let's take it a step further\nand I'll show you how you can use this dynamic named range to make an \"idiot\nproof\" updater for a pivot table. \n\nThe first step is to of course make a pivot table, however, we're going to do\nsomething daring: a pivot table requires an array...and we've just created an\narray that's DYNAMIC. So, click insert, pivot table, and then when it asks you\nwhat you what you want in the table, tell it that you want to put powers in\nthere (that's the name of my range) like so:\n\nNo one man should have all this power...and boom:\n\nNot for VillainsBUT IT DOESN'T END THERE FOLKS. As your range is dynamic, you\ncan add whatever rows or columns to the first page as you wish, and then if you\nrefresh your pivot table (right click, refresh) these changes will be\nreflected...watch\n\nSpecifically for VillainsIT'S DYNAMIC!So, now you've learned how to:\n\n * Create a named dynamic range\n * Use the offset function to set a virtual cursor (this becomes exceedingly\n   important if ever you decide you want to code for real).\n * Refresh a pivot table with information updated in the dynamic range. \n\nNext time, we'll take it up a notch, and remove any sort of thought needed to\nupdate these tables! \n\nIt's Munchin' Time, \n\n-Snacks","html":"<p>First things first, 10 points to anyone who understands what the title is referring to (that's either Charles Atlas' workout philosophy, or one of core tenants of Bokononism in Kurt Vonnegut's standout <em>Cat's Cradle). </em></p><p>Now, with my obscure reference quota filled for the day, let's assume that you've been working as an analyst for some time now. As stated in a previous post, generally you're likely to get promoted into a management position, where you no longer need your formidable skills of analysis, and they too, like all good things, will atrophy to nothingness. However, for those of you who have demonstrated such overwhelming nuance of technique that your company fears the loss of your truly awe-inspiring abilities more than they love adhering to the Peter Principle, there may indeed be another road.</p><p>This unlikely confluence of events generally begins after the fifth or sixth time that you've been asked to write a step-by-step tutorial showing how you built a specific report, only to find out that if written out in a <em>truly </em>step-wise fashion would take up 16 pages, and thus would never EVER be looked at. This phenomenon serves a dual purpose: </p><ol><li>It misleads your company into believing that what you do is <em>complex.</em></li><li>It is taken as evidence that you are a literal wizard, and you can't train a muggle to do magic. <em> </em></li></ol><p>Once your company has taken the bait, they may realize that you are a true elite operator, and that the loss of your abilities would result in a substantial drain on your business' intelligence. Enter the Lead Analyst (also called a head analyst, chief analyst, or executive analyst if where you work is incredibly far up it's own ass). This job title exists solely to reward those of you who have built up enough number crunching credit to make your employer realize that if they promote you to a manager, they lose, and if they don't promote you at all, you can leave at any time. </p><p>So, hotshot, what does this job involve? Simply put, your company no longer questions you about...basically anything (and if they ever do, say you're compiling, always works) and you might even be entrusted to speak directly to the notorious Dataratti that we spoke of several posts ago (they're all actually really cool guys, and appreciate being able to talk to someone who understands what their job and capabilities actually are). In exchange for these two awesome perks, all you have to be able to do is build reports that can be used by <em>anyone</em>...</p><p>Now all of you who work in the field and have to engage in this practice just let out an enormous sigh, and the reason for this is because now you have to write reports that:<br><br>1. Can't use macros because the end user doesn't know what a macro is.<br>2. Need to have built in constraints because \"it just needs to be there to work\" is literally begging someone to mess up a perfectly good formula.<br>3. Can't rely on the manual typing of actual formulae because explaining to someone that the \"dollar sign isn't a typo\" to someone never quite sticks.<br>4. Can't utilize your own macros because the end user isn't going to have access to them, and finally... <br>5. You can no longer say things like \"pivot out\", \"lookup\", or \"index\" and instead need to break each of those things down into a series of button clicks (hence why the documentation becomes 16 pages).</p><p>With that being said, let's jump into one of the easiest ways that you can build reports that allow even the unenlightened the ability to touch the sun: using a named dynamic range and a form control to auto-populate and refresh a pivot table.</p><p>Now, if any of those words are unfamiliar to you, you need to go back to the beginning of the series (with special attention to the post regarding naming ranges and active-X controls) so that you know how to do the following:</p><ol><li>Build a pivot table</li><li>Name a range</li></ol><p>If you've got the tricks in the bag, let's get going. In order to get this trick to work the first step is building a <strong>named dynamic range. </strong>This is a glorious trick that takes the convenience of naming a range (being able to grab that information from anywhere in a workbook) along with the <em>UNLIMITED POWER </em>of associating anything that someone may plug into the range with the name. </p><p>First, let's start with a sample data-set of super heroes and their secret identities, like so (you'll need developer active for this to work): </p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/image-7.png\" class=\"kg-image\"><figcaption>Miles Morales and Amadeus Cho notwithstanding</figcaption></figure><p>So, now's where the magic happens: click formulas--&gt;Name Manager</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-1.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/image-8.png\" class=\"kg-image\"><figcaption>Note the dialogue box.</figcaption></figure><p>In the resulting dialog box, click \"new\":</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-4.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/image-9.png\" class=\"kg-image\"><figcaption>Seen here: how these become 16 page tutorials</figcaption></figure><p>In the resulting dialog box, name the range whatever you want (just remember...no spaces), but the magic really happens at the bottom where it says \"refers to\", as shown here: </p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-4.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/image-10.png\" class=\"kg-image\"><figcaption>Pictured here: what the coolest thing looks like before it happens</figcaption></figure><p>Now, in that box, you'll notice that you can put in a formula, and this one is KEY to remember both for this, and anytime you want to make a dynamic range in the future, and it is: <code>=OFFSET(Sheet1!$A$1,0,0,COUNTA(Sheet1!$A:$A),COUNTA(Sheet1!$1:$1))</code><br>* substitute the name of your worksheet for sheet1. <br>Essentially, <strong>OFFSET</strong> is how you set your imaginary cursor (remember, you CAN technically do everything you <em>see </em>in Excel from a command line, and this is how it knows where you are). It requires 3-5 variables: </p><ul><li>The first (the reference) is what you want your \"mouse\" to select before it finds it's way elsewhere.</li><li>The second and third is the number of rows and columns you want to move in order to select your next item. You can end here, but you'd just wind up moving your \"cursor\" to another cell. Instead, we set this to zero for both because you don't want to <em>move </em>anywhere. </li><li>The 4th is the hight (in cells) of what you're selecting (that way, you can select any number of cells vertically from where your cursor wound up) and we use \"COUNTA\" here to mean the number of cells that aren't blank in column A.</li><li>The 5th and final variable is the width which serves the same function as height in the other direction. By using \"COUNTA\" here, we're selecting the number of columns that aren't blank in row 1.</li></ul><p>If you did everything right, you should end up like this: </p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-1.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/image-11.png\" class=\"kg-image\"><figcaption>Now you can officially claim to be \"Dynamic\" on your resume</figcaption></figure><p>If you're thinking with portals, you may have already pieced together what we've done here: by naming the range, we can substitute any variable that'll support an array with the name of the range, AND by using that offset formula, we've just made it so that no matter what you throw into this first sheet, it gets added to the range. </p><p>This by itself is very cool, and very useful, but let's take it a step further and I'll show you how you can use this dynamic named range to make an \"idiot proof\" updater for a pivot table. </p><p>The first step is to of course make a pivot table, however, we're going to do something daring: a pivot table requires an array...and we've just created an array that's DYNAMIC. So, click insert, pivot table, and then when it asks you what you what you want in the table, tell it that you want to put powers in there (that's the name of my range) like so:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/image-12.png\" class=\"kg-image\"><figcaption>No one man should have all this power...</figcaption></figure><p>and boom:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/image-13.png\" class=\"kg-image\"><figcaption>Not for Villains</figcaption></figure><p>BUT IT DOESN'T END THERE FOLKS. As your range is dynamic, you can add whatever rows or columns to the first page as you wish, and then if you refresh your pivot table (right click, refresh) these changes will be reflected...watch</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/image-14.png\" class=\"kg-image\"><figcaption>Specifically for Villains</figcaption></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://res-4.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/image-15.png\" class=\"kg-image\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://res-5.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/image-16.png\" class=\"kg-image\"><figcaption>IT'S DYNAMIC!</figcaption></figure><p>So, now you've learned how to:</p><ul><li>Create a named dynamic range</li><li>Use the offset function to set a virtual cursor (this becomes exceedingly important if ever you decide you want to code for real).</li><li>Refresh a pivot table with information updated in the dynamic range. </li></ul><p>Next time, we'll take it up a notch, and remove any sort of thought needed to update these tables! </p><p>It's Munchin' Time, </p><p>-Snacks</p>","url":"https://hackersandslackers.com/dynamic-named-ranges-in-excel/","uuid":"b7ef3b91-ecfd-42ab-8288-d2de7d4ceb32","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b885ae7075b34075786e311"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736d6","title":"Importing Excel Datetimes Into Pandas, Part II","slug":"importing-excel-datetimes-into-pandas-part-2","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/04/excelpandas.jpg","excerpt":"Pandas and Excel Pt. 2","custom_excerpt":"Pandas and Excel Pt. 2","created_at_pretty":"13 August, 2018","published_at_pretty":"20 August, 2018","updated_at_pretty":"10 April, 2019","created_at":"2018-08-12T22:28:46.000-04:00","published_at":"2018-08-20T07:30:00.000-04:00","updated_at":"2019-04-10T00:47:31.000-04:00","meta_title":"Pandas and Excel Pt. 2 | Hackers And Slackers","meta_description":"Read date times from Excel files into a Pandas DataFrame. Utilize Python's Arrow and Toolz libraries to write a quick script for date extraction.","og_description":"Read date times from Excel files into a Pandas DataFrame. Utilize Python's Arrow and Toolz libraries to write a quick script for date extraction.","og_image":"https://hackersandslackers.com/content/images/2019/04/excelpandas-2.jpg","og_title":"Importing Excel Datetimes Into Pandas II","twitter_description":"Read date times from Excel files into a Pandas DataFrame. Utilize Python's Arrow and Toolz libraries to write a quick script for date extraction.","twitter_image":"https://hackersandslackers.com/content/images/2019/04/excelpandas-1.jpg","twitter_title":"Importing Excel Datetimes Into Pandas II","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Pandas","slug":"pandas","description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/pandasmerge.jpg","meta_description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","meta_title":"Pythons and Pandas | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Pandas","slug":"pandas","description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/pandasmerge.jpg","meta_description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","meta_title":"Pythons and Pandas | Hackers and Slackers","visibility":"public"},{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Code Snippet Corner","slug":"codesnippetcorner","description":"Real-world examples of Python being used to solve complex data problems, primarily using Jupyter notebooks.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o-1.jpg","meta_description":"Real-world examples of Python being used to solve complex data problems.","meta_title":"Python Code Snippet Corner","visibility":"public"},{"name":"#Code Snippet Corner","slug":"code-snippet-corner","description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o_o.jpg","meta_description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","meta_title":"Python Code Snippet Corner","visibility":"internal"}],"plaintext":"What if, like during my data import task a few months back, the dates & times\nare in separate columns?  This gives us a few new issues.  Let's import that\nExcel file!\n\nimport pandas as pd\nimport xlrd\nimport datetime\n\ndf = pd.read_excel(\"hasDatesAndTimes.xlsx\", sheet_name=\"Sheet1\")\n\nbook = xlrd.open_workbook(\"hasDatesAndTimes.xlsx\")\ndatemode = book.datemode\n\n\n\nAnd let's see that time variable!\n\ndf[\"Time\"]\n\n\nIndex\n Time\n 0\n 0.909907\n 1\n 0.909919\n 2\n 0.909931\n 3\n 0.909942\n 4\n 0.909954\n df[\"Time\"].map(lambda x: xlrd.xldate_as_tuple(x, datemode))\n\n\nSo far, so good....\n\ndf[\"Time\"].map(lambda x: datetime.datetime(*xlrd.xldate_as_tuple(x, \n                                              datemode)))\nValueError: year 0 is out of range\n\n\nAgh!  Plain datetime won't let us have 0 as our year.\n\nWe'll want two packages to fix this.  One is an awesome package for handling\ndates called arrow.  In order for arrow  to recognize what we want it to,\nthough, we'll need some more manipulations - I'll be using the pipe  function\nfrom toolz  in order to make that more readable.\n\nIndex\n Time\n 0\n (0, 0, 0, 21, 50, 16)\n 1\n (0, 0, 0, 21, 50, 17)\n 2\n (0, 0, 0, 21, 50, 18)\n 3\n (0, 0, 0, 21, 50, 19)\n 4\n (0, 0, 0, 21, 50, 20)\n Pipe lets us have a nice workflow where we just list the transformations we\nwant, and our value will be \"piped\" sequentially through each one.\n\nfns = [lambda x: xlrd.xldate_as_tuple(x, datemode),\n     lambda x: x[3:6],\n      lambda x: map(str, x),\n      lambda x: \"-\".join(x),\n       lambda x: arrow.get(x, \"H-m-s\"),\n       lambda x: x.format('HH:mm:ss')\n      ]\n\n\nLet's see a blow-by-blow of how one of our values gets transformed by that.\n\nfnRanges = [fns[:i+1] for i in range(len(fns))]\n[pipe(0.909907, *x) for x in fnRanges]\n\n[(0, 0, 0, 21, 50, 16),\n (21, 50, 16),\n <map at 0x7f105151af98>,\n '21-50-16',\n <Arrow [0001-01-01T21:50:16+00:00]>,\n '21:50:16']\n\n\nThe first function takes us from an Excel datetime to a datetime tuple.\n\nThe next extracts just the time variables.\n\nWe then map that all to a string (which shows up as nothing because map  is\nevaluated lazily).\n\nThen we put a dash between all those elements so it'll be easier to parse as a\ntime.\n\nThen arrow  consumes the value, with the format we specified.\n\nAnd finally gives us a neatly-formatted time, ready to be consumed by a\ndatabase!\n\nHelper Functions\ndef mapPipe(ser, fns):\n    return ser.map(lambda a: pipe(a, *fns),\n        na_action=\"ignore\" )\n\nmapPipe(df['Time'],\n   fns)\n\n\nIndex\n Time\n 0\n 21:50:16\n 1\n 21:50:17\n 2\n 21:50:18\n 3\n 21:50:19\n 4\n 21:50:20\n Dates are a bit easier - though the pipe  syntax is still helpful!\n\ndateFns = [lambda x: xlrd.xldate_as_tuple(x, datemode),\n      lambda x: arrow.get(*x),\n      lambda x: x.format('YYYY-MM-DD')\n      ]\nmapPipe(df['Date'],\n       dateFns)\n\n\nIndex\n Date\n 0\n 2018-08-12\n 1\n 2018-08-12\n 2\n 2018-08-12\n 3\n 2018-08-12\n 4\n 2018-08-12\n Put it all together....\n\n(df.assign(Date = mapPipe(df['Date'],\n       dateFns))\n   .assign(Time = mapPipe(df['Time'],\n       fns)))\n\n\nIndex\n Date\n Time\n 0\n 2018-08-12\n 21:50:16\n 1\n 2018-08-12\n 21:50:17\n 2\n 2018-08-12\n 21:50:18\n 3\n 2018-08-12\n 21:50:19\n 4\n 2018-08-12\n 21:50:20","html":"<p>What if, like during my data import task a few months back, the dates &amp; times are in separate columns?  This gives us a few new issues.  Let's import that Excel file!</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">import pandas as pd\nimport xlrd\nimport datetime\n\ndf = pd.read_excel(&quot;hasDatesAndTimes.xlsx&quot;, sheet_name=&quot;Sheet1&quot;)\n\nbook = xlrd.open_workbook(&quot;hasDatesAndTimes.xlsx&quot;)\ndatemode = book.datemode\n\n</code></pre>\n<!--kg-card-end: markdown--><p>And let's see that time variable!</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">df[&quot;Time&quot;]\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: html--><div class=\"tableContainer\">\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Index</th>\n      <th>Time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>0.909907</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>0.909919</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>0.909931</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>0.909942</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>0.909954</td>\n    </tr>\n  </tbody>\n</table>\n</div><!--kg-card-end: html--><!--kg-card-begin: markdown--><pre><code class=\"language-python\">df[&quot;Time&quot;].map(lambda x: xlrd.xldate_as_tuple(x, datemode))\n</code></pre>\n<!--kg-card-end: markdown--><p>So far, so good....</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">df[&quot;Time&quot;].map(lambda x: datetime.datetime(*xlrd.xldate_as_tuple(x, \n                                              datemode)))\nValueError: year 0 is out of range\n</code></pre>\n<!--kg-card-end: markdown--><p>Agh!  Plain datetime won't let us have 0 as our year.</p><p>We'll want two packages to fix this.  One is an awesome package for handling dates called <code>arrow</code>.  In order for <code>arrow</code> to recognize what we want it to, though, we'll need some more manipulations - I'll be using the <code>pipe</code> function from <code>toolz</code> in order to make that more readable.</p><!--kg-card-begin: html--><div class=\"tableContainer\">\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Index</th>\n      <th>Time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>(0, 0, 0, 21, 50, 16)</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>(0, 0, 0, 21, 50, 17)</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>(0, 0, 0, 21, 50, 18)</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>(0, 0, 0, 21, 50, 19)</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>(0, 0, 0, 21, 50, 20)</td>\n    </tr>\n  </tbody>\n</table>\n</div><!--kg-card-end: html--><p>Pipe lets us have a nice workflow where we just list the transformations we want, and our value will be \"piped\" sequentially through each one.</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">fns = [lambda x: xlrd.xldate_as_tuple(x, datemode),\n     lambda x: x[3:6],\n      lambda x: map(str, x),\n      lambda x: &quot;-&quot;.join(x),\n       lambda x: arrow.get(x, &quot;H-m-s&quot;),\n       lambda x: x.format('HH:mm:ss')\n      ]\n</code></pre>\n<!--kg-card-end: markdown--><p>Let's see a blow-by-blow of how one of our values gets transformed by that.</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">fnRanges = [fns[:i+1] for i in range(len(fns))]\n[pipe(0.909907, *x) for x in fnRanges]\n\n[(0, 0, 0, 21, 50, 16),\n (21, 50, 16),\n &lt;map at 0x7f105151af98&gt;,\n '21-50-16',\n &lt;Arrow [0001-01-01T21:50:16+00:00]&gt;,\n '21:50:16']\n</code></pre>\n<!--kg-card-end: markdown--><p>The first function takes us from an Excel datetime to a datetime tuple.</p><p>The next extracts just the time variables.</p><p>We then map that all to a string (which shows up as nothing because <code>map</code> is evaluated lazily).</p><p>Then we put a dash between all those elements so it'll be easier to parse as a time.</p><p>Then <code>arrow</code> consumes the value, with the format we specified.</p><p>And finally gives us a neatly-formatted time, ready to be consumed by a database!</p><h2 id=\"helper-functions\">Helper Functions</h2><!--kg-card-begin: markdown--><pre><code class=\"language-python\">def mapPipe(ser, fns):\n    return ser.map(lambda a: pipe(a, *fns),\n        na_action=&quot;ignore&quot; )\n\nmapPipe(df['Time'],\n   fns)\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: html--><div class=\"tableContainer\">\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Index</th>\n      <th>Time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>21:50:16</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>21:50:17</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>21:50:18</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>21:50:19</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>21:50:20</td>\n    </tr>\n  </tbody>\n</table>\n</div><!--kg-card-end: html--><p>Dates are a bit easier - though the <code>pipe</code> syntax is still helpful!</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">dateFns = [lambda x: xlrd.xldate_as_tuple(x, datemode),\n      lambda x: arrow.get(*x),\n      lambda x: x.format('YYYY-MM-DD')\n      ]\nmapPipe(df['Date'],\n       dateFns)\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: html--><div class=\"tableContainer\">\n    <table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Index</th>\n      <th>Date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>2018-08-12</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>2018-08-12</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>2018-08-12</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>2018-08-12</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>2018-08-12</td>\n    </tr>\n  </tbody>\n</table>\n</div><!--kg-card-end: html--><p>Put it all together....</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">(df.assign(Date = mapPipe(df['Date'],\n       dateFns))\n   .assign(Time = mapPipe(df['Time'],\n       fns)))\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: html--><div class=\"tableContainer\">\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Index</th>\n      <th>Date</th>\n      <th>Time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>2018-08-12</td>\n      <td>21:50:16</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>2018-08-12</td>\n      <td>21:50:17</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>2018-08-12</td>\n      <td>21:50:18</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>2018-08-12</td>\n      <td>21:50:19</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>2018-08-12</td>\n      <td>21:50:20</td>\n    </tr>\n  </tbody>\n</table>\n</div><!--kg-card-end: html-->","url":"https://hackersandslackers.com/importing-excel-datetimes-into-pandas-part-2/","uuid":"f106291a-af02-4b8a-87b4-7afe333a9548","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b70ecde0230162100a1daa5"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736d7","title":"I Owe My Job to Mr. Robot","slug":"i-owe-my-job-to-mr-robot","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/02/robot@2x.jpg","excerpt":"Entering the Dataverse.","custom_excerpt":"Entering the Dataverse.","created_at_pretty":"13 August, 2018","published_at_pretty":"14 August, 2018","updated_at_pretty":"14 February, 2019","created_at":"2018-08-13T17:30:12.000-04:00","published_at":"2018-08-14T08:00:00.000-04:00","updated_at":"2019-02-14T05:22:09.000-05:00","meta_title":"Entering the Dataverse | Hackers And Slackers","meta_description":"Throughout the course of my time as both the \"computer\" guy and a clinician, I instituted a series of projects  to make myself more efficient.","og_description":"Throughout the course of my time as both the \"computer\" guy and a clinician, I instituted a series of projects to make myself more efficient.","og_image":"https://hackersandslackers.com/content/images/2019/02/robot@2x.jpg","og_title":"I Owe My Job to Mr. Robot","twitter_description":"Throughout the course of my time as both the \"computer\" guy and a clinician, I instituted a series of projects to make myself more efficient.","twitter_image":"https://hackersandslackers.com/content/images/2019/02/robot@2x.jpg","twitter_title":"I Owe My Job to Mr. Robot","authors":[{"name":"Max Mileaf","slug":"snacks","bio":"One of three therapists in the known universe who knows how to use a computer. Finds meaning in highly protected data, in a cave, utilizing nothing but a box of scraps. ","profile_image":"https://hackersandslackers.com/content/images/2019/03/max2.jpg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Max Mileaf","slug":"snacks","bio":"One of three therapists in the known universe who knows how to use a computer. Finds meaning in highly protected data, in a cave, utilizing nothing but a box of scraps. ","profile_image":"https://hackersandslackers.com/content/images/2019/03/max2.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},"tags":[{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"}],"plaintext":"What's up data gang? If you've been reading along throughout this journey,\nyou'll realize that all of my posts have something in common (other than\nExcel...smartass), they all assume that you're already working with data...even\nif it's just cursory exposure. Well, every journey of a thousand worksheets\nbegins with a single lookup, and hopefully this story will help you position\nyourself to inner-join the fraternity of functions. \n\nFor the two of you who went out of the way to read our bios, you may have seen\nsomething interesting: I started out as a therapist...a job that does everything\nit can to avoid using hard data. You see, every clinician, no matter the\ndiscipline will tell you: \n\n1) The amount of paperwork that they need to complete is absolutely mind\nboggling (in fact, I had more paperwork doing mental health counseling than I've\never had at my desk job...which is almost entirely paperwork).\n2) Clinicians will do anything within their power to avoid doing said paperwork.\n3) They hate their electronic medical records (not their particular program, but\nthe very idea of having a system which makes things easier to track). \n\nThe issue with this Trifecta is that clinicians are paid and audited based on\ntheir notes, and as such, they've come up with the saying: \"If you didn't write\nit, it didn't happen\". With that being said, at every single clinical position\nI've ever held, I became the expert on our computer systems, as since I was\nyoung, I've always loved computers. As time went on, troubleshooting (or, let's\nbe honest...just explaining over and over again to deaf ears) computer issues\nbecame one of my essential job duties. After \"doing computers\" became a fact of\nlife, I was given access to our EMR's back-end (that is, where the data lives,\nas opposed to the front-end, which is what the user interacts with). \n\nUpon viewing this back-end data, I was ASTOUNDED with how inefficient our\nnotation was. Despite the fact that almost every clinician complained about\nhaving to do all their notes (and assessments), they were going out of their way \n to make documentation a more arduous process. It was at this moment that my\norigin story began, fixing these issues was akin to my parents being shot in\nfront of me by Joe Chill. \n\nOne thing to note is that at this time, I had never even opened Excel (that's\nhow disengaged the clinical world was from the \"business\" world), and I only had\na cursory understanding of databases and spreadsheets, stemming from an AP\ncomputer science course that I took in High School (shout out to the rest of the\nBrooklyn Technites!), and to give you an idea of the time frame here, I was a\nyear and change out of graduate school. Unfortunately, as I hear far too often,\nI was the victim of a string of horrifically bad math teachers that scared me\naway from anything that had to do with numbers all throughout college\n(interestingly, Greek letters I was just fine with...at the time, my brain\ndidn't connect that physics and inorganic chemistry were math), so I made it all\nthe way through grad school without ever taking a math class, let alone calculus\n(AP comp sci counts for an entire year of math...why I still thought I was bad\nat math now seems like lunacy).\n\nUntil, one faithful day I was given an interesting assignment at the very end of\nthe day: I could use our EMR to run a report that included every patient we had\nthat was given a specific test, but we needed a list of everyone who lacked this\nparticular test. I told my company (which as far as nonprofit clinical agencies\ngo, was actually fairly large) that I would see what I could do, and went home\nfor the day. \n\nThat night, I had DVR'ed the first season of Mr. Robot (I highly recommend\nseason 1), a show about a hacking. One thing I will say about the show is that\nit has quite possibly the ONLY realistic depiction of hacking in all of\nfiction...there's no warping into the machine to play a game of space invaders\nwhich unlocks the nastygram (read Batman vs. the Punisher to learn more about\nnastygrams), just the compiling of as much information as possible and then\nputting it all together, in fact, it illustrates that 90% of hacking is social\nengineering...which is why you should never give anyone your password (except\nme...of course). I then binged the entire first season that night, and realized\nthat I somehow understood the vast majority of the intricacies of the\nhack...almost like I spoke the same language. \n\nI came into the office the next day, and inspired by Mr. Robot, I asked a bunch\nof questions regarding the data that was available to us through the EMR, and I\nfound out that in addition to getting the list of people who had the test, I\ncould also get a list of everyone. Now, if another clinician got this far, they\nwould realize that with these two pieces of data, you could sort alphabetically\nand then just see manually who of the 12,000 people on one list weren't on the\nother, and that could probably have been a part time job for the rest of your\ndays, but I remembered the mission: Efficiency, of which to manually count was\nanathema. I then tried several search terms in google consisting of \"compare\"\nand \"list\" and after the second try, I found a tutorial for Vlookups (the irony\nof my exclusive use of index match when I have VLookup to thank for my future\ncareer isn't lost on me) and got to work. \n\nNow, with seasoned eyes, I realize that this is 12 seconds of work, write a\nquick index match and double click the lower  right corner of the cell) but at\nthis time I, and more importantly my company (comprised entirely of Luddites)\nfound it incredibly impressive and useful. \n\nImbued with a new sense of purpose, and the knowledge that I understood\ninstructions on the internet, I then began my quest to make things more\nefficient for my colleagues...billing it as \"if you use these tricks, you can\nsee your patients for longer\" (which by all means, is true). As trite as it is\nto say, I was honestly hoping to have the other clinicians work smarter...and\nnot harder. \n\n\nThroughout the course my my time as both the \"computer\" guy and a clinician, I\ninstituted a series of projects (think auto-populated note templates,\nproductivity trackers, and a nifty tool that showed you only the people who you\nhaven't seen in a given month so that you can call them), all of which I had the\ntime to do because I too was using these tools to make myself more efficient.\nOnce the time came when I had essentially automated my paperwork, my company\nbegan entrusting me with more data, and kept coming up with increasingly complex\nproblems to solve, until they realized that I was essentially building these\ntools full-time. It was at this point where I made the decision to ask if they\ncould build an analyst position for me that would allow me to see all of our\ndata, track it, trend it, and continue making new tools to help us hit our\nperformance goals (we in the biz call these Key Performance Indicators: KPIs),\nand they accepted and I moved into my first data analyst job. \n\n\nOnce I had roughly a year under my belt, I could now begin applying to jobs with\nthe data analyst skill-set (who knew that the first thing to come to mind when\nyou see \"Therapist\" isn't \"computer nerd!?) and indeed although I stayed in\nHealthcare, I moved onto companies that had more robust data needs, and more\ntools I could use to do the job, and that's where I am today...all because I was\ninspired by a morphine addicted sociopath who happened to also be a computer\nwhiz. \n\nSo, why did I take the time to write this story? Despite how cocky I can get,\neven I'm not at the level where I think strangers on the internet would want to\nread my life story. No, I'm writing this as a general template to how you can\nleverage any existing skill-set into a job working with data, by following a few\nsimple guidelines: \n\n\n1) Math isn't a skill, it's a way of thinking. Despite believing that math\nwasn't for me, after essentially doing \"math\" for the last decade or so I\nrealized that you don't need to be good at \"arithmetic\" (the actual solving of\nequations and rote calculation) in order to solve math problems, you just need\nto be the type of person who likes to find solutions and/or find flaws in\nthings. There's a reason that statistically, math majors make the best Lawyers:\nboth jobs are essentially about finding flaws, and patching over them (or using\nthem to your advantage). If you're the type of person who, instead of giving up\nwhen faced with a problem, you try to find a solution, you're a math\nperson...even if you don't know your times tables (like myself!).\n\n2) EVERY company can benefit from data, especially those that don't think they\nneed to. If your company doesn't have a data team, then they're straight up\nleaving money on the table in terms of exponential increases in efficiency. \n\n3) The corollary to number 2 is that the less a company utilizes data to their\nadvantage, the more impressive your small contribution will be. For example, I\nbuilt my entire career on being the only person in my company who knew how to do\na lookup (there were almost 5000 people at my company by the way). Use this to\nyour advantage. One thing that's great about data is that it allows you to\nDIRECTLY show how you're adding value to your company.\n\n4) This is perhaps the most important lesson I can impart on you (and indeed, I\nimpart it on my students as well...I'm still a counseling professor in my\ndowntime): It's impossible have all of the tools of a trade at your disposal at\nall times. One who has \"mastered\" their field (whatever their field may be)\nisn't the person who knows everything, it's the person who understands where to\nlook, and how to apply these instructions. No computer programmer knows all of\nthe functions and methods of a programming language off the top of their head,\nbut they do know how to read the documentation, similarly, a doctor doesn't have\nevery medication or condition memorized (at least, not after they've taken their\nStep-1) but they do know how to take test results and lookup the best cause of\naction . As such, when building your skills, focus on understanding the\ndocumentation, rather than trying to memorize all of the functions (because, as\nwe've already covered, there are about 20,000 that you'll never use).\n\nSo, with those four concepts in mind, if you've been wanting to take the data\nplunge, I implore you to identify and area within your company or team that you\nknow can be improved once the issue is identified, then be the person who\nidentifies the issue, and see if you can fix it. You never know, a chef that can\npivot out their ingredient list to cut costs and improve quality may be able to\nleverage that, and HR person can see the time to hire for particular positions\nand focus attention towards those jobs that are hard to fill, and even a\nstand-up comedian can quantify their laughs/joke and build their set that way. \n\nData is everywhere, you just need to learn to see it. \n\n- Snacksfuscious \n\nP.S. for my next post, I'm going to try something different. Did you know that\nby tweaking your computer a little bit, you can crunch numbers even faster? Next\ntime on Adventures in Excel: Hardware.","html":"<p>What's up data gang? If you've been reading along throughout this journey, you'll realize that all of my posts have something in common (other than Excel...smartass), they all assume that you're already working with data...even if it's just cursory exposure. Well, every journey of a thousand worksheets begins with a single lookup, and hopefully this story will help you position yourself to inner-join the fraternity of functions. </p><p>For the two of you who went out of the way to read our bios, you may have seen something interesting: I started out as a therapist...a job that does everything it can to avoid using hard data. You see, every clinician, no matter the discipline will tell you: </p><p>1) The amount of paperwork that they need to complete is absolutely mind boggling (in fact, I had more paperwork doing mental health counseling than I've ever had at my desk job...which is almost entirely paperwork).<br>2) Clinicians will do anything within their power to avoid doing said paperwork.<br>3) They hate their electronic medical records (not their particular program, but the very idea of having a system which makes things easier to track). </p><p>The issue with this Trifecta is that clinicians are paid and audited based on their notes, and as such, they've come up with the saying: \"If you didn't write it, it didn't happen\". With that being said, at every single clinical position I've ever held, I became the expert on our computer systems, as since I was young, I've always loved computers. As time went on, troubleshooting (or, let's be honest...just explaining over and over again to deaf ears) computer issues became one of my essential job duties. After \"doing computers\" became a fact of life, I was given access to our EMR's back-end (that is, where the data lives, as opposed to the front-end, which is what the user interacts with). </p><p>Upon viewing this back-end data, I was ASTOUNDED with how inefficient our notation was. Despite the fact that almost every clinician complained about having to do all their notes (and assessments), they were going <strong><em>out of their way</em></strong> to make documentation a more arduous process. It was at this moment that my origin story began, fixing these issues was akin to my parents being shot in front of me by Joe Chill. </p><p>One thing to note is that at this time, I had never even opened Excel (that's how disengaged the clinical world was from the \"business\" world), and I only had a cursory understanding of databases and spreadsheets, stemming from an AP computer science course that I took in High School (shout out to the rest of the Brooklyn Technites!), and to give you an idea of the time frame here, I was a year and change out of graduate school. Unfortunately, as I hear far too often, I was the victim of a string of horrifically bad math teachers that scared me away from anything that had to do with numbers all throughout college (interestingly, Greek letters I was just fine with...at the time, my brain didn't connect that physics and inorganic chemistry <strong>were </strong>math), so I made it all the way through grad school without ever taking a math class, let alone calculus (AP comp sci counts for an entire year of math...why I still thought I was bad at math now seems like lunacy).</p><p>Until, one faithful day I was given an <em>interesting </em>assignment at the very end of the day: I could use our EMR to run a report that included every patient we had that was given a specific test, but we needed a list of everyone who lacked this particular test. I told my company (which as far as nonprofit clinical agencies go, was actually fairly large) that I would see what I could do, and went home for the day. </p><p>That night, I had DVR'ed the first season of Mr. Robot (I highly recommend season 1), a show about a hacking. One thing I will say about the show is that it has quite possibly the ONLY realistic depiction of hacking in all of fiction...there's no warping into the machine to play a game of space invaders which unlocks the nastygram (read Batman vs. the Punisher to learn more about nastygrams), just the compiling of as much information as possible and then putting it all together, in fact, it illustrates that 90% of hacking is social engineering...which is why you should never give anyone your password (except me...of course). I then binged the entire first season that night, and realized that I somehow understood the vast majority of the intricacies of the hack...almost like I spoke the same <em>language. </em></p><p>I came into the office the next day, and inspired by Mr. Robot, I asked a bunch of questions regarding the data that was available to us through the EMR, and I found out that in addition to getting the list of people who had the test, I could also get a list of <em>everyone. </em>Now, if another clinician got this far, they would realize that with these two pieces of data, you could sort alphabetically and then just see manually who of the 12,000 people on one list weren't on the other, and that could probably have been a part time job for the rest of your days, but I remembered the mission: Efficiency, of which to manually count was anathema. I then tried several search terms in google consisting of \"compare\" and \"list\" and after the second try, I found a tutorial for Vlookups (the irony of my exclusive use of index match when I have VLookup to thank for my future career isn't lost on me) and got to work. </p><p>Now, with seasoned eyes, I realize that this is 12 seconds of work, write a quick index match and double click the lower  right corner of the cell) but at this time I, and more importantly my company (comprised entirely of Luddites) found it incredibly impressive and useful. </p><p>Imbued with a new sense of purpose, and the knowledge that I understood instructions on the internet, I then began my quest to make things more efficient for my colleagues...billing it as \"if you use these tricks, you can see your patients for longer\" (which by all means, is true). As trite as it is to say, I was honestly hoping to have the other clinicians work smarter...and not harder. <br></p><p>Throughout the course my my time as both the \"computer\" guy and a clinician, I instituted a series of projects (think auto-populated note templates, productivity trackers, and a nifty tool that showed you only the people who you haven't seen in a given month so that you can call them), all of which I had the time to do because I too was using these tools to make myself more efficient. Once the time came when I had essentially automated my paperwork, my company began entrusting me with more data, and kept coming up with increasingly complex problems to solve, until they realized that I was essentially building these tools full-time. It was at this point where I made the decision to ask if they could build an analyst position for me that would allow me to see all of our data, track it, trend it, and continue making new tools to help us hit our performance goals (we in the biz call these Key Performance Indicators: KPIs), and they accepted and I moved into my first data analyst job. <br></p><p>Once I had roughly a year under my belt, I could now begin applying to jobs with the data analyst skill-set (who knew that the first thing to come to mind when you see \"Therapist\" isn't \"computer nerd!?) and indeed although I stayed in Healthcare, I moved onto companies that had more robust data needs, and more tools I could use to do the job, and that's where I am today...all because I was inspired by a morphine addicted sociopath who happened to also be a computer whiz. </p><p>So, why did I take the time to write this story? Despite how cocky I can get, even I'm not at the level where I think strangers on the internet would want to read my life story. No, I'm writing this as a general template to how you can leverage any existing skill-set into a job working with data, by following a few simple guidelines: <br></p><p>1) Math isn't a skill, it's a way of thinking. Despite believing that math wasn't for me, after essentially doing \"math\" for the last decade or so I realized that you don't need to be good at \"arithmetic\" (the actual solving of equations and rote calculation) in order to solve math problems, you just need to be the type of person who likes to find solutions and/or find flaws in things. There's a reason that statistically, math majors make the best Lawyers: both jobs are essentially about finding flaws, and patching over them (or using them to your advantage). If you're the type of person who, instead of giving up when faced with a problem, you try to find a solution, you're a math person...even if you don't know your times tables (like myself!).</p><p>2) EVERY company can benefit from data, especially those that don't think they need to. If your company doesn't have a data team, then they're straight up leaving money on the table in terms of exponential increases in efficiency. </p><p>3) The corollary to number 2 is that the less a company utilizes data to their advantage, the more impressive your small contribution will be. For example, I built my entire career on being the only person in my company who knew how to do a lookup (there were almost 5000 people at my company by the way). Use this to your advantage. One thing that's great about data is that it allows you to DIRECTLY show how you're adding value to your company.</p><p>4) This is perhaps the most important lesson I can impart on you (and indeed, I impart it on my students as well...I'm still a counseling professor in my downtime): It's impossible have all of the tools of a trade at your disposal at all times. One who has \"mastered\" their field (whatever their field may be) isn't the person who knows everything, it's the person who understands where to look, and how to apply these instructions. No computer programmer knows all of the functions and methods of a programming language off the top of their head, but they do know how to read the documentation, similarly, a doctor doesn't have every medication or condition memorized (at least, not after they've taken their Step-1) but they do know how to take test results and lookup the best cause of action . As such, when building your skills, focus on understanding the documentation, rather than trying to memorize all of the functions (because, as we've already covered, there are about 20,000 that you'll never use).</p><p>So, with those four concepts in mind, if you've been wanting to take the data plunge, I implore you to identify and area within your company or team that you know can be improved once the issue is identified, then be the person who identifies the issue, and see if you can fix it. You never know, a chef that can pivot out their ingredient list to cut costs and improve quality may be able to leverage that, and HR person can see the time to hire for particular positions and focus attention towards those jobs that are hard to fill, and even a stand-up comedian can quantify their laughs/joke and build their set that way. </p><p>Data is everywhere, you just need to learn to see it. </p><p><em>- Snacksfuscious </em></p><p>P.S. for my next post, I'm going to try something different. Did you know that by tweaking your computer a little bit, you can crunch numbers even faster? Next time on Adventures in Excel: Hardware. </p>","url":"https://hackersandslackers.com/i-owe-my-job-to-mr-robot/","uuid":"0b6d4f0c-a369-4cfd-a21d-ccb6078d42fd","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b71f8648948964601ffb293"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736d3","title":"Importing Excel Datetimes Into Pandas, Part I","slug":"importing-excel-dates-times-into-pandas","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/04/excelpandaspart1-1.jpg","excerpt":"Pandas & Excel, Part 1.","custom_excerpt":"Pandas & Excel, Part 1.","created_at_pretty":"13 August, 2018","published_at_pretty":"13 August, 2018","updated_at_pretty":"10 April, 2019","created_at":"2018-08-12T20:21:40.000-04:00","published_at":"2018-08-13T07:30:00.000-04:00","updated_at":"2019-04-09T23:40:15.000-04:00","meta_title":"Pandas & Excel, Part 1 | Hackers And Slackers","meta_description":"Import dates & times from Excel .xlsx files into Pandas!","og_description":"Import dates & times from Excel .xlsx files into Pandas!","og_image":"https://hackersandslackers.com/content/images/2019/04/excelpandaspart1-1-2.jpg","og_title":"Importing Excel Datetimes Into Pandas","twitter_description":"Import dates & times from Excel .xlsx files into Pandas!","twitter_image":"https://hackersandslackers.com/content/images/2019/04/excelpandaspart1-1-1.jpg","twitter_title":"Importing Excel Datetimes Into Pandas","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Pandas","slug":"pandas","description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/pandasmerge.jpg","meta_description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","meta_title":"Pythons and Pandas | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Pandas","slug":"pandas","description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/pandasmerge.jpg","meta_description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","meta_title":"Pythons and Pandas | Hackers and Slackers","visibility":"public"},{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Code Snippet Corner","slug":"codesnippetcorner","description":"Real-world examples of Python being used to solve complex data problems, primarily using Jupyter notebooks.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o-1.jpg","meta_description":"Real-world examples of Python being used to solve complex data problems.","meta_title":"Python Code Snippet Corner","visibility":"public"},{"name":"#Code Snippet Corner","slug":"code-snippet-corner","description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o_o.jpg","meta_description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","meta_title":"Python Code Snippet Corner","visibility":"internal"}],"plaintext":"Different file formats are different!  For all kinds of reasons!\n\nA few months back, I had to import some Excel files into a database. In this\nprocess I learned so much about the delightfully unique way Excel stores dates &\ntimes!\n\nThe basic datetime will be a decimal number, like 43324.909907407404.  The\nnumber before the decimal is the day, the number afterwards is the time.  So\nfar, so good - this is pretty common for computers.  The date is often the\nnumber of days past a certain date, and the time is the number of seconds.\n\nSo, let's load our excel sheet!  Pandas of course has a painless way of doing\nthis.\n\nimport pandas as pd\n\ndfRaw = pd.read_excel(\"hasDates.xlsx\", sheet_name=\"Sheet1\")\n\ndfRaw[\"dateTimes\"]\n\n\n0\n 0\n 43324.909907\n 1\n 43324.909919\n 2\n 43324.909931\n 3\n 43324.909942\n 4\n 43324.909954\n Sadly, we can't yet convert these.  Different Excel files start at different\ndates, and you'll get a very wrong result if you use the wrong one.  Luckily,\nthere are tools that'll go into the file and extract what we need!  Enter xlrd:\n\nimport xlrd\n\nbook = xlrd.open_workbook(\"hasDates.xlsx\")\ndatemode = book.datemode\n\n\nxlrd  also has a handy function for turning those dates into a datetime  tuple\nthat'll play nicely with Python.\n\ndfRaw[\"dateTimes\"].map(lambda x: \n          xlrd.xldate_as_tuple(x, datemode))\n\n\n0\n 0\n (2018, 8, 12, 21, 50, 16)\n 1\n (2018, 8, 12, 21, 50, 17)\n 2\n (2018, 8, 12, 21, 50, 18)\n 3\n (2018, 8, 12, 21, 50, 19)\n 4\n (2018, 8, 12, 21, 50, 20)\n And once we've got that, simple enough to convert to proper datetimes!\n\nimport datetime\n\ndfRaw[\"dateTimes\"].map(lambda x: \n          datetime.datetime(*xlrd.xldate_as_tuple(x, \n                                                  datemode)))\n\n\n0\n 0\n 2018-08-12 21:50:16\n 1\n 2018-08-12 21:50:17\n 2\n 2018-08-12 21:50:18\n 3\n 2018-08-12 21:50:19\n 4\n 2018-08-12 21:50:20\n Stick around for Part 2, where we look at some messier situations.","html":"<p>Different file formats are different!  For all kinds of reasons!</p><p>A few months back, I had to import some Excel files into a database. In this process I learned so much about the delightfully unique way Excel stores dates &amp; times!  </p><p>The basic datetime will be a decimal number, like <code>43324.909907407404</code>.  The number before the decimal is the day, the number afterwards is the time.  So far, so good - this is pretty common for computers.  The date is often the number of days past a certain date, and the time is the number of seconds.  </p><p>So, let's load our excel sheet!  Pandas of course has a painless way of doing this.</p><pre><code class=\"language-python\">import pandas as pd\n\ndfRaw = pd.read_excel(&quot;hasDates.xlsx&quot;, sheet_name=&quot;Sheet1&quot;)\n\ndfRaw[&quot;dateTimes&quot;]\n</code></pre>\n<div class=\"tableContainer\">\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>43324.909907</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>43324.909919</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>43324.909931</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>43324.909942</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>43324.909954</td>\n    </tr>\n  </tbody>\n</table>\n</div><p>Sadly, we can't yet convert these.  Different Excel files start at different dates, and you'll get a very wrong result if you use the wrong one.  Luckily, there are tools that'll go into the file and extract what we need!  Enter <code>xlrd</code>:</p><pre><code class=\"language-python\">import xlrd\n\nbook = xlrd.open_workbook(&quot;hasDates.xlsx&quot;)\ndatemode = book.datemode\n</code></pre>\n<p><code>xlrd</code> also has a handy function for turning those dates into a <code>datetime</code> tuple that'll play nicely with Python.</p><pre><code class=\"language-python\">dfRaw[&quot;dateTimes&quot;].map(lambda x: \n          xlrd.xldate_as_tuple(x, datemode))\n</code></pre>\n<div class=\"tableContainer\">\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>(2018, 8, 12, 21, 50, 16)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>(2018, 8, 12, 21, 50, 17)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>(2018, 8, 12, 21, 50, 18)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>(2018, 8, 12, 21, 50, 19)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>(2018, 8, 12, 21, 50, 20)</td>\n    </tr>\n  </tbody>\n</table>\n</div><p>And once we've got that, simple enough to convert to proper datetimes!</p><pre><code class=\"language-python\">import datetime\n\ndfRaw[&quot;dateTimes&quot;].map(lambda x: \n          datetime.datetime(*xlrd.xldate_as_tuple(x, \n                                                  datemode)))\n</code></pre>\n<div class=\"tableContainer\">\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2018-08-12 21:50:16</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2018-08-12 21:50:17</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2018-08-12 21:50:18</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2018-08-12 21:50:19</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2018-08-12 21:50:20</td>\n    </tr>\n  </tbody>\n</table>\n</div><p>Stick around for Part 2, where we look at some messier situations.</p>","url":"https://hackersandslackers.com/importing-excel-dates-times-into-pandas/","uuid":"727f6571-8ca4-4abc-b278-c7517cdaa29b","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b70cf140230162100a1da9b"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736cb","title":"Active-X Gonna Give it to Ya","slug":"excel-named-ranges-and-the-active-xs-who-love-them","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/08/dmx@2x.jpg","excerpt":"Excel Named Ranges and the Active Xs who Love Them.","custom_excerpt":"Excel Named Ranges and the Active Xs who Love Them.","created_at_pretty":"10 August, 2018","published_at_pretty":"10 August, 2018","updated_at_pretty":"02 February, 2019","created_at":"2018-08-10T11:25:48.000-04:00","published_at":"2018-08-10T14:19:22.000-04:00","updated_at":"2019-02-02T03:46:01.000-05:00","meta_title":"Excel Named Ranges and Active Xs | Hackers and Slackers","meta_description":"Excel offers the ability to \"name\" a particular range (or \"collection of cells\"). Learn Named Ranges and the Active Xs who Love Them.","og_description":"Excel offers the ability to \"name\" a particular range (or \"collection of cells\"). Learn Named Ranges and the Active Xs who Love Them.","og_image":"https://hackersandslackers.com/content/images/2018/08/dmx@2x.jpg","og_title":"Excel Named Ranges and the Active Xs who Love Them","twitter_description":"Excel offers the ability to \"name\" a particular range (or \"collection of cells\"). Learn Named Ranges and the Active Xs who Love Them.","twitter_image":"https://hackersandslackers.com/content/images/2018/08/dmx@2x.jpg","twitter_title":"Excel Named Ranges and the Active Xs who Love Them","authors":[{"name":"Max Mileaf","slug":"snacks","bio":"One of three therapists in the known universe who knows how to use a computer. Finds meaning in highly protected data, in a cave, utilizing nothing but a box of scraps. ","profile_image":"https://hackersandslackers.com/content/images/2019/03/max2.jpg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Max Mileaf","slug":"snacks","bio":"One of three therapists in the known universe who knows how to use a computer. Finds meaning in highly protected data, in a cave, utilizing nothing but a box of scraps. ","profile_image":"https://hackersandslackers.com/content/images/2019/03/max2.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},"tags":[{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},{"name":"#Adventures in Excel","slug":"adventures-in-excel","description":"Excel secrets and magic. The kind of industry knowledge that could put financial analysts out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"internal"}],"plaintext":"Hi there dear reader, we've now reached a crossroads in your ability to use\nExcel as a means of data analysis. If you've been following along, you've\nlearned how to use basically every tool that an Excel analyst would need to have\nin the front of their minds. For those just joining us, these tools are as\nfollows: \n\n * Pivot Tables (both the report layout and the tabular layout)\n * Lookup Functions\n * IF + AND + OR statements \n * And the combination of these three tools (and if you're particularly\n   efficient, you may have dabbled in some VBA here and there)\n\nHowever, if you have functioning vision (and once you've generated 10,000 hours\nworth of pivot tables and lookups...you may not need to see anymore), you may\nnotice that Excel has about 20,000 more buttons that you've never interacted\nwith! Any reasonable individual would assume that you must be missing\nsomething...but we're not reasonable...we're ANALYSTS. \n\nTo solve this puzzle, I ask you to think back to our discussion on databases,\nand how they quickly grow unwieldy: deleting code will often cause significantly\nmore problems than just leaving the code in there and hoping no one wants to use\nit (have you ever glitched through a wall while playing a video-game only to see\na half designed level...that's something that the dev team didn't have time to\nfinish!)\n\nOne thing to remember is that the proto-version of Excel was one of the very\nfirst programs available on the personal computer (that would be VisiCalc for\nthe Apple II if you're the type of person who's into esoteric computer trivia)\nand it revolutionized the world...of accounting. After Windows overtook Apple in\nthe PC department, Excel soon followed, and because it was the only game in\ntown, it needed to do any calculation related task that the user-base (which at\nthis time didn't include everyone) came up with. \n\nIf you've ever taken a computer programming class, this may sound familiar, in\nthat it's the exact same design methodology as the programming language Java.\nJava was designed so that you could code ANYTHING on it and it would run on ANY\nplatform. However, the downside of this is that with the exception of a small\nset of things that Java does pretty well, coding in Java quickly gets miserable,\nit's slow as molasses, and in case you haven't noticed, your Java applet needs\nto update whenever anyone in the world thinks of a new idea (seriously, check\nthe lower right hand corner of your screen, an update is pending right now!)\n\nSo now that this entertaining history lesson is over, let's leverage a few of\nthose tools that our ancestors left us in order to make our (or more\nimportantly, an end-user's) life easier. \n\nThe first of these functions that I care to talk about is the \"naming of\nranges\". Back in the day, Excel wouldn't let you open up two workbooks at the\nsame time, making it difficult and annoying to lookup between worksheets\n(granted, I'd argue that best practice is that if you're planning on leaving\nthose formulas on your worksheet, that you paste the source data into a new\nworksheet in your workbook or risk the breaking of your links). In order to make\nboth inter and intra worksheet lookups and formulas easier, Excel offers the\nability to \"name\" a particular range (or \"collection of cells\"...the concept of\na range becomes much more important if you're coding VBA). For example, here I\nhave a list of random names: \n\nTotally Random NamesNow, if I were to write a formula that would involve these\nnames (such as finding out where DMX is hiding) I would probably just use the\nlocation of the range (A:A, or $A$2:$A$8 if you're an absolute kinda person).\nHOWEVER, I can also bless this column with a name.   \n\nTo do this, highlight the row or column, click formulas up top, and then go to\n\"Define Name\"\n\nNaming a RangeThe interface automatically takes the first cell and assumes that\nyou want it to be the name of the range (NO SPACES!) but I like to keep things\nto a single word, so let's call this \"Names\", and hit OK. \n\nWhat you've now done is transformed anything in column A on sheet 1 of this\nworkbook into a monolith known as \"Names\". While this sounds unimpressive on\nit's own (what is a name?) it comes in handy in two ways. \n\n1) If you're ever writing a formula that refers to column A, you can now just\ntype \"Names\" instead, no matter what sheet the formula starts in, as long as\nit's in the workbook (which saves you a ton of time, and makes it so that you\ndon't need to click back to sheet 1 to select column A or to type 'Sheet 1!'A:A\nwhich you'll almost certainly screw up (In fact, that's probably wrong). For\nexample, let's create a bunch of extra sheets to complicate things, and then try\nand find DMX. \n\nThe real question is...what IS he going to give you?The utility there is pretty\nevident, however, there's an even more useful reason for naming a range, and it\ninvolves another one of Excel's functions...the active-X controls. Plopping\nthese controls into a workbook allows someone who calls tech support when their\ncomputer crashes to read your data...and as such, represent an important albeit\nun-enjoyable part of the job. \n\nTo drop one of these into your worksheet, first go to developer (which, as a\nperson who's made it this far, I assume you've enabled), then insert (the cool\ninsert, not the one for pleebs), and then active-X control (I generally use the\ncombo box...and no, I don't know what it's a combination of). Check it out: \n\nIf your coworker doesn't have developer mode in their ribbon, RunYou'll then be\nasked to \"draw\" the box, generally you want it to be roughly the size of two or\nthree cells. Once that's done, it'll give you a seemingly normal drop-down box,\nbut now, let's click properties to see where the magic happens. \n\nSeen here: MagicNow, if you're interested, you can look up what all this stuff\nmeans, but for most people, the only things that matter are: List Fill Range,\nand  maybe linked cell.\n\nThe list fill range should be populated with what you want the drop-down to say,\nand because you already named a range...all you gotta do is type that in, and\nit'll gobble up anything you type into the range you defined. \n\nThe linked cell (above list fill range) is a cell that you want to export the\ndata from this cell into so that it can be interacted with by regular Excel\nstuff (like formulae), the cool kids will put that underneath the combo box so\nyou can't see it, but for the sake of clarity, I'll show you how this works (the\nlinked cell is G2):\n\nFirst X out of the properties window, then un-click \"design mode\"\n\nThe list fillThe linked cellAs an added bonus, you can type in the first few\nletters of one of those names, and it'll auto-populate. \n\nThe coup-de-grace is that you can now name cell G2 and you've essentially\ncreated a dynamic variable that someone can choose that can be shoved into\nformulae...and I hope you can see how this might be useful if you were building\nsay...a report that checks the values associated with a particular name or ID\n(and you want to gently nudge someone reading your data into selecting only the\nvalues you have data for). \n\nCongrats, you're now a step closer to sharing the fruit of your knowledge with\nthe populace...and by using these tools, you don't need to share that knowledge\nwith the very same populace (they won't be paying attention anyways), and that\nmy friend, is how the world goes round. \n\n-Snactive-X","html":"<p>Hi there dear reader, we've now reached a crossroads in your ability to use Excel as a means of data analysis. If you've been following along, you've learned how to use basically every tool that an Excel analyst would need to have in the front of their minds. For those just joining us, these tools are as follows: </p><ul><li>Pivot Tables (both the report layout and the tabular layout)</li><li>Lookup Functions</li><li>IF + AND + OR statements </li><li>And the combination of these three tools (and if you're particularly efficient, you may have dabbled in some VBA here and there)</li></ul><p>However, if you have functioning vision (and once you've generated 10,000 hours worth of pivot tables and lookups...you may not need to see anymore), you may notice that Excel has about 20,000 more buttons that you've never interacted with! Any reasonable individual would assume that you must be missing something...but we're not reasonable...we're ANALYSTS. </p><p>To solve this puzzle, I ask you to think back to our discussion on databases, and how they quickly grow unwieldy: deleting code will often cause significantly more problems than just leaving the code in there and hoping no one wants to use it (have you ever glitched through a wall while playing a video-game only to see a half designed level...that's something that the dev team didn't have time to finish!)</p><p>One thing to remember is that the proto-version of Excel was one of the very first programs available on the personal computer (that would be VisiCalc for the Apple II if you're the type of person who's into esoteric computer trivia) and it revolutionized the world...of accounting. After Windows overtook Apple in the PC department, Excel soon followed, and because it was the only game in town, it needed to do any calculation related task that the user-base (which at this time didn't include <em>everyone) </em>came up with. </p><p>If you've ever taken a computer programming class, this may sound familiar, in that it's the exact same design methodology as the programming language Java. Java was designed so that you could code ANYTHING on it and it would run on ANY platform. However, the downside of this is that with the exception of a small set of things that Java does pretty well, coding in Java quickly gets miserable, it's slow as molasses, and in case you haven't noticed, your Java applet needs to update whenever anyone in the world thinks of a new idea (seriously, check the lower right hand corner of your screen, an update is pending right now!)</p><p>So now that this entertaining history lesson is over, let's leverage a few of those tools that our ancestors left us in order to make our (or more importantly, an end-user's) life easier. </p><p>The first of these functions that I care to talk about is the \"naming of ranges\". Back in the day, Excel wouldn't let you open up two workbooks at the same time, making it difficult and annoying to lookup between worksheets (granted, I'd argue that best practice is that if you're planning on leaving those formulas on your worksheet, that you paste the source data into a new worksheet in your workbook or risk the breaking of your links). In order to make both inter and intra worksheet lookups and formulas easier, Excel offers the ability to \"name\" a particular range (or \"collection of cells\"...the concept of a range becomes much more important if you're coding VBA). For example, here I have a list of random names: </p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/image.png\" class=\"kg-image\"><figcaption>Totally Random Names</figcaption></figure><p>Now, if I were to write a formula that would involve these names (such as finding out where DMX is hiding) I would probably just use the location of the range (A:A, or $A$2:$A$8 if you're an absolute kinda person). HOWEVER, I can also bless this column with a name.   </p><p>To do this, highlight the row or column, click formulas up top, and then go to \"Define Name\"</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/image-1.png\" class=\"kg-image\"><figcaption>Naming a Range</figcaption></figure><p>The interface automatically takes the first cell and assumes that you want it to be the name of the range (NO SPACES!) but I like to keep things to a single word, so let's call this \"Names\", and hit OK. </p><p>What you've now done is transformed anything in column A on sheet 1 of this workbook into a monolith known as \"Names\". While this sounds unimpressive on it's own (what is a name?) it comes in handy in two ways. </p><p>1) If you're ever writing a formula that refers to column A, you can now just type \"Names\" instead, no matter what sheet the formula starts in, as long as it's in the workbook (which saves you a ton of time, and makes it so that you don't need to click back to sheet 1 to select column A or to type 'Sheet 1!'A:A which you'll almost certainly screw up (In fact, that's probably wrong). For example, let's create a bunch of extra sheets to complicate things, and then try and find DMX. </p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/image-2.png\" class=\"kg-image\"><figcaption>The real question is...what IS he going to give you?</figcaption></figure><p>The utility there is pretty evident, however, there's an even more useful reason for naming a range, and it involves another one of Excel's functions...the active-X controls. Plopping these controls into a workbook allows someone who calls tech support when their computer crashes to read your data...and as such, represent an important albeit un-enjoyable part of the job. </p><p>To drop one of these into your worksheet, first go to developer (which, as a person who's made it this far, I assume you've enabled), then insert (the cool insert, not the one for pleebs), and then active-X control (I generally use the combo box...and no, I don't know what it's a combination of). Check it out: </p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/image-3.png\" class=\"kg-image\"><figcaption>If your coworker doesn't have developer mode in their ribbon, Run</figcaption></figure><p>You'll then be asked to \"draw\" the box, generally you want it to be roughly the size of two or three cells. Once that's done, it'll give you a seemingly normal drop-down box, but now, let's click properties to see where the magic happens. </p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/image-4.png\" class=\"kg-image\"><figcaption>Seen here: Magic</figcaption></figure><p>Now, if you're interested, you can look up what all this stuff means, but for most people, the only things that matter are: List Fill Range, and<em> maybe </em>linked cell.</p><p>The list fill range should be populated with what you want the drop-down to say, and because you already named a range...all you gotta do is type that in, and it'll gobble up anything you type into the range you defined. </p><p>The linked cell (above list fill range) is a cell that you want to export the data from this cell into so that it can be interacted with by regular Excel stuff (like formulae), the cool kids will put that underneath the combo box so you can't see it, but for the sake of clarity, I'll show you how this works (the linked cell is G2):</p><p>First X out of the properties window, then un-click \"design mode\"</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-4.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/image-5.png\" class=\"kg-image\"><figcaption>The list fill</figcaption></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/image-6.png\" class=\"kg-image\"><figcaption>The linked cell</figcaption></figure><p>As an added bonus, you can type in the first few letters of one of those names, and it'll auto-populate. </p><p>The coup-de-grace is that you can now name cell G2 and you've essentially created a dynamic variable that someone can choose that can be shoved into formulae...and I hope you can see how this might be useful if you were building say...a report that checks the values associated with a particular name or ID (and you want to gently nudge someone reading your data into selecting only the values you have data for). </p><p>Congrats, you're now a step closer to sharing the fruit of your knowledge with the populace...and by using these tools, you don't need to share that knowledge with the very same populace (they won't be paying attention anyways), and that my friend, is how the world goes round. </p><p>-Snactive-X</p>","url":"https://hackersandslackers.com/excel-named-ranges-and-the-active-xs-who-love-them/","uuid":"ae10b4ee-6e70-4086-8a65-1e06fc3555b0","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b6dae7c65239d07358de4d1"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736bd","title":"Your Invitation to the Excel Pivot Party","slug":"excel-pivot-table-party","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/07/party@2x.jpg","excerpt":"Becoming well-versed in pivot tables to the point where it’s a problem.","custom_excerpt":"Becoming well-versed in pivot tables to the point where it’s a problem.","created_at_pretty":"21 July, 2018","published_at_pretty":"21 July, 2018","updated_at_pretty":"02 February, 2019","created_at":"2018-07-20T22:39:01.000-04:00","published_at":"2018-07-21T11:41:44.000-04:00","updated_at":"2019-02-02T05:07:40.000-05:00","meta_title":"Your Invitation to the Excel Pivot Party | Hackers And Slackers","meta_description":"Become well-versed in Excel’s pivot tables to the point where it’s a problem.","og_description":"Becoming well-versed in pivot tables to the point where it’s a problem","og_image":"https://hackersandslackers.com/content/images/2018/07/party@2x.jpg","og_title":"Your Invitation to the Excel Pivot Party","twitter_description":"Becoming well-versed in pivot tables to the point where it’s a problem","twitter_image":"https://hackersandslackers.com/content/images/2018/07/party@2x.jpg","twitter_title":"Your Invitation to the Excel Pivot Party","authors":[{"name":"Max Mileaf","slug":"snacks","bio":"One of three therapists in the known universe who knows how to use a computer. Finds meaning in highly protected data, in a cave, utilizing nothing but a box of scraps. ","profile_image":"https://hackersandslackers.com/content/images/2019/03/max2.jpg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Max Mileaf","slug":"snacks","bio":"One of three therapists in the known universe who knows how to use a computer. Finds meaning in highly protected data, in a cave, utilizing nothing but a box of scraps. ","profile_image":"https://hackersandslackers.com/content/images/2019/03/max2.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},"tags":[{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},{"name":"#Adventures in Excel","slug":"adventures-in-excel","description":"Excel secrets and magic. The kind of industry knowledge that could put financial analysts out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"internal"}],"plaintext":"I know its been a while, but you'd be surprised how little time an energy you\nhave when you're building a plane while you're flying it...or perhaps, if you've\nbeen reading along with this series, you won't. \n\nBefore jumping right into the deep end and showing you some lesser known (but\nsupremely useful) tricks to save even more time (which you'll no doubt use to\nimplement new tricks to save more time, it's a vicious cycle), allow me to\nintroduce \u0000\u0000the downside of dabbling in the mystic arts: \n\nOne of the issues that nearly any overly competent technical analyst will run\ninto eventually is what I'd like to call \"the competence loop.\" This is what\nhappens when your company doesn't understand what you do (because if they did,\nyou literally wouldn't need to exist), but they do understand that you finish\nyour work faster than everyone else, and noticing that when they give you more\nwork, it doesn't take you any longer to finish. Now you may be asking how this\ncould be and the answer is simple: you're curious, get frustrated with monotony,\nand are easily bored. Perhaps you're seeing how this materializes, and if you're\na faithful reader, I know this has happened to you:\n\n * You begin to get frustrated with time consuming spreadsheet tasks (which is\n   what your company thinks you do).\n * Your frustration leads you the realization that there has to be an easier,\n   faster, and possibly even more accurate way (it's much harder to type\n   something wrong when you're not typing it!)\n * Your curiosity leads you to begin researching and eventually implementing a\n   new strategy that does your spreadsheet work for you.\n * You enter a holding pattern where you keep coming up with more and more\n   efficient ways to accomplish your old tasks, and you've probably shared them\n   with your team. \n * Your boss will be mind-boggled with how you're doing this, and will offer you\n   more complex work. \n * You will accept this work because you're now frequently bored at work with\n   your work, working for you (so that you can drive while you drive). \n * In roughly a year, your company will misunderstand what you're  good at, and\n   will now change your job to primarily helping others on your team with their\n   work. However, this proves to be difficult, because some people that you work\n   with have a different skill-set, and would probably be a lot better at\n   management/training/and supervision than you.\n * As it's currently impossible to optimize people (which isn't to say that\n   Silicon Valley isn't trying), you'll stay at this position even if you can\n   move up because with one more promotion, you won't be working with data\n   anymore.\n\nSo, now that we're in the right headspace, let's continue speeding this process\nalong, shall we? \n\nWhen we last left off, you're now capable of solving the vast majority of Excel\nissues using some combination of IFs, ANDs, ORs, Indexes, and Pivots (and for\nthose situations where you haven't solved the issue, you can always Spackle over\nit with =iferror(X,\"N/A\")   (which will simply fill a cell with the phrase \"N/A\"\nif there's an error...which lets you continue summarizing values in a column,\neven if some of them are erroneous. This is called \"throwing an error\"). Now\nwe're going into some cool features that you wouldn't know existed until someone\ntold you.\n\nSo for the first of these case studies, we'll explore the often neglected\n\"design\" tab on the pivot table window, as shown below (hey look, I can embed\nimages now!)\n\nTo get here, first create a pivot table, then populate the columns with some\ninformation. With the pivot table menu still open, you'll realize that the\nheader changes to include two new tabs: Analyze and Design. \n\nOnce choosing design, check out the left-hand side, the real power begins on\n\"report layout\". You'll notice that pivot tables generally stack row information\non top of each other, which great for readability, but not much else. As such,\nif you click the report layout button, and choose \"tabular format\", it'll\nrearrange your data so that the values turn into columns...however, it currently\nlooks like hot garbage, as you can see here:\n\nThat's where the other design buttons come in.\n\nFirst, click the subtotals box, then \"do not show subtotals\" (you can also\nchange where the subtotals are located if you still want em). You can see the\nresults here:\n\nThe final step if to click the report layout button yet again, and click \"repeat\nall item labels\", this gives you something magical: \n\nYep, that's right, we essentially created the original data source from the\npivot table. While this isn't useful in and of itself (and there's actually an\neven easier way to do that), pivot tables can be very quickly reconfigured, and\nin this format, it allows you to work other excel magic (like index matches and\nIF statements), and you can get really tricky by copying the entire pivot table,\nand configuring it differently...matching it against itself. As extra icing on\nthe cake, pivot tables are quicker to sort, just right click the column you want\nto sort by, and click \"sort\". \n\nIn summary, we learned the following: \n\n * The Engineer's competence feedback loop\n * How to use the design tab to format a pivot table to make it friendlier for\n   calculations.\n * How to sort within a pivot table.\n * Some ideas for how you can mess around with this functionality.\n\nNext time, we'll go full McGuyver and use Excel (and Excel alone) to replicate\nsome computer code that if it were programmed in a standard language, would only\ntake 5 seconds to write!","html":"<p>I know its been a while, but you'd be surprised how little time an energy you have when you're building a plane while you're flying it...or perhaps, if you've been reading along with this series, you won't. <br><br>Before jumping right into the deep end and showing you some lesser known (but supremely useful) tricks to save even more time (which you'll no doubt use to implement new tricks to save more time, it's a vicious cycle), allow me to introduce \u0000\u0000the downside of dabbling in the mystic arts: </p><p>One of the issues that nearly any overly competent technical analyst will run into eventually is what I'd like to call \"the competence loop.\" This is what happens when your company doesn't understand what you do (because if they did, you literally wouldn't need to exist), but they do understand that you finish your work faster than everyone else, and noticing that when they give you more work, it doesn't take you any longer to finish. Now you <em>may </em>be asking how this could be and the answer is simple: you're curious, get frustrated with monotony, and are easily bored. Perhaps you're seeing how this materializes, and if you're a faithful reader, I know this has happened to you:</p><ul><li>You begin to get frustrated with time consuming spreadsheet tasks (which is what your company thinks you do).</li><li>Your frustration leads you the realization that there has to be an easier, faster, and possibly even more accurate way (it's much harder to type something wrong when you're not typing it!)</li><li>Your curiosity leads you to begin researching and eventually implementing a new strategy that does your spreadsheet work for you.</li><li>You enter a holding pattern where you keep coming up with more and more efficient ways to accomplish your old tasks, and you've probably shared them with your team. </li><li>Your boss will be mind-boggled with how you're doing this, and will offer you more complex work. </li><li>You will accept this work because you're now frequently bored at work with your work, working for you (so that you can drive while you drive). </li><li>In roughly a year, your company will misunderstand what you're  good at, and will now change your job to primarily helping others on your team with their work. However, this proves to be difficult, because some people that you work with have a different skill-set, and would probably be a lot better at management/training/and supervision than you.</li><li>As it's currently impossible to optimize people (which isn't to say that Silicon Valley isn't trying), you'll stay at this position even if you can move up because with one more promotion, you won't be working with data anymore.</li></ul><p>So, now that we're in the right headspace, let's continue speeding this process along, shall we? </p><p>When we last left off, you're now capable of solving the vast majority of Excel issues using some combination of IFs, ANDs, ORs, Indexes, and Pivots (and for those situations where you haven't solved the issue, you can always Spackle over it with <code>=iferror(X,\"N/A\")</code>  (which will simply fill a cell with the phrase \"N/A\" if there's an error...which lets you continue summarizing values in a column, even if some of them are erroneous. This is called \"throwing an error\"). Now we're going into some cool features that you wouldn't know existed until someone told you.</p><p>So for the first of these case studies, we'll explore the often neglected \"design\" tab on the pivot table window, as shown below (hey look, I can embed images now!)</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/image-1.png\" class=\"kg-image\"></figure><p>To get here, first create a pivot table, then populate the columns with some information. With the pivot table menu still open, you'll realize that the header changes to include two new tabs: Analyze and Design. </p><p>Once choosing design, check out the left-hand side, the real power begins on \"report layout\". You'll notice that pivot tables generally stack row information on top of each other, which great for readability, but not much else. As such, if you click the report layout button, and choose \"tabular format\", it'll rearrange your data so that the values turn into columns...however, it currently looks like hot garbage, as you can see here:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/image-2.png\" class=\"kg-image\"></figure><p>That's where the other design buttons come in.</p><p>First, click the subtotals box, then \"do not show subtotals\" (you can also change where the subtotals are located if you still want em). You can see the results here:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/image-3.png\" class=\"kg-image\"></figure><p>The final step if to click the report layout button yet again, and click \"repeat all item labels\", this gives you something magical: </p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/image-4.png\" class=\"kg-image\"></figure><p>Yep, that's right, we essentially created the original data source from the pivot table. While this isn't useful in and of itself (and there's actually an even easier way to do that), pivot tables can be very quickly reconfigured, and in this format, it allows you to work other excel magic (like index matches and IF statements), and you can get really tricky by copying the entire pivot table, and configuring it differently...matching it against itself. As extra icing on the cake, pivot tables are quicker to sort, just right click the column you want to sort by, and click \"sort\". </p><p>In summary, we learned the following: </p><ul><li>The Engineer's competence feedback loop</li><li>How to use the design tab to format a pivot table to make it friendlier for calculations.</li><li>How to sort within a pivot table.</li><li>Some ideas for how you can mess around with this functionality.</li></ul><p>Next time, we'll go full McGuyver and use Excel (and Excel alone) to replicate some computer code that if it were programmed in a standard language, would only take 5 seconds to write! </p>","url":"https://hackersandslackers.com/excel-pivot-table-party/","uuid":"39b55165-4f71-46ec-a4c5-f3bb4a58fc4d","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b529cc5529141018f9dad1b"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867369c","title":"Slicing Excel: The Way of The Knife","slug":"slicing-excel-the-way-of-the-knife","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/07/knife@2x.jpg","excerpt":"Slicing your Excel data to be presentable for the less tech-savvy.","custom_excerpt":"Slicing your Excel data to be presentable for the less tech-savvy.","created_at_pretty":"04 July, 2018","published_at_pretty":"05 July, 2018","updated_at_pretty":"21 January, 2019","created_at":"2018-07-04T00:23:29.000-04:00","published_at":"2018-07-05T09:05:47.000-04:00","updated_at":"2019-01-21T14:22:14.000-05:00","meta_title":"Slicing Excel: The Way of The Knife | Hackers and Slackers","meta_description":"Slicing your Excel data to be presentable for the less tech-savvy.","og_description":"Slicing your Excel data to be presentable for the less tech-savvy","og_image":"https://hackersandslackers.com/content/images/2018/07/knife@2x.jpg","og_title":"Slicing Excel: The Way of The Knife","twitter_description":"Slicing your Excel data to be presentable for the less tech-savvy","twitter_image":"https://hackersandslackers.com/content/images/2018/07/knife@2x.jpg","twitter_title":"Slicing Excel: The Way of The Knife","authors":[{"name":"Max Mileaf","slug":"snacks","bio":"One of three therapists in the known universe who knows how to use a computer. Finds meaning in highly protected data, in a cave, utilizing nothing but a box of scraps. ","profile_image":"https://hackersandslackers.com/content/images/2019/03/max2.jpg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Max Mileaf","slug":"snacks","bio":"One of three therapists in the known universe who knows how to use a computer. Finds meaning in highly protected data, in a cave, utilizing nothing but a box of scraps. ","profile_image":"https://hackersandslackers.com/content/images/2019/03/max2.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},"tags":[{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},{"name":"#Adventures in Excel","slug":"adventures-in-excel","description":"Excel secrets and magic. The kind of industry knowledge that could put financial analysts out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"internal"}],"plaintext":"If you've been following along with the posts in this series, and you've been\nputting some of the scenarios into practice, you've now crossed a crucial\njuncture in your never ending quest to master the bloated beast that is Excel.\nTo put things in perspective, if you've conquered all the quests that I've set\nyou upon, you should now be able to:\n\n* Open up and add macro code into an Excel Worksheet \n* Utilize lookup functions (particularly Index(Match)) to compare and validate\ndata sets \n* Build a complex formula\n* Utilize IF/AND/and OR statements in order to manipulate data and finally... \n* Understand your role in the data underground\n\nIf there was any running theme among the posts in the past, it's that if you're\nin the position in which you're forced to utilize Excel in order to analyze\ndata, you're probably grabbing a dirty version of the data-set from an\nintermediary platform (such as Tableau or Business Objects) built by a developer\nwho isn't informed as to how the end user is going to use the data. \n\nYour mission, whether you choose to accept it or not is essentially to take data\nfrom people who know data and don't know the business, and turn it into data for\npeople who know business and don't understand numbers.\nIf you're wondering if perhaps you're in this role and don't know it yet,\nthere's a simple two question litmus test\n\n=IF(AND(COLORCODING,OR(SLICE,DICE)),\"Analyst\",\"Something Else\"\n\nFor those of you who are just joining the party, that essentially says that if:\n1. If a superior of yours has ever asked you to \"slice\" and or \"dice\" the data \n2. If you're asked to color code things arbitrarily. Then you might be an\nanalyst.\n\nNow, while you're sitting at your desk (in what's most likely an Aeron chair)\nand you read the above qualifiers, the first thought that pops into your mind\nshould be: \"WTF does slice and dice mean when it comes to data analysis?\" The\nanswer may surprise you in that it's not just meaningless business lingo, it's\nactually a pretty good explanation of what you're going to be doing A LOT of\n(but fear not, in all likelihood, your boss didn't mean it like that due to what\nI'd like to call the leveraging of the synergy paradigm).\n\n\nEssentially, when one attempts to slap-chop a \"data dump\" (in the computer\npatois, that's how you say data that's pulled straight from the source), it\noften involves as the first step \"normalizing\" the data so that the format is\nlogical, and is in a position in which you can start employing some of the\nwizardry that we've been speaking about.\nThe normalization process often involves only a few steps, all of which are\nquite easy, but EXTREMELY un-intuitive, and if you follow these steps, you'll\neither be done with the normalization process, or you'll be able to figure out\nhow (all data dumps are dirty, but not all shit is created equal).\n\n1. Ensure that your data has headings!\na. Headings are essential not just because they're a logical way to organize  \n your variables, but they're are also REQUIRED to build a pivot table down the\nroad, if even one of your columns doesn't have a heading, Excel won't play nice!\n \n2. Ensure that your headings don't repeat themselves\na. While this may seem obvious, if a heading repeats itself, Excel won't pivot\nproperly, won't graph correctly AND won't upload properly in external tools\n(such as Microsoft Access, which we'll explore in a later post!) \n3. Ensure that multiple sources are all located on the same Excel workbook\n(basically, if you're pulling data from multiple places, that you paste them all\ninto the same Excel file).\na. Note that since Excel 2007, this step isn't 100% necessary, but it makes\nthings much faster in both ease of use, and in the computational sense. \n4. And finally, ensure that your variables are in the correct format...which is\nwhat we'll focus on for the rest of this post.\n\nOften, data dumps combine multiple variables into one \"string\" (a set of\ncharacters with no other format) most often last names, first names, and ID\nnumbers which is fine when you're trying to figure out how many\nSmith,Bob,8675309s exist in your data...so basically useless on it's own. This\nbrings us to the title of this post: how we're going to slice up (or \"Parse\")\nthis string so that it's useful to us. \n\nThere are a few was of going about this, but in my experience the most useful is\nsome combination of the following formulae:\n=LEFT  which returns a specified number of characters from the start of a\nstring. \n=RIGHT  which returns a specified number of characters from the end of the\nstring. \n=MID   which returns a specified number of characters from a defined point in\nthe string \n=LEN  which returns the number of characters in the string, and \n=FIND  which returns the location of a specified character or string within a\nstring. Just a word to the wise, starting from the beginning is always 0, not 1\nin any of these examples. \n\nAssuming you've got some android in you, you notice that =left  and =right  are\nbasically useless if you need to break up a string (but can be useful if you\nwind up with a data dump that gives you a preset amount of garbage to throw away\neach time, or as a second step in this process). Instead, we're going to\nleverage the fact that Data Dumps are generally exported in Comma Separated\nFormat (CSV) which means that there are going to be a lot of commas for you to\nset as \"flags\" where you want to break things up. Take the example I gave you\nbefore: Smith,Bob,8675309s. \nThis is actually a particularly mean example because you're going to need to\nbreak it into three steps for which there are multiple solutions, simply because\nthere's more than one comma to \"put your flag down\". One way you can go about it\nis as such: \n\nFirst use the \"mid\" function alongside the \"find\" command in order to separate\nthe last name from the first name and ID, like so: \n=MID(A1,FIND(\",\",A1)+1,LEN(A1))\nThe result of this will be Bob,8675309, and the reason why the +1 is included is\nso that we don't include the comma (which would start this whole circus again)\nFrom there, you can repeat the steps on the newly created Bob,8675309 in order\nto obtain the ID.\n\nOnce you have the ID number, if you return to the original string and perform \n=left(A1(find(\",\",A1)-1)  (the -1 removes the first comma as opposed to the\nsecond) you'll get \"Smith\"\n\nFinally, you can go to the Bob,8675309 string (which we'll say is located in B1)\nand perform the same steps in order to get \"Bob\" all by itself. \n\nWith all that being said, until we get a bit more advanced (yes, you can do this\nin fewer steps), assume you need one formula per comma in order to \"parse\" each\nsection, and you'll find your way. The benefit of breaking it down this way is\nthat you can drag the formula down and it'll perform the exact same steps\nregardless of how long the initial string is, as long as it has 3 commas. \n\nSo, what have we learned? \n\n 1. We've learned to slice up data dumps\n 2. We've learned to dice up the resultant strings and finally\n 3. We've learned how to take a small bit of useless garbage and turn it into\n    variables that we can use in further analysis via slicing and dicing. \n\nSo you see? Perhaps your boss knew something after all when they were asking you\nif you knew how to slice and dice data... juuuuuust kidding. \n\nNow that you have a basic fund of knowledge (and if you don't I implore you to\nread the rest of the Adventures in Excel series), the next few lessons are going\nto go into some of the crazier stuff that I've personally been asked to do\n(which my other friends on this blog could do in 5 minutes using something other\nthan Excel) and you'll learn to start a fire with some flint and a bunch of\nsticks. \n\n-Snacks out.","html":"<p>If you've been following along with the posts in this series, and you've been putting some of the scenarios into practice, you've now crossed a crucial juncture in your never ending quest to master the bloated beast that is Excel. To put things in perspective, if you've conquered all the quests that I've set you upon, you should now be able to:<br><br>* Open up and add macro code into an Excel Worksheet <br>* Utilize lookup functions (particularly Index(Match)) to compare and validate data sets <br>* Build a complex formula<br>* Utilize IF/AND/and OR statements in order to manipulate data and finally... <br>* Understand your role in the data underground<br><br>If there was any running theme among the posts in the past, it's that if you're in the position in which you're forced to utilize Excel in order to analyze data, you're probably grabbing a dirty version of the data-set from an intermediary platform (such as Tableau or Business Objects) built by a developer who isn't informed as to how the end user is going to use the data. </p><p>Your mission, whether you choose to accept it or not is essentially to take data from people who know data and don't know the business, and turn it into data for people who know business and don't understand numbers.<br>If you're wondering if perhaps you're in this role and don't know it yet, there's a simple two question litmus test</p><p><code>=IF(AND(COLORCODING,OR(SLICE,DICE)),\"Analyst\",\"Something Else\"</code><br><br>For those of you who are just joining the party, that essentially says that if:<br> 1. If a superior of yours has ever asked you to \"slice\" and or \"dice\" the data <br>2. If you're asked to color code things arbitrarily. Then you might be an analyst.<br><br>Now, while you're sitting at your desk (in what's most likely an Aeron chair) and you read the above qualifiers, the first thought that pops into your mind should be: \"WTF does slice and dice mean when it comes to data analysis?\" The answer may surprise you in that it's not just meaningless business lingo, it's actually a pretty good explanation of what you're going to be doing A LOT of (but fear not, in all likelihood, your boss didn't mean it like that due to what I'd like to call the <em><strong>leveraging of the synergy paradigm</strong></em>).</p><p><br>Essentially, when one attempts to slap-chop a \"data dump\" (in the computer patois, that's how you say data that's pulled straight from the source), it often involves as the first step \"normalizing\" the data so that the format is logical, and is in a position in which you can start employing some of the wizardry that we've been speaking about.<br>The normalization process often involves only a few steps, all of which are quite easy, but EXTREMELY un-intuitive, and if you follow these steps, you'll either be done with the normalization process, or you'll be able to figure out how (all data dumps are dirty, but not all shit is created equal).<br><br> 1. Ensure that your data has headings!    <br>\ta. Headings are essential not just because they're a logical way to organize    your variables, but they're are also REQUIRED to build a pivot table down the road, if even one of your columns doesn't have a heading, Excel won't play nice! <br>2. Ensure that your headings don't repeat themselves    <br>\ta. While this may seem obvious, if a heading repeats itself, Excel won't pivot properly, won't graph correctly AND won't upload properly in external tools (such as Microsoft Access, which we'll explore in a later post!) <br>3. Ensure that multiple sources are all located on the same Excel workbook (basically, if you're pulling data from multiple places, that you paste them all into the same Excel file).    <br>\ta. Note that since Excel 2007, this step isn't 100% necessary, but it makes things much faster in both ease of use, and in the computational sense. <br>4. And finally, ensure that your variables are in the correct format...which is what we'll focus on for the rest of this post.<br><br>Often, data dumps combine multiple variables into one \"string\" (a set of characters with no other format) most often last names, first names, and ID numbers which is fine when you're trying to figure out how many Smith,Bob,8675309s exist in your data...so basically useless on it's own. This brings us to the title of this post: how we're going to slice up (or \"Parse\") this string so that it's useful to us. <br><br>There are a few was of going about this, but in my experience the most useful is some combination of the following formulae:<br> <code>=LEFT</code> which returns a specified number of characters from the start of a string. <br><code>=RIGHT</code> which returns a specified number of characters from the end of the string. <br><code>=MID</code>  which returns a specified number of characters from a defined point in the string <br><code>=LEN</code> which returns the number of characters in the string, and <br><code>=FIND</code> which returns the location of a specified character or string within a string. Just a word to the wise, starting from the beginning is always 0, not 1 in any of these examples. <br><br>Assuming you've got some android in you, you notice that <code>=left</code> and <code>=right</code> are basically useless if you need to break up a string (but can be useful if you wind up with a data dump that gives you a preset amount of garbage to throw away each time, or as a second step in this process). Instead, we're going to leverage the fact that Data Dumps are generally exported in Comma Separated Format (CSV) which means that there are going to be a lot of commas for you to set as \"flags\" where you want to break things up. Take the example I gave you before: Smith,Bob,8675309s. <br>This is actually a particularly mean example because you're going to need to break it into three steps for which there are multiple solutions, simply because there's more than one comma to \"put your flag down\". One way you can go about it is as such: </p><p>First use the \"mid\" function alongside the \"find\" command in order to separate the last name from the first name and ID, like so: <code>=MID(A1,FIND(\",\",A1)+1,LEN(A1))</code><br>The result of this will be Bob,8675309, and the reason why the +1 is included is so that we don't include the comma (which would start this whole circus again)<br>From there, you can repeat the steps on the newly created Bob,8675309 in order to obtain the ID.</p><p>Once you have the ID number, if you return to the original string and perform <code>=left(A1(find(\",\",A1)-1)</code> (the -1 removes the first comma as opposed to the second) you'll get \"Smith\"<br><br>Finally, you can go to the Bob,8675309 string (which we'll say is located in B1) and perform the same steps in order to get \"Bob\" all by itself. </p><p>With all that being said, until we get a bit more advanced (yes, you can do this in fewer steps), assume you need one formula per comma in order to \"parse\" each section, and you'll find your way. The benefit of breaking it down this way is that you can drag the formula down and it'll perform the exact same steps regardless of how long the initial string is, as long as it has 3 commas. <br><br>So, what have we learned? </p><ol><li>We've learned to slice up data dumps</li><li>We've learned to dice up the resultant strings and finally</li><li>We've learned how to take a small bit of useless garbage and turn it into variables that we can use in further analysis via slicing and dicing. </li></ol><p>So you see? Perhaps your boss knew something after all when they were asking you if you knew how to slice and dice data... juuuuuust kidding. </p><p>Now that you have a basic fund of knowledge (and if you don't I implore you to read the rest of the Adventures in Excel series), the next few lessons are going to go into some of the crazier stuff that I've personally been asked to do (which my other friends on this blog could do in 5 minutes using something other than Excel) and you'll learn to start a fire with some flint and a bunch of sticks. <br><br>-Snacks out. </p>","url":"https://hackersandslackers.com/slicing-excel-the-way-of-the-knife/","uuid":"5e29efb4-a83c-4d03-8ec9-ffa1fb0bd5b2","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b3c4bc1d0ac8a143588f365"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673681","title":"Yes...If(And)): Excel’s Mighty “IF” Statement","slug":"excels-mighty-if-statement","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/02/excelif-2.jpg","excerpt":"A deep dive into Excel’s implementation of IF statements and their significance.","custom_excerpt":"A deep dive into Excel’s implementation of IF statements and their significance.","created_at_pretty":"20 June, 2018","published_at_pretty":"20 June, 2018","updated_at_pretty":"28 February, 2019","created_at":"2018-06-19T20:17:09.000-04:00","published_at":"2018-06-20T07:30:00.000-04:00","updated_at":"2019-02-28T02:36:33.000-05:00","meta_title":"Yes...If(And)): Excel’s Mighty “IF” Statement | Hackers and Slackers","meta_description":"A deep dive into Excel’s implementation of IF statements and their significance.","og_description":"A deep dive into Excel’s implementation of IF statements and their significance","og_image":"https://hackersandslackers.com/content/images/2019/02/excelif-2.jpg","og_title":"Yes...If(And)): Excel’s Mighty “IF” Statement ","twitter_description":"A deep dive into Excel’s implementation of IF statements and their significance","twitter_image":"https://hackersandslackers.com/content/images/2019/02/excelif-2.jpg","twitter_title":"Yes...If(And)): Excel’s Mighty “IF” Statement ","authors":[{"name":"Max Mileaf","slug":"snacks","bio":"One of three therapists in the known universe who knows how to use a computer. Finds meaning in highly protected data, in a cave, utilizing nothing but a box of scraps. ","profile_image":"https://hackersandslackers.com/content/images/2019/03/max2.jpg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Max Mileaf","slug":"snacks","bio":"One of three therapists in the known universe who knows how to use a computer. Finds meaning in highly protected data, in a cave, utilizing nothing but a box of scraps. ","profile_image":"https://hackersandslackers.com/content/images/2019/03/max2.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},"tags":[{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},{"name":"#Adventures in Excel","slug":"adventures-in-excel","description":"Excel secrets and magic. The kind of industry knowledge that could put financial analysts out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"internal"}],"plaintext":"If you've been following along on our proverbial Hogwarts for budding Excel\nwizardry, you would know that we recently crossed an important Rubicon upon\nwhich all Excel, and indeed all computer programming languages are built: The\nmighty IF statement. Remember, the IF statement allows the wielder to fork\nreality at their whim, to bend the code on a lark, to be the Franklin Richards\nof the spreadsheet just by asking the computer a simple true/false question.\nConsidering the gravity of this momentous revelation, I implore you to read the\nprevious statement in order to join us in enlightenment.\n\nAs we've already explored, all code, no matter how it's written, is built upon a\nfoundation of ones and zeros, sequenced an infinite number of ways to obtain an\ninfinite number of results, and the key to harnessing this power lies within the\nIF statement...kind of. Much like one can  write a sentence with two letters\n(GO!), or write an entire paragraph using the word \"buffalo\" doesn't necessarily\nmean that the next Nobel Prize in Literature is going to be won with the\ngroundbreaking poem GO BUFFALO! (or at least, I hope not). With that being said,\nwhile the IF statement is the foundation on which all code is built, it has\nfriends, in the form of OR and AND.\n\nTo put it simply, the IF statement checks to see if a given statement is true or\nfalse, but rarely do you want to merely check if one number is equal to another,\nsometimes you want to get a little bit more complex: enter the AND and OR\nstatements: the proverbial cherry and whip cream atop the Sunday.\n\nThe thing to always keep in mind is that everything always comes back to a\ntrue/false IF statement, the AND and OR statements only add more things to the\nmix for Excel to verify.\n\nLet's get one thing out of the way off the bat, while every programming language\ncontains IF, AND, and OR, the way you write out these statements (or perhaps,\nquestions?) in Excel's frontend (which is a fancy way to say \"the thing that you\nsee) is downright wacky. In the majority of programming languages, one would\nwrite an IF statement with an OR or an AND like you would a sentence:\n\n**IF the age of Jim > The age of Bob\nAND Bob is old\n(then)\n\"Print Jim is Old, older than Bob\"\n\nIn the vast majority of programming languages, you would write out that code\nalmost exactly as I wrote it (note that almost all programming languages imply\nthe \"then\"...including Excel). However, Excel likes to be different and forces\nyou to essentially write the same code in an ass backwards way, kind of like\nthis:\n\nIF(AND(Jim>Bob,Bob = old),\"Jim is old, older than bob\"\n\nYou'll notice right away that you'll need an AND before you write your IF\nstatement, which is kind of the opposite of how sentences (or even thinking in\ngeneral) works. On the plus side the way AND works in Excel is that it lets you\nkeep adding things to check after each comma, think of each comma within the AND\nstatement as adding another \"and\" to the sentence. In other words, you only need\nto write AND once for each IF you have.\n\nTo put things less esoterically, here are the nuts and bolts behind \"AND\":\n\nFirst you have the IF statement which checks to see if a given value is true or\nfalse. In the example above, its Jim's age. If you were checking Jim's age\nagainst Bob's age, and let's say Jim's age is written in cell A1 and Bob's age\nis written in cell B1, the IF would be written like this:\n\n**=IF(A1 > B1, \"Jim is old\", \"Jim is young\")\n\nBasically, you're seeing if Jim is older than Bob, and then you're given two\nchoices: If Jim is older than Bob, Jim is old, If Jim is not older than Bob, Jim\nis young. Naturally though, one's age is not measured in Bobs, and normally you\ncan't tell if any Jim off the street is old just by their proximity to a\nBob...so enter the AND.\n\nIn Excel, and is it's own formula (you can technically write =AND(1,2) and it'll\nreturn \"true\" because 1 and 2 are, in fact numbers) which checks to see if two\n(or more) arguments within it's parenthesis are true, and it'll return \"true\" if\nso. So, let's say You have Jim's age in cell A1, Bob's age in Cell B1, and the\nphrase \"this example is falling apart\" in cell C1, and Jim can only be\nconsidered \"old\" if this example is falling apart, you'd write it like this:\n\n**=IF(AND(A1>B1,C1= \"this example is falling apart\"),\"Jim is Old!\",\"Jim is not\nold!\")\n\nSo let's look at this from left to right in English: You're checking to see if\nJim is old (the IF statement), you know that Jim can only be considered old if\nhe is older than Bob (cell B1) AND  if this example is falling apart (C1), if\nall of these things are true, then Jim is, in fact, old, or else, he is not old.\n\nBefore we close out for the night, a quick PROTIP!: the ass-backwards way Excel\nforces you to write AND statements has an upside: you only need to write AND\nonce for each IF statement you include (and you better believe you can use more\nthan one...tune in next time!). In other words, you can keep adding things to\ncheck the truth of just by adding commas after the AND(. Think of each comma you\nwrite after the second parenthesis but before the 3rd as adding another AND to\nthe mix...just keep one thing in mind, if only one of those is false, the whole\nhouse of cards falls apart (which may be what you're trying to accomplish!)\n\nIn summary, in this lesson we went over:\n\n * The massive impact of the IF statement\n * How you can get jiggy with IFs by using AND\n * How to spice up your IFs with ANDs\n * How to tell if Jim is indeed old\n\nNext time, I'll push this ridiculous example to infinity and beyond when we make\nlike a bird and Nest.\n\n-Snacks","html":"<p>If you've been following along on our proverbial Hogwarts for budding Excel wizardry, you would know that we recently crossed an important Rubicon upon which all Excel, and indeed all computer programming languages are built: The mighty IF statement. Remember, the IF statement allows the wielder to fork reality at their whim, to bend the code on a lark, to be the Franklin Richards of the spreadsheet just by asking the computer a simple true/false question. Considering the gravity of this momentous revelation, I implore you to read the previous statement in order to join us in enlightenment.</p><p>As we've already explored, all code, no matter how it's written, is built upon a foundation of ones and zeros, sequenced an infinite number of ways to obtain an infinite number of results, and the key to harnessing this power lies within the IF statement...kind of. Much like one <em>can</em> write a sentence with two letters (GO!), or write an entire paragraph using the word \"buffalo\" doesn't necessarily mean that the next Nobel Prize in Literature is going to be won with the groundbreaking poem GO BUFFALO! (or at least, I hope not). With that being said, while the IF statement is the foundation on which all code is built, it has friends, in the form of OR and AND.</p><p>To put it simply, the IF statement checks to see if a given statement is true or false, but rarely do you want to merely check if one number is equal to another, sometimes you want to get a little bit more complex: enter the AND and OR statements: the proverbial cherry and whip cream atop the Sunday.</p><p>The thing to always keep in mind is that everything always comes back to a true/false IF statement, the AND and OR statements only add more things to the mix for Excel to verify.</p><p>Let's get one thing out of the way off the bat, while every programming language contains IF, AND, and OR, the way you write out these statements (or perhaps, questions?) in Excel's frontend (which is a fancy way to say \"the thing that you see) is downright wacky. In the majority of programming languages, one would write an IF statement with an OR or an AND like you would a sentence:</p><pre><code>**IF the age of Jim &gt; The age of Bob\nAND Bob is old\n(then)\n\"Print Jim is Old, older than Bob\"</code></pre><p>In the vast majority of programming languages, you would write out that code almost exactly as I wrote it (note that almost all programming languages imply the \"then\"...including Excel). However, Excel likes to be different and forces you to essentially write the same code in an ass backwards way, kind of like this:</p><p><strong>IF(AND(Jim&gt;Bob,Bob = old),\"Jim is old, older than bob\"</strong></p><p>You'll notice right away that you'll need an AND before you write your IF statement, which is kind of the opposite of how sentences (or even thinking in general) works. On the plus side the way AND works in Excel is that it lets you keep adding things to check after each comma, think of each comma within the AND statement as adding another \"and\" to the sentence. In other words, you only need to write AND once for each IF you have.</p><p>To put things less esoterically, here are the nuts and bolts behind \"AND\":</p><p>First you have the IF statement which checks to see if a given value is true or false. In the example above, its Jim's age. If you were checking Jim's age against Bob's age, and let's say Jim's age is written in cell A1 and Bob's age is written in cell B1, the IF would be written like this:</p><p><code>**=IF(A1 &gt; B1, \"Jim is old\", \"Jim is young\")</code></p><p>Basically, you're seeing if Jim is older than Bob, and then you're given two choices: If Jim is older than Bob, Jim is old, If Jim is not older than Bob, Jim is young. Naturally though, one's age is not measured in Bobs, and normally you can't tell if any Jim off the street is old just by their proximity to a Bob...so enter the AND.</p><p>In Excel, and is it's own formula (you can technically write =AND(1,2) and it'll return \"true\" because 1 and 2 are, in fact numbers) which checks to see if two (or more) arguments within it's parenthesis are true, and it'll return \"true\" if so. So, let's say You have Jim's age in cell A1, Bob's age in Cell B1, and the phrase \"this example is falling apart\" in cell C1, and Jim can only be considered \"old\" if this example is falling apart, you'd write it like this:</p><p><code>**=IF(AND(A1&gt;B1,C1= \"this example is falling apart\"),\"Jim is Old!\",\"Jim is not old!\")</code></p><p>So let's look at this from left to right in English: You're checking to see if Jim is old (the IF statement), you know that Jim can only be considered old if he is older than Bob (cell B1) <em>AND</em> if this example is falling apart (C1), if all of these things are true, then Jim is, in fact, old, or else, he is not old.</p><p>Before we close out for the night, a quick <strong>PROTIP!</strong>: the ass-backwards way Excel forces you to write AND statements has an upside: you only need to write AND once for each IF statement you include (and you better believe you can use more than one...tune in next time!). In other words, you can keep adding things to check the truth of just by adding commas after the AND(. Think of each comma you write after the second parenthesis but before the 3rd as adding another AND to the mix...just keep one thing in mind, if only one of those is false, the whole house of cards falls apart (which may be what you're trying to accomplish!)</p><p>In summary, in this lesson we went over:</p><ul><li>The massive impact of the IF statement</li><li>How you can get jiggy with IFs by using AND</li><li>How to spice up your IFs with ANDs</li><li>How to tell if Jim is indeed old</li></ul><p>Next time, I'll push this ridiculous example to infinity and beyond when we make like a bird and Nest.</p><p>-Snacks</p>","url":"https://hackersandslackers.com/excels-mighty-if-statement/","uuid":"53e33eb7-ca7d-4c24-97d5-ff9c9c2c91bd","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b299d05ded32f5af8fd6745"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673670","title":"Getting Iffy With it: Conditional Statements in Excel","slug":"getting-iffy-with-it-conditionals-in-excel","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/06/iffy@2x.jpg","excerpt":"Effectively utilize conditionals such as IF statements in your Excel workflow.","custom_excerpt":"Effectively utilize conditionals such as IF statements in your Excel workflow.","created_at_pretty":"10 June, 2018","published_at_pretty":"10 June, 2018","updated_at_pretty":"21 January, 2019","created_at":"2018-06-10T12:12:20.000-04:00","published_at":"2018-06-10T14:19:42.000-04:00","updated_at":"2019-01-21T13:44:06.000-05:00","meta_title":"Getting Iffy With it: Conditional Statements in Excel | Hackers and Slackers","meta_description":"Effectively utilize conditionals such as IF statements in your Excel workflow.","og_description":"Effectively utilize conditionals such as IF statements in your Excel workflow","og_image":"https://hackersandslackers.com/content/images/2018/06/iffy@2x.jpg","og_title":"Getting Iffy With it: Conditional Statements in Excel","twitter_description":"Effectively utilize conditionals such as IF statements in your Excel workflow","twitter_image":"https://hackersandslackers.com/content/images/2018/06/iffy@2x.jpg","twitter_title":"Getting Iffy With it: Conditional Statements in Excel","authors":[{"name":"Max Mileaf","slug":"snacks","bio":"One of three therapists in the known universe who knows how to use a computer. Finds meaning in highly protected data, in a cave, utilizing nothing but a box of scraps. ","profile_image":"https://hackersandslackers.com/content/images/2019/03/max2.jpg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Max Mileaf","slug":"snacks","bio":"One of three therapists in the known universe who knows how to use a computer. Finds meaning in highly protected data, in a cave, utilizing nothing but a box of scraps. ","profile_image":"https://hackersandslackers.com/content/images/2019/03/max2.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},"tags":[{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},{"name":"Data Analysis","slug":"data-analysis","description":"Drawing meaningful conclusions from data. Includes interpretation, dashboard creation, and data manipulation.","feature_image":null,"meta_description":"Drawing meaningful conclusions from data. Includes interpretation, dashboard creation, and data manipulation.","meta_title":"Data Analysis | Hackers and Slackers","visibility":"public"},{"name":"#Adventures in Excel","slug":"adventures-in-excel","description":"Excel secrets and magic. The kind of industry knowledge that could put financial analysts out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"internal"}],"plaintext":"If you've been following along, we discussed in the last several posts of this\nseries how, if you're not working in a very \"tech forward\" organization (like my\ntwo compatriots on his site), but you have the same title, you're probably\nobtaining your data from another department (or it might be a sentient sponge,\nor a gang of squirrels with dreams of world domination, you'll actually have no\nidea) who you will have no contact with. As a side effect of this...rather\nstrange situation (ya know, like being a child and being abandoned briefly by\nyour mother in a laboratory into the care of a stranger in order to track your\nresponse...what, no other Bowlby heads out there?) you'll almost certainly get\nthis data in a form that is completely unusable until you, dear reader, get your\nhands on it.\n\nAs such, in this post, we'll begin to dive into the myriad ways in which you\nmight go about doing that, but first, I need to put you in the right frame of\nmind, I am a therapist, after all. Remember back to one of my first posts: when\nyou get down to it, all computer code boils down to a series of binary choices\n(generally represented as 1s and 0s) indicating that a specific gate on the\nactual hardware is \"on\" or \"off\", and by layering millions of these on top of\neach other is how every single piece of computer software you have comes into\nbeing. Think about other binary decisions you've made in your life: Yes, or no,\nOdd or Even, Coke or Pepsi (despite what RC cola would like you to think), and\nperhaps the most bemoaned of all for everyone who has ever been a student: True\nor False.\n\nInterestingly, this true/false dichotomy is the very essence of how all of the\nchopping and screwing you'll be doing on your messy data (and in fact, the\nmajority of all computer programming) begins; by simply asking Excel if  what\nyou typed in is true...or false.\n\nNow that you've been successfully induced, we can jump into the the technical\nstuff. As you may have garnered from my post about formulae, Excel actually has,\nDEEP within it's bowels, a fairly robust programming language underpinning it:\nVisual Basic for Applications (VBA). Now, there are two general ways to tap into\nit:\n\n 1. The way that the majority of wizards do it: through the function bar (that\n    is, typing an \"=\" and letting it rip), and...\n 2. The way that the particularly adept wizards engage in it: through the\n    command line, which I'm not going to bother touching here, because if you're\n    writing entire Excel spreadsheets in VBA, why are you still using Excel?\n    Move onto Python or R and continue feeling smugly superior!\n\nSo, with that being said, how does one tap into this unlimited wellspring of\npotential using nothing but the features on the Excel mainpage? Well, I already\ntold you, simply ask Excel =If()!\nAll flowery language and allegory aside, the majority of computer programming\nlanguages (the one underneath Excel included) hinge on this \"If\" statement, the\nonly difference is how the particular language wants you to write these\nstatements.\n\nIn the Excel parlance, when one types in =If(  you'll be asked for three things\nseparated by commas (that Excel could really make a bit clearer), they are:\n\n 1. The logical argument (AKA, what do you want Excel to check as being true or\n    false?) A good example would be say \"Does the value in Cell A1 equal the\n    value of the Cell in B1?\" which would be written as =if(A1=B1 (Protip!, \n    unlike other programming languages, the way you write \"does not equal\" in\n    Excel is <>)\n 2. The value you want to grab if the value is true (leaving this blank will\n    just write \"true\") but in this case, let's make it say \"Yes\". This will be\n    written as =if(A1=B1,\"Yes\".(Protip!,  within Excel, if ever you want to\n    return something other than a number  you always need to surround it in\n    quotation marks.)\n 3. The value that you want to return if the value is false (leaving this blank\n    will just write \"false\") in this case, let's make it say \"No\". This will be\n    written as =if(A1=B1,\"Yes\",\"No\").\n\nAfter completing this formula with the three elements followed by a closing\nparenthesis, you'll get a cell that either says \"Yes\" or \"No\" depending on if A1\nand B1 contain the same values. The powerful thing here is what comes next: by\ndouble clicking the lower right hand corner of the cell with the formula, it'll\nautomatically populate all of the rows which are adjacent to information with Ax\n= Bx (where x equals the row number) allowing you to check each row to see if\nthe two columns match!\n\nTo add an extra wrinkle, let's say you want to check to see if each cell in a\ncolumn is equal to the values in a specific cell, you'd do that as follows:\n=if(A1 = $B$1,\"Yes\",\"No\"). If you then double click the cell as you did before,\nthat will check every value in column A against ONLY the value in B1. By adding\nthe dollar sign to the location of the cell, You've identified the \"Absolute\nReference\" as opposed to the \"Relative Reference\". Feel free to disregard these\nnames immediately, and start referring to it as \"dollar sign\". You can even\nmanipulate it by only using the Absolute reference on the row (A$1) OR the\ncolumn ($A1) if you're populating , vertically, horizontally, or both (yes,\ntechnically putting B$1 in the above example would have gotten you the same\nanswers).\n\nIn summation, in this post we've learned:\n\n 1. Excel is actually built on top of a \"real\" programming language called VBA.\n 2. You can write tiny programs in Excel through the function bar (or big\n    programs through the command line...showoff).\n 3. All \"programming\" really is, is the manipulation of true/false statements\n    underpinning the binary code even further beneath all computational tasks.\n 4. How to write your own \"If\" statement in Excel and how to \"phrase\" the\n    returning of numbers vs. anything else using quotation marks.\n 5. How to utilize the absolute reference (AKA the \"Dollar Sign\") to change what\n    gets included in the statements in each line of your spreadsheet.\n\nNext time, we'll get more grammatically complex, leveraging Ands and Ors in our\nIfs. We might even get crazy and throw some Ifs in our Ifs...so you can drive\nwhile you drive.\n\nEver Upward,\n\n-Snacks","html":"<p>If you've been following along, we discussed in the last several posts of this series how, if you're not working in a very \"tech forward\" organization (like my two compatriots on his site), but you have the same title, you're probably obtaining your data from another department (or it might be a sentient sponge, or a gang of squirrels with dreams of world domination, you'll actually have no idea) who you will have no contact with. As a side effect of this...rather strange situation (ya know, like being a child and being abandoned briefly by your mother in a laboratory into the care of a stranger in order to track your response...what, no other Bowlby heads out there?) you'll almost certainly get this data in a form that is completely unusable until <strong>you</strong>, dear reader, get your hands on it.</p><p>As such, in this post, we'll begin to dive into the myriad ways in which you might go about doing that, but first, I need to put you in the right frame of mind, I am a therapist, after all. Remember back to one of my first posts: when you get down to it, all computer code boils down to a series of binary choices (generally represented as 1s and 0s) indicating that a specific gate on the actual hardware is \"on\" or \"off\", and by layering millions of these on top of each other is how every single piece of computer software you have comes into being. Think about other binary decisions you've made in your life: Yes, or no, Odd or Even, Coke or Pepsi (despite what RC cola would like you to think), and perhaps the most bemoaned of all for everyone who has ever been a student: True or False.</p><p>Interestingly, this true/false dichotomy is the very essence of how all of the chopping and screwing you'll be doing on your messy data (and in fact, the majority of all computer programming) begins; by simply asking Excel <em><strong>if</strong></em> what you typed in is true...or false.</p><p>Now that you've been successfully induced, we can jump into the the technical stuff. As you may have garnered from my post about formulae, Excel actually has, DEEP within it's bowels, a fairly robust programming language underpinning it: Visual Basic for Applications (VBA). Now, there are two general ways to tap into it:</p><ol><li>The way that the majority of wizards do it: through the function bar (that is, typing an \"=\" and letting it rip), and...</li><li>The way that the particularly adept wizards engage in it: through the command line, which I'm not going to bother touching here, because if you're writing entire Excel spreadsheets in VBA, why are you still using Excel? Move onto Python or R and continue feeling smugly superior!</li></ol><p>So, with that being said, how does one tap into this unlimited wellspring of potential using nothing but the features on the Excel mainpage? Well, I already told you, simply ask Excel <strong>=If()</strong>!<br>All flowery language and allegory aside, the majority of computer programming languages (the one underneath Excel included) hinge on this \"If\" statement, the only difference is how the particular language wants you to write these statements.</p><p>In the Excel parlance, when one types in <strong>=If(</strong> you'll be asked for three things separated by commas (that Excel could really make a bit clearer), they are:</p><ol><li>The logical argument (AKA, what do you want Excel to check as being true or false?) A good example would be say \"Does the value in Cell A1 equal the value of the Cell in B1?\" which would be written as =if(A1=B1 (<strong>Protip!,</strong> unlike other programming languages, the way you write \"does not equal\" in Excel is <strong>&lt;&gt;</strong>)</li><li>The value you want to grab if the value is true (leaving this blank will just write \"true\") but in this case, let's make it say \"Yes\". This will be written as =if(A1=B1,\"Yes\".(<strong>Protip!,</strong> within Excel, if ever you want to return something <em>other than a number</em> you always need to surround it in quotation marks.)</li><li>The value that you want to return if the value is false (leaving this blank will just write \"false\") in this case, let's make it say \"No\". This will be written as =if(A1=B1,\"Yes\",\"No\").</li></ol><p>After completing this formula with the three elements followed by a closing parenthesis, you'll get a cell that either says \"Yes\" or \"No\" depending on if A1 and B1 contain the same values. The powerful thing here is what comes next: by double clicking the lower right hand corner of the cell with the formula, it'll automatically populate all of the rows which are adjacent to information with Ax = Bx (where x equals the row number) allowing you to check each row to see if the two columns match!</p><p>To add an extra wrinkle, let's say you want to check to see if each cell in a column is equal to the values in a specific cell, you'd do that as follows: =if(A1 = $B$1,\"Yes\",\"No\"). If you then double click the cell as you did before, that will check every value in column A against ONLY the value in B1. By adding the dollar sign to the location of the cell, You've identified the \"Absolute Reference\" as opposed to the \"Relative Reference\". Feel free to disregard these names immediately, and start referring to it as \"dollar sign\". You can even manipulate it by only using the Absolute reference on the row (A$1) OR the column ($A1) if you're populating , vertically, horizontally, or both (yes, technically putting B$1 in the above example would have gotten you the same answers).</p><p>In summation, in this post we've learned:</p><ol><li>Excel is actually built on top of a \"real\" programming language called VBA.</li><li>You can write tiny programs in Excel through the function bar (or big programs through the command line...showoff).</li><li>All \"programming\" really is, is the manipulation of true/false statements underpinning the binary code even further beneath all computational tasks.</li><li>How to write your own \"If\" statement in Excel and how to \"phrase\" the returning of numbers vs. anything else using quotation marks.</li><li>How to utilize the absolute reference (AKA the \"Dollar Sign\") to change what gets included in the statements in each line of your spreadsheet.</li></ol><p>Next time, we'll get more grammatically complex, leveraging Ands and Ors in our Ifs. We might even get crazy and throw some Ifs in our Ifs...so you can drive while you drive.</p><p>Ever Upward,</p><p>-Snacks</p>","url":"https://hackersandslackers.com/getting-iffy-with-it-conditionals-in-excel/","uuid":"df65eee0-8935-4e9f-86d5-0c763c8baa08","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b1d4de445d23b542808c735"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867366a","title":"Taking Out the Trash: Dirty Data in Excel","slug":"dirty-data-in-excel-part-2","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/06/maxdataagain3@2x.jpg","excerpt":"Dealing With Dirty Data in Excel (continued).","custom_excerpt":"Dealing With Dirty Data in Excel (continued).","created_at_pretty":"05 June, 2018","published_at_pretty":"05 June, 2018","updated_at_pretty":"21 January, 2019","created_at":"2018-06-05T16:11:19.000-04:00","published_at":"2018-06-05T19:43:36.000-04:00","updated_at":"2019-01-21T13:40:46.000-05:00","meta_title":"Taking Out the Trash: Dirty Data in Excel | Hackers and Slackers","meta_description":"Dealing With Dirty Data in Excel (continued)","og_description":"Dealing With Dirty Data in Excel (continued)","og_image":"https://hackersandslackers.com/content/images/2018/06/maxdataagain3@2x.jpg","og_title":"Taking Out the Trash: Dirty Data in Excel","twitter_description":"Dealing With Dirty Data in Excel (continued)","twitter_image":"https://hackersandslackers.com/content/images/2018/06/maxdataagain3@2x.jpg","twitter_title":"Taking Out the Trash: Dirty Data in Excel","authors":[{"name":"Max Mileaf","slug":"snacks","bio":"One of three therapists in the known universe who knows how to use a computer. Finds meaning in highly protected data, in a cave, utilizing nothing but a box of scraps. ","profile_image":"https://hackersandslackers.com/content/images/2019/03/max2.jpg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Max Mileaf","slug":"snacks","bio":"One of three therapists in the known universe who knows how to use a computer. Finds meaning in highly protected data, in a cave, utilizing nothing but a box of scraps. ","profile_image":"https://hackersandslackers.com/content/images/2019/03/max2.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},"tags":[{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},{"name":"BI","slug":"business-intelligence","description":"Business Intelligence, otherwise known as \"making nice reports for executives to ignore.\"","feature_image":null,"meta_description":null,"meta_title":"Business Intelligence Tools | Hackers and Slackers","visibility":"public"},{"name":"Data Analysis","slug":"data-analysis","description":"Drawing meaningful conclusions from data. Includes interpretation, dashboard creation, and data manipulation.","feature_image":null,"meta_description":"Drawing meaningful conclusions from data. Includes interpretation, dashboard creation, and data manipulation.","meta_title":"Data Analysis | Hackers and Slackers","visibility":"public"},{"name":"#Adventures in Excel","slug":"adventures-in-excel","description":"Excel secrets and magic. The kind of industry knowledge that could put financial analysts out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"internal"}],"plaintext":"In my last post, we explored the organizational structure of many large\ncompanies and how this pertains to one's duties as a fledgling data analyst. I\nhighly recommend you go back and read the first post on \"dirty\" data, but just\nin case you're one of those rebels who thinks that they're too cool to read part\n1, here's a quick refresher to put you back in the analytical mindset (which is\nthe perfect combination tactical laziness, ADHD, and a complete disregard for\ndownside risk).\n\nEssentially, the reason why most data analysts exist within a company (remember,\nNOT a tech company, hence the usage of Excel) is because for whatever reason,\nmost companies do not give analysts access to the data on demand, and instead it\nis tightly controlled by a mysterious cabal of DBAs or developers which I have\nchristened the dataratti.\n\nWhile this setup is workable in theory, the dataratti often do not have a strong\nunderstanding of how the data is used in practice, and there are generally not\nopen lines of communication between the dataratti and the analysts. Thus it\nfalls upon the analyst to do three crucial jobs:\n\n 1. Obtain raw  data from the dataratti (remember, raw means that the data is\n    just a bunch of numbers, words, and headings...meaningless on their own).\n 2. manipulate  the data so that it's in a readable format and does not have\n    unnecessary data.\n 3. Present this data in narrative form to the business people.\n\nNow, you may be asking why they can't just hire someone who knows both sides of\nthis equation, the answer is sadly simple: manipulating data in a tool like\nExcel is antithetical to the general idea of how databases are created (we'll\ntalk about that some more next time) and thus someone who has both skill-sets,\nas well as the ability to present to stakeholders (remember, Those Who Sit Above\nin Shadow?) is extremely rare, and trying to become  that person may not be the\nbest idea because it may actually be cheaper to hire two employees than hire\nsomeone with chops in both skills (and you can't just know  how to\nmanipulate/present and code, you have to know both very well).\n\nWith all that being said, last time we discussed how one might grab data from\nthe dataratti from a tool like Tableau (which is essentially a data\nvisualization toolkit that's really good at creating dashboards, but can only\nhandle limited variables...a.k.a. columns, and exports the actual data in a\nparticularly messy way). Now we'll talk about one of the other possibilities for\nthe enterprising analyst to grab raw data: Business Intelligence (BI) tools.\n\nDespite how cool it sounds and despite it immediately conjuring thoughts of\nengaging in corporate espionage as part of the Business Intelligence Agency, BI\nis at it's core really just an interface where someone who didn't design a\ndatabase can still query (that literally means \"ask\") the database for the data\nthat they want.\n\nThe way this works is pretty straightforward: there will be an interface with a\nseries of folders (just like you'd see on a desktop) and within each, there will\nbe a list of variables that you can drag-and-drop into your query. After putting\nin all of the variables that you want in your report, you just hit \"go\" and\nit'll show you all of the data associated with the variables...essentially\nletting you grab data from the database without touching it, and without knowing\nSQL. To sweeten the already sweet deal, you can even generally manipulate the\ndata after the query is done but before downloading (using a very similar format\nto Excel, although, why fix what ain't broken?), and you can set it up to re-run\nwhatever query you decided upon on a regular schedule.\n\nWell then, doesn't that just sound ideal, why didn't I lead with this clearly\nsuperior strategy? Obviously, there's a catch: not only are BI toolkits VERY\nexpensive, the implementation of a BI tool requires an entire OTHER level of\nemployee between the coders and the analysts. Remember way back when, in a\nprevious post, I stated that databases only build on top of themselves and grow\nincreasingly unwieldy the longer your company is in existence? Also, remember\nwhen I stated that the developers rarely know why their users need the data\nwithin the database? Well, that leads to the developers coding their databases\nin a way that only they  truly understand (if we were talking about anything\nother than a database, I'd even say that their code is...inelegant). Now imagine\nhaving having to take this mess of code on top of code that's starting to look\nlike Tetsuo at the end of Akira, and translating all of it to plain English that\nsomeone with no knowledge of database structures would be able to understand,\nand you're starting to get an idea of the struggle that a BI developer has ahead\nof them. To make matters worse, each BI tool requires this to be done in a\nspecific way, so the skills are only moderately transferable. Of note, in a\ncompany that relies on their data quite a bit, and when their database is\nconsiderably large, this quickly becomes a full-time job, if not the job of a\nsmall team.\n\nNow, despite the considerable front-end investment in a good BI team, the\nflexibility of being able to grab data on-demand ends up being significantly\nbetter in the long-term, especially when an analyst knows how to use tableau\nthemselves, and can make super slick graphic representations of the data...and\neveryone knows that the way to a business person's heart is with sick graphics.\n\nIn summary, today we explored the following:\n\n * A refresher of the counter-intuitive model of data siloing within companies.\n * An explanation of the role of an analyst within this company hierarchy.\n * How BI tools work and what some of the benefits and challenges of\n   implementation may be.\n\nNow that you know why the data you get comes out dirty, next time, we'll explore\nsome examples of how your data may arrive, and how to sculpt your data so that\nyou can make it work for you.\n\nPaz,\n\n-Snacks","html":"<p>In my last post, we explored the organizational structure of many large companies and how this pertains to one's duties as a fledgling data analyst. I highly recommend you go back and read the first post on \"dirty\" data, but just in case you're one of those rebels who thinks that they're too cool to read part 1, here's a quick refresher to put you back in the analytical mindset (which is the perfect combination tactical laziness, ADHD, and a complete disregard for downside risk).</p><p>Essentially, the reason why most data analysts exist within a company (remember, NOT a tech company, hence the usage of Excel) is because for whatever reason, most companies do not give analysts access to the data on demand, and instead it is tightly controlled by a mysterious cabal of DBAs or developers which I have christened the <em>dataratti</em>.</p><p>While this setup is workable in theory, the dataratti often do not have a strong understanding of how the data is used in practice, and there are generally not open lines of communication between the dataratti and the analysts. Thus it falls upon the analyst to do three crucial jobs:</p><ol><li>Obtain <em>raw</em> data from the dataratti (remember, raw means that the data is just a bunch of numbers, words, and headings...meaningless on their own).</li><li><strong>manipulate</strong> the data so that it's in a readable format and does not have unnecessary data.</li><li>Present this data in narrative form to the <em>business people</em>.</li></ol><p>Now, you may be asking why they can't just hire someone who knows both sides of this equation, the answer is sadly simple: manipulating data in a tool like Excel is antithetical to the general idea of how databases are created (we'll talk about that some more next time) and thus someone who has both skill-sets, as well as the ability to present to stakeholders (remember, Those Who Sit Above in Shadow?) is extremely rare, and trying to <em>become</em> that person may not be the best idea because it may actually be cheaper to hire two employees than hire someone with chops in both skills (and you can't just <em>know</em> how to manipulate/present and code, you have to know both very well).</p><p>With all that being said, last time we discussed how one might grab data from the dataratti from a tool like Tableau (which is essentially a data visualization toolkit that's really good at creating dashboards, but can only handle limited variables...a.k.a. columns, and exports the actual data in a particularly messy way). Now we'll talk about one of the other possibilities for the enterprising analyst to grab raw data: Business Intelligence (BI) tools.</p><p>Despite how cool it sounds and despite it immediately conjuring thoughts of engaging in corporate espionage as part of the Business Intelligence Agency, BI is at it's core really just an interface where someone who didn't design a database can still query (that literally means \"ask\") the database for the data that they want.</p><p>The way this works is pretty straightforward: there will be an interface with a series of folders (just like you'd see on a desktop) and within each, there will be a list of variables that you can drag-and-drop into your query. After putting in all of the variables that you want in your report, you just hit \"go\" and it'll show you all of the data associated with the variables...essentially letting you grab data from the database without touching it, and without knowing SQL. To sweeten the already sweet deal, you can even generally manipulate the data after the query is done but before downloading (using a very similar format to Excel, although, why fix what ain't broken?), and you can set it up to re-run whatever query you decided upon on a regular schedule.</p><p>Well then, doesn't that just sound ideal, why didn't I lead with this clearly superior strategy? Obviously, there's a catch: not only are BI toolkits VERY expensive, the implementation of a BI tool requires an entire OTHER level of employee between the coders and the analysts. Remember way back when, in a previous post, I stated that databases only build on top of themselves and grow increasingly unwieldy the longer your company is in existence? Also, remember when I stated that the developers rarely know why their users need the data within the database? Well, that leads to the developers coding their databases in a way that only <em>they</em> truly understand (if we were talking about anything other than a database, I'd even say that their code is...inelegant). Now imagine having having to take this mess of code on top of code that's starting to look like Tetsuo at the end of Akira, and translating all of it to plain English that someone with no knowledge of database structures would be able to understand, and you're starting to get an idea of the struggle that a BI developer has ahead of them. To make matters worse, each BI tool requires this to be done in a specific way, so the skills are only moderately transferable. Of note, in a company that relies on their data quite a bit, and when their database is considerably large, this quickly becomes a full-time job, if not the job of a small team.</p><p>Now, despite the considerable front-end investment in a good BI team, the flexibility of being able to grab data on-demand ends up being significantly better in the long-term, especially when an analyst knows how to use tableau themselves, and can make super slick graphic representations of the data...and everyone knows that the way to a business person's heart is with sick graphics.</p><p>In summary, today we explored the following:</p><ul><li>A refresher of the counter-intuitive model of data siloing within companies.</li><li>An explanation of the role of an analyst within this company hierarchy.</li><li>How BI tools work and what some of the benefits and challenges of implementation may be.</li></ul><p>Now that you know why the data you get comes out dirty, next time, we'll explore some examples of how your data may arrive, and how to sculpt your data so that you can make it work for you.</p><p>Paz,</p><p>-Snacks</p>","url":"https://hackersandslackers.com/dirty-data-in-excel-part-2/","uuid":"ebf58744-d2fb-4210-8e99-06fa163ba193","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b16ee675bd3653f82f3a947"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673661","title":"Dealing with Dirty Data in Excel","slug":"dealing-with-dirty-data-in-excel","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/05/max@2x.jpg","excerpt":"Cleaning data Excel in the absence of tools designed to do so.","custom_excerpt":"Cleaning data Excel in the absence of tools designed to do so.","created_at_pretty":"30 May, 2018","published_at_pretty":"31 May, 2018","updated_at_pretty":"21 January, 2019","created_at":"2018-05-30T03:45:53.000-04:00","published_at":"2018-05-31T09:11:14.000-04:00","updated_at":"2019-01-21T13:41:02.000-05:00","meta_title":"Dealing with Dirty Data in Excel | Hackers and Slackers","meta_description":"Cleaning data Excel in the absence of tools designed to do so.","og_description":"Cleaning data Excel in the absence of tools designed to do so.","og_image":"https://hackersandslackers.com/content/images/2018/05/max@2x.jpg","og_title":"Dealing with Dirty Data in Excel","twitter_description":"Cleaning data Excel in the absence of tools designed to do so.","twitter_image":"https://hackersandslackers.com/content/images/2018/05/max@2x.jpg","twitter_title":"Dealing with Dirty Data in Excel","authors":[{"name":"Max Mileaf","slug":"snacks","bio":"One of three therapists in the known universe who knows how to use a computer. Finds meaning in highly protected data, in a cave, utilizing nothing but a box of scraps. ","profile_image":"https://hackersandslackers.com/content/images/2019/03/max2.jpg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Max Mileaf","slug":"snacks","bio":"One of three therapists in the known universe who knows how to use a computer. Finds meaning in highly protected data, in a cave, utilizing nothing but a box of scraps. ","profile_image":"https://hackersandslackers.com/content/images/2019/03/max2.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},"tags":[{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},{"name":"Data Analysis","slug":"data-analysis","description":"Drawing meaningful conclusions from data. Includes interpretation, dashboard creation, and data manipulation.","feature_image":null,"meta_description":"Drawing meaningful conclusions from data. Includes interpretation, dashboard creation, and data manipulation.","meta_title":"Data Analysis | Hackers and Slackers","visibility":"public"},{"name":"#Adventures in Excel","slug":"adventures-in-excel","description":"Excel secrets and magic. The kind of industry knowledge that could put financial analysts out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"internal"}],"plaintext":"In my last post, we discussed what separates a true  analyst (read: technical)\nfrom a project manager wearing the mask of an analyst like some Scott Snyder era\nJoker (I figure that there's a solid overlap between fans of comic books and\nfans of the real world application of data. Note that this is a study with an N\n= 1 so it bares no statistical significance, but I have a funny feeling...call\nit spidey sense).\n\nFull disclosure, this post comes mostly out of my inability to sleep in my hotel\nroom in Chicago following a grueling day of doing the very things I discuss in\nthis blog, and preceding a day where I'll have to literally explain my last post\nto the suits, but perhaps this is the best mindset to begin discussing the\nmyriad ways in which you may encounter dirty data in the wild, and how a savvy\nanalyst may pivot and match their way around it. However, if my prose isn't as\non point as you have grown accustomed...blame it on the 4AM haze.\n\nAlas, let's begin by discussing the organizational structure of the majority of\ncorporate entities that leverage data to some degree (note, this isn't all\ncorporations...and what does that say about the state of business?) and how, at\neach step of abstraction in this process that you are from the data, the data\ngets dirtier and dirtier.\n\nEssentially, there's always going to be a group of about 5-10\nfewer-than-necessary legitimately skilled data scientists and/or computer\nprogrammers/DBAs who are really solid at building and maintaining a database as\nwell as coding in some sort of compiling language (nowadays, that's probably\npython, but not exclusively, nor does this matter). However, depending on your\nindustry (unless of course your industry IS data), it's nearly impossible to\nrecruit people who have these skills to the level necessary AND have some\nfamiliarity with why this data is needed, and/or the ability to explain how the\ninternal products that they build can be used by an end user. As such, this team\nhas their own project manager(s) who's only job is to keep these guys from\ndeveloping a sentient AI that's sole goal is the annihilation of unfolded\nlaundry...when your industry is healthcare. This team should also have at least\none analyst who will take the raw code base and do the first step of translation \n to a more user friendly form. This generally takes shape as either dashboards\nin a system like Tableau, or  if your company has a group of particularly strong\ndata/business analysts (or particularly weak programmers) an interface written\nin plain(enough) English on a Business Intelligence platform such as Microsoft\nBI/SAP Business Objects or whatever other system your company utilizes. As a fun\nlittle note, this team ALMOST ALWAYS  is referred to by some sort of acronym\nsuch as QDAR! (Quality data and reporting!) or KMnR! (Knowledge management and\nreporting!) or Those Fucking Guys (who have something to do with reporting)\n(TFG(whstdwr)). On a less fun little note...neither you, nor seemingly ANYONE\nELSE will have contact with this team. In light of this information, how do the\nreports that they build get chosen and who decides how these databases are\nbuilt? The world may never know.\n\nSo let's assume the first type of reporting: the Dataratti  (which is how I will\nrefer to the acronym defined team described above moving forward) produces\ndashboards utilizing a tool such as Tableau or Crystal Reports. You may be\nthinking to yourself: \"hey, isn't my job taking the data and putting it in a\nform where people who are scared by more than two nested groups of parenthesis,\nand thus this renders my job unnecessary?\" The answer to the question is\ntwofold: Yes, and of course not! As mentioned previously, the decision to create\nthese dashboards, the data contained therein, and how you want them to look is\ndecided upon by a mythical creature who has full access and understanding of the\ndata warehouse, AND has full access to and understanding of the stakeholders\n(AKA, Those Who Sit Above in Shadow; that's a reference from a famous run of\nThor comics that refers to to a mysterious cabal of gods who perpetuate the\ncycle of Ragnarok in order to subsist upon the energies created by this\nstrife...which as I write this, is an almost disgustingly on-the-nose metaphor\nfor upper management). Now, if you believe that you may be this mythical\ncreature (as I do), I DARE  you to apply for a job with this job description,\nand once you clinch it with the advice from this blog,  rapidly realize that\nyour job will involve either one of these job duties or the other.\n\nWith that digression, even if somehow a useful dashboard for YOU is created, the\nlimitations inherent in these dashboarding tools make one CRUCIAL issue\nomnipresent: one can only effectively illustrate up to 16 different variables at\na time before the system breaks down (for example, Tableau's documentation\nspecifically warns against this). So even if you have the nicest, most\nillustrative dashboards on the planet from the Dataratti, there is a nearly 100%\nchance that the information that you actually need will be scattered across 2-3\ndifferent dashboards...rendering the nice looking dashboards essentially useless\nfor your purposes, and as previously stated, you have no contact with the\nDataratti, nor do you have access to the underlying data from which these\ndashboards are created. So pop quiz hot shot, what DO you do?\n\nWell, mercifully, all of these dashboard tools allow an end user to download a\n\"data dump\" (our parlance for \"a buncha numbers with headings\"). Using Tableau\nas an example, one can download either a \"crosstab\" or a text file of the data\nrepresented by the dashboard (in both \"summary\" and \"full data\" format). Now,\njust to get the truly gifted in Tableau off my back, yes, the functionality does\nexist to build in the ability to download the data in the exact format necessary\nfor your  needs through a specific combination of custom web server views and\nJavascript, but...\n\n 1. If the users of the dash are exclusively using this function, why do the\n    dashboard at all? And...\n 2. This forces the developers in the Dataratti to have decent web design skills\n    on top of really high level Tableau skills, and it requires someone to\n    anticipate exactly how the data will be used by the end user by the\n    Dataratti (which is incredibly hard as it's impossible to speak to this\n    department directly, and as previously stated, the lack of this  knowledge\n    on their end is the entire reason why my department exists).\n\nA few things to note before downloading data from Tableau:\n\n * You must highlight at least one element of the dashboard before downloading a\n   crosstab.\n * Depending on what kind of dashboard you're working with, you may need to\n   highlight the entirety of one column in order to capture the entirety of your\n   data (click the first element in any column  and then scroll down to the\n   bottom of the report...which may be enormously long, hit shift  and click the\n   last element in the report) before downloading either the data or the\n   crosstab.\n * If you are downloading a crosstab, be wary, Tableau web server caps how many\n   rows you can download in this method at a time, this can be avoided by\n   downloading the text version of the data (by clicking data as opposed to\n   crosstab). HOWEVER...\n * If you are going the data route, it defaults to summary view. Look over all\n   the headings, and ensure that this covers everything you need, otherwise\n   click \"full data\". Interestingly, this still isn't actually the entirety of\n   your data, and continue to check to make sure all of your headings are\n   covered, otherwise, click the display all columns  box, and then download all\n   the rows as a text file.\n\nNow, repeat these steps until all of the data that you need in your  report is\ncontained across these text files (.csv, AKA the Comma Separated Value file\ntype). With all that lunacy completed, you now have several sheets with some\ncommon columns, but all with different information; only some of which you need,\nso what do you think you do?\n\nSimple, you use the tools given to you in the previous posts: you lookup  on the\ncommon factors across the sheets and return the data that you want until you\nhave all the data you need, in the correct order, on one sheet, and then\ndepending on the ask, you may want to pivot that data out in order to summarize \nthe whole mess of data. THIS IS YOUR FINAL PRODUCT  well done. Another protip:\nif you want to reposition data that you've obtained via a lookup, highlight the\nwhole column, hit control+C  to copy the data and then hit control+V  pause a\nsecond (press NOTHING else) and then press control FOLLOWED by V. This takes the\nvalues generated by a formula and replaces them with the values obtained.\nFunctionally, this looks  exactly the same, but now you can move the data around\nwithout affecting or being affected by other data.\n\nAs explaining only one possible dirty data scenario took over 1500 words, next\ntime, we'll discuss the other most common form of taking the dirty data from the\nDataratti and making it useful to you: using business intelligence portals as\nopposed to dashboards in order to grab the data that you need. Also, if I don't\nget roasted on a spit for being half asleep for tomorrow's (today's?) meeting,\nI'll try and write up a companion post with an example of how this works out in\npractice.\n\nIn summary, in this post we've learned:\n\n 1. How data is generally siloed and sequestered within the corporate\n    environment, leading to a bevy of unnecessary steps on behalf of the analyst\n    in order to distill a functional report for the powers-that-be\n 2. Two major methods in which data comes from the data team (henceforth known\n    as the Dataratti) to your team: Dashboards and Business Intelligence\n    interfaces, and...\n 3. Assuming you get data in the form of dashboards, how to take these\n    dashboards, download the underlying data, recombine and manipulate the data,\n    and package it in a way acceptable for your needs.\n\nCongrats, you've just learned the crucial skill of the Slice n' Dice!\n\nQuite sleepily,\n\n-Snacks","html":"<p>In my last post, we discussed what separates a <em>true</em> analyst (read: technical) from a project manager wearing the mask of an analyst like some Scott Snyder era Joker (I figure that there's a solid overlap between fans of comic books and fans of the real world application of data. Note that this is a study with an N = 1 so it bares no statistical significance, but I have a funny feeling...call it spidey sense).</p><p>Full disclosure, this post comes mostly out of my inability to sleep in my hotel room in Chicago following a grueling day of doing the very things I discuss in this blog, and preceding a day where I'll have to literally explain my last post to the suits, but perhaps this is the best mindset to begin discussing the myriad ways in which you may encounter dirty data in the wild, and how a savvy analyst may pivot and match their way around it. However, if my prose isn't as on point as you have grown accustomed...blame it on the 4AM haze.</p><p>Alas, let's begin by discussing the organizational structure of the majority of corporate entities that leverage data to some degree (note, this isn't all corporations...and what does that say about the state of business?) and how, at each step of abstraction in this process that you are from the data, the data gets dirtier and dirtier.</p><p>Essentially, there's always going to be a group of about 5-10 fewer-than-necessary legitimately skilled data scientists and/or computer programmers/DBAs who are really solid at building and maintaining a database as well as coding in some sort of compiling language (nowadays, that's probably python, but not exclusively, nor does this matter). However, depending on your industry (unless of course your industry IS data), it's nearly impossible to recruit people who have these skills to the level necessary AND have some familiarity with why this data is needed, and/or the ability to explain how the internal products that they build can be used by an end user. As such, this team has their own project manager(s) who's only job is to keep these guys from developing a sentient AI that's sole goal is the annihilation of unfolded laundry...when your industry is healthcare. This team should also have at least one analyst who will take the raw code base and do the <strong>first step of translation</strong> to a more user friendly form. This generally takes shape as either dashboards in a system like Tableau, <strong>or</strong> if your company has a group of particularly strong data/business analysts (or particularly weak programmers) an interface written in plain(enough) English on a Business Intelligence platform such as Microsoft BI/SAP Business Objects or whatever other system your company utilizes. As a fun little note, this team <strong>ALMOST ALWAYS</strong> is referred to by some sort of acronym such as QDAR! (Quality data and reporting!) or KMnR! (Knowledge management and reporting!) or Those Fucking Guys (who have something to do with reporting) (TFG(whstdwr)). On a less fun little note...neither you, nor seemingly ANYONE ELSE will have contact with this team. In light of this information, how do the reports that they build get chosen and who decides how these databases are built? The world may never know.</p><p>So let's assume the first type of reporting: the Dataratti  (which is how I will refer to the acronym defined team described above moving forward) produces dashboards utilizing a tool such as Tableau or Crystal Reports. You may be thinking to yourself: \"hey, isn't my job taking the data and putting it in a form where people who are scared by more than two nested groups of parenthesis, and thus this renders my job unnecessary?\" The answer to the question is twofold: Yes, and of course not! As mentioned previously, the decision to create these dashboards, the data contained therein, and how you want them to look is decided upon by a mythical creature who has full access and understanding of the data warehouse, AND has full access to and understanding of the stakeholders (AKA, <strong>Those Who Sit Above in Shadow</strong>; that's a reference from a famous run of Thor comics that refers to to a mysterious cabal of gods who perpetuate the cycle of Ragnarok in order to subsist upon the energies created by this strife...which as I write this, is an almost disgustingly on-the-nose metaphor for upper management). Now, if you believe that you may be this mythical creature (as I do), I <em>DARE</em> you to apply for a job with this job description, and once you clinch it with the advice from this blog,  rapidly realize that your job will involve either one of these job duties or the other.</p><p>With that digression, even if somehow a useful dashboard for YOU is created, the limitations inherent in these dashboarding tools make one CRUCIAL issue omnipresent: one can only effectively illustrate up to 16 different variables at a time before the system breaks down (for example, Tableau's documentation specifically warns against this). So even if you have the nicest, most illustrative dashboards on the planet from the Dataratti, there is a nearly 100% chance that the information that you actually need will be scattered across 2-3 different dashboards...rendering the nice looking dashboards essentially useless for your purposes, and as previously stated, you have no contact with the Dataratti, nor do you have access to the underlying data from which these dashboards are created. So pop quiz hot shot, what DO you do?</p><p>Well, mercifully, all of these dashboard tools allow an end user to download a \"data dump\" (our parlance for \"a buncha numbers with headings\"). Using Tableau as an example, one can download either a \"crosstab\" or a text file of the data represented by the dashboard (in both \"summary\" and \"full data\" format). Now, just to get the truly gifted in Tableau off my back, yes, the functionality does exist to build in the ability to download the data in the exact format necessary for <em>your</em> needs through a specific combination of custom web server views and Javascript, but...</p><ol><li>If the users of the dash are exclusively using this function, why do the dashboard at all? And...</li><li>This forces the developers in the Dataratti to have decent web design skills on top of really high level Tableau skills, and it requires someone to anticipate exactly how the data will be used by the end user by the Dataratti (which is incredibly hard as it's impossible to speak to this department directly, and as previously stated, the lack of <em>this</em> knowledge on their end is the entire reason why my department exists).</li></ol><p>A few things to note before downloading data from Tableau:</p><ul><li>You must highlight at least one element of the dashboard before downloading a crosstab.</li><li>Depending on what kind of dashboard you're working with, you may need to highlight the entirety of one column in order to capture the entirety of your data (<strong>click the first element in any column</strong> and then scroll down to the bottom of the report...which may be enormously long, <strong>hit shift</strong> and click the last element in the report) before downloading either the data or the crosstab.</li><li>If you are downloading a crosstab, be wary, Tableau web server caps how many rows you can download in this method at a time, this can be avoided by downloading the text version of the data (by clicking data as opposed to crosstab). HOWEVER...</li><li>If you are going the data route, it defaults to summary view. Look over all the headings, and ensure that this covers everything you need, otherwise click <strong>\"full data\"</strong>. Interestingly, this still isn't actually the entirety of your data, and continue to check to make sure all of your headings are covered, otherwise, click the <strong>display all columns</strong> box, and then download all the rows as a text file.</li></ul><p>Now, repeat these steps until all of the data that you need in <em>your</em> report is contained across these text files (.csv, AKA the Comma Separated Value file type). With all that lunacy completed, you now have several sheets with some common columns, but all with different information; only some of which you need, so what do you think you do?</p><p>Simple, you use the tools given to you in the previous posts: you <em>lookup</em> on the common factors across the sheets and return the data that you want until you have all the data you need, in the correct order, on one sheet, and then depending on the ask, you may want to pivot that data out in order to <em>summarize</em> the whole mess of data. <strong>THIS IS YOUR FINAL PRODUCT</strong> well done. Another protip: if you want to reposition data that you've obtained via a lookup, highlight the whole column, hit <strong>control+C</strong> to copy the data and then hit <strong>control+V</strong> pause a second (press NOTHING else) and then press <strong>control FOLLOWED by V</strong>. This takes the values generated by a formula and replaces them with the values obtained. Functionally, this <em>looks</em> exactly the same, but now you can move the data around without affecting or being affected by other data.</p><p>As explaining only one possible dirty data scenario took over 1500 words, next time, we'll discuss the other most common form of taking the dirty data from the Dataratti and making it useful to you: using business intelligence portals as opposed to dashboards in order to grab the data that you need. Also, if I don't get roasted on a spit for being half asleep for tomorrow's (today's?) meeting, I'll try and write up a companion post with an example of how this works out in practice.</p><p>In summary, in this post we've learned:</p><ol><li>How data is generally siloed and sequestered within the corporate environment, leading to a bevy of unnecessary steps on behalf of the analyst in order to distill a functional report for the powers-that-be</li><li>Two major methods in which data comes from the data team (henceforth known as the Dataratti) to your team: Dashboards and Business Intelligence interfaces, and...</li><li>Assuming you get data in the form of dashboards, how to take these dashboards, download the underlying data, recombine and manipulate the data, and package it in a way acceptable for your needs.</li></ol><p>Congrats, you've just learned the crucial skill of the <em>Slice n' Dice</em>!</p><p>Quite sleepily,</p><p>-Snacks</p>","url":"https://hackersandslackers.com/dealing-with-dirty-data-in-excel/","uuid":"4753f845-b70e-4159-9a45-90753b8620b4","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b0e56b16cb7ee206e3e518a"}}]}},"pageContext":{"slug":"excel","limit":12,"skip":0,"numberOfPages":2,"humanPageNumber":1,"prevPageNumber":null,"nextPageNumber":2,"previousPagePath":null,"nextPagePath":"/tag/excel/page/2/"}}