{"data":{"ghostPost":{"id":"Ghost__Post__5c12d7bfe875ad7bb867369e","title":"Getting Conda Envs (And Environment Variables!) To Play Nicely With Cron","slug":"conda-environments-and-cron","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/07/anaconda@2x.jpg","excerpt":"Set up CRON jobs to interact with Conda environments.","custom_excerpt":"Set up CRON jobs to interact with Conda environments.","created_at_pretty":"05 July, 2018","published_at_pretty":"09 July, 2018","updated_at_pretty":"14 April, 2019","created_at":"2018-07-05T19:27:38.000-04:00","published_at":"2018-07-09T07:00:00.000-04:00","updated_at":"2019-04-14T14:43:06.000-04:00","meta_title":"Getting Conda To Play Nicely With Cron | Hackers and Slackers","meta_description":"Setting up multiple Conda environments with separate databases to simulate a development-to-production workflow.","og_description":"Setting up multiple Conda environments with separate databases to simulate a development-to-production workflow.","og_image":"https://hackersandslackers.com/content/images/2018/07/anaconda@2x.jpg","og_title":"Getting Conda Envs (And Environment Variables!) To Play Nicely With Cron","twitter_description":"Setting up multiple Conda environments with separate databases to simulate a development-to-production workflow.","twitter_image":"https://hackersandslackers.com/content/images/2018/07/anaconda@2x.jpg","twitter_title":"Getting Conda Envs (And Environment Variables!) To Play Nicely With Cron","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Data Science","slug":"datascience","description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","feature_image":null,"meta_description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","meta_title":"Data Science | Hackers and Slackers","visibility":"public"},{"name":"Code Snippet Corner","slug":"codesnippetcorner","description":"Real-world examples of Python being used to solve complex data problems, primarily using Jupyter notebooks.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o-1.jpg","meta_description":"Real-world examples of Python being used to solve complex data problems.","meta_title":"Python Code Snippet Corner","visibility":"public"},{"name":"#Code Snippet Corner","slug":"code-snippet-corner","description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o_o.jpg","meta_description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","meta_title":"Python Code Snippet Corner","visibility":"internal"}],"plaintext":"This isn't really a tutorial on cron  in general; Better people at Linux have\nwritten way better ones than I could write.  Here's one: \nhttp://mediatemple.net/blog/news/complete-beginners-guide-cron-part-1/   This is\nmore of a code journaling exercise for a problem that I didn't find a\nneat-and-tidy answer to online when I was looking for it, and that I presume at\nleast one person will encounter at some point between now and the heat death of\nthe universe.\n\nLet's say you've got two different Conda envs:production  and development.\n Let's say that, in addition to having different packages installed, they each\nuse a separate database - development  writes to one that you can wipe and\nreconstruct to your heart's content, while production  gets used for stuff that\nactually affects customers.\n\nNot a problem!  Just a teensy bit of fiddling and you're there.  From the\nofficial docs: \nhttps://conda.io/docs/user-guide/tasks/manage-environments.html#macos-and-linux\n\nSo, for our purposes, let's say we want to set the variables from the \ndevelopment  environment.  First we create two folders to hold a simple .sh \nscript toactivate  and deactivate  the relevant environment variables:\n\n$ cd /home/matt/anaconda3/envs/development\n$ mkdir -p ./etc/conda/activate.d\n$ mkdir -p ./etc/conda/deactivate.d\n$ touch ./etc/conda/activate.d/env_vars.sh\n$ touch ./etc/conda/deactivate.d/env_vars.sh\n\n\nThen let's add the info for the database we want to access.  Edit \n./etc/conda/activate.d/env_vars.sh  to say:\n\n#!/bin/sh\n\nexport db-string='mysql+pymysql://dev:password@localhost/dev-db'\n\n\nNow edit ./etc/conda/deactivate.d/env_vars.sh  to say:\n\n#!/bin/sh\n\nunset db-string\n\n\nPresto!  Now if you source activate development  and run a script it'll all go\ngreat!\n\nCron Craziness\nIf you're running scripts by hand, this is all great.  It wouldn't even have\nwarranted a blog post!  However, a little hiccup occurs if you try to have cron \n(or something that wraps cron  - I was using the cool Ruby gem whenever  because\nthat was what was running stuff on the job server my stuff was running on) run\nthe script.\n\nI naively tried to have cron  activate the env, run it, then deactivate it.\n\nsource activate production; python /home/matta/python_workspace/dbUpdater.py; source deactivate\n\n\nThis did not work.  Research lead me to believe the reason involved rules about\nspawning subshells, a concept I vaguely understand.  What I understood more\nconcretely, however, was that this was not going to work.\n\nRun It With The Packages You Want\nEventually I discovered that I at least had access to the environment's packages\nif, instead of running the script by calling python, I ran it by calling the \npython  in the env itself.  Sooo...\n\n/home/matt/anaconda3/envs/development/bin/python /home/matta/python_workspace/dbUpdater.py\n\n\nSadly, we still have a problem - it's not loading our environment variables!\n This makes sense - Python doesn't know where those variables are, they get\nexported when we call source activate development.\n\nSourcing the Env Variables\nBuuut, since exporting the variables just happens in a .sh  script, we can run\nit directly!\n\nsource /home/matt/anaconda3/envs/development/etc/conda/activate.d/env_vars.sh ; /home/matt/anaconda3/envs/development/bin/python /home/matta/python_workspace/dbUpdater.py\n\n\nRuns in the terminal!  Should run in the cron, right?\n\nWell, in the moral sense it \"should\" - unfortunately, it does not.\n\nIt turns out that source  is actually an alias for a command whose True Name is \n..  For reasons I will not pretend to understand, cron  does not know this, and\nwill not be taught.  It is we who shall have to adjust to the machine's\npreferences.\n\nPutting It All Together\nThe command we want is:\n\n. /home/matt/anaconda3/envs/development/etc/conda/activate.d/env_vars.sh ; /home/matt/anaconda3/envs/development/bin/python /home/matta/python_workspace/dbUpdater.py\n\n\nLet's say we want it to run every day at 3AM UTC:\n\n* 3 * * * . /home/matt/anaconda3/envs/development/etc/conda/activate.d/env_vars.sh ; /home/matt/anaconda3/envs/development/bin/python /home/matta/python_workspace/dbUpdater.py\n\n\nAnd to add it directly to your crontab\n\ncrontab -l | { /bin/cat; /bin/echo \"* 3 * * * . /home/matt/anaconda3/envs/development/etc/conda/activate.d/env_vars.sh ; /home/matt/anaconda3/envs/development/bin/python /home/matta/python_workspace/dbUpdater.py\"; } | crontab -","html":"<p>This isn't really a tutorial on <code>cron</code> in general; Better people at Linux have written way better ones than I could write.  Here's one: <a href=\"http://mediatemple.net/blog/news/complete-beginners-guide-cron-part-1/\">http://mediatemple.net/blog/news/complete-beginners-guide-cron-part-1/</a>  This is more of a code journaling exercise for a problem that I didn't find a neat-and-tidy answer to online when I was looking for it, and that I presume at least one person will encounter at some point between now and the heat death of the universe.</p><p>Let's say you've got two different Conda envs:  <code>production</code> and <code>development</code>.  Let's say that, in addition to having different packages installed, they each use a separate database - <code>development</code> writes to one that you can wipe and reconstruct to your heart's content, while <code>production</code> gets used for stuff that actually affects customers.</p><p>Not a problem!  Just a teensy bit of fiddling and you're there.  From the official docs: <a href=\"https://conda.io/docs/user-guide/tasks/manage-environments.html#macos-and-linux\">https://conda.io/docs/user-guide/tasks/manage-environments.html#macos-and-linux</a></p><p>So, for our purposes, let's say we want to set the variables from the <code>development</code> environment.  First we create two folders to hold a simple <code>.sh</code> script to  <code>activate</code> and <code>deactivate</code> the relevant environment variables:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">$ cd /home/matt/anaconda3/envs/development\n$ mkdir -p ./etc/conda/activate.d\n$ mkdir -p ./etc/conda/deactivate.d\n$ touch ./etc/conda/activate.d/env_vars.sh\n$ touch ./etc/conda/deactivate.d/env_vars.sh\n</code></pre>\n<!--kg-card-end: markdown--><p>Then let's add the info for the database we want to access.  Edit <code>./etc/conda/activate.d/env_vars.sh</code> to say:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">#!/bin/sh\n\nexport db-string='mysql+pymysql://dev:password@localhost/dev-db'\n</code></pre>\n<!--kg-card-end: markdown--><p>Now edit <code>./etc/conda/deactivate.d/env_vars.sh</code> to say:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">#!/bin/sh\n\nunset db-string\n</code></pre>\n<!--kg-card-end: markdown--><p>Presto!  Now if you <code>source activate development</code> and run a script it'll all go great!</p><h2 id=\"cron-craziness\">Cron Craziness</h2><p>If you're running scripts by hand, this is all great.  It wouldn't even have warranted a blog post!  However, a little hiccup occurs if you try to have <code>cron</code> (or something that wraps <code>cron</code> - I was using the cool Ruby gem <code>whenever</code> because that was what was running stuff on the job server my stuff was running on) run the script.</p><p>I naively tried to have <code>cron</code> activate the env, run it, then deactivate it.</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">source activate production; python /home/matta/python_workspace/dbUpdater.py; source deactivate\n</code></pre>\n<!--kg-card-end: markdown--><p>This did not work.  Research lead me to believe the reason involved rules about spawning <code>subshells</code>, a concept I vaguely understand.  What I understood more concretely, however, was that this was not going to work.</p><h2 id=\"run-it-with-the-packages-you-want\">Run It With The Packages You Want</h2><p>Eventually I discovered that I at least had access to the environment's packages if, instead of running the script by calling <code>python</code>, I ran it by calling the <code>python</code> in the env itself.  Sooo...</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">/home/matt/anaconda3/envs/development/bin/python /home/matta/python_workspace/dbUpdater.py\n</code></pre>\n<!--kg-card-end: markdown--><p>Sadly, we still have a problem - it's not loading our environment variables!  This makes sense - Python doesn't know where those variables are, they get exported when we call <code>source activate development</code>.</p><h2 id=\"sourcing-the-env-variables\">Sourcing the Env Variables</h2><p>Buuut, since exporting the variables just happens in a <code>.sh</code> script, we can run it directly!</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">source /home/matt/anaconda3/envs/development/etc/conda/activate.d/env_vars.sh ; /home/matt/anaconda3/envs/development/bin/python /home/matta/python_workspace/dbUpdater.py\n</code></pre>\n<!--kg-card-end: markdown--><p>Runs in the terminal!  Should run in the <code>cron</code>, right?</p><p>Well, in the moral sense it \"should\" - unfortunately, it does not.</p><p>It turns out that <code>source</code> is actually an alias for a command whose True Name is <code>.</code>.  For reasons I will not pretend to understand, <code>cron</code> does not know this, and will not be taught.  It is we who shall have to adjust to the machine's preferences.</p><h2 id=\"putting-it-all-together\">Putting It All Together</h2><p>The command we want is:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">. /home/matt/anaconda3/envs/development/etc/conda/activate.d/env_vars.sh ; /home/matt/anaconda3/envs/development/bin/python /home/matta/python_workspace/dbUpdater.py\n</code></pre>\n<!--kg-card-end: markdown--><p>Let's say we want it to run every day at 3AM UTC:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">* 3 * * * . /home/matt/anaconda3/envs/development/etc/conda/activate.d/env_vars.sh ; /home/matt/anaconda3/envs/development/bin/python /home/matta/python_workspace/dbUpdater.py\n</code></pre>\n<!--kg-card-end: markdown--><p>And to add it directly to your <code>crontab</code></p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">crontab -l | { /bin/cat; /bin/echo &quot;* 3 * * * . /home/matt/anaconda3/envs/development/etc/conda/activate.d/env_vars.sh ; /home/matt/anaconda3/envs/development/bin/python /home/matta/python_workspace/dbUpdater.py&quot;; } | crontab -\n</code></pre>\n<!--kg-card-end: markdown-->","url":"https://hackersandslackers.com/conda-environments-and-cron/","uuid":"348836b6-1358-4baf-8dd1-40db61f57f7c","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b3ea96ad0ac8a143588f37c"}},"pageContext":{"slug":"conda-environments-and-cron"}}