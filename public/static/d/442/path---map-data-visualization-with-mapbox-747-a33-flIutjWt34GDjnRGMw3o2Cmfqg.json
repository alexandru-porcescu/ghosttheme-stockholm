{"data":{"ghostPost":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673743","title":"Geographic Data Visualization with Mapbox","slug":"map-data-visualization-with-mapbox","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/12/mapbox@2x.jpg","excerpt":"Visualizing Geodata with Mapbox's API and Tools.","custom_excerpt":"Visualizing Geodata with Mapbox's API and Tools.","created_at_pretty":"07 December, 2018","published_at_pretty":"11 December, 2018","updated_at_pretty":"31 January, 2019","created_at":"2018-12-07T12:36:58.000-05:00","published_at":"2018-12-11T08:00:00.000-05:00","updated_at":"2019-01-31T17:52:32.000-05:00","meta_title":"Geographical Data Visualization with Mapbox | Hackers and Slackers","meta_description":"A collection of Map APIs that rivals Google Maps, plus Beautiful GeoData Visualization.","og_description":"A collection of Map APIs that rivals Google Maps, plus Beautiful GeoData Visualization.","og_image":"https://hackersandslackers.com/content/images/2018/12/mapbox@2x.jpg","og_title":"Geographic Data Visualization with Mapbox","twitter_description":"A collection of Map APIs that rivals Google Maps, plus Beautiful GeoData Visualization.","twitter_image":"https://hackersandslackers.com/content/images/2018/12/mapbox@2x.jpg","twitter_title":"Geographic Data Visualization with Mapbox","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Data Vis","slug":"datavis","description":"Visualize your data with charting tools like Matplotlib, Plotly, D3, Chart.js, Muze, Seaborn, and countless others. Primarily focused on programmatic visualization as opposed to Business Intelligence software.","feature_image":null,"meta_description":"Visualize your data with charting tools like Matplotlib, Plotly, D3, Chart.js, Muze, Seaborn, and countless others. Focused on programmatic visualization.","meta_title":"Data Visualization | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Data Vis","slug":"datavis","description":"Visualize your data with charting tools like Matplotlib, Plotly, D3, Chart.js, Muze, Seaborn, and countless others. Primarily focused on programmatic visualization as opposed to Business Intelligence software.","feature_image":null,"meta_description":"Visualize your data with charting tools like Matplotlib, Plotly, D3, Chart.js, Muze, Seaborn, and countless others. Focused on programmatic visualization.","meta_title":"Data Visualization | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"SaaS Products","slug":"saas","description":"Third-party products and services we’ve discovered to be diamonds in the rough. These are products we’ve included in our stack based on price and value add.","feature_image":null,"meta_description":"Third-party products and services we’ve discovered to be diamonds in the rough. These are products we’ve included in our stack based on price and value add.","meta_title":"Our Picks: SaaS Products | Hackers and Slackers","visibility":"public"},{"name":"#Mapping Data with Mapbox","slug":"mapping-data-with-mapbox","description":"A full exploration into Mapbox: the sweetheart of geovisualization amongst data scientists. Learn the core product or see why the API rivals Google Maps.","feature_image":"https://hackersandslackers.com/content/images/2019/03/mapbox.jpg","meta_description":"A full exploration into Mapbox: the sweetheart of geovisualization amongst data scientists. Learn the core product or see why the API rivals Google Maps.","meta_title":"Mapping Data with Mapbox","visibility":"internal"}],"plaintext":"There's a trend among those using Jupyter Notebooks (or equivalent) which leads\nme to believe humanity is coming to an important realization: Google Maps,  as\nan API is expensive.\n\nRegardless if Google maps is embedded as a consumer-facing widget, or part of a\nroutine data-pipeline, a single surge of high-traffic can leave enterprises with\nprice tags in the hundreds of thousands of dollars. In fact, I can hardly\nremember a product where this hadn't  become the case. One can hardly blame the\nsearch engine; after all, our tendency to ignore the Terms and Service\nagreements (as well as payment policies) has always been core to the Google\nbusiness model.  Even then, there are enough enterprises to go around to turn a\nblind eye and actually pay such a bill willingly without exploring alternatives.\n\nData Scientists in particular have no excuse for inaction when it comes to\nseeking a better alternative. As it turns out, there is  one, and it is Cheaper,\n Easier, and perhaps more Fully Featured  than its Google Maps counterpart. That\nproduct is Mapbox. \n\nMapbox  is much more than a Google API clone. The web product offers a plethora\nof UI-driven features that we can use to customize maps as well as save or\neffortlessly transform raw data into workable GeoJSON data without even touching\nan API (which, mind you, there is.... with SDKs in every conceivable language).\nWe're going to create a quick map visualization incorporating some real data to\nget introduced to Mapbox's functionality, but this is only the beginning.\nDownload the line we'll see just how easy it is to incorporate Mapbox in\nproducts like Plot.ly Dash  or even Jupyter Notebooks.\n\nX Marks the Spot\nBefore straying from reigning champion Google Maps, it's worth exploring the\nsignificance of the metric that brought us here first: price.\n\nMurphy's law clearly states \"Cash Rules Everything Around Me, C.R.E.A.M; get the\nmoney, Dolla dolla bill y'all.\"  Given this reality, a minimum requirement for\nMapbox should be it's pricing model when compared to Google's.\n\nMapbox Pricing Tiers\nPrice\n Web apps\n Mobile SDKs\n Free to Start\n\n$0\n\n50,000  map views /mo\n\n50,000  Geocoding requests /mo\n\n50,000  Directions requests /mo\n\n50,000  Matrix elements /mo\n\n50,000  Tilequery requests /mo\n\n50,000  map views /mo\n\n50,000  Geocoding requests /mo\n\n50,000  Directions requests /mo\n\n50,000  Matrix elements /mo\n\n50,000  Tilequery requests /mo\n\nAdditional Usage\n\n$0.50\n\n50,000  map views /mo\n\n50,000  Geocoding requests /mo\n\n50,000  Directions requests /mo\n\n50,000  Matrix elements /mo\n\n50,000  Tilequery requests /mo\n\n50,000  map views /mo\n\n50,000  Geocoding requests /mo\n\n50,000  Directions requests /mo\n\n50,000  Matrix elements /mo\n\n50,000  Tilequery requests /mo\n\nCompare this to Google's transparent pricing structure:\n\nGoogle API Pricing Tiers\nPrice\n Web apps\n Mobile SDKs\n Starter Pack\n\nBrown Paper Bag full of $20s\n\n5  and a half map views /mo\n\n11  times thinking about the API /mo\n\n6  verbal mentions of \"Google\" /mo\n\n2  directions to shitty parties /mo\n\n8  visits to anywhere /mo\n\n9  Android unlocks /mo\n\n12  Google queries for restaurants /mo\n\n3  \"OK Google\" queries /mo\n\n7  Accidental app opens /mo\n\n1  Creating the next \"Uber for X\" /mo\n\nAdditional Usage\n\nEleventy Billion Dollars\n\nUnlimited Requests!* \n\n*See Pricing \n\nUnlimited Requests!*\n\n*See Pricing\n\nSeems like a convincing point in the win column for Mapbox. If we stay within\nreason, Mapbox can essentially serve us as an entirely free service.\n\nSurely we must be missing something  since we're opting for free services\nthough, right? How do Mapbox visualizations stack up against Google Maps?\n\n\n[https://codepen.io/ro-ka/pen/ENoOjz/]  [https://codepen.io/ro-ka] \n[https://codepen.io]\n\nPardon my French here, but hot damn that map is dope.  There are plenty more\nexamples where that came from, but it's clear that Mapbox has lowkey stolen the\nhearts of the scientific analysis  market, while Google  concerns itself on the \nconsumer  and business  markets.\n\nTonight's Itinerary: Creating Dope Maps\nTo make some data art, we have a few items on our checklist:\n\n * Obtain a dataset with location-based data: In our case of routing, we need a\n   dataset with a set origin and destination per row.\n * Create direction object routes by running our dataset through the Mapbox API.\n    \n * Create a styled map for our presentation by using Mapbox's style editor.\n * Overlay our route data on our beautiful map.\n\nStep 1: Get Some Free Data\nNow that we've properly shit-talked Google, let's use Google. We're going to\nneed to get some good data, and BigQuery  has some awesome free datasets that we\ncan run wild with. I'll be opting for NYC's dataset on Citibike trips, as it\nprovides a clean set of data where starting and ending coordinates are always\npresent.\n\nGoogle Cloud's Free Dataset of Citibike TripsAs a side note, BigQuery is great.\nEven if you're only somewhat versed in SQL, BigQuery's syntax is essentially\nwhatever your first guess would be.\n\nGranted we only need the start and end locations to make our map, but i decided\nto take a bit extra for curiosity's sake:\n\nstart_namestart_latitudestart_longitudeend_nameend_latitudeend_longitude1 Ave &\nE 15 St40.732218530-73.9816555701 Ave & E 18 St40.733812192-73.9805442091 Ave &\nE 30 St40.741443870-73.975360820E 39 St & 2 Ave40.747803730-73.9734419001 Ave &\nE 62 St40.761227400-73.960940220E 75 St & 3 Ave40.771129270-73.9577229702 Ave &\nE 99 St40.786258600-73.9455257903 Ave & E 112 St40.795508000-73.9416060003 St &\n3 Ave40.675070500-73.98775226010 St & 7 Ave40.666207800-73.9819988603 St &\nProspect Park West40.668132000-73.9736383103 St & Prospect Park West40.668132000\n-73.9736383106 Ave & W 33 St40.749012710-73.988483950W 37 St & 5 Ave40.750380090\n-73.9833898808 Ave & W 52 St40.763707390-73.985161500Central Park S & 6 Ave\n40.765909360-73.97634151011 Ave & W 41 St40.760300960-73.998842220W 34 St & 11\nAve40.755941590-74.00211630012 Ave & W 40 St40.760875020-74.002776680W 42 St & 8\nAve40.757569900-73.990985070Allen St & E Houston St40.722055000-73.989111000Mott\nSt & Prince St40.723179580-73.994800120Allen St & Hester St40.716058660\n-73.991907590Greenwich St & N Moore St40.720434110-74.010206090Amsterdam Ave & W\n73 St40.779668090-73.980930448E 85 St & 3 Ave40.778012030-73.954071490Bank St &\nHudson St40.736528890-74.006180260MacDougal St & Prince St40.727102580\n-74.002970880Bank St & Washington St40.736196700-74.008592070W 4 St & 7 Ave S\n40.734011430-74.002938770Barclay St & Church St40.712912240-74.010202340Clinton\nSt & Tillary St40.696192000-73.991218000Berkeley Pl & 7 Ave40.675146839\n-73.975232095West Drive & Prospect Park West40.661063372-73.979452550Bialystoker\nPl & Delancey St40.716226440-73.982612060Reade St & Broadway40.714504510\n-74.005627890Broadway & W 24 St40.742354300-73.989150760South End Ave & Liberty\nSt40.711512000-74.015756000Broadway & W 29 St40.746200900-73.988557230Stanton St\n& Chrystie St40.722293460-73.991475350Broadway & W 56 St40.765265400\n-73.981923380Broadway & W 49 St40.760683271-73.984527290Broadway & W 58 St\n40.766953170-73.9816933305 Ave & E 78 St40.776321422-73.964273930Cadman Plaza E\n& Red Cross Pl40.699917550-73.989717730Leonard St & Church St40.717571000\n-74.005549000Cadman Plaza E & Tillary St40.695976830-73.990148920Lawrence St &\nWilloughby St40.692361780-73.986317460Carmine St & 6 Ave40.730385990\n-74.002149880W 27 St & 7 Ave40.746647000-73.993915000Central Park W & W 96 St\n40.791270000-73.964839000W 52 St & 6 Ave40.761329831-73.979820013Central Park\nWest & W 76 St40.778967840-73.973747370Central Park S & 6 Ave40.765909360\n-73.976341510Step 2: Style a Sexy Map in Mapbox Studio\nMapbox provides a superb web UI labeled “studio” interface to help us get\nstarted. The “studio” web UI is separated into three parts: custom map styles, \ntilesets, and datasets.\n\nAll of these can we saved for later use.These three sections can be summarized\nas:\n\n * Styles: Custom map styles editable via a GUI, which produce a stylesheet for\n   convenience \n * Tilesets: Map overlays we can apply from our own data or otherwise to segment\n   geographical areas\n * Datasets:  Data containing anything from points on a map to complex direction\n   routes we can overlay atop our map.\n\nHere's a quick look at the Map style editor:\n\nI want to wake up, in a city that doesn't sleep.Save your styled map once you\nfind it to be adequately attractive. We'll need it for later.\n\nStep 4: Start a Flask App\nOf course we're making a Flask app; is there even any other kind? We'll be using\nthe Flask Application Factory setup as we usually do, so we should end up with a\nfile structure as below. If you feel like you're getting ahead of ourself,\ncheckout our post on structuring Flask applications\n[https://hackersandslackers.com/structuring-your-flask-app/].\n\nmapbox-app\n├── /application\n│   └── __init__.py\n├── /datasets\n│   ├── data.json\n│   └── output.csv   \n├── /maps\n│   ├── __init__.py\n│   ├── /templates\n│   │    └── index.html\n│   ├── views.py\n│   └── plots.py\n├── start.sh\n├── settings.py\n├── wsgi.py\n├── Pipfile\n├── README.md\n└── requirements.txt\n\n\nTo mix things up a bit we'll use a shell script this time to handle envars and\nrunning our script. Start by creating start.sh:\n\n# start.sh\n\nexport FLASK_APP=wsgi.py\nexport FLASK_DEBUG=1\nexport APP_CONFIG_FILE=settings.py\nflask run\n\n\nYes, we'll be using settings.py  as our config file for a change. Ahhh, just\nlike the Django days. This file should contain a Mapbox access token. Mapbox\nprovides you with a public token by default in many of its tutorials (noted by\nthe pk  prefix for 'public key' - contrast this with sk  for 'secret key'). If\nyou'd like to do anything meaningful with Mapbox, you'll have to retrieve a\nsecret key via the UI. Then we can add this token to settings.py  as such:\n\nMAPBOX_ACCESS_TOKEN=\"sk.eyJ1IB&F^&f^R&DFRUYFTRUctyrcTYRUFrtCFTYDYTuEg\"\n\n\nFinally, here's a look at application/__init__.py  just to make sure we're on\nthe same page:\n\n# application/__init__.py\n\nimport os\nfrom flask import Flask, g\n\ndef create_app():\n    \"\"\"Construct the core application.\"\"\"\n    app = Flask(__name__)\n    app.config.from_envvar('APP_CONFIG_FILE', silent=True)\n\n    with app.app_context():\n        # Construct map blueprint\n        from maps import mapviews\n        app.register_blueprint(mapviews.map_blueprint)\n\n        return app\n\n\nStep 5: Create a Blueprint for Your Map\nYou may have noticed we registered this Blueprint in the previous step. Create a\n /maps  directory which we'll set as a module; we'll need this to handle the \nview, model (or just data),  and controller (routes.py as seen below).\n\nroutes.py\nimport os\nfrom flask import Blueprint, render_template, request\nfrom flask import current_app as app\nfrom . import locations\n\nmap_blueprint = Blueprint('map', __name__, template_folder='templates', static_folder='static')\nplot_locations = locations.LocationData()\n\n\n# Landing Page\n@map_blueprint.route('/', methods=['GET'])\ndef map():\n    return render_template('index.html', ACCESS_KEY=app.MAPBOX_ACCESS_KEY,  locations=plot_locations.get_plots, title=\"CitiBike Mapbox App.\")\n\n\n\ntemplates/index.html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset='utf-8' />\n  <title>{{title}}</title>\n  <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />\n  <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.49.0/mapbox-gl.js'></script>\n  <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.49.0/mapbox-gl.css' rel='stylesheet' />\n  <style>\n    body { margin:0; padding:0; }\n    #map { position:absolute; top:0; bottom:0; width:100%; }\n  </style>\n</head>\n<body>\n\n<div id='map'></div>\n<script>\nmapboxgl.accessToken = {{MAPBOX_ACCESS_TOKEN}};\nconst map = new mapboxgl.Map({\n  container: 'map',\n  style: 'mapbox://styles/toddbirchard/cjpij1gfhghiy2spetf5w998w',\n  center: [-73.981856, 40.703820],\n  zoom: 11.1,\n\n});\n\nmap.on('load', function(e) {\n  // Add the data to your map as a layer\n  map.addLayer({\n    id: 'locations',\n    type: 'symbol',\n    // Add a GeoJSON source containing place coordinates and information.\n    source: {\n      type: 'geojson',\n      data: {{locations}}\n    },\n    layout: {\n      'icon-image': 'restaurant-15',\n      'icon-allow-overlap': true,\n    }\n  });\n});\n</script>\n\n</body>\n</html>\n\n\ndata.py\nNormally this is where we'd use the magic of the Mapbox API to get coordinates,\nroute objects, or whatever it is your heart hopes to plot. This is intended to\nbe intro post, so let's break that logic out for another time and use a dataset\nMapbox would be happy to receive for the sake of results.\n\nStep 6: Uploading our Dataset via Mapbox Studio\nMapbox graciously lets us upload our data via their Studio UI, which does the\nunthinkable; immediately upon upload, Mapbox will take the data we give it\n(whether it be CSV, GeoJSON, etc) and immediately parse it in a way that makes\nsense. Upload your dataset at https://www.mapbox.com/studio/datasets/:\n\nUploading the raw data of our Citibike CSV.Next, Mapbox shows us a preview of\nour data before we even know what happened:\n\nIt's like they don't even want us to do work.Step 7: Do It in Flask\nAfter uploading your dataset via mapbox studio, you can actually redownload  the\ndata with a subtle twist: your data will be automatically formatted as GeoJSON:\nthe format of JSON objects Mapbox uses to plot points, draw routes, etc.\n\nSince we've had a long day, I'll allow you to download this pre-formatted data\nand hardcore the values in to your Map view. You're getting off easy for now,\nbut next time we're doing this programmatically ;).\n\n<!DOCTYPE html>\n<html>\n\n<head>\n  <meta charset='utf-8' />\n  <title>{{title}}</title>\n  <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />\n  <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.49.0/mapbox-gl.js'></script>\n  <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.49.0/mapbox-gl.css' rel='stylesheet' />\n  <style>\n    body {\n      margin: 0;\n      padding: 0;\n    }\n\n    #map {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      width: 100%;\n    }\n  </style>\n</head>\n\n<body>\n\n  <div id='map'></div>\n  <script>\n    mapboxgl.accessToken = '{{ACCESS_KEY}}';\n    const map = new mapboxgl.Map({\n      container: 'map',\n      style: 'mapbox://styles/toddbirchard/cjpij1oxl3hiy2spetf5w998w',\n      center: [-73.981856, 40.703820],\n      zoom: 11.1,\n\n    });\n\n\n    map.addLayer({\n      \"id\": \"points\",\n      \"type\": \"symbol\",\n      \"source\": {\n        \"features\": [{\n            \"type\": \"Feature\",\n            \"properties\": {\n              \"start_station_name\": \"Central Park West & W 76 St\",\n              \"end_station_name\": \"Central Park S & 6 Ave\",\n              \"end_station_latitude\": \"40.76590936\",\n              \"end_station_longitude\": \"-73.97634151\"\n            },\n            \"geometry\": {\n              \"coordinates\": [\n                -73.973747,\n                40.778967\n              ],\n              \"type\": \"Point\"\n            },\n            \"id\": \"000a1f944d4dd786d9e7ed04620af02b\"\n          },\n          {\n            \"type\": \"Feature\",\n            \"properties\": {\n              \"start_station_name\": \"W 64 St & West End Ave\",\n              \"end_station_name\": \"W 70 St & Amsterdam Ave\",\n              \"end_station_latitude\": \"40.77748046\",\n              \"end_station_longitude\": \"-73.98288594\"\n            },\n            \"geometry\": {\n              \"coordinates\": [\n                -73.987537,\n                40.774528\n              ],\n              \"type\": \"Point\"\n            },\n            \"id\": \"01d8c19524f067a3f4712653265e0a49\"\n          },\n          {\n            \"type\": \"Feature\",\n            \"properties\": {\n              \"start_station_name\": \"E 20 St & FDR Drive\",\n              \"end_station_name\": \"W 13 St & 7 Ave\",\n              \"end_station_latitude\": \"40.73781509\",\n              \"end_station_longitude\": \"-73.99994661\"\n            },\n            \"geometry\": {\n              \"coordinates\": [\n                -73.975738,\n                40.733142\n              ],\n              \"type\": \"Point\"\n            },\n            \"id\": \"038ac5403b136e34874a7278f64d4e95\"\n          },\n          {\n              \\\\ --------------------------------------\n              (etc etc....)\n               \\\\ --------------------------------------\n          },\n          {\n            \"type\": \"Feature\",\n            \"properties\": {\n              \"start_station_name\": \"Mercer St & Bleecker St\",\n              \"end_station_name\": \"1 Ave & E 30 St\",\n              \"end_station_latitude\": \"40.74144387\",\n              \"end_station_longitude\": \"-73.97536082\"\n            },\n            \"geometry\": {\n              \"coordinates\": [\n                -73.996621,\n                40.727063\n              ],\n              \"type\": \"Point\"\n            },\n            \"id\": \"ff1daf9aadbf0cd6b788bd76f0a3f333\"\n          }\n        ],\n        \"type\": \"FeatureCollection\"\n      },\n      \"layout\": {\n        \"icon-image\": \"{icon}-15\",\n        \"text-field\": \"{title}\",\n        \"text-font\": [\"Open Sans Semibold\", \"Arial Unicode MS Bold\"],\n        \"text-offset\": [0, 0.6],\n        \"text-anchor\": \"top\"\n      }\n    });\n  </script>\n\n</body>\n\n</html>\n\n\nUncharted Territory\nThere's way more for us to explore in Mapbox. Stay tuned for the rest of this\nseries as we explore generating GeoData programmatically, and build interactive\napplications to really get users involved in map data by letting them control\nconstraints such as time, etc.","html":"<p>There's a trend among those using Jupyter Notebooks (or equivalent) which leads me to believe humanity is coming to an important realization: <strong>Google Maps,</strong> as an API is <em>expensive.</em></p><p>Regardless if Google maps is embedded as a consumer-facing widget, or part of a routine data-pipeline, a single surge of high-traffic can leave enterprises with price tags in the hundreds of thousands of dollars. In fact, I can hardly remember a product where this <em>hadn't</em> become the case. One can hardly blame the search engine; after all, our tendency to ignore the Terms and Service agreements (as well as payment policies) has always been core to the Google business model.  Even then, there are enough enterprises to go around to turn a blind eye and actually pay such a bill willingly without exploring alternatives.</p><p>Data Scientists in particular have no excuse for inaction when it comes to seeking a better alternative. As it turns out, there <em>is</em> one, and it is <strong>Cheaper</strong>, <strong>Easier, </strong>and perhaps more <strong>Fully Featured</strong> than its Google Maps counterpart. That product is <strong>Mapbox</strong>. </p><p><strong>Mapbox</strong> is much more than a Google API clone. The web product offers a plethora of UI-driven features that we can use to customize maps as well as save or effortlessly transform raw data into workable GeoJSON data without even touching an API (which, mind you, there is.... with SDKs in every conceivable language). We're going to create a quick map visualization incorporating some real data to get introduced to Mapbox's functionality, but this is only the beginning. Download the line we'll see just how easy it is to incorporate Mapbox in products like <strong>Plot.ly Dash</strong> or even <strong>Jupyter Notebooks</strong>.</p><h2 id=\"x-marks-the-spot\">X Marks the Spot</h2><p>Before straying from reigning champion Google Maps, it's worth exploring the significance of the metric that brought us here first: price.</p><p>Murphy's law clearly states <strong>\"Cash Rules Everything Around Me, C.R.E.A.M; get the money, Dolla dolla bill y'all.\"</strong> Given this reality, a minimum requirement for Mapbox should be it's pricing model when compared to Google's.</p><h3 id=\"mapbox-pricing-tiers\">Mapbox Pricing Tiers</h3><style>\n  p {\n    line-height: 1.2;\n    color: #444350;\n    margin: 0 0 0 0 !important;\n  }\n   \n  td > p {\n      margin: 0 0 5px 0 !important;\n    }\n    \n  .introbox {\n    text-align: left;\n    vertical-align: top;\n    padding: 3%;\n    max-width: 200px;\n   }\n\n  .tier {\n    font-weight: 900 !important;\n    font-size: 16px !important;\n    display: block;\n    line-height: 1 !important;\n    margin: 0 0 10px !important;\n  }\n\n  .price {\n    font-weight: 500 !important;\n\tfont-size: 18px !important;\n    display: block;\n    color: #60afe6 !important;\n    line-height: 1.3 !important;\n  }\n    \n    thead th {\n        text-align: left !important;\n    }\n    \n    th strong {\n      font-size: 18px;\n      text-align: left;\n    }\n    \n</style>\n\n<div class=\"tableContainer\">\n  <table class=\"table left\">\n    <thead>\n      <tr>\n        <th>\n          <strong>Price</strong>\n        </th>\n        <th>\n          <strong>Web apps</strong>\n        </th>\n        <th>\n          <strong>Mobile SDKs</strong>\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td class=\"introbox\">\n          <p class=\"tier\">Free to Start</p>\n          <p class=\"price\">$0</p>\n        </td>\n        <td style=\"padding: 20px 15px;\">\n          <p><strong>50,000</strong> map views <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Geocoding requests <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Directions requests <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Matrix elements <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Tilequery requests <strong>/mo</strong></p>\n        </td>\n        <td style=\"padding: 20px 15px;\">\n          <p><strong>50,000</strong> map views <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Geocoding requests <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Directions requests <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Matrix elements <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Tilequery requests <strong>/mo</strong></p>\n        </td>\n      </tr>\n      <tr>\n        <td class=\"introbox\">\n          <p class=\"tier\">Additional Usage</p>\n          <p class=\"price\">$0.50</p>\n        </td>\n        <td style=\"padding: 20px 15px;\">\n          <p><strong>50,000</strong> map views <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Geocoding requests <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Directions requests <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Matrix elements <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Tilequery requests <strong>/mo</strong></p>\n        </td>\n        <td style=\"padding: 20px 15px;\">\n          <p><strong>50,000</strong> map views <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Geocoding requests <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Directions requests <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Matrix elements <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Tilequery requests <strong>/mo</strong></p>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n<p>Compare this to Google's transparent pricing structure:</p><h3 id=\"google-api-pricing-tiers\">Google API Pricing Tiers</h3><style>\n  p {\n    line-height: 1.2;\n    color: #444350;\n    margin: 0 0 0 0 !important;\n  }\n    \n  .introbox {\n      text-align: left;\n      vertical-align: top;\n      padding: 3%;\n      max-width: 200px;\n    }\n\n  .tier {\n    font-weight: 900 !important;\n    font-size: 16px !important;\n    display: block;\n    line-height: 1 !important;\n    margin: 0 0 10px !important;\n  }\n\n  .price {\n    font-weight: 500 !important;\n\tfont-size: 18px !important;\n    display: block;\n    color: #60afe6 !important;\n    line-height: 1.3 !important;\n  }\n    \n    thead th {\n        text-align: left !important;\n    }\n    \n    th strong {\n      font-size: 18px;\n      text-align: left;\n    }\n\n</style>\n\n<div class=\"tableContainer\">\n  <table class=\"table left\">\n    <thead>\n      <tr>\n        <th>\n          <strong>Price</strong>\n        </th>\n        <th>\n          <strong>Web apps</strong>\n        </th>\n        <th>\n          <strong>Mobile SDKs</strong>\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td class=\"introbox\">\n          <p class=\"tier\">Starter Pack</p>\n          <p class=\"price\">Brown Paper Bag full of $20s</p>\n        </td>\n        <td style=\"padding: 20px 15px;\">\n          <p><strong>5</strong> and a half map views  <strong>/mo</strong></p>\n          <p><strong>11</strong> times thinking about the API <strong>/mo</strong></p>\n          <p><strong>6</strong> verbal mentions of \"Google\"  <strong>/mo</strong></p>\n          <p><strong>2</strong> directions to shitty parties <strong>/mo</strong></p>\n          <p><strong>8</strong> visits to anywhere <strong>/mo</strong></p>\n        </td>\n        <td style=\"padding: 20px 15px;\">\n          <p><strong>9</strong> Android unlocks <strong>/mo</strong></p>\n          <p><strong>12</strong> Google queries for restaurants  <strong>/mo</strong></p>\n          <p><strong>3</strong> \"OK Google\" queries  <strong>/mo</strong></p>\n          <p><strong>7</strong> Accidental app opens <strong>/mo</strong></p>\n          <p><strong>1</strong> Creating the next \"Uber for X\" <strong>/mo</strong></p>\n        </td>\n      </tr>\n      <tr>\n        <td class=\"introbox\">\n          <p class=\"tier\">Additional Usage</p>\n          <p class=\"price\">Eleventy Billion Dollars</p>\n        </td>\n        <td style=\"padding: 20px 15px;\">\n          <p>Unlimited Requests!*  </p>\n          <p><small>*See Pricing </small></p>\n        </td>\n        <td style=\"padding: 20px 15px;\">\n          <p>Unlimited Requests!*</p>\n          <p><small>*See Pricing</small></p>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n<p>Seems like a convincing point in the win column for <strong>Mapbox</strong>. If we stay within reason, Mapbox can essentially serve us as an entirely free service.</p><p>Surely we must be missing <em>something</em> since we're opting for free services though, right? How do Mapbox visualizations stack up against Google Maps?</p><p data-height=\"511\" data-theme-id=\"0\" data-slug-hash=\"ENoOjz\" data-default-tab=\"result\" data-user=\"ro-ka\" data-pen-title=\"3D map visualizations with Mapbox GL JS\" class=\"codepen\"><a href=\"https://codepen.io/ro-ka/pen/ENoOjz/\"><br></a><a href=\"https://codepen.io/ro-ka\"></a><a href=\"https://codepen.io\"></a></p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script><p>Pardon my French here, but hot damn that map is <em>dope.</em> There are plenty more examples where that came from, but it's clear that <strong>Mapbox </strong>has lowkey stolen the hearts of the <em>scientific analysis</em> market, while <strong>Google</strong> concerns itself on the <em>consumer</em> and <em>business</em> markets.</p><h2 id=\"tonight-s-itinerary-creating-dope-maps\">Tonight's Itinerary: Creating Dope Maps</h2><p>To make some data art, we have a few items on our checklist:</p><ul><li>Obtain a dataset with location-based data: In our case of routing, we need a dataset with a set origin and destination per row.</li><li>Create <strong>direction </strong>object routes by running our dataset through the Mapbox API. </li><li>Create a styled map for our presentation by using Mapbox's style editor.</li><li>Overlay our route data on our beautiful map.</li></ul><h2 id=\"step-1-get-some-free-data\">Step 1: Get Some Free Data</h2><p>Now that we've properly shit-talked Google, let's use Google. We're going to need to get some good data, and <strong>BigQuery</strong> has some awesome free datasets that we can run wild with. I'll be opting for <strong>NYC's dataset on Citibike trips</strong>, as it provides a clean set of data where starting and ending coordinates are always present.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/Screen-Shot-2018-12-07-at-2.53.34-AM.png\" class=\"kg-image\"><figcaption>Google Cloud's Free Dataset of Citibike Trips</figcaption></figure><p>As a side note, BigQuery is great. Even if you're only somewhat versed in SQL, BigQuery's syntax is essentially whatever your first guess would be.</p><p>Granted we only need the start and end locations to make our map, but i decided to take a bit extra for curiosity's sake:</p><div class=\"tableContainer\">\n<table border=\"1\" class=\"table table-striped table-bordered table-hover table-condensed\">\n<thead><tr><th title=\"Field #1\">start_name</th>\n<th title=\"Field #2\">start_latitude</th>\n<th title=\"Field #3\">start_longitude</th>\n<th title=\"Field #4\">end_name</th>\n<th title=\"Field #5\">end_latitude</th>\n<th title=\"Field #6\">end_longitude</th>\n</tr></thead>\n<tbody><tr><td>1 Ave &amp; E 15 St</td>\n<td align=\"right\">40.732218530</td>\n<td align=\"right\">-73.981655570</td>\n<td>1 Ave &amp; E 18 St</td>\n<td align=\"right\">40.733812192</td>\n<td align=\"right\">-73.980544209</td>\n</tr>\n<tr><td>1 Ave &amp; E 30 St</td>\n<td align=\"right\">40.741443870</td>\n<td align=\"right\">-73.975360820</td>\n<td>E 39 St &amp; 2 Ave</td>\n<td align=\"right\">40.747803730</td>\n<td align=\"right\">-73.973441900</td>\n</tr>\n<tr><td>1 Ave &amp; E 62 St</td>\n<td align=\"right\">40.761227400</td>\n<td align=\"right\">-73.960940220</td>\n<td>E 75 St &amp; 3 Ave</td>\n<td align=\"right\">40.771129270</td>\n<td align=\"right\">-73.957722970</td>\n</tr>\n<tr><td>2 Ave &amp; E 99 St</td>\n<td align=\"right\">40.786258600</td>\n<td align=\"right\">-73.945525790</td>\n<td>3 Ave &amp; E 112 St</td>\n<td align=\"right\">40.795508000</td>\n<td align=\"right\">-73.941606000</td>\n</tr>\n<tr><td>3 St &amp; 3 Ave</td>\n<td align=\"right\">40.675070500</td>\n<td align=\"right\">-73.987752260</td>\n<td>10 St &amp; 7 Ave</td>\n<td align=\"right\">40.666207800</td>\n<td align=\"right\">-73.981998860</td>\n</tr>\n<tr><td>3 St &amp; Prospect Park West</td>\n<td align=\"right\">40.668132000</td>\n<td align=\"right\">-73.973638310</td>\n<td>3 St &amp; Prospect Park West</td>\n<td align=\"right\">40.668132000</td>\n<td align=\"right\">-73.973638310</td>\n</tr>\n<tr><td>6 Ave &amp; W 33 St</td>\n<td align=\"right\">40.749012710</td>\n<td align=\"right\">-73.988483950</td>\n<td>W 37 St &amp; 5 Ave</td>\n<td align=\"right\">40.750380090</td>\n<td align=\"right\">-73.983389880</td>\n</tr>\n<tr><td>8 Ave &amp; W 52 St</td>\n<td align=\"right\">40.763707390</td>\n<td align=\"right\">-73.985161500</td>\n<td>Central Park S &amp; 6 Ave</td>\n<td align=\"right\">40.765909360</td>\n<td align=\"right\">-73.976341510</td>\n</tr>\n<tr><td>11 Ave &amp; W 41 St</td>\n<td align=\"right\">40.760300960</td>\n<td align=\"right\">-73.998842220</td>\n<td>W 34 St &amp; 11 Ave</td>\n<td align=\"right\">40.755941590</td>\n<td align=\"right\">-74.002116300</td>\n</tr>\n<tr><td>12 Ave &amp; W 40 St</td>\n<td align=\"right\">40.760875020</td>\n<td align=\"right\">-74.002776680</td>\n<td>W 42 St &amp; 8 Ave</td>\n<td align=\"right\">40.757569900</td>\n<td align=\"right\">-73.990985070</td>\n</tr>\n<tr><td>Allen St &amp; E Houston St</td>\n<td align=\"right\">40.722055000</td>\n<td align=\"right\">-73.989111000</td>\n<td>Mott St &amp; Prince St</td>\n<td align=\"right\">40.723179580</td>\n<td align=\"right\">-73.994800120</td>\n</tr>\n<tr><td>Allen St &amp; Hester St</td>\n<td align=\"right\">40.716058660</td>\n<td align=\"right\">-73.991907590</td>\n<td>Greenwich St &amp; N Moore St</td>\n<td align=\"right\">40.720434110</td>\n<td align=\"right\">-74.010206090</td>\n</tr>\n<tr><td>Amsterdam Ave &amp; W 73 St</td>\n<td align=\"right\">40.779668090</td>\n<td align=\"right\">-73.980930448</td>\n<td>E 85 St &amp; 3 Ave</td>\n<td align=\"right\">40.778012030</td>\n<td align=\"right\">-73.954071490</td>\n</tr>\n<tr><td>Bank St &amp; Hudson St</td>\n<td align=\"right\">40.736528890</td>\n<td align=\"right\">-74.006180260</td>\n<td>MacDougal St &amp; Prince St</td>\n<td align=\"right\">40.727102580</td>\n<td align=\"right\">-74.002970880</td>\n</tr>\n<tr><td>Bank St &amp; Washington St</td>\n<td align=\"right\">40.736196700</td>\n<td align=\"right\">-74.008592070</td>\n<td>W 4 St &amp; 7 Ave S</td>\n<td align=\"right\">40.734011430</td>\n<td align=\"right\">-74.002938770</td>\n</tr>\n<tr><td>Barclay St &amp; Church St</td>\n<td align=\"right\">40.712912240</td>\n<td align=\"right\">-74.010202340</td>\n<td>Clinton St &amp; Tillary St</td>\n<td align=\"right\">40.696192000</td>\n<td align=\"right\">-73.991218000</td>\n</tr>\n<tr><td>Berkeley Pl &amp; 7 Ave</td>\n<td align=\"right\">40.675146839</td>\n<td align=\"right\">-73.975232095</td>\n<td>West Drive &amp; Prospect Park West</td>\n<td align=\"right\">40.661063372</td>\n<td align=\"right\">-73.979452550</td>\n</tr>\n<tr><td>Bialystoker Pl &amp; Delancey St</td>\n<td align=\"right\">40.716226440</td>\n<td align=\"right\">-73.982612060</td>\n<td>Reade St &amp; Broadway</td>\n<td align=\"right\">40.714504510</td>\n<td align=\"right\">-74.005627890</td>\n</tr>\n<tr><td>Broadway &amp; W 24 St</td>\n<td align=\"right\">40.742354300</td>\n<td align=\"right\">-73.989150760</td>\n<td>South End Ave &amp; Liberty St</td>\n<td align=\"right\">40.711512000</td>\n<td align=\"right\">-74.015756000</td>\n</tr>\n<tr><td>Broadway &amp; W 29 St</td>\n<td align=\"right\">40.746200900</td>\n<td align=\"right\">-73.988557230</td>\n<td>Stanton St &amp; Chrystie St</td>\n<td align=\"right\">40.722293460</td>\n<td align=\"right\">-73.991475350</td>\n</tr>\n<tr><td>Broadway &amp; W 56 St</td>\n<td align=\"right\">40.765265400</td>\n<td align=\"right\">-73.981923380</td>\n<td>Broadway &amp; W 49 St</td>\n<td align=\"right\">40.760683271</td>\n<td align=\"right\">-73.984527290</td>\n</tr>\n<tr><td>Broadway &amp; W 58 St</td>\n<td align=\"right\">40.766953170</td>\n<td align=\"right\">-73.981693330</td>\n<td>5 Ave &amp; E 78 St</td>\n<td align=\"right\">40.776321422</td>\n<td align=\"right\">-73.964273930</td>\n</tr>\n<tr><td>Cadman Plaza E &amp; Red Cross Pl</td>\n<td align=\"right\">40.699917550</td>\n<td align=\"right\">-73.989717730</td>\n<td>Leonard St &amp; Church St</td>\n<td align=\"right\">40.717571000</td>\n<td align=\"right\">-74.005549000</td>\n</tr>\n<tr><td>Cadman Plaza E &amp; Tillary St</td>\n<td align=\"right\">40.695976830</td>\n<td align=\"right\">-73.990148920</td>\n<td>Lawrence St &amp; Willoughby St</td>\n<td align=\"right\">40.692361780</td>\n<td align=\"right\">-73.986317460</td>\n</tr>\n<tr><td>Carmine St &amp; 6 Ave</td>\n<td align=\"right\">40.730385990</td>\n<td align=\"right\">-74.002149880</td>\n<td>W 27 St &amp; 7 Ave</td>\n<td align=\"right\">40.746647000</td>\n<td align=\"right\">-73.993915000</td>\n</tr>\n<tr><td>Central Park W &amp; W 96 St</td>\n<td align=\"right\">40.791270000</td>\n<td align=\"right\">-73.964839000</td>\n<td>W 52 St &amp; 6 Ave</td>\n<td align=\"right\">40.761329831</td>\n<td align=\"right\">-73.979820013</td>\n</tr>\n<tr><td>Central Park West &amp; W 76 St</td>\n<td align=\"right\">40.778967840</td>\n<td align=\"right\">-73.973747370</td>\n<td>Central Park S &amp; 6 Ave</td>\n<td align=\"right\">40.765909360</td>\n<td align=\"right\">-73.976341510</td>\n</tr>\n</tbody></table>\n</div><h2 id=\"step-2-style-a-sexy-map-in-mapbox-studio\">Step 2: Style a Sexy Map in Mapbox Studio</h2><p>Mapbox provides a superb web UI labeled “studio” interface to help us get started. The “studio” web UI is separated into three parts: <strong>custom map styles</strong>, <strong>tilesets</strong>, and <strong>datasets</strong>.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/mapboxstudio.gif\" class=\"kg-image\"><figcaption>All of these can we saved for later use.</figcaption></figure><p>These three sections can be summarized as:</p><ul><li><strong>Styles: </strong>Custom map styles editable via a GUI, which produce a stylesheet for convenience </li><li><strong>Tilesets: </strong>Map overlays we can apply from our own data or otherwise to segment geographical areas</li><li><strong>Datasets:</strong> Data containing anything from points on a map to complex direction routes we can overlay atop our map.</li></ul><p>Here's a quick look at the Map style editor:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/Screen-Shot-2018-12-07-at-4.29.43-PM.png\" class=\"kg-image\"><figcaption>I want to wake up, in a city that doesn't sleep.</figcaption></figure><p>Save your styled map once you find it to be adequately attractive. We'll need it for later.</p><h2 id=\"step-4-start-a-flask-app\">Step 4: Start a Flask App</h2><p>Of course we're making a Flask app; is there even any other kind? We'll be using the Flask Application Factory setup as we usually do, so we should end up with a file structure as below. If you feel like you're getting ahead of ourself, checkout our post on <a href=\"https://hackersandslackers.com/structuring-your-flask-app/\">structuring Flask applications</a>.</p><pre><code class=\"language-bash\">mapbox-app\n├── /application\n│   └── __init__.py\n├── /datasets\n│   ├── data.json\n│   └── output.csv   \n├── /maps\n│   ├── __init__.py\n│   ├── /templates\n│   │    └── index.html\n│   ├── views.py\n│   └── plots.py\n├── start.sh\n├── settings.py\n├── wsgi.py\n├── Pipfile\n├── README.md\n└── requirements.txt\n</code></pre>\n<p>To mix things up a bit we'll use a shell script this time to handle envars and running our script. Start by creating <strong>start.sh</strong>:</p><pre><code class=\"language-bash\"># start.sh\n\nexport FLASK_APP=wsgi.py\nexport FLASK_DEBUG=1\nexport APP_CONFIG_FILE=settings.py\nflask run\n</code></pre>\n<p>Yes, we'll be using <code>settings.py</code> as our config file for a change. Ahhh, just like the Django days. This file should contain a Mapbox <strong>access token</strong>. Mapbox provides you with a public token by default in many of its tutorials (noted by the <em><strong>pk</strong> </em>prefix for <em>'public key' - </em>contrast this with <strong><em>sk</em></strong> for <em>'secret key'</em>). If you'd like to do anything meaningful with Mapbox, you'll have to retrieve a secret key via the UI. Then we can add this token to <code>settings.py</code> as such:</p><pre><code class=\"language-bash\">MAPBOX_ACCESS_TOKEN=&quot;sk.eyJ1IB&amp;F^&amp;f^R&amp;DFRUYFTRUctyrcTYRUFrtCFTYDYTuEg&quot;\n</code></pre>\n<p>Finally, here's a look at <code>application/__init__.py</code> just to make sure we're on the same page:</p><pre><code class=\"language-python\"># application/__init__.py\n\nimport os\nfrom flask import Flask, g\n\ndef create_app():\n    &quot;&quot;&quot;Construct the core application.&quot;&quot;&quot;\n    app = Flask(__name__)\n    app.config.from_envvar('APP_CONFIG_FILE', silent=True)\n\n    with app.app_context():\n        # Construct map blueprint\n        from maps import mapviews\n        app.register_blueprint(mapviews.map_blueprint)\n\n        return app\n</code></pre>\n<h2 id=\"step-5-create-a-blueprint-for-your-map\">Step 5: Create a Blueprint for Your Map</h2><p>You may have noticed we registered this Blueprint in the previous step. Create a <code>/maps</code> directory which we'll set as a module; we'll need this to handle the <strong>view</strong>, <strong>model </strong>(or just data),  and <strong>controller </strong>(routes.py as seen below).</p><h3 id=\"routes-py\">routes.py</h3><pre><code class=\"language-python\">import os\nfrom flask import Blueprint, render_template, request\nfrom flask import current_app as app\nfrom . import locations\n\nmap_blueprint = Blueprint('map', __name__, template_folder='templates', static_folder='static')\nplot_locations = locations.LocationData()\n\n\n# Landing Page\n@map_blueprint.route('/', methods=['GET'])\ndef map():\n    return render_template('index.html', ACCESS_KEY=app.MAPBOX_ACCESS_KEY,  locations=plot_locations.get_plots, title=&quot;CitiBike Mapbox App.&quot;)\n\n</code></pre>\n<h3 id=\"templates-index-html\">templates/index.html</h3><pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;meta charset='utf-8' /&gt;\n  &lt;title&gt;{{title}}&lt;/title&gt;\n  &lt;meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' /&gt;\n  &lt;script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.49.0/mapbox-gl.js'&gt;&lt;/script&gt;\n  &lt;link href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.49.0/mapbox-gl.css' rel='stylesheet' /&gt;\n  &lt;style&gt;\n    body { margin:0; padding:0; }\n    #map { position:absolute; top:0; bottom:0; width:100%; }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;div id='map'&gt;&lt;/div&gt;\n&lt;script&gt;\nmapboxgl.accessToken = {{MAPBOX_ACCESS_TOKEN}};\nconst map = new mapboxgl.Map({\n  container: 'map',\n  style: 'mapbox://styles/toddbirchard/cjpij1gfhghiy2spetf5w998w',\n  center: [-73.981856, 40.703820],\n  zoom: 11.1,\n\n});\n\nmap.on('load', function(e) {\n  // Add the data to your map as a layer\n  map.addLayer({\n    id: 'locations',\n    type: 'symbol',\n    // Add a GeoJSON source containing place coordinates and information.\n    source: {\n      type: 'geojson',\n      data: {{locations}}\n    },\n    layout: {\n      'icon-image': 'restaurant-15',\n      'icon-allow-overlap': true,\n    }\n  });\n});\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h3 id=\"data-py\">data.py</h3><p>Normally this is where we'd use the magic of the Mapbox API to get coordinates, route objects, or whatever it is your heart hopes to plot. This is intended to be intro post, so let's break that logic out for another time and use a dataset Mapbox would be happy to receive for the sake of results.</p><h2 id=\"step-6-uploading-our-dataset-via-mapbox-studio\">Step 6: Uploading our Dataset via Mapbox Studio</h2><p>Mapbox graciously lets us upload our data via their Studio UI, which does the unthinkable; immediately upon upload, Mapbox will take the data we give it (whether it be CSV, GeoJSON, etc) and immediately parse it in a way that makes sense. Upload your dataset at <a href=\"https://www.mapbox.com/studio/datasets/\">https://www.mapbox.com/studio/datasets/</a>:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/Screen-Shot-2018-12-10-at-5.29.24-PM.png\" class=\"kg-image\"><figcaption>Uploading the raw data of our Citibike CSV.</figcaption></figure><p>Next, Mapbox shows us a preview of our data before we even know what happened:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/Screen-Shot-2018-12-10-at-5.28.24-PM.png\" class=\"kg-image\"><figcaption>It's like they don't even want us to do work.</figcaption></figure><h2 id=\"step-7-do-it-in-flask\">Step 7: Do It in Flask</h2><p>After uploading your dataset via mapbox studio, you can actually <em>redownload</em> the data with a subtle twist: your data will be automatically formatted as GeoJSON: the format of JSON objects Mapbox uses to plot points, draw routes, etc.</p><p>Since we've had a long day, I'll allow you to download this pre-formatted data and hardcore the values in to your Map view. You're getting off easy for now, but next time we're doing this programmatically ;).</p><pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n  &lt;meta charset='utf-8' /&gt;\n  &lt;title&gt;{{title}}&lt;/title&gt;\n  &lt;meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' /&gt;\n  &lt;script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.49.0/mapbox-gl.js'&gt;&lt;/script&gt;\n  &lt;link href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.49.0/mapbox-gl.css' rel='stylesheet' /&gt;\n  &lt;style&gt;\n    body {\n      margin: 0;\n      padding: 0;\n    }\n\n    #map {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      width: 100%;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n\n  &lt;div id='map'&gt;&lt;/div&gt;\n  &lt;script&gt;\n    mapboxgl.accessToken = '{{ACCESS_KEY}}';\n    const map = new mapboxgl.Map({\n      container: 'map',\n      style: 'mapbox://styles/toddbirchard/cjpij1oxl3hiy2spetf5w998w',\n      center: [-73.981856, 40.703820],\n      zoom: 11.1,\n\n    });\n\n\n    map.addLayer({\n      &quot;id&quot;: &quot;points&quot;,\n      &quot;type&quot;: &quot;symbol&quot;,\n      &quot;source&quot;: {\n        &quot;features&quot;: [{\n            &quot;type&quot;: &quot;Feature&quot;,\n            &quot;properties&quot;: {\n              &quot;start_station_name&quot;: &quot;Central Park West &amp; W 76 St&quot;,\n              &quot;end_station_name&quot;: &quot;Central Park S &amp; 6 Ave&quot;,\n              &quot;end_station_latitude&quot;: &quot;40.76590936&quot;,\n              &quot;end_station_longitude&quot;: &quot;-73.97634151&quot;\n            },\n            &quot;geometry&quot;: {\n              &quot;coordinates&quot;: [\n                -73.973747,\n                40.778967\n              ],\n              &quot;type&quot;: &quot;Point&quot;\n            },\n            &quot;id&quot;: &quot;000a1f944d4dd786d9e7ed04620af02b&quot;\n          },\n          {\n            &quot;type&quot;: &quot;Feature&quot;,\n            &quot;properties&quot;: {\n              &quot;start_station_name&quot;: &quot;W 64 St &amp; West End Ave&quot;,\n              &quot;end_station_name&quot;: &quot;W 70 St &amp; Amsterdam Ave&quot;,\n              &quot;end_station_latitude&quot;: &quot;40.77748046&quot;,\n              &quot;end_station_longitude&quot;: &quot;-73.98288594&quot;\n            },\n            &quot;geometry&quot;: {\n              &quot;coordinates&quot;: [\n                -73.987537,\n                40.774528\n              ],\n              &quot;type&quot;: &quot;Point&quot;\n            },\n            &quot;id&quot;: &quot;01d8c19524f067a3f4712653265e0a49&quot;\n          },\n          {\n            &quot;type&quot;: &quot;Feature&quot;,\n            &quot;properties&quot;: {\n              &quot;start_station_name&quot;: &quot;E 20 St &amp; FDR Drive&quot;,\n              &quot;end_station_name&quot;: &quot;W 13 St &amp; 7 Ave&quot;,\n              &quot;end_station_latitude&quot;: &quot;40.73781509&quot;,\n              &quot;end_station_longitude&quot;: &quot;-73.99994661&quot;\n            },\n            &quot;geometry&quot;: {\n              &quot;coordinates&quot;: [\n                -73.975738,\n                40.733142\n              ],\n              &quot;type&quot;: &quot;Point&quot;\n            },\n            &quot;id&quot;: &quot;038ac5403b136e34874a7278f64d4e95&quot;\n          },\n          {\n              \\\\ --------------------------------------\n              (etc etc....)\n               \\\\ --------------------------------------\n          },\n          {\n            &quot;type&quot;: &quot;Feature&quot;,\n            &quot;properties&quot;: {\n              &quot;start_station_name&quot;: &quot;Mercer St &amp; Bleecker St&quot;,\n              &quot;end_station_name&quot;: &quot;1 Ave &amp; E 30 St&quot;,\n              &quot;end_station_latitude&quot;: &quot;40.74144387&quot;,\n              &quot;end_station_longitude&quot;: &quot;-73.97536082&quot;\n            },\n            &quot;geometry&quot;: {\n              &quot;coordinates&quot;: [\n                -73.996621,\n                40.727063\n              ],\n              &quot;type&quot;: &quot;Point&quot;\n            },\n            &quot;id&quot;: &quot;ff1daf9aadbf0cd6b788bd76f0a3f333&quot;\n          }\n        ],\n        &quot;type&quot;: &quot;FeatureCollection&quot;\n      },\n      &quot;layout&quot;: {\n        &quot;icon-image&quot;: &quot;{icon}-15&quot;,\n        &quot;text-field&quot;: &quot;{title}&quot;,\n        &quot;text-font&quot;: [&quot;Open Sans Semibold&quot;, &quot;Arial Unicode MS Bold&quot;],\n        &quot;text-offset&quot;: [0, 0.6],\n        &quot;text-anchor&quot;: &quot;top&quot;\n      }\n    });\n  &lt;/script&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"uncharted-territory\">Uncharted Territory</h2><p>There's way more for us to explore in Mapbox. Stay tuned for the rest of this series as we explore generating GeoData programmatically, and build interactive applications to really get users involved in map data by letting them control constraints such as time, etc. </p>","url":"https://hackersandslackers.com/map-data-visualization-with-mapbox/","uuid":"3b64bf8d-b545-469c-b2df-83ee7a816e31","page":false,"codeinjection_foot":"","codeinjection_head":"  <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.js'></script>\n    <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.css' rel='stylesheet' />","comment_id":"5c0aafba5da6c4479ab70ff1"}},"pageContext":{"slug":"map-data-visualization-with-mapbox"}}