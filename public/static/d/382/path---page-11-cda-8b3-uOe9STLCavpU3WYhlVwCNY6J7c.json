{"data":{"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673748","title":"Lynx Roundup, December 14th","slug":"lynx-roundup-december-14th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/02/74-1@2x.jpg","excerpt":"Postgres Inserts!  Data lakes!  Tic-tac-toe in SQL!","custom_excerpt":"Postgres Inserts!  Data lakes!  Tic-tac-toe in SQL!","created_at_pretty":"10 December, 2018","published_at_pretty":"14 December, 2018","updated_at_pretty":"14 February, 2019","created_at":"2018-12-10T00:44:24.000-05:00","published_at":"2018-12-14T07:00:00.000-05:00","updated_at":"2019-02-14T04:58:27.000-05:00","meta_title":"Lynx Roundup, December 14th | Hackers and Slackers","meta_description":"Postgres Inserts!  Data lakes!  Tic-tac-toe in SQL!","og_description":"Postgres Inserts!  Data lakes!  Tic-tac-toe in SQL!","og_image":"https://hackersandslackers.com/content/images/2019/02/74-1@2x.jpg","og_title":"Lynx Roundup, December 14th","twitter_description":"Postgres Inserts!  Data lakes!  Tic-tac-toe in SQL!","twitter_image":"https://hackersandslackers.com/content/images/2019/02/74-1@2x.jpg","twitter_title":"Lynx Roundup, December 14th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://machinelearningmastery.com/how-to-develop-baseline-forecasts-for-multi-site-multivariate-air-pollution-time-series-forecasting/\n\nhttps://www.datanami.com/2018/10/15/is-it-time-to-drain-the-data-lake/\n\nhttps://pgdash.io/blog/postgres-insert.html\n\nhttps://bitbucket.org/snippets/mariusz-krynski/bedBGK/tic-tac-toesql\n\nhttps://github.com/postgres-plr/plr\n\nhttps://github.com/ramnes/awesome-mongodb\n\nhttps://simonwillison.net/2018/Oct/4/datasette-ideas/#SQL_as_an_API_language","html":"<p></p><p><a href=\"https://machinelearningmastery.com/how-to-develop-baseline-forecasts-for-multi-site-multivariate-air-pollution-time-series-forecasting/\">https://machinelearningmastery.com/how-to-develop-baseline-forecasts-for-multi-site-multivariate-air-pollution-time-series-forecasting/</a></p><p><a href=\"https://www.datanami.com/2018/10/15/is-it-time-to-drain-the-data-lake/\">https://www.datanami.com/2018/10/15/is-it-time-to-drain-the-data-lake/</a></p><p><a href=\"https://pgdash.io/blog/postgres-insert.html\">https://pgdash.io/blog/postgres-insert.html</a></p><p><a href=\"https://bitbucket.org/snippets/mariusz-krynski/bedBGK/tic-tac-toesql\">https://bitbucket.org/snippets/mariusz-krynski/bedBGK/tic-tac-toesql</a></p><p><a href=\"https://github.com/postgres-plr/plr\">https://github.com/postgres-plr/plr</a></p><p><a href=\"https://github.com/ramnes/awesome-mongodb\">https://github.com/ramnes/awesome-mongodb</a></p><p><a href=\"https://simonwillison.net/2018/Oct/4/datasette-ideas/#SQL_as_an_API_language\">https://simonwillison.net/2018/Oct/4/datasette-ideas/#SQL_as_an_API_language</a></p>","url":"https://hackersandslackers.com/lynx-roundup-december-14th/","uuid":"31c52f10-2a90-44e8-a879-447f73c726ff","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c0dfd381556321bd84c336f"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673747","title":"Lynx Roundup, December 13th","slug":"lynx-roundup-december-13th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/02/75-2@2x.jpg","excerpt":"LSTM Auto-encoders!  Visualizing SQL execution plans!  Time series forecasting with Keras!","custom_excerpt":"LSTM Auto-encoders!  Visualizing SQL execution plans!  Time series forecasting with Keras!","created_at_pretty":"10 December, 2018","published_at_pretty":"13 December, 2018","updated_at_pretty":"14 February, 2019","created_at":"2018-12-10T00:41:52.000-05:00","published_at":"2018-12-13T07:00:00.000-05:00","updated_at":"2019-02-14T04:59:22.000-05:00","meta_title":"Lynx Roundup, December 13th | Hackers and Slackers","meta_description":"LSTM Auto-encoders!  Visualizing SQL execution plans!  Time series forecasting with Keras!","og_description":"LSTM Auto-encoders!  Visualizing SQL execution plans!  Time series forecasting with Keras!","og_image":"https://hackersandslackers.com/content/images/2019/02/75-2@2x.jpg","og_title":"Lynx Roundup, December 13th","twitter_description":"LSTM Auto-encoders!  Visualizing SQL execution plans!  Time series forecasting with Keras!","twitter_image":"https://hackersandslackers.com/content/images/2019/02/75-2@2x.jpg","twitter_title":"Lynx Roundup, December 13th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://machinelearningmastery.com/lstm-autoencoders/\n\nhttps://machinelearningmastery.com/how-to-use-the-timeseriesgenerator-for-time-series-forecasting-in-keras/\n\nhttps://machinelearningmastery.com/how-to-grid-search-naive-methods-for-univariate-time-series-forecasting/\n\nhttps://blog.tanelpoder.com/posts/visualizing-sql-plan-execution-time-with-flamegraphs/\n\nhttps://databricks.com/blog/2018/11/01/sql-pivot-converting-rows-to-columns.html\n\nhttps://github.com/intel-analytics/analytics-zoo\n\nhttps://machinelearningmastery.com/how-to-develop-machine-learning-models-for-multivariate-multi-step-air-pollution-time-series-forecasting/","html":"<p></p><p><a href=\"https://machinelearningmastery.com/lstm-autoencoders/\">https://machinelearningmastery.com/lstm-autoencoders/</a></p><p><a href=\"https://machinelearningmastery.com/how-to-use-the-timeseriesgenerator-for-time-series-forecasting-in-keras/\">https://machinelearningmastery.com/how-to-use-the-timeseriesgenerator-for-time-series-forecasting-in-keras/</a></p><p><a href=\"https://machinelearningmastery.com/how-to-grid-search-naive-methods-for-univariate-time-series-forecasting/\">https://machinelearningmastery.com/how-to-grid-search-naive-methods-for-univariate-time-series-forecasting/</a></p><p><a href=\"https://blog.tanelpoder.com/posts/visualizing-sql-plan-execution-time-with-flamegraphs/\">https://blog.tanelpoder.com/posts/visualizing-sql-plan-execution-time-with-flamegraphs/</a></p><p><a href=\"https://databricks.com/blog/2018/11/01/sql-pivot-converting-rows-to-columns.html\">https://databricks.com/blog/2018/11/01/sql-pivot-converting-rows-to-columns.html</a></p><p><a href=\"https://github.com/intel-analytics/analytics-zoo\">https://github.com/intel-analytics/analytics-zoo</a></p><p><a href=\"https://machinelearningmastery.com/how-to-develop-machine-learning-models-for-multivariate-multi-step-air-pollution-time-series-forecasting/\">https://machinelearningmastery.com/how-to-develop-machine-learning-models-for-multivariate-multi-step-air-pollution-time-series-forecasting/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-december-13th/","uuid":"ea4c0252-62f3-47ca-b47a-aec175a03208","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c0dfca01556321bd84c336a"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673746","title":"Lynx Roundup, December 12th","slug":"lynx-roundup-december-12th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/127@2x.jpg","excerpt":"Efficiently ordering SQL joins!  Using SQL in Google Sheets!  Tradeoffs in different databases!","custom_excerpt":"Efficiently ordering SQL joins!  Using SQL in Google Sheets!  Tradeoffs in different databases!","created_at_pretty":"10 December, 2018","published_at_pretty":"12 December, 2018","updated_at_pretty":"05 January, 2019","created_at":"2018-12-10T00:40:28.000-05:00","published_at":"2018-12-12T07:00:00.000-05:00","updated_at":"2019-01-05T12:45:48.000-05:00","meta_title":"Lynx Roundup, December 12th | Hackers and Slackers","meta_description":"Efficiently ordering SQL joins!  Using SQL in Google Sheets!  Tradeoffs in different databases!","og_description":"Efficiently ordering SQL joins!  Using SQL in Google Sheets!  Tradeoffs in different databases!","og_image":"https://hackersandslackers.com/content/images/lynx/127@2x.jpg","og_title":"Lynx Roundup, December 12th","twitter_description":"Efficiently ordering SQL joins!  Using SQL in Google Sheets!  Tradeoffs in different databases!","twitter_image":"https://hackersandslackers.com/content/images/lynx/127@2x.jpg","twitter_title":"Lynx Roundup, December 12th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.cockroachlabs.com/blog/join-ordering-pt1/\n\nhttps://www.datanami.com/2018/11/07/will-graphql-become-a-standard-for-the-new-data-economy/\n\nhttps://www.benlcollins.com/spreadsheets/google-sheets-query-sql/\n\nhttps://hackernoon.com/eventual-vs-strong-consistency-in-distributed-databases-282fdad37cf7\n\nhttps://www.confluent.io/blog/atm-fraud-detection-apache-kafka-ksql\n\nhttps://mysqlserverteam.com/data-masking-in-mysql/\n\nhttps://github.com/antonmedv/fx","html":"<p></p><p><a href=\"https://www.cockroachlabs.com/blog/join-ordering-pt1/\">https://www.cockroachlabs.com/blog/join-ordering-pt1/</a></p><p><a href=\"https://www.datanami.com/2018/11/07/will-graphql-become-a-standard-for-the-new-data-economy/\">https://www.datanami.com/2018/11/07/will-graphql-become-a-standard-for-the-new-data-economy/</a></p><p><a href=\"https://www.benlcollins.com/spreadsheets/google-sheets-query-sql/\">https://www.benlcollins.com/spreadsheets/google-sheets-query-sql/</a></p><p><a href=\"https://hackernoon.com/eventual-vs-strong-consistency-in-distributed-databases-282fdad37cf7\">https://hackernoon.com/eventual-vs-strong-consistency-in-distributed-databases-282fdad37cf7</a></p><p><a href=\"https://www.confluent.io/blog/atm-fraud-detection-apache-kafka-ksql\">https://www.confluent.io/blog/atm-fraud-detection-apache-kafka-ksql</a></p><p><a href=\"https://mysqlserverteam.com/data-masking-in-mysql/\">https://mysqlserverteam.com/data-masking-in-mysql/</a></p><p><a href=\"https://github.com/antonmedv/fx\">https://github.com/antonmedv/fx</a></p>","url":"https://hackersandslackers.com/lynx-roundup-december-12th/","uuid":"bbada820-13b3-41b0-b968-3cb436ef34c1","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5c0dfc4c1556321bd84c3365"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673743","title":"Geographic Data Visualization with Mapbox","slug":"map-data-visualization-with-mapbox","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/12/mapbox@2x.jpg","excerpt":"Visualizing Geodata with Mapbox's API and Tools.","custom_excerpt":"Visualizing Geodata with Mapbox's API and Tools.","created_at_pretty":"07 December, 2018","published_at_pretty":"11 December, 2018","updated_at_pretty":"31 January, 2019","created_at":"2018-12-07T12:36:58.000-05:00","published_at":"2018-12-11T08:00:00.000-05:00","updated_at":"2019-01-31T17:52:32.000-05:00","meta_title":"Geographical Data Visualization with Mapbox | Hackers and Slackers","meta_description":"A collection of Map APIs that rivals Google Maps, plus Beautiful GeoData Visualization.","og_description":"A collection of Map APIs that rivals Google Maps, plus Beautiful GeoData Visualization.","og_image":"https://hackersandslackers.com/content/images/2018/12/mapbox@2x.jpg","og_title":"Geographic Data Visualization with Mapbox","twitter_description":"A collection of Map APIs that rivals Google Maps, plus Beautiful GeoData Visualization.","twitter_image":"https://hackersandslackers.com/content/images/2018/12/mapbox@2x.jpg","twitter_title":"Geographic Data Visualization with Mapbox","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Data Vis","slug":"datavis","description":"Visualize your data with charting tools like Matplotlib, Plotly, D3, Chart.js, Muze, Seaborn, and countless others. Primarily focused on programmatic visualization as opposed to Business Intelligence software.","feature_image":null,"meta_description":"Visualize your data with charting tools like Matplotlib, Plotly, D3, Chart.js, Muze, Seaborn, and countless others. Focused on programmatic visualization.","meta_title":"Data Visualization | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Data Vis","slug":"datavis","description":"Visualize your data with charting tools like Matplotlib, Plotly, D3, Chart.js, Muze, Seaborn, and countless others. Primarily focused on programmatic visualization as opposed to Business Intelligence software.","feature_image":null,"meta_description":"Visualize your data with charting tools like Matplotlib, Plotly, D3, Chart.js, Muze, Seaborn, and countless others. Focused on programmatic visualization.","meta_title":"Data Visualization | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"SaaS Products","slug":"saas","description":"Third-party products and services we’ve discovered to be diamonds in the rough. These are products we’ve included in our stack based on price and value add.","feature_image":null,"meta_description":"Third-party products and services we’ve discovered to be diamonds in the rough. These are products we’ve included in our stack based on price and value add.","meta_title":"Our Picks: SaaS Products | Hackers and Slackers","visibility":"public"},{"name":"#Mapping Data with Mapbox","slug":"mapping-data-with-mapbox","description":"A full exploration into Mapbox: the sweetheart of geovisualization amongst data scientists. Learn the core product or see why the API rivals Google Maps.","feature_image":"https://hackersandslackers.com/content/images/2019/03/mapbox.jpg","meta_description":"A full exploration into Mapbox: the sweetheart of geovisualization amongst data scientists. Learn the core product or see why the API rivals Google Maps.","meta_title":"Mapping Data with Mapbox","visibility":"internal"}],"plaintext":"There's a trend among those using Jupyter Notebooks (or equivalent) which leads\nme to believe humanity is coming to an important realization: Google Maps,  as\nan API is expensive.\n\nRegardless if Google maps is embedded as a consumer-facing widget, or part of a\nroutine data-pipeline, a single surge of high-traffic can leave enterprises with\nprice tags in the hundreds of thousands of dollars. In fact, I can hardly\nremember a product where this hadn't  become the case. One can hardly blame the\nsearch engine; after all, our tendency to ignore the Terms and Service\nagreements (as well as payment policies) has always been core to the Google\nbusiness model.  Even then, there are enough enterprises to go around to turn a\nblind eye and actually pay such a bill willingly without exploring alternatives.\n\nData Scientists in particular have no excuse for inaction when it comes to\nseeking a better alternative. As it turns out, there is  one, and it is Cheaper,\n Easier, and perhaps more Fully Featured  than its Google Maps counterpart. That\nproduct is Mapbox. \n\nMapbox  is much more than a Google API clone. The web product offers a plethora\nof UI-driven features that we can use to customize maps as well as save or\neffortlessly transform raw data into workable GeoJSON data without even touching\nan API (which, mind you, there is.... with SDKs in every conceivable language).\nWe're going to create a quick map visualization incorporating some real data to\nget introduced to Mapbox's functionality, but this is only the beginning.\nDownload the line we'll see just how easy it is to incorporate Mapbox in\nproducts like Plot.ly Dash  or even Jupyter Notebooks.\n\nX Marks the Spot\nBefore straying from reigning champion Google Maps, it's worth exploring the\nsignificance of the metric that brought us here first: price.\n\nMurphy's law clearly states \"Cash Rules Everything Around Me, C.R.E.A.M; get the\nmoney, Dolla dolla bill y'all.\"  Given this reality, a minimum requirement for\nMapbox should be it's pricing model when compared to Google's.\n\nMapbox Pricing Tiers\nPrice\n Web apps\n Mobile SDKs\n Free to Start\n\n$0\n\n50,000  map views /mo\n\n50,000  Geocoding requests /mo\n\n50,000  Directions requests /mo\n\n50,000  Matrix elements /mo\n\n50,000  Tilequery requests /mo\n\n50,000  map views /mo\n\n50,000  Geocoding requests /mo\n\n50,000  Directions requests /mo\n\n50,000  Matrix elements /mo\n\n50,000  Tilequery requests /mo\n\nAdditional Usage\n\n$0.50\n\n50,000  map views /mo\n\n50,000  Geocoding requests /mo\n\n50,000  Directions requests /mo\n\n50,000  Matrix elements /mo\n\n50,000  Tilequery requests /mo\n\n50,000  map views /mo\n\n50,000  Geocoding requests /mo\n\n50,000  Directions requests /mo\n\n50,000  Matrix elements /mo\n\n50,000  Tilequery requests /mo\n\nCompare this to Google's transparent pricing structure:\n\nGoogle API Pricing Tiers\nPrice\n Web apps\n Mobile SDKs\n Starter Pack\n\nBrown Paper Bag full of $20s\n\n5  and a half map views /mo\n\n11  times thinking about the API /mo\n\n6  verbal mentions of \"Google\" /mo\n\n2  directions to shitty parties /mo\n\n8  visits to anywhere /mo\n\n9  Android unlocks /mo\n\n12  Google queries for restaurants /mo\n\n3  \"OK Google\" queries /mo\n\n7  Accidental app opens /mo\n\n1  Creating the next \"Uber for X\" /mo\n\nAdditional Usage\n\nEleventy Billion Dollars\n\nUnlimited Requests!* \n\n*See Pricing \n\nUnlimited Requests!*\n\n*See Pricing\n\nSeems like a convincing point in the win column for Mapbox. If we stay within\nreason, Mapbox can essentially serve us as an entirely free service.\n\nSurely we must be missing something  since we're opting for free services\nthough, right? How do Mapbox visualizations stack up against Google Maps?\n\n\n[https://codepen.io/ro-ka/pen/ENoOjz/]  [https://codepen.io/ro-ka] \n[https://codepen.io]\n\nPardon my French here, but hot damn that map is dope.  There are plenty more\nexamples where that came from, but it's clear that Mapbox has lowkey stolen the\nhearts of the scientific analysis  market, while Google  concerns itself on the \nconsumer  and business  markets.\n\nTonight's Itinerary: Creating Dope Maps\nTo make some data art, we have a few items on our checklist:\n\n * Obtain a dataset with location-based data: In our case of routing, we need a\n   dataset with a set origin and destination per row.\n * Create direction object routes by running our dataset through the Mapbox API.\n    \n * Create a styled map for our presentation by using Mapbox's style editor.\n * Overlay our route data on our beautiful map.\n\nStep 1: Get Some Free Data\nNow that we've properly shit-talked Google, let's use Google. We're going to\nneed to get some good data, and BigQuery  has some awesome free datasets that we\ncan run wild with. I'll be opting for NYC's dataset on Citibike trips, as it\nprovides a clean set of data where starting and ending coordinates are always\npresent.\n\nGoogle Cloud's Free Dataset of Citibike TripsAs a side note, BigQuery is great.\nEven if you're only somewhat versed in SQL, BigQuery's syntax is essentially\nwhatever your first guess would be.\n\nGranted we only need the start and end locations to make our map, but i decided\nto take a bit extra for curiosity's sake:\n\nstart_namestart_latitudestart_longitudeend_nameend_latitudeend_longitude1 Ave &\nE 15 St40.732218530-73.9816555701 Ave & E 18 St40.733812192-73.9805442091 Ave &\nE 30 St40.741443870-73.975360820E 39 St & 2 Ave40.747803730-73.9734419001 Ave &\nE 62 St40.761227400-73.960940220E 75 St & 3 Ave40.771129270-73.9577229702 Ave &\nE 99 St40.786258600-73.9455257903 Ave & E 112 St40.795508000-73.9416060003 St &\n3 Ave40.675070500-73.98775226010 St & 7 Ave40.666207800-73.9819988603 St &\nProspect Park West40.668132000-73.9736383103 St & Prospect Park West40.668132000\n-73.9736383106 Ave & W 33 St40.749012710-73.988483950W 37 St & 5 Ave40.750380090\n-73.9833898808 Ave & W 52 St40.763707390-73.985161500Central Park S & 6 Ave\n40.765909360-73.97634151011 Ave & W 41 St40.760300960-73.998842220W 34 St & 11\nAve40.755941590-74.00211630012 Ave & W 40 St40.760875020-74.002776680W 42 St & 8\nAve40.757569900-73.990985070Allen St & E Houston St40.722055000-73.989111000Mott\nSt & Prince St40.723179580-73.994800120Allen St & Hester St40.716058660\n-73.991907590Greenwich St & N Moore St40.720434110-74.010206090Amsterdam Ave & W\n73 St40.779668090-73.980930448E 85 St & 3 Ave40.778012030-73.954071490Bank St &\nHudson St40.736528890-74.006180260MacDougal St & Prince St40.727102580\n-74.002970880Bank St & Washington St40.736196700-74.008592070W 4 St & 7 Ave S\n40.734011430-74.002938770Barclay St & Church St40.712912240-74.010202340Clinton\nSt & Tillary St40.696192000-73.991218000Berkeley Pl & 7 Ave40.675146839\n-73.975232095West Drive & Prospect Park West40.661063372-73.979452550Bialystoker\nPl & Delancey St40.716226440-73.982612060Reade St & Broadway40.714504510\n-74.005627890Broadway & W 24 St40.742354300-73.989150760South End Ave & Liberty\nSt40.711512000-74.015756000Broadway & W 29 St40.746200900-73.988557230Stanton St\n& Chrystie St40.722293460-73.991475350Broadway & W 56 St40.765265400\n-73.981923380Broadway & W 49 St40.760683271-73.984527290Broadway & W 58 St\n40.766953170-73.9816933305 Ave & E 78 St40.776321422-73.964273930Cadman Plaza E\n& Red Cross Pl40.699917550-73.989717730Leonard St & Church St40.717571000\n-74.005549000Cadman Plaza E & Tillary St40.695976830-73.990148920Lawrence St &\nWilloughby St40.692361780-73.986317460Carmine St & 6 Ave40.730385990\n-74.002149880W 27 St & 7 Ave40.746647000-73.993915000Central Park W & W 96 St\n40.791270000-73.964839000W 52 St & 6 Ave40.761329831-73.979820013Central Park\nWest & W 76 St40.778967840-73.973747370Central Park S & 6 Ave40.765909360\n-73.976341510Step 2: Style a Sexy Map in Mapbox Studio\nMapbox provides a superb web UI labeled “studio” interface to help us get\nstarted. The “studio” web UI is separated into three parts: custom map styles, \ntilesets, and datasets.\n\nAll of these can we saved for later use.These three sections can be summarized\nas:\n\n * Styles: Custom map styles editable via a GUI, which produce a stylesheet for\n   convenience \n * Tilesets: Map overlays we can apply from our own data or otherwise to segment\n   geographical areas\n * Datasets:  Data containing anything from points on a map to complex direction\n   routes we can overlay atop our map.\n\nHere's a quick look at the Map style editor:\n\nI want to wake up, in a city that doesn't sleep.Save your styled map once you\nfind it to be adequately attractive. We'll need it for later.\n\nStep 4: Start a Flask App\nOf course we're making a Flask app; is there even any other kind? We'll be using\nthe Flask Application Factory setup as we usually do, so we should end up with a\nfile structure as below. If you feel like you're getting ahead of ourself,\ncheckout our post on structuring Flask applications\n[https://hackersandslackers.com/structuring-your-flask-app/].\n\nmapbox-app\n├── /application\n│   └── __init__.py\n├── /datasets\n│   ├── data.json\n│   └── output.csv   \n├── /maps\n│   ├── __init__.py\n│   ├── /templates\n│   │    └── index.html\n│   ├── views.py\n│   └── plots.py\n├── start.sh\n├── settings.py\n├── wsgi.py\n├── Pipfile\n├── README.md\n└── requirements.txt\n\n\nTo mix things up a bit we'll use a shell script this time to handle envars and\nrunning our script. Start by creating start.sh:\n\n# start.sh\n\nexport FLASK_APP=wsgi.py\nexport FLASK_DEBUG=1\nexport APP_CONFIG_FILE=settings.py\nflask run\n\n\nYes, we'll be using settings.py  as our config file for a change. Ahhh, just\nlike the Django days. This file should contain a Mapbox access token. Mapbox\nprovides you with a public token by default in many of its tutorials (noted by\nthe pk  prefix for 'public key' - contrast this with sk  for 'secret key'). If\nyou'd like to do anything meaningful with Mapbox, you'll have to retrieve a\nsecret key via the UI. Then we can add this token to settings.py  as such:\n\nMAPBOX_ACCESS_TOKEN=\"sk.eyJ1IB&F^&f^R&DFRUYFTRUctyrcTYRUFrtCFTYDYTuEg\"\n\n\nFinally, here's a look at application/__init__.py  just to make sure we're on\nthe same page:\n\n# application/__init__.py\n\nimport os\nfrom flask import Flask, g\n\ndef create_app():\n    \"\"\"Construct the core application.\"\"\"\n    app = Flask(__name__)\n    app.config.from_envvar('APP_CONFIG_FILE', silent=True)\n\n    with app.app_context():\n        # Construct map blueprint\n        from maps import mapviews\n        app.register_blueprint(mapviews.map_blueprint)\n\n        return app\n\n\nStep 5: Create a Blueprint for Your Map\nYou may have noticed we registered this Blueprint in the previous step. Create a\n /maps  directory which we'll set as a module; we'll need this to handle the \nview, model (or just data),  and controller (routes.py as seen below).\n\nroutes.py\nimport os\nfrom flask import Blueprint, render_template, request\nfrom flask import current_app as app\nfrom . import locations\n\nmap_blueprint = Blueprint('map', __name__, template_folder='templates', static_folder='static')\nplot_locations = locations.LocationData()\n\n\n# Landing Page\n@map_blueprint.route('/', methods=['GET'])\ndef map():\n    return render_template('index.html', ACCESS_KEY=app.MAPBOX_ACCESS_KEY,  locations=plot_locations.get_plots, title=\"CitiBike Mapbox App.\")\n\n\n\ntemplates/index.html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset='utf-8' />\n  <title>{{title}}</title>\n  <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />\n  <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.49.0/mapbox-gl.js'></script>\n  <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.49.0/mapbox-gl.css' rel='stylesheet' />\n  <style>\n    body { margin:0; padding:0; }\n    #map { position:absolute; top:0; bottom:0; width:100%; }\n  </style>\n</head>\n<body>\n\n<div id='map'></div>\n<script>\nmapboxgl.accessToken = {{MAPBOX_ACCESS_TOKEN}};\nconst map = new mapboxgl.Map({\n  container: 'map',\n  style: 'mapbox://styles/toddbirchard/cjpij1gfhghiy2spetf5w998w',\n  center: [-73.981856, 40.703820],\n  zoom: 11.1,\n\n});\n\nmap.on('load', function(e) {\n  // Add the data to your map as a layer\n  map.addLayer({\n    id: 'locations',\n    type: 'symbol',\n    // Add a GeoJSON source containing place coordinates and information.\n    source: {\n      type: 'geojson',\n      data: {{locations}}\n    },\n    layout: {\n      'icon-image': 'restaurant-15',\n      'icon-allow-overlap': true,\n    }\n  });\n});\n</script>\n\n</body>\n</html>\n\n\ndata.py\nNormally this is where we'd use the magic of the Mapbox API to get coordinates,\nroute objects, or whatever it is your heart hopes to plot. This is intended to\nbe intro post, so let's break that logic out for another time and use a dataset\nMapbox would be happy to receive for the sake of results.\n\nStep 6: Uploading our Dataset via Mapbox Studio\nMapbox graciously lets us upload our data via their Studio UI, which does the\nunthinkable; immediately upon upload, Mapbox will take the data we give it\n(whether it be CSV, GeoJSON, etc) and immediately parse it in a way that makes\nsense. Upload your dataset at https://www.mapbox.com/studio/datasets/:\n\nUploading the raw data of our Citibike CSV.Next, Mapbox shows us a preview of\nour data before we even know what happened:\n\nIt's like they don't even want us to do work.Step 7: Do It in Flask\nAfter uploading your dataset via mapbox studio, you can actually redownload  the\ndata with a subtle twist: your data will be automatically formatted as GeoJSON:\nthe format of JSON objects Mapbox uses to plot points, draw routes, etc.\n\nSince we've had a long day, I'll allow you to download this pre-formatted data\nand hardcore the values in to your Map view. You're getting off easy for now,\nbut next time we're doing this programmatically ;).\n\n<!DOCTYPE html>\n<html>\n\n<head>\n  <meta charset='utf-8' />\n  <title>{{title}}</title>\n  <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />\n  <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.49.0/mapbox-gl.js'></script>\n  <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.49.0/mapbox-gl.css' rel='stylesheet' />\n  <style>\n    body {\n      margin: 0;\n      padding: 0;\n    }\n\n    #map {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      width: 100%;\n    }\n  </style>\n</head>\n\n<body>\n\n  <div id='map'></div>\n  <script>\n    mapboxgl.accessToken = '{{ACCESS_KEY}}';\n    const map = new mapboxgl.Map({\n      container: 'map',\n      style: 'mapbox://styles/toddbirchard/cjpij1oxl3hiy2spetf5w998w',\n      center: [-73.981856, 40.703820],\n      zoom: 11.1,\n\n    });\n\n\n    map.addLayer({\n      \"id\": \"points\",\n      \"type\": \"symbol\",\n      \"source\": {\n        \"features\": [{\n            \"type\": \"Feature\",\n            \"properties\": {\n              \"start_station_name\": \"Central Park West & W 76 St\",\n              \"end_station_name\": \"Central Park S & 6 Ave\",\n              \"end_station_latitude\": \"40.76590936\",\n              \"end_station_longitude\": \"-73.97634151\"\n            },\n            \"geometry\": {\n              \"coordinates\": [\n                -73.973747,\n                40.778967\n              ],\n              \"type\": \"Point\"\n            },\n            \"id\": \"000a1f944d4dd786d9e7ed04620af02b\"\n          },\n          {\n            \"type\": \"Feature\",\n            \"properties\": {\n              \"start_station_name\": \"W 64 St & West End Ave\",\n              \"end_station_name\": \"W 70 St & Amsterdam Ave\",\n              \"end_station_latitude\": \"40.77748046\",\n              \"end_station_longitude\": \"-73.98288594\"\n            },\n            \"geometry\": {\n              \"coordinates\": [\n                -73.987537,\n                40.774528\n              ],\n              \"type\": \"Point\"\n            },\n            \"id\": \"01d8c19524f067a3f4712653265e0a49\"\n          },\n          {\n            \"type\": \"Feature\",\n            \"properties\": {\n              \"start_station_name\": \"E 20 St & FDR Drive\",\n              \"end_station_name\": \"W 13 St & 7 Ave\",\n              \"end_station_latitude\": \"40.73781509\",\n              \"end_station_longitude\": \"-73.99994661\"\n            },\n            \"geometry\": {\n              \"coordinates\": [\n                -73.975738,\n                40.733142\n              ],\n              \"type\": \"Point\"\n            },\n            \"id\": \"038ac5403b136e34874a7278f64d4e95\"\n          },\n          {\n              \\\\ --------------------------------------\n              (etc etc....)\n               \\\\ --------------------------------------\n          },\n          {\n            \"type\": \"Feature\",\n            \"properties\": {\n              \"start_station_name\": \"Mercer St & Bleecker St\",\n              \"end_station_name\": \"1 Ave & E 30 St\",\n              \"end_station_latitude\": \"40.74144387\",\n              \"end_station_longitude\": \"-73.97536082\"\n            },\n            \"geometry\": {\n              \"coordinates\": [\n                -73.996621,\n                40.727063\n              ],\n              \"type\": \"Point\"\n            },\n            \"id\": \"ff1daf9aadbf0cd6b788bd76f0a3f333\"\n          }\n        ],\n        \"type\": \"FeatureCollection\"\n      },\n      \"layout\": {\n        \"icon-image\": \"{icon}-15\",\n        \"text-field\": \"{title}\",\n        \"text-font\": [\"Open Sans Semibold\", \"Arial Unicode MS Bold\"],\n        \"text-offset\": [0, 0.6],\n        \"text-anchor\": \"top\"\n      }\n    });\n  </script>\n\n</body>\n\n</html>\n\n\nUncharted Territory\nThere's way more for us to explore in Mapbox. Stay tuned for the rest of this\nseries as we explore generating GeoData programmatically, and build interactive\napplications to really get users involved in map data by letting them control\nconstraints such as time, etc.","html":"<p>There's a trend among those using Jupyter Notebooks (or equivalent) which leads me to believe humanity is coming to an important realization: <strong>Google Maps,</strong> as an API is <em>expensive.</em></p><p>Regardless if Google maps is embedded as a consumer-facing widget, or part of a routine data-pipeline, a single surge of high-traffic can leave enterprises with price tags in the hundreds of thousands of dollars. In fact, I can hardly remember a product where this <em>hadn't</em> become the case. One can hardly blame the search engine; after all, our tendency to ignore the Terms and Service agreements (as well as payment policies) has always been core to the Google business model.  Even then, there are enough enterprises to go around to turn a blind eye and actually pay such a bill willingly without exploring alternatives.</p><p>Data Scientists in particular have no excuse for inaction when it comes to seeking a better alternative. As it turns out, there <em>is</em> one, and it is <strong>Cheaper</strong>, <strong>Easier, </strong>and perhaps more <strong>Fully Featured</strong> than its Google Maps counterpart. That product is <strong>Mapbox</strong>. </p><p><strong>Mapbox</strong> is much more than a Google API clone. The web product offers a plethora of UI-driven features that we can use to customize maps as well as save or effortlessly transform raw data into workable GeoJSON data without even touching an API (which, mind you, there is.... with SDKs in every conceivable language). We're going to create a quick map visualization incorporating some real data to get introduced to Mapbox's functionality, but this is only the beginning. Download the line we'll see just how easy it is to incorporate Mapbox in products like <strong>Plot.ly Dash</strong> or even <strong>Jupyter Notebooks</strong>.</p><h2 id=\"x-marks-the-spot\">X Marks the Spot</h2><p>Before straying from reigning champion Google Maps, it's worth exploring the significance of the metric that brought us here first: price.</p><p>Murphy's law clearly states <strong>\"Cash Rules Everything Around Me, C.R.E.A.M; get the money, Dolla dolla bill y'all.\"</strong> Given this reality, a minimum requirement for Mapbox should be it's pricing model when compared to Google's.</p><h3 id=\"mapbox-pricing-tiers\">Mapbox Pricing Tiers</h3><style>\n  p {\n    line-height: 1.2;\n    color: #444350;\n    margin: 0 0 0 0 !important;\n  }\n   \n  td > p {\n      margin: 0 0 5px 0 !important;\n    }\n    \n  .introbox {\n    text-align: left;\n    vertical-align: top;\n    padding: 3%;\n    max-width: 200px;\n   }\n\n  .tier {\n    font-weight: 900 !important;\n    font-size: 16px !important;\n    display: block;\n    line-height: 1 !important;\n    margin: 0 0 10px !important;\n  }\n\n  .price {\n    font-weight: 500 !important;\n\tfont-size: 18px !important;\n    display: block;\n    color: #60afe6 !important;\n    line-height: 1.3 !important;\n  }\n    \n    thead th {\n        text-align: left !important;\n    }\n    \n    th strong {\n      font-size: 18px;\n      text-align: left;\n    }\n    \n</style>\n\n<div class=\"tableContainer\">\n  <table class=\"table left\">\n    <thead>\n      <tr>\n        <th>\n          <strong>Price</strong>\n        </th>\n        <th>\n          <strong>Web apps</strong>\n        </th>\n        <th>\n          <strong>Mobile SDKs</strong>\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td class=\"introbox\">\n          <p class=\"tier\">Free to Start</p>\n          <p class=\"price\">$0</p>\n        </td>\n        <td style=\"padding: 20px 15px;\">\n          <p><strong>50,000</strong> map views <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Geocoding requests <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Directions requests <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Matrix elements <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Tilequery requests <strong>/mo</strong></p>\n        </td>\n        <td style=\"padding: 20px 15px;\">\n          <p><strong>50,000</strong> map views <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Geocoding requests <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Directions requests <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Matrix elements <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Tilequery requests <strong>/mo</strong></p>\n        </td>\n      </tr>\n      <tr>\n        <td class=\"introbox\">\n          <p class=\"tier\">Additional Usage</p>\n          <p class=\"price\">$0.50</p>\n        </td>\n        <td style=\"padding: 20px 15px;\">\n          <p><strong>50,000</strong> map views <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Geocoding requests <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Directions requests <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Matrix elements <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Tilequery requests <strong>/mo</strong></p>\n        </td>\n        <td style=\"padding: 20px 15px;\">\n          <p><strong>50,000</strong> map views <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Geocoding requests <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Directions requests <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Matrix elements <strong>/mo</strong></p>\n          <p><strong>50,000</strong> Tilequery requests <strong>/mo</strong></p>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n<p>Compare this to Google's transparent pricing structure:</p><h3 id=\"google-api-pricing-tiers\">Google API Pricing Tiers</h3><style>\n  p {\n    line-height: 1.2;\n    color: #444350;\n    margin: 0 0 0 0 !important;\n  }\n    \n  .introbox {\n      text-align: left;\n      vertical-align: top;\n      padding: 3%;\n      max-width: 200px;\n    }\n\n  .tier {\n    font-weight: 900 !important;\n    font-size: 16px !important;\n    display: block;\n    line-height: 1 !important;\n    margin: 0 0 10px !important;\n  }\n\n  .price {\n    font-weight: 500 !important;\n\tfont-size: 18px !important;\n    display: block;\n    color: #60afe6 !important;\n    line-height: 1.3 !important;\n  }\n    \n    thead th {\n        text-align: left !important;\n    }\n    \n    th strong {\n      font-size: 18px;\n      text-align: left;\n    }\n\n</style>\n\n<div class=\"tableContainer\">\n  <table class=\"table left\">\n    <thead>\n      <tr>\n        <th>\n          <strong>Price</strong>\n        </th>\n        <th>\n          <strong>Web apps</strong>\n        </th>\n        <th>\n          <strong>Mobile SDKs</strong>\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td class=\"introbox\">\n          <p class=\"tier\">Starter Pack</p>\n          <p class=\"price\">Brown Paper Bag full of $20s</p>\n        </td>\n        <td style=\"padding: 20px 15px;\">\n          <p><strong>5</strong> and a half map views  <strong>/mo</strong></p>\n          <p><strong>11</strong> times thinking about the API <strong>/mo</strong></p>\n          <p><strong>6</strong> verbal mentions of \"Google\"  <strong>/mo</strong></p>\n          <p><strong>2</strong> directions to shitty parties <strong>/mo</strong></p>\n          <p><strong>8</strong> visits to anywhere <strong>/mo</strong></p>\n        </td>\n        <td style=\"padding: 20px 15px;\">\n          <p><strong>9</strong> Android unlocks <strong>/mo</strong></p>\n          <p><strong>12</strong> Google queries for restaurants  <strong>/mo</strong></p>\n          <p><strong>3</strong> \"OK Google\" queries  <strong>/mo</strong></p>\n          <p><strong>7</strong> Accidental app opens <strong>/mo</strong></p>\n          <p><strong>1</strong> Creating the next \"Uber for X\" <strong>/mo</strong></p>\n        </td>\n      </tr>\n      <tr>\n        <td class=\"introbox\">\n          <p class=\"tier\">Additional Usage</p>\n          <p class=\"price\">Eleventy Billion Dollars</p>\n        </td>\n        <td style=\"padding: 20px 15px;\">\n          <p>Unlimited Requests!*  </p>\n          <p><small>*See Pricing </small></p>\n        </td>\n        <td style=\"padding: 20px 15px;\">\n          <p>Unlimited Requests!*</p>\n          <p><small>*See Pricing</small></p>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n<p>Seems like a convincing point in the win column for <strong>Mapbox</strong>. If we stay within reason, Mapbox can essentially serve us as an entirely free service.</p><p>Surely we must be missing <em>something</em> since we're opting for free services though, right? How do Mapbox visualizations stack up against Google Maps?</p><p data-height=\"511\" data-theme-id=\"0\" data-slug-hash=\"ENoOjz\" data-default-tab=\"result\" data-user=\"ro-ka\" data-pen-title=\"3D map visualizations with Mapbox GL JS\" class=\"codepen\"><a href=\"https://codepen.io/ro-ka/pen/ENoOjz/\"><br></a><a href=\"https://codepen.io/ro-ka\"></a><a href=\"https://codepen.io\"></a></p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script><p>Pardon my French here, but hot damn that map is <em>dope.</em> There are plenty more examples where that came from, but it's clear that <strong>Mapbox </strong>has lowkey stolen the hearts of the <em>scientific analysis</em> market, while <strong>Google</strong> concerns itself on the <em>consumer</em> and <em>business</em> markets.</p><h2 id=\"tonight-s-itinerary-creating-dope-maps\">Tonight's Itinerary: Creating Dope Maps</h2><p>To make some data art, we have a few items on our checklist:</p><ul><li>Obtain a dataset with location-based data: In our case of routing, we need a dataset with a set origin and destination per row.</li><li>Create <strong>direction </strong>object routes by running our dataset through the Mapbox API. </li><li>Create a styled map for our presentation by using Mapbox's style editor.</li><li>Overlay our route data on our beautiful map.</li></ul><h2 id=\"step-1-get-some-free-data\">Step 1: Get Some Free Data</h2><p>Now that we've properly shit-talked Google, let's use Google. We're going to need to get some good data, and <strong>BigQuery</strong> has some awesome free datasets that we can run wild with. I'll be opting for <strong>NYC's dataset on Citibike trips</strong>, as it provides a clean set of data where starting and ending coordinates are always present.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/Screen-Shot-2018-12-07-at-2.53.34-AM.png\" class=\"kg-image\"><figcaption>Google Cloud's Free Dataset of Citibike Trips</figcaption></figure><p>As a side note, BigQuery is great. Even if you're only somewhat versed in SQL, BigQuery's syntax is essentially whatever your first guess would be.</p><p>Granted we only need the start and end locations to make our map, but i decided to take a bit extra for curiosity's sake:</p><div class=\"tableContainer\">\n<table border=\"1\" class=\"table table-striped table-bordered table-hover table-condensed\">\n<thead><tr><th title=\"Field #1\">start_name</th>\n<th title=\"Field #2\">start_latitude</th>\n<th title=\"Field #3\">start_longitude</th>\n<th title=\"Field #4\">end_name</th>\n<th title=\"Field #5\">end_latitude</th>\n<th title=\"Field #6\">end_longitude</th>\n</tr></thead>\n<tbody><tr><td>1 Ave &amp; E 15 St</td>\n<td align=\"right\">40.732218530</td>\n<td align=\"right\">-73.981655570</td>\n<td>1 Ave &amp; E 18 St</td>\n<td align=\"right\">40.733812192</td>\n<td align=\"right\">-73.980544209</td>\n</tr>\n<tr><td>1 Ave &amp; E 30 St</td>\n<td align=\"right\">40.741443870</td>\n<td align=\"right\">-73.975360820</td>\n<td>E 39 St &amp; 2 Ave</td>\n<td align=\"right\">40.747803730</td>\n<td align=\"right\">-73.973441900</td>\n</tr>\n<tr><td>1 Ave &amp; E 62 St</td>\n<td align=\"right\">40.761227400</td>\n<td align=\"right\">-73.960940220</td>\n<td>E 75 St &amp; 3 Ave</td>\n<td align=\"right\">40.771129270</td>\n<td align=\"right\">-73.957722970</td>\n</tr>\n<tr><td>2 Ave &amp; E 99 St</td>\n<td align=\"right\">40.786258600</td>\n<td align=\"right\">-73.945525790</td>\n<td>3 Ave &amp; E 112 St</td>\n<td align=\"right\">40.795508000</td>\n<td align=\"right\">-73.941606000</td>\n</tr>\n<tr><td>3 St &amp; 3 Ave</td>\n<td align=\"right\">40.675070500</td>\n<td align=\"right\">-73.987752260</td>\n<td>10 St &amp; 7 Ave</td>\n<td align=\"right\">40.666207800</td>\n<td align=\"right\">-73.981998860</td>\n</tr>\n<tr><td>3 St &amp; Prospect Park West</td>\n<td align=\"right\">40.668132000</td>\n<td align=\"right\">-73.973638310</td>\n<td>3 St &amp; Prospect Park West</td>\n<td align=\"right\">40.668132000</td>\n<td align=\"right\">-73.973638310</td>\n</tr>\n<tr><td>6 Ave &amp; W 33 St</td>\n<td align=\"right\">40.749012710</td>\n<td align=\"right\">-73.988483950</td>\n<td>W 37 St &amp; 5 Ave</td>\n<td align=\"right\">40.750380090</td>\n<td align=\"right\">-73.983389880</td>\n</tr>\n<tr><td>8 Ave &amp; W 52 St</td>\n<td align=\"right\">40.763707390</td>\n<td align=\"right\">-73.985161500</td>\n<td>Central Park S &amp; 6 Ave</td>\n<td align=\"right\">40.765909360</td>\n<td align=\"right\">-73.976341510</td>\n</tr>\n<tr><td>11 Ave &amp; W 41 St</td>\n<td align=\"right\">40.760300960</td>\n<td align=\"right\">-73.998842220</td>\n<td>W 34 St &amp; 11 Ave</td>\n<td align=\"right\">40.755941590</td>\n<td align=\"right\">-74.002116300</td>\n</tr>\n<tr><td>12 Ave &amp; W 40 St</td>\n<td align=\"right\">40.760875020</td>\n<td align=\"right\">-74.002776680</td>\n<td>W 42 St &amp; 8 Ave</td>\n<td align=\"right\">40.757569900</td>\n<td align=\"right\">-73.990985070</td>\n</tr>\n<tr><td>Allen St &amp; E Houston St</td>\n<td align=\"right\">40.722055000</td>\n<td align=\"right\">-73.989111000</td>\n<td>Mott St &amp; Prince St</td>\n<td align=\"right\">40.723179580</td>\n<td align=\"right\">-73.994800120</td>\n</tr>\n<tr><td>Allen St &amp; Hester St</td>\n<td align=\"right\">40.716058660</td>\n<td align=\"right\">-73.991907590</td>\n<td>Greenwich St &amp; N Moore St</td>\n<td align=\"right\">40.720434110</td>\n<td align=\"right\">-74.010206090</td>\n</tr>\n<tr><td>Amsterdam Ave &amp; W 73 St</td>\n<td align=\"right\">40.779668090</td>\n<td align=\"right\">-73.980930448</td>\n<td>E 85 St &amp; 3 Ave</td>\n<td align=\"right\">40.778012030</td>\n<td align=\"right\">-73.954071490</td>\n</tr>\n<tr><td>Bank St &amp; Hudson St</td>\n<td align=\"right\">40.736528890</td>\n<td align=\"right\">-74.006180260</td>\n<td>MacDougal St &amp; Prince St</td>\n<td align=\"right\">40.727102580</td>\n<td align=\"right\">-74.002970880</td>\n</tr>\n<tr><td>Bank St &amp; Washington St</td>\n<td align=\"right\">40.736196700</td>\n<td align=\"right\">-74.008592070</td>\n<td>W 4 St &amp; 7 Ave S</td>\n<td align=\"right\">40.734011430</td>\n<td align=\"right\">-74.002938770</td>\n</tr>\n<tr><td>Barclay St &amp; Church St</td>\n<td align=\"right\">40.712912240</td>\n<td align=\"right\">-74.010202340</td>\n<td>Clinton St &amp; Tillary St</td>\n<td align=\"right\">40.696192000</td>\n<td align=\"right\">-73.991218000</td>\n</tr>\n<tr><td>Berkeley Pl &amp; 7 Ave</td>\n<td align=\"right\">40.675146839</td>\n<td align=\"right\">-73.975232095</td>\n<td>West Drive &amp; Prospect Park West</td>\n<td align=\"right\">40.661063372</td>\n<td align=\"right\">-73.979452550</td>\n</tr>\n<tr><td>Bialystoker Pl &amp; Delancey St</td>\n<td align=\"right\">40.716226440</td>\n<td align=\"right\">-73.982612060</td>\n<td>Reade St &amp; Broadway</td>\n<td align=\"right\">40.714504510</td>\n<td align=\"right\">-74.005627890</td>\n</tr>\n<tr><td>Broadway &amp; W 24 St</td>\n<td align=\"right\">40.742354300</td>\n<td align=\"right\">-73.989150760</td>\n<td>South End Ave &amp; Liberty St</td>\n<td align=\"right\">40.711512000</td>\n<td align=\"right\">-74.015756000</td>\n</tr>\n<tr><td>Broadway &amp; W 29 St</td>\n<td align=\"right\">40.746200900</td>\n<td align=\"right\">-73.988557230</td>\n<td>Stanton St &amp; Chrystie St</td>\n<td align=\"right\">40.722293460</td>\n<td align=\"right\">-73.991475350</td>\n</tr>\n<tr><td>Broadway &amp; W 56 St</td>\n<td align=\"right\">40.765265400</td>\n<td align=\"right\">-73.981923380</td>\n<td>Broadway &amp; W 49 St</td>\n<td align=\"right\">40.760683271</td>\n<td align=\"right\">-73.984527290</td>\n</tr>\n<tr><td>Broadway &amp; W 58 St</td>\n<td align=\"right\">40.766953170</td>\n<td align=\"right\">-73.981693330</td>\n<td>5 Ave &amp; E 78 St</td>\n<td align=\"right\">40.776321422</td>\n<td align=\"right\">-73.964273930</td>\n</tr>\n<tr><td>Cadman Plaza E &amp; Red Cross Pl</td>\n<td align=\"right\">40.699917550</td>\n<td align=\"right\">-73.989717730</td>\n<td>Leonard St &amp; Church St</td>\n<td align=\"right\">40.717571000</td>\n<td align=\"right\">-74.005549000</td>\n</tr>\n<tr><td>Cadman Plaza E &amp; Tillary St</td>\n<td align=\"right\">40.695976830</td>\n<td align=\"right\">-73.990148920</td>\n<td>Lawrence St &amp; Willoughby St</td>\n<td align=\"right\">40.692361780</td>\n<td align=\"right\">-73.986317460</td>\n</tr>\n<tr><td>Carmine St &amp; 6 Ave</td>\n<td align=\"right\">40.730385990</td>\n<td align=\"right\">-74.002149880</td>\n<td>W 27 St &amp; 7 Ave</td>\n<td align=\"right\">40.746647000</td>\n<td align=\"right\">-73.993915000</td>\n</tr>\n<tr><td>Central Park W &amp; W 96 St</td>\n<td align=\"right\">40.791270000</td>\n<td align=\"right\">-73.964839000</td>\n<td>W 52 St &amp; 6 Ave</td>\n<td align=\"right\">40.761329831</td>\n<td align=\"right\">-73.979820013</td>\n</tr>\n<tr><td>Central Park West &amp; W 76 St</td>\n<td align=\"right\">40.778967840</td>\n<td align=\"right\">-73.973747370</td>\n<td>Central Park S &amp; 6 Ave</td>\n<td align=\"right\">40.765909360</td>\n<td align=\"right\">-73.976341510</td>\n</tr>\n</tbody></table>\n</div><h2 id=\"step-2-style-a-sexy-map-in-mapbox-studio\">Step 2: Style a Sexy Map in Mapbox Studio</h2><p>Mapbox provides a superb web UI labeled “studio” interface to help us get started. The “studio” web UI is separated into three parts: <strong>custom map styles</strong>, <strong>tilesets</strong>, and <strong>datasets</strong>.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/mapboxstudio.gif\" class=\"kg-image\"><figcaption>All of these can we saved for later use.</figcaption></figure><p>These three sections can be summarized as:</p><ul><li><strong>Styles: </strong>Custom map styles editable via a GUI, which produce a stylesheet for convenience </li><li><strong>Tilesets: </strong>Map overlays we can apply from our own data or otherwise to segment geographical areas</li><li><strong>Datasets:</strong> Data containing anything from points on a map to complex direction routes we can overlay atop our map.</li></ul><p>Here's a quick look at the Map style editor:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/Screen-Shot-2018-12-07-at-4.29.43-PM.png\" class=\"kg-image\"><figcaption>I want to wake up, in a city that doesn't sleep.</figcaption></figure><p>Save your styled map once you find it to be adequately attractive. We'll need it for later.</p><h2 id=\"step-4-start-a-flask-app\">Step 4: Start a Flask App</h2><p>Of course we're making a Flask app; is there even any other kind? We'll be using the Flask Application Factory setup as we usually do, so we should end up with a file structure as below. If you feel like you're getting ahead of ourself, checkout our post on <a href=\"https://hackersandslackers.com/structuring-your-flask-app/\">structuring Flask applications</a>.</p><pre><code class=\"language-bash\">mapbox-app\n├── /application\n│   └── __init__.py\n├── /datasets\n│   ├── data.json\n│   └── output.csv   \n├── /maps\n│   ├── __init__.py\n│   ├── /templates\n│   │    └── index.html\n│   ├── views.py\n│   └── plots.py\n├── start.sh\n├── settings.py\n├── wsgi.py\n├── Pipfile\n├── README.md\n└── requirements.txt\n</code></pre>\n<p>To mix things up a bit we'll use a shell script this time to handle envars and running our script. Start by creating <strong>start.sh</strong>:</p><pre><code class=\"language-bash\"># start.sh\n\nexport FLASK_APP=wsgi.py\nexport FLASK_DEBUG=1\nexport APP_CONFIG_FILE=settings.py\nflask run\n</code></pre>\n<p>Yes, we'll be using <code>settings.py</code> as our config file for a change. Ahhh, just like the Django days. This file should contain a Mapbox <strong>access token</strong>. Mapbox provides you with a public token by default in many of its tutorials (noted by the <em><strong>pk</strong> </em>prefix for <em>'public key' - </em>contrast this with <strong><em>sk</em></strong> for <em>'secret key'</em>). If you'd like to do anything meaningful with Mapbox, you'll have to retrieve a secret key via the UI. Then we can add this token to <code>settings.py</code> as such:</p><pre><code class=\"language-bash\">MAPBOX_ACCESS_TOKEN=&quot;sk.eyJ1IB&amp;F^&amp;f^R&amp;DFRUYFTRUctyrcTYRUFrtCFTYDYTuEg&quot;\n</code></pre>\n<p>Finally, here's a look at <code>application/__init__.py</code> just to make sure we're on the same page:</p><pre><code class=\"language-python\"># application/__init__.py\n\nimport os\nfrom flask import Flask, g\n\ndef create_app():\n    &quot;&quot;&quot;Construct the core application.&quot;&quot;&quot;\n    app = Flask(__name__)\n    app.config.from_envvar('APP_CONFIG_FILE', silent=True)\n\n    with app.app_context():\n        # Construct map blueprint\n        from maps import mapviews\n        app.register_blueprint(mapviews.map_blueprint)\n\n        return app\n</code></pre>\n<h2 id=\"step-5-create-a-blueprint-for-your-map\">Step 5: Create a Blueprint for Your Map</h2><p>You may have noticed we registered this Blueprint in the previous step. Create a <code>/maps</code> directory which we'll set as a module; we'll need this to handle the <strong>view</strong>, <strong>model </strong>(or just data),  and <strong>controller </strong>(routes.py as seen below).</p><h3 id=\"routes-py\">routes.py</h3><pre><code class=\"language-python\">import os\nfrom flask import Blueprint, render_template, request\nfrom flask import current_app as app\nfrom . import locations\n\nmap_blueprint = Blueprint('map', __name__, template_folder='templates', static_folder='static')\nplot_locations = locations.LocationData()\n\n\n# Landing Page\n@map_blueprint.route('/', methods=['GET'])\ndef map():\n    return render_template('index.html', ACCESS_KEY=app.MAPBOX_ACCESS_KEY,  locations=plot_locations.get_plots, title=&quot;CitiBike Mapbox App.&quot;)\n\n</code></pre>\n<h3 id=\"templates-index-html\">templates/index.html</h3><pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;meta charset='utf-8' /&gt;\n  &lt;title&gt;{{title}}&lt;/title&gt;\n  &lt;meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' /&gt;\n  &lt;script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.49.0/mapbox-gl.js'&gt;&lt;/script&gt;\n  &lt;link href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.49.0/mapbox-gl.css' rel='stylesheet' /&gt;\n  &lt;style&gt;\n    body { margin:0; padding:0; }\n    #map { position:absolute; top:0; bottom:0; width:100%; }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;div id='map'&gt;&lt;/div&gt;\n&lt;script&gt;\nmapboxgl.accessToken = {{MAPBOX_ACCESS_TOKEN}};\nconst map = new mapboxgl.Map({\n  container: 'map',\n  style: 'mapbox://styles/toddbirchard/cjpij1gfhghiy2spetf5w998w',\n  center: [-73.981856, 40.703820],\n  zoom: 11.1,\n\n});\n\nmap.on('load', function(e) {\n  // Add the data to your map as a layer\n  map.addLayer({\n    id: 'locations',\n    type: 'symbol',\n    // Add a GeoJSON source containing place coordinates and information.\n    source: {\n      type: 'geojson',\n      data: {{locations}}\n    },\n    layout: {\n      'icon-image': 'restaurant-15',\n      'icon-allow-overlap': true,\n    }\n  });\n});\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h3 id=\"data-py\">data.py</h3><p>Normally this is where we'd use the magic of the Mapbox API to get coordinates, route objects, or whatever it is your heart hopes to plot. This is intended to be intro post, so let's break that logic out for another time and use a dataset Mapbox would be happy to receive for the sake of results.</p><h2 id=\"step-6-uploading-our-dataset-via-mapbox-studio\">Step 6: Uploading our Dataset via Mapbox Studio</h2><p>Mapbox graciously lets us upload our data via their Studio UI, which does the unthinkable; immediately upon upload, Mapbox will take the data we give it (whether it be CSV, GeoJSON, etc) and immediately parse it in a way that makes sense. Upload your dataset at <a href=\"https://www.mapbox.com/studio/datasets/\">https://www.mapbox.com/studio/datasets/</a>:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/Screen-Shot-2018-12-10-at-5.29.24-PM.png\" class=\"kg-image\"><figcaption>Uploading the raw data of our Citibike CSV.</figcaption></figure><p>Next, Mapbox shows us a preview of our data before we even know what happened:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/Screen-Shot-2018-12-10-at-5.28.24-PM.png\" class=\"kg-image\"><figcaption>It's like they don't even want us to do work.</figcaption></figure><h2 id=\"step-7-do-it-in-flask\">Step 7: Do It in Flask</h2><p>After uploading your dataset via mapbox studio, you can actually <em>redownload</em> the data with a subtle twist: your data will be automatically formatted as GeoJSON: the format of JSON objects Mapbox uses to plot points, draw routes, etc.</p><p>Since we've had a long day, I'll allow you to download this pre-formatted data and hardcore the values in to your Map view. You're getting off easy for now, but next time we're doing this programmatically ;).</p><pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n  &lt;meta charset='utf-8' /&gt;\n  &lt;title&gt;{{title}}&lt;/title&gt;\n  &lt;meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' /&gt;\n  &lt;script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.49.0/mapbox-gl.js'&gt;&lt;/script&gt;\n  &lt;link href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.49.0/mapbox-gl.css' rel='stylesheet' /&gt;\n  &lt;style&gt;\n    body {\n      margin: 0;\n      padding: 0;\n    }\n\n    #map {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      width: 100%;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n\n  &lt;div id='map'&gt;&lt;/div&gt;\n  &lt;script&gt;\n    mapboxgl.accessToken = '{{ACCESS_KEY}}';\n    const map = new mapboxgl.Map({\n      container: 'map',\n      style: 'mapbox://styles/toddbirchard/cjpij1oxl3hiy2spetf5w998w',\n      center: [-73.981856, 40.703820],\n      zoom: 11.1,\n\n    });\n\n\n    map.addLayer({\n      &quot;id&quot;: &quot;points&quot;,\n      &quot;type&quot;: &quot;symbol&quot;,\n      &quot;source&quot;: {\n        &quot;features&quot;: [{\n            &quot;type&quot;: &quot;Feature&quot;,\n            &quot;properties&quot;: {\n              &quot;start_station_name&quot;: &quot;Central Park West &amp; W 76 St&quot;,\n              &quot;end_station_name&quot;: &quot;Central Park S &amp; 6 Ave&quot;,\n              &quot;end_station_latitude&quot;: &quot;40.76590936&quot;,\n              &quot;end_station_longitude&quot;: &quot;-73.97634151&quot;\n            },\n            &quot;geometry&quot;: {\n              &quot;coordinates&quot;: [\n                -73.973747,\n                40.778967\n              ],\n              &quot;type&quot;: &quot;Point&quot;\n            },\n            &quot;id&quot;: &quot;000a1f944d4dd786d9e7ed04620af02b&quot;\n          },\n          {\n            &quot;type&quot;: &quot;Feature&quot;,\n            &quot;properties&quot;: {\n              &quot;start_station_name&quot;: &quot;W 64 St &amp; West End Ave&quot;,\n              &quot;end_station_name&quot;: &quot;W 70 St &amp; Amsterdam Ave&quot;,\n              &quot;end_station_latitude&quot;: &quot;40.77748046&quot;,\n              &quot;end_station_longitude&quot;: &quot;-73.98288594&quot;\n            },\n            &quot;geometry&quot;: {\n              &quot;coordinates&quot;: [\n                -73.987537,\n                40.774528\n              ],\n              &quot;type&quot;: &quot;Point&quot;\n            },\n            &quot;id&quot;: &quot;01d8c19524f067a3f4712653265e0a49&quot;\n          },\n          {\n            &quot;type&quot;: &quot;Feature&quot;,\n            &quot;properties&quot;: {\n              &quot;start_station_name&quot;: &quot;E 20 St &amp; FDR Drive&quot;,\n              &quot;end_station_name&quot;: &quot;W 13 St &amp; 7 Ave&quot;,\n              &quot;end_station_latitude&quot;: &quot;40.73781509&quot;,\n              &quot;end_station_longitude&quot;: &quot;-73.99994661&quot;\n            },\n            &quot;geometry&quot;: {\n              &quot;coordinates&quot;: [\n                -73.975738,\n                40.733142\n              ],\n              &quot;type&quot;: &quot;Point&quot;\n            },\n            &quot;id&quot;: &quot;038ac5403b136e34874a7278f64d4e95&quot;\n          },\n          {\n              \\\\ --------------------------------------\n              (etc etc....)\n               \\\\ --------------------------------------\n          },\n          {\n            &quot;type&quot;: &quot;Feature&quot;,\n            &quot;properties&quot;: {\n              &quot;start_station_name&quot;: &quot;Mercer St &amp; Bleecker St&quot;,\n              &quot;end_station_name&quot;: &quot;1 Ave &amp; E 30 St&quot;,\n              &quot;end_station_latitude&quot;: &quot;40.74144387&quot;,\n              &quot;end_station_longitude&quot;: &quot;-73.97536082&quot;\n            },\n            &quot;geometry&quot;: {\n              &quot;coordinates&quot;: [\n                -73.996621,\n                40.727063\n              ],\n              &quot;type&quot;: &quot;Point&quot;\n            },\n            &quot;id&quot;: &quot;ff1daf9aadbf0cd6b788bd76f0a3f333&quot;\n          }\n        ],\n        &quot;type&quot;: &quot;FeatureCollection&quot;\n      },\n      &quot;layout&quot;: {\n        &quot;icon-image&quot;: &quot;{icon}-15&quot;,\n        &quot;text-field&quot;: &quot;{title}&quot;,\n        &quot;text-font&quot;: [&quot;Open Sans Semibold&quot;, &quot;Arial Unicode MS Bold&quot;],\n        &quot;text-offset&quot;: [0, 0.6],\n        &quot;text-anchor&quot;: &quot;top&quot;\n      }\n    });\n  &lt;/script&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"uncharted-territory\">Uncharted Territory</h2><p>There's way more for us to explore in Mapbox. Stay tuned for the rest of this series as we explore generating GeoData programmatically, and build interactive applications to really get users involved in map data by letting them control constraints such as time, etc. </p>","url":"https://hackersandslackers.com/map-data-visualization-with-mapbox/","uuid":"3b64bf8d-b545-469c-b2df-83ee7a816e31","page":false,"codeinjection_foot":"","codeinjection_head":"  <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.js'></script>\n    <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.css' rel='stylesheet' />","comment_id":"5c0aafba5da6c4479ab70ff1"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673745","title":"Lynx Roundup, December 11th","slug":"lynx-roundup-december-11th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/71-1@2x.jpg","excerpt":"Forecasting in retail!  Presentation tips!  Getting hired as a data scientist!","custom_excerpt":"Forecasting in retail!  Presentation tips!  Getting hired as a data scientist!","created_at_pretty":"10 December, 2018","published_at_pretty":"11 December, 2018","updated_at_pretty":"11 December, 2018","created_at":"2018-12-10T00:38:47.000-05:00","published_at":"2018-12-11T07:00:00.000-05:00","updated_at":"2018-12-11T07:07:20.000-05:00","meta_title":"Lynx Roundup, December 11th | Hackers and Slackers","meta_description":"Forecasting in retail!  Presentation tips!  Getting hired as a data scientist!","og_description":"Forecasting in retail!  Presentation tips!  Getting hired as a data scientist!","og_image":"https://hackersandslackers.com/content/images/lynx/71-1@2x.jpg","og_title":"Lynx Roundup, December 11th","twitter_description":"Forecasting in retail!  Presentation tips!  Getting hired as a data scientist!","twitter_image":"https://hackersandslackers.com/content/images/lynx/71-1@2x.jpg","twitter_title":"Lynx Roundup, December 11th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://exxeta.github.io/2018/10/forecast_sales_in_retail\n\nhttps://towardsdatascience.com/maximize-your-gpu-dollars-a9133f4e546a\n\nhttps://towardsdatascience.com/the-economics-of-getting-hired-as-a-data-scientist-e3882933b43c\n\nhttps://www.wandb.com/blog/how-to-build-a-machine-learning-team-when-you-are-not-google-or-facebook\n\nhttps://ijlyttle.shinyapps.io/tidyeval/\n\nhttps://data36.com/presentation-tips-for-data-professionals/\n\nhttps://blog.openai.com/spinning-up-in-deep-rl/","html":"<p><a href=\"https://exxeta.github.io/2018/10/forecast_sales_in_retail\">https://exxeta.github.io/2018/10/forecast_sales_in_retail</a></p><p><a href=\"https://towardsdatascience.com/maximize-your-gpu-dollars-a9133f4e546a\">https://towardsdatascience.com/maximize-your-gpu-dollars-a9133f4e546a</a></p><p><a href=\"https://towardsdatascience.com/the-economics-of-getting-hired-as-a-data-scientist-e3882933b43c\">https://towardsdatascience.com/the-economics-of-getting-hired-as-a-data-scientist-e3882933b43c</a></p><p><a href=\"https://www.wandb.com/blog/how-to-build-a-machine-learning-team-when-you-are-not-google-or-facebook\">https://www.wandb.com/blog/how-to-build-a-machine-learning-team-when-you-are-not-google-or-facebook</a></p><p><a href=\"https://ijlyttle.shinyapps.io/tidyeval/\">https://ijlyttle.shinyapps.io/tidyeval/</a></p><p><a href=\"https://data36.com/presentation-tips-for-data-professionals/\">https://data36.com/presentation-tips-for-data-professionals/</a></p><p><a href=\"https://blog.openai.com/spinning-up-in-deep-rl/\">https://blog.openai.com/spinning-up-in-deep-rl/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-december-11th/","uuid":"093da29a-57bf-4e0c-8446-6bcd894dfb6c","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5c0dfbe71556321bd84c335f"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673744","title":"Lynx Roundup, December 10th","slug":"lynx-roundup-december-10th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/70@2x.jpg","excerpt":"Analyzing ML experiements!  Redis as a graph DB!  Model evaluation!","custom_excerpt":"Analyzing ML experiements!  Redis as a graph DB!  Model evaluation!","created_at_pretty":"10 December, 2018","published_at_pretty":"10 December, 2018","updated_at_pretty":"10 December, 2018","created_at":"2018-12-10T00:35:59.000-05:00","published_at":"2018-12-10T07:00:00.000-05:00","updated_at":"2018-12-10T07:00:00.000-05:00","meta_title":"Lynx Roundup, December 10th | Hackers and Slackers","meta_description":"Analyzing ML experiements!  Redis as a graph DB!  Model evaluation!","og_description":"Analyzing ML experiements!  Redis as a graph DB!  Model evaluation!","og_image":"https://hackersandslackers.com/content/images/lynx/70@2x.jpg","og_title":"Lynx Roundup, December 10th","twitter_description":"Analyzing ML experiements!  Redis as a graph DB!  Model evaluation!","twitter_image":"https://hackersandslackers.com/content/images/lynx/70@2x.jpg","twitter_title":"Lynx Roundup, December 10th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://github.com/arogozhnikov/einops\n\nhttps://harelba.github.io/q/\n\nhttps://redislabs.com/blog/new-redisgraph-1-0-achieves-600x-faster-performance-graph-databases/\n\nhttp://brutalism.rs/project/unwelcome-gaze/\n\nhttps://medium.com/@ODSC/getting-to-know-keras-for-new-data-scientists-cebbc42a3122\n\nhttps://sebastianraschka.com/blog/2018/model-evaluation-selection-part4.html\n\nhttps://eng.uber.com/analyzing-experiment-outcomes/","html":"<p></p><p><a href=\"https://github.com/arogozhnikov/einops\">https://github.com/arogozhnikov/einops</a></p><p><a href=\"https://harelba.github.io/q/\">https://harelba.github.io/q/</a></p><p><a href=\"https://redislabs.com/blog/new-redisgraph-1-0-achieves-600x-faster-performance-graph-databases/\">https://redislabs.com/blog/new-redisgraph-1-0-achieves-600x-faster-performance-graph-databases/</a></p><p><a href=\"http://brutalism.rs/project/unwelcome-gaze/\">http://brutalism.rs/project/unwelcome-gaze/</a></p><p><a href=\"https://medium.com/@ODSC/getting-to-know-keras-for-new-data-scientists-cebbc42a3122\">https://medium.com/@ODSC/getting-to-know-keras-for-new-data-scientists-cebbc42a3122</a></p><p><a href=\"https://sebastianraschka.com/blog/2018/model-evaluation-selection-part4.html\">https://sebastianraschka.com/blog/2018/model-evaluation-selection-part4.html</a></p><p><a href=\"https://eng.uber.com/analyzing-experiment-outcomes/\">https://eng.uber.com/analyzing-experiment-outcomes/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-december-10th/","uuid":"c241cc99-3d6d-41fc-b60f-b363d5ab5595","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5c0dfb3f1556321bd84c335a"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673740","title":"The Many Faces and Filetypes of Python Configs","slug":"simplify-your-python-projects-configuration","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/11/config@2x.jpg","excerpt":"Cleverly (or uncleverly) configure your Python project using .ini, .yaml, or .env files.","custom_excerpt":"Cleverly (or uncleverly) configure your Python project using .ini, .yaml, or .env files.","created_at_pretty":"29 November, 2018","published_at_pretty":"29 November, 2018","updated_at_pretty":"27 December, 2018","created_at":"2018-11-29T02:24:13.000-05:00","published_at":"2018-11-29T16:40:26.000-05:00","updated_at":"2018-12-26T23:23:54.000-05:00","meta_title":"Simplify Your Python Project Configuration | Hackers and Slackers","meta_description":"Cleverly (or uncleverly) configure your Python project using .ini, .yaml, or .env files. Adopt a feel for when certain files or classes fit your needs best.","og_description":"Cleverly (or uncleverly) configure your Python project using .ini, .yaml, or .env files. Adopt a feel for when certain files or classes fit your needs best.","og_image":"https://hackersandslackers.com/content/images/2018/11/config@2x.jpg","og_title":"The Many Faces and Files of Python Configs","twitter_description":"Cleverly (or uncleverly) configure your Python project using .ini, .yaml, or .env files. Adopt a feel for when certain files or classes fit your needs best.","twitter_image":"https://hackersandslackers.com/content/images/2018/11/config@2x.jpg","twitter_title":"The Many Faces and Files of Python Configs","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"}],"plaintext":"As we cling harder and harder to Dockerfiles, Kubernetes, or any modern\npreconfigured app environment, our dependency on billable boilerplate grows.\nWhether or not that is a problem is a conversation in itself. The longer I keep\nmy projects self-hosted, the more  I'm consumed by the open-ended approaches\npeople take to manage their project configuration variables.\n\nFull disclosure here: this post is probably about as boring as where you see\nthis heading. Today, I'm here to talk about Python Environment and general\nconfiguration variable handling.\n\nPick Your Poison\nSomeday, each and every one of us will die. I'm referring of course to the part\ninside of us that slowly withers away as we're forced to maintain projects we've\nhanded off. We can do our best to avoid these situations by isolating the\nvariables most subject to change in separate, easy-to-edit files for Person\nNumber 2 to pick up on.\n\nOption 1: Project Config via .ini Files\n.ini  files are simple, making them perfect for simple projects- especially\nthose to be handled by others why may not have development backgrounds. These\nare configuration files with a single-level hierarchy:\n\n[GLOBAL]\nPROJECT: Fake Example Project\nREGION: us-east-1\nINPUT_FOLDER: data/zip/\nOUTPUT_FOLDER: data/output/\nTIMEOUT: 200\nMEMORY: 512\n\n[PROD]\nDATABASE = postgresql://loser:weakpassword@localhost:5432/mydatabase\nENDPOINT = https://production.endpoint.example.com\nUSER = PROD_USERNAME\n\n[DEV]\nDATABASE = postgresql://loser:weakpassword@localhost:5432/mydatabase\nENDPOINT = https://dev.endpoint.example.com\nUSER = DEV_USERNAME\n\n\nAnother example, for instance, may be to specify AWS Services:\n\n[S3]\nBUCKET_NAME: public-bucket\nBUCKET_FOLDER: /\n\n[RDS]\nNAME: rds/prod/sensitivedata\nARN: arn:aws:rds:us-east-1:66574567568434896:secret:rds/prod/peopledata-ZvJ3Ys\nREGION: us-east-1\n\n[LAMBDA]\nFUNCTION_NAME: handler\nHANDLER: lambda.handler\nDESCRIPTION: Performs a task every now and then.\nRUNTIME: python3.7\nROLE: lambda_role\nDIST_FOLDER: lambda/dist\n\n[SECRETS]\nSECRET_NAME: rds/prod/totallysecret\nSECRET_ARN: arn:aws:secretsmanager:us-east-1:769979969:secret:rds/prod/stupidproject-5647\n\n\n.ini  files are handled in Python by the configparser  library; this is our way\nof doing something with the essentially static text in these files. Since we're\nkeeping vars separate from app source code, we now need to create a file and a\nclass which exists merely to access these values.\n\nCreating a Python Class to Extract Variables\nInstead of explicitly hardcoding a dump of all variables, we're going to create\na class that provides an easy syntax for accessing variables on demand. Check it\nout:\n\n# config_loader.py\nfrom configparser import SafeConfigParser\nimport os\n\n\nclass Config:\n    \"\"\"Interact with configuration variables.\"\"\"\n\n    configParser = SafeConfigParser()\n    configFilePath = (os.path.join(os.getcwd(), 'config.ini'))\n\n    @classmethod\n    def initialize(cls, newhire_table):\n        \"\"\"Start config by reading config.ini.\"\"\"\n        cls.configParser.read(cls.configFilePath)\n\n    @classmethod\n    def prod(cls, key):\n        \"\"\"Get prod values from config.ini.\"\"\"\n        return cls.configParser.get('PROD', key)\n\n    @classmethod\n    def dev(cls, key):\n        \"\"\"Get dev values from config.ini.\"\"\"\n        return cls.configParser.get('DEV', key)\n\n\nThis simple class goes a long way to simplify grabbing variables. The class\nnever needs to be instantiated, so we can import Config  wherever we please and\nimmediately start pulling values.\n\nTo separate variables by concern, each block in config.ini  receives its own\nclass method. Now retrieving the proper variables is as simple as \nConfig.prod('DATABASE')  will return the URI for a production database. Easy to\nuse, simple to understand.\n\nOption 2: Complex YAML Configurations\nUnless you're developing apps in isolation in an isolated third-world nation or\nunder a dictatorship which blocks internet access, you already know that .yaml \nfiles are all the rage when it comes to storing static values in text files\n(wow, this really is  an obscure topic for a post).\n\nYAML  files provide plenty of upsides to alternative file types. Where .ini \nfiles are simply grouped variables, YAML  provides a hierarchy structure. This\nmakes YAML files much easier to understand and maintain for larger applications,\nas some variables only make sense in the context of being a sub-variable (?).\n\nCheck out what a sample YAML config might look like:\n\n---\n\nappName: appName\nlogLevel: WARN\n\nAWS:\n    Region: us-east-1\n    Resources:\n      EC2: \n        Type: \"AWS::EC2::Instance\"\n        Properties: \n          ImageId: \"ami-0ff8a91507f77f867\"\n          InstanceType: t2.micro\n          KeyName: testkey\n          BlockDeviceMappings:\n            -\n              DeviceName: /dev/sdm\n              Ebs:\n                VolumeType: io1\n                Iops: 200\n                DeleteOnTermination: false\n                VolumeSize: 20\n      Lambda:\n          Type: \"AWS::Lambda::Function\"\n          Properties: \n            Handler: \"index.handler\"\n            Role: \n              Fn::GetAtt: \n                - \"LambdaExecutionRole\"\n                - \"Arn\"\n            Runtime: \"python3.7\"\n            Timeout: 25\n            TracingConfig:\n              Mode: \"Active\"\n\nroutes:\n  admin:\n    url: /admin\n    template: admin.html\n    assets:\n        templates: /templates\n        static: /static\n  dashboard:\n    url: /dashboard\n    template: dashboard.html\n    assets:\n        templates: /templates\n        static: /static\n  account:\n    url: /account\n    template: account.html\n    assets:\n        templates: /templates\n        static: /static\n        \ndatabases:\n  cassandra:\n    host: example.cassandra.db\n    username: user\n    password: password\n  redshift:\n    jdbcURL: jdbc:redshift://<IP>:<PORT>/file?user=username&password=pass\n    tempS3Dir: s3://path/to/redshift/temp/dir/ \n  redis:\n    host: hostname\n    port: port-number\n    auth: authentication\n    db: database\n\n\nThis would read horribly if we tried to fit this in an .ini  file. A more fair\ncomparison would be to JSON  configurations: JSON objects indeed share the same\nhierarchy advantages of YAML, but JSON syntax is prone to errors and unhelpful\nerror messages, thanks to being a brainchild of Old Man JavaScript. YAML doesn't\ncare if you open and close with brackets, use double quotes, or leave a trailing\ncomma. All of these stupid things are why I prefer Python.\n\nParsing YAML in Python\nI recommend the Python Confuse library [https://github.com/sampsyo/confuse]  (a\npackage name that's sure to raise some eyebrows by your company's information\nsecurity team).\n\nConfuse  allows use to interact with YAML files almost identically to how we\nwould with JSON, with the exception that we specify .get()  at the end of\nwalking through the tree hierarchy, like so:\n\nconfig = confuse.Configuration('MyApp', __name__)\n\nconfig['AWS']['Lambda']['Runtime'].get()\n\n\n.get()  can accept a datatype value such as int. Doing so ensures that the value\nwe're getting is actually of the schema we're expecting, which is a neat\nfeature.\n\nValidators\nConfuse's documentation [https://confuse.readthedocs.io/en/latest/]details\nadditional validation methods for values we pull from YAML files. Methods like \nas_filename(), as_number(), and as_str_seq()  do basically what you'd expect\nthem to.\n\nCLI Configuration\nConfuse also gets into the realm of building CLIs, allowing use to use our YAML\nfile to inform arguments which can be passed to a CLI and their potential\nvalues:\n\nconfig = confuse.Configuration('myapp')\nparser = argparse.ArgumentParser()\nparser.add_argument('--foo', help='a parameter')\nargs = parser.parse_args()\nconfig.set_args(args)\nprint(config['foo'].get())\n\n\nThere's plenty of things you can go nuts with here.\n\nOption 3: Using .env Config Files\nLastly, we can leverage the already well-known .env  format to set variables.\nWorking this way is pretty equivalent to working with .ini  files, but we're\nhuman beings so we're stupid and do things like build the same protocols over\nand over. In .env, we get to store beautiful values such as these:\n\nCONFIG_PATH=${HOME}/.config/foo\nDOMAIN=example.org\nEMAIL=admin@${DOMAIN}\n\nTo read these values, we'll be using the python-dotenv library\n[https://github.com/theskumar/python-dotenv]. This gets you started:\n\nfrom dotenv import load_dotenv\nfrom pathlib import Path\n\nload_dotenv(verbose=True)\n\nenv_path = Path('.') / '.env'\nload_dotenv(dotenv_path=env_path)\n\n\nAfter that, it's a matter of setting variables in Python to values you extract\nfrom .env:\n\nimport os\nSECRET_KEY = os.getenv(\"EMAIL\")\nDATABASE_PASSWORD = os.getenv(\"DATABASE_PASSWORD\")\n\n\nSo Yeah, Basically Just Use What You Want\nClearly there are plenty of ways to set environment and project variables in\nPython. We could spend all day investigating the nuances of each and how their\naccompanying Python configuration class should be structured, but we've got apps\nto build. \n\nBesides, I need to go reflect on my life after writing a thousand words about\nloading variables in Python.","html":"<p>As we cling harder and harder to Dockerfiles, Kubernetes, or any modern preconfigured app environment, our dependency on billable boilerplate grows. Whether or not that is a problem is a conversation in itself. The longer I keep my projects self-hosted, the more  I'm consumed by the open-ended approaches people take to manage their project configuration variables.</p><p>Full disclosure here: this post is probably about as boring as where you see this heading. Today, I'm here to talk about Python Environment and general configuration variable handling.</p><h2 id=\"pick-your-poison\">Pick Your Poison</h2><p>Someday, each and every one of us will die. I'm referring of course to the part inside of us that slowly withers away as we're forced to maintain projects we've handed off. We can do our best to avoid these situations by isolating the variables most subject to change in separate, easy-to-edit files for Person Number 2 to pick up on.</p><h2 id=\"option-1-project-config-via-ini-files\">Option 1: Project Config via .ini Files</h2><p><code>.ini</code> files are simple, making them perfect for simple projects- especially those to be handled by others why may not have development backgrounds. These are configuration files with a single-level hierarchy:</p><pre><code class=\"language-ini\">[GLOBAL]\nPROJECT: Fake Example Project\nREGION: us-east-1\nINPUT_FOLDER: data/zip/\nOUTPUT_FOLDER: data/output/\nTIMEOUT: 200\nMEMORY: 512\n\n[PROD]\nDATABASE = postgresql://loser:weakpassword@localhost:5432/mydatabase\nENDPOINT = https://production.endpoint.example.com\nUSER = PROD_USERNAME\n\n[DEV]\nDATABASE = postgresql://loser:weakpassword@localhost:5432/mydatabase\nENDPOINT = https://dev.endpoint.example.com\nUSER = DEV_USERNAME\n</code></pre>\n<p>Another example, for instance, may be to specify AWS Services:</p><pre><code class=\"language-ini\">[S3]\nBUCKET_NAME: public-bucket\nBUCKET_FOLDER: /\n\n[RDS]\nNAME: rds/prod/sensitivedata\nARN: arn:aws:rds:us-east-1:66574567568434896:secret:rds/prod/peopledata-ZvJ3Ys\nREGION: us-east-1\n\n[LAMBDA]\nFUNCTION_NAME: handler\nHANDLER: lambda.handler\nDESCRIPTION: Performs a task every now and then.\nRUNTIME: python3.7\nROLE: lambda_role\nDIST_FOLDER: lambda/dist\n\n[SECRETS]\nSECRET_NAME: rds/prod/totallysecret\nSECRET_ARN: arn:aws:secretsmanager:us-east-1:769979969:secret:rds/prod/stupidproject-5647\n</code></pre>\n<p><code>.ini</code> files are handled in Python by the <strong>configparser</strong> library; this is our way of doing something with the essentially static text in these files. Since we're keeping vars separate from app source code, we now need to create a file and a class which exists merely to access these values.</p><h3 id=\"creating-a-python-class-to-extract-variables\">Creating a Python Class to Extract Variables</h3><p>Instead of explicitly hardcoding a dump of all variables, we're going to create a class that provides an easy syntax for accessing variables on demand. Check it out:</p><pre><code class=\"language-python\"># config_loader.py\nfrom configparser import SafeConfigParser\nimport os\n\n\nclass Config:\n    &quot;&quot;&quot;Interact with configuration variables.&quot;&quot;&quot;\n\n    configParser = SafeConfigParser()\n    configFilePath = (os.path.join(os.getcwd(), 'config.ini'))\n\n    @classmethod\n    def initialize(cls, newhire_table):\n        &quot;&quot;&quot;Start config by reading config.ini.&quot;&quot;&quot;\n        cls.configParser.read(cls.configFilePath)\n\n    @classmethod\n    def prod(cls, key):\n        &quot;&quot;&quot;Get prod values from config.ini.&quot;&quot;&quot;\n        return cls.configParser.get('PROD', key)\n\n    @classmethod\n    def dev(cls, key):\n        &quot;&quot;&quot;Get dev values from config.ini.&quot;&quot;&quot;\n        return cls.configParser.get('DEV', key)\n</code></pre>\n<p>This simple class goes a long way to simplify grabbing variables. The class never needs to be instantiated, so we can <code>import Config</code> wherever we please and immediately start pulling values.</p><p>To separate variables by concern, each block in <code>config.ini</code> receives its own class method. Now retrieving the proper variables is as simple as <code>Config.prod('DATABASE')</code> will return the URI for a production database. Easy to use, simple to understand.</p><h2 id=\"option-2-complex-yaml-configurations\">Option 2: Complex YAML Configurations</h2><p>Unless you're developing apps in isolation in an isolated third-world nation or under a dictatorship which blocks internet access, you already know that <code>.yaml</code> files are all the rage when it comes to storing static values in text files (wow, this really <em>is</em> an obscure topic for a post).</p><p><strong>YAML</strong> files provide plenty of upsides to alternative file types. Where <strong>.ini</strong> files are simply grouped variables, <strong>YAML</strong> provides a hierarchy structure. This makes YAML files much easier to understand and maintain for larger applications, as some variables only make sense in the context of being a sub-variable (?).</p><p>Check out what a sample YAML config might look like:</p><pre><code class=\"language-yaml\">---\n\nappName: appName\nlogLevel: WARN\n\nAWS:\n    Region: us-east-1\n    Resources:\n      EC2: \n        Type: &quot;AWS::EC2::Instance&quot;\n        Properties: \n          ImageId: &quot;ami-0ff8a91507f77f867&quot;\n          InstanceType: t2.micro\n          KeyName: testkey\n          BlockDeviceMappings:\n            -\n              DeviceName: /dev/sdm\n              Ebs:\n                VolumeType: io1\n                Iops: 200\n                DeleteOnTermination: false\n                VolumeSize: 20\n      Lambda:\n          Type: &quot;AWS::Lambda::Function&quot;\n          Properties: \n            Handler: &quot;index.handler&quot;\n            Role: \n              Fn::GetAtt: \n                - &quot;LambdaExecutionRole&quot;\n                - &quot;Arn&quot;\n            Runtime: &quot;python3.7&quot;\n            Timeout: 25\n            TracingConfig:\n              Mode: &quot;Active&quot;\n\nroutes:\n  admin:\n    url: /admin\n    template: admin.html\n    assets:\n        templates: /templates\n        static: /static\n  dashboard:\n    url: /dashboard\n    template: dashboard.html\n    assets:\n        templates: /templates\n        static: /static\n  account:\n    url: /account\n    template: account.html\n    assets:\n        templates: /templates\n        static: /static\n        \ndatabases:\n  cassandra:\n    host: example.cassandra.db\n    username: user\n    password: password\n  redshift:\n    jdbcURL: jdbc:redshift://&lt;IP&gt;:&lt;PORT&gt;/file?user=username&amp;password=pass\n    tempS3Dir: s3://path/to/redshift/temp/dir/ \n  redis:\n    host: hostname\n    port: port-number\n    auth: authentication\n    db: database\n</code></pre>\n<p>This would read horribly if we tried to fit this in an <strong>.ini</strong> file. A more fair comparison would be to <strong>JSON</strong> configurations: JSON objects indeed share the same hierarchy advantages of YAML, but JSON syntax is prone to errors and unhelpful error messages, thanks to being a brainchild of Old Man JavaScript. YAML doesn't care if you open and close with brackets, use double quotes, or leave a trailing comma. All of these stupid things are why I prefer Python.</p><h3 id=\"parsing-yaml-in-python\">Parsing YAML in Python</h3><p>I recommend the <a href=\"https://github.com/sampsyo/confuse\">Python <em>Confuse</em> library</a> (a package name that's sure to raise some eyebrows by your company's information security team).</p><p><strong>Confuse</strong> allows use to interact with YAML files almost identically to how we would with JSON, with the exception that we specify <code>.get()</code> at the end of walking through the tree hierarchy, like so:</p><pre><code class=\"language-python\">config = confuse.Configuration('MyApp', __name__)\n\nconfig['AWS']['Lambda']['Runtime'].get()\n</code></pre>\n<p><strong>.get()</strong> can accept a datatype value such as <em>int. </em>Doing so ensures that the value we're getting is actually of the schema we're expecting, which is a neat feature.</p><h4 id=\"validators\">Validators</h4><p><a href=\"https://confuse.readthedocs.io/en/latest/\">Confuse's documentation </a>details additional validation methods for values we pull from YAML files. Methods like <code>as_filename()</code>, <code>as_number()</code>, and <code>as_str_seq()</code> do basically what you'd expect them to.</p><h4 id=\"cli-configuration\">CLI Configuration</h4><p>Confuse also gets into the realm of building CLIs, allowing use to use our YAML file to inform arguments which can be passed to a CLI and their potential values:</p><pre><code class=\"language-python\">config = confuse.Configuration('myapp')\nparser = argparse.ArgumentParser()\nparser.add_argument('--foo', help='a parameter')\nargs = parser.parse_args()\nconfig.set_args(args)\nprint(config['foo'].get())\n</code></pre>\n<p>There's plenty of things you can go nuts with here.</p><h2 id=\"option-3-using-env-config-files\">Option 3: Using .env Config Files</h2><p>Lastly, we can leverage the already well-known <code>.env</code> format to set variables. Working this way is pretty equivalent to working with <strong>.ini</strong> files, but we're human beings so we're stupid and do things like build the same protocols over and over. In <strong>.env</strong>, we get to store beautiful values such as these:</p><pre><code>CONFIG_PATH=${HOME}/.config/foo\nDOMAIN=example.org\nEMAIL=admin@${DOMAIN}</code></pre><p>To read these values, we'll be using the <a href=\"https://github.com/theskumar/python-dotenv\"><strong>python-dotenv</strong> library</a>. This gets you started:</p><pre><code class=\"language-python\">from dotenv import load_dotenv\nfrom pathlib import Path\n\nload_dotenv(verbose=True)\n\nenv_path = Path('.') / '.env'\nload_dotenv(dotenv_path=env_path)\n</code></pre>\n<p>After that, it's a matter of setting variables in Python to values you extract from <code>.env</code>:</p><pre><code class=\"language-python\">import os\nSECRET_KEY = os.getenv(&quot;EMAIL&quot;)\nDATABASE_PASSWORD = os.getenv(&quot;DATABASE_PASSWORD&quot;)\n</code></pre>\n<h2 id=\"so-yeah-basically-just-use-what-you-want\">So Yeah, Basically Just Use What You Want</h2><p>Clearly there are plenty of ways to set environment and project variables in Python. We could spend all day investigating the nuances of each and how their accompanying Python configuration class should be structured, but we've got apps to build. </p><p>Besides, I need to go reflect on my life after writing a thousand words about loading variables in Python.</p>","url":"https://hackersandslackers.com/simplify-your-python-projects-configuration/","uuid":"48fb64b7-b9f2-4605-ac1f-c1c45ffc5964","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5bff941deae98c3b9d4c25f4"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867373f","title":"Hacking and Hustling: Full User Auth Without Writing Code","slug":"handling-user-accounts-with-zero-code","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/11/saas-2@2x.jpg","excerpt":"Weasle your way through coding by exploiting freemium software.","custom_excerpt":"Weasle your way through coding by exploiting freemium software.","created_at_pretty":"27 November, 2018","published_at_pretty":"28 November, 2018","updated_at_pretty":"15 February, 2019","created_at":"2018-11-27T15:02:27.000-05:00","published_at":"2018-11-28T07:24:00.000-05:00","updated_at":"2019-02-15T12:45:41.000-05:00","meta_title":"Hacking and Hustling: Full User Auth Without Writing Code | Hackers and Slackers","meta_description":"Today we weasel our way through coding by exploiting freemium software: Apisentris, Byepass, Getform, & Zapier.","og_description":"Today we weasel our way through coding by exploiting freemium software: Apisentris, Byepass, Getform, & Zapier.","og_image":"https://hackersandslackers.com/content/images/2018/11/saas-2@2x.jpg","og_title":"Hacking and Hustling: Full User Auth Without Writing Code","twitter_description":"Today we weasel our way through coding by exploiting freemium software: Apisentris, Byepass, Getform, & Zapier.","twitter_image":"https://hackersandslackers.com/content/images/2018/11/saas-2@2x.jpg","twitter_title":"Hacking and Hustling: Full User Auth Without Writing Code","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"SaaS Products","slug":"saas","description":"Third-party products and services we’ve discovered to be diamonds in the rough. These are products we’ve included in our stack based on price and value add.","feature_image":null,"meta_description":"Third-party products and services we’ve discovered to be diamonds in the rough. These are products we’ve included in our stack based on price and value add.","meta_title":"Our Picks: SaaS Products | Hackers and Slackers","visibility":"public"},"tags":[{"name":"SaaS Products","slug":"saas","description":"Third-party products and services we’ve discovered to be diamonds in the rough. These are products we’ve included in our stack based on price and value add.","feature_image":null,"meta_description":"Third-party products and services we’ve discovered to be diamonds in the rough. These are products we’ve included in our stack based on price and value add.","meta_title":"Our Picks: SaaS Products | Hackers and Slackers","visibility":"public"},{"name":"Automation","slug":"automation","description":"General automation of systems and software on a macro level. Learn to automate manual processes suitable for enterprises.","feature_image":null,"meta_description":"General automation of systems and software on a macro level. Learn to automate manual processes suitable for enterprises.","meta_title":"Automation | Hackers and Slackers","visibility":"public"}],"plaintext":"The midlife crisis is a striking phenomenon common and equally inescapable to\nall of us. I’m fairly certain I’ve come to a turning point in my life where I\ntoo must admit I will never be cool again. I know this because I check Product\nHunt on a daily basis, and I thoroughly enjoy it.\n\nI’d estimate about 80% of things featured on Product Hunt are hilariously\nworthless parodies of Silicon Valley itself, real predators live for the hunt.\nThey hunt on. At least that’s what Eric Thomas told me during a podcast\n[https://www.youtube.com/watch?v=fybi42dJHD4]  on my way to the gym one morning.\nOn this fine day, my friends, the Lion has risen.\n\nWe’re in a unique period in human history where the Middle Class simply no\nlonger exists. This is great if you’re not an enterprise software giant because\nthat means all SaaS pricing models have two modes: free, or ten billion jillion\ngazillion dollars. Sometimes when we persist, those free services might align to\nlet us do something crazy. Handling user signups, authentication, sessions, and\nso forth for zero work and zero dollars is indeed crazy.\n\nWe’re going to leverage four products at once to achieve this amazing feat of\nlaziness. While each of them may be mediocre in their own right, the whole is\nsurely greater than the sum of its parts.\n\nApisentris [https://apisentris.com]: Generate a REST API for any DB Instantly\nYou get an endpoint! And YOU get an endpoint!This is a product we've briefly\ntouched on in the past: the gist is that granting Apisentris  to your database\nwill generate a full-on API which can modify any record of any table in any way\nyou can imagine. Yes, that includes users.\n\nByepass [https://byepass.co]: User Logins Without Passwords\nGood luck trying to white-label this for under 20k.Byepass is a relatively new\nproduct- if you haven’t Googled them yet, you’re in for a treat of search\nresults. Let this be a lesson in SEO. \n\nThe premise of this service is to phase out and destroy plaintext passwords.\nConsidering the standard of modern-day 2FA, it’s not too hard of a sell… the\nonly thing that truly sucks about the product is their branded confirmation\nemails (and the dreaded“contact us for pricing” estimate when considering a\nwhite label option). \n\nBesides saving the trouble of passwords, there is a key upside to Byepass\nspecifically for us: since passwords are no longer needed in user sign-ups,\nthere’s no need to pass the form along to a backend, where a framework is\nexpecting to encrypt the blah blah blah. Give it a rest, this is my Slacking\nday.\n\nGetform.io [https://getform.io/]: The Cleanest Drop-in Form Solution\nCapturing forms without doing the form work.Getform.io  started off with a strong goal in mind: to allow idiots who host\nWordpress sites collect user information via forms… while most likely having\nzero clue as to how to code or even use a CMS. When submitted, form results are\nsent to an endpoint on the Getform side. From there, Getform already tips you\noff on what you should do next: they name drop Zapier, and they’re ready to\nparty.\n\nZapier [https://zapier.com]: You Already Know the Deal\nI've simulated my entire personality in a collection of zaps.We all know the\ndeal with Zapier by now: it’s the glue in any Slacker’s arsenal. I can already\nhear the neckbeards wailing in agony at the sheer mention of Zapier. I get it,\nyou’re insisting that Zapier is a collection of API endpoints cleverly pointed\ntowards one another for convenience, and you could totally build that stuff\nyourself.\n\nTo set the record straight, you’re not  going to code anything Zapier automates\non its own. If you spent that much time on menial tasks, you’d be a developer\nvalued at minimum wage. You’re not building shit- you’re playing Rocket league\nwhen you get home from work like the rest of us.\n\nStep 1: Create a Signup Form\nThis part of the process is pretty easy considering all you need to do is copy\nand paste Getform's boilerplate from the first page you see when you log in:\n\n<form action=\"https://getform.io/f/54775468-578-45765718d-567-5474657567564\" method=\"POST\">\n    <input type=\"text\" name=\"name\">\n    <input type=\"email\" name=\"email\">\n    <input type=\"tel\" name=\"tel\">\n    <button type=\"submit\">Send</button>\n</form>\n\nStep 2: Get Zapped\nNow it’s game time. I just as easily could have named this post “dope shit you\ncan do with Zapier without paying the Ludacris 50-dollar per month free to\nincorporate pipelines.” I still haven’t ruled it out, really. Here’s what’s\nwaiting for you:\n\nchain chain chaaaaiiinnnn…As you might imagine, we're getting some pretty basic\ninput from this signup form: in my case, simply username  and password. Before\nwe go saving two values to a weak af database table somewhere, let's add a\nlittle spice to the equation in the JavaScript step.\n\nGive the People What They Want\nWhat do people want? pictures of their own dumb faces, mostly! Luckily, there's\na service called Gravatar [https://en.gravatar.com/]  which might just be able\nto provide us with just that. Sometimes when you sign up for a service, you\nmight notice they already have your mugshot on file. At some point, you signed\nup for a service that associates your email address with a profile picture,\nsimply by applying an md5  hash to your email.\n\nWe're going to do the same for our users.\n\nSet up your input data:\n\nSo far so good!Great, now all that's left is encrypting that email address in\nvanilla Javascript thanks to Zapiers inability to handle imports:\n\nvar MD5 = function(d){var result = M(V(Y(X(d),8*d.length)));return result.toLowerCase()};function M(d){for(var _,m=\"0123456789ABCDEF\",f=\"\",r=0;r<d.length;r++)_=d.charCodeAt(r),f+=m.charAt(_>>>4&15)+m.charAt(15&_);return f}function X(d){for(var _=Array(d.length>>2),m=0;m<_.length;m++)_[m]=0;for(m=0;m<8*d.length;m+=8)_[m>>5]|=(255&d.charCodeAt(m/8))<<m%32;return _}function V(d){for(var _=\"\",m=0;m<32*d.length;m+=8)_+=String.fromCharCode(d[m>>5]>>>m%32&255);return _}function Y(d,_){d[_>>5]|=128<<_%32,d[14+(_+64>>>9<<4)]=_;for(var m=1732584193,f=-271733879,r=-1732584194,i=271733878,n=0;n<d.length;n+=16){var h=m,t=f,g=r,e=i;f=md5_ii(f=md5_ii(f=md5_ii(f=md5_ii(f=md5_hh(f=md5_hh(f=md5_hh(f=md5_hh(f=md5_gg(f=md5_gg(f=md5_gg(f=md5_gg(f=md5_ff(f=md5_ff(f=md5_ff(f=md5_ff(f,r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+0],7,-680876936),f,r,d[n+1],12,-389564586),m,f,d[n+2],17,606105819),i,m,d[n+3],22,-1044525330),r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+4],7,-176418897),f,r,d[n+5],12,1200080426),m,f,d[n+6],17,-1473231341),i,m,d[n+7],22,-45705983),r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+8],7,1770035416),f,r,d[n+9],12,-1958414417),m,f,d[n+10],17,-42063),i,m,d[n+11],22,-1990404162),r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+12],7,1804603682),f,r,d[n+13],12,-40341101),m,f,d[n+14],17,-1502002290),i,m,d[n+15],22,1236535329),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+1],5,-165796510),f,r,d[n+6],9,-1069501632),m,f,d[n+11],14,643717713),i,m,d[n+0],20,-373897302),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+5],5,-701558691),f,r,d[n+10],9,38016083),m,f,d[n+15],14,-660478335),i,m,d[n+4],20,-405537848),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+9],5,568446438),f,r,d[n+14],9,-1019803690),m,f,d[n+3],14,-187363961),i,m,d[n+8],20,1163531501),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+13],5,-1444681467),f,r,d[n+2],9,-51403784),m,f,d[n+7],14,1735328473),i,m,d[n+12],20,-1926607734),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+5],4,-378558),f,r,d[n+8],11,-2022574463),m,f,d[n+11],16,1839030562),i,m,d[n+14],23,-35309556),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+1],4,-1530992060),f,r,d[n+4],11,1272893353),m,f,d[n+7],16,-155497632),i,m,d[n+10],23,-1094730640),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+13],4,681279174),f,r,d[n+0],11,-358537222),m,f,d[n+3],16,-722521979),i,m,d[n+6],23,76029189),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+9],4,-640364487),f,r,d[n+12],11,-421815835),m,f,d[n+15],16,530742520),i,m,d[n+2],23,-995338651),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+0],6,-198630844),f,r,d[n+7],10,1126891415),m,f,d[n+14],15,-1416354905),i,m,d[n+5],21,-57434055),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+12],6,1700485571),f,r,d[n+3],10,-1894986606),m,f,d[n+10],15,-1051523),i,m,d[n+1],21,-2054922799),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+8],6,1873313359),f,r,d[n+15],10,-30611744),m,f,d[n+6],15,-1560198380),i,m,d[n+13],21,1309151649),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+4],6,-145523070),f,r,d[n+11],10,-1120210379),m,f,d[n+2],15,718787259),i,m,d[n+9],21,-343485551),m=safe_add(m,h),f=safe_add(f,t),r=safe_add(r,g),i=safe_add(i,e)}return Array(m,f,r,i)}function md5_cmn(d,_,m,f,r,i){return safe_add(bit_rol(safe_add(safe_add(_,d),safe_add(f,i)),r),m)}function md5_ff(d,_,m,f,r,i,n){return md5_cmn(_&m|~_&f,d,_,r,i,n)}function md5_gg(d,_,m,f,r,i,n){return md5_cmn(_&f|m&~f,d,_,r,i,n)}function md5_hh(d,_,m,f,r,i,n){return md5_cmn(_^m^f,d,_,r,i,n)}function md5_ii(d,_,m,f,r,i,n){return md5_cmn(m^(_|~f),d,_,r,i,n)}function safe_add(d,_){var m=(65535&d)+(65535&_);return(d>>16)+(_>>16)+(m>>16)<<16|65535&m}function bit_rol(d,_){return d<<_|d>>>32-_}\n\nvar value = inputData.email;\n\nvar grav = MD5(value);\n\noutput = {username: inputData.username, email: inputData.email, gravatar: grav};\n\n\nOh yes, friend. It's like that.\n\nStep 3: Create Records in Our Database via the API\nCould we enter records into MySQL via a direct connection? Sure, if you like\nwasting time creating SSL certs for your lame boring DB connections. That’s 5\nminutes that could be spent playing Rocket League.\n\nInstead, consider the following alternative of passing a JSON object to a\nrelational database and having it turn out just fine. It feels like we’re\nprancing through a field of freemium software Unicorns- just like in my dreams:\n\nHave fun with your .pem files, losers.Step 4: Let There be Confirmation Emails\nAll that's left is welcoming our users to our family with a handwritten, generic\ntemplated email courtesy of Byepass.\n\nDon’t worry about these publicly visible email addresses btw: they’re all bots.\nIn case you're ignoring the documentation completely (understandable), our last\nrequest is a POST request to https://byepass.co/redirect. In fact, here- just\ntake the docs:\n\n\n--------------------------------------------------------------------------------\n\nEndpoint: https://byepass.co/redirect\n\nMethod: GET or POST\n\nHeaders: {\"Content-Type: application/x-www-form-urlencoded\"}  \n\nRequest Variables:\n * identifier  (email address)\n * block_proxy  (BOOL 0 for to no restriction, 1 to block verifications from\n   known proxies) (Paid accounts only)\n * key  (Byepass app key)\n\n\n--------------------------------------------------------------------------------\n\nWe've Finally Made It\nWe may never be the spring chickens we once were, but we all experience chills\nof envy when we watch those reality TV shows featuring Midwestern people with\nmental illnesses hoard coupons and score the sickest grocery store heists ever\nto air television legally. That's who we are now: we're the crazy, deal-seeking,\nthrill-chasing coupon ladies of Silicon Valley. \n\nAll I know is it feels great to not work myself further out of the debt I\naccrued while attempting to offset the crippling, burnt-out depression bestowed\nupon us by the technology industry. For this moment, life is fine. Finally.","html":"<p>The midlife crisis is a striking phenomenon common and equally inescapable to all of us. I’m fairly certain I’ve come to a turning point in my life where I too must admit I will never be cool again. I know this because I check Product Hunt on a daily basis, and I thoroughly enjoy it.</p><p>I’d estimate about 80% of things featured on Product Hunt are hilariously worthless parodies of Silicon Valley itself, real predators live for the hunt. They hunt on. At least that’s what <a href=\"https://www.youtube.com/watch?v=fybi42dJHD4\" rel=\"noopener\">Eric Thomas told me during a podcast</a> on my way to the gym one morning. On this fine day, my friends, the Lion has risen.</p><p>We’re in a unique period in human history where the Middle Class simply no longer exists. This is great if you’re not an enterprise software giant because that means all SaaS pricing models have two modes: free, or ten billion jillion gazillion dollars. Sometimes when we persist, those free services might align to let us do something crazy. Handling user signups, authentication, sessions, and so forth for zero work and zero dollars is indeed crazy.</p><p>We’re going to leverage four products at once to achieve this amazing feat of laziness. While each of them may be mediocre in their own right, the whole is surely greater than the sum of its parts.</p><h2 id=\"apisentris-generate-a-rest-api-for-any-db-instantly\"><a href=\"https://apisentris.com\">Apisentris</a>: Generate a REST API for any DB Instantly</h2><figure class=\"kg-card kg-image-card\"><img src=\"http://res-2.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/Screen-Shot-2018-11-27-at-7.15.49-PM_o_o.png\" class=\"kg-image\"><figcaption>You get an endpoint! And YOU get an endpoint!</figcaption></figure><p>This is a product we've briefly touched on in the past: the gist is that granting <strong>Apisentris</strong> to your database will generate a full-on API which can modify any record of any table in any way you can imagine. Yes, that includes users.</p><h2 id=\"byepass-user-logins-without-passwords\"><a href=\"https://byepass.co\">Byepass</a>: User Logins Without Passwords</h2><figure class=\"kg-card kg-image-card\"><img src=\"http://res-1.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/Screen-Shot-2018-11-27-at-7.15.04-PM_o_o.png\" class=\"kg-image\"><figcaption><em>Good luck trying to white-label this for under 20k.</em></figcaption></figure><p>Byepass is a relatively new product- if you haven’t Googled them yet, you’re in for a treat of search results. Let this be a lesson in SEO. </p><p>The premise of this service is to phase out and destroy plaintext passwords. Considering the standard of modern-day 2FA, it’s not too hard of a sell… the only thing that truly sucks about the product is their branded confirmation emails (and the dreaded“contact us for pricing” estimate when considering a white label option). </p><p>Besides saving the trouble of passwords, there is a key upside to Byepass specifically for us: since passwords are no longer needed in user sign-ups, there’s no need to pass the form along to a backend, where a framework is expecting to encrypt the blah blah blah. Give it a rest, this is my Slacking day.</p><h2 id=\"getform-io-the-cleanest-drop-in-form-solution\"><a href=\"https://getform.io/\">Getform.io</a>: The Cleanest Drop-in Form Solution</h2><figure class=\"kg-card kg-image-card\"><img src=\"http://res-4.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/Screen-Shot-2018-12-26-at-6.59.46-PM.png\" class=\"kg-image\"><figcaption>Capturing forms without doing the form work.</figcaption></figure><p><strong>Getform.io</strong> started off with a strong goal in mind: to allow idiots who host Wordpress sites collect user information via forms… while most likely having zero clue as to how to code or even use a CMS. When submitted, form results are sent to an endpoint on the Getform side. From there, Getform already tips you off on what you should do next: they name drop Zapier, and they’re ready to party.</p><h2 id=\"zapier-you-already-know-the-deal\"><a href=\"https://zapier.com\">Zapier</a>: You Already Know the Deal</h2><figure class=\"kg-card kg-image-card\"><img src=\"http://res-4.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/Screen-Shot-2018-11-27-at-7.35.34-PM_o_o.png\" class=\"kg-image\"><figcaption>I've simulated my entire personality in a collection of zaps.</figcaption></figure><p>We all know the deal with Zapier by now: it’s the glue in any Slacker’s arsenal. I can already hear the neckbeards wailing in agony at the sheer mention of Zapier. I get it, you’re insisting that Zapier is a collection of API endpoints cleverly pointed towards one another for convenience, and you could totally build that stuff yourself.</p><p>To set the record straight, you’re <em>not</em> going to code anything Zapier automates on its own. If you spent that much time on menial tasks, you’d be a developer valued at minimum wage. You’re not building shit- you’re playing Rocket league when you get home from work like the rest of us.</p><h2 id=\"step-1-create-a-signup-form\">Step 1: Create a Signup Form</h2><p>This part of the process is pretty easy considering all you need to do is copy and paste Getform's boilerplate from the first page you see when you log in:</p><pre><code>&lt;form action=\"https://getform.io/f/54775468-578-45765718d-567-5474657567564\" method=\"POST\"&gt;\n    &lt;input type=\"text\" name=\"name\"&gt;\n    &lt;input type=\"email\" name=\"email\"&gt;\n    &lt;input type=\"tel\" name=\"tel\"&gt;\n    &lt;button type=\"submit\"&gt;Send&lt;/button&gt;\n&lt;/form&gt;</code></pre><h2 id=\"step-2-get-zapped\">Step 2: Get Zapped</h2><p>Now it’s game time. I just as easily could have named this post “dope shit you can do with Zapier without paying the Ludacris 50-dollar per month free to incorporate pipelines.” I still haven’t ruled it out, really. Here’s what’s waiting for you:</p><figure class=\"kg-card kg-image-card\"><img src=\"http://res-1.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/Screen-Shot-2018-11-27-at-7.43.18-PM_o_o.png\" class=\"kg-image\"><figcaption>chain chain chaaaaiiinnnn…</figcaption></figure><p>As you might imagine, we're getting some pretty basic input from this signup form: in my case, simply <strong>username</strong> and <strong>password</strong>. Before we go saving two values to a weak af database table somewhere, let's add a little spice to the equation in the JavaScript step.</p><h3 id=\"give-the-people-what-they-want\">Give the People What They Want</h3><p>What do people want? pictures of their own dumb faces, mostly! Luckily, there's a service called <a href=\"https://en.gravatar.com/\">Gravatar</a> which might just be able to provide us with just that. Sometimes when you sign up for a service, you might notice they already have your mugshot on file. At some point, you signed up for a service that associates your email address with a profile picture, simply by applying an <strong>md5</strong> hash to your email.</p><p>We're going to do the same for our users.</p><p>Set up your input data:</p><figure class=\"kg-card kg-image-card\"><img src=\"http://res-3.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/Screen-Shot-2018-12-26-at-7.03.30-PM.png\" class=\"kg-image\"><figcaption>So far so good!</figcaption></figure><p>Great, now all that's left is encrypting that email address in vanilla Javascript thanks to Zapiers inability to handle imports:</p><pre><code class=\"language-javascript\">var MD5 = function(d){var result = M(V(Y(X(d),8*d.length)));return result.toLowerCase()};function M(d){for(var _,m=&quot;0123456789ABCDEF&quot;,f=&quot;&quot;,r=0;r&lt;d.length;r++)_=d.charCodeAt(r),f+=m.charAt(_&gt;&gt;&gt;4&amp;15)+m.charAt(15&amp;_);return f}function X(d){for(var _=Array(d.length&gt;&gt;2),m=0;m&lt;_.length;m++)_[m]=0;for(m=0;m&lt;8*d.length;m+=8)_[m&gt;&gt;5]|=(255&amp;d.charCodeAt(m/8))&lt;&lt;m%32;return _}function V(d){for(var _=&quot;&quot;,m=0;m&lt;32*d.length;m+=8)_+=String.fromCharCode(d[m&gt;&gt;5]&gt;&gt;&gt;m%32&amp;255);return _}function Y(d,_){d[_&gt;&gt;5]|=128&lt;&lt;_%32,d[14+(_+64&gt;&gt;&gt;9&lt;&lt;4)]=_;for(var m=1732584193,f=-271733879,r=-1732584194,i=271733878,n=0;n&lt;d.length;n+=16){var h=m,t=f,g=r,e=i;f=md5_ii(f=md5_ii(f=md5_ii(f=md5_ii(f=md5_hh(f=md5_hh(f=md5_hh(f=md5_hh(f=md5_gg(f=md5_gg(f=md5_gg(f=md5_gg(f=md5_ff(f=md5_ff(f=md5_ff(f=md5_ff(f,r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+0],7,-680876936),f,r,d[n+1],12,-389564586),m,f,d[n+2],17,606105819),i,m,d[n+3],22,-1044525330),r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+4],7,-176418897),f,r,d[n+5],12,1200080426),m,f,d[n+6],17,-1473231341),i,m,d[n+7],22,-45705983),r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+8],7,1770035416),f,r,d[n+9],12,-1958414417),m,f,d[n+10],17,-42063),i,m,d[n+11],22,-1990404162),r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+12],7,1804603682),f,r,d[n+13],12,-40341101),m,f,d[n+14],17,-1502002290),i,m,d[n+15],22,1236535329),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+1],5,-165796510),f,r,d[n+6],9,-1069501632),m,f,d[n+11],14,643717713),i,m,d[n+0],20,-373897302),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+5],5,-701558691),f,r,d[n+10],9,38016083),m,f,d[n+15],14,-660478335),i,m,d[n+4],20,-405537848),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+9],5,568446438),f,r,d[n+14],9,-1019803690),m,f,d[n+3],14,-187363961),i,m,d[n+8],20,1163531501),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+13],5,-1444681467),f,r,d[n+2],9,-51403784),m,f,d[n+7],14,1735328473),i,m,d[n+12],20,-1926607734),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+5],4,-378558),f,r,d[n+8],11,-2022574463),m,f,d[n+11],16,1839030562),i,m,d[n+14],23,-35309556),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+1],4,-1530992060),f,r,d[n+4],11,1272893353),m,f,d[n+7],16,-155497632),i,m,d[n+10],23,-1094730640),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+13],4,681279174),f,r,d[n+0],11,-358537222),m,f,d[n+3],16,-722521979),i,m,d[n+6],23,76029189),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+9],4,-640364487),f,r,d[n+12],11,-421815835),m,f,d[n+15],16,530742520),i,m,d[n+2],23,-995338651),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+0],6,-198630844),f,r,d[n+7],10,1126891415),m,f,d[n+14],15,-1416354905),i,m,d[n+5],21,-57434055),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+12],6,1700485571),f,r,d[n+3],10,-1894986606),m,f,d[n+10],15,-1051523),i,m,d[n+1],21,-2054922799),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+8],6,1873313359),f,r,d[n+15],10,-30611744),m,f,d[n+6],15,-1560198380),i,m,d[n+13],21,1309151649),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+4],6,-145523070),f,r,d[n+11],10,-1120210379),m,f,d[n+2],15,718787259),i,m,d[n+9],21,-343485551),m=safe_add(m,h),f=safe_add(f,t),r=safe_add(r,g),i=safe_add(i,e)}return Array(m,f,r,i)}function md5_cmn(d,_,m,f,r,i){return safe_add(bit_rol(safe_add(safe_add(_,d),safe_add(f,i)),r),m)}function md5_ff(d,_,m,f,r,i,n){return md5_cmn(_&amp;m|~_&amp;f,d,_,r,i,n)}function md5_gg(d,_,m,f,r,i,n){return md5_cmn(_&amp;f|m&amp;~f,d,_,r,i,n)}function md5_hh(d,_,m,f,r,i,n){return md5_cmn(_^m^f,d,_,r,i,n)}function md5_ii(d,_,m,f,r,i,n){return md5_cmn(m^(_|~f),d,_,r,i,n)}function safe_add(d,_){var m=(65535&amp;d)+(65535&amp;_);return(d&gt;&gt;16)+(_&gt;&gt;16)+(m&gt;&gt;16)&lt;&lt;16|65535&amp;m}function bit_rol(d,_){return d&lt;&lt;_|d&gt;&gt;&gt;32-_}\n\nvar value = inputData.email;\n\nvar grav = MD5(value);\n\noutput = {username: inputData.username, email: inputData.email, gravatar: grav};\n</code></pre>\n<p>Oh yes, friend. It's like that.</p><h2 id=\"step-3-create-records-in-our-database-via-the-api\">Step 3: Create Records in Our Database via the API</h2><p>Could we enter records into MySQL via a direct connection? Sure, if you like wasting time creating SSL certs for your lame boring DB connections. That’s 5 minutes that could be spent playing Rocket League.</p><p>Instead, consider the following alternative of passing a JSON object to a relational database and having it turn out just fine. It feels like we’re prancing through a field of freemium software Unicorns- just like in my dreams:</p><figure class=\"kg-card kg-image-card\"><img src=\"http://res-3.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/Screen-Shot-2018-11-27-at-7.59.37-PM_o_o.png\" class=\"kg-image\"><figcaption>Have fun with your .pem files, losers.</figcaption></figure><h2 id=\"step-4-let-there-be-confirmation-emails\">Step 4: Let There be Confirmation Emails</h2><p>All that's left is welcoming our users to our family with a handwritten, generic templated email courtesy of Byepass.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://res-3.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/Screen-Shot-2018-12-13-at-11.02.09-PM_o.png\" class=\"kg-image\"><figcaption>Don’t worry about these publicly visible email addresses btw: they’re all bots.</figcaption></figure><p>In case you're ignoring the documentation completely (understandable), our last request is a POST request to <strong>https://byepass.co/redirect. </strong>In fact, here- just take the docs:</p><hr><p><strong>Endpoint</strong>: <a href=\"https://byepass.co/redirect\">https://byepass.co/redirect</a></p><p><strong>Method</strong>: GET or POST</p><p><strong>Headers: </strong>{\"Content-Type: application/x-www-form-urlencoded\"}<strong> </strong></p><h3 id=\"request-variables-\">Request Variables:</h3><ul><li><strong>identifier</strong> (email address)</li><li><strong>block_proxy</strong> (BOOL 0 for to no restriction, 1 to block verifications from known proxies) (Paid accounts only)</li><li><strong>key</strong> (Byepass app key)</li></ul><hr><h2 id=\"we-ve-finally-made-it\">We've Finally Made It</h2><p>We may never be the spring chickens we once were, but we all experience chills of envy when we watch those reality TV shows featuring Midwestern people with mental illnesses hoard coupons and score the sickest grocery store heists ever to air television legally. That's who we are now: we're the crazy, deal-seeking, thrill-chasing coupon ladies of Silicon Valley. </p><p>All I know is it feels great to not work myself further out of the debt I accrued while attempting to offset the crippling, burnt-out depression bestowed upon us by the technology industry. For this moment, life is fine. Finally.</p>","url":"https://hackersandslackers.com/handling-user-accounts-with-zero-code/","uuid":"004ac673-36dd-47fe-ba74-df134235a200","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5bfda2d3eae98c3b9d4c25d8"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736c9","title":"MongoDB Stitch Serverless Functions","slug":"mongodb-stitch-serverless-functions","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/08/stitch3@2x.jpg","excerpt":"A crash course in MongoDB Stitch serverless functions: the bread and butter of MongoDB Cloud.","custom_excerpt":"A crash course in MongoDB Stitch serverless functions: the bread and butter of MongoDB Cloud.","created_at_pretty":"06 August, 2018","published_at_pretty":"26 November, 2018","updated_at_pretty":"05 April, 2019","created_at":"2018-08-06T19:35:37.000-04:00","published_at":"2018-11-26T08:00:00.000-05:00","updated_at":"2019-04-04T21:42:58.000-04:00","meta_title":"Using Serverless Functions in MongoDB Stitch  | Hackers And Slackers","meta_description":"You have a database, and you want to get data out of it. MongoDB Stitch can achieve this without building an API and can do it securely via frontend code.","og_description":"A crash course in MongoDB Stitch serverless functions: the bread and butter of MongoDB Cloud.\n","og_image":"https://hackersandslackers.com/content/images/2018/08/stitch3@2x.jpg","og_title":"MongoDB Stitch Serverless Functions","twitter_description":"A crash course in MongoDB Stitch serverless functions: the bread and butter of MongoDB Cloud.\n","twitter_image":"https://hackersandslackers.com/content/images/2018/08/stitch3@2x.jpg","twitter_title":"MongoDB Stitch Serverless Functions","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"NoSQL","slug":"nosql","description":"Schemaless data for gunslingers. Heavily focused on databases such as MongoDB, as well as hosting said databases as cloud instances.","feature_image":null,"meta_description":"Schemaless data for gunslingers. Heavily focused on databases such as MongoDB, as well as hosting said databases as cloud instances.","meta_title":"NoSQL | Hackers and Slackers","visibility":"public"},"tags":[{"name":"NoSQL","slug":"nosql","description":"Schemaless data for gunslingers. Heavily focused on databases such as MongoDB, as well as hosting said databases as cloud instances.","feature_image":null,"meta_description":"Schemaless data for gunslingers. Heavily focused on databases such as MongoDB, as well as hosting said databases as cloud instances.","meta_title":"NoSQL | Hackers and Slackers","visibility":"public"},{"name":"Frontend","slug":"frontend","description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","feature_image":null,"meta_description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","meta_title":"Frontend Development | Hackers and Slackers","visibility":"public"},{"name":"JavaScript","slug":"javascript","description":"JavaScript covering both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","feature_image":null,"meta_description":"JavaScript topics, both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","meta_title":"Javascript Tutorials | Hackers and Slackers","visibility":"public"},{"name":"Data Engineering","slug":"dataengineering","description":"The systematic collection and transformation of data via the creation of tools and pipelines.","feature_image":null,"meta_description":null,"meta_title":"Data Engineering | Hackers and Slackers","visibility":"public"},{"name":"#MongoDB Cloud","slug":"mongodb-cloud","description":"All you need to know about MongoDB’s official cloud offering. Dive into MongoDB Atlas, or the architecture & microservices provided by MongoDB Stitch.","feature_image":"https://hackersandslackers.com/content/images/2019/03/mongodbcloudseries.jpg","meta_description":"All you need to know about MongoDB’s official cloud offering. Dive into MongoDB Atlas, or the architecture & microservices provided by MongoDB Stitch.","meta_title":"MongoDB Cloud","visibility":"internal"}],"plaintext":"At times, I've found my opinion of MongoDB Atlas  and MongoDB Stitch  to waver\nbetween two extremes. Sometimes I'm struck by the allure of a cloud which\nfundamentally disregards schemas (wooo no schema party!). Other times, such as\nwhen Mongo decides to upgrade to a new version and you find all your production\ninstances broken, I like the ecosystem a bit less. \n\nMy biggest qualm with MongoDB is poor documentation. The \"tutorials\" and sample\ncode seems hacked-together, unmaintained, and worst of all, inconsistent with\nitself. Reading through the docs seems to always end up with Mongo forcing\nTwilio down my throat my for some miserable reason. \n\nJust to illustrate how bad things can get, below are two totally sets of\ndocumentation for what is supposed to be the same product. Mongo's main\ndocumentation on the left frequently references the bastardized documentation on\nthe right. What is the documentation on the right? It's a collection of\nnonsense\nliving on an S3 bucket\n[https://s3.amazonaws.com/stitch-sdks/js/docs/4.0.0/index.html]  which lists the\nmethods black-boxed into Stitch, often with zero explanation on how to actually\nutilize functionality.\n\nWhich one is real? And WHY?!How frustrating is this? I've had email user\nauthentication \"working\" for weeks as far as Stitch's logs say, although not a\nsingle user has actually been registered in that time. Anyways, I digress.\n\nMaking a Serverless Function\nStitch Serverless functions are of course strictly Javascript (MongoDB abides by\nECMA2015 features). In your Stitch console, check out the \"functions\" link in\nthe left hand nav:\n\nGo ahead and create a new function.There are just a few things we need to\nspecify when creating a new function:\n\n * The name of the function (duh).\n * Whether or not the function can be accessed \"publicly\". A \"Private\" function\n   is the equivalent of a function that only accessible to the VPC it belongs to\n   (although technically MongoDB Cloud doesn't use this terminology).\n * A condition which needs to be met in order for the function to execute.\n\nHere's a screenshot of everything we just went over. Because whatever.Switch\nover to the function editor to start really F*&king Sh!t up.\n\nMongo's Serverless Function Editor\nWe can call a Serverless function in a number of ways, with one of those ways\nbeing directly from our frontend code. In this case, we're basically just taking\na Javascript function which could  live in our frontend codebase and moving it\nto the cloud, thus functions can be passed any number of arguments (just like a\nnormal function).\n\nLuckily for us, Mongo provides some commented out boilerplate code when creating\na new function, which gives us an idea of what we might want to use these\nfunctions for:\n\nexports = function(arg){\n  /*\n    Accessing application's values:\n    var x = context.values.get(\"value_name\");\n\n    Accessing a mongodb service:\n    var collection = context.services.get(\"mongodb-atlas\").db(\"dbname\").collection(\"coll_name\");\n    var doc = collection.findOne({owner_id: context.user.id});\n\n    To call other named functions:\n    var result = context.functions.execute(\"function_name\", arg1, arg2);\n\n    Try running in the console below.\n  */\n  return {arg: arg};\n};\n\n\nPay special attention to context.services  here. When using a serverless\nfunction to access MongoDB services such as our database or endpoints, we can\naccess these via context.services  along with whichever service we're trying to\nmess with.\n\nQuerying our Database Within a Function\nLet's grab a single record from a collection in our Atlas collection:\n\nexports = function(arg){\n      const mongodb = context.services.get(\"mongodb-atlas\");\n      const collection = mongodb.db(\"blog\").collection(\"authors\");\n      var result = collection.findOne({\"author\": arg});\n      return result;\n};\n\n\nWe use findOne here to return an object, whereas we'd probably use toArray  if\nwe'd be expecting multiple results. The query we're running is contained within \nfindOne({\"author\": arg}). Our function takes an argument and returns a record\nwhere the value matches the argument: this makes our functions highly reusable,\nof course.\n\nCalling Our Function via Our App\nAs a recap, you have the option of including Stitch in your app either via a\nlink to a script or by installing the appropriate NPM modules. It's preferable\nto do the latter, but for the sake of this post, my patience with dealing with\nJavascript's babel browserify webpack gulp yarn npm requires package-lock .env\npipify facepunch  ecosystem has reached its limit. \n\nFeel free to follow in my footsteps of worst practices by embedding stitch\ndirectly:\n\n<script src=\"https://s3.amazonaws.com/stitch-sdks/js/bundles/4.0.8/stitch.js\"></script>\n\n\nAuthenticating Before Calling Functions\nBefore making queries or interacting with any serverless functions of any kind,\nwe need to authenticate a 'user' with the server; even if that user is an\nanonymous one (it's in our own best benefit to know which user crashed the\nserver, even if that 'users' is a random string of numbers). Because we allowed\nanonymous users to peruse through our data, this is easy:\n\n// Authenticates anonymous user\nclient.auth.loginWithCredential(new stitch.AnonymousCredential()).then(user => {\n  console.log('logged in anonymously as user')\n});\n\n\nCalling our Function\nNow that that's done, we can call our function immediately after:\n\n// Authenticates anonymous user\nclient.auth.loginWithCredential(new stitch.AnonymousCredential()).then(user => {\n  console.log('logged in anonymously as user')\n});\n\n// Calls function\nclient.callFunction(\"getUsers\", [\"{{author}}\"]).then(result => {\n  console.log(result)\n});\n\n\nOur function is called get users  and we're passing a single parameter of \n{{author}}. Even though one parameter is being passed, we pass parameters as\nlists as Mongo Serverless functions, as these functions are agnostic to what\nmight be coming their way.\n\nUsing Functions to Grab Stored Values\nLet's look at one more use case where calling a Stitch Serverless function might\ncome in handy.\n\nBack in the Stitch UI, check out the \"values\" tab in the left-hand nav. This is\na place where we can store constant values which should accessible through our\napplication, or even a place to retrieve secrets:\n\n2secret4uValues can only be retrieved by functions, and this would be a good\ntime to ensure those particular functions are marked \"private\" For instance, if\nyou have an API call you need to make, It would be best to create a function\nthat handles the logic of that API call, and within that function, invoke\nanother private function whose job it is simply to retrieve the key in question.\nMake sense?  Ah well, you'll figure it out.\n\nMaking a Serverless Function that Does Something\nAnyway, let's apply our knowledge of functions to actually do something. On our\nsite we currently use a third party Medium widget which fetches stories from a\nuser's Medium account. Here's how that would look in its entirety:\n\n<script src=\"https://s3.amazonaws.com/stitch-sdks/js/bundles/4.0.8/stitch.js\"></script>\n\n<script src=\"https://medium-widget.pixelpoint.io/widget.js\"></script>\n\n<script>\nfunction createMediumCard(medium){\n  console.log('medium= ' + medium);\n  MediumWidget.Init({\n    renderTo: '#medium-widget',\n    params: {\n      \"resource\": 'https://medium.com/' + medium,\n      \"postsPerLine\": 1,\n      \"limit\": 3,\n      \"picture\": \"small\",\n      \"fields\": [\"description\", \"publishAt\"],\n      \"ratio\": \"square\"\n    }\n  })\n  $('#medium').css('display', 'block');\n}\n    \nclient.auth.loginWithCredential(new stitch.AnonymousCredential()).then(user => {\n  console.log('logged in anonymously as user')\n});\n    \nclient.callFunction(\"getUsers\", [\"{{author}}\"]).then(result => {\n  console.log(result)\n});\n</script>\n\n\nNormally, \"resource\": medium,  would actually read the URL of the Medium profile\nwe're trying to embed. However, when you blog on a platform like Ghost which\nonly allows your authors to have either Facebook or Twitter profiles, we need to\nessentially go out of our way to build a second, nonintrusive database to pull\ndata from to add functionality like this. Yeah - I'll have to show you what MY\n\"stack\" looks like for a single blog theme some day. It's ridiculous.\n\nAnyway, that’s all I’ve got for now. I hope these ramblings help you assess\nMongoDB Cloud for yourself. No matter the provider, Enterprise Clouds target fat\nbudgets and are designed to rake in big money. It almost makes you wonder why\nsomebody would pay out of pocket for three of them just to write a stupid blog.","html":"<p>At times, I've found my opinion of <strong>MongoDB Atlas</strong> and <strong>MongoDB Stitch</strong> to waver between two extremes. Sometimes I'm struck by the allure of a cloud which fundamentally disregards schemas (wooo no schema party!). Other times, such as when Mongo decides to upgrade to a new version and you find all your production instances broken, I like the ecosystem a bit less. </p><p><strong>My biggest qualm with MongoDB is poor documentation. </strong>The \"tutorials\" and sample code seems hacked-together, unmaintained, and worst of all, inconsistent with itself. Reading through the docs seems to always end up with Mongo forcing Twilio down my throat my for some miserable reason. </p><p>Just to illustrate how bad things can get, below are two totally sets of documentation for what is supposed to be the same product. Mongo's main documentation on the left frequently references the bastardized documentation on the right. What is the documentation on the right? It's a <a href=\"https://s3.amazonaws.com/stitch-sdks/js/docs/4.0.0/index.html\">collection of nonsense living on an S3 bucket</a> which lists the methods black-boxed into Stitch, often with zero explanation on how to actually utilize functionality.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/mongodocs.jpg\" class=\"kg-image\"><figcaption>Which one is real? And WHY?!</figcaption></figure><!--kg-card-end: image--><p>How frustrating is this? I've had email user authentication \"working\" for weeks as far as Stitch's logs say, although not a single user has actually been registered in that time. Anyways, I digress.</p><h2 id=\"making-a-serverless-function\">Making a Serverless Function</h2><p>Stitch Serverless functions are of course strictly Javascript (MongoDB abides by ECMA2015 features). In your Stitch console, check out the \"functions\" link in the left hand nav:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://res-1.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/Screen-Shot-2018-11-25-at-10.28.24-PM.png\" class=\"kg-image\"><figcaption>Go ahead and create a new function.</figcaption></figure><!--kg-card-end: image--><p>There are just a few things we need to specify when creating a new function:</p><ul><li>The name of the function (duh).</li><li>Whether or not the function can be accessed \"publicly\". A \"Private\" function is the equivalent of a function that only accessible to the VPC it belongs to (although technically MongoDB Cloud doesn't use this terminology).</li><li>A condition which needs to be met in order for the function to execute.</li></ul><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/Screen-Shot-2018-11-25-at-10.31.05-PM_o.png\" class=\"kg-image\"><figcaption>Here's a screenshot of everything we just went over. Because whatever.</figcaption></figure><!--kg-card-end: image--><p>Switch over to the function editor to start really F*&amp;king Sh!t up.</p><h2 id=\"mongo-s-serverless-function-editor\">Mongo's Serverless Function Editor</h2><p>We can call a Serverless function in a number of ways, with one of those ways being directly from our frontend code. In this case, we're basically just taking a Javascript function which <em>could</em> live in our frontend codebase and moving it to the cloud, thus functions can be passed any number of arguments (just like a normal function).</p><p>Luckily for us, Mongo provides some commented out boilerplate code when creating a new function, which gives us an idea of what we might want to use these functions for:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">exports = function(arg){\n  /*\n    Accessing application's values:\n    var x = context.values.get(&quot;value_name&quot;);\n\n    Accessing a mongodb service:\n    var collection = context.services.get(&quot;mongodb-atlas&quot;).db(&quot;dbname&quot;).collection(&quot;coll_name&quot;);\n    var doc = collection.findOne({owner_id: context.user.id});\n\n    To call other named functions:\n    var result = context.functions.execute(&quot;function_name&quot;, arg1, arg2);\n\n    Try running in the console below.\n  */\n  return {arg: arg};\n};\n</code></pre>\n<!--kg-card-end: markdown--><p>Pay special attention to <code>context.services</code> here. When using a serverless function to access MongoDB services such as our database or endpoints, we can access these via <code>context.services</code> along with whichever service we're trying to mess with.</p><h3 id=\"querying-our-database-within-a-function\">Querying our Database Within a Function</h3><p>Let's grab a single record from a collection in our Atlas collection:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">exports = function(arg){\n      const mongodb = context.services.get(&quot;mongodb-atlas&quot;);\n      const collection = mongodb.db(&quot;blog&quot;).collection(&quot;authors&quot;);\n      var result = collection.findOne({&quot;author&quot;: arg});\n      return result;\n};\n</code></pre>\n<!--kg-card-end: markdown--><p>We use <strong>findOne </strong>here to return an object, whereas we'd probably use <strong>toArray</strong> if we'd be expecting multiple results. The query we're running is contained within <code>findOne({\"author\": arg})</code>. Our function takes an argument and returns a record where the value matches the argument: this makes our functions highly reusable, of course.</p><h2 id=\"calling-our-function-via-our-app\">Calling Our Function via Our App</h2><p>As a recap, you have the option of including Stitch in your app either via a link to a script or by installing the appropriate NPM modules. It's preferable to do the latter, but for the sake of this post, my patience with dealing with Javascript's <strong>babel browserify webpack gulp yarn npm requires package-lock .env pipify facepunch</strong> ecosystem has reached its limit. </p><p>Feel free to follow in my footsteps of worst practices by embedding stitch directly:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">&lt;script src=&quot;https://s3.amazonaws.com/stitch-sdks/js/bundles/4.0.8/stitch.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"authenticating-before-calling-functions\">Authenticating Before Calling Functions</h3><p>Before making queries or interacting with any serverless functions of any kind, we need to authenticate a 'user' with the server; even if that user is an anonymous one (it's in our own best benefit to know which user crashed the server, even if that 'users' is a random string of numbers). Because we allowed anonymous users to peruse through our data, this is easy:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">// Authenticates anonymous user\nclient.auth.loginWithCredential(new stitch.AnonymousCredential()).then(user =&gt; {\n  console.log('logged in anonymously as user')\n});\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"calling-our-function\">Calling our Function</h3><p>Now that that's done, we can call our function immediately after:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">// Authenticates anonymous user\nclient.auth.loginWithCredential(new stitch.AnonymousCredential()).then(user =&gt; {\n  console.log('logged in anonymously as user')\n});\n\n// Calls function\nclient.callFunction(&quot;getUsers&quot;, [&quot;{{author}}&quot;]).then(result =&gt; {\n  console.log(result)\n});\n</code></pre>\n<!--kg-card-end: markdown--><p>Our function is called <code>get users</code> and we're passing a single parameter of <code>{{author}}</code>. Even though one parameter is being passed, we pass parameters as lists as Mongo Serverless functions, as these functions are agnostic to what might be coming their way.</p><h2 id=\"using-functions-to-grab-stored-values\">Using Functions to Grab Stored Values</h2><p>Let's look at one more use case where calling a Stitch Serverless function might come in handy.</p><p>Back in the Stitch UI, check out the \"values\" tab in the left-hand nav. This is a place where we can store constant values which should accessible through our application, or even a place to retrieve secrets:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/Screen-Shot-2018-11-26-at-8.04.25-AM_o.png\" class=\"kg-image\"><figcaption>2secret4u</figcaption></figure><!--kg-card-end: image--><p>Values can only be retrieved by functions, and this would be a good time to ensure those particular functions are marked \"private\" For instance, if you have an API call you need to make, It would be best to create a function that handles the logic of that API call, and within that function, invoke another private function whose job it is simply to retrieve the key in question. Make sense?  Ah well, you'll figure it out.</p><h2 id=\"making-a-serverless-function-that-does-something\">Making a Serverless Function that Does Something</h2><p>Anyway, let's apply our knowledge of functions to actually do something. On our site we currently use a third party Medium widget which fetches stories from a user's Medium account. Here's how that would look in its entirety:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">&lt;script src=&quot;https://s3.amazonaws.com/stitch-sdks/js/bundles/4.0.8/stitch.js&quot;&gt;&lt;/script&gt;\n\n&lt;script src=&quot;https://medium-widget.pixelpoint.io/widget.js&quot;&gt;&lt;/script&gt;\n\n&lt;script&gt;\nfunction createMediumCard(medium){\n  console.log('medium= ' + medium);\n  MediumWidget.Init({\n    renderTo: '#medium-widget',\n    params: {\n      &quot;resource&quot;: 'https://medium.com/' + medium,\n      &quot;postsPerLine&quot;: 1,\n      &quot;limit&quot;: 3,\n      &quot;picture&quot;: &quot;small&quot;,\n      &quot;fields&quot;: [&quot;description&quot;, &quot;publishAt&quot;],\n      &quot;ratio&quot;: &quot;square&quot;\n    }\n  })\n  $('#medium').css('display', 'block');\n}\n    \nclient.auth.loginWithCredential(new stitch.AnonymousCredential()).then(user =&gt; {\n  console.log('logged in anonymously as user')\n});\n    \nclient.callFunction(&quot;getUsers&quot;, [&quot;{{author}}&quot;]).then(result =&gt; {\n  console.log(result)\n});\n&lt;/script&gt;\n</code></pre>\n<!--kg-card-end: markdown--><p>Normally, <code>\"resource\": medium,</code> would actually read the URL of the Medium profile we're trying to embed. However, when you blog on a platform like Ghost which only allows your authors to have either Facebook or Twitter profiles, we need to essentially go out of our way to build a second, nonintrusive database to pull data from to add functionality like this. Yeah - I'll have to show you what MY \"stack\" looks like for a single blog theme some day. It's ridiculous.</p><p>Anyway, that’s all I’ve got for now. I hope these ramblings help you assess MongoDB Cloud for yourself. No matter the provider, Enterprise Clouds target fat budgets and are designed to rake in big money. It almost makes you wonder why somebody would pay out of pocket for three of them just to write a stupid blog.</p>","url":"https://hackersandslackers.com/mongodb-stitch-serverless-functions/","uuid":"96e26ca1-02d4-41d6-afa8-db92b2e9c171","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b68db4904d65d1246ebd1eb"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673665","title":"Stitch's “Query Anywhere”: Executing Business Logic via Frontend","slug":"mongodb-stitch-query-anywhere","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/06/stitch5@2x.jpg","excerpt":"MongoDB Stitch vs the impossible: secure database queries via frontend JS.","custom_excerpt":"MongoDB Stitch vs the impossible: secure database queries via frontend JS.","created_at_pretty":"02 June, 2018","published_at_pretty":"23 November, 2018","updated_at_pretty":"05 January, 2019","created_at":"2018-06-02T12:07:57.000-04:00","published_at":"2018-11-23T07:00:00.000-05:00","updated_at":"2019-01-04T21:09:07.000-05:00","meta_title":"MongoDB Stitch \"Query Anywhere\" | Hackers and Slackers","meta_description":"Use MongoDB Stitch to query databases via Frontend code.","og_description":"Use MongoDB Stitch to query databases via Frontend code.","og_image":"https://hackersandslackers.com/content/images/2018/06/stitch5@2x.jpg","og_title":"MongoDB Stitch \"Query Anywhere\"","twitter_description":"Use MongoDB Stitch to query databases via Frontend code.","twitter_image":"https://hackersandslackers.com/content/images/2018/06/stitch5@2x.jpg","twitter_title":"MongoDB Stitch \"Query Anywhere\"","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"NoSQL","slug":"nosql","description":"Schemaless data for gunslingers. Heavily focused on databases such as MongoDB, as well as hosting said databases as cloud instances.","feature_image":null,"meta_description":"Schemaless data for gunslingers. Heavily focused on databases such as MongoDB, as well as hosting said databases as cloud instances.","meta_title":"NoSQL | Hackers and Slackers","visibility":"public"},"tags":[{"name":"NoSQL","slug":"nosql","description":"Schemaless data for gunslingers. Heavily focused on databases such as MongoDB, as well as hosting said databases as cloud instances.","feature_image":null,"meta_description":"Schemaless data for gunslingers. Heavily focused on databases such as MongoDB, as well as hosting said databases as cloud instances.","meta_title":"NoSQL | Hackers and Slackers","visibility":"public"},{"name":"Frontend","slug":"frontend","description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","feature_image":null,"meta_description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","meta_title":"Frontend Development | Hackers and Slackers","visibility":"public"},{"name":"DevOps","slug":"devops","description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","feature_image":null,"meta_description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","meta_title":"DevOps: Networking And Server Configuration | Hackers and Slackers","visibility":"public"},{"name":"#MongoDB Cloud","slug":"mongodb-cloud","description":"All you need to know about MongoDB’s official cloud offering. Dive into MongoDB Atlas, or the architecture & microservices provided by MongoDB Stitch.","feature_image":"https://hackersandslackers.com/content/images/2019/03/mongodbcloudseries.jpg","meta_description":"All you need to know about MongoDB’s official cloud offering. Dive into MongoDB Atlas, or the architecture & microservices provided by MongoDB Stitch.","meta_title":"MongoDB Cloud","visibility":"internal"}],"plaintext":"Some tools are simply the right tool for the job. I imagine this must have been\nthe thinking behind the wave of JSON-like NoSQL databases at their peak, and\neven so today. If we figure we’ll be passing information as JSON to an endpoint,\nto then have it structured into a schema, only to be promptly broken down again\nfor our request seconds later, if you will, it’s fair to question the\ncost-benefit of schemas in some cases. A lot of those cases cover the apps we\nbuild for ourselves: ones that let us do stupid things like spamming selfies or\nfilling the internet with vast mindless thoughts.\n\nMongoDB Atlas  is a hell of product in its own right, being a cloud NoSQL\ndatabase with the ability to execute queries similar to SQL JOINs, countless\naggregations, and more possibilities to work into a pipeline than I’ve even had\ntime to explore (we’ll get there). If you’ve ever been tasked to build endpoints\nfor yourself, chances are you already appreciate side-stepping the manual\none-to-one key association that comes with passing JSON to Lambda Functions or\nwhat-have-you.\n\nTake our situation at Hackers And Slackers, for instance. We’re running a Ghost\nblog, which is a young piece of software built by a non-profit organization:\nthis software is constantly being updated and improved, which means if we want\nto modify the logic of our Node app at all, our choices are:\n\n 1. Modify the Ghost source and refuse future updates\n 2. Merge our custom backend with Ghost changes in the event of an update\n 3. Build a third-party API using a platform such as AWS\n\nMongoDB Stitch  gives us a new fourth option: extend our app without all the\nrepetitive boilerplate.  I say extend  because it empowers us to build on top of\nthings which were previously black-boxed to us, such developing a theme atop a\nblogging system.\n\nCarrying on the Legacy\nMongoDB Stitch extends the philosophy of avoiding repetition. In a similar way\nto how NoSQL removed a pain point for many developers, Stitch wants you to keep\ndoing what you do best, which is probably writing NodeJS apps. Forever.\n\nIf I worked for Mongo, I’d sell the product like this:\n\nMongoDB Stitch empowers you to build powerful features without ever switching\ngears to the menial aspects of development.What I’m really saying is that MongoDB Stitch  is Google Firebase. Both products\ntarget the frontend  and mobile  developer markets, and both are very young and\nearly in fully achieving this goal. I’m watching the MongoDB product video for\nthe first time, and it feels like what I’ve assumed from using the product\naligns with their sell (good job on their part, I suppose):\n\nAs warm and uppity as that video is, Mongo has been rather bashful about their\nCloud. I'm guessing that has something to do with an IPO.\n\nOn the other hand, Google Firebase  has been tooting its own horn loudly for a\nyoung product, with a level of growth which feels almost reckless at times (I\nwon't get into it):\n\nAnyway, we're not here to compare. We're here to judge.\n\nGetting Started with a New Database\nFeel free to follow along by setting up a free tier cluster\n[https://docs.mongodb.com/manual/tutorial/atlas-free-tier-setup/]. \n\nProper Mongo accounts are managed at https://cloud.mongodb.com  once created.\nThis landing dash has plenty of useful info and stats regarding the cluster\nitself. We'll also need to be sure that a database exists before we crate any\napps, otherwise we'll just be interacting with nothing.\n\nI highly  suggest using the MongoDB Compass  desktop app to connect to your your\ncluster. It's easy to download, and even saves you the time of entering\ncredentials by connecting with a copy+pasted URI:\n\nConnect with your database; emotionally.Within Compass, simply create a database\nand collection:\n\nIn MongoWorld, \"collections\" are the equivalent of \"tables\".Let's Get Stitched\nWith all that out of the way, head back to your account on the Mongo Cloud. Now\nour interest is entirely in the Stitch Apps  link on the left side nav:\n\nThere’s so much to explore!Create and name a new Stitch application, and we'll\nland on the \"getting started\" page. \n\nEnable anonymous auth & point to your collectionOnce we create our app, Stitch\nimmediately throws us in to a quick 101 of how to interact with our database.\nWe're going to use the exact example that Stitch gives us; it's important to\nhave the \"A-ha\" moment where everything comes together. \n\nBefore getting to any code, the only two things we need to do are:\n\n 1. Enable Anonymous Authentication: This is fancy language for creating a user\n    type where anybody who accesses our app can make queries\n 2. Pointing to our Mongo Collection: We need somewhere to store the data we'll\n    be messing with.\n\nConnecting Your App\nWe're going to copy and paste this code on to a page of our app. Once this is\nlive, visit the page and keep an eye on the console:\n\n<script src=\"https://s3.amazonaws.com/stitch-sdks/js/bundles/4.0.8/stitch.js\"></script>\n\n<script>\n  const clientPromise = stitch.StitchClientFactory.create('hackerjira-bzmfe');\n  clientPromise.then(client => {\n    const db = client.service('mongodb', 'mongodb-atlas').db('HackersBlog');\n    client.login().then(() =>\n      db.collection('jira').updateOne({owner_id: client.authedId()}, {$set:{number:42}}, {upsert:true})\n    ).then(()=>\n      db.collection('jira').find({owner_id: client.authedId()}).limit(100).execute()\n    ).then(docs => {\n      console.log(\"Found docs\", docs)\n      console.log(\"[MongoDB Stitch] Connected to Stitch\")\n    }).catch(err => {\n      console.error(err)\n    });\n  });\n</script>\n\n\nChecking this on the live sites looks like this:\n\nNote the \"docs\" found in the console on the right.It worked, but what exactly?\nThe first thing the snippet tells the database to do is to upsert a row where\n\"number\" is equal to 42:\n\ndb.collection('jira').updateOne({owner_id: client.authedId()}, {$set:{number:42}}, {upsert:true})\n\n\nFor sanity, let's check the database to see what's up:\n\nIs that… a new record?!?!Sure enough, a new entry has been added to our database\nin the collection we specified. That's fun and all, but what about our actual\ndata? Isn't that what we came here for? Consider the next line:\n\ndb.collection('jira').find({owner_id: client.authedId()}).limit(100).execute()\n\n\nAhhh, we’re querying based on entries only  created from the current user!\nBecause the sample code we pasted creates a record, we can then query the\ndatabase for records created by that user. Let’s not ignore how cool that is\nhaving not actually done any work: we already have logic in place to allow\nanonymous users to create records and recognize them based on their session.\n\n.find()  is our bread and butter for retrieving records, much like SQL SELECT.\nSo in theory, to show all issues from this collection we'd just need to run the\nfollowing, right?\n\ndb.collection('jira').find({}).execute()\n\n\nSlow down there, buddy- but yes, pretty much. We just need to make read\npermissions public on the MongoDB Stitch side first. Back in the Stitch UI,\nselect \"Rules\" from the sidebar. Here, we can modify the rules for who can\nread/write which records from which DB:\n\nIt's less complicated than it looks.We can create rules as advanced as we'd\nlike, but the rules we need right now are simple enough to handle purely via the\nUI.\n\nGet All The Records\nGo ahead and add a bunch of records to your database collection. Experiment with\nimporting data via JSON or CSV, or just add some records one-by-one.\n\nWhen that's done, go back to your app and see what .find({})  comes back with:\n\nNow that's a collection.There they are: every record from a database collection,\ngrabbed with a single line of code on our frontend. Feel free to take a moment\nto reflect on this: we didn’t need to create an API, write logic, or log in to\nany shitty IAM policy management UIs. We didn’t even need to write a query; the\n‘query’ in this case is just a JSON object.\n\nStitching it All Together\nWhen I first reached this point, I experienced a rush of emotions: can creating\nnew features truly be this simple? If so, what have we been doing with our lives\nuntil this moment- repeating the same boilerplate and relearning the same\nconcepts as millions before us? Is this knowledge all worthless now? Does the\nexistence of Stitch reduce our lives’ greatest accomplishments to something that\ncan now be reproduced in minutes?\n\nWhile there are a great number of things that come easily with Stitch, there are\na fair share of headaches that come along with them. Many intricacies of complex\nflows and user management lack documentation or examples altogether. Creating a\ncloud based on ease-of-use even more frustrating: there’s not much that sucks\nmore than knowing something should be simple, but lacking the few lines of code\nto do it.\n\nThat’s where we’ll be filling in the blanks. Next time, we’ll take a look into\nStitch’s Serverless functions.","html":"<p>Some tools are simply the right tool for the job. I imagine this must have been the thinking behind the wave of JSON-like NoSQL databases at their peak, and even so today. If we figure we’ll be passing information as JSON to an endpoint, to then have it structured into a schema, only to be promptly broken down again for our request seconds later, if you will, it’s fair to question the cost-benefit of schemas in some cases. A lot of those cases cover the apps we build for ourselves: ones that let us do stupid things like spamming selfies or filling the internet with vast mindless thoughts.</p><p><strong><strong>MongoDB Atlas</strong></strong> is a hell of product in its own right, being a cloud NoSQL database with the ability to execute queries similar to SQL JOINs, countless aggregations, and more possibilities to work into a pipeline than I’ve even had time to explore (we’ll get there). If you’ve ever been tasked to build endpoints for yourself, chances are you already appreciate side-stepping the manual one-to-one key association that comes with passing JSON to Lambda Functions or what-have-you.</p><p>Take our situation at Hackers And Slackers, for instance. We’re running a Ghost blog, which is a young piece of software built by a non-profit organization: this software is constantly being updated and improved, which means if we want to modify the logic of our Node app at all, our choices are:</p><ol><li>Modify the Ghost source and refuse future updates</li><li>Merge our custom backend with Ghost changes in the event of an update</li><li>Build a third-party API using a platform such as AWS</li></ol><p><strong><strong>MongoDB Stitch</strong></strong> gives us a new fourth option: <em>extend our app without all the repetitive boilerplate.</em> I say <em>extend</em> because it empowers us to build on top of things which were previously black-boxed to us, such developing a theme atop a blogging system.</p><h2 id=\"carrying-on-the-legacy\">Carrying on the Legacy</h2><p><strong><strong>MongoDB Stitch </strong></strong>extends the philosophy of avoiding repetition. In a similar way to how NoSQL removed a pain point for many developers, Stitch wants you to keep doing what you do best, which is probably writing NodeJS apps. Forever.</p><p>If I worked for Mongo, I’d sell the product like this:</p><blockquote><em><em>MongoDB Stitch empowers you to build powerful features without ever switching gears to the menial aspects of development.</em></em></blockquote><p>What I’m really saying is that <strong><strong>MongoDB Stitch</strong></strong> is <strong><strong>Google Firebase</strong></strong>. Both products target the <em>frontend</em> and <em>mobile</em> developer markets, and both are very young and early in fully achieving this goal. I’m watching the MongoDB product video for the first time, and it feels like what I’ve assumed from using the product aligns with their sell (good job on their part, I suppose):</p><figure class=\"kg-card kg-embed-card\"><iframe width=\"480\" height=\"270\" src=\"https://www.youtube.com/embed/H3P0lW94L2Q?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></figure><p>As warm and uppity as that video is, Mongo has been rather bashful about their Cloud. I'm guessing that has something to do with an IPO.</p><p>On the other hand, <strong>Google Firebase</strong> has been tooting its own horn loudly for a young product, with a level of growth which feels almost reckless at times (I won't get into it):</p><figure class=\"kg-card kg-embed-card\"><iframe width=\"480\" height=\"270\" src=\"https://www.youtube.com/embed/iosNuIdQoy8?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></figure><p>Anyway, we're not here to compare. We're here to judge.</p><h2 id=\"getting-started-with-a-new-database\">Getting Started with a New Database</h2><p>Feel free to follow along by <a href=\"https://docs.mongodb.com/manual/tutorial/atlas-free-tier-setup/\">setting up a free tier cluster</a>. </p><p>Proper Mongo accounts are managed at <a href=\"https://cloud.mongodb.com\">https://cloud.mongodb.com</a> once created. This landing dash has plenty of useful info and stats regarding the cluster itself. We'll also need to be sure that a database exists before we crate any apps, otherwise we'll just be interacting with nothing.</p><p>I <em>highly</em> suggest using the <strong>MongoDB Compass</strong> desktop app to connect to your your cluster. It's easy to download, and even saves you the time of entering credentials by connecting with a copy+pasted URI:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/connectcompass.gif\" class=\"kg-image\"><figcaption>Connect with your database; emotionally.</figcaption></figure><p>Within Compass, simply create a database and collection:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-4.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/createdatabase_o.jpg\" class=\"kg-image\"><figcaption>In MongoWorld, \"collections\" are the equivalent of \"tables\".</figcaption></figure><h2 id=\"let-s-get-stitched\">Let's Get Stitched</h2><p>With all that out of the way, head back to your account on the Mongo Cloud. Now our interest is entirely in the <strong>Stitch Apps</strong> link on the left side nav:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/selectstitch.png\" class=\"kg-image\"><figcaption>There’s so much to explore!</figcaption></figure><p>Create and name a new Stitch application, and we'll land on the \"getting started\" page. </p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-5.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/cf61a09bd893c453854634988b71d500.gif\" class=\"kg-image\"><figcaption><em>Enable anonymous auth &amp; point to your collection</em></figcaption></figure><p>Once we create our app, Stitch immediately throws us in to a quick 101 of how to interact with our database. We're going to use the exact example that Stitch gives us; it's important to have the \"A-ha\" moment where everything comes together. </p><p>Before getting to any code, the only two things we need to do are:</p><ol><li><strong>Enable Anonymous Authentication</strong>: This is fancy language for creating a user type where anybody who accesses our app can make queries</li><li><strong>Pointing to our Mongo Collection</strong>: We need somewhere to store the data we'll be messing with.</li></ol><h3 id=\"connecting-your-app\">Connecting Your App</h3><p>We're going to copy and paste this code on to a page of our app. Once this is live, visit the page and keep an eye on the console:</p><pre><code class=\"language-javascript\">&lt;script src=&quot;https://s3.amazonaws.com/stitch-sdks/js/bundles/4.0.8/stitch.js&quot;&gt;&lt;/script&gt;\n\n&lt;script&gt;\n  const clientPromise = stitch.StitchClientFactory.create('hackerjira-bzmfe');\n  clientPromise.then(client =&gt; {\n    const db = client.service('mongodb', 'mongodb-atlas').db('HackersBlog');\n    client.login().then(() =&gt;\n      db.collection('jira').updateOne({owner_id: client.authedId()}, {$set:{number:42}}, {upsert:true})\n    ).then(()=&gt;\n      db.collection('jira').find({owner_id: client.authedId()}).limit(100).execute()\n    ).then(docs =&gt; {\n      console.log(&quot;Found docs&quot;, docs)\n      console.log(&quot;[MongoDB Stitch] Connected to Stitch&quot;)\n    }).catch(err =&gt; {\n      console.error(err)\n    });\n  });\n&lt;/script&gt;\n</code></pre>\n<p>Checking this on the live sites looks like this:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-5.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/Screenshot-2018-06-02-16.40.43.png\" class=\"kg-image\"><figcaption>Note the \"docs\" found in the console on the right.</figcaption></figure><p>It worked, but what exactly? The first thing the snippet tells the database to do is to upsert a row where \"number\" is equal to 42:</p><pre><code class=\"language-javascript\">db.collection('jira').updateOne({owner_id: client.authedId()}, {$set:{number:42}}, {upsert:true})\n</code></pre>\n<p>For sanity, let's check the database to see what's up:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-4.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/createdatabase_o.jpg\" class=\"kg-image\"><figcaption>Is that… a new record?!?!</figcaption></figure><p>Sure enough, a new entry has been added to our database in the collection we specified. That's fun and all, but what about our actual data? Isn't that what we came here for? Consider the next line:</p><pre><code class=\"language-javascript\">db.collection('jira').find({owner_id: client.authedId()}).limit(100).execute()\n</code></pre>\n<p>Ahhh, we’re querying based on entries <em>only</em> created from the current user! Because the sample code we pasted creates a record, we can then query the database for records created by that user. Let’s not ignore how cool that is having not actually done any work: we already have logic in place to allow anonymous users to create records and recognize them based on their session.</p><p><code>.find()</code> is our bread and butter for retrieving records, much like SQL <code>SELECT</code>. So in theory, to show all issues from this collection we'd just need to run the following, right?</p><pre><code class=\"language-javascript\">db.collection('jira').find({}).execute()\n</code></pre>\n<p>Slow down there, buddy- but yes, pretty much. We just need to make read permissions public on the MongoDB Stitch side first. Back in the Stitch UI, select \"Rules\" from the sidebar. Here, we can modify the rules for who can read/write which records from which DB:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/Screenshot-2018-06-02-16.43.31.png\" class=\"kg-image\"><figcaption>It's less complicated than it looks.</figcaption></figure><p>We can create rules as advanced as we'd like, but the rules we need right now are simple enough to handle purely via the UI.</p><h2 id=\"get-all-the-records\">Get All The Records</h2><p>Go ahead and add a bunch of records to your database collection. Experiment with importing data via JSON or CSV, or just add some records one-by-one.</p><p>When that's done, go back to your app and see what <code>.find({})</code> comes back with:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-4.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/Screen-Shot-2018-11-24-at-4.45.50-PM_o.png\" class=\"kg-image\"><figcaption>Now that's a collection.</figcaption></figure><p>There they are: every record from a database collection, grabbed with a single line of code on our frontend. Feel free to take a moment to reflect on this: we didn’t need to create an API, write logic, or log in to any shitty IAM policy management UIs. We didn’t even need to write a query; the ‘query’ in this case is just a JSON object.</p><h3 id=\"stitching-it-all-together\">Stitching it All Together</h3><p>When I first reached this point, I experienced a rush of emotions: can creating new features truly be this simple? If so, what have we been doing with our lives until this moment- repeating the same boilerplate and relearning the same concepts as millions before us? Is this knowledge all worthless now? Does the existence of Stitch reduce our lives’ greatest accomplishments to something that can now be reproduced in minutes?</p><p>While there are a great number of things that come easily with Stitch, there are a fair share of headaches that come along with them. Many intricacies of complex flows and user management lack documentation or examples altogether. Creating a cloud based on ease-of-use even more frustrating: there’s not much that sucks more than knowing something should be simple, but lacking the few lines of code to do it.</p><p>That’s where we’ll be filling in the blanks. Next time, we’ll take a look into Stitch’s Serverless functions.</p>","url":"https://hackersandslackers.com/mongodb-stitch-query-anywhere/","uuid":"76a0bed5-d98a-47a1-a00a-64cff37d16a8","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b12c0ddb5ac11477416d88d"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867373e","title":"Image Compression Using Gulp and Imagemin","slug":"simple-image-size-optimization-using-imagemin-and-gulp","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/11/imagemin-6@2x.jpg","excerpt":"The simplest way to optimize page speed without breaking everything.\n","custom_excerpt":"The simplest way to optimize page speed without breaking everything.\n","created_at_pretty":"16 November, 2018","published_at_pretty":"22 November, 2018","updated_at_pretty":"27 December, 2018","created_at":"2018-11-16T18:46:04.000-05:00","published_at":"2018-11-21T20:49:01.000-05:00","updated_at":"2018-12-26T23:25:33.000-05:00","meta_title":"Image Compression Using Gulp and Imagemin | Hackers and Slackers","meta_description":"The simplest way to optimize page speed without breaking everything.\n","og_description":"The simplest way to optimize page speed without breaking everything\n","og_image":"https://hackersandslackers.com/content/images/2018/11/imagemin-6@2x.jpg","og_title":"Image Compression Using Gulp and Imagemin | Hackers and Slackers","twitter_description":"The simplest way to optimize page speed without breaking everything\n","twitter_image":"https://hackersandslackers.com/content/images/2018/11/imagemin-6@2x.jpg","twitter_title":"Image Compression Using Gulp and Imagemin | Hackers and Slackers","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"JavaScript","slug":"javascript","description":"JavaScript covering both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","feature_image":null,"meta_description":"JavaScript topics, both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","meta_title":"Javascript Tutorials | Hackers and Slackers","visibility":"public"},"tags":[{"name":"JavaScript","slug":"javascript","description":"JavaScript covering both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","feature_image":null,"meta_description":"JavaScript topics, both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","meta_title":"Javascript Tutorials | Hackers and Slackers","visibility":"public"},{"name":"Frontend","slug":"frontend","description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","feature_image":null,"meta_description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","meta_title":"Frontend Development | Hackers and Slackers","visibility":"public"}],"plaintext":"I promised myself I wouldn’t get involved in any more Gulp tutorials; task\nrunners aren’t exactly the sexiest topic in the world, and chances are if you’ve\nmade it to this blog, you’ve either solidified a CI/CD pipeline for going live\nwith software, or you simply don’t need one. We’ll make an exception this time,\nbecause gulp-imagemin  is particularly dope.\n\nImagemin [https://github.com/imagemin/imagemin]  is a standalone Node library\nwhich also comes with a CLI [https://github.com/imagemin/imagemin-cli], and of\ncourse, a Gulp plugin [https://github.com/sindresorhus/gulp-imagemin]. In short,\n imagemin  compresses images in a given directory and is intelligent enough to\nrecognize images it has already compressed. This is huge because it means we can\nrecklessly tell imagemin  to compress the same folder of images hundreds of\ntimes, and each image will only be compressed exactly once.\n\nFor this tutorial, we’ll be taking gulp-imagemin and creating a task to compress\nimages in complex folder structures.\n\nUsing Imagemin on Complex Folder Structures\nWe’ve probably mentioned this once or twice before, but this blog is a theme\nrunning on a Ghost [https://ghost.org/]  stack. The thing about Ghost (and\nprobably any other blogging platform) is that it stores content in a date-based\nfolder hierarchy. /images  looks like this:\n\n/images\n├─ /2017\n│  └─ 01\n│  └─ 02\n│  └─ 03\n│  └─ 04\n│  └─ 05\n│  └─ 06\n│  └─ 07\n│  └─ 08\n│  └─ 09\n│  └─ 10\n│  └─ 11\n│  └─ 12\n└─ /2018\n   └─ 01\n   └─ 02\n   └─ 03\n   └─ 04\n   └─ 05\n   └─ 06\n   └─ 07\n   └─ 08\n   └─ 09\n   └─ 10\n   └─ 11\n\n\nImagemin  does not  work recursively, so we’ll need to handle looping through\nthis file structure ourselves.\n\nStarting our Gulpfile\nLet’s get started by going through the barebones of the libraries required to\nmake this happen:\n\nvar gulp = require('gulp'),\n  imagemin = require('gulp-imagemin'),\n  fs = require('fs'),\n  path = require('path');\n\n\ngulp-imagemin is the core Gulp plugin we need to compress our images, but is\nactually useless on it’s own — we need to also import plugins-for-a-plugin; \ngulp-imagemin requires a separate plugin for each image type we need to express.\n\nWe’re also requiring fs and path  here, which will let us walk through folder\nstructures programmatically.\n\nImagemin Plugins\nAs mentioned imagemin itself has plugins per image type: only require the ones\nyou think you’ll need:\n\nvar gulp = require('gulp'),\n  imagemin = require('gulp-imagemin'),\n  imageminWebp = require('imagemin-webp'),\n  imageminJpegtran = require('imagemin-jpegtran'),\n  imageminPngquant = require('imagemin-pngquant'),\n  imageminGifSicle = require('imagemin-gifsicle'),\n  imageminOptiPng = require('imagemin-optipng'),\n  imageminSvgo = require('imagemin-svgo'),\n  fs = require('fs'),\n  path = require('path');\n\n\nFor the sake of keeping this tutorial simple, we’ll limit our use case to JPGs.\n\nA particular standout here worth mentioning here is WebP\n[https://developers.google.com/speed/webp/]: a “next-gen” image compression for\nthe web which supposedly offers the best image quality for the smallest file\nsize available.\n\nLet’s Get This Going\nSome people (myself included) like to specify paths to their assets as a single\nvariable in their Gulpfile. This is even more relevant in the case of anybody\nusing Ghost, where images are in a totally different file structure from where\nour Gulpfile lives.\n\nvar gulp = require('gulp'),\n  imagemin = require('gulp-imagemin'),\n  imageminJpegtran = require('imagemin-jpegtran'),\n  fs = require('fs'),\n  path = require('path');\nvar paths = {\n  styles: {\n    src: 'src/less/*.less',\n    dest: 'assets/css'\n  },\n  scripts: {\n    src: 'src/js/*.js',\n    dest: 'assets/js'\n  },\n  html: {\n    src: 'views/*.hbs',\n    dest: 'assets/'\n  },\n  images: {\n    src: '/var/www/my-theme/content/images/2018/',\n    dest: '/var/www/my-theme/content/images/2018/'\n  }\n};\n\n\nLooping Through Folders\nWe need to look in our /images  folder are recursively find all folders\ncontaining images. Referencing the image path we set in paths, we’ll build an\narray of targeted folders:\n\nfunction image_loop() {\n  var folder_arr = []\n  fs.readdir(paths.images.src, function(err, folders) {\n    for(var i =0; i < folders.length; i++){\n      var folder_path = path.join(paths.images.src, folders[i]);\n      folder_arr.push(folder_path);\n    }\n    for(var i =0; i < folder_arr.length; i++) {\n        images(folder_arr[i]);\n    }\n  });\n}\n\n\nfs.readdir()  is a method that returns the contents of any directory. We'll\ncreate a function called image_loop which loops through all folders in the\ntarget directory, and will then call another function to compress the contents:\n\nfunction image_loop() { \n   fs.readdir(paths.images.src, function(err, folders) { \n      for(var i =0; i < folders.length; i++){ \n         var folder_path = path.join(paths.images.src, folders[i]);   \n         images(folders[i]); \n       } \n   }); \n }\n\n\nCompressing Images in Each Folder\nimage_loop  calls function images  once per folder to compress the contents of\neach folder. Here’s where we actually get to use imagemin:\n\nfunction image_loop() {\n  fs.readdir(paths.images.src, function(err, folders) {\n    for(var i =0; i < folders.length; i++){\n      var folder_path = path.join(paths.images.src, folders[i]);\n      images(folders[i]);\n    }\n  });\n}\n\n\nSimple enough, all we’re doing is:\n\n * Looking for files ending in .jpg  in each folder\n * Running imageminJpegtran to compress each JPG file\n * Specifying verbose, which prints the result to the console (for example: \n   “Minified 0 images”)\n * Writing files to the destination (which is the same as the source, thus\n   overwriting our files)\n\nPut it All Together\nvar gulp = require('gulp'),\n  imagemin = require('gulp-imagemin'),\n  imageminJpegtran = require('imagemin-jpegtran'),\n  fs = require('fs'),\n  path = require('path');\nvar paths = {\n  styles: {\n    src: 'src/less/*.less',\n    dest: 'assets/css'\n  },\n  scripts: {\n    src: 'src/js/*.js',\n    dest: 'assets/js'\n  },\n  html: {\n    src: 'views/*.hbs',\n    dest: 'assets/'\n  },\n  images: {\n    src: '/var/www/my-theme/content/images/2018/',\n    dest: '/var/www/my-theme/content/images/2018/'\n  }\n};\nfunction images(folder_path) {\n  return gulp.src(folder_path + '/*.jpg')\n  .pipe(imagemin(\n    [imageminJpegtran({progressive: true})],\n    {verbose: true}\n  ))\n  .pipe(gulp.dest(paths.images.dest));\n}\nfunction image_loop() {\n  fs.readdir(paths.images.src, function(err, folders) {\n    for(var i =0; i < folders.length; i++){\n      var folder_path = path.join(paths.images.src, folders[i]);\n      images(folders[i]);\n    }\n  });\n}\nvar build = gulp.parallel(styles, scripts, image_loop);\ngulp.task('default', build);\n\n\nAnd there you have it; a Gulpfile which compresses your images without intruding\nrequiring any sort of relinking.\n\nIf you’re interested in imagemin  or further optimizing your site, I highly\nrecommend Google’s recently announced beta of https://web.dev [https://web.dev/]\n. This is an excellent resource for auditing your site for opportunities on\nspeed, SEO, and more.","html":"<p>I promised myself I wouldn’t get involved in any more Gulp tutorials; task runners aren’t exactly the sexiest topic in the world, and chances are if you’ve made it to this blog, you’ve either solidified a CI/CD pipeline for going live with software, or you simply don’t need one. We’ll make an exception this time, because <strong><strong>gulp-imagemin</strong></strong> is particularly dope.</p><p><a href=\"https://github.com/imagemin/imagemin\" rel=\"noopener\"><strong><strong>Imagemin</strong></strong></a> is a standalone Node library which also comes with a <a href=\"https://github.com/imagemin/imagemin-cli\" rel=\"noopener\">CLI</a>, and of course, a <a href=\"https://github.com/sindresorhus/gulp-imagemin\" rel=\"noopener\">Gulp plugin</a>. In short, <em>imagemin</em> compresses images in a given directory and is intelligent enough to recognize images it has already compressed. This is huge because it means we can recklessly tell <em>imagemin</em> to compress the same folder of images hundreds of times, and each image will only be compressed exactly once.</p><p>For this tutorial, we’ll be taking <strong><strong>gulp-imagemin </strong></strong>and creating a task to compress images in complex folder structures.</p><h3 id=\"using-imagemin-on-complex-folder-structures\">Using Imagemin on Complex Folder Structures</h3><p>We’ve probably mentioned this once or twice before, but this blog is a theme running on a <a href=\"https://ghost.org/\" rel=\"noopener\"><strong><strong>Ghost</strong></strong></a><strong><strong> </strong></strong>stack. The thing about Ghost (and probably any other blogging platform) is that it stores content in a date-based folder hierarchy. <strong><strong>/images</strong></strong> looks like this:</p><pre><code class=\"language-bash\">/images\n├─ /2017\n│  └─ 01\n│  └─ 02\n│  └─ 03\n│  └─ 04\n│  └─ 05\n│  └─ 06\n│  └─ 07\n│  └─ 08\n│  └─ 09\n│  └─ 10\n│  └─ 11\n│  └─ 12\n└─ /2018\n   └─ 01\n   └─ 02\n   └─ 03\n   └─ 04\n   └─ 05\n   └─ 06\n   └─ 07\n   └─ 08\n   └─ 09\n   └─ 10\n   └─ 11\n</code></pre>\n<p><strong><strong>Imagemin</strong></strong> does <em>not</em> work recursively, so we’ll need to handle looping through this file structure ourselves.</p><h3 id=\"starting-our-gulpfile\">Starting our Gulpfile</h3><p>Let’s get started by going through the barebones of the libraries required to make this happen:</p><pre><code class=\"language-javascript\">var gulp = require('gulp'),\n  imagemin = require('gulp-imagemin'),\n  fs = require('fs'),\n  path = require('path');\n</code></pre>\n<p><strong><strong>gulp-imagemin </strong></strong>is the core Gulp plugin we need to compress our images, but is actually useless on it’s own — we need to also import <em>plugins-for-a-plugin; </em>gulp-imagemin requires a separate plugin for each image type we need to express.</p><p>We’re also requiring <strong><strong>fs </strong></strong>and <strong><strong>path</strong></strong> here, which will let us walk through folder structures programmatically.</p><h3 id=\"imagemin-plugins\">Imagemin Plugins</h3><p>As mentioned imagemin itself has plugins per image type: only require the ones you think you’ll need:</p><pre><code class=\"language-javascript\">var gulp = require('gulp'),\n  imagemin = require('gulp-imagemin'),\n  imageminWebp = require('imagemin-webp'),\n  imageminJpegtran = require('imagemin-jpegtran'),\n  imageminPngquant = require('imagemin-pngquant'),\n  imageminGifSicle = require('imagemin-gifsicle'),\n  imageminOptiPng = require('imagemin-optipng'),\n  imageminSvgo = require('imagemin-svgo'),\n  fs = require('fs'),\n  path = require('path');\n</code></pre>\n<p>For the sake of keeping this tutorial simple, we’ll limit our use case to JPGs.</p><p>A particular standout here worth mentioning here is <a href=\"https://developers.google.com/speed/webp/\" rel=\"noopener\">WebP</a>: a “next-gen” image compression for the web which supposedly offers the best image quality for the smallest file size available.</p><h3 id=\"let-s-get-this-going\">Let’s Get This Going</h3><p>Some people (myself included) like to specify paths to their assets as a single variable in their Gulpfile. This is even more relevant in the case of anybody using <strong><strong>Ghost, </strong></strong>where images are in a totally different file structure from where our Gulpfile lives.</p><pre><code class=\"language-javascript\">var gulp = require('gulp'),\n  imagemin = require('gulp-imagemin'),\n  imageminJpegtran = require('imagemin-jpegtran'),\n  fs = require('fs'),\n  path = require('path');\nvar paths = {\n  styles: {\n    src: 'src/less/*.less',\n    dest: 'assets/css'\n  },\n  scripts: {\n    src: 'src/js/*.js',\n    dest: 'assets/js'\n  },\n  html: {\n    src: 'views/*.hbs',\n    dest: 'assets/'\n  },\n  images: {\n    src: '/var/www/my-theme/content/images/2018/',\n    dest: '/var/www/my-theme/content/images/2018/'\n  }\n};\n</code></pre>\n<h3 id=\"looping-through-folders\">Looping Through Folders</h3><p>We need to look in our <strong><strong>/images</strong></strong> folder are recursively find all folders containing images. Referencing the image path we set in <strong><strong>paths</strong></strong>, we’ll build an array of targeted folders:</p><pre><code class=\"language-javascript\">function image_loop() {\n  var folder_arr = []\n  fs.readdir(paths.images.src, function(err, folders) {\n    for(var i =0; i &lt; folders.length; i++){\n      var folder_path = path.join(paths.images.src, folders[i]);\n      folder_arr.push(folder_path);\n    }\n    for(var i =0; i &lt; folder_arr.length; i++) {\n        images(folder_arr[i]);\n    }\n  });\n}\n</code></pre>\n<p><code>fs.readdir()</code> is a method that returns the contents of any directory. We'll create a function called <strong><strong>image_loop </strong></strong>which loops through all folders in the target directory, and will then call another function to compress the contents:</p><pre><code class=\"language-javascript\">function image_loop() { \n   fs.readdir(paths.images.src, function(err, folders) { \n      for(var i =0; i &lt; folders.length; i++){ \n         var folder_path = path.join(paths.images.src, folders[i]);   \n         images(folders[i]); \n       } \n   }); \n }\n</code></pre>\n<h3 id=\"compressing-images-in-each-folder\">Compressing Images in Each Folder</h3><p><strong><strong>image_loop</strong></strong> calls function <strong><strong>images</strong></strong> once per folder to compress the contents of each folder. Here’s where we actually get to use <strong><strong>imagemin:</strong></strong></p><pre><code class=\"language-javascript\">function image_loop() {\n  fs.readdir(paths.images.src, function(err, folders) {\n    for(var i =0; i &lt; folders.length; i++){\n      var folder_path = path.join(paths.images.src, folders[i]);\n      images(folders[i]);\n    }\n  });\n}\n</code></pre>\n<p>Simple enough, all we’re doing is:</p><ul><li>Looking for files ending in <strong><strong>.jpg</strong></strong> in each folder</li><li>Running <strong><strong>imageminJpegtran </strong></strong>to compress each JPG file</li><li>Specifying <strong><strong>verbose</strong></strong>, which prints the result to the console (for example: <em>“Minified 0 images”</em>)</li><li>Writing files to the destination (which is the same as the source, thus overwriting our files)</li></ul><h2 id=\"put-it-all-together\">Put it All Together</h2><pre><code class=\"language-javascript\">var gulp = require('gulp'),\n  imagemin = require('gulp-imagemin'),\n  imageminJpegtran = require('imagemin-jpegtran'),\n  fs = require('fs'),\n  path = require('path');\nvar paths = {\n  styles: {\n    src: 'src/less/*.less',\n    dest: 'assets/css'\n  },\n  scripts: {\n    src: 'src/js/*.js',\n    dest: 'assets/js'\n  },\n  html: {\n    src: 'views/*.hbs',\n    dest: 'assets/'\n  },\n  images: {\n    src: '/var/www/my-theme/content/images/2018/',\n    dest: '/var/www/my-theme/content/images/2018/'\n  }\n};\nfunction images(folder_path) {\n  return gulp.src(folder_path + '/*.jpg')\n  .pipe(imagemin(\n    [imageminJpegtran({progressive: true})],\n    {verbose: true}\n  ))\n  .pipe(gulp.dest(paths.images.dest));\n}\nfunction image_loop() {\n  fs.readdir(paths.images.src, function(err, folders) {\n    for(var i =0; i &lt; folders.length; i++){\n      var folder_path = path.join(paths.images.src, folders[i]);\n      images(folders[i]);\n    }\n  });\n}\nvar build = gulp.parallel(styles, scripts, image_loop);\ngulp.task('default', build);\n</code></pre>\n<p>And there you have it; a Gulpfile which compresses your images without intruding requiring any sort of relinking.</p><p>If you’re interested in <strong><strong>imagemin</strong></strong> or further optimizing your site, I highly recommend Google’s recently announced beta of <a href=\"https://web.dev/\" rel=\"noopener\">https://web.dev</a>. This is an excellent resource for auditing your site for opportunities on speed, SEO, and more.</p>","url":"https://hackersandslackers.com/simple-image-size-optimization-using-imagemin-and-gulp/","uuid":"e80f7a95-da5e-417f-8a71-683772fd93a9","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5bef56bc5bebbe659bef57c0"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867373c","title":"Lynx Roundup, November 19th","slug":"lynx-roundup-november-19th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/76@2x.jpg","excerpt":"Stats in simple English!  Modeling data in Cassandra!  Speeding up Python with Rust!","custom_excerpt":"Stats in simple English!  Modeling data in Cassandra!  Speeding up Python with Rust!","created_at_pretty":"12 November, 2018","published_at_pretty":"19 November, 2018","updated_at_pretty":"22 November, 2018","created_at":"2018-11-12T00:02:38.000-05:00","published_at":"2018-11-19T07:00:00.000-05:00","updated_at":"2018-11-21T20:46:12.000-05:00","meta_title":"Stats in simple English!  Modeling data in Cassandra!  Speeding up Python with Rust! | Hackers And Slackers","meta_description":"Stats in simple English!  Modeling data in Cassandra!  Speeding up Python with Rust! | Hackers And Slackers","og_description":"Stats in simple English!  Modeling data in Cassandra!  Speeding up Python with Rust!","og_image":"https://hackersandslackers.com/content/images/lynx/76@2x.jpg","og_title":"Lynx Roundup, November 19th","twitter_description":"Stats in simple English!  Modeling data in Cassandra!  Speeding up Python with Rust!","twitter_image":"https://hackersandslackers.com/content/images/lynx/76@2x.jpg","twitter_title":"Lynx Roundup, November 19th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.datasciencecentral.com/profiles/blogs/29-statistical-concepts-explained-in-simple-english-part-1\n\nhttps://www.toptal.com/robotics/programming-a-robot-an-introductory-tutorial\n\nhttps://www.youtube.com/watch?v=jTYiNjvnHZY\n\nhttps://tech.blue-yonder.com/oxidizing-python-speeding-up-urlquoting-by-using-rust/\n\nhttps://github.com/Bogdanp/cursive_re\n\nhttps://coverclock.blogspot.com/2018/10/tick.html\n\nhttps://blog.knoldus.com/cassandra-data-modeling/","html":"<p></p><p><a href=\"https://www.datasciencecentral.com/profiles/blogs/29-statistical-concepts-explained-in-simple-english-part-1\">https://www.datasciencecentral.com/profiles/blogs/29-statistical-concepts-explained-in-simple-english-part-1</a></p><p><a href=\"https://www.toptal.com/robotics/programming-a-robot-an-introductory-tutorial\">https://www.toptal.com/robotics/programming-a-robot-an-introductory-tutorial</a></p><p><a href=\"https://www.youtube.com/watch?v=jTYiNjvnHZY\">https://www.youtube.com/watch?v=jTYiNjvnHZY</a></p><p><a href=\"https://tech.blue-yonder.com/oxidizing-python-speeding-up-urlquoting-by-using-rust/\">https://tech.blue-yonder.com/oxidizing-python-speeding-up-urlquoting-by-using-rust/</a></p><p><a href=\"https://github.com/Bogdanp/cursive_re\">https://github.com/Bogdanp/cursive_re</a></p><p><a href=\"https://coverclock.blogspot.com/2018/10/tick.html\">https://coverclock.blogspot.com/2018/10/tick.html</a></p><p><a href=\"https://blog.knoldus.com/cassandra-data-modeling/\">https://blog.knoldus.com/cassandra-data-modeling/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-november-19th/","uuid":"1801df4d-0418-4888-8e19-399dfc93d2cf","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5be9096e74f90031d0a61710"}}]}},"pageContext":{"pageNumber":10,"humanPageNumber":11,"skip":120,"limit":12,"numberOfPages":33,"previousPagePath":"/page/10","nextPagePath":"/page/12"}}