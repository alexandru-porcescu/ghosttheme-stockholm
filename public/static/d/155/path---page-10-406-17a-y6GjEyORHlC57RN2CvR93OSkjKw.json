{"data":{"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673751","title":"Lynx Roundup, December 23rd","slug":"lynx-roundup-december-23rd","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/02/132@2x.jpg","excerpt":"Functional programming Python!  Trading Systems in Python!  Interactive data visualization in Dash!","custom_excerpt":"Functional programming Python!  Trading Systems in Python!  Interactive data visualization in Dash!","created_at_pretty":"10 December, 2018","published_at_pretty":"23 December, 2018","updated_at_pretty":"14 February, 2019","created_at":"2018-12-10T01:03:10.000-05:00","published_at":"2018-12-23T07:00:00.000-05:00","updated_at":"2019-02-14T04:56:18.000-05:00","meta_title":"Lynx Roundup, December 23rd | Hackers and Slackers","meta_description":"Functional programming Python!  Trading Systems in Python!  Interactive data visualization in Dash!","og_description":"Functional programming Python!  Trading Systems in Python!  Interactive data visualization in Dash!","og_image":"https://hackersandslackers.com/content/images/2019/02/132@2x.jpg","og_title":"Lynx Roundup, December 23rd","twitter_description":"Functional programming Python!  Trading Systems in Python!  Interactive data visualization in Dash!","twitter_image":"https://hackersandslackers.com/content/images/2019/02/132@2x.jpg","twitter_title":"Lynx Roundup, December 23rd","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://github.com/jofpin/trape\n\nhttps://medium.com/automation-generation/teaching-your-computer-to-invest-with-python-commission-free-automated-investing-5ade10961e08\n\nhttps://kite.com/blog/python/functional-programming\n\nhttps://www.marsja.se/pandas-read-csv-tutorial-to-csv/\n\nhttps://towardsdatascience.com/dash-a-beginners-guide-d118bd620b5d\n\nhttps://github.com/Refefer/Dampr\n\nhttp://d4bl.org/conference.html","html":"<p></p><p><a href=\"https://github.com/jofpin/trape\">https://github.com/jofpin/trape</a></p><p><a href=\"https://medium.com/automation-generation/teaching-your-computer-to-invest-with-python-commission-free-automated-investing-5ade10961e08\">https://medium.com/automation-generation/teaching-your-computer-to-invest-with-python-commission-free-automated-investing-5ade10961e08</a></p><p><a href=\"https://kite.com/blog/python/functional-programming\">https://kite.com/blog/python/functional-programming</a></p><p><a href=\"https://www.marsja.se/pandas-read-csv-tutorial-to-csv/\">https://www.marsja.se/pandas-read-csv-tutorial-to-csv/</a></p><p><a href=\"https://towardsdatascience.com/dash-a-beginners-guide-d118bd620b5d\">https://towardsdatascience.com/dash-a-beginners-guide-d118bd620b5d</a></p><p><a href=\"https://github.com/Refefer/Dampr\">https://github.com/Refefer/Dampr</a></p><p><a href=\"http://d4bl.org/conference.html\">http://d4bl.org/conference.html</a></p>","url":"https://hackersandslackers.com/lynx-roundup-december-23rd/","uuid":"6be3146d-65f2-4d25-a325-bc371ce8b203","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c0e019e1556321bd84c339c"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673750","title":"Lynx Roundup, December 22nd","slug":"lynx-roundup-december-22nd","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/82@2x.jpg","excerpt":"Generating classical music with neural nets!  Neural net cheat sheet!  Automated testing in data warehouses!","custom_excerpt":"Generating classical music with neural nets!  Neural net cheat sheet!  Automated testing in data warehouses!","created_at_pretty":"10 December, 2018","published_at_pretty":"22 December, 2018","updated_at_pretty":"22 December, 2018","created_at":"2018-12-10T01:01:03.000-05:00","published_at":"2018-12-22T07:00:00.000-05:00","updated_at":"2018-12-22T07:00:00.000-05:00","meta_title":"Lynx Roundup, December 22nd | Hackers and Slackers","meta_description":"Generating classical music with neural nets!  Neural net cheat sheet!  Automated testing in data warehouses!","og_description":"Generating classical music with neural nets!  Neural net cheat sheet!  Automated testing in data warehouses!","og_image":"https://hackersandslackers.com/content/images/lynx/82@2x.jpg","og_title":"Lynx Roundup, December 22nd","twitter_description":"Generating classical music with neural nets!  Neural net cheat sheet!  Automated testing in data warehouses!","twitter_image":"https://hackersandslackers.com/content/images/lynx/82@2x.jpg","twitter_title":"Lynx Roundup, December 22nd","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://medium.com/@josh.temple/automated-testing-in-the-modern-data-warehouse-d5a251a866af\n\nhttp://aclweb.org/anthology/C18-1293\n\nhttps://github.com/OpenMined/PySyft/tree/master/examples/tutorials\n\nhttps://blog.floydhub.com/generating-classical-music-with-neural-networks/\n\nhttps://stanford.edu/~shervine/teaching/cs-230/cheatsheet-recurrent-neural-networks\n\nhttps://medium.com/@leapingllamas/north-star-or-sign-post-metrics-which-should-one-optimize-24bcc9c05bfb\n\nhttps://arxiv.org/abs/1811.09656","html":"<p></p><p><a href=\"https://medium.com/@josh.temple/automated-testing-in-the-modern-data-warehouse-d5a251a866af\">https://medium.com/@josh.temple/automated-testing-in-the-modern-data-warehouse-d5a251a866af</a></p><p><a href=\"http://aclweb.org/anthology/C18-1293\">http://aclweb.org/anthology/C18-1293</a></p><p><a href=\"https://github.com/OpenMined/PySyft/tree/master/examples/tutorials\">https://github.com/OpenMined/PySyft/tree/master/examples/tutorials</a></p><p><a href=\"https://blog.floydhub.com/generating-classical-music-with-neural-networks/\">https://blog.floydhub.com/generating-classical-music-with-neural-networks/</a></p><p><a href=\"https://stanford.edu/~shervine/teaching/cs-230/cheatsheet-recurrent-neural-networks\">https://stanford.edu/~shervine/teaching/cs-230/cheatsheet-recurrent-neural-networks</a></p><p><a href=\"https://medium.com/@leapingllamas/north-star-or-sign-post-metrics-which-should-one-optimize-24bcc9c05bfb\">https://medium.com/@leapingllamas/north-star-or-sign-post-metrics-which-should-one-optimize-24bcc9c05bfb</a></p><p><a href=\"https://arxiv.org/abs/1811.09656\">https://arxiv.org/abs/1811.09656</a></p>","url":"https://hackersandslackers.com/lynx-roundup-december-22nd/","uuid":"8471fa86-4853-49e2-9703-38208e79248d","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5c0e011f1556321bd84c3397"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867374f","title":"Lynx Roundup, December 21st","slug":"lynx-roundup-december-21st","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/131@2x.jpg","excerpt":"Making your own interactive calculator!  Learn metasploit with BabySploit!  The AI Toolchain!","custom_excerpt":"Making your own interactive calculator!  Learn metasploit with BabySploit!  The AI Toolchain!","created_at_pretty":"10 December, 2018","published_at_pretty":"21 December, 2018","updated_at_pretty":"21 December, 2018","created_at":"2018-12-10T00:59:08.000-05:00","published_at":"2018-12-21T07:00:00.000-05:00","updated_at":"2018-12-21T12:10:38.000-05:00","meta_title":"Lynx Roundup, December 21st | Hackers and Slackers","meta_description":"Making your own interactive calculator!  Learn metasploit with BabySploit!  The AI Toolchain!","og_description":"Making your own interactive calculator!  Learn metasploit with BabySploit!  The AI Toolchain!","og_image":"https://hackersandslackers.com/content/images/lynx/131@2x.jpg","og_title":"Lynx Roundup, December 21st","twitter_description":"Making your own interactive calculator!  Learn metasploit with BabySploit!  The AI Toolchain!","twitter_image":"https://hackersandslackers.com/content/images/lynx/131@2x.jpg","twitter_title":"Lynx Roundup, December 21st","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"http://pbpython.com/notebook-process.html\n\nhttps://morepypy.blogspot.com/2018/11/guest-post-implementing-calculator-repl.html\n\nhttp://threespeedlogic.com/python-tworoutines.html\n\nhttps://github.com/M4cs/BabySploit\n\nhttps://validx.readthedocs.io/en/latest/\n\nhttps://github.com/Neo23x0/Fnord\n\nhttps://www.blumbergcapital.com/news_insights/ai-toolchain-2018/","html":"<p></p><p><a href=\"http://pbpython.com/notebook-process.html\">http://pbpython.com/notebook-process.html</a></p><p><a href=\"https://morepypy.blogspot.com/2018/11/guest-post-implementing-calculator-repl.html\">https://morepypy.blogspot.com/2018/11/guest-post-implementing-calculator-repl.html</a></p><p><a href=\"http://threespeedlogic.com/python-tworoutines.html\">http://threespeedlogic.com/python-tworoutines.html</a></p><p><a href=\"https://github.com/M4cs/BabySploit\">https://github.com/M4cs/BabySploit</a></p><p><a href=\"https://validx.readthedocs.io/en/latest/\">https://validx.readthedocs.io/en/latest/</a></p><p><a href=\"https://github.com/Neo23x0/Fnord\">https://github.com/Neo23x0/Fnord</a></p><p><a href=\"https://www.blumbergcapital.com/news_insights/ai-toolchain-2018/\">https://www.blumbergcapital.com/news_insights/ai-toolchain-2018/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-december-21st/","uuid":"106bfc02-3875-443f-8070-56485fc25a27","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5c0e00ac1556321bd84c3392"}},{"node":{"id":"Ghost__Post__5c1af93bffe54a660c58b85a","title":"Cracking Full Control Over Plot.ly Dash","slug":"gaining-full-control-over-plotly-dash","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/12/Dash@2x.jpg","excerpt":"Build apps with Plot.ly Dash on your own terms","custom_excerpt":"Build apps with Plot.ly Dash on your own terms","created_at_pretty":"20 December, 2018","published_at_pretty":"20 December, 2018","updated_at_pretty":"28 March, 2019","created_at":"2018-12-19T21:06:51.000-05:00","published_at":"2018-12-20T14:58:00.000-05:00","updated_at":"2019-03-28T05:19:31.000-04:00","meta_title":"Cracking Full Control Over Plot.ly Dash | Hackers and Slackers","meta_description":"Build apps with Plot.ly Dash on your own terms. Extend Flask functionality with Dash, not the other way around.","og_description":"Build apps with Plot.ly Dash on your own terms. Extend Flask functionality with Dash, not the other way around.","og_image":"https://hackersandslackers.com/content/images/2018/12/Dash@2x.jpg","og_title":"Cracking Full Control Over Plot.ly Dash","twitter_description":"Build apps with Plot.ly Dash on your own terms. Extend Flask functionality with Dash, not the other way around.","twitter_image":"https://hackersandslackers.com/content/images/2018/12/Dash@2x.jpg","twitter_title":"Cracking Full Control Over Plot.ly Dash","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Plotly","slug":"plotly","description":"Get intimate with a staple product in data visualization. Create charts with Plot.ly's core product, or become a pro with Plot.ly Dash.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/Dash.jpg","meta_description":"Get intimate with a staple product in data visualization. Create charts with Plot.ly's core product, or become a pro with Plot.ly Dash.","meta_title":"Plotly for Data Visualization | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Plotly","slug":"plotly","description":"Get intimate with a staple product in data visualization. Create charts with Plot.ly's core product, or become a pro with Plot.ly Dash.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/Dash.jpg","meta_description":"Get intimate with a staple product in data visualization. Create charts with Plot.ly's core product, or become a pro with Plot.ly Dash.","meta_title":"Plotly for Data Visualization | Hackers and Slackers","visibility":"public"},{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},{"name":"Data Vis","slug":"datavis","description":"Visualize your data with charting tools like Matplotlib, Plotly, D3, Chart.js, Muze, Seaborn, and countless others. Primarily focused on programmatic visualization as opposed to Business Intelligence software.","feature_image":null,"meta_description":"Visualize your data with charting tools like Matplotlib, Plotly, D3, Chart.js, Muze, Seaborn, and countless others. Focused on programmatic visualization.","meta_title":"Data Visualization | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"},{"name":"#Using Plotly Dash Like a Pro","slug":"plotly-dash","description":"Push the limits of Plot.ly Dash to create data-driven applications with ease. Take on Python, Pandas, Flask, and Data Visualization all at once.","feature_image":"https://hackersandslackers.com/content/images/2019/03/Dash.jpg","meta_description":"Push the limits of Plot.ly Dash to create data-driven applications with ease. Take on Python, Pandas, Flask, and Data Visualization all at once.","meta_title":"Using Plotly Dash Like a Pro","visibility":"internal"}],"plaintext":"Ahh, Plot.ly [http://plot.ly/]; typing that name into a post headline triggers\nan emotional cocktail of pride and embarrassment. Over the years Plotly has been\nat the core of some of the most influential products I’ve worked on: a\nhodgepodge of Fintech and humanitarian clients, all of which are still proudly\nwaving their charts and dashboards around the world. Yet, my mind is boggled by\na simple question: what the hell  took us so long to write our first post about\nPlotly? We've been operating Hackers and Slackers for over a full year now...\ndid I seriously write a  post about JQuery\n[https://hackersandslackers.com/making-ajax-calls-with-jquery/]  in that time\nbefore reaching this point?\n\nMuch has changed in the last year or so for our friends in Montreal. Number 1 in\nmy book is the price reduction of their core product: from 300 dollars  to zero.\nI paid the 300 dollars. We really need to get a “donate” button around here. \n\nA close second is undoubtedly the introduction of Plot.ly Dash\n[https://plot.ly/products/dash/]. Dash  tickles a sentiment which has danced\nthrough many young and helplessly naïve Pythonistas' minds: what if we could\nwrite only  in Python, like, forever?  As awful of an idea it is to start\nGoogling Python-to-frontend code interpreters (they exist; I checked), Plotly's\nDash does a shockingly good job of breathing life into that romantic fantasy of\ncommitting to Python forever.\n\nBut we're not here to deliver a recycled 'What is Plotly?'  synopsis. We're not\neven interested in the obligatory 'How to Get Started Using This\nAlready-Well-Documented-Technology' post. Plotly deserves better than that.\nInstead, we're coming hot out of the gate swinging: we're going to show you how\nto beat Plotly down, break it, and make it bend to your will. Welcome to a\nmagical edition of Hacking Plotly. It must be Christmas, folks.\n\nLet's Make a Plotly + Flask Lovechild from Hell\nLike almost every single advancement to come out of Python-geared architecture\nthis year, Dash has a little secret: it's gotten here with a little help from\nFlask. Alright, perhaps more than a little: Dash actually extends Flask. Sounds\nsensible, and perhaps even exciting at first; its almost as though every crush\nyou've ever had decided it be best to simply put their differences aside to\nstart a group chat with you in the interest of making your sexual well-being an\nequal team effort out of sheer love. As you've already guessed, life doesn't\nwork like that.\n\nDash hijacks Flask from the beginning, starting with the way we instantiate the\napp. Any code monkey who has laid eyes upon a wsgi.py file can tell you\nsomething is up before you can even say app = dash.Dash(__name__). Check out the\nrecommended startup boilerplate:\n\nfrom dash import Dash\nimport dash_core_components as dcc\nimport dash_html_components as html\n\nexternal_stylesheets = ['https://codepen.io/fgdsgfhgfh/pen/IHvjvb.css']\n\napp = Dash(__name__, external_stylesheets=external_stylesheets)\n\napp.layout = html.Div(\n        id='example-div-element'\n        )\n\nif __name__ == '__main__':\n    app.run_server(debug=True)\n\n\nIf you were to attempt to take this boilerplate and attempt to add core Flask\nlogic, such as authentication with Flask-Login, generating assets with \nFlask-Assets, or just creating a global database, where would you start? Plotly\ncleverly suggests reserving the app  namespace for your app- the very same that\nwe would do with Flask. Yet if we attempt to modify the app  object the same as\nwe would with Flask, nothing will work: Dash has declared an ecosystem, and\nnowhere in that ecosystem are you invited to add custom Flask application logic\nout of the box.\n\nDash does what it was intended to do very well: building dashboard-based\napplications. The issue is that applications which can only display data  aren't\nentirely useful as end products. What if we wanted to create a fully-featured\napp, where data visualization was simply a feature  of said app?\n\nCreating a Fully-Featured App (Where Data Vis is Simply a Feature of Said App)\nA common \"workaround\" you'll find in the community is passing Flask to Dash as\nthe underlying \"server\", something like this:\n\nfrom flask import Flask\nfrom dash import Dash\nimport dash_core_components as dcc\nimport dash_html_components as html\n\nserver = Flask(__name__)\napp = dash.Dash(__name__, server=server, url_base_pathname='/path')\napp.layout = html.Div(id='example-div-element')\n\n@server.route(\"/dash\")\ndef MyDashApp():\n    return app.index()\n\n\nMake no mistake: this method sucks. Sure, you've regained the ability to create\nroutes here and there, but let's not forget:\n\n * Your app will always start on a Dash-served page: if anything, we'd want our\n   start page to be something we have full control over to then dive into the\n   Dash components.\n * Access to globally available Flask plugins are still unavailable in this\n   method. Notice how we never set an application context?\n * Your ability to style your application with static assets and styles is\n   completely out of your hands.\n * Container architecture built on Flask, such as Google App Engine, won't play\n   nicely when we start something that isn't Flask. So there's a good chance\n   that playing by the rules means losing the ability to deploy.\n\nIf we want to do these things, we cannot start our app as an instance of Dash\nand attempt to work around it. Instead, we must create a Flask app, and put Dash\nin its place as an app embedded in our  app. This gives us full control over\nwhen users can enter the Dash interface, and even within that interface, we can\nstill manage database connections or user sessions as we see fit. Welcome to the\nbig leagues.\n\nTurning the Tables: Dash Inside Flask\nFirst things first, let's get our wsgi.py  file back. Pretty much any hosted\nPython application expects this, so please: enough with the app.py  nonsense.\n\nfrom plotly_flask_tutorial import create_app\n\napp = create_app()\n\nif __name__ == \"__main__\":\n    app.run(host='0.0.0.0', debug=True)\n\n\nLook familiar? Not only do we get Flask back, but we get our entire application\nfactory and all that it includes. Take a look at application/__init__.py:\n\nfrom flask import Flask\nfrom . import dash_view\n\n\ndef create_app():\n    \"\"\"Construct the core application.\"\"\"\n    app = Flask(__name__, instance_relative_config=False)\n    app.config.from_object('config.Config')\n    dash_app = dash_view.Add_Dash(app)\n\n    with app.app_context():\n        # Construct the core application\n        from . import routes\n        app.register_blueprint(routes.main_bp)\n\n        return app\n\n\nIt's almost as though nothing changed! In fact, the only line we have regarding\nDash here is dash_app = plotly_dash_views.Add_Dash(app). \n\nWe import dash_view  at the start of __init.py__. What is this, you might ask?\nIt's actually a file which contains our Dash app! Dash apps typically like to\nhave a single .py  file per view, which turns out to work great for us. Let's\nlook at why this works by checking dash_view.py:\n\nimport glob\nfrom dash import Dash\nimport dash_table\nimport dash_core_components as dcc\nimport dash_html_components as html\nimport pandas as pd\n\n\ndef Add_Dash(server):\n    \"\"\"Plot.ly Dash view which populates the screen with loaded DataFrames.\"\"\"\n    external_stylesheets = ['https://hackers.nyc3.cdn.digitaloceanspaces.com/css/plotly-flask-tutorial.css']\n    dash_app = Dash(server=server,\n                    external_stylesheets=external_stylesheets,\n                    routes_pathname_prefix='/dash_view/')\n\n    # Create Dash Layout\n    dash_app.layout = html.Div(\n        id='dash-container'\n      )\n\n    return dash_app.server\n\n\nWe pass our Flask instance to Add_Dash  as a parameter called server. Unlike the\nprevious examples, it's actually server  running the show this time, with Dash\npiggybacking as a module. This is our most important line of code:\n\ndash_app = Dash(server=server, routes_pathname_prefix='/dash_view/')\n\n\nDash doesn't handle routes like Flask does (or at all, really). That's fine! We\nstart dash_app  with URL prefix, which means the Dash logic here is confined to\nthat single page. This means we can build a sprawling Flask app with hundreds of\nfeatures and views, and oh yeah, if we want a Dash view, we can just create a\nfile for that to chill on its own, not touching anything else.\n\nNow you're thinking with portals™.\n\nWhat Our App Looks Like\nIf you're following along, it would probably help to have a top-level view of\nwhat's going on so far:\n\nplotlydash-flask-tutorial\n├── /plotly_flask_tutorial\n│   ├── __init__.py\n│   ├── dash_view.py\n│   ├── routes.py\n│   ├── /data\n│   │   ├── chicago_taxis.csv\n│   │   ├── citibike_trips.csv\n│   │   ├── cities.csv\n│   │   └── pocket.csv\n│   ├── /static\n│   │   ├── dist\n│   │   │   └── css\n│   │   │       └── plotly-flask-tutorial.css\n│   │   ├── js\n│   │   │   └── main.js\n│   │   └── less\n│   │       ├── global.less\n│   │       ├── header.less\n│   │       └── table.less\n│   ├── /templates\n│   │   ├── index.html\n│   │   └── nav.html\n│   └── /data\n│       ├── chicago_taxis.csv\n│       ├── citibike_trips.csv\n│       ├── cities.csv\n│       └── pocket.csv\n├── Pipfile\n├── Pipfile.lock\n├── README.md\n├── config.py\n├── requirements.txt\n├── setup.py\n├── start.sh\n└── wsgi.py\n\n\nWe're storing our app within a directory called plotly_flask_tutorial. In that\ndirectory, we have our typical Flask stuff (/templates, /static, etc) as well as\ntwo notable files: routes.py  and dash_view.py.\n\nroutes.py\nroutes.py  can contain anything we want. Our application will default to serving\na Flask page, not  a Dash page, so our routes can be an entire standalone\napplication. Here's what I tossed in there: \n\nimport os\nfrom flask import Blueprint, render_template\nfrom flask_assets import Environment, Bundle\nfrom flask import current_app as app\nimport lesscpy\n\nmain_bp = Blueprint('main_bp', __name__,\n                    template_folder='templates',\n                    static_folder='static')\nassets = Environment(app)\nEnvironment.auto_build = True\nEnvironment.debug = False\nless_bundle = Bundle('less/*.less',\n                     filters='less,cssmin',\n                     output='dist/css/plotly-flask-tutorial.css.css',\n                     extra={'rel': 'stylesheet/less'})\njs_bundle = Bundle('js/*.js',\n                   filters='jsmin',\n                   output='dist/js/main.js')\nassets.register('less_all', less_bundle)\nassets.register('js_all', js_bundle)\nless_bundle.build(force=True)\njs_bundle.build()\n\n\n# Landing Page\n@main_bp.route('/', methods=['GET'])\ndef home():\n    return render_template('index.html',\n                           title='Plotly Flask Tutorial.',\n                           template='home-template',\n                           body=\"This is an example homepage, served with Flask.\")\n\n\nAll this is doing is serving up index.html.\n\ndash_view.py\ndash_view.py  is the Dash app we have living within  our Flask app. But how does\nFlask know which url to serve our application at? Wasn't it missing from \nroutes.py? Indeed it was, good fellow! Because we set routes_pathname_prefix, we\n don't need  to create a route for dash_view.py: it will always be served\nwhenever we navigate to 127.0.01/dash_view. Thus, we can create a navigation\ntemplate like this:\n\n<nav>\n  <a href=\"/\"><i class=\"fas fa-home\"></i> Home</a>\n  <a href=\"/dash_view/\"><i class=\"fas fa-chart-line\"></i> Embdedded Plotly Dash</a>\n</nav>\n\n\nCreating Something Useful\nHere's a fun little thing I was able to do with Dash, while in the context of\nrunning under a Flask app. In our file dash_view.py, I have the app look at a\nfolder of extracted datasets (called  /data). For each dataset, I use Pandas to\ngenerate a preview, and Dash's \"data table\" component to render said previews in\nour Dash app. This lets us quickly cruise through the data an app depends on\nwith a cool interface:\n\nA bit rough around the edges, but you get the point.If you're hungry for some\nsource code to get started building your own Plotly Dash views, here's the\nsource I used to create the page above:\n\nimport glob\nfrom pathlib import Path, PurePath\nfrom dash import Dash\nimport dash_table\nimport dash_core_components as dcc\nimport dash_html_components as html\nimport pandas as pd\n\np = Path('.')\n\n\ndef Add_Dash(server):\n    \"\"\"Plot.ly Dash view which populates the screen with loaded DataFrames.\"\"\"\n    external_stylesheets = ['https://hackers.nyc3.cdn.digitaloceanspaces.com/css/plotly-flask-tutorial.css',\n                            'https://fonts.googleapis.com/css?family=Lato',\n                   'https://use.fontawesome.com/releases/v5.8.1/css/all.css']\n    dash_app = Dash(server=server,\n                    external_stylesheets=external_stylesheets,\n                    routes_pathname_prefix='/dash_view/')\n\n    # Override the underlying HTML template\n    dash_app.index_string = '''<!DOCTYPE html>\n        <html>\n            <head>\n                {%metas%}\n                <title>{%title%}</title>\n                {%favicon%}\n                {%css%}\n            </head>\n            <body>\n                <nav>\n                  <a href=\"/\"><i class=\"fas fa-home\"></i> Home</a>\n                  <a href=\"/dash_view/\"><i class=\"fas fa-chart-line\"></i> Embdedded Plotly Dash</a>\n                </nav>\n                {%app_entry%}\n                <footer>\n                    {%config%}\n                    {%scripts%}\n                    {%renderer%}\n                </footer>\n            </body>\n        </html>'''\n\n    # Create Dash Layout comprised of Data Tables\n    dash_app.layout = html.Div(\n        children=get_datasets(),\n        id='flex-container'\n      )\n\n    return dash_app.server\n\n\ndef get_datasets():\n    \"\"\"Returns previews of all CSVs saved in /data directory.\"\"\"\n    data_filepath = list(p.glob('plotly_flask_tutorial/data/*.csv'))\n    arr = ['This is an example Plot.ly Dash App.']\n    for index, csv in enumerate(data_filepath):\n        print(PurePath(csv))\n        df = pd.read_csv(data_filepath[index]).head(10)\n        table_preview = dash_table.DataTable(\n            id='table_' + str(index),\n            columns=[{\"name\": i, \"id\": i} for i in df.columns],\n            data=df.to_dict(\"rows\"),\n            sorting=True,\n        )\n        arr.append(table_preview)\n    return arr\n\n\nI've gone ahead and uploaded the source code for this working example up on\nGithub [https://github.com/toddbirchard/plotlydash-flask-tutorial]. Please steal\nit: it's all yours.\n\nNeedless to say, there's way more cool shit we can accomplish with Plotly Dash.\nStick around long enough, and chances are we'll cover all of them.","html":"<p>Ahh, <a href=\"http://plot.ly/\"><strong>Plot.ly</strong></a>; typing that name into a post headline triggers an emotional cocktail of pride and embarrassment. Over the years Plotly has been at the core of some of the most influential products I’ve worked on: a hodgepodge of Fintech and humanitarian clients, all of which are still proudly waving their charts and dashboards around the world. Yet, my mind is boggled by a simple question: what the <em>hell</em> took us so long to write our first post about Plotly? We've been operating Hackers and Slackers for over a full year now... did I seriously write a<a href=\"https://hackersandslackers.com/making-ajax-calls-with-jquery/\"> post about JQuery</a> in that time before reaching this point?</p><p>Much has changed in the last year or so for our friends in Montreal. Number 1 in my book is the price reduction of their core product: from <em><strong>300 dollars</strong></em> to <em><strong>zero</strong></em>. I paid the 300 dollars. We really need to get a “donate” button around here. </p><p>A close second is undoubtedly the introduction of <strong><a href=\"https://plot.ly/products/dash/\">Plot.ly Dash</a></strong>. <strong>Dash</strong> tickles a sentiment which has danced through many young and helplessly naïve Pythonistas' minds: <em>what if we could write </em><strong><em>only</em></strong><em> in Python, like, </em><strong><em>forever</em></strong><em>?</em> As awful of an idea it is to start Googling Python-to-frontend code interpreters (they exist; I checked), Plotly's Dash does a shockingly good job of breathing life into that romantic fantasy of committing to Python forever.</p><p>But we're not here to deliver a recycled 'W<em>hat is Plotly?'</em> synopsis. We're not even interested in the obligatory '<em>How to Get Started Using This Already-Well-Documented-Technology' </em>post<em>. </em>Plotly deserves better than that. Instead, we're coming hot out of the gate swinging: we're going to show you how to beat Plotly down, break it, and make it bend to your will. Welcome to a magical edition of Hacking Plotly. It must be Christmas, folks.</p><h2 id=\"let-s-make-a-plotly-flask-lovechild-from-hell\">Let's Make a Plotly + Flask Lovechild from Hell</h2><p>Like almost every single advancement to come out of Python-geared architecture this year, Dash has a little secret: it's gotten here with a little help from Flask. Alright, perhaps more than a little: Dash actually extends Flask. Sounds sensible, and perhaps even exciting at first; its almost as though every crush you've ever had decided it be best to simply put their differences aside to start a group chat with you in the interest of making your sexual well-being an equal team effort out of sheer love. As you've already guessed, life doesn't work like that.</p><p>Dash hijacks Flask from the beginning, starting with the way we instantiate the app. Any code monkey who has laid eyes upon a <strong>wsgi.py </strong>file can tell you something is up before you can even say <code>app = dash.Dash(__name__)</code>. Check out the recommended startup boilerplate:</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">from dash import Dash\nimport dash_core_components as dcc\nimport dash_html_components as html\n\nexternal_stylesheets = ['https://codepen.io/fgdsgfhgfh/pen/IHvjvb.css']\n\napp = Dash(__name__, external_stylesheets=external_stylesheets)\n\napp.layout = html.Div(\n        id='example-div-element'\n        )\n\nif __name__ == '__main__':\n    app.run_server(debug=True)\n</code></pre>\n<!--kg-card-end: markdown--><p>If you were to attempt to take this boilerplate and attempt to add core Flask logic, such as authentication with <code>Flask-Login</code>, generating assets with <code>Flask-Assets</code>, or just creating a global database, where would you start? Plotly cleverly suggests reserving the <code>app</code> namespace for your app- the very same that we would do with Flask. Yet if we attempt to modify the <code>app</code> object the same as we would with Flask, nothing will work: Dash has declared an ecosystem, and nowhere in that ecosystem are you invited to add custom Flask application logic out of the box.</p><p>Dash does what it was intended to do very well: building dashboard-based applications. The issue is that applications which can <em>only display data</em> aren't entirely useful as end products. What if we wanted to create a fully-featured app, where data visualization was simply a <em>feature</em> of said app?</p><h2 id=\"creating-a-fully-featured-app-where-data-vis-is-simply-a-feature-of-said-app-\">Creating a Fully-Featured App (Where Data Vis is Simply a Feature of Said App)</h2><p>A common \"workaround\" you'll find in the community is passing Flask to Dash as the underlying \"server\", something like this:</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">from flask import Flask\nfrom dash import Dash\nimport dash_core_components as dcc\nimport dash_html_components as html\n\nserver = Flask(__name__)\napp = dash.Dash(__name__, server=server, url_base_pathname='/path')\napp.layout = html.Div(id='example-div-element')\n\n@server.route(&quot;/dash&quot;)\ndef MyDashApp():\n    return app.index()\n</code></pre>\n<!--kg-card-end: markdown--><p>Make no mistake: this method <em>sucks. </em>Sure, you've regained the ability to create routes here and there, but let's not forget:</p><ul><li>Your app will always start on a Dash-served page: if anything, we'd want our start page to be something we have full control over to then dive into the Dash components.</li><li>Access to globally available Flask plugins are still unavailable in this method. Notice how we never set an application context?</li><li>Your ability to style your application with static assets and styles is completely out of your hands.</li><li>Container architecture built on Flask, such as Google App Engine, won't play nicely when we start something that isn't Flask. So there's a good chance that playing by the rules means losing the ability to deploy.</li></ul><p>If we want to do these things, we cannot start our app as an instance of Dash and attempt to work around it. Instead, we must create a Flask app, and put Dash in its place as an app embedded in <em>our</em> app. This gives us full control over when users can enter the Dash interface, and even within that interface, we can still manage database connections or user sessions as we see fit. Welcome to the big leagues.</p><h2 id=\"turning-the-tables-dash-inside-flask\">Turning the Tables: Dash Inside Flask</h2><p>First things first, let's get our <strong>wsgi.py</strong> file back. Pretty much any hosted Python application expects this, so please: enough with the <strong>app.py</strong> nonsense.</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">from plotly_flask_tutorial import create_app\n\napp = create_app()\n\nif __name__ == &quot;__main__&quot;:\n    app.run(host='0.0.0.0', debug=True)\n</code></pre>\n<!--kg-card-end: markdown--><p>Look familiar? Not only do we get Flask back, but we get our entire application factory and all that it includes. Take a look at <code>application/__init__.py</code><em>:</em></p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">from flask import Flask\nfrom . import dash_view\n\n\ndef create_app():\n    &quot;&quot;&quot;Construct the core application.&quot;&quot;&quot;\n    app = Flask(__name__, instance_relative_config=False)\n    app.config.from_object('config.Config')\n    dash_app = dash_view.Add_Dash(app)\n\n    with app.app_context():\n        # Construct the core application\n        from . import routes\n        app.register_blueprint(routes.main_bp)\n\n        return app\n</code></pre>\n<!--kg-card-end: markdown--><p>It's almost as though nothing changed! In fact, the only line we have regarding Dash here is <code>dash_app = plotly_dash_views.Add_Dash(app)</code>. </p><p>We import <code>dash_view</code> at the start of <code>__init.py__</code>. What is this, you might ask? It's actually a file which contains our Dash app! Dash apps typically like to have a single <em>.py</em> file per view, which turns out to work great for us. Let's look at why this works by checking <code>dash_view.py</code>:</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">import glob\nfrom dash import Dash\nimport dash_table\nimport dash_core_components as dcc\nimport dash_html_components as html\nimport pandas as pd\n\n\ndef Add_Dash(server):\n    &quot;&quot;&quot;Plot.ly Dash view which populates the screen with loaded DataFrames.&quot;&quot;&quot;\n    external_stylesheets = ['https://hackers.nyc3.cdn.digitaloceanspaces.com/css/plotly-flask-tutorial.css']\n    dash_app = Dash(server=server,\n                    external_stylesheets=external_stylesheets,\n                    routes_pathname_prefix='/dash_view/')\n\n    # Create Dash Layout\n    dash_app.layout = html.Div(\n        id='dash-container'\n      )\n\n    return dash_app.server\n</code></pre>\n<!--kg-card-end: markdown--><p>We pass our Flask instance to <code>Add_Dash</code> as a parameter called <em>server. </em>Unlike the previous examples, it's actually <em>server</em> running the show this time, with Dash piggybacking as a module. This is our most important line of code:</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">dash_app = Dash(server=server, routes_pathname_prefix='/dash_view/')\n</code></pre>\n<!--kg-card-end: markdown--><p>Dash doesn't handle routes like Flask does (or at all, really). That's fine! We start <code>dash_app</code> with URL prefix, which means the Dash logic here is confined to that single page. This means we can build a sprawling Flask app with hundreds of features and views, and oh yeah, if we want a Dash view, we can just create a file for that to chill on its own, not touching anything else.</p><p>Now you're thinking with portals<strong>™.</strong></p><h2 id=\"what-our-app-looks-like\">What Our App Looks Like</h2><p>If you're following along, it would probably help to have a top-level view of what's going on so far:</p><!--kg-card-begin: markdown--><pre><code>plotlydash-flask-tutorial\n├── /plotly_flask_tutorial\n│   ├── __init__.py\n│   ├── dash_view.py\n│   ├── routes.py\n│   ├── /data\n│   │   ├── chicago_taxis.csv\n│   │   ├── citibike_trips.csv\n│   │   ├── cities.csv\n│   │   └── pocket.csv\n│   ├── /static\n│   │   ├── dist\n│   │   │   └── css\n│   │   │       └── plotly-flask-tutorial.css\n│   │   ├── js\n│   │   │   └── main.js\n│   │   └── less\n│   │       ├── global.less\n│   │       ├── header.less\n│   │       └── table.less\n│   ├── /templates\n│   │   ├── index.html\n│   │   └── nav.html\n│   └── /data\n│       ├── chicago_taxis.csv\n│       ├── citibike_trips.csv\n│       ├── cities.csv\n│       └── pocket.csv\n├── Pipfile\n├── Pipfile.lock\n├── README.md\n├── config.py\n├── requirements.txt\n├── setup.py\n├── start.sh\n└── wsgi.py\n</code></pre>\n<!--kg-card-end: markdown--><p>We're storing our app within a directory called <code>plotly_flask_tutorial</code>. In that directory, we have our typical Flask stuff (<strong>/templates</strong>, <strong>/static</strong>, etc) as well as two notable files: <code>routes.py</code> and <code>dash_view.py</code>.</p><h3 id=\"routes-py\">routes.py</h3><p><code>routes.py</code> can contain anything we want. Our application will default to serving a Flask page, <em>not</em> a Dash page, so our routes can be an entire standalone application. Here's what I tossed in there: </p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">import os\nfrom flask import Blueprint, render_template\nfrom flask_assets import Environment, Bundle\nfrom flask import current_app as app\nimport lesscpy\n\nmain_bp = Blueprint('main_bp', __name__,\n                    template_folder='templates',\n                    static_folder='static')\nassets = Environment(app)\nEnvironment.auto_build = True\nEnvironment.debug = False\nless_bundle = Bundle('less/*.less',\n                     filters='less,cssmin',\n                     output='dist/css/plotly-flask-tutorial.css.css',\n                     extra={'rel': 'stylesheet/less'})\njs_bundle = Bundle('js/*.js',\n                   filters='jsmin',\n                   output='dist/js/main.js')\nassets.register('less_all', less_bundle)\nassets.register('js_all', js_bundle)\nless_bundle.build(force=True)\njs_bundle.build()\n\n\n# Landing Page\n@main_bp.route('/', methods=['GET'])\ndef home():\n    return render_template('index.html',\n                           title='Plotly Flask Tutorial.',\n                           template='home-template',\n                           body=&quot;This is an example homepage, served with Flask.&quot;)\n</code></pre>\n<!--kg-card-end: markdown--><p>All this is doing is serving up <code>index.html</code>.</p><h3 id=\"dash_view-py\">dash_view.py</h3><p><code>dash_view.py</code> is the Dash app we have living <em>within</em> our Flask app. But how does Flask know which url to serve our application at? Wasn't it missing from <code>routes.py</code>? Indeed it was, good fellow! Because we set <strong>routes_pathname_prefix</strong>, we <em>don't need</em> to create a route for <code>dash_view.py</code>: it will always be served whenever we navigate to <code>127.0.01/dash_view</code>. Thus, we can create a navigation template like this:</p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">&lt;nav&gt;\n  &lt;a href=&quot;/&quot;&gt;&lt;i class=&quot;fas fa-home&quot;&gt;&lt;/i&gt; Home&lt;/a&gt;\n  &lt;a href=&quot;/dash_view/&quot;&gt;&lt;i class=&quot;fas fa-chart-line&quot;&gt;&lt;/i&gt; Embdedded Plotly Dash&lt;/a&gt;\n&lt;/nav&gt;\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"creating-something-useful\">Creating Something Useful</h2><p>Here's a fun little thing I was able to do with Dash, while in the context of running under a Flask app. In our file <code>dash_view.py</code>, I have the app look at a folder of extracted datasets (called<em> /data</em>). For each dataset, I use Pandas to generate a preview, and Dash's \"data table\" component to render said previews in our Dash app. This lets us quickly cruise through the data an app depends on with a cool interface:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/dataframes.gif\" class=\"kg-image\"><figcaption>A bit rough around the edges, but you get the point.</figcaption></figure><!--kg-card-end: image--><p>If you're hungry for some source code to get started building your own Plotly Dash views, here's the source I used to create the page above:</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">import glob\nfrom pathlib import Path, PurePath\nfrom dash import Dash\nimport dash_table\nimport dash_core_components as dcc\nimport dash_html_components as html\nimport pandas as pd\n\np = Path('.')\n\n\ndef Add_Dash(server):\n    &quot;&quot;&quot;Plot.ly Dash view which populates the screen with loaded DataFrames.&quot;&quot;&quot;\n    external_stylesheets = ['https://hackers.nyc3.cdn.digitaloceanspaces.com/css/plotly-flask-tutorial.css',\n                            'https://fonts.googleapis.com/css?family=Lato',\n                   'https://use.fontawesome.com/releases/v5.8.1/css/all.css']\n    dash_app = Dash(server=server,\n                    external_stylesheets=external_stylesheets,\n                    routes_pathname_prefix='/dash_view/')\n\n    # Override the underlying HTML template\n    dash_app.index_string = '''&lt;!DOCTYPE html&gt;\n        &lt;html&gt;\n            &lt;head&gt;\n                {%metas%}\n                &lt;title&gt;{%title%}&lt;/title&gt;\n                {%favicon%}\n                {%css%}\n            &lt;/head&gt;\n            &lt;body&gt;\n                &lt;nav&gt;\n                  &lt;a href=&quot;/&quot;&gt;&lt;i class=&quot;fas fa-home&quot;&gt;&lt;/i&gt; Home&lt;/a&gt;\n                  &lt;a href=&quot;/dash_view/&quot;&gt;&lt;i class=&quot;fas fa-chart-line&quot;&gt;&lt;/i&gt; Embdedded Plotly Dash&lt;/a&gt;\n                &lt;/nav&gt;\n                {%app_entry%}\n                &lt;footer&gt;\n                    {%config%}\n                    {%scripts%}\n                    {%renderer%}\n                &lt;/footer&gt;\n            &lt;/body&gt;\n        &lt;/html&gt;'''\n\n    # Create Dash Layout comprised of Data Tables\n    dash_app.layout = html.Div(\n        children=get_datasets(),\n        id='flex-container'\n      )\n\n    return dash_app.server\n\n\ndef get_datasets():\n    &quot;&quot;&quot;Returns previews of all CSVs saved in /data directory.&quot;&quot;&quot;\n    data_filepath = list(p.glob('plotly_flask_tutorial/data/*.csv'))\n    arr = ['This is an example Plot.ly Dash App.']\n    for index, csv in enumerate(data_filepath):\n        print(PurePath(csv))\n        df = pd.read_csv(data_filepath[index]).head(10)\n        table_preview = dash_table.DataTable(\n            id='table_' + str(index),\n            columns=[{&quot;name&quot;: i, &quot;id&quot;: i} for i in df.columns],\n            data=df.to_dict(&quot;rows&quot;),\n            sorting=True,\n        )\n        arr.append(table_preview)\n    return arr\n</code></pre>\n<!--kg-card-end: markdown--><p>I've gone ahead and uploaded the source code for this working example up <a href=\"https://github.com/toddbirchard/plotlydash-flask-tutorial\">on Github</a>. Please steal it: it's all yours.</p><p>Needless to say, there's way more cool shit we can accomplish with Plotly Dash. Stick around long enough, and chances are we'll cover all of them.</p>","url":"https://hackersandslackers.com/gaining-full-control-over-plotly-dash/","uuid":"535768b9-34b6-4a80-b5fa-b69b50cf3a68","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c1af93bffe54a660c58b85a"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867374e","title":"Lynx Roundup, December 20th","slug":"lynx-roundup-december-20th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/130@2x.jpg","excerpt":"New brain region!  Comparing Deep Learning frameworks!  Machine Learning in Excel & Python!","custom_excerpt":"New brain region!  Comparing Deep Learning frameworks!  Machine Learning in Excel & Python!","created_at_pretty":"10 December, 2018","published_at_pretty":"20 December, 2018","updated_at_pretty":"20 December, 2018","created_at":"2018-12-10T00:57:04.000-05:00","published_at":"2018-12-20T07:00:00.000-05:00","updated_at":"2018-12-20T09:22:43.000-05:00","meta_title":"Lynx Roundup, December 20th | Hackers and Slackers","meta_description":"New brain region!  Comparing Deep Learning frameworks!  Machine Learning in Excel & Python!","og_description":"New brain region!  Comparing Deep Learning frameworks!  Machine Learning in Excel & Python!","og_image":"https://hackersandslackers.com/content/images/lynx/130@2x.jpg","og_title":"Lynx Roundup, December 20th","twitter_description":"New brain region!  Comparing Deep Learning frameworks!  Machine Learning in Excel & Python!","twitter_image":"https://hackersandslackers.com/content/images/lynx/130@2x.jpg","twitter_title":"Lynx Roundup, December 20th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://neurosciencenews.com/hidden-brain-region-10260/\n\nhttps://motherboard.vice.com/en_us/article/wj3gx5/house-democrats-who-havent-supported-net-neutrality-yet-have-all-taken-money-from-telecoms\n\nhttps://www.javacodegeeks.com/2018/11/deep-learning-apache-kafka-keras.html\n\nhttps://blogs.technet.microsoft.com/machinelearning/2018/03/14/comparing-deep-learning-frameworks-a-rosetta-stone-approach/\n\nhttps://eng.uber.com/vine/\n\nhttps://www.dataquest.io/blog/sci-kit-learn-tutorial/\n\nhttps://datascienceplus.com/machine-learning-in-excel-with-python/","html":"<p></p><p><a href=\"https://neurosciencenews.com/hidden-brain-region-10260/\">https://neurosciencenews.com/hidden-brain-region-10260/</a></p><p><a href=\"https://motherboard.vice.com/en_us/article/wj3gx5/house-democrats-who-havent-supported-net-neutrality-yet-have-all-taken-money-from-telecoms\">https://motherboard.vice.com/en_us/article/wj3gx5/house-democrats-who-havent-supported-net-neutrality-yet-have-all-taken-money-from-telecoms</a></p><p><a href=\"https://www.javacodegeeks.com/2018/11/deep-learning-apache-kafka-keras.html\">https://www.javacodegeeks.com/2018/11/deep-learning-apache-kafka-keras.html</a></p><p><a href=\"https://blogs.technet.microsoft.com/machinelearning/2018/03/14/comparing-deep-learning-frameworks-a-rosetta-stone-approach/\">https://blogs.technet.microsoft.com/machinelearning/2018/03/14/comparing-deep-learning-frameworks-a-rosetta-stone-approach/</a></p><p><a href=\"https://eng.uber.com/vine/\">https://eng.uber.com/vine/</a></p><p><a href=\"https://www.dataquest.io/blog/sci-kit-learn-tutorial/\">https://www.dataquest.io/blog/sci-kit-learn-tutorial/</a></p><p><a href=\"https://datascienceplus.com/machine-learning-in-excel-with-python/\">https://datascienceplus.com/machine-learning-in-excel-with-python/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-december-20th/","uuid":"72dfc93a-e0fb-48f2-a9fe-ee0b71e8cb41","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5c0e00301556321bd84c338d"}},{"node":{"id":"Ghost__Post__5c192cdba632c8240cad3869","title":"Globally Accessible Variables in Flask: Demystifying the 'Application Context'","slug":"demystifying-flasks-application-context","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/04/flask_factory-2.jpg","excerpt":"Breaking down the nuances of the ‘app context’ in Flask's Application Factory.","custom_excerpt":"Breaking down the nuances of the ‘app context’ in Flask's Application Factory.","created_at_pretty":"18 December, 2018","published_at_pretty":"19 December, 2018","updated_at_pretty":"10 April, 2019","created_at":"2018-12-18T12:22:35.000-05:00","published_at":"2018-12-19T08:00:00.000-05:00","updated_at":"2019-04-09T23:49:27.000-04:00","meta_title":"Demystifying Flask's Application Context | Hackers and Slackers","meta_description":"A guide breaking down the cryptic nuances of Flask's 'Application Context.' Putting an end to \"RuntimeError: working outside of application context\".","og_description":"A guide breaking down the cryptic nuances of Flask's 'Application Context.' Putting an end to \"RuntimeError: working outside of application context\".","og_image":"https://hackersandslackers.com/content/images/2019/04/flask_factory-2-2.jpg","og_title":"Demystifying Flask's Application Context","twitter_description":"A guide breaking down the cryptic nuances of Flask's 'Application Context.' Putting an end to \"RuntimeError: working outside of application context\".","twitter_image":"https://hackersandslackers.com/content/images/2019/04/flask_factory-2-1.jpg","twitter_title":"Demystifying Flask's Application Context","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"#Building Flask Apps","slug":"building-flask-apps","description":"Python’s fast-growing and flexible microframework. Can handle apps as simple as API endpoints, to monoliths remininiscent of Django.","feature_image":"https://hackersandslackers.com/content/images/2019/03/flask-gettingstarted.jpg","meta_description":"Python’s fastest growing, most flexible, and perhaps most Pythonic framework.","meta_title":"Building Flask Apps","visibility":"internal"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"}],"plaintext":"A 'skill' that's always fascinated me is just how long some engineers can make\nit in their career while carrying glaringly obvious gaps in their knowledge of\nthe systems they use every day. To my surprise, I've turned corners where I\nmyself have been that engineer all along, and there's perhaps no better example\nof this then the time I've spent with Flask.\n\nWARNING! Highly opinionated statement incoming: Flask is everything a framework\nshould be. That is to say, it isn't really  a framework a fully-fledged\nframework at all. Sure, the term microframework might seem like a cute PR term,\nbut that doesn't negate the fact that there's something about Flask that's\ndifferent. When I write apps in Flask,  I feel as though I'm writing apps in \nPython.  On the other hand, when I write apps in Django,  I feel like I'm just\nwriting apps in Django.  A disciplined programmer might feel that overly\nstructured frameworks damper creativity and they're probably right: these are\nthe backbones of businesses, thus it makes sense to keep people from deviating\nfrom the norm. \n\nThe upside of Flask is also its downside: there's nearly an infinite number of\nways to solve a single problem. Every Stackoverflow regular has their own\npreference, and sometimes, just none of them seem... right. The problem is\ncompounded by some of the phrasing coming from Flask's documentation itself.\nFlask touts the importance of structuring apps with factories and Blueprints,\nwhile simultaneously expressing the power behind the application context.  What\nyou'll notice over time is that in Flask's own examples, these two 'very\nimportant things' never both appear at the same time: that's because they're\nsimply incompatible with one another.  This is a highly understated\ncontradiction of philosophies.\n\nCommunication Breakdown?\nHere's Flask's take on Application factories\n[http://flask.pocoo.org/docs/1.0/patterns/appfactories/]:\n\n> If you are already using packages and blueprints for your application (Modular\nApplications with Blueprints) there are a couple of really nice ways to further\nimprove the experience. A common pattern is creating the application object when\nthe blueprint is imported.\n\n\nAnd here's their description of the Application context\n[http://flask.pocoo.org/docs/1.0/appcontext/]:\n\n> The application context keeps track of the application-level data during a\nrequest, CLI command, or other activity. Rather than passing the application\naround to each function, the current_app and g proxies are accessed instead.\n\n\nConsidering g  is intended to stand for \"global\" it seems safe from the previous\nstatements that setting attributes of g  can be accessed globally within an\napplication... but they can't. This is where we backpedal and get into messy\nterritory:\n\n> However, importing the app instance within the modules in your project is prone\nto circular import issues. When using the app factory pattern or writing\nreusable blueprints or extensions there won’t be an app instance to import at\nall.\n\nFlask solves this issue with the application context. Rather than referring to\nan app directly, you use the the current_app  proxy, which points to the\napplication handling the current activity.\n\n\nOkay, fine. So if I instantiate an application factory with app.app_context(): \n(which is the only sensible way to create a factory at all)  I should be able to\nregister blueprints within that context, and reference the app context, correct?\n\nI could be crazy but this never seems to work  within blueprints. Whether they\nexist as peer modules or submodules, the words 'from application import\ncurrent_app as app' always seems to result in the same \"missing application\ncontext\" error. Conveniently it seems, all working examples of the application\ncontext seem to be when the Flask developers opt to serve single-file app\nexamples. This stranger from Stackoverflow\n[https://stackoverflow.com/questions/50233118/access-to-flask-global-variables-in-blueprint-apps] \n clears things up a bit:\n\n> This happens because the data are lost when the context (with app.app_context())\nends (doc).\nInside the context, everything is ok :\n\nfrom flask import Flask, g\napp = Flask(__name__)\nwith app.app_context():\n   g.my_db = 'database ok'\n   print(g.my_db)\n\nthis prints 'database ok'\n\n\nBut outside, you cannot access the attribute:\n\nfrom flask import Flask, g\napp = Flask(__name__)\nwith app.app_context():\n   g.my_db = 'database ok'\n\nprint(g.my_db)\n\n\nthis throws RuntimeError: Working outside of application context\n\neven if you create a new context:\n\nfrom flask import Flask, g\napp = Flask(__name__)\nwith app.app_context():\n   g.my_db = 'database ok'\n\nwith app.app_context():\n   print(g.my_db)\n\n\nthis throws AttributeError: '_AppCtxGlobals' object has no attribute 'my_db'\n\n\nAlas, here I am. Doomed writing posts to fill in the blanks of documentation\nleft behind by others. \n\nFlask Sessions: The REAL Slim Shady\nFlask-Session  is the MVP when it comes sharing temporary information across\nmodularized parts of our program. In fact, it's a bit odd this isn't encouraged\nmore-so than g. But whatever. We're here to heal.\n\nSessions  can handled in a number of different ways besides cookies. Take a look\nat the choices we have for storing session-based values in an instance of Flask:\n\nSESSION_TYPE\n Specifies which type of session interface to\nuse. Built-in session types:\n\n * null: NullSessionInterface (default)\n * redis: RedisSessionInterface\n * memcached: MemcachedSessionInterface\n * filesystem: FileSystemSessionInterface\n * mongodb: MongoDBSessionInterface\n * sqlalchemy: SqlAlchemySessionInterface\n\nSESSION_PERMANENT\n Whether use permanent session or not, default\nto be True\n SESSION_USE_SIGNER\n Whether sign the session cookie sid or not,\nif set to True, you have to set\n flask.Flask.secret_key\n[http://flask.pocoo.org/docs/api/#flask.Flask.secret_key], default to be\n False\n SESSION_KEY_PREFIX\n A prefix that is added before all session keys.\nThis makes it possible to use the same backend\nstorage server for different apps, default\n“session:”\n SESSION_REDIS\n A redis.Redis  instance, default connect to\n 127.0.0.1:6379\n SESSION_MEMCACHED\n A memcache.Client  instance, default connect\nto 127.0.0.1:11211\n SESSION_FILE_DIR\n The directory where session files are stored.\nDefault to use flask_session  directory under\ncurrent working directory.\n SESSION_FILE_THRESHOLD\n The maximum number of items the session stores\nbefore it starts deleting some, default 500\n SESSION_FILE_MODE\n The file mode wanted for the session files,\ndefault 0600\n SESSION_MONGODB\n A pymongo.MongoClient  instance, default\nconnect to 127.0.0.1:27017\n SESSION_MONGODB_DB\n The MongoDB database you want to use, default\n“flask_session”\n SESSION_MONGODB_COLLECT\n The MongoDB collection you want to use, default\n“sessions”\n SESSION_SQLALCHEMY\n A flask.ext.sqlalchemy.SQLAlchemy  instance\nwhose database connection URI is configured\nusing the SQLALCHEMY_DATABASE_URI  parameter\n SESSION_SQLALCHEMY_TABLE\n The name of the SQL table you want to use,\ndefault “sessions”\n Using Redis For Cached Session Information\nFor the sake of trying something different, I've opted to pick up a tiny Redis\ninstance from redislabs [https://redislabs.com/]. I can't help myself but\nwasting money on new services to play with; after all, check out how cool this\nlittle red box looks:\n\nRedis Enterprise: A Unique Primary Database\nPerfomance at Scale\n * 50M ops/sec,\n    Symmetric shared–nothing architecture ensures no performance overheads while\n   scaling, auto-sharding and re-balancing\n    Enhanced connection management, pipeline execution and request scheduling\n    \n\nBuilt-in high performance search\n * High performance, real-time indexing with items available for search within\n   1ms\n * Predictable high performance querying while maintaining concurrent loads of\n   indexing and querying\n * Highly scalable across multiple nodes to billions of items per second \n\nFailsafe high availability\n * Cross-rack/zone/datacenter/geo replication\n * Instant auto-failover in single digit second\n * Zero impact on throughput and latency during cluster operations such as\n   scaling, upgrades, re-sharding and rebalancing\n * Out-of-the box support for backup, restore and DR\n\nActive-active geo distribution\n * Reads/Writes in multiple geo regions to the same dataset\n * Local latencies, global availability\n * Built-in conflict resolution for simple and complex data types\n * Based on revolutionary CRDT academic research\n\nBuilt-in persistence\n * Enhanced storage engine for parallel access to any persistent storage\n * Multiple options for enhanced data persistence\n * Reliable persistence configurations on both master and slave shards with zero\n   performance impact\n\nMulti-model\n * Graph, JSON, Machine Learning and Bloom filter modules set industry standards\n   for high performance\n * Multi-shard coordination\n * Extensibility with custom modules\n\nIntelligent tiered access to memory\n * Up to 80% lower infrastructure costs by running Redis on Flash\n * Automatic management of data tiering between RAM & Flash with no code changes\n * Supports all new persistent memory technologies\n\nFlexible deployment options\n * Hybrid clusters can span on-prem infrastructure and multiple clouds\n * Most efficient use of resources with maximized core usage, multi-tenancy,\n   re-sharding and re-balancing to avoid noisy neighbors in every environment\n\nPerfomance at Scale\n Built-in persistence\n Failsafe high availability\n Active-active geo distribution\n Built-in high performance search\n Multi-model\n Intelligent tiered access to memory\n \n(RAM and Flash)\n Flexible deployment options\n \n(cloud, on-prem, hybrid)\n Fast\nPerformance at scale\n Built-in high performance search\n Reliable\nBuilt-in persistence\n Failsafe high availability\n Active-active geo distribution\n Flexible\nMulti-model\n Flexible deployment options (cloud, hybrid, on-prem)\n Intelligent tiered access to memory (ram and flash)\n (Why am I not getting paid for this? Why did I take the time to even make that\nmodule?)Redis  is NoSQL datastore written in C intended to temporarily hold data in\nmemory for users as they blaze mindlessly through your site. Other use cases\ninclude serving as the foundation for real-time chat apps via the\npublish/subscribe messaging paradigm; popular amongst stupid chat or dating apps\nslowly destroying our abilities as human beings to interact face-to-face.\nPowerful stuff.\n\nStructuring init.py Correctly\nConsider this to be the guide to Flask Application factories I wish I had months\nago. A healthy application factory should:\n\n * Derive all app configuration values from a class or environment variables.\n * Allow Database interactions to occur at any point within the app.\n * Pass values globally outside of the application context.\n\nThis does all of those things:\n\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_session import Session\nfrom flask_redis import FlaskRedis\n\n# Globally accessible libraries\ndb = SQLAlchemy()\nr = FlaskRedis()\n\n\ndef create_app():\n    \"\"\"Initialize the core application.\"\"\"\n    app = Flask(__name__, instance_relative_config=False)\n    app.config.from_object('config.Config')\n\n    with app.app_context():\n        # Set global session variables\n        r.set('endpoint', str(app.config['ENDPOINT']).encode('utf-8'))\n        r.set('post_query', str(app.config['POST_QUERY']).encode('utf-8'))\n        \n        # Initialize Global Libraries\n        redis_store.init_app(app)\n        db.init_app(app)\n\n        # Include our Routes\n        from . import routes\n\n        return app\n\n\nThe order of operations here is critical.\n\nBefore we do anything related to the app itself, we create instances of \nflask_sqlalchemy  and flask_redis. This will be initialized with our app once we\nactually have one created.\n\nThe first two lines of create_app()  should be no surprise: we're just creating\nour Flask app, and stating that it should be configured using a class called \nConfig  in a file named config.py.\n\napp = Flask(__name__, instance_relative_config=False)\napp.config.from_object('config.Config')\n\n\nMoving down the function comes the moment of truth: creating the app context. \nWhat happens in the app context stays in the app context... except for our sick\nnew Redis setup. By using the Redis .set()  method, we can assign key/value\npairs  for Redis hang on to, such as values from our app config which might be\nneeded elsewhere in our app: r.set('endpoint',\nstr(app.config['ENDPOINT']).encode('utf-8')).\n\nRedis stores information as bytes by default, thus attempting to pass values\nsuch as strings will result in the infamous `b'leading letter b'` phenomenon. Be\nsure to encode your values as utf-8 when using set(), and decode when using\nget().Making Redis Globally Available\nThe next part is important: we need to 'initialize' the services we want to use\nglobally (such as database access or Redis) by using init_app(). This must \nhappen inside the application context, with the parameter being app. This is our\nway of achieving singularity into inter-dimensional travel, thus breaking out of\nthe dreaded application context long after it dies.\n\nLet's Access Some Variables, Baby\nThe moment of truth: will this actually work? Or am I actually a filthy liar\nflooding the internet with more uselessly outdated Flask advice? Let's see:\n\n# routes.py\n\nfrom flask import current_app as app\nfrom flask import make_response\nimport json\nfrom . import models\nfrom . import r\n\nheaders = { 'Access-Control-Allow-Headers': 'Content-Type' }\n\n\n@app.route('/', methods=['GET', 'POST'])\ndef entry():\n    readers = models.Readers.query.filter_by(username='john').all()\n    print(readers)\n    print(r.get('uri').decode('utf-8'))\n    return make_response(str('readers'), 200, headers)\n\n\nEureka! This worthless entry-point prints two things: the value we assigned to\nour Redis block, and all records in our database of people named John:\n\n>> [<User john>]\n>> https://us1-hackersandslackers-543.cloudfunctions.net/link-endpoint?url=\n\n\nAs simple and stupid as it seems, developing an app to this point while\nunderstanding why it works  is a victory for any developer. I complain about\nthis nearly every post, but the fact of the matter is that the heroes who build\nmuch of today's technologies commonly fail to explain their own art in\nunderstandable terms. It's an understandable phenomenon resulting from isolated\nspurts of genius, perhaps, but it damages the growth of companies and humanity\nalike.\n\nSo I guess this is my calling: writing documentation for other people's\naccomplishments. \"Marginally less confusing than 4 open Stackoverflow tabs.\" \nThat's what I hope to have engraved on my gravestone.\n\nMerry Christmas.","html":"<p>A 'skill' that's always fascinated me is just how long some engineers can make it in their career while carrying glaringly obvious gaps in their knowledge of the systems they use every day. To my surprise, I've turned corners where I myself have been that engineer all along, and there's perhaps no better example of this then the time I've spent with Flask.</p><p><strong>WARNING! Highly opinionated statement incoming</strong>: Flask is everything a framework should be. That is to say, it <em>isn't really</em> a framework a fully-fledged framework at all. Sure, the term <em>microframework </em>might seem like a cute PR term, but that doesn't negate the fact that there's something about Flask that's different. When I write apps in <strong>Flask,</strong> I feel as though I'm writing apps in <strong>Python.</strong> On the other hand, when I write apps in <strong>Django,</strong> I feel like I'm just writing apps in <strong>Django.</strong> A disciplined programmer might feel that overly structured frameworks damper creativity and they're probably right: these are the backbones of businesses, thus it makes sense to keep people from deviating from the norm. </p><p>The upside of Flask is also its downside: there's nearly an infinite number of ways to solve a single problem. Every Stackoverflow regular has their own preference, and sometimes, just none of them seem... <em>right. </em>The problem is compounded by some of the phrasing coming from Flask's documentation itself. Flask touts the importance of structuring apps with factories and Blueprints, while simultaneously expressing the power behind the <strong><em>application context.</em></strong> What you'll notice over time is that in Flask's own examples, these two 'very important things' never both appear at the same time: that's because they're simply <em>incompatible with one another.</em> This is a highly understated contradiction of philosophies.</p><h2 id=\"communication-breakdown\">Communication Breakdown?</h2><p>Here's <a href=\"http://flask.pocoo.org/docs/1.0/patterns/appfactories/\">Flask's take on Application factories</a>:</p><blockquote>\n<p>If you are already using packages and blueprints for your application (Modular Applications with Blueprints) there are a couple of really nice ways to further improve the experience. A common pattern is creating the application object when the blueprint is imported.</p>\n</blockquote>\n<p>And here's their <a href=\"http://flask.pocoo.org/docs/1.0/appcontext/\">description of the Application context</a>:</p><blockquote>\n<p>The application context keeps track of the application-level data during a request, CLI command, or other activity. Rather than passing the application around to each function, the current_app and g proxies are accessed instead.</p>\n</blockquote>\n<p>Considering <code>g</code> is intended to stand for \"global\" it seems safe from the previous statements that setting attributes of <code>g</code> can be accessed globally within an application... but they can't. This is where we backpedal and get into messy territory:</p><blockquote>\n<p>However, importing the app instance within the modules in your project is prone to circular import issues. When using the app factory pattern or writing reusable blueprints or extensions there won’t be an app instance to import at all.</p>\n<p>Flask solves this issue with the application context. Rather than referring to an app directly, you use the the <strong>current_app</strong> proxy, which points to the application handling the current activity.</p>\n</blockquote>\n<p>Okay, fine. So if I instantiate an application factory with <code>app.app_context():</code> (which is the only sensible way to create a factory at all)  I should be able to register blueprints within that context, and reference the app context, correct?</p><p>I could be crazy but this <em>never seems to work</em> within blueprints. Whether they exist as peer modules or submodules, the words 'from application import current_app as app' always seems to result in the same \"missing application context\" error. Conveniently it seems, all working examples of the application context seem to be when the Flask developers opt to serve single-file app examples. This <a href=\"https://stackoverflow.com/questions/50233118/access-to-flask-global-variables-in-blueprint-apps\">stranger from Stackoverflow</a> clears things up a bit:</p><blockquote>\n<p>This happens because the data are lost when the context (with app.app_context()) ends (doc).<br>\nInside the context, everything is ok :</p>\n<pre><code class=\"language-python\">from flask import Flask, g\napp = Flask(__name__)\nwith app.app_context():\n   g.my_db = 'database ok'\n   print(g.my_db)\n\nthis prints 'database ok'\n</code></pre>\n<p>But outside, you cannot access the attribute:</p>\n<pre><code class=\"language-python\">from flask import Flask, g\napp = Flask(__name__)\nwith app.app_context():\n   g.my_db = 'database ok'\n\nprint(g.my_db)\n</code></pre>\n<p>this throws RuntimeError: Working outside of application context</p>\n<p>even if you create a new context:</p>\n<pre><code class=\"language-python\">from flask import Flask, g\napp = Flask(__name__)\nwith app.app_context():\n   g.my_db = 'database ok'\n\nwith app.app_context():\n   print(g.my_db)\n</code></pre>\n<p>this throws AttributeError: '_AppCtxGlobals' object has no attribute 'my_db'</p>\n</blockquote>\n<p>Alas, here I am. Doomed writing posts to fill in the blanks of documentation left behind by others. </p><h2 id=\"flask-sessions-the-real-slim-shady\">Flask Sessions: The REAL Slim Shady</h2><p><code>Flask-Session</code> is the MVP when it comes sharing temporary information across modularized parts of our program. In fact, it's a bit odd this isn't encouraged more-so than <code>g</code>. But whatever. We're here to heal.</p><p><strong>Sessions</strong> can handled in a number of different ways besides cookies. Take a look at the choices we have for storing session-based values in an instance of Flask:</p><style>\n    tr td:first-child{\n    text-align: left;\n    text-align: top;\n    }\n    \n    tr td:first-child {\n    text-align: left;\n    text-align: top;\n    font-weight: 500;\n    background: #646c82 !important;\n    color: white;\n    border-bottom: 1px solid #747d92;\n    max-width: 70px;\n}\n    \n    table td {\n        font-size:.9em;\n    }\n    \n    td {\n       text-align: left;\n        font-size:.9em;\n        \n    }\n   \n    \n    tr td:nth-of-type(2){\n        font-weight: 100;\n            padding: 20px;\n    }\n    @media (max-width: 800px) {\n        \n        tr td {\n    \t\tpadding: 10px 0;\n        }\n        \n        tbody {\n            margin-left: 0 !important;\n        }\n        \n      tr td:first-child {\n       width: 100%;\n       white-space: nowrap;\n    padding: 10px 0 !important;\n    text-overflow: ellipsis;\n          max-width: none;\n    }\n        \n        tr:first-child td{\n       \t    min-width: 300px;\n            max-width: -webkit-fill-available !important;\n        }\n        \n        th {\n            \n        }\n        \n        tr {\n            padding: 0px !important;\n            overflow-x: hidden;\n        }\n        \n        td {\n            line-height:1.5;\n        }\n        \n        td:nth-of-type(2) {\n            width: 100%;\n            padding: 20px !important;\n        }\n        \n        tr td:nth-of-type(2){\n        font-weight: 100;\n        padding: 15px !important;\n    \t}\n    }\n    \n        \n</style>\n\n<div class=\"tableContainer\">\n  <table>\n  <tbody valign=\"top\">\n    <tr class=\"row-odd\">\n      <td><span class=\"pre\">SESSION_TYPE</span></td>\n      <td>\n        <p class=\"first\">Specifies which type of session interface to\n          use. Built-in session types:</p>\n        <ul class=\"last simple\">\n          <li><strong>null</strong>: NullSessionInterface (default)</li>\n          <li><strong>redis</strong>: RedisSessionInterface</li>\n          <li><strong>memcached</strong>: MemcachedSessionInterface</li>\n          <li><strong>filesystem</strong>: FileSystemSessionInterface</li>\n          <li><strong>mongodb</strong>: MongoDBSessionInterface</li>\n          <li><strong>sqlalchemy</strong>: SqlAlchemySessionInterface</li>\n        </ul>\n      </td>\n    </tr>\n    <tr class=\"row-even\">\n      <td><span class=\"pre\">SESSION_PERMANENT</span></td>\n      <td>Whether use permanent session or not, default\n        to be <span class=\"pre\">True</span></td>\n    </tr>\n    <tr class=\"row-odd\">\n      <td><span class=\"pre\">SESSION_USE_SIGNER</span></td>\n      <td>Whether sign the session cookie sid or not,\n        if set to <span class=\"pre\">True</span>, you have to set\n        <a class=\"reference external\" href=\"http://flask.pocoo.org/docs/api/#flask.Flask.secret_key\" title=\"(in Flask v0.12-dev)\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">flask.Flask.secret_key</span></tt></a>, default to be\n        <span class=\"pre\">False</span></td>\n    </tr>\n    <tr class=\"row-even\">\n      <td><span class=\"pre\">SESSION_KEY_PREFIX</span></td>\n      <td>A prefix that is added before all session keys.\n        This makes it possible to use the same backend\n        storage server for different apps, default\n        “session:”</td>\n    </tr>\n    <tr class=\"row-odd\">\n      <td><span class=\"pre\">SESSION_REDIS</span></td>\n      <td>A <span class=\"pre\">redis.Redis</span> instance, default connect to\n        <span class=\"pre\">127.0.0.1:6379</span></td>\n    </tr>\n    <tr class=\"row-even\">\n      <td><span class=\"pre\">SESSION_MEMCACHED</span></td>\n      <td>A <span class=\"pre\">memcache.Client</span> instance, default connect\n        to <span class=\"pre\">127.0.0.1:11211</span></td>\n    </tr>\n    <tr class=\"row-odd\">\n      <td><span class=\"pre\">SESSION_FILE_DIR</span></td>\n      <td>The directory where session files are stored.\n        Default to use <cite>flask_session</cite> directory under\n        current working directory.</td>\n    </tr>\n    <tr class=\"row-even\">\n      <td><span class=\"pre\">SESSION_FILE_THRESHOLD</span></td>\n      <td>The maximum number of items the session stores\n        before it starts deleting some, default 500</td>\n    </tr>\n    <tr class=\"row-odd\">\n      <td><span class=\"pre\">SESSION_FILE_MODE</span></td>\n      <td>The file mode wanted for the session files,\n        default 0600</td>\n    </tr>\n    <tr class=\"row-even\">\n      <td><span class=\"pre\">SESSION_MONGODB</span></td>\n      <td>A <span class=\"pre\">pymongo.MongoClient</span> instance, default\n        connect to <span class=\"pre\">127.0.0.1:27017</span></td>\n    </tr>\n    <tr class=\"row-odd\">\n      <td><span class=\"pre\">SESSION_MONGODB_DB</span></td>\n      <td>The MongoDB database you want to use, default\n        “flask_session”</td>\n    </tr>\n    <tr class=\"row-even\">\n      <td><span class=\"pre\">SESSION_MONGODB_COLLECT</span></td>\n      <td>The MongoDB collection you want to use, default\n        “sessions”</td>\n    </tr>\n    <tr class=\"row-odd\">\n      <td><span class=\"pre\">SESSION_SQLALCHEMY</span></td>\n      <td>A <span class=\"pre\">flask.ext.sqlalchemy.SQLAlchemy</span> instance\n        whose database connection URI is configured\n        using the <span class=\"pre\">SQLALCHEMY_DATABASE_URI</span> parameter</td>\n    </tr>\n    <tr class=\"row-even\">\n      <td><span class=\"pre\">SESSION_SQLALCHEMY_TABLE</span></td>\n      <td>The name of the SQL table you want to use,\n        default “sessions”</td>\n    </tr>\n  </tbody>\n    </table>\n</div>\n<h3 id=\"using-redis-for-cached-session-information\">Using Redis For Cached Session Information</h3><p>For the sake of trying something different, I've opted to pick up a tiny Redis instance from <a href=\"https://redislabs.com/\"><strong>redislabs</strong></a>. I can't help myself but wasting money on new services to play with; after all, check out how cool this little red box looks:</p>\n<!-- Strengths -->\n<div id=\"unique\">\n  <!-- Headline -->\n  <h2>Redis Enterprise: A Unique Primary Database</h2>\n  <div class=\"item-scale item hidden\">\n    <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/ico-front-performance-reverse.svg\">\n    <h3>Perfomance at Scale</h3>\n    <ul>\n      <li>50M ops/sec,\n        <1ms 26=\"\" latency,=\"\" with=\"\" only=\"\" cloud=\"\" instances<=\"\" li=\"\"> <li>Symmetric shared–nothing architecture ensures no performance overheads while scaling, auto-sharding and re-balancing</li>\n      <li>Enhanced connection management, pipeline execution and request scheduling</li>\n    </1ms></li></ul>\n  </div>\n  <div class=\"item-search item hidden\">\n    <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/ico-front-search-reverse.svg\">\n    <h3>Built-in high performance search</h3>\n    <ul>\n      <li>High performance, real-time indexing with items available for search within 1ms</li>\n      <li>Predictable high performance querying while maintaining concurrent loads of indexing and querying</li>\n      <li>Highly scalable across multiple nodes to billions of items per second </li>\n    </ul>\n  </div>\n  <div class=\"item-fail item hidden\">\n    <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/ico-front-fail-reverse.svg\" class=\"popup-image\">\n    <h3>Failsafe high availability</h3>\n    <ul>\n      <li>Cross-rack/zone/datacenter/geo replication</li>\n      <li>Instant auto-failover in single digit second</li>\n      <li>Zero impact on throughput and latency during cluster operations such as scaling, upgrades, re-sharding and rebalancing</li>\n      <li>Out-of-the box support for backup, restore and DR</li>\n    </ul>\n  </div>\n  <div class=\"item-geo item hidden\">\n    <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/ico-front-geo-reverse.svg\" class=\"popup-image\">\n    <h3>Active-active geo distribution</h3>\n    <ul>\n      <li>Reads/Writes in multiple geo regions to the same dataset</li>\n      <li>Local latencies, global availability</li>\n      <li>Built-in conflict resolution for simple and complex data types</li>\n      <li>Based on revolutionary CRDT academic research</li>\n    </ul>\n  </div>\n  <div class=\"item-persist item hidden\">\n    <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/ico-front-persist-reverse.svg\" class=\"popup-image\">\n    <h3>Built-in persistence</h3>\n    <ul>\n      <li>Enhanced storage engine for parallel access to any persistent storage</li>\n      <li>Multiple options for enhanced data persistence</li>\n      <li>Reliable persistence configurations on both master and slave shards with zero performance impact</li>\n    </ul>\n  </div>\n  <div class=\"item-multi item hidden\">\n    <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/ico-front-multi-reverse.svg\" class=\"popup-image\">\n    <h3>Multi-model</h3>\n    <ul>\n      <li>Graph, JSON, Machine Learning and Bloom filter modules set industry standards for high performance</li>\n      <li>Multi-shard coordination</li>\n      <li>Extensibility with custom modules</li>\n    </ul>\n  </div>\n  <div class=\"item-tiered item hidden\">\n    <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/ico-front-tiered-reverse.svg\" class=\"popup-image\">\n    <h3>Intelligent tiered access to memory</h3>\n    <ul>\n      <li>Up to 80% lower infrastructure costs by running Redis on Flash</li>\n      <li>Automatic management of data tiering between RAM &amp; Flash with no code changes</li>\n      <li>Supports all new persistent memory technologies</li>\n    </ul>\n  </div>\n  <div class=\"item-deploy item hidden\">\n    <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/ico-front-deploy-reverse.svg\" class=\"popup-image\">\n    <h3>Flexible deployment options</h3>\n    <ul>\n      <li>Hybrid clusters can span on-prem infrastructure and multiple clouds</li>\n      <li>Most efficient use of resources with maximized core usage, multi-tenancy, re-sharding and re-balancing to avoid noisy neighbors in every environment</li>\n    </ul>\n  </div>\n  <!-- Categories -->\n  <!-- Desktop Grid -->\n  <div class=\"strengths\">\n    <!-- Grid - Row -->\n\n    <div class=\"main-flex\">\n      <div class=\"columns medium-4 left parent\">\n        <div class=\"columns feature item-fast scale\">\n          <div class=\"img\">\n          </div>\n          <div class=\"text\">\n            Perfomance at Scale\n          </div>\n        </div>\n\n        <div class=\"columns feature item-durable persistence\">\n          <div class=\"img\">\n          </div>\n          <div class=\"text\">\n            Built-in persistence\n          </div>\n        </div>\n\n        <div class=\"columns feature item-durable failsafe\">\n          <div class=\"img\">\n          </div>\n          <div class=\"text\">\n            Failsafe high availability\n          </div>\n        </div>\n\n        <div class=\"columns feature item-durable geo\">\n          <div class=\"img\">\n          </div>\n          <div class=\"text\">\n            Active-active geo distribution\n          </div>\n        </div>\n\n      </div>\n      <div class=\"columns medium-4 center parent\">\n        <div class=\"redis red-strengths\">\n          <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/redis-e-logo.svg\" alt=\"Redis Labs\">\n        </div>\n      </div>\n      <div class=\"columns medium-4 right parent\">\n        <div class=\"columns feature right item-fast search\">\n          <div class=\"img\">\n          </div>\n          <div class=\"text\">\n            Built-in high performance search\n          </div>\n        </div>\n\n        <div class=\"columns feature item-flex multi\">\n          <div class=\"img\">\n          </div>\n          <div class=\"text\">\n            Multi-model\n          </div>\n        </div>\n\n        <div class=\"columns feature item-flex vert tiered\">\n          <div class=\"img\">\n          </div>\n          <div class=\"text\">\n            Intelligent tiered access to memory\n            <br>(RAM and Flash)\n          </div>\n        </div>\n\n        <div class=\"columns feature item-flex vert deploy\">\n          <div class=\"img\">\n          </div>\n          <div class=\"text\">\n            Flexible deployment options\n            <br>(cloud, on-prem, hybrid)\n          </div>\n        </div>\n\n\n      </div>\n\n    </div>\n\n    <!-- Grid - Redis Logo-->\n\n  </div>\n  <!-- End Desktop Grid -->\n\n\n\n  <div class=\"grid-container mobile-grid\">\n    <div class=\"redis-mobile red-strengths\">\n      <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/redis-e-logo.svg\" alt=\"Redis Labs\">\n    </div>\n    <!-- Column 1 -->\n    <div class=\"mobile-flex\">\n      <div class=\"columns small-12 medium-4\">\n        <h3>Fast</h3>\n        <div class=\"columns\">\n          <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/ico-front-performance.svg\">\n          <span class=\"text short\">\n            Performance at scale\n          </span>\n        </div>\n        <div class=\"columns\">\n          <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/ico-front-search.svg\">\n          <span class=\"text med\">\n            Built-in high performance search\n          </span>\n        </div>\n      </div>\n      <!-- End Column 1 -->\n      <!-- Column 2 -->\n      <div class=\"columns small-12 medium-4\">\n        <h3>Reliable</h3>\n        <div class=\"columns\">\n          <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/ico-front-persist.svg\">\n          <span class=\"text short\">\n            Built-in persistence\n          </span>\n        </div>\n        <div class=\"columns\">\n          <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/ico-front-fail.svg\">\n          <span class=\"text short med\">\n            Failsafe high availability\n          </span>\n        </div>\n        <div class=\"columns\">\n          <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/ico-front-geo.svg\">\n          <span class=\"text med\">\n            Active-active geo distribution\n          </span>\n        </div>\n      </div>\n      <!-- End Column 2 -->\n      <!-- Column 3 -->\n      <div class=\"columns small-12 medium-4\">\n        <h3>Flexible</h3>\n        <div class=\"columns\">\n          <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/ico-front-multi.svg\">\n          <span class=\"text short\">\n            Multi-model\n          </span>\n        </div>\n        <div class=\"columns\">\n          <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/ico-front-deploy.svg\">\n          <span class=\"text long\">\n            Flexible deployment options <span class=\"small\">(cloud, hybrid, on-prem)</span>\n          </span>\n        </div>\n        <div class=\"columns\">\n          <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/ico-front-tiered.svg\">\n          <span class=\"text long\">\n            Intelligent tiered access to memory <span class=\"small\">(ram and flash)</span>\n          </span>\n        </div>\n      </div>\n    </div>\n    <!-- End Column 3 -->\n  </div>\n</div>\n<span style=\"color: #969696;\n    text-align: center;\n    display: block;\n    font-weight: 100;\n    font-style: italic;\n    margin-bottom: 30px;\n    font-size: .9em;\">(Why am I not getting paid for this? Why did I take the time to even make that module?)</span><p><strong>Redis</strong> is NoSQL datastore written in C intended to temporarily hold data in memory for users as they blaze mindlessly through your site. Other use cases include serving as the foundation for real-time chat apps via the publish/subscribe messaging paradigm; popular amongst stupid chat or dating apps slowly destroying our abilities as human beings to interact face-to-face. Powerful stuff.</p><h2 id=\"structuring-init-py-correctly\">Structuring <strong>init</strong>.py Correctly</h2><p>Consider this to be the guide to Flask Application factories I wish I had months ago. A healthy application factory should:</p><ul><li>Derive all app configuration values from a class or environment variables.</li><li>Allow Database interactions to occur at any point within the app.</li><li>Pass values globally outside of the application context.</li></ul><p>This does all of those things:</p><pre><code class=\"language-python\">from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_session import Session\nfrom flask_redis import FlaskRedis\n\n# Globally accessible libraries\ndb = SQLAlchemy()\nr = FlaskRedis()\n\n\ndef create_app():\n    &quot;&quot;&quot;Initialize the core application.&quot;&quot;&quot;\n    app = Flask(__name__, instance_relative_config=False)\n    app.config.from_object('config.Config')\n\n    with app.app_context():\n        # Set global session variables\n        r.set('endpoint', str(app.config['ENDPOINT']).encode('utf-8'))\n        r.set('post_query', str(app.config['POST_QUERY']).encode('utf-8'))\n        \n        # Initialize Global Libraries\n        redis_store.init_app(app)\n        db.init_app(app)\n\n        # Include our Routes\n        from . import routes\n\n        return app\n</code></pre>\n<p>The order of operations here is critical.</p><p>Before we do anything related to the app itself, we create instances of <code>flask_sqlalchemy</code> and <code>flask_redis</code>. This will be initialized with our app once we actually have one created.</p><p>The first two lines of <code>create_app()</code> should be no surprise: we're just creating our Flask app, and stating that it should be configured using a class called <strong>Config</strong> in a file named <strong>config.py.</strong></p><pre><code class=\"language-python\">app = Flask(__name__, instance_relative_config=False)\napp.config.from_object('config.Config')\n</code></pre>\n<p>Moving down the function comes the moment of truth: <strong>creating the app context.</strong> What happens in the app context stays in the app context... except for our sick new Redis setup. By using the Redis <code>.set()</code> method, we can assign <em>key/value pairs</em> for Redis hang on to, such as values from our app config which might be needed elsewhere in our app: <code>r.set('endpoint', str(app.config['ENDPOINT']).encode('utf-8'))</code>.</p><div class=\"protip\">\n    Redis stores information as bytes by default, thus attempting to pass values such as strings will result in the infamous `b'leading letter b'` phenomenon. Be sure to encode your values as utf-8 when using set(), and decode when using get().\n</div><h3 id=\"making-redis-globally-available\">Making Redis Globally Available</h3><p>The next part is important: we need to 'initialize' the services we want to use globally (such as database access or Redis) by using <code>init_app()</code>. This <em>must </em>happen inside the application context, with the parameter being <code>app</code>. This is our way of achieving singularity into inter-dimensional travel, thus breaking out of the dreaded application context long after it dies.</p><h2 id=\"let-s-access-some-variables-baby\">Let's Access Some Variables, Baby</h2><p>The moment of truth: will this actually work? Or am I actually a filthy liar flooding the internet with more uselessly outdated Flask advice? Let's see:</p><pre><code class=\"language-python\"># routes.py\n\nfrom flask import current_app as app\nfrom flask import make_response\nimport json\nfrom . import models\nfrom . import r\n\nheaders = { 'Access-Control-Allow-Headers': 'Content-Type' }\n\n\n@app.route('/', methods=['GET', 'POST'])\ndef entry():\n    readers = models.Readers.query.filter_by(username='john').all()\n    print(readers)\n    print(r.get('uri').decode('utf-8'))\n    return make_response(str('readers'), 200, headers)\n</code></pre>\n<p>Eureka! This worthless entry-point prints two things: the value we assigned to our Redis block, and all records in our database of people named John:</p><pre><code class=\"language-bash\">&gt;&gt; [&lt;User john&gt;]\n&gt;&gt; https://us1-hackersandslackers-543.cloudfunctions.net/link-endpoint?url=\n</code></pre>\n<p>As simple and stupid as it seems, developing an app to this point <em>while understanding why it works</em> is a victory for any developer. I complain about this nearly every post, but the fact of the matter is that the heroes who build much of today's technologies commonly fail to explain their own art in understandable terms. It's an understandable phenomenon resulting from isolated spurts of genius, perhaps, but it damages the growth of companies and humanity alike.</p><p>So I guess this is my calling: writing documentation for other people's accomplishments. <strong>\"Marginally less confusing than 4 open Stackoverflow tabs.\"</strong> That's what I hope to have engraved on my gravestone.</p><p>Merry Christmas.</p>","url":"https://hackersandslackers.com/demystifying-flasks-application-context/","uuid":"ede882df-a696-43ef-a392-9430d98a961e","page":false,"codeinjection_foot":"<script type=\"text/javascript\" async=\"\" src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/autoNumeric.min.js\"></script>\n\n<script type=\"text/javascript\" async=\"\" src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/underscore-min.js\"></script>\n\n<script type=\"text/javascript\" async=\"\" src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/mustache.min.js\"></script>\n\n<script type=\"text/javascript\" async=\"\" src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/owl.js\"></script>\n\n<script type=\"text/javascript\" async=\"\" src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/jquery.counterup.min.js\"></script>\n\n\n<script type=\"text/javascript\" async=\"\" src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/foundation.js\"></script>\n<script type=\"text/javascript\" async=\"\" src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/docker.js\"></script>\n<script type=\"text/javascript\" async=\"\" src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/jquery.fancybox.pack.js\"></script>\n<script type=\"text/javascript\" async=\"\" src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/scripts.js\"></script>","codeinjection_head":"<link rel=\"stylesheet\" href=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/redislast2.css\">","comment_id":"5c192cdba632c8240cad3869"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867374d","title":"Lynx Roundup, December 19th","slug":"lynx-roundup-december-19th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/79-6@2x.jpg","excerpt":"Papers with code!  Neural networks designing pies!  Cool tech & politics podcast!","custom_excerpt":"Papers with code!  Neural networks designing pies!  Cool tech & politics podcast!","created_at_pretty":"10 December, 2018","published_at_pretty":"19 December, 2018","updated_at_pretty":"20 December, 2018","created_at":"2018-12-10T00:55:06.000-05:00","published_at":"2018-12-19T07:00:00.000-05:00","updated_at":"2018-12-20T13:18:49.000-05:00","meta_title":"Lynx Roundup, December 19th | Hackers and Slackers","meta_description":"Papers with code!  Neural networks designing pies!  Cool tech & politics podcast!","og_description":"Papers with code!  Neural networks designing pies!  Cool tech & politics podcast!","og_image":"https://hackersandslackers.com/content/images/lynx/79-6@2x.jpg","og_title":"Lynx Roundup, December 19th","twitter_description":"Papers with code!  Neural networks designing pies!  Cool tech & politics podcast!","twitter_image":"https://hackersandslackers.com/content/images/lynx/79-6@2x.jpg","twitter_title":"Lynx Roundup, December 19th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://hackaday.com/2018/11/22/neural-network-pies-that-might-be-worth-a-try/\n\nhttps://dev.to/deciduously/reactive-canvas-with-clojurescript-and-vue-4nj\n\nhttps://elearningindustry.com/educational-data-analytics-technologies\n\nhttps://www.sharelatex.com/\n\nhttps://paperswithcode.com/\n\nhttps://www.engadget.com/2018/11/26/amazon-opens-internal-machine-learning-training/\n\nhttp://generalintellectunit.net/","html":"<p></p><p><a href=\"https://hackaday.com/2018/11/22/neural-network-pies-that-might-be-worth-a-try/\">https://hackaday.com/2018/11/22/neural-network-pies-that-might-be-worth-a-try/</a></p><p><a href=\"https://dev.to/deciduously/reactive-canvas-with-clojurescript-and-vue-4nj\">https://dev.to/deciduously/reactive-canvas-with-clojurescript-and-vue-4nj</a></p><p><a href=\"https://elearningindustry.com/educational-data-analytics-technologies\">https://elearningindustry.com/educational-data-analytics-technologies</a></p><p><a href=\"https://www.sharelatex.com/\">https://www.sharelatex.com/</a></p><p><a href=\"https://paperswithcode.com/\">https://paperswithcode.com/</a></p><p><a href=\"https://www.engadget.com/2018/11/26/amazon-opens-internal-machine-learning-training/\">https://www.engadget.com/2018/11/26/amazon-opens-internal-machine-learning-training/</a></p><p><a href=\"http://generalintellectunit.net/\">http://generalintellectunit.net/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-december-19th/","uuid":"198025e4-559f-43f6-89ef-428d1f9eec46","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5c0dffba1556321bd84c3388"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673756","title":"Geocoding Raw Datasets for Mapbox","slug":"preparing-data-for-mapbox-geocoding","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/12/mapbox2_o-2@2x.jpg","excerpt":"Make sense of unstructured data with enough precision to put it on a map.","custom_excerpt":"Make sense of unstructured data with enough precision to put it on a map.","created_at_pretty":"10 December, 2018","published_at_pretty":"18 December, 2018","updated_at_pretty":"02 April, 2019","created_at":"2018-12-10T17:16:29.000-05:00","published_at":"2018-12-18T08:00:00.000-05:00","updated_at":"2019-04-01T20:27:23.000-04:00","meta_title":"Geocoding Raw Datasets for Mapbpox | Hackers and Slackers","meta_description":"Make sense of unstructured data with enough precision to put it on a map.","og_description":"Make sense of unstructured data with enough precision to put it on a map.","og_image":"https://hackersandslackers.com/content/images/2018/12/mapbox2_o-2@2x.jpg","og_title":"Geocoding Raw Datasets for Mapbpox | Hackers and Slackers","twitter_description":"Make sense of unstructured data with enough precision to put it on a map.","twitter_image":"https://hackersandslackers.com/content/images/2018/12/mapbox2_o-2@2x.jpg","twitter_title":"Geocoding Raw Datasets for Mapbpox | Hackers and Slackers","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Data Vis","slug":"datavis","description":"Visualize your data with charting tools like Matplotlib, Plotly, D3, Chart.js, Muze, Seaborn, and countless others. Primarily focused on programmatic visualization as opposed to Business Intelligence software.","feature_image":null,"meta_description":"Visualize your data with charting tools like Matplotlib, Plotly, D3, Chart.js, Muze, Seaborn, and countless others. Focused on programmatic visualization.","meta_title":"Data Visualization | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Data Vis","slug":"datavis","description":"Visualize your data with charting tools like Matplotlib, Plotly, D3, Chart.js, Muze, Seaborn, and countless others. Primarily focused on programmatic visualization as opposed to Business Intelligence software.","feature_image":null,"meta_description":"Visualize your data with charting tools like Matplotlib, Plotly, D3, Chart.js, Muze, Seaborn, and countless others. Focused on programmatic visualization.","meta_title":"Data Visualization | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Data Analysis","slug":"data-analysis","description":"Drawing meaningful conclusions from data. Includes interpretation, dashboard creation, and data manipulation.","feature_image":null,"meta_description":"Drawing meaningful conclusions from data. Includes interpretation, dashboard creation, and data manipulation.","meta_title":"Data Analysis | Hackers and Slackers","visibility":"public"},{"name":"#Mapping Data with Mapbox","slug":"mapping-data-with-mapbox","description":"A full exploration into Mapbox: the sweetheart of geovisualization amongst data scientists. Learn the core product or see why the API rivals Google Maps.","feature_image":"https://hackersandslackers.com/content/images/2019/03/mapbox.jpg","meta_description":"A full exploration into Mapbox: the sweetheart of geovisualization amongst data scientists. Learn the core product or see why the API rivals Google Maps.","meta_title":"Mapping Data with Mapbox","visibility":"internal"}],"plaintext":"This wouldn't be a proper data blog unless we spend a vast majority of our time\ntalking about cleaning data. Chances are if you're pursuing analysis that's\ngroundbreaking (or worthwhile), we're probably starting with some ugly, untapped\ninformation. It turns out Mapbox has an API specifically for this purpose: the \nMapbox Geocoding API [https://www.mapbox.com/api-documentation/#geocoding].\n\nGeocoding  is a blanket term for turning vague information into specific\nLat/Long coordinates. How vague, you ask? The API covers:\n\n * Pinpointing exact location via street address.\n * Locating regions or cities by recognizable name (ie: Rio de Janeiro).\n * Locating cities by highly unspecific name (Geocoding for \"Springfield\" will\n   return results for 41 American cities)\n * Locating cities or venues by name within a given region (such as searching\n   for Ray's Pizza in NYC).\n\nWe can also use Geocoding to do the reverse of this, where passing in\ncoordinates will return location names. If you find this useful, I'm assuming\nyou're a spy.\n\nChipping Away at a Real Use Case\nIn a real-life example, I have two sets of data: one represents general places\nof residence for a particular sample group. The goal is to see how they interact\nwith the second dataset: a list of locations they will be traveling to. I'd love\nto go into more detail, but:\n\nI get one cliche meme per year.So how can we use the Mapbox Geocoding API to\nsystematically extract coordinates for thousands of addresses, from multiple\ndatasets? With Pandas, of course!\n\nI'm Just Happy to be Writing About Pandas Right Now\nPardon my excitement; I've been far overdue for posting anything Pandas-related.\nIt's been killing me on the inside.\n\nWe need to make sense of some vague data. As seen in our Citibike example\n[https://hackersandslackers.com/map-data-visualization-with-mapbox/], New York\nhas plenty of public datasets with information like Taxi pickup/dropoffs, public\ntransit, etc. These start and end points are typically too fluid to have\nLat/Long coordinates associated with them, so we'll add them in ourselves. Given\nthat we're about to pass hundreds or thousands of addresses and locations, we'll\nuse Pandas .apply()  to fill out the missing Lat/Long columns in our dataset. \n\nInstead of using Mapbox's Python SDK, I'll actually be using requests  to hit\nthe Mapbox REST API. For some reason, the Python SDK was a bit unpredictable on\nmy last run.*\n\n*UPDATE: the Python SDK \"wasn't working\" because I apparently don't know the\ndifference between longitude and latitude. Awesome, so I'm a moron.\n\nimport sys\nimport os\nimport pandas as pd\nimport requests\nimport json\n\n\nclass GeocodeAddresses:\n    \"\"\"Add missing lat/long information to exisiting dataset.\"\"\"\n\n    def __init__(self, address_data):\n        self.data = address_data\n        self.address_df = pd.read_csv(self.data)\n        self.complete_data = self.get_coords(self.address_df)\n\n\n    @classmethod\n    def get_coords(self, employee_address_df):\n        \"\"\"Fill Dataframe lat/long columns.\"\"\"\n\n        def fill_coords(row):\n            \"\"\"Create a route object by passing GeoJSON start/end objects.\"\"\"\n            base_url = 'https://api.mapbox.com/geocoding/v5/mapbox.places/'\n            address = str(row.home_address)\n            format = '.json'\n            endpoint = base_url + address + format\n            params = {\n                'access_token':  'pk.eyJ1IjNoYXJkd2VthisisreallolaXdyNHQ3OTUifQ.VTAUrmzD91Ppxr1AJww'\n            }\n            headers = {\n                'Content-Type': 'application/json'\n            }\n            r = requests.get(endpoint, params=params, headers=headers)\n            try:\n                Lat = r.json()['features'][0]['geometry']['coordinates'][0]\n                Long = r.json()['features'][0]['geometry']['coordinates'][1]\n                print(pd.Series([Lat, Long]))\n                return pd.Series([Lat, Long])\n            except IndexError:\n                pass\n\n        address_df[['Lat', 'Long']] = address_df.head(100).apply(fill_coords, axis=1)\n        address_df.to_csv('geocoded.csv')\n\n\nIn the above example, we're using .apply()  against an empty series (our\nLat/Long columns) as opposed to our entire Dataframe. When get_coords()  returns\ntwo values, these values will fill the empty columns on a per-row basis.\n\nFor the scope of this tutorial, we'll simply focus on getting these points\nplotted. Don't worry, this is only part 2 of our Mapbox series! Yes, an entire\nseries!\n\nTurning Your Datasets into Tilesets\nIn Mapbox terms, a Tileset  is essentially a layer of data we can overlay on top\nof our blank map. The map style  we created last time was really just the\naesthetic unpinning of all the interesting data we can pile on time.\n\nTilesets can be stacked on one another, thus giving us infinite possibilities of\nthe types of data we can communicate: especially when you consider that Mapbox\nsupports Heatmaps and topology - far more than just plotted points.\n\nFirst, we'll plot our origins. I've put together a dataset of completely\nfalsified names (with presumably real addresses?) to demonstrate how we'd plot\nthese points. Here's a sample of the garbage I'll be feeding into Mapbox:\n\naddressnamelonglat761 ST ANNS AVE NY NY 10451Royal Hiett40.754466-73.97945525\nCOLUMBUS CIR NY NY 10019Yolanda Antonio40.8201997-73.91103241145 LENOX RD NY NY\n11212Marguerita Autry40.7667595-73.98157042800 VICTORY BLVD NY NY 10314Alyse\nPeranio40.6597804-73.9183181750 LEXINGTON AVE NY NY 10022Sina Walberg40.6080557\n-74.153241829 BAY RIDGE AVE NY NY 11220Ignacia Frasher40.7625148-73.9685564550\nRIVERSIDE DR NY NY 10027Marta Haymond40.6386587-74.034633808 W END AVE NY NY\n10025Angie Tseng40.8159612-73.96031841-03 69 ST NY NY 11377Marcella Weinstock\n40.797233-73.971324550 PARK AVE NY NY 10016Filiberto Everett40.7444514\n-73.8956728739 BROOK AVE NY NY 10451Vernia Mcgregor40.7492656-73.9803386777 W\nEND AVE NY NY 10025Michelina Althoff40.8199675-73.9122757866 E 165 ST NY NY\n10459Dave Tauber40.7965956-73.9726135130 E 37 ST NY NY 10016Tandra Gowen\n40.8237011-73.8990202797 ST ANNS AVE NY NY 10451Toby Philbrick40.7482336\n-73.97856641 AARON LN NY NY 10309Aisha Grief40.82089-73.9109118641 LEXINGTON AVE\nNY NY 10022Tarah Sinkler40.5541368-74.21266534201 4 AVE NY NY 11232Coletta\nJeansonne40.7590297-73.97032191021 PARK AVE NY NY 10028Lorie Shriver40.650317\n-74.0081672127 RIVERSIDE DR NY NY 10024Antwan Fullilove40.7794132-73.95724755120\nBROADWAY NY NY 10034Normand Beerman40.7890613-73.98065697124 20 AVE NY NY 11204\nWes Nieman40.8714856-73.91303623506 BEDFORD AVE NY NY 11210Marlen Hutcherson\n40.6127972-73.9901551550 GRAND ST NY NY 10002Leonie Lablanc40.6168306-73.9501481\n1711 GROVE ST NY NY 11385Doris Herrman40.7143151-73.9800558785 W END AVE NY NY\n10025Cyndy Kossman40.7032053-73.91119426040 HUXLEY AVE NY NY 10471Donya Ponte\n40.796763-73.972483Head Over to Mapbox Studio\nWhile we can technically do everything programmatically, Mapbox's GUI is simply\ntoo easy to ignore. Using Mapbox Studio\n[https://www.mapbox.com/studio/datasets/], we can upload our data and turn it\ninto a tileset; the heart and soul of what makes our maps interesting. \n\nOnce you've uploaded your CSV (or JSON, or whatever) as a dataset, we can\nimmediately see what this information looks like on a map by previewing it as a\ntileset. Mapbox is surprisingly intelligent in that it can deduce lat/long\nvalues from poorly named or formatted columns (such as Lat/Long, \nLatitutde/Longitude, start_longitude_lol/start_latitude_lmao, etc). Mapbox gets\nit right most of the time.\n\nIf y'all went well you should see a cluster of points on a map - this is a\npreview of your Tileset. Think of this as a layer in Photoshop: we can stack\nthese layers of information atop one another continuously to make something\ngreater than the sum of its parts.\n\nIf all looks good, export your Tileset via the \"export\" button on the top right.\n\nUpload your dataset and click \"edit\"Switch Over to Your Map \"Style\"\nYou map 'style' is your blank canvas. Get in there and add a layer, and from\nthere select the Tileset you just created. Once your Tileset is loaded, you can\nstyle the points themselves and even label them with the data in your dataset as\nyou see fit:\n\nSo many colorful layers.Simply clicking around the preloaded Tilesets should\nstart giving you ideas of what's possible down the line. Just look at those\nhorrifically bright Miami Vice themed streets.\n\nFeel free to get creative with Mapbox's tools to clarify the visual story you're\ntrying to tell. I've distinguished points from others after adding a third data\nset: Every Starbucks in New York City.  Yes, those map pins have been replaced\nwith that terrifying Starbucks Logo Mermaid Sea-demon\n\nTake a look at that perfect grid of mocha frappa-whatevers and tell me these\nguys don't have a business strategy:\n\nGod that's an ugly map.For all it's worth, I'd like to sincerely apologize for\nblinding your eyes with classless use of gifs paired with the useless corporate\nmonstrosity of a map I've created. I have faith that you'll do better.\n\nNow that we've spent enough time covering the n00b stuff, it's time to take the\ngloves off. While Mapbox studio's GUI serves as an amazing crutch and way to\ncustomize the look of our data, we must not forget: we're programmers, God damn\nit! True magic lies in 1s and 0s, not WYSIWYG editors.\n\nUntil we start using Plot.ly Dash, that is.\n\n(Suddenly, thousands of fans erupt into a roaring cheer at the very mention of\nPlot.ly. It's about time.™)","html":"<p>This wouldn't be a proper data blog unless we spend a vast majority of our time talking about cleaning data. Chances are if you're pursuing analysis that's groundbreaking (or worthwhile), we're probably starting with some ugly, untapped information. It turns out Mapbox has an API specifically for this purpose: the <a href=\"https://www.mapbox.com/api-documentation/#geocoding\">Mapbox Geocoding API</a>.</p><p><strong>Geocoding</strong> is a blanket term for turning vague information into specific Lat/Long coordinates. How vague, you ask? The API covers:</p><ul><li>Pinpointing exact location via street address.</li><li>Locating regions or cities by recognizable name (ie: Rio de Janeiro).</li><li>Locating cities by highly unspecific name (Geocoding for \"Springfield\" will return results for 41 American cities)</li><li>Locating cities or venues by name within a given region (such as searching for Ray's Pizza in NYC).</li></ul><p>We can also use Geocoding to do the reverse of this, where passing in coordinates will return location names. If you find this useful, I'm assuming you're a spy.</p><h3 id=\"chipping-away-at-a-real-use-case\">Chipping Away at a Real Use Case</h3><p>In a real-life example, I have two sets of data: one represents general places of residence for a particular sample group. The goal is to see how they interact with the second dataset: a list of locations they will be traveling to. I'd love to go into more detail, but:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"http://res-1.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/tenor.gif\" class=\"kg-image\"><figcaption>I get one cliche meme per year.</figcaption></figure><!--kg-card-end: image--><p>So how can we use the Mapbox Geocoding API to systematically extract coordinates for thousands of addresses, from multiple datasets? With Pandas, of course!</p><h2 id=\"i-m-just-happy-to-be-writing-about-pandas-right-now\">I'm Just Happy to be Writing About Pandas Right Now</h2><p>Pardon my excitement; I've been far overdue for posting anything Pandas-related. It's been killing me on the inside.</p><p>We need to make sense of some vague data. As seen in <a href=\"https://hackersandslackers.com/map-data-visualization-with-mapbox/\">our Citibike example</a>, New York has plenty of public datasets with information like Taxi pickup/dropoffs, public transit, etc. These start and end points are typically too fluid to have Lat/Long coordinates associated with them, so we'll add them in ourselves. Given that we're about to pass hundreds or thousands of addresses and locations, we'll use Pandas <code>.apply()</code> to fill out the missing Lat/Long columns in our dataset. </p><p>Instead of using Mapbox's Python SDK, I'll actually be using <code>requests</code> to hit the Mapbox REST API. For some reason, the Python SDK was a bit unpredictable on my last run.<strong>*</strong></p><p><strong>*UPDATE: </strong>the Python SDK \"wasn't working\" because I apparently don't know the difference between longitude and latitude. Awesome, so I'm a moron.</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">import sys\nimport os\nimport pandas as pd\nimport requests\nimport json\n\n\nclass GeocodeAddresses:\n    &quot;&quot;&quot;Add missing lat/long information to exisiting dataset.&quot;&quot;&quot;\n\n    def __init__(self, address_data):\n        self.data = address_data\n        self.address_df = pd.read_csv(self.data)\n        self.complete_data = self.get_coords(self.address_df)\n\n\n    @classmethod\n    def get_coords(self, employee_address_df):\n        &quot;&quot;&quot;Fill Dataframe lat/long columns.&quot;&quot;&quot;\n\n        def fill_coords(row):\n            &quot;&quot;&quot;Create a route object by passing GeoJSON start/end objects.&quot;&quot;&quot;\n            base_url = 'https://api.mapbox.com/geocoding/v5/mapbox.places/'\n            address = str(row.home_address)\n            format = '.json'\n            endpoint = base_url + address + format\n            params = {\n                'access_token':  'pk.eyJ1IjNoYXJkd2VthisisreallolaXdyNHQ3OTUifQ.VTAUrmzD91Ppxr1AJww'\n            }\n            headers = {\n                'Content-Type': 'application/json'\n            }\n            r = requests.get(endpoint, params=params, headers=headers)\n            try:\n                Lat = r.json()['features'][0]['geometry']['coordinates'][0]\n                Long = r.json()['features'][0]['geometry']['coordinates'][1]\n                print(pd.Series([Lat, Long]))\n                return pd.Series([Lat, Long])\n            except IndexError:\n                pass\n\n        address_df[['Lat', 'Long']] = address_df.head(100).apply(fill_coords, axis=1)\n        address_df.to_csv('geocoded.csv')\n</code></pre>\n<!--kg-card-end: markdown--><p>In the above example, we're using <code>.apply()</code> against an empty series (our Lat/Long columns) as opposed to our entire Dataframe. When <code>get_coords()</code> returns two values, these values will fill the empty columns on a per-row basis.</p><p>For the scope of this tutorial, we'll simply focus on getting these points plotted. Don't worry, this is only part 2 of our Mapbox series! Yes, an entire series!</p><h2 id=\"turning-your-datasets-into-tilesets\">Turning Your Datasets into Tilesets</h2><p>In Mapbox terms, a <strong>Tileset</strong> is essentially a layer of data we can overlay on top of our blank map. The map <strong>style</strong> we created last time was really just the aesthetic unpinning of all the interesting data we can pile on time.</p><p>Tilesets can be stacked on one another, thus giving us infinite possibilities of the types of data we can communicate: especially when you consider that Mapbox supports Heatmaps and topology - far more than just plotted points.</p><p>First, we'll plot our origins. I've put together a dataset of completely falsified names (with presumably real addresses?) to demonstrate how we'd plot these points. Here's a sample of the garbage I'll be feeding into Mapbox:</p><!--kg-card-begin: html--><div class=\"tableContainer\">\n\t\t\t<table>\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>address</th>\n\t\t\t\t\t\t<th>name</th>\n\t\t\t\t\t\t<th>long</th>\n\t\t\t\t\t\t<th>lat</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>761 ST ANNS AVE NY NY 10451</td>\n\t\t\t\t\t\t<td>Royal Hiett</td>\n\t\t\t\t\t\t<td>40.754466</td>\n\t\t\t\t\t\t<td>-73.9794552</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>5 COLUMBUS CIR NY NY 10019</td>\n\t\t\t\t\t\t<td>Yolanda Antonio</td>\n\t\t\t\t\t\t<td>40.8201997</td>\n\t\t\t\t\t\t<td>-73.9110324</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>1145 LENOX RD NY NY 11212</td>\n\t\t\t\t\t\t<td>Marguerita Autry</td>\n\t\t\t\t\t\t<td>40.7667595</td>\n\t\t\t\t\t\t<td>-73.9815704</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>2800 VICTORY BLVD NY NY 10314</td>\n\t\t\t\t\t\t<td>Alyse Peranio</td>\n\t\t\t\t\t\t<td>40.6597804</td>\n\t\t\t\t\t\t<td>-73.9183181</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>750 LEXINGTON AVE NY NY 10022</td>\n\t\t\t\t\t\t<td>Sina Walberg</td>\n\t\t\t\t\t\t<td>40.6080557</td>\n\t\t\t\t\t\t<td>-74.1532418</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>29 BAY RIDGE AVE NY NY 11220</td>\n\t\t\t\t\t\t<td>Ignacia Frasher</td>\n\t\t\t\t\t\t<td>40.7625148</td>\n\t\t\t\t\t\t<td>-73.9685564</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>550 RIVERSIDE DR NY NY 10027</td>\n\t\t\t\t\t\t<td>Marta Haymond</td>\n\t\t\t\t\t\t<td>40.6386587</td>\n\t\t\t\t\t\t<td>-74.034633</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>808 W END AVE NY NY 10025</td>\n\t\t\t\t\t\t<td>Angie Tseng</td>\n\t\t\t\t\t\t<td>40.8159612</td>\n\t\t\t\t\t\t<td>-73.960318</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>41-03 69 ST NY NY 11377</td>\n\t\t\t\t\t\t<td>Marcella Weinstock</td>\n\t\t\t\t\t\t<td>40.797233</td>\n\t\t\t\t\t\t<td>-73.9713245</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>50 PARK AVE NY NY 10016</td>\n\t\t\t\t\t\t<td>Filiberto Everett</td>\n\t\t\t\t\t\t<td>40.7444514</td>\n\t\t\t\t\t\t<td>-73.8956728</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>739 BROOK AVE NY NY 10451</td>\n\t\t\t\t\t\t<td>Vernia Mcgregor</td>\n\t\t\t\t\t\t<td>40.7492656</td>\n\t\t\t\t\t\t<td>-73.9803386</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>777 W END AVE NY NY 10025</td>\n\t\t\t\t\t\t<td>Michelina Althoff</td>\n\t\t\t\t\t\t<td>40.8199675</td>\n\t\t\t\t\t\t<td>-73.9122757</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>866 E 165 ST NY NY 10459</td>\n\t\t\t\t\t\t<td>Dave Tauber</td>\n\t\t\t\t\t\t<td>40.7965956</td>\n\t\t\t\t\t\t<td>-73.9726135</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>130 E 37 ST NY NY 10016</td>\n\t\t\t\t\t\t<td>Tandra Gowen</td>\n\t\t\t\t\t\t<td>40.8237011</td>\n\t\t\t\t\t\t<td>-73.8990202</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>797 ST ANNS AVE NY NY 10451</td>\n\t\t\t\t\t\t<td>Toby Philbrick</td>\n\t\t\t\t\t\t<td>40.7482336</td>\n\t\t\t\t\t\t<td>-73.978566</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>41 AARON LN NY NY 10309</td>\n\t\t\t\t\t\t<td>Aisha Grief</td>\n\t\t\t\t\t\t<td>40.82089</td>\n\t\t\t\t\t\t<td>-73.9109118</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>641 LEXINGTON AVE NY NY 10022</td>\n\t\t\t\t\t\t<td>Tarah Sinkler</td>\n\t\t\t\t\t\t<td>40.5541368</td>\n\t\t\t\t\t\t<td>-74.2126653</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>4201 4 AVE NY NY 11232</td>\n\t\t\t\t\t\t<td>Coletta Jeansonne</td>\n\t\t\t\t\t\t<td>40.7590297</td>\n\t\t\t\t\t\t<td>-73.9703219</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>1021 PARK AVE NY NY 10028</td>\n\t\t\t\t\t\t<td>Lorie Shriver</td>\n\t\t\t\t\t\t<td>40.650317</td>\n\t\t\t\t\t\t<td>-74.0081672</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>127 RIVERSIDE DR NY NY 10024</td>\n\t\t\t\t\t\t<td>Antwan Fullilove</td>\n\t\t\t\t\t\t<td>40.7794132</td>\n\t\t\t\t\t\t<td>-73.9572475</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>5120 BROADWAY NY NY 10034</td>\n\t\t\t\t\t\t<td>Normand Beerman</td>\n\t\t\t\t\t\t<td>40.7890613</td>\n\t\t\t\t\t\t<td>-73.9806569</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>7124 20 AVE NY NY 11204</td>\n\t\t\t\t\t\t<td>Wes Nieman</td>\n\t\t\t\t\t\t<td>40.8714856</td>\n\t\t\t\t\t\t<td>-73.9130362</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>3506 BEDFORD AVE NY NY 11210</td>\n\t\t\t\t\t\t<td>Marlen Hutcherson</td>\n\t\t\t\t\t\t<td>40.6127972</td>\n\t\t\t\t\t\t<td>-73.9901551</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>550 GRAND ST NY NY 10002</td>\n\t\t\t\t\t\t<td>Leonie Lablanc</td>\n\t\t\t\t\t\t<td>40.6168306</td>\n\t\t\t\t\t\t<td>-73.9501481</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>1711 GROVE ST NY NY 11385</td>\n\t\t\t\t\t\t<td>Doris Herrman</td>\n\t\t\t\t\t\t<td>40.7143151</td>\n\t\t\t\t\t\t<td>-73.9800558</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>785 W END AVE NY NY 10025</td>\n\t\t\t\t\t\t<td>Cyndy Kossman</td>\n\t\t\t\t\t\t<td>40.7032053</td>\n\t\t\t\t\t\t<td>-73.9111942</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>6040 HUXLEY AVE NY NY 10471</td>\n\t\t\t\t\t\t<td>Donya Ponte</td>\n\t\t\t\t\t\t<td>40.796763</td>\n\t\t\t\t\t\t<td>-73.972483</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n</div><!--kg-card-end: html--><h3 id=\"head-over-to-mapbox-studio\">Head Over to Mapbox Studio</h3><p>While we can technically do everything programmatically, Mapbox's GUI is simply too easy to ignore. Using <a href=\"https://www.mapbox.com/studio/datasets/\">Mapbox Studio</a>, we can upload our data and turn it into a <em><strong>tileset; </strong></em>the heart and soul of what makes our maps interesting. </p><p>Once you've uploaded your CSV (or JSON, or whatever) as a dataset, we can immediately see what this information looks like on a map by previewing it as a tileset. Mapbox is surprisingly intelligent in that it can deduce lat/long values from poorly named or formatted columns (such as <em>Lat/Long</em>, <em>Latitutde/Longitude</em>, <em>start_longitude_lol/start_latitude_lmao</em>, etc). Mapbox gets it right most of the time.</p><p>If y'all went well you should see a cluster of points on a map - this is a preview of your Tileset. Think of this as a layer in Photoshop: we can stack these layers of information atop one another continuously to make something greater than the sum of its parts.</p><p>If all looks good, export your Tileset via the \"export\" button on the top right.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"http://res-4.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/tileset.gif\" class=\"kg-image\"><figcaption>Upload your dataset and click \"edit\"</figcaption></figure><!--kg-card-end: image--><h3 id=\"switch-over-to-your-map-style\">Switch Over to Your Map \"Style\"</h3><p>You map 'style' is your blank canvas. Get in there and add a layer, and from there select the Tileset you just created. Once your Tileset is loaded, you can style the points themselves and even label them with the data in your dataset as you see fit:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"http://res-2.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/layers.gif\" class=\"kg-image\"><figcaption>So many colorful layers.</figcaption></figure><!--kg-card-end: image--><p>Simply clicking around the preloaded Tilesets should start giving you ideas of what's possible down the line. Just look at those horrifically bright Miami Vice themed streets.</p><p>Feel free to get creative with Mapbox's tools to clarify the visual story you're trying to tell. I've distinguished points from others after adding a third data set: <strong>Every Starbucks in New York City.</strong> Yes, those map pins have been replaced with that terrifying Starbucks Logo Mermaid Sea-demon</p><p>Take a look at that perfect grid of mocha frappa-whatevers and tell me these guys don't have a business strategy:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"http://res-3.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/mapstarbucks2.gif\" class=\"kg-image\"><figcaption>God that's an ugly map.</figcaption></figure><!--kg-card-end: image--><p>For all it's worth, I'd like to sincerely apologize for blinding your eyes with classless use of gifs paired with the useless corporate monstrosity of a map I've created. I have faith that you'll do better.</p><p>Now that we've spent enough time covering the n00b stuff, it's time to take the gloves off. While Mapbox studio's GUI serves as an amazing crutch and way to customize the look of our data, we must not forget: we're programmers, God damn it! True magic lies in 1s and 0s, not WYSIWYG editors.</p><p>Until we start using <strong>Plot.ly Dash</strong>, that is.</p><!--kg-card-begin: html--><span class=\"subtext\">(Suddenly, thousands of fans erupt into a roaring cheer at the very mention of Plot.ly. It's about time.™)</span><!--kg-card-end: html-->","url":"https://hackersandslackers.com/preparing-data-for-mapbox-geocoding/","uuid":"b2e24775-df44-464e-839a-be24e2a3eb42","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c0ee5bd8687896e154a9376"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867374c","title":"Lynx Roundup, December 18th","slug":"lynx-roundup-december-18th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/129@2x.jpg","excerpt":"New Meltdown and Specter attacks!  Using weight regularization to deal with overfitting!  Guide to data visualization in Bokeh!","custom_excerpt":"New Meltdown and Specter attacks!  Using weight regularization to deal with overfitting!  Guide to data visualization in Bokeh!","created_at_pretty":"10 December, 2018","published_at_pretty":"18 December, 2018","updated_at_pretty":"18 December, 2018","created_at":"2018-12-10T00:52:34.000-05:00","published_at":"2018-12-18T07:00:00.000-05:00","updated_at":"2018-12-18T08:45:09.000-05:00","meta_title":"Lynx Roundup, December 18th | Hackers and Slackers","meta_description":"New Meltdown and Specter attacks!  Using weight regularization to deal with overfitting!  Guide to data visualization in Bokeh!","og_description":"New Meltdown and Specter attacks!  Using weight regularization to deal with overfitting!  Guide to data visualization in Bokeh!","og_image":"https://hackersandslackers.com/content/images/lynx/129@2x.jpg","og_title":"Lynx Roundup, December 18th","twitter_description":"New Meltdown and Specter attacks!  Using weight regularization to deal with overfitting!  Guide to data visualization in Bokeh!","twitter_image":"https://hackersandslackers.com/content/images/lynx/129@2x.jpg","twitter_title":"Lynx Roundup, December 18th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.zdnet.com/article/researchers-discover-seven-new-meltdown-and-spectre-attacks/\n\nhttps://machinelearningmastery.com/weight-regularization-to-reduce-overfitting-of-deep-learning-models/\n\nhttps://www.wired.com/story/deepmasterprints-fake-fingerprints-machine-learning/amp\n\nhttps://realpython.com/python-data-visualization-bokeh/\n\nhttps://hortonworks.com/blog/democratizing-analytics-within-kafka-three-new-access-patterns/\n\nhttps://www.independent.co.uk/life-style/gadgets-and-tech/news/amazon-workers-immigration-jeff-bezos-ibm-nazi-protest-a8411601.html\n\nhttps://twitter.com/random_walker/status/976836626121977858?s=09","html":"<p></p><p><a href=\"https://www.zdnet.com/article/researchers-discover-seven-new-meltdown-and-spectre-attacks/\">https://www.zdnet.com/article/researchers-discover-seven-new-meltdown-and-spectre-attacks/</a></p><p><a href=\"https://machinelearningmastery.com/weight-regularization-to-reduce-overfitting-of-deep-learning-models/\">https://machinelearningmastery.com/weight-regularization-to-reduce-overfitting-of-deep-learning-models/</a></p><p><a href=\"https://www.wired.com/story/deepmasterprints-fake-fingerprints-machine-learning/amp\">https://www.wired.com/story/deepmasterprints-fake-fingerprints-machine-learning/amp</a></p><p><a href=\"https://realpython.com/python-data-visualization-bokeh/\">https://realpython.com/python-data-visualization-bokeh/</a></p><p><a href=\"https://hortonworks.com/blog/democratizing-analytics-within-kafka-three-new-access-patterns/\">https://hortonworks.com/blog/democratizing-analytics-within-kafka-three-new-access-patterns/</a></p><p><a href=\"https://www.independent.co.uk/life-style/gadgets-and-tech/news/amazon-workers-immigration-jeff-bezos-ibm-nazi-protest-a8411601.html\">https://www.independent.co.uk/life-style/gadgets-and-tech/news/amazon-workers-immigration-jeff-bezos-ibm-nazi-protest-a8411601.html</a></p><p><a href=\"https://twitter.com/random_walker/status/976836626121977858?s=09\">https://twitter.com/random_walker/status/976836626121977858?s=09</a></p>","url":"https://hackersandslackers.com/lynx-roundup-december-18th/","uuid":"ba82abb1-de79-46f3-9adb-5a7bf60c2702","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5c0dff221556321bd84c3383"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867374b","title":"Lynx Roundup, December 17th","slug":"lynx-roundup-december-17th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/77-1@2x.jpg","excerpt":"Pen-testing Postgres!  Blockchain in insurance!  Tools for Structured Text!","custom_excerpt":"Pen-testing Postgres!  Blockchain in insurance!  Tools for Structured Text!","created_at_pretty":"10 December, 2018","published_at_pretty":"17 December, 2018","updated_at_pretty":"05 January, 2019","created_at":"2018-12-10T00:49:53.000-05:00","published_at":"2018-12-17T07:00:00.000-05:00","updated_at":"2019-01-04T20:23:36.000-05:00","meta_title":"Lynx Roundup, December | Hackers and Slackers","meta_description":"Pen-testing Postgres!  Blockchain in insurance!  Tools for Structured Text!","og_description":"Pen-testing Postgres!  Blockchain in insurance!  Tools for Structured Text!","og_image":"https://hackersandslackers.com/content/images/lynx/77-1@2x.jpg","og_title":"Lynx Roundup, December 17th","twitter_description":"Pen-testing Postgres!  Blockchain in insurance!  Tools for Structured Text!","twitter_image":"https://hackersandslackers.com/content/images/lynx/77-1@2x.jpg","twitter_title":"Lynx Roundup, December 17th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://medium.com/@netscylla/pentesters-guide-to-postgresql-hacking-59895f4f007\n\nhttps://www.datanami.com/2018/06/28/how-blockchain-is-impacting-data-and-processes-in-insurance/\n\nhttps://github.com/dbohdan/structured-text-tools\n\nhttps://deepmind.com/blog/understanding-deep-learning-through-neuron-deletion/\n\nhttps://blog.insightdatascience.com/always-start-with-a-stupid-model-no-exceptions-3a22314b9aaa\n\nhttps://github.com/henripal/labnotebook\n\nhttps://www.business-science.io/learning-python/2018/11/18/data-science-python-cheatsheet.html","html":"<p></p><p><a href=\"https://medium.com/@netscylla/pentesters-guide-to-postgresql-hacking-59895f4f007\">https://medium.com/@netscylla/pentesters-guide-to-postgresql-hacking-59895f4f007</a></p><p><a href=\"https://www.datanami.com/2018/06/28/how-blockchain-is-impacting-data-and-processes-in-insurance/\">https://www.datanami.com/2018/06/28/how-blockchain-is-impacting-data-and-processes-in-insurance/</a></p><p><a href=\"https://github.com/dbohdan/structured-text-tools\">https://github.com/dbohdan/structured-text-tools</a></p><p><a href=\"https://deepmind.com/blog/understanding-deep-learning-through-neuron-deletion/\">https://deepmind.com/blog/understanding-deep-learning-through-neuron-deletion/</a></p><p><a href=\"https://blog.insightdatascience.com/always-start-with-a-stupid-model-no-exceptions-3a22314b9aaa\">https://blog.insightdatascience.com/always-start-with-a-stupid-model-no-exceptions-3a22314b9aaa</a></p><p><a href=\"https://github.com/henripal/labnotebook\">https://github.com/henripal/labnotebook</a></p><p><a href=\"https://www.business-science.io/learning-python/2018/11/18/data-science-python-cheatsheet.html\">https://www.business-science.io/learning-python/2018/11/18/data-science-python-cheatsheet.html</a></p>","url":"https://hackersandslackers.com/lynx-roundup-december-17th/","uuid":"5e6fa267-525e-4285-8586-bceadfcc7990","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5c0dfe811556321bd84c337e"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867374a","title":"Lynx Roundup, December 16th","slug":"lynx-roundup-december-16th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/02/128@2x.jpg","excerpt":"Spot-checking machine learning!  The t test in Python!  Stats for evaluating ML models!","custom_excerpt":"Spot-checking machine learning!  The t test in Python!  Stats for evaluating ML models!","created_at_pretty":"10 December, 2018","published_at_pretty":"16 December, 2018","updated_at_pretty":"14 February, 2019","created_at":"2018-12-10T00:47:21.000-05:00","published_at":"2018-12-16T07:00:00.000-05:00","updated_at":"2019-02-14T04:57:26.000-05:00","meta_title":"Lynx Roundup, December 16th | Hackers and Slackers","meta_description":"Spot-checking machine learning!  The t test in Python!  Stats for evaluating ML models!","og_description":"Spot-checking machine learning!  The t test in Python!  Stats for evaluating ML models!","og_image":"https://hackersandslackers.com/content/images/2019/02/128@2x.jpg","og_title":"Lynx Roundup, December 16th","twitter_description":"Spot-checking machine learning!  The t test in Python!  Stats for evaluating ML models!","twitter_image":"https://hackersandslackers.com/content/images/2019/02/128@2x.jpg","twitter_title":"Lynx Roundup, December 16th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://machinelearningmastery.com/spot-check-machine-learning-algorithms-in-python/\n\nhttps://machinelearningmastery.com/how-to-load-and-explore-household-electricity-usage-data/\n\nhttps://machinelearningmastery.com/calibrated-classification-model-in-scikit-learn/\n\nhttps://machinelearningmastery.com/how-to-code-the-students-t-test-from-scratch-in-python/\n\nhttps://machinelearningmastery.com/statistics-in-plain-english-for-machine-learning/\n\nhttps://machinelearningmastery.com/statistics-for-evaluating-machine-learning-models/\n\nhttps://www.db-fiddle.com/","html":"<p></p><p><a href=\"https://machinelearningmastery.com/spot-check-machine-learning-algorithms-in-python/\">https://machinelearningmastery.com/spot-check-machine-learning-algorithms-in-python/</a></p><p><a href=\"https://machinelearningmastery.com/how-to-load-and-explore-household-electricity-usage-data/\">https://machinelearningmastery.com/how-to-load-and-explore-household-electricity-usage-data/</a></p><p><a href=\"https://machinelearningmastery.com/calibrated-classification-model-in-scikit-learn/\">https://machinelearningmastery.com/calibrated-classification-model-in-scikit-learn/</a></p><p><a href=\"https://machinelearningmastery.com/how-to-code-the-students-t-test-from-scratch-in-python/\">https://machinelearningmastery.com/how-to-code-the-students-t-test-from-scratch-in-python/</a></p><p><a href=\"https://machinelearningmastery.com/statistics-in-plain-english-for-machine-learning/\">https://machinelearningmastery.com/statistics-in-plain-english-for-machine-learning/</a></p><p><a href=\"https://machinelearningmastery.com/statistics-for-evaluating-machine-learning-models/\">https://machinelearningmastery.com/statistics-for-evaluating-machine-learning-models/</a></p><p><a href=\"https://www.db-fiddle.com/\">https://www.db-fiddle.com/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-december-16th/","uuid":"21206359-2e4f-407e-9337-b435428fbb00","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c0dfde91556321bd84c3379"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673749","title":"Lynx Roundup, December 15th","slug":"lynx-roundup-december-15th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/127@2x.jpg","excerpt":"High availability!  Diagramming databases!  Deep Learning for Time Series Forecasting!","custom_excerpt":"High availability!  Diagramming databases!  Deep Learning for Time Series Forecasting!","created_at_pretty":"10 December, 2018","published_at_pretty":"15 December, 2018","updated_at_pretty":"05 January, 2019","created_at":"2018-12-10T00:46:00.000-05:00","published_at":"2018-12-15T07:00:00.000-05:00","updated_at":"2019-01-04T20:31:53.000-05:00","meta_title":"Lynx Roundup, December 15th | Hackers and Slackers","meta_description":"High availability!  Diagramming databases!  Deep Learning for Time Series Forecasting!","og_description":"High availability!  Diagramming databases!  Deep Learning for Time Series Forecasting!","og_image":"https://hackersandslackers.com/content/images/lynx/127@2x.jpg","og_title":"Lynx Roundup, December 15th","twitter_description":"High availability!  Diagramming databases!  Deep Learning for Time Series Forecasting!","twitter_image":"https://hackersandslackers.com/content/images/lynx/127@2x.jpg","twitter_title":"Lynx Roundup, December 15th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.cockroachlabs.com/blog/brief-history-high-availability/\n\nhttps://sqlfum.pt/\n\nhttps://liveramp.com/engineering/1023756/\n\nhttps://www.confluent.io/blog/changing-face-etl\n\nhttps://dbdiagram.io/\n\nhttps://github.com/vktr/blaze\n\nhttps://machinelearningmastery.com/deep-learning-for-time-series-forecasting/","html":"<p></p><p><a href=\"https://www.cockroachlabs.com/blog/brief-history-high-availability/\">https://www.cockroachlabs.com/blog/brief-history-high-availability/</a></p><p><a href=\"https://sqlfum.pt/\">https://sqlfum.pt/</a></p><p><a href=\"https://liveramp.com/engineering/1023756/\">https://liveramp.com/engineering/1023756/</a></p><p><a href=\"https://www.confluent.io/blog/changing-face-etl\">https://www.confluent.io/blog/changing-face-etl</a></p><p><a href=\"https://dbdiagram.io/\">https://dbdiagram.io/</a></p><p><a href=\"https://github.com/vktr/blaze\">https://github.com/vktr/blaze</a></p><p><a href=\"https://machinelearningmastery.com/deep-learning-for-time-series-forecasting/\">https://machinelearningmastery.com/deep-learning-for-time-series-forecasting/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-december-15th/","uuid":"d567908a-b0db-4f66-8d30-ed1005d5305e","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5c0dfd981556321bd84c3374"}}]}},"pageContext":{"pageNumber":9,"humanPageNumber":10,"skip":108,"limit":12,"numberOfPages":33,"previousPagePath":"/page/9","nextPagePath":"/page/11"}}