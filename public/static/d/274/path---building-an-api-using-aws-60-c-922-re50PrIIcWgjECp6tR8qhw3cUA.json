{"data":{"ghostPost":{"id":"Ghost__Post__5c12d7bfe875ad7bb867364d","title":"Preparing your AWS Project to Build an API","slug":"building-an-api-using-aws","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/awsapi-1-3.jpg","excerpt":"Get your AWS instance configured, and become familiar with the services needed to build APIs.","custom_excerpt":"Get your AWS instance configured, and become familiar with the services needed to build APIs.","created_at_pretty":"06 May, 2018","published_at_pretty":"06 May, 2018","updated_at_pretty":"28 March, 2019","created_at":"2018-05-06T07:30:47.000-04:00","published_at":"2018-05-06T08:58:41.000-04:00","updated_at":"2019-03-28T08:54:39.000-04:00","meta_title":"Preparing your AWS Project to Build an API | Hackers and Slackers","meta_description":"Get your AWS instance configured, and become familiar with the services needed to build APIs.","og_description":"Get your AWS instance configured, and become familiar with the services needed to build APIs.","og_image":"https://hackersandslackers.com/content/images/2019/03/awsapi-1-3.jpg","og_title":"Preparing your AWS Project to Build an API | Hackers and Slackers","twitter_description":"Get your AWS instance configured, and become familiar with the services needed to build APIs.","twitter_image":"https://hackersandslackers.com/content/images/2019/03/awsapi-1-2.jpg","twitter_title":"Preparing your AWS Project to Build an API | Hackers and Slackers","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"REST APIs","slug":"restapis","description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","feature_image":null,"meta_description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","meta_title":"Consuming and Building REST APIs | Hackers and Slackers","visibility":"public"},"tags":[{"name":"REST APIs","slug":"restapis","description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","feature_image":null,"meta_description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","meta_title":"Consuming and Building REST APIs | Hackers and Slackers","visibility":"public"},{"name":"AWS","slug":"aws","description":"Monolithic cloud architecture via microservices. Become familiar with AWS products, account administration, security practices, and tips to make it all easier.","feature_image":null,"meta_description":"Become familiar with AWS services, account administration, security practices, and tips to make it all easier.","meta_title":"Learn AWS | Hackers and Slackers","visibility":"public"},{"name":"DevOps","slug":"devops","description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","feature_image":null,"meta_description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","meta_title":"DevOps: Networking And Server Configuration | Hackers and Slackers","visibility":"public"},{"name":"Architecture","slug":"architecture","description":"Advancements in software architecture, serverless and beyond. Examples include equivalents to Lambda functions, Docker containers, Google Cloud functions,  Kubernetes, Heroku, etc.","feature_image":null,"meta_description":"Advancements in software architecture, serverless and beyond. Examples include equivalents to cloud functions, Docker containers, Kubernetes, Heroku, etc.","meta_title":"Software Architecture | Hackers and Slackers","visibility":"public"},{"name":"#Creating APIs in AWS","slug":"create-an-aws-api","description":"Create a REST API in AWS with industry-standard services such as Lambda Functions, RDS, and API Gateway.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/pythonlambda.jpg","meta_description":"Create an API in AWS with industry-standard services such as Lambda Functions, RDS, and API Gateway.","meta_title":"Create a REST API in AWS","visibility":"internal"}],"plaintext":"There comes a surreal moment in nearly every profession in which perspective\nviolently forces itself into our self-awareness. People with cooler jobs\nprobably have that moment when they save their first patient or launch their\nfirst rocket. For me, the idea of building an API was this moment in software\ndevelopment. All those past black boxes which spat out results your life\ndepended on: we can make those now.\n\nFeel free to remain unfazed by this as I'm sure most are... for those of us who\ncan't remember how they became an \"engineer\" in the first place, API design\nfeels like reaching a final frontier. Granted, this may happen at least 20 more\ntimes in your software career, so don’t pause too long now.\n\nIf you managed to catch the tutorial on setting up RDS on AWS\n[https://hackersandslackers.com/setting-up-mysql-on-aws/], you're already a step\nahead. We're going to make our way through this slowly, which is probably a good\nidea even if you've done this before. There are so many pitfalls and nuances in\nAWS's architecture that I'm not even sure I fully understand what's happening,\neven when everything works.\n\nQuick Overview\nHere are the services we'll be using to hook this baby up:\n\n *   RDS:  Amazon's cloud-hosted relational databases. These databases come\n   preconfigured with an endpoint, which can be made accessible to other AWS\n   services or even to external manipulation. \n *   Lambda:  Snippets of code which can be invoked without setting up a web\n   server (hence: \"serverless\"). Lambda functions are intended to serve simple,\n   specific functions (such as serving as the logic for an endpoint, for\n   instance). Lambda functions play well with other AWS services: we'll be using\n   this as the glue between our API and interacting with the Database.\n *   API Gateway:  Amazon's visual editor for creating an API. API Gateway\n   allows developers to architect the structure and logic of APIs without having\n   to worry about setting up routes via code.\n *   IAM:  Amazon's headache of a user & permissions manager. IAM is needed to\n   specify exactly with AWS services have access to other services, which users\n   are permitted to interact with your API, etc. \n\nGameplan\nSo here's the deal. Our RDS  database will be where all the data we provide and\nreceive will live. Lambda  functions will be the snippets of code actually\ninteracting with information from the database; all of our queries will be done\nthrough Lambda. API Gateway  will control the \"design\" of the API, as in the\nstructure of endpoints, their respective methods, and how all these should\ninteract with Lambda.\n\nIt sounds simple enough, but the devil is in the details. And trust me, there\nare a lot of details.\n\nSetting the Correct Role Permissions\nUsually, I'd say we should jump into the fun stuff and deal with the details\nwhen we get to them. I won't let you steer down that road with AWS... let's\navoid smashing our heads on keyboards where possible and kick things off slow.\n\nIf you were to attempt to create a Lambda function off the bat, the first prompt\nto appear would demand a \"role\" to be specified. Roles are one of the types of\npermission packages (?) we mentioned earlier. Roles limit exactly which services\nyour Lambda function can interact with off the bat. Start with the wrong role,\nand you won't be able to do much of anything.\n\nHead over the IAM console\n[https://console.aws.amazon.com/iam/home?region=us-east-1#/home]  to set up an\nappropriate role:\n\nWhat a God-awful way to handle permissions.Let's pause for a moment to take this\nall in. You'll see we have users, groups, roles, policies and a whole bunch of\nother garbage. Policies can be attached to roles. Policies can also be attached\nto users, and also attached to groups. Users can be in groups. Wait, so what if\na user has a bunch of policies, but then joins a group with a bunch of policies?\nWhat even is a \"policy\"? These are the real questions. The short answer is none\nof it makes sense; it's just extra job security for those who make it work.\n\nClick on \"Roles\" in the sidebar. Create a role. Select \"Lambda\" and click next.\n\nThis interface only seems to get worse.Ok cool. The role  we're creating is basically just going to be a collection of\npermissions we can attached directly to the role. Go ahead and attach these:\n\n * AmazonVPCFullAccess\n * AmazonAPIGatewayInvokeFullAccess\n * AmazonRDSFullAccess\n * AWSLambdaFullAccess\n * CloudWatchLogsFullAccess\n\nSave the role, and remember what you name it. You'll need it.\n\nGetting Started with Lambda Functions\nGo back to the Lambda console. It's game time. We're going to create a function\nfrom scratch (sadly, I haven't found any of the blueprints to be very useful\njust yet).\n\nIgnore Amazon's silly Blueprints.Under “runtime”, you’ll need to pick which\nprogramming language we’ll be writing our function in. I’m doing Python 3\nbecause I don’t mess with semicolons, ya dig. Most people seem to stick with\nNode, which makes sense: Node is much faster at runtime, especially when you\nconsider that AWS runs Node natively. The choice is your preference.\n\nAha, see the “Role” dropdown? This is what I warned you about. Select the role\nyou just created earlier from existing roles.\n\nLambda Function Editor\nWelcome to Lambda's web UIBehold, the Lambda visual editor. That tree you're\nseeing is a representation of the integration this function will handle. The\ncurrent function is the box top-middle, the trigger is on the left, and the list\nof potential AWS services we can touch is on the right; these were automatically\npopulated by that role I forced you to create. You're welcome.\n\nNOTE:  The entire interface below this section depends on which service you've\nclicked in the tree. It's not the most intuitive at first. I have my Lambda\nfunction selected, so that's the interface I can interact with below.\n\nInline Code Editor\nWe can create Lambdas directly in the browser, or by uploading souce via zip\nfile.Real quick, we need to go over what each field here does. The dropdown\ncurrently set to \"edit code inline\" can be expanded, which gives you the option\nto upload a zip file of source code. THIS WILL DELETE ALL PREEXISTING WORK. \nThey don't tell you that, hah. Ha hah. I recommend doing everything offline to\nbe uploaded later - this needs to be done with python packages anyway.\n\nHandler  specifies which function should be called upon initialization.\n\"lambda_function\" is referring to the function, so \"handler\" here specifies that\nthe function handler within lambda_function.py  is what will get called upon\nexecution.\n\nOur Lambda’s VPC Settings\nScroll down until you hit this pretty little gem:\n\nAWS is filled with complicated network concepts, and zero attempts to explain\nthem.We need to specify the VPC this function will interact with. If you created\nan RDS already, go ahead select the VPC you created. Add a bunch of subnets\n(whichever ones). Finally, select a security group. Remember that the\npermissions of this group determine whether or not your VPC is allowed to speak\nto this function. If you're struggling with this, check out the AWS MySQL post\nagain. I'm not going to link it twice in one post, sorry. I have self-respect\nyou know.\n\nThat's Enough For Now\nThere's a lot to take in when playing around in AWS. The combination of\ngibberish terminology and horrible documentation doesn't exactly make for solid\nuser experience. If you're new to AWS and any of this seems frustrating, know\nit's supposed to be. Amazon owns you, and they hate you. Kind of like God.\n\nI'd suggest messing around the interface, and maybe even check out API Gateway a\nbit to get a feel for how that stuff looks. They set you up with a cute demo to\nmake you think it's going to be easy, so maybe you'll enjoy that. Next time,\nwe're going to crank out some Lambdas.","html":"<p>There comes a surreal moment in nearly every profession in which perspective violently forces itself into our self-awareness. People with cooler jobs probably have that moment when they save their first patient or launch their first rocket. For me, the idea of building an API was this moment in software development. All those past black boxes which spat out results your life depended on: we can make those now.</p><p>Feel free to remain unfazed by this as I'm sure most are... for those of us who can't remember how they became an \"engineer\" in the first place, API design feels like reaching a final frontier. Granted, this may happen at least 20 more times in your software career, so don’t pause too long now.</p><p>If you managed to catch the tutorial on <a href=\"https://hackersandslackers.com/setting-up-mysql-on-aws/\">setting up RDS on AWS</a>, you're already a step ahead. We're going to make our way through this slowly, which is probably a good idea even if you've done this before. There are so many pitfalls and nuances in AWS's architecture that I'm not even sure I fully understand what's happening, even when everything works.</p><h2 id=\"quick-overview\">Quick Overview</h2><p>Here are the services we'll be using to hook this baby up:</p><ul><li> <strong>RDS:</strong> Amazon's cloud-hosted relational databases. These databases come preconfigured with an endpoint, which can be made accessible to other AWS services or even to external manipulation. </li><li> <strong>Lambda:</strong> Snippets of code which can be invoked without setting up a web server (hence: \"<em>serverless</em>\"). Lambda functions are intended to serve simple, specific functions (such as serving as the logic for an endpoint, for instance). Lambda functions play well with other AWS services: we'll be using this as the glue between our API and interacting with the Database.</li><li> <strong>API Gateway:</strong> Amazon's visual editor for creating an API. API Gateway allows developers to architect the structure and logic of APIs without having to worry about setting up routes via code.</li><li> <strong>IAM:</strong> Amazon's headache of a user &amp; permissions manager. IAM is needed to specify exactly with AWS services have access to other services, which users are permitted to interact with your API, etc. </li></ul><h3 id=\"gameplan\">Gameplan</h3><p>So here's the deal. Our <strong>RDS</strong> database will be where all the data we provide and receive will live. <strong>Lambda</strong> functions will be the snippets of code actually interacting with information from the database; all of our queries will be done through Lambda. <strong>API Gateway</strong> will control the \"design\" of the API, as in the structure of endpoints, their respective methods, and how all these should interact with Lambda.</p><p>It sounds simple enough, but the devil is in the details. And trust me, there are a lot of details.</p><h2 id=\"setting-the-correct-role-permissions\">Setting the Correct Role Permissions</h2><p>Usually, I'd say we should jump into the fun stuff and deal with the details when we get to them. I won't let you steer down that road with AWS... let's avoid smashing our heads on keyboards where possible and kick things off slow.</p><p>If you were to attempt to create a Lambda function off the bat, the first prompt to appear would demand a \"<strong>role</strong>\" to be specified. Roles are one of the types of permission packages (?) we mentioned earlier. Roles limit exactly which services your Lambda function can interact with off the bat. Start with the wrong role, and you won't be able to do much of anything.</p><p>Head over the <a href=\"https://console.aws.amazon.com/iam/home?region=us-east-1#/home\">IAM console</a> to set up an appropriate role:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://hackersandslackers.com/content/images/2018/05/Screenshot-2018-05-06-08.06.13.png\" class=\"kg-image\" alt=\"Screenshot-2018-05-06-08.06.13\"><figcaption>What a God-awful way to handle permissions.</figcaption></figure><!--kg-card-end: image--><p>Let's pause for a moment to take this all in. You'll see we have users, groups, roles, policies and a whole bunch of other garbage. Policies can be attached to roles. Policies can also be attached to users, and also attached to groups. Users can be in groups. Wait, so what if a user has a bunch of policies, but then joins a group with a bunch of policies? What even is a \"policy\"? These are the real questions. The short answer is none of it makes sense; it's just extra job security for those who make it work.</p><p>Click on \"Roles\" in the sidebar. Create a role. Select \"Lambda\" and click <em>next</em>.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://hackersandslackers.com/content/images/2018/05/Screenshot-2018-05-06-08.18.21.png\" class=\"kg-image\" alt=\"Screenshot-2018-05-06-08.18.21\"><figcaption>This interface only seems to get worse.</figcaption></figure><!--kg-card-end: image--><p>Ok cool. The <strong>role</strong> we're creating is basically just going to be a collection of permissions we can attached directly to the role. Go ahead and attach these:</p><ul><li>AmazonVPCFullAccess</li><li>AmazonAPIGatewayInvokeFullAccess</li><li>AmazonRDSFullAccess</li><li>AWSLambdaFullAccess</li><li>CloudWatchLogsFullAccess</li></ul><p>Save the role, and remember what you name it. You'll need it.</p><h2 id=\"getting-started-with-lambda-functions\">Getting Started with Lambda Functions</h2><p>Go back to the Lambda console. It's game time. We're going to create a function from scratch (sadly, I haven't found any of the blueprints to be very useful just yet).</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://hackersandslackers.com/content/images/2018/05/Screenshot-2018-05-06-08.25.16.png\" class=\"kg-image\" alt=\"Lambda\"><figcaption>Ignore Amazon's silly Blueprints.</figcaption></figure><!--kg-card-end: image--><p>Under “runtime”, you’ll need to pick which programming language we’ll be writing our function in. I’m doing Python 3 because I don’t mess with semicolons, ya dig. Most people seem to stick with Node, which makes sense: Node is much faster at runtime, especially when you consider that AWS runs Node natively. The choice is your preference.</p><p>Aha, see the “Role” dropdown? This is what I warned you about. Select the role you just created earlier from existing roles.</p><h3 id=\"lambda-function-editor\">Lambda Function Editor</h3><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://hackersandslackers.com/content/images/2019/03/Screenshot-2018-05-06-08.30.00.png\" class=\"kg-image\"><figcaption>Welcome to Lambda's web UI</figcaption></figure><!--kg-card-end: image--><p>Behold, the Lambda visual editor. That tree you're seeing is a representation of the integration this function will handle. The current function is the box top-middle, the trigger is on the left, and the list of potential AWS services we can touch is on the right; these were automatically populated by that role I forced you to create. You're welcome.</p><p><strong>NOTE:</strong> The entire interface below this section depends on which service you've clicked in the tree. It's not the most intuitive at first. I have my Lambda function selected, so that's the interface I can interact with below.</p><h3 id=\"inline-code-editor\">Inline Code Editor</h3><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://hackersandslackers.com/content/images/2018/05/Screenshot-2018-05-06-08.35.20.png\" class=\"kg-image\" alt=\"Function code\"><figcaption>We can create Lambdas directly in the browser, or by uploading souce via zip file.</figcaption></figure><!--kg-card-end: image--><p>Real quick, we need to go over what each field here does. The dropdown currently set to \"edit code inline\" can be expanded, which gives you the option to upload a zip file of source code. <em>THIS WILL DELETE ALL PREEXISTING WORK.</em> They don't tell you that, hah. Ha hah. I recommend doing everything offline to be uploaded later - this needs to be done with python packages anyway.</p><p><strong>Handler</strong> specifies which function should be called upon initialization. \"lambda_function\" is referring to the function, so \"handler\" here specifies that the function handler within <code>lambda_function.py</code> is what will get called upon execution.</p><h3 id=\"our-lambda-s-vpc-settings\">Our Lambda’s VPC Settings</h3><p>Scroll down until you hit this pretty little gem:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://hackersandslackers.com/content/images/2018/05/Screenshot-2018-05-06-08.41.02.png\" class=\"kg-image\" alt=\"VPC\"><figcaption>AWS is filled with complicated network concepts, and zero attempts to explain them.</figcaption></figure><!--kg-card-end: image--><p>We need to specify the VPC this function will interact with. If you created an RDS already, go ahead select the VPC you created. Add a bunch of subnets (whichever ones). Finally, select a <em>security group</em>. Remember that the permissions of this group determine whether or not your VPC is allowed to speak to this function. If you're struggling with this, check out the AWS MySQL post again. I'm not going to link it twice in one post, sorry. I have self-respect you know.</p><h2 id=\"that-s-enough-for-now\">That's Enough For Now</h2><p>There's a lot to take in when playing around in AWS. The combination of gibberish terminology and horrible documentation doesn't exactly make for solid user experience. If you're new to AWS and any of this seems frustrating, know it's supposed to be. Amazon owns you, and they hate you. Kind of like God.</p><p>I'd suggest messing around the interface, and maybe even check out API Gateway a bit to get a feel for how that stuff looks. They set you up with a cute demo to make you think it's going to be easy, so maybe you'll enjoy that. Next time, we're going to crank out some Lambdas.</p>","url":"https://hackersandslackers.com/building-an-api-using-aws/","uuid":"45101fbc-527b-432b-994e-31d855e76aff","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5aeee767926f095edfccda8e"}},"pageContext":{"slug":"building-an-api-using-aws"}}