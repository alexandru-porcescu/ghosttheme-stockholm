{"data":{"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736c7","title":"Hacking Tableau to Handle ETL Workflows","slug":"turning-tableau-into-an-etl-tool-using-the-rest-api","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/08/fucktableau@2x.jpg","excerpt":"Weaponizing APIs against tyrannical software.","custom_excerpt":"Weaponizing APIs against tyrannical software.","created_at_pretty":"01 August, 2018","published_at_pretty":"03 August, 2018","updated_at_pretty":"28 February, 2019","created_at":"2018-08-01T08:49:36.000-04:00","published_at":"2018-08-03T08:57:00.000-04:00","updated_at":"2019-02-28T03:18:22.000-05:00","meta_title":"Hacking Tableau to Handle ETL Workflows | Hackers and Slackers","meta_description":"The presence of ETL as an acronym is a perfect reflection of where we are in data engineering's growth trajectory. ","og_description":"The presence of ETL as an acronym is a perfect reflection of where we are in data engineering's growth trajectory. The lack of effective Extract, Transform, and Load workflow products tell us a couple things: we have too many data sources (whether they be APIs or private data sets), and the raw data is virtually unusable until cleaned.","og_image":"https://hackersandslackers.com/content/images/2018/08/fucktableau@2x.jpg","og_title":"Hacking Tableau to Handle ETL Workflows","twitter_description":"The lack of effective Extract, Transform, and Load workflow products tell us a couple things: we have too many data sources, and the raw data is virtually unusable until cleaned.","twitter_image":"https://hackersandslackers.com/content/images/2018/08/fucktableau@2x.jpg","twitter_title":"Hacking Tableau to Handle ETL Workflows","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Tableau","slug":"tableau","description":"Dissect Tableau server and implement hacks to improve your workflow, or simply become familiar with the Tableau desktop user interface.","feature_image":null,"meta_description":"Dissect Tableau server and implement hacks to improve your workflow, or simply become familiar with the Tableau desktop user interface.","meta_title":"Tableau Desktop & Server | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Tableau","slug":"tableau","description":"Dissect Tableau server and implement hacks to improve your workflow, or simply become familiar with the Tableau desktop user interface.","feature_image":null,"meta_description":"Dissect Tableau server and implement hacks to improve your workflow, or simply become familiar with the Tableau desktop user interface.","meta_title":"Tableau Desktop & Server | Hackers and Slackers","visibility":"public"},{"name":"BI","slug":"business-intelligence","description":"Business Intelligence, otherwise known as \"making nice reports for executives to ignore.\"","feature_image":null,"meta_description":null,"meta_title":"Business Intelligence Tools | Hackers and Slackers","visibility":"public"},{"name":"DevOps","slug":"devops","description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","feature_image":null,"meta_description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","meta_title":"DevOps: Networking And Server Configuration | Hackers and Slackers","visibility":"public"},{"name":"REST APIs","slug":"restapis","description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","feature_image":null,"meta_description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","meta_title":"Consuming and Building REST APIs | Hackers and Slackers","visibility":"public"},{"name":"#Hacking Tableau Server","slug":"hacking-tableau-server","description":"Break free from the constraints of the TSM CLI to bend Tableau Server to your will. Uncover Superadmin privileges, or even rewire Tableau to handle ETL.","feature_image":"https://hackersandslackers.com/content/images/2019/03/tableauseries-2.jpg","meta_description":"Break free from the constraints of the TSM CLI to bend Tableau Server to your will. Uncover Superadmin privileges, or even rewire Tableau to handle ETL.","meta_title":"Hacking Tableau Server","visibility":"internal"}],"plaintext":"Before we get into the specifics of how to sadistically abuse Tableau, let's\nclear the air: there's something about inaccessible, expensive, proprietary\nenterprise software that tends to put me in a touchy mood. As we know, B2B\nsoftware pricing has nothing to do with code quality or even value-add, but\nrather the tendency of businesses to create time-based urgencies without\nwarning; the kinds of urgencies which may be solved by, say, a tool of sorts.\n\nMy first interaction with Tableau actually took place after I had committed\nmyself to the cult of Python's Pandas library and all that comes with it.\nTableau does little to hide the fact that it is a GUI for data manipulation and\nSQL queries; in most cases, the calculation syntax is exactly the same. From my\nperspective, Tableau could be a tool to save time: instead of rewriting\nvariations of the same scripts over and over, I could use Tableau to do these\ntasks visually for both speed and transparency's sake. It was a win-win for\ntrivial tasks, except for one: the ability to write back to a database. You'd\nthink I wouldn't think that far ahead before purchasing my own Tableau server\nand license, conveniently billed upfront annually.\n\nThe Rise of ETL\nThe presence of ETL as an acronym is a perfect reflection of where we are in\ndata engineering's growth trajectory. The lack of effective Extract, Transform,\nand Load  workflow products tell us a couple things: we have too many data\nsources (whether they be APIs or private data sets), and the raw data is\nvirtually unusable until cleaned. This process could be relatively trivial with\nthe right software. There are plenty of contenders to make this process simple,\nand I'd like to express in unadulterated astonishment that they are all  failing\nmiserably  at solving this task effectively, mostly thanks to poor decision\nmaking and human error alone.\n\nThe ETL Market\nAs it stands, Parabola.io  tops my list of ETL products. Parabola hits the nail\non the head when it comes to UI and ease of use. This begs the question: why,\nthen, are their latest releases focused on support for extraction to garbage\nproducts like Smartsheet? Currently the only extract location which is actually\na database  is MySQL. As much as I want Parabola to succeed, nothing has\nimproved if our workflow still involves manually setting up a third party DB\nwith a schema which perfectly matches our output.\n\nGoogle Cloud is doing its best to somehow tie separate products together such as\n Dataprep  and Bigquery. We'll see how that goes- there's no mention of data\nextraction from APIs in this flow just yet. We might be waiting for some time\nfor Google's perfect answer to mature.\n\nGithub Labs supposedly just announced recent efforts to tackle this space as\nwell with the upcoming Melatano\n[https://about.gitlab.com/2018/08/01/hey-data-teams-we-are-working-on-a-tool-just-for-you/]\n. Hopefully they have their heads on straight.\n\nAnyway, since the world has failed us, we'll just exploit a Tableau backdoor to\ndo this while humanity catches up.\n\nTableau's Rest API\nAs hard as Tableau tries to obfuscate anything and everything, their REST API\ngets us exactly what we want after a bit of red tape. We need to run 3 API\ncalls:\n\n * POST /api/[api-version]/auth/signin: Generate a token so we can actually use\n   the API\n * GET /api/3.0/sites/[site-id]/views:  List all view metadata in a Tableau\n   \"site.\"\n * GET /api/3.0/sites/[site-id]/views/[view-id]/data: Receive a comma\n   delimitated response of the content of your target view\n\nWhat R U Token about\nTo receive our token, we'll use basic auth to hit this simple endpoint via POST:\n \n\nPOST http://mywebsite/api/3.0/auth/signin\n\n\nThe response will come in the form of XML and give us two critical items: our \ntoken, and our site ID:\n\nClearly a user-friendly experience.List Views by Site\nNext up we're GETing the following endpoint:\n\nhttp://mywebsite/api/3.0/sites/543fc0-4123572-483276-9345d8c-96005d532b2fb33/views\n\n\nNote that Tableau asks for the site ID from the previous response to be part of\nthe URL string.\n\nWe'll also need to set headers, so do that.\n\nX-Tableau-Auth: SPMJsdfgHIDUFihdwPqf-5k8GCZJA|sXhFBHzzqksB6K567fsQvtCfTtakqrJLuQ6Cf\n\n\nThe motherload of views.Reap your Reward\nPick the notebook ID you're looking to extract data from. Chose wisely. Your\ntime now. Enter that view into the final endpoint URL:\n\nhttp://mysite/api/3.0/sites/983445c0-4172-4876-9d8c-96005db2gfdgdfb33/views/c0357db9-71b1-4besdfgd1-a14e-5a5f7a36d410/data\n\n\nWhoa mama.Well, Well, Well.\nSo now you know how to generate a Tableau REST API token at will. You also know\nall your view IDs, and how to extract the data from any of those views in a\nfriendly CSV format which happens to play nice with databases. There's a Pandas\nscript waiting to be written here somewhere.\n\nAt this point, you know have all the tools you need to automate the systematic\npillaging of your Tableau Server data. Take a brief moment to remember the days\nwhen Tableau would wave their flags through the countryside as a sign of\ntaunting warfare. They've collected your company's checks and gave you iFrames\nin return.\n\nGo onwards my brethren. For one chance, discover the lands of Plot.ly and D3 as\nFree Men. They may take our paychecks, but they will never take our data.","html":"<p>Before we get into the specifics of how to sadistically abuse Tableau, let's clear the air: there's something about inaccessible, expensive, proprietary enterprise software that tends to put me in a touchy mood. As we know, B2B software pricing has nothing to do with code quality or even value-add, but rather the tendency of businesses to create time-based urgencies without warning; the kinds of urgencies which may be solved by, say, a tool of sorts.</p><p>My first interaction with Tableau actually took place after I had committed myself to the cult of Python's Pandas library and all that comes with it. Tableau does little to hide the fact that it is a GUI for data manipulation and SQL queries; in most cases, the calculation syntax is exactly the same. From my perspective, Tableau could be a tool to save time: instead of rewriting variations of the same scripts over and over, I could use Tableau to do these tasks visually for both speed and transparency's sake. It was a win-win for trivial tasks, except for one: the ability to write back to a database. You'd think I wouldn't think that far ahead before purchasing my own Tableau server and license, conveniently billed upfront annually.</p><h2 id=\"the-rise-of-etl\">The Rise of ETL</h2><p>The presence of ETL as an acronym is a perfect reflection of where we are in data engineering's growth trajectory. The lack of effective <strong>Extract, Transform, and Load</strong> workflow products tell us a couple things: we have too many data sources (whether they be APIs or private data sets), and the raw data is virtually unusable until cleaned. This process could be relatively trivial with the right software. There are plenty of contenders to make this process simple, and I'd like to express in unadulterated astonishment that they are all<strong> failing miserably</strong> at solving this task effectively, mostly thanks to poor decision making and human error alone.</p><h3 id=\"the-etl-market\">The ETL Market</h3><p>As it stands, <a href=\"Parabola.io\">Parabola.io</a> tops my list of ETL products. Parabola hits the nail on the head when it comes to UI and ease of use. This begs the question: why, then, are their latest releases focused on support for extraction to garbage products like <strong>Smartsheet</strong>? Currently the only extract location which is <em>actually a database</em> is MySQL. As much as I want Parabola to succeed, nothing has improved if our workflow still involves manually setting up a third party DB with a schema which perfectly matches our output.</p><p>Google Cloud is doing its best to somehow tie separate products together such as <strong>Dataprep</strong> and <strong>Bigquery</strong>. We'll see how that goes- there's no mention of data extraction from APIs in this flow just yet. We might be waiting for some time for Google's perfect answer to mature.</p><p>Github Labs supposedly just announced recent efforts to tackle this space as well with the upcoming <a href=\"https://about.gitlab.com/2018/08/01/hey-data-teams-we-are-working-on-a-tool-just-for-you/\">Melatano</a>. Hopefully they have their heads on straight.</p><p>Anyway, since the world has failed us, we'll just exploit a Tableau backdoor to do this while humanity catches up.</p><h2 id=\"tableau-s-rest-api\">Tableau's Rest API</h2><p>As hard as Tableau tries to obfuscate anything and everything, their REST API gets us exactly what we want after a bit of red tape. We need to run 3 API calls:</p><ul><li><strong>POST /api/[<em>api-version]</em>/auth/signin</strong>: Generate a token so we can actually use the API</li><li><strong>GET /api/3.0/sites/[site-id]/views</strong>:<strong> </strong>List all view metadata in a Tableau \"site.\"</li><li><strong>GET /api/3.0/sites/[site-id]/views/[view-id]/data</strong>: Receive a comma delimitated response of the content of your target view</li></ul><h3 id=\"what-r-u-token-about\">What R U Token about</h3><p>To receive our token, we'll use basic auth to hit this simple endpoint via POST: </p><pre><code class=\"language-shell\">POST http://mywebsite/api/3.0/auth/signin\n</code></pre>\n<p>The response will come in the form of XML and give us two critical items: our <strong>token</strong>, and our <strong>site ID</strong>:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://hackersandslackers.com/content/images/2019/02/Screen-Shot-2018-08-03-at-7.50.59-AM.png\" class=\"kg-image\"><figcaption>Clearly a user-friendly experience.</figcaption></figure><h3 id=\"list-views-by-site\">List Views by Site</h3><p>Next up we're GETing the following endpoint:</p><pre><code class=\"language-shell\">http://mywebsite/api/3.0/sites/543fc0-4123572-483276-9345d8c-96005d532b2fb33/views\n</code></pre>\n<p>Note that Tableau asks for the <strong>site ID </strong>from the previous response to be part of the URL string.</p><p>We'll also need to set headers, so do that.</p><pre><code class=\"language-shell\">X-Tableau-Auth: SPMJsdfgHIDUFihdwPqf-5k8GCZJA|sXhFBHzzqksB6K567fsQvtCfTtakqrJLuQ6Cf\n</code></pre>\n<figure class=\"kg-card kg-image-card\"><img src=\"https://hackersandslackers.com/content/images/2019/02/Screen-Shot-2018-08-03-at-7.57.47-AM.png\" class=\"kg-image\"><figcaption>The motherload of views.</figcaption></figure><h3 id=\"reap-your-reward\">Reap your Reward</h3><p>Pick the notebook ID you're looking to extract data from. Chose wisely. Your time now. Enter that view into the final endpoint URL:</p><pre><code class=\"language-shell\">http://mysite/api/3.0/sites/983445c0-4172-4876-9d8c-96005db2gfdgdfb33/views/c0357db9-71b1-4besdfgd1-a14e-5a5f7a36d410/data\n</code></pre>\n<figure class=\"kg-card kg-image-card\"><img src=\"https://hackersandslackers.com/content/images/2019/02/Screen-Shot-2018-08-03-at-8.01.24-AM.png\" class=\"kg-image\"><figcaption>Whoa mama.</figcaption></figure><h2 id=\"well-well-well-\">Well, Well, Well.</h2><p>So now you know how to generate a Tableau REST API token at will. You also know all your view IDs, and how to extract the data from any of those views in a friendly CSV format which happens to play nice with databases. There's a Pandas script waiting to be written here somewhere.</p><p>At this point, you know have all the tools you need to automate the systematic pillaging of your Tableau Server data. Take a brief moment to remember the days when Tableau would wave their flags through the countryside as a sign of taunting warfare. They've collected your company's checks and gave you iFrames in return.</p><p>Go onwards my brethren. For one chance, discover the lands of Plot.ly and D3 as Free Men. They may take our paychecks, but they will <strong>never </strong>take our data.</p>","url":"https://hackersandslackers.com/turning-tableau-into-an-etl-tool-using-the-rest-api/","uuid":"7b86dd9c-7d93-4518-8f3a-b593a6cdb7f0","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b61ac60d2852c0dc51d9217"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736ba","title":"Lynx Roundup, August 3rd","slug":"lynx-roundup-august-3rd","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/lynx62-2.jpg","excerpt":"Serverless!  Functional programming!  Topological Data Analysis!","custom_excerpt":"Serverless!  Functional programming!  Topological Data Analysis!","created_at_pretty":"21 July, 2018","published_at_pretty":"03 August, 2018","updated_at_pretty":"23 March, 2019","created_at":"2018-07-20T22:30:26.000-04:00","published_at":"2018-08-03T07:00:00.000-04:00","updated_at":"2019-03-22T23:55:37.000-04:00","meta_title":"Lynx Roundup, August 3rd | Hackers And Slackers","meta_description":"Serverless!  Functional programming!  Topological Data Analysis!","og_description":"Serverless!  Functional programming!  Topological Data Analysis!","og_image":"https://hackersandslackers.com/content/images/2019/03/lynx62-2.jpg","og_title":"Lynx Roundup, August 3rd","twitter_description":"Serverless!  Functional programming!  Topological Data Analysis!","twitter_image":"https://hackersandslackers.com/content/images/2019/03/lynx62-1.jpg","twitter_title":"Lynx Roundup, August 3rd","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://technology.comicrelief.com/2018/07/12/serverless-at-comic-relief/\n\n\n\nhttps://drewdevault.com/2018/07/02/Email-driven-git.html\n\n\n\nhttps://www.ebayinc.com/stories/blogs/tech/event-sourcing-connecting-the-dots-for-a-better-future/\n\n\n\nhttps://www.ebayinc.com/stories/blogs/tech/functional-thinking/\n\n\n\nhttps://towardsdatascience.com/learning-a-new-data-science-language-aa7656be730a\n\n\n\nhttps://towardsdatascience.com/from-tda-to-dl-d06f234f51d","html":"<p></p><p><a href=\"https://technology.comicrelief.com/2018/07/12/serverless-at-comic-relief/\">https://technology.comicrelief.com/2018/07/12/serverless-at-comic-relief/</a></p><p></p><p><a href=\"https://drewdevault.com/2018/07/02/Email-driven-git.html\">https://drewdevault.com/2018/07/02/Email-driven-git.html</a></p><p></p><p><a href=\"https://www.ebayinc.com/stories/blogs/tech/event-sourcing-connecting-the-dots-for-a-better-future/\">https://www.ebayinc.com/stories/blogs/tech/event-sourcing-connecting-the-dots-for-a-better-future/</a></p><p></p><p><a href=\"https://www.ebayinc.com/stories/blogs/tech/functional-thinking/\">https://www.ebayinc.com/stories/blogs/tech/functional-thinking/</a></p><p></p><p><a href=\"https://towardsdatascience.com/learning-a-new-data-science-language-aa7656be730a\">https://towardsdatascience.com/learning-a-new-data-science-language-aa7656be730a</a></p><p></p><p><a href=\"https://towardsdatascience.com/from-tda-to-dl-d06f234f51d\">https://towardsdatascience.com/from-tda-to-dl-d06f234f51d</a></p>","url":"https://hackersandslackers.com/lynx-roundup-august-3rd/","uuid":"f156305c-42ae-403f-afaf-e1873d2ebe2b","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b529ac2529141018f9dad11"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736b9","title":"Lynx Roundup, August 2nd","slug":"lynx-roundup-august-2nd","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx34@2x.jpg","excerpt":"Web architecture!  Goodreads!  Migration!","custom_excerpt":"Web architecture!  Goodreads!  Migration!","created_at_pretty":"21 July, 2018","published_at_pretty":"02 August, 2018","updated_at_pretty":"02 August, 2018","created_at":"2018-07-20T22:28:35.000-04:00","published_at":"2018-08-02T07:00:00.000-04:00","updated_at":"2018-08-02T13:24:43.000-04:00","meta_title":"Web architecture!  Goodreads!  Migration! | Hackers And Slackers","meta_description":"Web architecture!  Goodreads!  Migration!","og_description":"Web architecture!  Goodreads!  Migration!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx34@2x.jpg","og_title":"Lynx Roundup, August 2nd","twitter_description":"Web architecture!  Goodreads!  Migration!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx34@2x.jpg","twitter_title":"Lynx Roundup, August 2nd","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://muratbuffalo.blogspot.com/2018/07/if-youre-not-writing-program-dont-use.html\n\n\n\nhttps://engineering.videoblocks.com/web-architecture-101-a3224e126947?ref=abhimanyu\n\n\n\nhttps://www.deps.co/blog/google-cloud-platform-good-bad-ugly/\n\n\n\nhttps://aws.amazon.com/blogs/big-data/how-goodreads-offloads-amazon-dynamodb-tables-to-amazon-s3-and-queries-them-using-amazon-athena/\n\n\n\nhttps://medium.com/prodopsio/migrating-a-100k-requests-per-minute-production-from-aws-elastic-beanstalk-to-ecs-ed26b62ff98c\n\n\n\nhttps://engineering.depop.com/aws-migration-a-depop-story-1444e9aaad31","html":"<p></p><p><a href=\"https://muratbuffalo.blogspot.com/2018/07/if-youre-not-writing-program-dont-use.html\">https://muratbuffalo.blogspot.com/2018/07/if-youre-not-writing-program-dont-use.html</a></p><p></p><p><a href=\"https://engineering.videoblocks.com/web-architecture-101-a3224e126947?ref=abhimanyu\">https://engineering.videoblocks.com/web-architecture-101-a3224e126947?ref=abhimanyu</a></p><p></p><p><a href=\"https://www.deps.co/blog/google-cloud-platform-good-bad-ugly/\">https://www.deps.co/blog/google-cloud-platform-good-bad-ugly/</a></p><p></p><p><a href=\"https://aws.amazon.com/blogs/big-data/how-goodreads-offloads-amazon-dynamodb-tables-to-amazon-s3-and-queries-them-using-amazon-athena/\">https://aws.amazon.com/blogs/big-data/how-goodreads-offloads-amazon-dynamodb-tables-to-amazon-s3-and-queries-them-using-amazon-athena/</a></p><p></p><p><a href=\"https://medium.com/prodopsio/migrating-a-100k-requests-per-minute-production-from-aws-elastic-beanstalk-to-ecs-ed26b62ff98c\">https://medium.com/prodopsio/migrating-a-100k-requests-per-minute-production-from-aws-elastic-beanstalk-to-ecs-ed26b62ff98c</a></p><p></p><p><a href=\"https://engineering.depop.com/aws-migration-a-depop-story-1444e9aaad31\">https://engineering.depop.com/aws-migration-a-depop-story-1444e9aaad31</a></p>","url":"https://hackersandslackers.com/lynx-roundup-august-2nd/","uuid":"959e3cf3-69a1-40cc-a13e-b19a6fba6745","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b529a53529141018f9dad0e"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736b8","title":"Lynx Roundup, August 1st","slug":"lynx-roundup-august-1st","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/lynx60-2.jpg","excerpt":"Cassandra!  Text mining!  And make sure to Support Vector Machines!","custom_excerpt":"Cassandra!  Text mining!  And make sure to Support Vector Machines!","created_at_pretty":"21 July, 2018","published_at_pretty":"01 August, 2018","updated_at_pretty":"23 March, 2019","created_at":"2018-07-20T22:26:17.000-04:00","published_at":"2018-08-01T07:00:00.000-04:00","updated_at":"2019-03-22T23:54:09.000-04:00","meta_title":"Lynx Roundup, August 1st | Hackers And Slackers","meta_description":"Cassandra!  Text mining!  And make sure to Support Vector Machines!","og_description":"Cassandra!  Text mining!  And make sure to Support Vector Machines!","og_image":"https://hackersandslackers.com/content/images/2019/03/lynx60-2.jpg","og_title":"Lynx Roundup, August 1st","twitter_description":"Cassandra!  Text mining!  And make sure to Support Vector Machines!","twitter_image":"https://hackersandslackers.com/content/images/2019/03/lynx60-1.jpg","twitter_title":"Lynx Roundup, August 1st","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://aws.amazon.com/blogs/database/stream-changes-from-amazon-rds-for-postgresql-using-amazon-kinesis-data-streams-and-aws-lambda/\n\n\n\nhttps://github.com/alexklibisz/elastik-nearest-neighbors/\n\n\n\nhttps://dzone.com/articles/best-practices-for-cassandra-data-modeling\n\n\n\nhttps://www.kdnuggets.com/2018/07/text-mining-command-line.html\n\n\n\nhttps://www.datacamp.com/community/tutorials/svm-classification-scikit-learn-python\n\n\n\nhttps://datacenterfrontier.com/as-cloud-investment-surges-whats-the-new-normal-for-data-centers/","html":"<p></p><p><a href=\"https://aws.amazon.com/blogs/database/stream-changes-from-amazon-rds-for-postgresql-using-amazon-kinesis-data-streams-and-aws-lambda/\">https://aws.amazon.com/blogs/database/stream-changes-from-amazon-rds-for-postgresql-using-amazon-kinesis-data-streams-and-aws-lambda/</a></p><p></p><p><a href=\"https://github.com/alexklibisz/elastik-nearest-neighbors/\">https://github.com/alexklibisz/elastik-nearest-neighbors/</a></p><p></p><p><a href=\"https://dzone.com/articles/best-practices-for-cassandra-data-modeling\">https://dzone.com/articles/best-practices-for-cassandra-data-modeling</a></p><p></p><p><a href=\"https://www.kdnuggets.com/2018/07/text-mining-command-line.html\">https://www.kdnuggets.com/2018/07/text-mining-command-line.html</a></p><p></p><p><a href=\"https://www.datacamp.com/community/tutorials/svm-classification-scikit-learn-python\">https://www.datacamp.com/community/tutorials/svm-classification-scikit-learn-python</a></p><p></p><p><a href=\"https://datacenterfrontier.com/as-cloud-investment-surges-whats-the-new-normal-for-data-centers/\">https://datacenterfrontier.com/as-cloud-investment-surges-whats-the-new-normal-for-data-centers/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-august-1st/","uuid":"1b245639-3d17-41bd-8c26-6976662d07a7","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b5299c9529141018f9dad0b"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736c6","title":"Using MongoDB Atlas as your Flask Database","slug":"using-mongodb-atlas-as-your-flask-database","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/flaskpymongo@2x.jpg","excerpt":"Since you prefer using Python and Flask, I’ll assume we both prefer enjoyable dev.","custom_excerpt":"Since you prefer using Python and Flask, I’ll assume we both prefer enjoyable dev.","created_at_pretty":"28 July, 2018","published_at_pretty":"31 July, 2018","updated_at_pretty":"07 March, 2019","created_at":"2018-07-28T13:42:54.000-04:00","published_at":"2018-07-31T16:59:00.000-04:00","updated_at":"2019-03-07T01:02:11.000-05:00","meta_title":"Using MongoDB Atlas as your Flask Database | Hackers And Slackers","meta_description":"MongoDB Atlas and Stitch are easy to use, making Mongo’s cloud offering a natural choice for quick Flask-based applications.","og_description":"MongoDB Atlas and Stitch are easy to use, making Mongo’s cloud offering a natural choice for quick Flask-based applications.","og_image":"https://hackersandslackers.com/content/images/2019/03/flaskpymongo@2x.jpg","og_title":"Using MongoDB Atlas as your Flask Database","twitter_description":"MongoDB Atlas and Stitch are easy to use, making Mongo’s cloud offering a natural choice for quick Flask-based applications.","twitter_image":"https://hackersandslackers.com/content/images/2019/03/flaskpymongo@2x.jpg","twitter_title":"Using MongoDB Atlas as your Flask Database","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"NoSQL","slug":"nosql","description":"Schemaless data for gunslingers. Heavily focused on databases such as MongoDB, as well as hosting said databases as cloud instances.","feature_image":null,"meta_description":"Schemaless data for gunslingers. Heavily focused on databases such as MongoDB, as well as hosting said databases as cloud instances.","meta_title":"NoSQL | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"},{"name":"#Building Flask Apps","slug":"building-flask-apps","description":"Python’s fast-growing and flexible microframework. Can handle apps as simple as API endpoints, to monoliths remininiscent of Django.","feature_image":"https://hackersandslackers.com/content/images/2019/03/flask-gettingstarted.jpg","meta_description":"Python’s fastest growing, most flexible, and perhaps most Pythonic framework.","meta_title":"Building Flask Apps","visibility":"internal"}],"plaintext":"It's been roughly a year since MongoDB launched their Stitch: a \"back-end as a\nservice\" cloud offering. I've been tinkering with Mongo on the cloud ever\nsince... Alright fine, \"tinkering with\"  may better be described as\"accidentally\nbecame dependent on it after developing new features in production\nenvironments,\" but I can't really complain thus-far. If you're not familiar, \nMongoDB Atlas  is MongoDB's cloud-hosted database offering; that is to say, the\nsame as any other MongoDB database, except very expensive.\n\nThe jury is still out on how MongoDB Atlas  and its counterpart Stitch  will fit\ninto the picture of next generation cloud services. That said, I can vouch that\nMongo products are simply fun to use  for developers, especially when compared\nto  traditional rigid alternatives. Since I would also group Python  and Flask \nin the 'fun to use' category, selecting MongoDB as the database for your Flask\napp makes a lot of sense.\n\nFor this tutorial we're going to set up a simple app where users can submit\ninformation via a form to MongoDB. After writing to our database, we'll query\nthe db to see the results. The result will be a Flask app with the following\nfile structure:\n\nmy-flask-project\n├── templates/\n├── static/\n├── app.py\n├── config.py\n├── currenttime.py\n└── form.py\n\n\nConnect to your Database with PyMongo\nPyMongo  is Python's go-to library for interacting with MongoDB. \n\nWe'll keep all database connection logic within db.py. After importing PyMongo,\nmost of the configuration we need to handle happens in a single line containing\nour MongoDB URI: the massive string which contains our DB location, creds, and\nauthorization DB. The string is broken down like this:\n\nmongodb+srv://[username]:[password]@[projectname]-gktww.gcp.mongodb.net/[authDB]\n\n\nAuthenticate with a [username]  and [password] you’ve set up in whichever\ndatabase handles authentication for your MongoDB instance (this is also what \n[authDB]  is referring to). \n\n[projectname]  is the unique name of your cloud instance. The rest of the URI\ncontains some nonsense, including the host of your particular instance (I’m\nusing Google Cloud, hence the .gcp in the URI). Most of this information can be\nfound just by jumping on mongodb.com [https://www.mongodb.com/]  and\ninvestigating your URI via the \"connect\" popup:\n\nThat should make things a bit easier.Now we can set up our connection:\n\nimport pymongo\n\nmongo = pymongo.MongoClient('mongodb+srv://username:password@hackerdata-gktww.gcp.mongodb.net/admin', maxPoolSize=50, connect=False)\n\n\nNote that we intentionally set the connection to False. Otherwise, we're going\nto find ourselves in a hell of managing open connections every time we interact\nwith the DB.\n\nSpeaking of the DB, we need to specify which database and collection we want to\ninteract with. This brings our config file to something as follows:\n\nimport pymongo\n\nmongo = pymongo.MongoClient('mongodb+srv://username:password@myInstance-gktww.gcp.mongodb.net/admin', maxPoolSize=50, connect=False)\n\ndb = pymongo.database.Database(mongo, 'mydatabase')\ncol = pymongo.collection.Collection(db, 'mycollection')\n\n\nLastly, if you'd like to access, say, all the objects inside of a collection (or\nsimilar query), we'll just need to add a few lines line to ensure we're reading\nthe collection's data:\n\nimport pymongo\nfrom bson.json_util import dumps\nimport json\n\nmongo = pymongo.MongoClient('mongodb+srv://username:password@myInstance-gktww.gcp.mongodb.net/admin', maxPoolSize=50, connect=False)\n\ndb = pymongo.database.Database(mongo, 'mydatabase')\ncol = pymongo.collection.Collection(db, 'mycollection')\n\ncol_results = json.loads(dumps(col.find().limit(5).sort(\"time\", -1)))\n\n\nRemember that Mongo returns BSON objects as opposed to JSON objects, which isn't\nvery useful for our purposes. To alleviate this we'll do a messy little dance to\nconvert Mongo's BSON into a string, and convert this to JSON using json.dumps().\n\nNote: the need to do this may have been something changed in recent versions of\nMongo, as I have older application functioning where this wasn't the case.\n¯\\_(ツ)_/¯.\n\nCreating a Form\nHeading over to form.py, we just need to set up a simple single-field form for\nusers to submit their URLs. For the sake of Python, let's say we're only\naccepting URLs for Jupyter noteboooks:\n\nfrom wtforms import Form, StringField, validators\nfrom wtforms.validators import DataRequired, Regexp\n\nclass myForm(Form):\n    \"\"\"Homepage form.\"\"\"\n    PlotlyURL = StringField('Provide a raw .ipynb URL from Github',\n    validators=[\n            DataRequired(),\n            Regexp(\".*\\.ipynb$\",\n            message=\"Please provide a URL ending in ipynb\"),\n          ])\n\n\nWe could have an entire tutorial just about Flask's WTForms\n[http://flask.pocoo.org/docs/1.0/patterns/wtforms/], but let's stay on topic\n and move on to currenttime.py.\n\nAdding Time Metadata\nIn a lot of cases where we store information to a database, we at least want to\nadd certain metadata such as the time something was added. This allows us to\narrange results by most recently updated, which we'll be doing in this example.\n\nfrom datetime import datetime, timezone\n\ndef getTime():\n    \"\"\"Get user's current time\"\"\"\n    rightnow = datetime.today()\n    return rightnow\n\ndef getPrettyTime():\n    \"\"\"Get user's pretty current time\"\"\"\n    rightnow = datetime.today()\n    prettytime = rightnow.ctime()\n    return prettytime\n\nyourtime = getTime()\nprettytime = getPrettyTime()\n\n\nThe variable yourtime  will be a datetime string representing the local time of\nthe user creating a new record. We will use this value to sort the queried\nresults by time. On the contrary,prettytime  will be the same time, only\nformatted in a way that is readable to humans.\n\nPutting the Pieces Together\nFinally we get to move on app.py and get this thing moving. We'll initiate our\napp by importing the necessary libraries, as well as the scripts we just\ncreated:\n\nfrom flask import Flask, render_template, Markup, request, redirect\nfrom config import col, col_results\nimport requests\nfrom form import myForm\nfrom flask_static_compress import FlaskStaticCompress\nfrom currenttime import yourtime, prettytime\nimport logging\n\n\nNote that we need to import from the DB config we set earlier is the \"col\"\nvariable; we'll only be interacting directly with the collection we want to\nmodify, and the rest is assumed within the config file itself. Now let's build a\nroute for our homepage that does two things:\n\n * Allows users to submit a URL via the simple form we created\n * Displays all previous searches by all users.\n\nfrom flask import Flask, render_template, Markup, request, redirect\nfrom config import col, col_results\nimport requests\nfrom form import myForm\nfrom flask_static_compress import FlaskStaticCompress\nfrom currenttime import yourtime, prettytime\nimport logging\n\n@app.route('/', methods=['GET', 'POST', 'OPTIONS'])\ndef home():\n    \"\"\"Landing page.\"\"\"\n    recent_searches = list(col_results)\n    return render_template('/index.html', form=myForm(), recents=recent_searches, template=\"home-template\")\n\n\nThere's only two significant lines here, but let's break them down piece by\npiece.\n\nrecent_searches\nFirst we set a recent_searches  variable which is essentially a query against\nour collection to retrieve a list of previous searches. We ask that these be\nreturned as a list()  upfront. Typically the find() method would contain the\nconstraints of our query, but we're simply asking to return all  results in the\ncollection, with a limit()  up to 5. Finally, we sort()  the results by the\nfield we refer to as 'time' is descending order, as noted by the -1 argument.\n\nThis is all probably very difficult to visualize without a graphic. Here's a\nsnapshot of the collection we're defining with dummy data added:\n\nSee why we need to differentiate \"time\" and \"prettytime\"?render_template\nWe already know [https://hackersandslackers.com/serving-static-assets-in-flask/] \n the basics of serving templates and assets in Flask, so it shouldn't be too\ndifficult to break down the last line in our route:\n\n * '/index.html'  specifies the base template we'll be serving up.\n * form=myForm()  passes the form class we created earlier to the form partial\n   we're including as part of the index page.\n * recents=recent_searches  passes the query of previous searches to the\n   template, with which we can build a widget.\n * template=\"home-template\" is a simple variable passed which we'll utilize as a\n   class on the page we're loading.\n\nThe Result\nFrom everything we've completed, you should be expecting to see a somewhat\nworthless page where users can submit links via a form, simply to see results\nposted by previous posters. If we expand on this idea just a bit, we can see how\nsomething so simple can actually be extended to a full product: \n\n> Planet Jupyter [https://planetjupyter.com]\nStyle your Jupyter Notebooks.\n\n\nPlanet Jupyter is demo product we built at H&S to style Jupyter notebooks.\nPerhaps 60% of the logic behind Planet Jupyter is the simple DB interactions we\njust covered, with the rest being added flair.\n\nThis is not a shameless plug for the barely functioning toys we've built, mind\nyou, but rather an example of simple DB interactions using Flask can be easily\nextensible into relevant, useful, products.\n\nWe hope you’ve found this tutorial to be useful!","html":"<p>It's been roughly a year since MongoDB launched their <strong>Stitch: </strong>a \"back-end as a service\" cloud offering. I've been tinkering with Mongo on the cloud ever since... Alright fine, <em>\"tinkering with\"</em> may better be described as  <em>\"accidentally became dependent on it after developing new features in production environments,\" </em>but I can't really complain thus-far. If you're not familiar, <strong>MongoDB Atlas</strong> is MongoDB's cloud-hosted database offering; that is to say, the same as any other MongoDB database, except very expensive.</p><p>The jury is still out on how MongoDB <strong>Atlas</strong> and its counterpart <strong>Stitch</strong> will fit into the picture of next generation cloud services. That said, I can vouch that Mongo products are simply <em>fun to use</em> for developers, especially when compared to  traditional rigid alternatives. Since I would also group <em>Python</em> and <em>Flask</em> in the 'fun to use' category, selecting MongoDB as the database for your Flask app makes a lot of sense.</p><p>For this tutorial we're going to set up a simple app where users can submit information via a form to MongoDB. After writing to our database, we'll query the db to see the results. The result will be a Flask app with the following file structure:</p><pre><code class=\"language-shell\">my-flask-project\n├── templates/\n├── static/\n├── app.py\n├── config.py\n├── currenttime.py\n└── form.py\n</code></pre>\n<h2 id=\"connect-to-your-database-with-pymongo\">Connect to your Database with PyMongo</h2><p><strong>PyMongo</strong> is Python's go-to library for interacting with MongoDB. </p><p>We'll keep all database connection logic within <strong>db.py</strong>. After importing PyMongo, most of the configuration we need to handle happens in a single line containing our MongoDB URI: the massive string which contains our DB location, creds, and authorization DB. The string is broken down like this:</p><pre><code class=\"language-shell\">mongodb+srv://[username]:[password]@[projectname]-gktww.gcp.mongodb.net/[authDB]\n</code></pre>\n<p>Authenticate with a <strong>[username]</strong> and <strong>[password] </strong>you’ve set up in whichever database handles authentication for your MongoDB instance (this is also what<strong> [authDB]</strong> is referring to). </p><p><strong>[projectname]</strong> is the unique name of your cloud instance. The rest of the URI contains some nonsense, including the host of your particular instance (I’m using Google Cloud, hence the .gcp in the URI). Most of this information can be found just by jumping on <a href=\"https://www.mongodb.com/\">mongodb.com</a> and investigating your URI via the \"connect\" popup:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-1.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/Screen-Shot-2018-07-30-at-9.46.42-PM.png\" class=\"kg-image\"><figcaption>That should make things a bit easier.</figcaption></figure><p>Now we can set up our connection:</p><pre><code class=\"language-python\">import pymongo\n\nmongo = pymongo.MongoClient('mongodb+srv://username:password@hackerdata-gktww.gcp.mongodb.net/admin', maxPoolSize=50, connect=False)\n</code></pre>\n<p>Note that we intentionally set the connection to <strong>False. </strong>Otherwise, we're going to find ourselves in a hell of managing open connections every time we interact with the DB.</p><p>Speaking of the DB, we need to specify which database and collection we want to interact with. This brings our config file to something as follows:</p><pre><code class=\"language-python\">import pymongo\n\nmongo = pymongo.MongoClient('mongodb+srv://username:password@myInstance-gktww.gcp.mongodb.net/admin', maxPoolSize=50, connect=False)\n\ndb = pymongo.database.Database(mongo, 'mydatabase')\ncol = pymongo.collection.Collection(db, 'mycollection')\n</code></pre>\n<p>Lastly, if you'd like to access, say, all the objects inside of a collection (or similar query), we'll just need to add a few lines line to ensure we're reading the collection's data:</p><pre><code class=\"language-python\">import pymongo\nfrom bson.json_util import dumps\nimport json\n\nmongo = pymongo.MongoClient('mongodb+srv://username:password@myInstance-gktww.gcp.mongodb.net/admin', maxPoolSize=50, connect=False)\n\ndb = pymongo.database.Database(mongo, 'mydatabase')\ncol = pymongo.collection.Collection(db, 'mycollection')\n\ncol_results = json.loads(dumps(col.find().limit(5).sort(&quot;time&quot;, -1)))\n</code></pre>\n<p>Remember that Mongo returns BSON objects as opposed to JSON objects, which isn't very useful for our purposes. To alleviate this we'll do a messy little dance to convert Mongo's BSON into a string, and convert this to JSON using <strong>json.dumps()</strong>.</p><p><strong>Note: </strong>the need to do this may have been something changed in recent versions of Mongo, as I have older application functioning where this wasn't the case. ¯\\_(ツ)_/¯.</p><h2 id=\"creating-a-form\">Creating a Form</h2><p>Heading over to <strong>form.py, </strong>we just need to set up a simple single-field form for users to submit their URLs. For the sake of Python, let's say we're only accepting URLs for Jupyter noteboooks:</p><pre><code class=\"language-python\">from wtforms import Form, StringField, validators\nfrom wtforms.validators import DataRequired, Regexp\n\nclass myForm(Form):\n    &quot;&quot;&quot;Homepage form.&quot;&quot;&quot;\n    PlotlyURL = StringField('Provide a raw .ipynb URL from Github',\n    validators=[\n            DataRequired(),\n            Regexp(&quot;.*\\.ipynb$&quot;,\n            message=&quot;Please provide a URL ending in ipynb&quot;),\n          ])\n</code></pre>\n<p>We could have an entire tutorial just about Flask's WTF<a href=\"http://flask.pocoo.org/docs/1.0/patterns/wtforms/\">orms</a>, but let's stay on topic  and move on to <strong>currenttime.py.</strong></p><h2 id=\"adding-time-metadata\">Adding Time Metadata</h2><p>In a lot of cases where we store information to a database, we at least want to add certain metadata such as the time something was added. This allows us to arrange results by most recently updated, which we'll be doing in this example.</p><pre><code class=\"language-python\">from datetime import datetime, timezone\n\ndef getTime():\n    &quot;&quot;&quot;Get user's current time&quot;&quot;&quot;\n    rightnow = datetime.today()\n    return rightnow\n\ndef getPrettyTime():\n    &quot;&quot;&quot;Get user's pretty current time&quot;&quot;&quot;\n    rightnow = datetime.today()\n    prettytime = rightnow.ctime()\n    return prettytime\n\nyourtime = getTime()\nprettytime = getPrettyTime()\n</code></pre>\n<p>The variable <strong>yourtime</strong> will be a datetime string representing the local time of the user creating a new record. We will use this value to sort the queried results by time. On the contrary,  <strong>prettytime</strong> will be the same time, only formatted in a way that is readable to humans.</p><h2 id=\"putting-the-pieces-together\">Putting the Pieces Together</h2><p>Finally we get to move on <strong>app.py </strong>and get this thing moving. We'll initiate our app by importing the necessary libraries, as well as the scripts we just created:</p><pre><code class=\"language-python\">from flask import Flask, render_template, Markup, request, redirect\nfrom config import col, col_results\nimport requests\nfrom form import myForm\nfrom flask_static_compress import FlaskStaticCompress\nfrom currenttime import yourtime, prettytime\nimport logging\n</code></pre>\n<p>Note that we need to import from the DB config we set earlier is the \"col\" variable; we'll only be interacting directly with the collection we want to modify, and the rest is assumed within the config file itself. Now let's build a route for our homepage that does two things:</p><ul><li>Allows users to submit a URL via the simple form we created</li><li>Displays all previous searches by all users.</li></ul><pre><code class=\"language-python\">from flask import Flask, render_template, Markup, request, redirect\nfrom config import col, col_results\nimport requests\nfrom form import myForm\nfrom flask_static_compress import FlaskStaticCompress\nfrom currenttime import yourtime, prettytime\nimport logging\n\n@app.route('/', methods=['GET', 'POST', 'OPTIONS'])\ndef home():\n    &quot;&quot;&quot;Landing page.&quot;&quot;&quot;\n    recent_searches = list(col_results)\n    return render_template('/index.html', form=myForm(), recents=recent_searches, template=&quot;home-template&quot;)\n</code></pre>\n<p>There's only two significant lines here, but let's break them down piece by piece.</p><h3 id=\"recent_searches\">recent_searches</h3><p>First we set a <strong>recent_searches</strong> variable which is essentially a query against our collection to retrieve a list of previous searches. We ask that these be returned as a <strong>list()</strong> upfront. Typically the <strong>find() </strong>method would contain the constraints of our query, but we're simply asking to return <em>all</em> results in the collection, with a <strong>limit()</strong> up to 5. Finally, we <strong>sort()</strong> the results by the field we refer to as 'time' is descending order, as noted by the -1 argument.</p><p>This is all probably very difficult to visualize without a graphic. Here's a snapshot of the collection we're defining with dummy data added:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/Screen-Shot-2018-07-31-at-11.08.44-AM.png\" class=\"kg-image\"><figcaption>See why we need to differentiate \"time\" and \"prettytime\"?</figcaption></figure><h3 id=\"render_template\">render_template</h3><p>We <a href=\"https://hackersandslackers.com/serving-static-assets-in-flask/\">already know</a> the basics of serving templates and assets in Flask, so it shouldn't be too difficult to break down the last line in our route:</p><ul><li><strong>'/index.html'</strong> specifies the base template we'll be serving up.</li><li><strong>form=myForm()</strong> passes the form class we created earlier to the form partial we're including as part of the index page.</li><li><strong>recents=recent_searches</strong> passes the query of previous searches to the template, with which we can build a widget.</li><li><strong>template=\"home-template\" </strong>is a simple variable passed which we'll utilize as a class on the page we're loading.</li></ul><h2 id=\"the-result\">The Result</h2><p>From everything we've completed, you should be expecting to see a somewhat worthless page where users can submit links via a form, simply to see results posted by previous posters. If we expand on this idea just a bit, we can see how something so simple can actually be extended to a full product: </p><blockquote class=\"embedly-card\" data-card-controls=\"0\"><h4><a href=\"https://planetjupyter.com\">Planet Jupyter</a></h4><p>Style your Jupyter Notebooks.</p></blockquote>\n<script async src=\"//cdn.embedly.com/widgets/platform.js\" charset=\"UTF-8\"></script><p>Planet Jupyter is demo product we built at H&amp;S to style Jupyter notebooks. Perhaps 60% of the logic behind Planet Jupyter is the simple DB interactions we just covered, with the rest being added flair.</p><p>This is not a shameless plug for the barely functioning toys we've built, mind you, but rather an example of simple DB interactions using Flask can be easily extensible into relevant, useful, products.</p><p>We hope you’ve found this tutorial to be useful!</p>","url":"https://hackersandslackers.com/using-mongodb-atlas-as-your-flask-database/","uuid":"e8c92cbd-6845-45b5-acfc-a744810eafcd","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b5cab1e2189c353565a2adf"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736b7","title":"Lynx Roundup, July 31st","slug":"lynx-roundup-july-31st","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx24-2@2x.jpg","excerpt":"NumPy!  Spark!  Turbulent viscosity!","custom_excerpt":"NumPy!  Spark!  Turbulent viscosity!","created_at_pretty":"21 July, 2018","published_at_pretty":"31 July, 2018","updated_at_pretty":"31 July, 2018","created_at":"2018-07-20T22:22:53.000-04:00","published_at":"2018-07-31T07:00:00.000-04:00","updated_at":"2018-07-31T07:00:00.000-04:00","meta_title":"NumPy!  Spark!  Turbulent viscosity! | Hackers And Slackers","meta_description":"NumPy!  Spark!  Turbulent viscosity!","og_description":"NumPy!  Spark!  Turbulent viscosity!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx24-2@2x.jpg","og_title":"Lynx Roundup, July 31st","twitter_description":"NumPy!  Spark!  Turbulent viscosity!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx24-2@2x.jpg","twitter_title":"Lynx Roundup, July 31st","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"http://zwmiller.com/projects/setting_up_spark_cluster.html\n\n\n\nhttp://zwmiller.com/blogs/why_numpy_is_so_great.html\n\n\n\nhttps://www.quora.com/How-do-you-print-Hello-World-in-assembly-language-Is-this-much-more-difficult-than-it-would-be-in-machine-language\n\n\n\nhttps://www.quora.com/What-is-the-concept-of-turbulent-viscosity\n\n\n\nShots fired!http://blog.memsql.com/nosql/","html":"<p></p><p><a href=\"http://zwmiller.com/projects/setting_up_spark_cluster.html\">http://zwmiller.com/projects/setting_up_spark_cluster.html</a></p><p></p><p><a href=\"http://zwmiller.com/blogs/why_numpy_is_so_great.html\">http://zwmiller.com/blogs/why_numpy_is_so_great.html</a></p><p></p><p><a href=\"https://www.quora.com/How-do-you-print-Hello-World-in-assembly-language-Is-this-much-more-difficult-than-it-would-be-in-machine-language\">https://www.quora.com/How-do-you-print-Hello-World-in-assembly-language-Is-this-much-more-difficult-than-it-would-be-in-machine-language</a></p><p></p><p><a href=\"https://www.quora.com/What-is-the-concept-of-turbulent-viscosity\">https://www.quora.com/What-is-the-concept-of-turbulent-viscosity</a></p><p></p><p>Shots fired!  <a href=\"http://blog.memsql.com/nosql/\">http://blog.memsql.com/nosql/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-july-31st/","uuid":"db867837-2278-433d-8f99-2f5596f8ef00","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b5298fd529141018f9dad08"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736c4","title":"All That Is Solid Melts Into Graphs","slug":"all-that-is-solid-melts-into-graphs","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/07/iceberg@2x.jpg","excerpt":"Reshaping Pandas dataframes with a real-life example, and graphing it with Altair.","custom_excerpt":"Reshaping Pandas dataframes with a real-life example, and graphing it with Altair.","created_at_pretty":"26 July, 2018","published_at_pretty":"30 July, 2018","updated_at_pretty":"02 February, 2019","created_at":"2018-07-25T21:53:23.000-04:00","published_at":"2018-07-30T07:30:00.000-04:00","updated_at":"2019-02-02T04:07:03.000-05:00","meta_title":"All That Is Solid Melts Into Graphs | Hackers and Slackers","meta_description":"Reshaping Pandas dataframes with a real-life example, and graphing it with Altair","og_description":"Reshaping Pandas dataframes with a real-life example, and graphing it with #Altair","og_image":"https://hackersandslackers.com/content/images/2018/07/iceberg@2x.jpg","og_title":"All That Is Solid Melts Into Graphs","twitter_description":"Reshaping Pandas dataframes with a real-life example, and graphing it with #Altair","twitter_image":"https://hackersandslackers.com/content/images/2018/07/iceberg@2x.jpg","twitter_title":"All That Is Solid Melts Into Graphs","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Pandas","slug":"pandas","description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/pandasmerge.jpg","meta_description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","meta_title":"Pythons and Pandas | Hackers and Slackers","visibility":"public"},{"name":"Code Snippet Corner","slug":"codesnippetcorner","description":"Real-world examples of Python being used to solve complex data problems, primarily using Jupyter notebooks.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o-1.jpg","meta_description":"Real-world examples of Python being used to solve complex data problems.","meta_title":"Python Code Snippet Corner","visibility":"public"},{"name":"#Code Snippet Corner","slug":"code-snippet-corner","description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o_o.jpg","meta_description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","meta_title":"Python Code Snippet Corner","visibility":"internal"}],"plaintext":"Last few Code Snippet Corners were about using Pandas as an easy way to handle\ninput and output between files & databases.  Let's shift gears a little bit!\n Among other reasons, because earlier today I discovered a package that\nexclusively does that, which means I can stop importing the massive Pandas\npackage when all I really wanted to do with it was take advantage of its I/O\nmodules.Check it out [https://github.com/insightindustry/sqlathanor]! \n\nSo, rather than the entrances & exits, let's focus on all the crazy ways you can\nreshape data with Pandas!\n\nOur Data\nFor our demonstration, I'll use a dataset based on something I was once actually\nsent.  It was a big CSV with sensor readings from HVAC systems.  Each line had a\ndifferent house, a different room, a datetime, and readings from a bunch of\ndifferent types of sensors.  Oh, hrm, I probably shouldn't use data I got from a\nclient.  Uh...\n\nBONUS SECTION!\nGENERATING DUMMY TEMPERATURE DATA\n(Feel free to skip to next part if you don't care)\n\nWe want it to fluctuate, but we don't want to just make a bunch of totally\nrandom values - a reading should have some relationship to the reading taken a\nsecond earlier.\n\nLet's use NumPy  for some Randomness, and the accumulate  and repeat  functions\nfrom itertools.  Maybe I'll do an in-depth post on these at some point, but the\ncode I'll be writing with them will be pretty short and hopefully somewhat\nself-demonstrating.  If you wanna go deeper here's some good material: Official\nDocs [https://docs.python.org/3/library/itertools.html], Good article\n[https://realpython.com/python-itertools/]\n\nimport numpy as np\nfrom itertools import accumulate, repeat\n\n\nWe want there to be some random \"noise\", but we also want the occasional\nsubstantive change.  We'll reflect this by having it so that 90% of the time we\nget a small fluctuation, with a 10% chance of a smaller fluctuation. \n\ndef genTempDataPoint(x, *args):\n    if np.random.rand(1) <= 0.9:\n        return x + np.random.uniform(-3,3,1)[0]\n    else:\n        return x + np.random.uniform(-10,10,1)[0]\n\n\n  Now let's see some test points!\n\nlist(accumulate(repeat(70, 5), genTempDataPoint))\n[70,\n 69.00258239202094,\n 59.34919781643355,\n 56.60722073795931,\n 57.265078261782946]\n\n\nSure, fine, why not.  Good enough for our purposes!   Now let's put it all\ntogether so we can just call it with a base temp and the number of points we\nwant.\n\ndef genTempData(base, n):\n    return list(accumulate(repeat(base, n), \n                           genTempDataPoint))\n\n\nTo simulate the dataset, we actually need to mix it up.  Or else what good are\nthe GroupBys gonna be?  So, let's create a problem to fix later!  Here's a\nfunction to create a simplified version of the dataset - each row will have a\nlocation ID, a number corresponding to time (just raw ints, I'm not making\nactual datetimes - I've spent too much time on this part already).  We'll also\ngenerate humidity values, to add another monkey wrench to fix later (we'll still\nuse the genTempData  function).\n\nfrom itertools import chain\n\ndef makeLocation(name, base1, n1, base2, n2):\n    return [(x[0], name, x[1][0], x[1][1]) \n        for x in enumerate(zip(genTempData(base1, n1),\n              genTempData(base2, n2)) )]\n\nbigList = list(chain.from_iterable(makeLocation(str(x), \n                                                70, \n                                                15,\n                                                40, \n                                                15) \n                         for x in range(5)))\nnp.random.shuffle(bigList)\n\ndf = pd.DataFrame(bigList, \n                  columns = [\"Time\", \"Loc\", \"Temp\", \"Hum\"])\n\n\nBack To The Main Plot\nLet's look at some test rows!\n\n# Viewing test rows\n\ndf.iloc[:5]\nTime\tLoc\tTemp     \tHum\n10\t4\t68.396970\t34.169753\n13\t0\t80.288846\t42.076786\n7\t4\t69.923273\t37.967951\n6\t0\t71.781362\t41.186802\n5\t2\t62.678844\t37.321636\n\n\nNow, when I'm getting started with a new dataset, one of the first things I like\nto do is make some graphs.  As of late, my favorite package has been Altair\n[https://altair-viz.github.io/].  Looks very nice by default, is pretty easy to\niterate with, and has nice declarative syntax.\n\nOnly one problem!  It wants date in \"long-form\" - as in, rather than each row\nhaving several variables of interest, each row has one (or more) \"ID\" variables,\none numerical value, and the name of the variable we're measuring.  So for\ninstance, something more like this:\n\nTime\tLoc\tvariable\tvalue\n10\t4\tTemp\t        68.396970\n13\t0\tTemp\t        80.288846\n7\t4\tTemp\t        69.923273\n6\t0\tTemp\t        71.781362\n5\t2\tTemp\t        62.678844\n\n\nNot quite sure why!  Buuut, that's kind of a feature of modern coding - we're\nsitting on an inheritance of libraries that have built up over the years, and so\nmore often than not we're just building the \"plumbing\" between existing stuff.\n It's cool!  And good!  It lets us separate Function from Implementation.  We\ndon't need to know what's going on under the hood - we just need to know thing X\nwill produce an output we want, and that in order to get it we first need to\nreshape what we've already got into an input that it'll accept.  Since that's\nsuch a huge part of coding these days, Pandas' power in that realm is super\nuseful.\n\nSooo, how do we get from here to there?  Shockingly easily!\n\nmelted = pd.melt(df, id_vars=[\"Time\", \"Loc\"])\n\n\nDone!\n\nWell, obviously we're not REALLY done yet.  Half the point of having such terse,\nexpressive code is that we can do MORE things!\n\nLet's say we want to see how humidity & temperature change over the course of\nthe day.  First, we'll have to grab all the readings from a single location.\n Let's say Location 3!\n\nloc3 = melted[melted[\"Loc\"]==\"3\"]\n\n\nAltair's pretty neat.\n\n(alt.Chart(loc3)\n .mark_line()\n .encode(x='Time:O', #We're encoding time as an Ordinal \n         y='value:Q',\n         color='variable:N'))\n\n\nHrm, lot of room there at the bottom.  If we were in an interactive session, we\ncould make this interactive (zoomable and navigable!) by just adding the \n.interactive()  method to the end, but I don't know how to do that in the blog.\n Regardless, it's pretty easy to rescale if we want a closer look!\n\n(alt.Chart(loc3)\n .mark_line()\n .encode(x='Time:O',\n         y=alt.Y('value:Q', scale=alt.Scale(zero=False)),\n         color='variable:N'))\n\n\nLet's try it with just temperature, and color will encode the location!\n\nmeltedJustTemp = pd.melt(df, \n                         id_vars=[\"Time\", \"Loc\"],\n                        value_vars= [\"Temp\"])\n\n(alt.Chart(meltedJustTemp)\n .mark_line()\n .encode(x='Time:O',\n         y='value:Q',\n         color='Loc:N'))\n\n\nLet's zoom in again...\n\n(alt.Chart(meltedJustTemp)\n .mark_line()\n .encode(x='Time:O',\n         y=alt.Y('value:Q', scale=alt.Scale(zero=False)),\n         color='Loc:N'))\n\n\nAltair also lets us Facet our graphs extremely flexibly & painlessly.\n\nalt.Chart(melted).mark_line().encode(\n      x='Time:O',\n      y=alt.Y('value:Q', scale=alt.Scale(zero=False)),\n      color='Loc:N',\n      column=\"variable\")\n\n\nOr how about another way!  Let's see humidity & temp, location by location.\n\nalt.Chart(melted).mark_line().encode(\n      x='Time:O',\n      y=alt.Y('value:Q', scale=alt.Scale(zero=False)),\n      color='variable:N',\n      row=\"Loc\")\n\n\nWe could make them nicer (there's a WIDE array of customizations), but I'm\nlooking to simulate Exploratory Data Analysis.  I can't think of another\ngraphing package in Python that has quite this level of \"instant gratification\"\nfor so many different variations.","html":"<p>Last few Code Snippet Corners were about using Pandas as an easy way to handle input and output between files &amp; databases.  Let's shift gears a little bit!  Among other reasons, because earlier today I discovered a package that exclusively does that, which means I can stop importing the massive Pandas package when all I really wanted to do with it was take advantage of its I/O modules.  <a href=\"https://github.com/insightindustry/sqlathanor\">Check it out</a>! </p><p>So, rather than the entrances &amp; exits, let's focus on all the crazy ways you can reshape data with Pandas!</p><h2 id=\"our-data\">Our Data</h2><p>For our demonstration, I'll use a dataset based on something I was once actually sent.  It was a big CSV with sensor readings from HVAC systems.  Each line had a different house, a different room, a datetime, and readings from a bunch of different types of sensors.  Oh, hrm, I probably shouldn't use data I got from a client.  Uh...</p><h2 id=\"bonus-section-\">BONUS SECTION!</h2><h3 id=\"generating-dummy-temperature-data\">GENERATING DUMMY TEMPERATURE DATA</h3><p><strong>(Feel free to skip to next part if you don't care)</strong></p><p>We want it to fluctuate, but we don't want to just make a bunch of totally random values - a reading should have some relationship to the reading taken a second earlier.</p><p>Let's use <code>NumPy</code> for some Randomness, and the <code>accumulate</code> and <code>repeat</code> functions from <code>itertools</code>.  Maybe I'll do an in-depth post on these at some point, but the code I'll be writing with them will be pretty short and hopefully somewhat self-demonstrating.  If you wanna go deeper here's some good material: <a href=\"https://docs.python.org/3/library/itertools.html\">Official Docs</a>, <a href=\"https://realpython.com/python-itertools/\">Good article</a></p><pre><code class=\"language-python\">import numpy as np\nfrom itertools import accumulate, repeat\n</code></pre>\n<p>We want there to be some random \"noise\", but we also want the occasional substantive change.  We'll reflect this by having it so that 90% of the time we get a small fluctuation, with a 10% chance of a smaller fluctuation. </p><pre><code class=\"language-python\">def genTempDataPoint(x, *args):\n    if np.random.rand(1) &lt;= 0.9:\n        return x + np.random.uniform(-3,3,1)[0]\n    else:\n        return x + np.random.uniform(-10,10,1)[0]\n</code></pre>\n<p> Now let's see some test points!</p><pre><code class=\"language-python\">list(accumulate(repeat(70, 5), genTempDataPoint))\n[70,\n 69.00258239202094,\n 59.34919781643355,\n 56.60722073795931,\n 57.265078261782946]\n</code></pre>\n<p>Sure, fine, why not.  Good enough for our purposes!   Now let's put it all together so we can just call it with a base temp and the number of points we want.</p><pre><code class=\"language-python\">def genTempData(base, n):\n    return list(accumulate(repeat(base, n), \n                           genTempDataPoint))\n</code></pre>\n<p>To simulate the dataset, we actually need to mix it up.  Or else what good are the GroupBys gonna be?  So, let's create a problem to fix later!  Here's a function to create a simplified version of the dataset - each row will have a location ID, a number corresponding to time (just raw ints, I'm not making actual datetimes - I've spent too much time on this part already).  We'll also generate humidity values, to add another monkey wrench to fix later (we'll still use the <code>genTempData</code> function).</p><pre><code class=\"language-python\">from itertools import chain\n\ndef makeLocation(name, base1, n1, base2, n2):\n    return [(x[0], name, x[1][0], x[1][1]) \n        for x in enumerate(zip(genTempData(base1, n1),\n              genTempData(base2, n2)) )]\n\nbigList = list(chain.from_iterable(makeLocation(str(x), \n                                                70, \n                                                15,\n                                                40, \n                                                15) \n                         for x in range(5)))\nnp.random.shuffle(bigList)\n\ndf = pd.DataFrame(bigList, \n                  columns = [&quot;Time&quot;, &quot;Loc&quot;, &quot;Temp&quot;, &quot;Hum&quot;])\n</code></pre>\n<h2 id=\"back-to-the-main-plot\">Back To The Main Plot</h2><p>Let's look at some test rows!</p><pre><code class=\"language-python\"># Viewing test rows\n\ndf.iloc[:5]\nTime\tLoc\tTemp     \tHum\n10\t4\t68.396970\t34.169753\n13\t0\t80.288846\t42.076786\n7\t4\t69.923273\t37.967951\n6\t0\t71.781362\t41.186802\n5\t2\t62.678844\t37.321636\n</code></pre>\n<p>Now, when I'm getting started with a new dataset, one of the first things I like to do is make some graphs.  As of late, my favorite package has been <a href=\"https://altair-viz.github.io/\">Altair</a>.  Looks very nice by default, is pretty easy to iterate with, and has nice declarative syntax.</p><p>Only one problem!  It wants date in \"long-form\" - as in, rather than each row having several variables of interest, each row has one (or more) \"ID\" variables, one numerical value, and the name of the variable we're measuring.  So for instance, something more like this:</p><pre><code class=\"language-python\">Time\tLoc\tvariable\tvalue\n10\t4\tTemp\t        68.396970\n13\t0\tTemp\t        80.288846\n7\t4\tTemp\t        69.923273\n6\t0\tTemp\t        71.781362\n5\t2\tTemp\t        62.678844\n</code></pre>\n<p>Not quite sure why!  Buuut, that's kind of a feature of modern coding - we're sitting on an inheritance of libraries that have built up over the years, and so more often than not we're just building the \"plumbing\" between existing stuff.  It's cool!  And good!  It lets us separate Function from Implementation.  We don't need to know what's going on under the hood - we just need to know thing X will produce an output we want, and that in order to get it we first need to reshape what we've already got into an input that it'll accept.  Since that's such a huge part of coding these days, Pandas' power in that realm is super useful.</p><p>Sooo, how do we get from here to there?  Shockingly easily!</p><pre><code class=\"language-python\">melted = pd.melt(df, id_vars=[&quot;Time&quot;, &quot;Loc&quot;])\n</code></pre>\n<p>Done!</p><p>Well, obviously we're not REALLY done yet.  Half the point of having such terse, expressive code is that we can do MORE things!</p><p>Let's say we want to see how humidity &amp; temperature change over the course of the day.  First, we'll have to grab all the readings from a single location.  Let's say Location 3!</p><pre><code class=\"language-python\">loc3 = melted[melted[&quot;Loc&quot;]==&quot;3&quot;]\n</code></pre>\n<p>Altair's pretty neat.</p><pre><code class=\"language-python\">(alt.Chart(loc3)\n .mark_line()\n .encode(x='Time:O', #We're encoding time as an Ordinal \n         y='value:Q',\n         color='variable:N'))\n</code></pre>\n<figure class=\"kg-card kg-image-card\"><img src=\"https://res-4.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/visualization--2--1.png\" class=\"kg-image\"></figure><p>Hrm, lot of room there at the bottom.  If we were in an interactive session, we could make this interactive (zoomable and navigable!) by just adding the <code>.interactive()</code> method to the end, but I don't know how to do that in the blog.  Regardless, it's pretty easy to rescale if we want a closer look!</p><pre><code class=\"language-python\">(alt.Chart(loc3)\n .mark_line()\n .encode(x='Time:O',\n         y=alt.Y('value:Q', scale=alt.Scale(zero=False)),\n         color='variable:N'))\n</code></pre>\n<figure class=\"kg-card kg-image-card\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/visualization--3--2.png\" class=\"kg-image\"></figure><p>Let's try it with just temperature, and color will encode the location!</p><pre><code class=\"language-python\">meltedJustTemp = pd.melt(df, \n                         id_vars=[&quot;Time&quot;, &quot;Loc&quot;],\n                        value_vars= [&quot;Temp&quot;])\n\n(alt.Chart(meltedJustTemp)\n .mark_line()\n .encode(x='Time:O',\n         y='value:Q',\n         color='Loc:N'))\n</code></pre>\n<figure class=\"kg-card kg-image-card\"><img src=\"https://res-5.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/visualization--4--2.png\" class=\"kg-image\"></figure><p>Let's zoom in again...</p><pre><code class=\"language-python\">(alt.Chart(meltedJustTemp)\n .mark_line()\n .encode(x='Time:O',\n         y=alt.Y('value:Q', scale=alt.Scale(zero=False)),\n         color='Loc:N'))\n</code></pre>\n<figure class=\"kg-card kg-image-card\"><img src=\"https://res-5.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/visualization--4--2.png\" class=\"kg-image\"></figure><p>Altair also lets us Facet our graphs extremely flexibly &amp; painlessly.</p><pre><code class=\"language-python\">alt.Chart(melted).mark_line().encode(\n      x='Time:O',\n      y=alt.Y('value:Q', scale=alt.Scale(zero=False)),\n      color='Loc:N',\n      column=&quot;variable&quot;)\n</code></pre>\n<figure class=\"kg-card kg-image-card\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/visualization--5--1.png\" class=\"kg-image\"></figure><p>Or how about another way!  Let's see humidity &amp; temp, location by location.</p><pre><code class=\"language-python\">alt.Chart(melted).mark_line().encode(\n      x='Time:O',\n      y=alt.Y('value:Q', scale=alt.Scale(zero=False)),\n      color='variable:N',\n      row=&quot;Loc&quot;)\n</code></pre>\n<figure class=\"kg-card kg-image-card\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/visualization--6--1.png\" class=\"kg-image\"></figure><p>We could make them nicer (there's a WIDE array of customizations), but I'm looking to simulate Exploratory Data Analysis.  I can't think of another graphing package in Python that has quite this level of \"instant gratification\" for so many different variations.</p>","url":"https://hackersandslackers.com/all-that-is-solid-melts-into-graphs/","uuid":"603156b0-ee55-4aaa-b5cd-34950389cd08","page":false,"codeinjection_foot":"<script>\n    hljs.configure({language: ['python']})\n </script>","codeinjection_head":"","comment_id":"5b5929932714bc41b8a370c5"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736b6","title":"Lynx Roundup, July 30th","slug":"lynx-roundup-july-30th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx23@2x.jpg","excerpt":"Random Python!  Random seeds!  Scikit changes!","custom_excerpt":"Random Python!  Random seeds!  Scikit changes!","created_at_pretty":"21 July, 2018","published_at_pretty":"30 July, 2018","updated_at_pretty":"30 July, 2018","created_at":"2018-07-20T22:21:16.000-04:00","published_at":"2018-07-30T07:00:00.000-04:00","updated_at":"2018-07-30T07:00:00.000-04:00","meta_title":"Random Python!  Random seeds!  Scikit changes! | Hackers And Slackers","meta_description":"Random Python!  Random seeds!  Scikit changes!","og_description":"Random Python!  Random seeds!  Scikit changes!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx23@2x.jpg","og_title":"Lynx Roundup, July 30th","twitter_description":"Random Python!  Random seeds!  Scikit changes!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx23@2x.jpg","twitter_title":"Lynx Roundup, July 30th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://realpython.com/python-random/\n\n\n\nhttps://www.dataschool.io/how-to-update-your-scikit-learn-code-for-2018/\n\n\n\nhttps://github.com/accelero-cloud/appkernel\n\n\n\nhttps://openlab-flowers.inria.fr/t/how-many-random-seeds-should-i-use-statistical-power-analysis-in-deep-reinforcement-learning-experiments/457\n\n\n\nhttps://www.hergertarian.com/keras-layers-intro","html":"<p></p><p><a href=\"https://realpython.com/python-random/\">https://realpython.com/python-random/</a></p><p></p><p><a href=\"https://www.dataschool.io/how-to-update-your-scikit-learn-code-for-2018/\">https://www.dataschool.io/how-to-update-your-scikit-learn-code-for-2018/</a></p><p></p><p><a href=\"https://github.com/accelero-cloud/appkernel\">https://github.com/accelero-cloud/appkernel</a></p><p></p><p><a href=\"https://openlab-flowers.inria.fr/t/how-many-random-seeds-should-i-use-statistical-power-analysis-in-deep-reinforcement-learning-experiments/457\">https://openlab-flowers.inria.fr/t/how-many-random-seeds-should-i-use-statistical-power-analysis-in-deep-reinforcement-learning-experiments/457</a></p><p></p><p><a href=\"https://www.hergertarian.com/keras-layers-intro\">https://www.hergertarian.com/keras-layers-intro</a></p>","url":"https://hackersandslackers.com/lynx-roundup-july-30th/","uuid":"aea7f17b-0fde-42c2-91c9-ea374e70bace","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b52989c529141018f9dad05"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736b5","title":"Lynx Roundup, July 29th","slug":"lynx-roundup-july-29th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/04/90.jpg","excerpt":"National AI Strategies!  Your personal AI strategy!  Image classifiers and stuff they've never seen before!","custom_excerpt":"National AI Strategies!  Your personal AI strategy!  Image classifiers and stuff they've never seen before!","created_at_pretty":"21 July, 2018","published_at_pretty":"29 July, 2018","updated_at_pretty":"10 April, 2019","created_at":"2018-07-20T22:18:58.000-04:00","published_at":"2018-07-29T07:00:00.000-04:00","updated_at":"2019-04-10T04:22:38.000-04:00","meta_title":"National AI Strategies!  Your personal AI strategy!  Image classifiers and stuff they've never seen before! | Hackers And Slackers","meta_description":"National AI Strategies!  Your personal AI strategy!  Image classifiers and stuff they've never seen before!","og_description":"National AI Strategies!  Your personal AI strategy!  Image classifiers and stuff they've never seen before!","og_image":"https://hackersandslackers.com/content/images/2019/04/90-2.jpg","og_title":"Lynx Roundup, July 29th","twitter_description":"National AI Strategies!  Your personal AI strategy!  Image classifiers and stuff they've never seen before!","twitter_image":"https://hackersandslackers.com/content/images/2019/04/90-1.jpg","twitter_title":"Lynx Roundup, July 29th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://blog.thedataincubator.com/2018/07/survive-rise-of-ai-data-facilitator\n[https://blog.thedataincubator.com/2018/07/survive-rise-of-ai-data-facilitator/?utm_source=Master+List&utm_campaign=b3f590f6d3-JulyNewsletter_Master&utm_medium=email&utm_term=0_44fcdef9e7-b3f590f6d3-463706345&mc_cid=b3f590f6d3&mc_eid=9090defae1]\n\n\n\nhttps://machinelearningmastery.com/statistical-power-and-power-analysis-in-python/\n[https://machinelearningmastery.com/statistical-power-and-power-analysis-in-python/?__s=bdhbwhyixbffzpidq1p6]\n\n\n\nhttps://medium.com/politics-ai/an-overview-of-national-ai-strategies-2a70ec6edfd\n\n\n\nhttps://petewarden.com/2018/07/06/what-image-classifiers-can-do-about-unknown-objects/\n[https://petewarden.com/2018/07/06/what-image-classifiers-can-do-about-unknown-objects/?utm_campaign=Artificial%2BIntelligence%2BWeekly&utm_medium=email&utm_source=Artificial_Intelligence_Weekly_80]\n\n\n\nhttps://towardsdatascience.com/an-end-to-end-project-on-time-series-analysis-and-forecasting-with-python-4835e6bf050b","html":"<p></p><p><a href=\"https://blog.thedataincubator.com/2018/07/survive-rise-of-ai-data-facilitator/?utm_source=Master+List&amp;utm_campaign=b3f590f6d3-JulyNewsletter_Master&amp;utm_medium=email&amp;utm_term=0_44fcdef9e7-b3f590f6d3-463706345&amp;mc_cid=b3f590f6d3&amp;mc_eid=9090defae1\">https://blog.thedataincubator.com/2018/07/survive-rise-of-ai-data-facilitator</a></p><p></p><p><a href=\"https://machinelearningmastery.com/statistical-power-and-power-analysis-in-python/?__s=bdhbwhyixbffzpidq1p6\">https://machinelearningmastery.com/statistical-power-and-power-analysis-in-python/</a></p><p></p><p><a href=\"https://medium.com/politics-ai/an-overview-of-national-ai-strategies-2a70ec6edfd\">https://medium.com/politics-ai/an-overview-of-national-ai-strategies-2a70ec6edfd</a></p><p></p><p><a href=\"https://petewarden.com/2018/07/06/what-image-classifiers-can-do-about-unknown-objects/?utm_campaign=Artificial%2BIntelligence%2BWeekly&amp;utm_medium=email&amp;utm_source=Artificial_Intelligence_Weekly_80\">https://petewarden.com/2018/07/06/what-image-classifiers-can-do-about-unknown-objects/</a></p><p></p><p><a href=\"https://towardsdatascience.com/an-end-to-end-project-on-time-series-analysis-and-forecasting-with-python-4835e6bf050b\">https://towardsdatascience.com/an-end-to-end-project-on-time-series-analysis-and-forecasting-with-python-4835e6bf050b</a></p>","url":"https://hackersandslackers.com/lynx-roundup-july-29th/","uuid":"2fb4efb9-3c73-43c4-b0bf-1c4bbee005de","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b529812529141018f9dad02"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736c3","title":"Automagically Turn JSON into Pandas DataFrames","slug":"json-into-pandas-dataframes","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/07/json@2x.jpg","excerpt":"Let Pandas do the heavy lifting for you when turning JSON into a DataFrame.","custom_excerpt":"Let Pandas do the heavy lifting for you when turning JSON into a DataFrame.","created_at_pretty":"25 July, 2018","published_at_pretty":"28 July, 2018","updated_at_pretty":"21 February, 2019","created_at":"2018-07-25T10:52:35.000-04:00","published_at":"2018-07-28T08:00:00.000-04:00","updated_at":"2019-02-20T21:35:53.000-05:00","meta_title":"Turn JSON into Pandas DataFrames | Hackers And Slackers","meta_description":"Let Pandas do the heavy lifting for you when turning JSON into a DataFrame, especially when that JSON is heavily nested.","og_description":"Let Pandas do the heavy lifting for you when turning JSON into a DataFrame, especially when that JSON is heavily nested.","og_image":"https://hackersandslackers.com/content/images/2018/07/json@2x.jpg","og_title":"Automagically Turn JSON into Pandas DataFrames","twitter_description":"Let Pandas do the heavy lifting for you when turning JSON into a DataFrame, especially when that JSON is heavily nested.","twitter_image":"https://hackersandslackers.com/content/images/2018/07/json@2x.jpg","twitter_title":"Automagically Turn JSON into Pandas DataFrames","authors":[{"name":"Graham Beckley","slug":"graham","bio":"Loves Python; loves pandas; leaves every project more Pythonic than he found it.","profile_image":"https://hackersandslackers.com/content/images/2019/03/graham2.jpg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Graham Beckley","slug":"graham","bio":"Loves Python; loves pandas; leaves every project more Pythonic than he found it.","profile_image":"https://hackersandslackers.com/content/images/2019/03/graham2.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Pandas","slug":"pandas","description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/pandasmerge.jpg","meta_description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","meta_title":"Pythons and Pandas | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Pandas","slug":"pandas","description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/pandasmerge.jpg","meta_description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","meta_title":"Pythons and Pandas | Hackers and Slackers","visibility":"public"},{"name":"Data Science","slug":"datascience","description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","feature_image":null,"meta_description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","meta_title":"Data Science | Hackers and Slackers","visibility":"public"},{"name":"REST APIs","slug":"restapis","description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","feature_image":null,"meta_description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","meta_title":"Consuming and Building REST APIs | Hackers and Slackers","visibility":"public"},{"name":"#Data Analysis with Pandas","slug":"data-analysis-pandas","description":"Analyze data with Python's Pandas. Start from the basics or see real-life examples of using Pandas to solve problems.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/pandasseries-1.jpg","meta_description":"Analyze data with Python's Pandas. Start from the basics or see real-life examples of using Pandas to solve problems.","meta_title":"Data Analysis with Pandas","visibility":"internal"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"}],"plaintext":"In his post about extracting data from APIs\n[https://hackersandslackers.com/extracting-massive-datasets-from-apis/], Todd\n[https://hackersandslackers.com/author/todd/]  demonstrated a nice way to\nmassage JSON into a pandas DataFrame. This method works great when our JSON\nresponse is flat, because dict.keys()  only gets the keys on the first \"level\"\nof a dictionary. It gets a little trickier when our JSON starts to become nested\nthough, as I experienced when working with Spotify's API\n[https://developer.spotify.com/documentation/web-api/]  via the Spotipy\n[https://spotipy.readthedocs.io/en/latest/]  library. For example, take a look\nat a response from their https://api.spotify.com/v1/tracks/{id}  endpoint:\n\nimport spotipy\nfrom spotipy.oauth2 import SpotifyClientCredentials\n\nspotify_client_id = 'YOUR_ID'\nspotify_client_secret  = 'YOUR_SECRET'\nclient_credentials_manager = SpotifyClientCredentials(client_id=spotify_client_id, client_secret=spotify_client_secret)\nsp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)\n\n\ntrack_response = sp.track('0BDYBajZydY54OTgQsH940')\ntrack_response\n\n\nOutput:\n{\n  \"album\": {\n    \"album_type\": \"album\",\n    \"artists\": [{\n        \"external_urls\": {\n          \"spotify\": \"https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe\"\n        },\n        \"href\": \"https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe\",\n        \"id\": \"7wyRA7deGRxozTyBc6QXPe\",\n        \"name\": \"Stephen Malkmus & The Jicks\",\n        \"type\": \"artist\",\n        \"uri\": \"spotify:artist:7wyRA7deGRxozTyBc6QXPe\"\n      },\n      {\n        \"external_urls\": {\n          \"spotify\": \"https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8\"\n        },\n        \"href\": \"https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8\",\n        \"id\": \"0WISkx0PwT6lYWdPqKUJY8\",\n        \"name\": \"Stephen Malkmus\",\n        \"type\": \"artist\",\n        \"uri\": \"spotify:artist:0WISkx0PwT6lYWdPqKUJY8\"\n      },\n      {\n        \"external_urls\": {\n          \"spotify\": \"https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7\"\n        },\n        \"href\": \"https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7\",\n        \"id\": \"7uStwCeP54Za8gXUFCf5L7\",\n        \"name\": \"The Jicks\",\n        \"type\": \"artist\",\n        \"uri\": \"spotify:artist:7uStwCeP54Za8gXUFCf5L7\"\n      }\n    ],\n    \"available_markets\": [\"AR\",\n      \"BO\",\n      \"BR\",\n      \"CA\",\n      \"...\",\n      \"US\",\n      \"UY\",\n      \"VN\"\n    ],\n    \"external_urls\": {\n      \"spotify\": \"https://open.spotify.com/album/6pWpb4IdPu9vp9mOdh5DjY\"\n    },\n    \"href\": \"https://api.spotify.com/v1/albums/6pWpb4IdPu9vp9mOdh5DjY\",\n    \"id\": \"6pWpb4IdPu9vp9mOdh5DjY\",\n    \"images\": [{\n        \"height\": 640,\n        \"url\": \"https://i.scdn.co/image/918fdb6fdffccf2bd2dd1a1a93136000f8cf9bd3\",\n        \"width\": 640\n      },\n      {\n        \"height\": 300,\n        \"url\": \"https://i.scdn.co/image/fb39290ebca6fac424d4a40611a7e0d1146c5f88\",\n        \"width\": 300\n      },\n      {\n        \"height\": 64,\n        \"url\": \"https://i.scdn.co/image/873da4a0a21acd96e4a0036c9ecd0580b62652d4\",\n        \"width\": 64\n      }\n    ],\n    \"name\": \"Real Emotional Trash\",\n    \"release_date\": \"2008-03-04\",\n    \"release_date_precision\": \"day\",\n    \"type\": \"album\",\n    \"uri\": \"spotify:album:6pWpb4IdPu9vp9mOdh5DjY\"\n  },\n  \"artists\": [{\n      \"external_urls\": {\n        \"spotify\": \"https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe\"\n      },\n      \"href\": \"https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe\",\n      \"id\": \"7wyRA7deGRxozTyBc6QXPe\",\n      \"name\": \"Stephen Malkmus & The Jicks\",\n      \"type\": \"artist\",\n      \"uri\": \"spotify:artist:7wyRA7deGRxozTyBc6QXPe\"\n    },\n    {\n      \"external_urls\": {\n        \"spotify\": \"https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8\"\n      },\n      \"href\": \"https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8\",\n      \"id\": \"0WISkx0PwT6lYWdPqKUJY8\",\n      \"name\": \"Stephen Malkmus\",\n      \"type\": \"artist\",\n      \"uri\": \"spotify:artist:0WISkx0PwT6lYWdPqKUJY8\"\n    },\n    {\n      \"external_urls\": {\n        \"spotify\": \"https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7\"\n      },\n      \"href\": \"https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7\",\n      \"id\": \"7uStwCeP54Za8gXUFCf5L7\",\n      \"name\": \"The Jicks\",\n      \"type\": \"artist\",\n      \"uri\": \"spotify:artist:7uStwCeP54Za8gXUFCf5L7\"\n    }\n  ],\n  \"available_markets\": [\"AR\",\n    \"BO\",\n    \"BR\",\n    \"CA\",\n    \"...\",\n    \"US\",\n    \"UY\",\n    \"VN\"\n  ],\n  \"disc_number\": 1,\n  \"duration_ms\": 608826,\n  \"explicit\": False,\n  \"external_ids\": {\n    \"isrc\": \"USMTD0877204\"\n  },\n  \"external_urls\": {\n    \"spotify\": \"https://open.spotify.com/track/0BDYBajZydY54OTgQsH940\"\n  },\n  \"href\": \"https://api.spotify.com/v1/tracks/0BDYBajZydY54OTgQsH940\",\n  \"id\": \"0BDYBajZydY54OTgQsH940\",\n  \"is_local\": False,\n  \"name\": \"Real Emotional Trash\",\n  \"popularity\": 21,\n  \"preview_url\": \"https://p.scdn.co/mp3-preview/4fcbcd5a99fc7590d5819849e1aad3eff981dc75?cid=be22fd00039241bc96d161a63876b54c\",\n  \"track_number\": 4,\n  \"type\": \"track\",\n  \"uri\": \"spotify:track:0BDYBajZydY54OTgQsH940\"\n}\n\n\nIn addition to plenty of information about the track, Spotify also includes\ninformation about the album that contains the track. If we were to just use the \ndict.keys()  method to turn this response into a DataFrame, we'd be missing out\non all that extra album information. Well, it would be there, just not readily\naccessible.\n\ntrack_response.keys()\n\n\nOutput:\ndict_keys(['album', 'artists', 'available_markets', 'disc_number', 'duration_ms', 'explicit', 'external_ids', 'external_urls', 'href', 'id', 'is_local', 'name', 'popularity', 'preview_url', 'track_number', 'type', 'uri'])\n\n\nSo how do we get around this? Well, we could write our own function, but because\npandas is amazing, it already has a built in tool that takes care of this for\nus.\n\nData Normalization\nMeet json_normalize():\n\nimport pandas as pd\nfrom pandas.io.json import json_normalize\njson_normalize(track_response)\n\n\nOutput:\nalbum.album_type\n album.artists\n album.available_markets\n album.external_urls.spotify\n album.href\n album.id\n album.images\n album.name\n album.release_date\n album.release_date_precision\n ...\n external_urls.spotify\n href\n id\n is_local\n name\n popularity\n preview_url\n track_number\n type\n uri\n 0\n album\n [{'external_urls': {'spotify': 'https://open.s...\n [AR, BO, BR, CA, CL, CO, CR, EC, GT, HK, HN, I...\n https://open.spotify.com/album/6pWpb4IdPu9vp9m...\n https://api.spotify.com/v1/albums/6pWpb4IdPu9v...\n 6pWpb4IdPu9vp9mOdh5DjY\n [{'height': 640, 'url': 'https://i.scdn.co/ima...\n Real Emotional Trash\n 2008-03-04\n day\n ...\n https://open.spotify.com/track/0BDYBajZydY54OT...\n https://api.spotify.com/v1/tracks/0BDYBajZydY5...\n 0BDYBajZydY54OTgQsH940\n False\n Real Emotional Trash\n 21\n https://p.scdn.co/mp3-preview/4fcbcd5a99fc7590...\n 4\n track\n spotify:track:0BDYBajZydY54OTgQsH940\n Yep – it's that easy. pandas takes our nested JSON object, flattens it out, and\nturns it into a DataFrame.\n\nThis makes our life easier when we're dealing with one record, but it really \ncomes in handy when we're dealing with a response that contains multiple\nrecords.\n\ntracks_response = sp.tracks(\n    ['0BDYBajZydY54OTgQsH940',\n     '7fdUqrzb8oCcIoKvFuzMrs',\n     '0islTY4Fw6lhYbfqi8Qtdj',\n     '3jyFLbljUTKjE13nIWXchH',\n     '6dNmC2YWtWbVOFOdTuRDQs']\n)\ntracks_response\n\n\nOutput:\n{\n  \"tracks\": [{\n      \"album\": {\n        \"album_type\": \"album\",\n        \"artists\": [{\n            \"external_urls\": {\n              \"spotify\": \"https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe\"\n            },\n            \"href\": \"https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe\",\n            \"id\": \"7wyRA7deGRxozTyBc6QXPe\",\n            \"name\": \"Stephen Malkmus & The Jicks\",\n            \"type\": \"artist\",\n            \"uri\": \"spotify:artist:7wyRA7deGRxozTyBc6QXPe\"\n          },\n          {\n            \"external_urls\": {\n              \"spotify\": \"https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8\"\n            },\n            \"href\": \"https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8\",\n            \"id\": \"0WISkx0PwT6lYWdPqKUJY8\",\n            \"name\": \"Stephen Malkmus\",\n            \"type\": \"artist\",\n            \"uri\": \"spotify:artist:0WISkx0PwT6lYWdPqKUJY8\"\n          },\n          {\n            \"external_urls\": {\n              \"spotify\": \"https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7\"\n            },\n            \"href\": \"https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7\",\n            \"id\": \"7uStwCeP54Za8gXUFCf5L7\",\n            \"name\": \"The Jicks\",\n            \"type\": \"artist\",\n            \"uri\": \"spotify:artist:7uStwCeP54Za8gXUFCf5L7\"\n          }\n        ],\n        \"available_markets\": [\"AR\",\n          \"BO\",\n          \"BR\",\n          \"CA\",\n          \"CL\",\n          \"CO\",\n          \"CR\",\n          \"EC\",\n          \"GT\",\n          \"HK\",\n          \"HN\",\n          \"ID\",\n          \"MX\",\n          \"MY\",\n          \"NI\",\n          \"PA\",\n          \"PE\",\n          \"PH\",\n          \"PY\",\n          \"SG\",\n          \"SV\",\n          \"TH\",\n          \"TW\",\n          \"US\",\n          \"UY\",\n          \"VN\"\n        ],\n        \"external_urls\": {\n          \"spotify\": \"https://open.spotify.com/album/6pWpb4IdPu9vp9mOdh5DjY\"\n        },\n        \"href\": \"https://api.spotify.com/v1/albums/6pWpb4IdPu9vp9mOdh5DjY\",\n        \"id\": \"6pWpb4IdPu9vp9mOdh5DjY\",\n        \"images\": [{\n            \"height\": 640,\n            \"url\": \"https://i.scdn.co/image/918fdb6fdffccf2bd2dd1a1a93136000f8cf9bd3\",\n            \"width\": 640\n          },\n          {\n            \"height\": 300,\n            \"url\": \"https://i.scdn.co/image/fb39290ebca6fac424d4a40611a7e0d1146c5f88\",\n            \"width\": 300\n          },\n          {\n            \"height\": 64,\n            \"url\": \"https://i.scdn.co/image/873da4a0a21acd96e4a0036c9ecd0580b62652d4\",\n            \"width\": 64\n          }\n        ],\n        \"name\": \"Real Emotional Trash\",\n        \"release_date\": \"2008-03-04\",\n        \"release_date_precision\": \"day\",\n        \"type\": \"album\",\n        \"uri\": \"spotify:album:6pWpb4IdPu9vp9mOdh5DjY\"\n      },\n      \"artists\": [{\n          \"external_urls\": {\n            \"spotify\": \"https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe\"\n          },\n          \"href\": \"https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe\",\n          \"id\": \"7wyRA7deGRxozTyBc6QXPe\",\n          \"name\": \"Stephen Malkmus & The Jicks\",\n          \"type\": \"artist\",\n          \"uri\": \"spotify:artist:7wyRA7deGRxozTyBc6QXPe\"\n        },\n        {\n          \"external_urls\": {\n            \"spotify\": \"https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8\"\n          },\n          \"href\": \"https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8\",\n          \"id\": \"0WISkx0PwT6lYWdPqKUJY8\",\n          \"name\": \"Stephen Malkmus\",\n          \"type\": \"artist\",\n          \"uri\": \"spotify:artist:0WISkx0PwT6lYWdPqKUJY8\"\n        },\n        {\n          \"external_urls\": {\n            \"spotify\": \"https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7\"\n          },\n          \"href\": \"https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7\",\n          \"id\": \"7uStwCeP54Za8gXUFCf5L7\",\n          \"name\": \"The Jicks\",\n          \"type\": \"artist\",\n          \"uri\": \"spotify:artist:7uStwCeP54Za8gXUFCf5L7\"\n        }\n      ],\n      \"available_markets\": [\"AR\",\n        \"BO\",\n        \"BR\",\n        \"CA\",\n        \"CL\",\n        \"CO\",\n        \"CR\",\n        \"EC\",\n        \"GT\",\n        \"HK\",\n        \"HN\",\n        \"ID\",\n        \"MX\",\n        \"MY\",\n        \"NI\",\n        \"PA\",\n        \"PE\",\n        \"PH\",\n        \"PY\",\n        \"SG\",\n        \"SV\",\n        \"TH\",\n        \"TW\",\n        \"US\",\n        \"UY\",\n        \"VN\"\n      ],\n      \"disc_number\": 1,\n      \"duration_ms\": 608826,\n      \"explicit\": False,\n      \"external_ids\": {\n        \"isrc\": \"USMTD0877204\"\n      },\n      \"external_urls\": {\n        \"spotify\": \"https://open.spotify.com/track/0BDYBajZydY54OTgQsH940\"\n      },\n      \"href\": \"https://api.spotify.com/v1/tracks/0BDYBajZydY54OTgQsH940\",\n      \"id\": \"0BDYBajZydY54OTgQsH940\",\n      \"is_local\": False,\n      \"name\": \"Real Emotional Trash\",\n      \"popularity\": 21,\n      \"preview_url\": \"https://p.scdn.co/mp3-preview/4fcbcd5a99fc7590d5819849e1aad3eff981dc75?cid=be22fd00039241bc96d161a63876b54c\",\n      \"track_number\": 4,\n      \"type\": \"track\",\n      \"uri\": \"spotify:track:0BDYBajZydY54OTgQsH940\"\n    },\n    {\n      \"album\": {\n        \"album_type\": \"album\",\n        \"artists\": [{\n            \"external_urls\": {\n              \"spotify\": \"https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe\"\n            },\n            \"href\": \"https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe\",\n            \"id\": \"7wyRA7deGRxozTyBc6QXPe\",\n            \"name\": \"Stephen Malkmus & The Jicks\",\n            \"type\": \"artist\",\n            \"uri\": \"spotify:artist:7wyRA7deGRxozTyBc6QXPe\"\n          },\n          {\n            \"external_urls\": {\n              \"spotify\": \"https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8\"\n            },\n            \"href\": \"https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8\",\n            \"id\": \"0WISkx0PwT6lYWdPqKUJY8\",\n            \"name\": \"Stephen Malkmus\",\n            \"type\": \"artist\",\n            \"uri\": \"spotify:artist:0WISkx0PwT6lYWdPqKUJY8\"\n          },\n          {\n            \"external_urls\": {\n              \"spotify\": \"https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7\"\n            },\n            \"href\": \"https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7\",\n            \"id\": \"7uStwCeP54Za8gXUFCf5L7\",\n            \"name\": \"The Jicks\",\n            \"type\": \"artist\",\n            \"uri\": \"spotify:artist:7uStwCeP54Za8gXUFCf5L7\"\n          }\n        ],\n        \"available_markets\": [\"AR\",\n          \"BO\",\n          \"BR\",\n          \"CA\",\n          \"CL\",\n          \"CO\",\n          \"CR\",\n          \"EC\",\n          \"GT\",\n          \"HK\",\n          \"HN\",\n          \"ID\",\n          \"MX\",\n          \"MY\",\n          \"NI\",\n          \"PA\",\n          \"PE\",\n          \"PH\",\n          \"PY\",\n          \"SG\",\n          \"SV\",\n          \"TH\",\n          \"TW\",\n          \"US\",\n          \"UY\",\n          \"VN\"\n        ],\n        \"external_urls\": {\n          \"spotify\": \"https://open.spotify.com/album/6pWpb4IdPu9vp9mOdh5DjY\"\n        },\n        \"href\": \"https://api.spotify.com/v1/albums/6pWpb4IdPu9vp9mOdh5DjY\",\n        \"id\": \"6pWpb4IdPu9vp9mOdh5DjY\",\n        \"images\": [{\n            \"height\": 640,\n            \"url\": \"https://i.scdn.co/image/918fdb6fdffccf2bd2dd1a1a93136000f8cf9bd3\",\n            \"width\": 640\n          },\n          {\n            \"height\": 300,\n            \"url\": \"https://i.scdn.co/image/fb39290ebca6fac424d4a40611a7e0d1146c5f88\",\n            \"width\": 300\n          },\n          {\n            \"height\": 64,\n            \"url\": \"https://i.scdn.co/image/873da4a0a21acd96e4a0036c9ecd0580b62652d4\",\n            \"width\": 64\n          }\n        ],\n        \"name\": \"Real Emotional Trash\",\n        \"release_date\": \"2008-03-04\",\n        \"release_date_precision\": \"day\",\n        \"type\": \"album\",\n        \"uri\": \"spotify:album:6pWpb4IdPu9vp9mOdh5DjY\"\n      },\n      \"artists\": [{\n          \"external_urls\": {\n            \"spotify\": \"https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe\"\n          },\n          \"href\": \"https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe\",\n          \"id\": \"7wyRA7deGRxozTyBc6QXPe\",\n          \"name\": \"Stephen Malkmus & The Jicks\",\n          \"type\": \"artist\",\n          \"uri\": \"spotify:artist:7wyRA7deGRxozTyBc6QXPe\"\n        },\n        {\n          \"external_urls\": {\n            \"spotify\": \"https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8\"\n          },\n          \"href\": \"https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8\",\n          \"id\": \"0WISkx0PwT6lYWdPqKUJY8\",\n          \"name\": \"Stephen Malkmus\",\n          \"type\": \"artist\",\n          \"uri\": \"spotify:artist:0WISkx0PwT6lYWdPqKUJY8\"\n        },\n        {\n          \"external_urls\": {\n            \"spotify\": \"https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7\"\n          },\n          \"href\": \"https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7\",\n          \"id\": \"7uStwCeP54Za8gXUFCf5L7\",\n          \"name\": \"The Jicks\",\n          \"type\": \"artist\",\n          \"uri\": \"spotify:artist:7uStwCeP54Za8gXUFCf5L7\"\n        }\n      ],\n      \"available_markets\": [\"AR\",\n        \"BO\",\n        \"BR\",\n        \"CA\",\n        \"CL\",\n        \"CO\",\n        \"CR\",\n        \"EC\",\n        \"GT\",\n        \"HK\",\n        \"HN\",\n        \"ID\",\n        \"MX\",\n        \"MY\",\n        \"NI\",\n        \"PA\",\n        \"PE\",\n        \"PH\",\n        \"PY\",\n        \"SG\",\n        \"SV\",\n        \"TH\",\n        \"TW\",\n        \"US\",\n        \"UY\",\n        \"VN\"\n      ],\n      \"disc_number\": 1,\n      \"duration_ms\": 222706,\n      \"explicit\": False,\n      \"external_ids\": {\n        \"isrc\": \"USMTD0877203\"\n      },\n      \"external_urls\": {\n        \"spotify\": \"https://open.spotify.com/track/7fdUqrzb8oCcIoKvFuzMrs\"\n      },\n      \"href\": \"https://api.spotify.com/v1/tracks/7fdUqrzb8oCcIoKvFuzMrs\",\n      \"id\": \"7fdUqrzb8oCcIoKvFuzMrs\",\n      \"is_local\": False,\n      \"name\": \"Cold Son\",\n      \"popularity\": 25,\n      \"preview_url\": \"https://p.scdn.co/mp3-preview/4cf4e21727def47097e27d30de16ffe9f99b7774?cid=be22fd00039241bc96d161a63876b54c\",\n      \"track_number\": 3,\n      \"type\": \"track\",\n      \"uri\": \"spotify:track:7fdUqrzb8oCcIoKvFuzMrs\"\n    },\n    {\n      \"album\": {\n        \"album_type\": \"album\",\n        \"artists\": [{\n            \"external_urls\": {\n              \"spotify\": \"https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe\"\n            },\n            \"href\": \"https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe\",\n            \"id\": \"7wyRA7deGRxozTyBc6QXPe\",\n            \"name\": \"Stephen Malkmus & The Jicks\",\n            \"type\": \"artist\",\n            \"uri\": \"spotify:artist:7wyRA7deGRxozTyBc6QXPe\"\n          },\n          {\n            \"external_urls\": {\n              \"spotify\": \"https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8\"\n            },\n            \"href\": \"https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8\",\n            \"id\": \"0WISkx0PwT6lYWdPqKUJY8\",\n            \"name\": \"Stephen Malkmus\",\n            \"type\": \"artist\",\n            \"uri\": \"spotify:artist:0WISkx0PwT6lYWdPqKUJY8\"\n          },\n          {\n            \"external_urls\": {\n              \"spotify\": \"https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7\"\n            },\n            \"href\": \"https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7\",\n            \"id\": \"7uStwCeP54Za8gXUFCf5L7\",\n            \"name\": \"The Jicks\",\n            \"type\": \"artist\",\n            \"uri\": \"spotify:artist:7uStwCeP54Za8gXUFCf5L7\"\n          }\n        ],\n        \"available_markets\": [\"AR\",\n          \"BO\",\n          \"BR\",\n          \"CA\",\n          \"CL\",\n          \"CO\",\n          \"CR\",\n          \"EC\",\n          \"GT\",\n          \"HK\",\n          \"HN\",\n          \"ID\",\n          \"MX\",\n          \"MY\",\n          \"NI\",\n          \"PA\",\n          \"PE\",\n          \"PH\",\n          \"PY\",\n          \"SG\",\n          \"SV\",\n          \"TH\",\n          \"TW\",\n          \"US\",\n          \"UY\",\n          \"VN\"\n        ],\n        \"external_urls\": {\n          \"spotify\": \"https://open.spotify.com/album/6pWpb4IdPu9vp9mOdh5DjY\"\n        },\n        \"href\": \"https://api.spotify.com/v1/albums/6pWpb4IdPu9vp9mOdh5DjY\",\n        \"id\": \"6pWpb4IdPu9vp9mOdh5DjY\",\n        \"images\": [{\n            \"height\": 640,\n            \"url\": \"https://i.scdn.co/image/918fdb6fdffccf2bd2dd1a1a93136000f8cf9bd3\",\n            \"width\": 640\n          },\n          {\n            \"height\": 300,\n            \"url\": \"https://i.scdn.co/image/fb39290ebca6fac424d4a40611a7e0d1146c5f88\",\n            \"width\": 300\n          },\n          {\n            \"height\": 64,\n            \"url\": \"https://i.scdn.co/image/873da4a0a21acd96e4a0036c9ecd0580b62652d4\",\n            \"width\": 64\n          }\n        ],\n        \"name\": \"Real Emotional Trash\",\n        \"release_date\": \"2008-03-04\",\n        \"release_date_precision\": \"day\",\n        \"type\": \"album\",\n        \"uri\": \"spotify:album:6pWpb4IdPu9vp9mOdh5DjY\"\n      },\n      \"artists\": [{\n          \"external_urls\": {\n            \"spotify\": \"https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe\"\n          },\n          \"href\": \"https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe\",\n          \"id\": \"7wyRA7deGRxozTyBc6QXPe\",\n          \"name\": \"Stephen Malkmus & The Jicks\",\n          \"type\": \"artist\",\n          \"uri\": \"spotify:artist:7wyRA7deGRxozTyBc6QXPe\"\n        },\n        {\n          \"external_urls\": {\n            \"spotify\": \"https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8\"\n          },\n          \"href\": \"https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8\",\n          \"id\": \"0WISkx0PwT6lYWdPqKUJY8\",\n          \"name\": \"Stephen Malkmus\",\n          \"type\": \"artist\",\n          \"uri\": \"spotify:artist:0WISkx0PwT6lYWdPqKUJY8\"\n        },\n        {\n          \"external_urls\": {\n            \"spotify\": \"https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7\"\n          },\n          \"href\": \"https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7\",\n          \"id\": \"7uStwCeP54Za8gXUFCf5L7\",\n          \"name\": \"The Jicks\",\n          \"type\": \"artist\",\n          \"uri\": \"spotify:artist:7uStwCeP54Za8gXUFCf5L7\"\n        }\n      ],\n      \"available_markets\": [\"AR\",\n        \"BO\",\n        \"BR\",\n        \"CA\",\n        \"CL\",\n        \"CO\",\n        \"CR\",\n        \"EC\",\n        \"GT\",\n        \"HK\",\n        \"HN\",\n        \"ID\",\n        \"MX\",\n        \"MY\",\n        \"NI\",\n        \"PA\",\n        \"PE\",\n        \"PH\",\n        \"PY\",\n        \"SG\",\n        \"SV\",\n        \"TH\",\n        \"TW\",\n        \"US\",\n        \"UY\",\n        \"VN\"\n      ],\n      \"disc_number\": 1,\n      \"duration_ms\": 416173,\n      \"explicit\": False,\n      \"external_ids\": {\n        \"isrc\": \"USMTD0877202\"\n      },\n      \"external_urls\": {\n        \"spotify\": \"https://open.spotify.com/track/0islTY4Fw6lhYbfqi8Qtdj\"\n      },\n      \"href\": \"https://api.spotify.com/v1/tracks/0islTY4Fw6lhYbfqi8Qtdj\",\n      \"id\": \"0islTY4Fw6lhYbfqi8Qtdj\",\n      \"is_local\": False,\n      \"name\": \"Hopscotch Willie\",\n      \"popularity\": 24,\n      \"preview_url\": \"https://p.scdn.co/mp3-preview/c7782dc6d7c0bb12159db4f90fba8388af034d60?cid=be22fd00039241bc96d161a63876b54c\",\n      \"track_number\": 2,\n      \"type\": \"track\",\n      \"uri\": \"spotify:track:0islTY4Fw6lhYbfqi8Qtdj\"\n    },\n    {\n      \"album\": {\n        \"album_type\": \"album\",\n        \"artists\": [{\n            \"external_urls\": {\n              \"spotify\": \"https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe\"\n            },\n            \"href\": \"https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe\",\n            \"id\": \"7wyRA7deGRxozTyBc6QXPe\",\n            \"name\": \"Stephen Malkmus & The Jicks\",\n            \"type\": \"artist\",\n            \"uri\": \"spotify:artist:7wyRA7deGRxozTyBc6QXPe\"\n          },\n          {\n            \"external_urls\": {\n              \"spotify\": \"https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8\"\n            },\n            \"href\": \"https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8\",\n            \"id\": \"0WISkx0PwT6lYWdPqKUJY8\",\n            \"name\": \"Stephen Malkmus\",\n            \"type\": \"artist\",\n            \"uri\": \"spotify:artist:0WISkx0PwT6lYWdPqKUJY8\"\n          },\n          {\n            \"external_urls\": {\n              \"spotify\": \"https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7\"\n            },\n            \"href\": \"https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7\",\n            \"id\": \"7uStwCeP54Za8gXUFCf5L7\",\n            \"name\": \"The Jicks\",\n            \"type\": \"artist\",\n            \"uri\": \"spotify:artist:7uStwCeP54Za8gXUFCf5L7\"\n          }\n        ],\n        \"available_markets\": [\"AR\",\n          \"BO\",\n          \"BR\",\n          \"CA\",\n          \"CL\",\n          \"CO\",\n          \"CR\",\n          \"EC\",\n          \"GT\",\n          \"HK\",\n          \"HN\",\n          \"ID\",\n          \"MX\",\n          \"MY\",\n          \"NI\",\n          \"PA\",\n          \"PE\",\n          \"PH\",\n          \"PY\",\n          \"SG\",\n          \"SV\",\n          \"TH\",\n          \"TW\",\n          \"US\",\n          \"UY\",\n          \"VN\"\n        ],\n        \"external_urls\": {\n          \"spotify\": \"https://open.spotify.com/album/6pWpb4IdPu9vp9mOdh5DjY\"\n        },\n        \"href\": \"https://api.spotify.com/v1/albums/6pWpb4IdPu9vp9mOdh5DjY\",\n        \"id\": \"6pWpb4IdPu9vp9mOdh5DjY\",\n        \"images\": [{\n            \"height\": 640,\n            \"url\": \"https://i.scdn.co/image/918fdb6fdffccf2bd2dd1a1a93136000f8cf9bd3\",\n            \"width\": 640\n          },\n          {\n            \"height\": 300,\n            \"url\": \"https://i.scdn.co/image/fb39290ebca6fac424d4a40611a7e0d1146c5f88\",\n            \"width\": 300\n          },\n          {\n            \"height\": 64,\n            \"url\": \"https://i.scdn.co/image/873da4a0a21acd96e4a0036c9ecd0580b62652d4\",\n            \"width\": 64\n          }\n        ],\n        \"name\": \"Real Emotional Trash\",\n        \"release_date\": \"2008-03-04\",\n        \"release_date_precision\": \"day\",\n        \"type\": \"album\",\n        \"uri\": \"spotify:album:6pWpb4IdPu9vp9mOdh5DjY\"\n      },\n      \"artists\": [{\n          \"external_urls\": {\n            \"spotify\": \"https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe\"\n          },\n          \"href\": \"https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe\",\n          \"id\": \"7wyRA7deGRxozTyBc6QXPe\",\n          \"name\": \"Stephen Malkmus & The Jicks\",\n          \"type\": \"artist\",\n          \"uri\": \"spotify:artist:7wyRA7deGRxozTyBc6QXPe\"\n        },\n        {\n          \"external_urls\": {\n            \"spotify\": \"https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8\"\n          },\n          \"href\": \"https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8\",\n          \"id\": \"0WISkx0PwT6lYWdPqKUJY8\",\n          \"name\": \"Stephen Malkmus\",\n          \"type\": \"artist\",\n          \"uri\": \"spotify:artist:0WISkx0PwT6lYWdPqKUJY8\"\n        },\n        {\n          \"external_urls\": {\n            \"spotify\": \"https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7\"\n          },\n          \"href\": \"https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7\",\n          \"id\": \"7uStwCeP54Za8gXUFCf5L7\",\n          \"name\": \"The Jicks\",\n          \"type\": \"artist\",\n          \"uri\": \"spotify:artist:7uStwCeP54Za8gXUFCf5L7\"\n        }\n      ],\n      \"available_markets\": [\"AR\",\n        \"BO\",\n        \"BR\",\n        \"CA\",\n        \"CL\",\n        \"CO\",\n        \"CR\",\n        \"EC\",\n        \"GT\",\n        \"HK\",\n        \"HN\",\n        \"ID\",\n        \"MX\",\n        \"MY\",\n        \"NI\",\n        \"PA\",\n        \"PE\",\n        \"PH\",\n        \"PY\",\n        \"SG\",\n        \"SV\",\n        \"TH\",\n        \"TW\",\n        \"US\",\n        \"UY\",\n        \"VN\"\n      ],\n      \"disc_number\": 1,\n      \"duration_ms\": 308146,\n      \"explicit\": False,\n      \"external_ids\": {\n        \"isrc\": \"USMTD0877201\"\n      },\n      \"external_urls\": {\n        \"spotify\": \"https://open.spotify.com/track/3jyFLbljUTKjE13nIWXchH\"\n      },\n      \"href\": \"https://api.spotify.com/v1/tracks/3jyFLbljUTKjE13nIWXchH\",\n      \"id\": \"3jyFLbljUTKjE13nIWXchH\",\n      \"is_local\": False,\n      \"name\": \"Dragonfly Pie\",\n      \"popularity\": 26,\n      \"preview_url\": \"https://p.scdn.co/mp3-preview/50f419e7d3e8a6a771515068622250ab06d1cc86?cid=be22fd00039241bc96d161a63876b54c\",\n      \"track_number\": 1,\n      \"type\": \"track\",\n      \"uri\": \"spotify:track:3jyFLbljUTKjE13nIWXchH\"\n    },\n    {\n      \"album\": {\n        \"album_type\": \"album\",\n        \"artists\": [{\n          \"external_urls\": {\n            \"spotify\": \"https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe\"\n          },\n          \"href\": \"https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe\",\n          \"id\": \"7wyRA7deGRxozTyBc6QXPe\",\n          \"name\": \"Stephen Malkmus & The Jicks\",\n          \"type\": \"artist\",\n          \"uri\": \"spotify:artist:7wyRA7deGRxozTyBc6QXPe\"\n        }],\n        \"available_markets\": [\"AR\",\n          \"AU\",\n          \"BO\",\n          \"BR\",\n          \"CA\",\n          \"CL\",\n          \"CO\",\n          \"CR\",\n          \"DO\",\n          \"EC\",\n          \"GT\",\n          \"HK\",\n          \"HN\",\n          \"ID\",\n          \"JP\",\n          \"MX\",\n          \"MY\",\n          \"NI\",\n          \"NZ\",\n          \"PA\",\n          \"PE\",\n          \"PH\",\n          \"PY\",\n          \"SG\",\n          \"SV\",\n          \"TH\",\n          \"TW\",\n          \"US\",\n          \"UY\",\n          \"VN\",\n          \"ZA\"\n        ],\n        \"external_urls\": {\n          \"spotify\": \"https://open.spotify.com/album/5DMvSCwRqfNVlMB5LjHOwG\"\n        },\n        \"href\": \"https://api.spotify.com/v1/albums/5DMvSCwRqfNVlMB5LjHOwG\",\n        \"id\": \"5DMvSCwRqfNVlMB5LjHOwG\",\n        \"images\": [{\n            \"height\": 640,\n            \"url\": \"https://i.scdn.co/image/bc96e20fa6b42c765db2fb904d3a70b6ef57b0bb\",\n            \"width\": 640\n          },\n          {\n            \"height\": 300,\n            \"url\": \"https://i.scdn.co/image/c7a31ed50b9c704ec066f4aac669cfb9013effb1\",\n            \"width\": 300\n          },\n          {\n            \"height\": 64,\n            \"url\": \"https://i.scdn.co/image/8551e108d0950dd62724ff2703e8c13ce7324114\",\n            \"width\": 64\n          }\n        ],\n        \"name\": \"Sparkle Hard\",\n        \"release_date\": \"2018-05-18\",\n        \"release_date_precision\": \"day\",\n        \"type\": \"album\",\n        \"uri\": \"spotify:album:5DMvSCwRqfNVlMB5LjHOwG\"\n      },\n      \"artists\": [{\n        \"external_urls\": {\n          \"spotify\": \"https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe\"\n        },\n        \"href\": \"https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe\",\n        \"id\": \"7wyRA7deGRxozTyBc6QXPe\",\n        \"name\": \"Stephen Malkmus & The Jicks\",\n        \"type\": \"artist\",\n        \"uri\": \"spotify:artist:7wyRA7deGRxozTyBc6QXPe\"\n      }],\n      \"available_markets\": [\"AR\",\n        \"AU\",\n        \"BO\",\n        \"BR\",\n        \"CA\",\n        \"CL\",\n        \"CO\",\n        \"CR\",\n        \"DO\",\n        \"EC\",\n        \"GT\",\n        \"HK\",\n        \"HN\",\n        \"ID\",\n        \"JP\",\n        \"MX\",\n        \"MY\",\n        \"NI\",\n        \"NZ\",\n        \"PA\",\n        \"PE\",\n        \"PH\",\n        \"PY\",\n        \"SG\",\n        \"SV\",\n        \"TH\",\n        \"TW\",\n        \"US\",\n        \"UY\",\n        \"VN\",\n        \"ZA\"\n      ],\n      \"disc_number\": 1,\n      \"duration_ms\": 423275,\n      \"explicit\": False,\n      \"external_ids\": {\n        \"isrc\": \"USMTD1710380\"\n      },\n      \"external_urls\": {\n        \"spotify\": \"https://open.spotify.com/track/6dNmC2YWtWbVOFOdTuRDQs\"\n      },\n      \"href\": \"https://api.spotify.com/v1/tracks/6dNmC2YWtWbVOFOdTuRDQs\",\n      \"id\": \"6dNmC2YWtWbVOFOdTuRDQs\",\n      \"is_local\": False,\n      \"name\": \"Difficulties - Let Them Eat Vowels\",\n      \"popularity\": 35,\n      \"preview_url\": \"https://p.scdn.co/mp3-preview/787be9d1bbebcd845d0793476de843fa0a4fff79?cid=be22fd00039241bc96d161a63876b54c\",\n      \"track_number\": 11,\n      \"type\": \"track\",\n      \"uri\": \"spotify:track:6dNmC2YWtWbVOFOdTuRDQs\"\n    }\n  ]\n}\n\n\n\njson_normalise(tracks_response)\n\n\nOutput:\nalbum.album_typealbum.artistsalbum.available_marketsalbum.external_urls.spotify\nalbum.hrefalbum.idalbum.imagesalbum.namealbum.release_date\nalbum.release_date_precision...external_urls.spotifyhrefidis_localnamepopularity\npreview_urltrack_numbertypeuri\n 0album[{'external_urls': {'spotify': 'https://open.s...[AR, BO, BR, CA, CL, CO,\nCR, EC, GT, HK, HN, I...https://open.spotify.com/album/6pWpb4IdPu9vp9m...\nhttps://api.spotify.com/v1/albums/6pWpb4IdPu9v...6pWpb4IdPu9vp9mOdh5DjY\n[{'height': 640, 'url': 'https://i.scdn.co/ima...Real Emotional Trash3/4/2008day\n...https://open.spotify.com/track/0BDYBajZydY54OT...\nhttps://api.spotify.com/v1/tracks/0BDYBajZydY5...0BDYBajZydY54OTgQsH940FALSEReal\nEmotional Trash21https://p.scdn.co/mp3-preview/4fcbcd5a99fc7590...4track\nspotify:track:0BDYBajZydY54OTgQsH940\n 1album[{'external_urls': {'spotify': 'https://open.s...[AR, BO, BR, CA, CL, CO,\nCR, EC, GT, HK, HN, I...https://open.spotify.com/album/6pWpb4IdPu9vp9m...\nhttps://api.spotify.com/v1/albums/6pWpb4IdPu9v...6pWpb4IdPu9vp9mOdh5DjY\n[{'height': 640, 'url': 'https://i.scdn.co/ima...Real Emotional Trash3/4/2008day\n...https://open.spotify.com/track/7fdUqrzb8oCcIoK...\nhttps://api.spotify.com/v1/tracks/7fdUqrzb8oCc...7fdUqrzb8oCcIoKvFuzMrsFALSECold\nSon25https://p.scdn.co/mp3-preview/4cf4e21727def470...3track\nspotify:track:7fdUqrzb8oCcIoKvFuzMrs\n 2album[{'external_urls': {'spotify': 'https://open.s...[AR, BO, BR, CA, CL, CO,\nCR, EC, GT, HK, HN, I...https://open.spotify.com/album/6pWpb4IdPu9vp9m...\nhttps://api.spotify.com/v1/albums/6pWpb4IdPu9v...6pWpb4IdPu9vp9mOdh5DjY\n[{'height': 640, 'url': 'https://i.scdn.co/ima...Real Emotional Trash3/4/2008day\n...https://open.spotify.com/track/0islTY4Fw6lhYbf...\nhttps://api.spotify.com/v1/tracks/0islTY4Fw6lh...0islTY4Fw6lhYbfqi8QtdjFALSE\nHopscotch Willie24https://p.scdn.co/mp3-preview/c7782dc6d7c0bb12...2track\nspotify:track:0islTY4Fw6lhYbfqi8Qtdj\n 3album[{'external_urls': {'spotify': 'https://open.s...[AR, BO, BR, CA, CL, CO,\nCR, EC, GT, HK, HN, I...https://open.spotify.com/album/6pWpb4IdPu9vp9m...\nhttps://api.spotify.com/v1/albums/6pWpb4IdPu9v...6pWpb4IdPu9vp9mOdh5DjY\n[{'height': 640, 'url': 'https://i.scdn.co/ima...Real Emotional Trash3/4/2008day\n...https://open.spotify.com/track/3jyFLbljUTKjE13...\nhttps://api.spotify.com/v1/tracks/3jyFLbljUTKj...3jyFLbljUTKjE13nIWXchHFALSE\nDragonfly Pie26https://p.scdn.co/mp3-preview/50f419e7d3e8a6a7...1track\nspotify:track:3jyFLbljUTKjE13nIWXchH\n 4album[{'external_urls': {'spotify': 'https://open.s...[AR, AU, BO, BR, CA, CL,\nCO, CR, DO, EC, GT, H...https://open.spotify.com/album/5DMvSCwRqfNVlMB...\nhttps://api.spotify.com/v1/albums/5DMvSCwRqfNV...5DMvSCwRqfNVlMB5LjHOwG\n[{'height': 640, 'url': 'https://i.scdn.co/ima...Sparkle Hard5/18/2018day...\nhttps://open.spotify.com/track/6dNmC2YWtWbVOFO...\nhttps://api.spotify.com/v1/tracks/6dNmC2YWtWbV...6dNmC2YWtWbVOFOdTuRDQsFALSE\nDifficulties - Let Them Eat Vowels35\nhttps://p.scdn.co/mp3-preview/787be9d1bbebcd84...11track\nspotify:track:6dNmC2YWtWbVOFOdTuRDQsSeparate Ways (Worlds Apart)\nBy default, json_normalize()  uses periods .  to indicate nested levels of the\nJSON object (which is actually converted to a Python dict  by Spotipy). In our\ncase, the album id is found in track['album']['id'], hence the period between\nalbum and id in the DataFrame. This makes things slightly annoying if we want to\ngrab a Series from our new DataFrame. In pandas, we can grab a Series from a\nDataFrame in many ways. To grab the album.id  column, for example:\n\ntracks_df['album.id']\n\n\nOutput:\n0    6pWpb4IdPu9vp9mOdh5DjY\n1    6pWpb4IdPu9vp9mOdh5DjY\n2    6pWpb4IdPu9vp9mOdh5DjY\n3    6pWpb4IdPu9vp9mOdh5DjY\n4    5DMvSCwRqfNVlMB5LjHOwG\nName: album.id, dtype: object\n\n\nor\n\ntracks_df.loc[:,'album.id']\n\n\n\nOutput:\n0    6pWpb4IdPu9vp9mOdh5DjY\n1    6pWpb4IdPu9vp9mOdh5DjY\n2    6pWpb4IdPu9vp9mOdh5DjY\n3    6pWpb4IdPu9vp9mOdh5DjY\n4    5DMvSCwRqfNVlMB5LjHOwG\nName: album.id, dtype: object\n\n\npandas also allows us to use dot notation (i.e. dataframe.column_name) to grab a\ncolumn as a Series, but only if our column name doesn't include a period\nalready. Since json_normalize()  uses a period as a separator by default, this\nruins that method. Never fear though – overriding this behavior is as simple as\noverriding the default argument in the function call:\n\ntracks_df = json_normalize(tracks_response['tracks'],sep=\"_\")\ntracks_df\n\n\nOutput:\nalbum_album_typealbum_artistsalbum_available_marketsalbum_external_urls_spotify\nalbum_hrefalbum_idalbum_imagesalbum_namealbum_release_date\nalbum_release_date_precision...external_urls_spotifyhrefidis_localnamepopularity\npreview_urltrack_numbertypeuri\n 0album[{'external_urls': {'spotify': 'https://open.s...[AR, BO, BR, CA, CL, CO,\nCR, EC, GT, HK, HN, I...https://open.spotify.com/album/6pWpb4IdPu9vp9m...\nhttps://api.spotify.com/v1/albums/6pWpb4IdPu9v...6pWpb4IdPu9vp9mOdh5DjY\n[{'height': 640, 'url': 'https://i.scdn.co/ima...Real Emotional Trash3/4/2008day\n...https://open.spotify.com/track/0BDYBajZydY54OT...\nhttps://api.spotify.com/v1/tracks/0BDYBajZydY5...0BDYBajZydY54OTgQsH940FALSEReal\nEmotional Trash21https://p.scdn.co/mp3-preview/4fcbcd5a99fc7590...4track\nspotify:track:0BDYBajZydY54OTgQsH940\n 1album[{'external_urls': {'spotify': 'https://open.s...[AR, BO, BR, CA, CL, CO,\nCR, EC, GT, HK, HN, I...https://open.spotify.com/album/6pWpb4IdPu9vp9m...\nhttps://api.spotify.com/v1/albums/6pWpb4IdPu9v...6pWpb4IdPu9vp9mOdh5DjY\n[{'height': 640, 'url': 'https://i.scdn.co/ima...Real Emotional Trash3/4/2008day\n...https://open.spotify.com/track/7fdUqrzb8oCcIoK...\nhttps://api.spotify.com/v1/tracks/7fdUqrzb8oCc...7fdUqrzb8oCcIoKvFuzMrsFALSECold\nSon25https://p.scdn.co/mp3-preview/4cf4e21727def470...3track\nspotify:track:7fdUqrzb8oCcIoKvFuzMrs\n 2album[{'external_urls': {'spotify': 'https://open.s...[AR, BO, BR, CA, CL, CO,\nCR, EC, GT, HK, HN, I...https://open.spotify.com/album/6pWpb4IdPu9vp9m...\nhttps://api.spotify.com/v1/albums/6pWpb4IdPu9v...6pWpb4IdPu9vp9mOdh5DjY\n[{'height': 640, 'url': 'https://i.scdn.co/ima...Real Emotional Trash3/4/2008day\n...https://open.spotify.com/track/0islTY4Fw6lhYbf...\nhttps://api.spotify.com/v1/tracks/0islTY4Fw6lh...0islTY4Fw6lhYbfqi8QtdjFALSE\nHopscotch Willie24https://p.scdn.co/mp3-preview/c7782dc6d7c0bb12...2track\nspotify:track:0islTY4Fw6lhYbfqi8Qtdj\n 3album[{'external_urls': {'spotify': 'https://open.s...[AR, BO, BR, CA, CL, CO,\nCR, EC, GT, HK, HN, I...https://open.spotify.com/album/6pWpb4IdPu9vp9m...\nhttps://api.spotify.com/v1/albums/6pWpb4IdPu9v...6pWpb4IdPu9vp9mOdh5DjY\n[{'height': 640, 'url': 'https://i.scdn.co/ima...Real Emotional Trash3/4/2008day\n...https://open.spotify.com/track/3jyFLbljUTKjE13...\nhttps://api.spotify.com/v1/tracks/3jyFLbljUTKj...3jyFLbljUTKjE13nIWXchHFALSE\nDragonfly Pie26https://p.scdn.co/mp3-preview/50f419e7d3e8a6a7...1track\nspotify:track:3jyFLbljUTKjE13nIWXchH\n 4album[{'external_urls': {'spotify': 'https://open.s...[AR, AU, BO, BR, CA, CL,\nCO, CR, DO, EC, GT, H...https://open.spotify.com/album/5DMvSCwRqfNVlMB...\nhttps://api.spotify.com/v1/albums/5DMvSCwRqfNV...5DMvSCwRqfNVlMB5LjHOwG\n[{'height': 640, 'url': 'https://i.scdn.co/ima...Sparkle Hard5/18/2018day...\nhttps://open.spotify.com/track/6dNmC2YWtWbVOFO...\nhttps://api.spotify.com/v1/tracks/6dNmC2YWtWbV...6dNmC2YWtWbVOFOdTuRDQsFALSE\nDifficulties - Let Them Eat Vowels35\nhttps://p.scdn.co/mp3-preview/787be9d1bbebcd84...11track\nspotify:track:6dNmC2YWtWbVOFOdTuRDQsNow we can go back to using dot notation to\naccess a column as a Series. This saves us some typing every time we want to\ngrab a column, and it looks a bit nicer (to me, at least). I say worth it.\n\ntracks_df.album_id\n\n\nOutput:\n0    6pWpb4IdPu9vp9mOdh5DjY\n1    6pWpb4IdPu9vp9mOdh5DjY\n2    6pWpb4IdPu9vp9mOdh5DjY\n3    6pWpb4IdPu9vp9mOdh5DjY\n4    5DMvSCwRqfNVlMB5LjHOwG\nName: album_id, dtype: object\n\n\nI Need That Record\nBy including more parameters when we use json_normlize(), we can really extract\njust the data that we want from our API response.\n\nFrom our responses above, we can see that the artist  property contains a list\nof artists that are associated with a track:\n\ntracks_response['tracks'][0]['artists']\n\n\nOutput:\n[{\n    \"external_urls\": {\n      \"spotify\": \"https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe\"\n    },\n    \"href\": \"https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe\",\n    \"id\": \"7wyRA7deGRxozTyBc6QXPe\",\n    \"name\": \"Stephen Malkmus & The Jicks\",\n    \"type\": \"artist\",\n    \"uri\": \"spotify:artist:7wyRA7deGRxozTyBc6QXPe\"\n  },\n  {\n    \"external_urls\": {\n      \"spotify\": \"https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8\"\n    },\n    \"href\": \"https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8\",\n    \"id\": \"0WISkx0PwT6lYWdPqKUJY8\",\n    \"name\": \"Stephen Malkmus\",\n    \"type\": \"artist\",\n    \"uri\": \"spotify:artist:0WISkx0PwT6lYWdPqKUJY8\"\n  },\n  {\n    \"external_urls\": {\n      \"spotify\": \"https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7\"\n    },\n    \"href\": \"https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7\",\n    \"id\": \"7uStwCeP54Za8gXUFCf5L7\",\n    \"name\": \"The Jicks\",\n    \"type\": \"artist\",\n    \"uri\": \"spotify:artist:7uStwCeP54Za8gXUFCf5L7\"\n  }\n]\n\n\nLet's say I want to load this data into a database later. It would be nice to\nhave a join table that maps each of the artists that are associated with each\ntrack. Luckily, this is possible with json_normalize()'s record_path  and meta \nparameters.\n\nrecord_path  tells json_normalize()  what path of keys leads to each individual\nrecord in the JSON object. In our case, we want to grab every artist id, so our\nfunction call will look like:\n\njson_normalize(tracks_response['tracks'],record_path=['artists'],sep=\"_\")\n\n\n\nexternal_urls href id name type uri\n 1 {'spotify': 'https://open.spotify.com/artist/7... \nhttps://api.spotify.com/v1/artists/7wyRA7deGRx... 7wyRA7deGRxozTyBc6QXPe Stephen\nMalkmus & The Jicks artist spotify:artist:7wyRA7deGRxozTyBc6QXPe\n 1 {'spotify': 'https://open.spotify.com/artist/0... \nhttps://api.spotify.com/v1/artists/0WISkx0PwT6... 0WISkx0PwT6lYWdPqKUJY8 Stephen\nMalkmus artist spotify:artist:0WISkx0PwT6lYWdPqKUJY8\n 2 {'spotify': 'https://open.spotify.com/artist/7... \nhttps://api.spotify.com/v1/artists/7uStwCeP54Z... 7uStwCeP54Za8gXUFCf5L7 The\nJicks artist spotify:artist:7uStwCeP54Za8gXUFCf5L7\n 3 {'spotify': 'https://open.spotify.com/artist/7... \nhttps://api.spotify.com/v1/artists/7wyRA7deGRx... 7wyRA7deGRxozTyBc6QXPe Stephen\nMalkmus & The Jicks artist spotify:artist:7wyRA7deGRxozTyBc6QXPe\n 4 {'spotify': 'https://open.spotify.com/artist/0... \nhttps://api.spotify.com/v1/artists/0WISkx0PwT6... 0WISkx0PwT6lYWdPqKUJY8 Stephen\nMalkmus artist spotify:artist:0WISkx0PwT6lYWdPqKUJY8\n 5 {'spotify': 'https://open.spotify.com/artist/7... \nhttps://api.spotify.com/v1/artists/7uStwCeP54Z... 7uStwCeP54Za8gXUFCf5L7 The\nJicks artist spotify:artist:7uStwCeP54Za8gXUFCf5L7\n 6 {'spotify': 'https://open.spotify.com/artist/7... \nhttps://api.spotify.com/v1/artists/7wyRA7deGRx... 7wyRA7deGRxozTyBc6QXPe Stephen\nMalkmus & The Jicks artist spotify:artist:7wyRA7deGRxozTyBc6QXPe\n 7 {'spotify': 'https://open.spotify.com/artist/0... \nhttps://api.spotify.com/v1/artists/0WISkx0PwT6... 0WISkx0PwT6lYWdPqKUJY8 Stephen\nMalkmus artist spotify:artist:0WISkx0PwT6lYWdPqKUJY8\n 8 {'spotify': 'https://open.spotify.com/artist/7... \nhttps://api.spotify.com/v1/artists/7uStwCeP54Z... 7uStwCeP54Za8gXUFCf5L7 The\nJicks artist spotify:artist:7uStwCeP54Za8gXUFCf5L7\n 9 {'spotify': 'https://open.spotify.com/artist/7... \nhttps://api.spotify.com/v1/artists/7wyRA7deGRx... 7wyRA7deGRxozTyBc6QXPe Stephen\nMalkmus & The Jicks artist spotify:artist:7wyRA7deGRxozTyBc6QXPe\n 10 {'spotify': 'https://open.spotify.com/artist/0... \nhttps://api.spotify.com/v1/artists/0WISkx0PwT6... 0WISkx0PwT6lYWdPqKUJY8 Stephen\nMalkmus artist spotify:artist:0WISkx0PwT6lYWdPqKUJY8\n 11 {'spotify': 'https://open.spotify.com/artist/7... \nhttps://api.spotify.com/v1/artists/7uStwCeP54Z... 7uStwCeP54Za8gXUFCf5L7 The\nJicks artist spotify:artist:7uStwCeP54Za8gXUFCf5L7\n 12 {'spotify': 'https://open.spotify.com/artist/7... \nhttps://api.spotify.com/v1/artists/7wyRA7deGRx... 7wyRA7deGRxozTyBc6QXPe Stephen\nMalkmus & The Jicks artist spotify:artist:7wyRA7deGRxozTyBc6QXPeCool – we're\nalmost there. Now we want to use the meta  parameter to specify what data we\nwant to include from the rest of the JSON object. In our case, we want to keep\nthe track id and map it to the artist id. If we look back at our API response,\nthe name of the column that included the track is is called, appropriately, id,\nso our full function call should look like this:\n\njson_normalize(tracks_response['tracks'],record_path=['artists'],meta=['id'],sep=\"_\")\n\n\nOutput:\n-----------------------------------------\nValueError                             Traceback (most recent call last)\n\n    <ipython-input-14-77e00a98c3c0> in <module>()\n    ----> 1 json_normalize(tracks_response['tracks'],record_path=['artists'],meta=['id'],sep=\"_\")\n\n    ~/anaconda3/envs/music_data/lib/python3.6/site-packages/pandas/io/json/normalize.py in json_normalize(data, record_path, meta, meta_prefix, record_prefix, errors, sep)\n        268         if k in result:\n        269             raise ValueError('Conflicting metadata name {name}, '\n    --> 270                              'need distinguishing prefix '.format(name=k))\n        271 \n        272         result[k] = np.array(v).repeat(lengths)\n    \nValueError: Conflicting metadata name id, need distinguishing prefix \n\n\nUh oh – an error! What's going on? Well, it turns out that both the album id and\ntrack id were given the key id. pandas doesn't like that, and it gives us a\nhelpful error to tell us so: ValueError: Conflicting metadata name id, need\ndistinguishing prefix.\n\nThere are two more parameters we can use to overcome this error: record_prefix \nand meta_prefix. These are strings we'll add to the beginning of our records and\nmetadata to prevent these naming conflicts. Since we're dealing with Spotify\nartist ids for our records and Spotify track ids as the metadata, I'll use \nsp_artist_  and sp_track_  respectively. When that's done, I'll select only the\ncolumns that we're interested in.\n\nartist_and_track = json_normalize(\n    data=tracks_response['tracks'],\n    record_path='artists',\n    meta=['id'],\n    record_prefix='sp_artist_',\n    meta_prefix='sp_track_',\n    sep=\"_\"\n)\nartist_and_track = artist_and_track[['sp_track_id','sp_artist_id']]\nartist_and_track\n\n\nOutput:\nsp_track_id sp_artist_id\n 00BDYBajZydY54OTgQsH940 7wyRA7deGRxozTyBc6QXPe\n 10BDYBajZydY54OTgQsH940 0WISkx0PwT6lYWdPqKUJY8\n 20BDYBajZydY54OTgQsH940 7uStwCeP54Za8gXUFCf5L7\n 37fdUqrzb8oCcIoKvFuzMrs 7wyRA7deGRxozTyBc6QXPe\n 47fdUqrzb8oCcIoKvFuzMrs 0WISkx0PwT6lYWdPqKUJY8\n 57fdUqrzb8oCcIoKvFuzMrs 7uStwCeP54Za8gXUFCf5L7\n 60islTY4Fw6lhYbfqi8Qtdj 7wyRA7deGRxozTyBc6QXPe\n 70islTY4Fw6lhYbfqi8Qtdj 0WISkx0PwT6lYWdPqKUJY8\n 80islTY4Fw6lhYbfqi8Qtdj 7uStwCeP54Za8gXUFCf5L7\n 93jyFLbljUTKjE13nIWXchH 7wyRA7deGRxozTyBc6QXPe\n 103jyFLbljUTKjE13nIWXchH 0WISkx0PwT6lYWdPqKUJY8\n 113jyFLbljUTKjE13nIWXchH 7uStwCeP54Za8gXUFCf5L7\n 126dNmC2YWtWbVOFOdTuRDQs 7wyRA7deGRxozTyBc6QXPeTL;DR\n * Use pd.io.json.json_normalize()  to automagically flatten a nested JSON\n   object into a DataFrame\n * Make your life slightly easier when it comes to selecting columns by\n   overriding the default sep  parameter\n * Specify what data constitutes a record with the record_path  parameter\n * Include data from outside of the record path with the meta  parameter\n * Fix naming conflicts if they arise with the record_prefix  and meta_prefix \n   parameters","html":"<p>In his post about <a href=\"https://hackersandslackers.com/extracting-massive-datasets-from-apis/\">extracting data from APIs</a>, <a href=\"https://hackersandslackers.com/author/todd/\">Todd</a> demonstrated a nice way to massage JSON into a pandas DataFrame. This method works great when our JSON response is flat, because <code>dict.keys()</code> only gets the keys on the first \"level\" of a dictionary. It gets a little trickier when our JSON starts to become nested though, as I experienced when working with <a href=\"https://developer.spotify.com/documentation/web-api/\">Spotify's API</a> via the <a href=\"https://spotipy.readthedocs.io/en/latest/\">Spotipy</a> library. For example, take a look at a response from their <code>https://api.spotify.com/v1/tracks/{id}</code> endpoint:</p><pre><code class=\"language-python\">import spotipy\nfrom spotipy.oauth2 import SpotifyClientCredentials\n\nspotify_client_id = 'YOUR_ID'\nspotify_client_secret  = 'YOUR_SECRET'\nclient_credentials_manager = SpotifyClientCredentials(client_id=spotify_client_id, client_secret=spotify_client_secret)\nsp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)\n</code></pre>\n<pre><code class=\"language-python\">track_response = sp.track('0BDYBajZydY54OTgQsH940')\ntrack_response\n</code></pre>\n<h3 id=\"output-\">Output:</h3><pre><code class=\"language-json\">{\n  &quot;album&quot;: {\n    &quot;album_type&quot;: &quot;album&quot;,\n    &quot;artists&quot;: [{\n        &quot;external_urls&quot;: {\n          &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe&quot;\n        },\n        &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe&quot;,\n        &quot;id&quot;: &quot;7wyRA7deGRxozTyBc6QXPe&quot;,\n        &quot;name&quot;: &quot;Stephen Malkmus &amp; The Jicks&quot;,\n        &quot;type&quot;: &quot;artist&quot;,\n        &quot;uri&quot;: &quot;spotify:artist:7wyRA7deGRxozTyBc6QXPe&quot;\n      },\n      {\n        &quot;external_urls&quot;: {\n          &quot;spotify&quot;: &quot;https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8&quot;\n        },\n        &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8&quot;,\n        &quot;id&quot;: &quot;0WISkx0PwT6lYWdPqKUJY8&quot;,\n        &quot;name&quot;: &quot;Stephen Malkmus&quot;,\n        &quot;type&quot;: &quot;artist&quot;,\n        &quot;uri&quot;: &quot;spotify:artist:0WISkx0PwT6lYWdPqKUJY8&quot;\n      },\n      {\n        &quot;external_urls&quot;: {\n          &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7&quot;\n        },\n        &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7&quot;,\n        &quot;id&quot;: &quot;7uStwCeP54Za8gXUFCf5L7&quot;,\n        &quot;name&quot;: &quot;The Jicks&quot;,\n        &quot;type&quot;: &quot;artist&quot;,\n        &quot;uri&quot;: &quot;spotify:artist:7uStwCeP54Za8gXUFCf5L7&quot;\n      }\n    ],\n    &quot;available_markets&quot;: [&quot;AR&quot;,\n      &quot;BO&quot;,\n      &quot;BR&quot;,\n      &quot;CA&quot;,\n      &quot;...&quot;,\n      &quot;US&quot;,\n      &quot;UY&quot;,\n      &quot;VN&quot;\n    ],\n    &quot;external_urls&quot;: {\n      &quot;spotify&quot;: &quot;https://open.spotify.com/album/6pWpb4IdPu9vp9mOdh5DjY&quot;\n    },\n    &quot;href&quot;: &quot;https://api.spotify.com/v1/albums/6pWpb4IdPu9vp9mOdh5DjY&quot;,\n    &quot;id&quot;: &quot;6pWpb4IdPu9vp9mOdh5DjY&quot;,\n    &quot;images&quot;: [{\n        &quot;height&quot;: 640,\n        &quot;url&quot;: &quot;https://i.scdn.co/image/918fdb6fdffccf2bd2dd1a1a93136000f8cf9bd3&quot;,\n        &quot;width&quot;: 640\n      },\n      {\n        &quot;height&quot;: 300,\n        &quot;url&quot;: &quot;https://i.scdn.co/image/fb39290ebca6fac424d4a40611a7e0d1146c5f88&quot;,\n        &quot;width&quot;: 300\n      },\n      {\n        &quot;height&quot;: 64,\n        &quot;url&quot;: &quot;https://i.scdn.co/image/873da4a0a21acd96e4a0036c9ecd0580b62652d4&quot;,\n        &quot;width&quot;: 64\n      }\n    ],\n    &quot;name&quot;: &quot;Real Emotional Trash&quot;,\n    &quot;release_date&quot;: &quot;2008-03-04&quot;,\n    &quot;release_date_precision&quot;: &quot;day&quot;,\n    &quot;type&quot;: &quot;album&quot;,\n    &quot;uri&quot;: &quot;spotify:album:6pWpb4IdPu9vp9mOdh5DjY&quot;\n  },\n  &quot;artists&quot;: [{\n      &quot;external_urls&quot;: {\n        &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe&quot;\n      },\n      &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe&quot;,\n      &quot;id&quot;: &quot;7wyRA7deGRxozTyBc6QXPe&quot;,\n      &quot;name&quot;: &quot;Stephen Malkmus &amp; The Jicks&quot;,\n      &quot;type&quot;: &quot;artist&quot;,\n      &quot;uri&quot;: &quot;spotify:artist:7wyRA7deGRxozTyBc6QXPe&quot;\n    },\n    {\n      &quot;external_urls&quot;: {\n        &quot;spotify&quot;: &quot;https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8&quot;\n      },\n      &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8&quot;,\n      &quot;id&quot;: &quot;0WISkx0PwT6lYWdPqKUJY8&quot;,\n      &quot;name&quot;: &quot;Stephen Malkmus&quot;,\n      &quot;type&quot;: &quot;artist&quot;,\n      &quot;uri&quot;: &quot;spotify:artist:0WISkx0PwT6lYWdPqKUJY8&quot;\n    },\n    {\n      &quot;external_urls&quot;: {\n        &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7&quot;\n      },\n      &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7&quot;,\n      &quot;id&quot;: &quot;7uStwCeP54Za8gXUFCf5L7&quot;,\n      &quot;name&quot;: &quot;The Jicks&quot;,\n      &quot;type&quot;: &quot;artist&quot;,\n      &quot;uri&quot;: &quot;spotify:artist:7uStwCeP54Za8gXUFCf5L7&quot;\n    }\n  ],\n  &quot;available_markets&quot;: [&quot;AR&quot;,\n    &quot;BO&quot;,\n    &quot;BR&quot;,\n    &quot;CA&quot;,\n    &quot;...&quot;,\n    &quot;US&quot;,\n    &quot;UY&quot;,\n    &quot;VN&quot;\n  ],\n  &quot;disc_number&quot;: 1,\n  &quot;duration_ms&quot;: 608826,\n  &quot;explicit&quot;: False,\n  &quot;external_ids&quot;: {\n    &quot;isrc&quot;: &quot;USMTD0877204&quot;\n  },\n  &quot;external_urls&quot;: {\n    &quot;spotify&quot;: &quot;https://open.spotify.com/track/0BDYBajZydY54OTgQsH940&quot;\n  },\n  &quot;href&quot;: &quot;https://api.spotify.com/v1/tracks/0BDYBajZydY54OTgQsH940&quot;,\n  &quot;id&quot;: &quot;0BDYBajZydY54OTgQsH940&quot;,\n  &quot;is_local&quot;: False,\n  &quot;name&quot;: &quot;Real Emotional Trash&quot;,\n  &quot;popularity&quot;: 21,\n  &quot;preview_url&quot;: &quot;https://p.scdn.co/mp3-preview/4fcbcd5a99fc7590d5819849e1aad3eff981dc75?cid=be22fd00039241bc96d161a63876b54c&quot;,\n  &quot;track_number&quot;: 4,\n  &quot;type&quot;: &quot;track&quot;,\n  &quot;uri&quot;: &quot;spotify:track:0BDYBajZydY54OTgQsH940&quot;\n}\n</code></pre>\n<p>In addition to plenty of information about the track, Spotify also includes information about the album that contains the track. If we were to just use the <code>dict.keys()</code> method to turn this response into a DataFrame, we'd be missing out on all that extra album information. Well, it would be there, just not readily accessible.</p><pre><code class=\"language-python\">track_response.keys()\n</code></pre>\n<h3 id=\"output--1\">Output:</h3><pre><code class=\"language-python\">dict_keys(['album', 'artists', 'available_markets', 'disc_number', 'duration_ms', 'explicit', 'external_ids', 'external_urls', 'href', 'id', 'is_local', 'name', 'popularity', 'preview_url', 'track_number', 'type', 'uri'])\n</code></pre>\n<p>So how do we get around this? Well, we could write our own function, but because pandas is amazing, it already has a built in tool that takes care of this for us.</p><h2 id=\"data-normalization\">Data Normalization</h2><p>Meet <code>json_normalize()</code>:</p><pre><code class=\"language-python\">import pandas as pd\nfrom pandas.io.json import json_normalize\njson_normalize(track_response)\n</code></pre>\n<h3 id=\"output--2\">Output:</h3><div class=\"tableshadow tableContainer\" data-simplebar=\"\">\n<table class=\"responsive-table\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>album.album_type</th>\n      <th>album.artists</th>\n      <th>album.available_markets</th>\n      <th>album.external_urls.spotify</th>\n      <th>album.href</th>\n      <th>album.id</th>\n      <th>album.images</th>\n      <th>album.name</th>\n      <th>album.release_date</th>\n      <th>album.release_date_precision</th>\n      <th>...</th>\n      <th>external_urls.spotify</th>\n      <th>href</th>\n      <th>id</th>\n      <th>is_local</th>\n      <th>name</th>\n      <th>popularity</th>\n      <th>preview_url</th>\n      <th>track_number</th>\n      <th>type</th>\n      <th>uri</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>album</td>\n      <td>[{'external_urls': {'spotify': 'https://open.s...</td>\n      <td>[AR, BO, BR, CA, CL, CO, CR, EC, GT, HK, HN, I...</td>\n      <td>https://open.spotify.com/album/6pWpb4IdPu9vp9m...</td>\n      <td>https://api.spotify.com/v1/albums/6pWpb4IdPu9v...</td>\n      <td>6pWpb4IdPu9vp9mOdh5DjY</td>\n      <td>[{'height': 640, 'url': 'https://i.scdn.co/ima...</td>\n      <td>Real Emotional Trash</td>\n      <td>2008-03-04</td>\n      <td>day</td>\n      <td>...</td>\n      <td>https://open.spotify.com/track/0BDYBajZydY54OT...</td>\n      <td>https://api.spotify.com/v1/tracks/0BDYBajZydY5...</td>\n      <td>0BDYBajZydY54OTgQsH940</td>\n      <td>False</td>\n      <td>Real Emotional Trash</td>\n      <td>21</td>\n      <td>https://p.scdn.co/mp3-preview/4fcbcd5a99fc7590...</td>\n      <td>4</td>\n      <td>track</td>\n      <td>spotify:track:0BDYBajZydY54OTgQsH940</td>\n    </tr>\n  </tbody>\n</table>\n</div><p>Yep – it's that easy. pandas takes our nested JSON object, flattens it out, and turns it into a DataFrame.</p><p>This makes our life easier when we're dealing with one record, but it <em>really</em> comes in handy when we're dealing with a response that contains multiple records.</p><pre><code class=\"language-python\">tracks_response = sp.tracks(\n    ['0BDYBajZydY54OTgQsH940',\n     '7fdUqrzb8oCcIoKvFuzMrs',\n     '0islTY4Fw6lhYbfqi8Qtdj',\n     '3jyFLbljUTKjE13nIWXchH',\n     '6dNmC2YWtWbVOFOdTuRDQs']\n)\ntracks_response\n</code></pre>\n<h3 id=\"output--3\">Output:</h3><pre><code class=\"language-json\">{\n  &quot;tracks&quot;: [{\n      &quot;album&quot;: {\n        &quot;album_type&quot;: &quot;album&quot;,\n        &quot;artists&quot;: [{\n            &quot;external_urls&quot;: {\n              &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe&quot;\n            },\n            &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe&quot;,\n            &quot;id&quot;: &quot;7wyRA7deGRxozTyBc6QXPe&quot;,\n            &quot;name&quot;: &quot;Stephen Malkmus &amp; The Jicks&quot;,\n            &quot;type&quot;: &quot;artist&quot;,\n            &quot;uri&quot;: &quot;spotify:artist:7wyRA7deGRxozTyBc6QXPe&quot;\n          },\n          {\n            &quot;external_urls&quot;: {\n              &quot;spotify&quot;: &quot;https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8&quot;\n            },\n            &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8&quot;,\n            &quot;id&quot;: &quot;0WISkx0PwT6lYWdPqKUJY8&quot;,\n            &quot;name&quot;: &quot;Stephen Malkmus&quot;,\n            &quot;type&quot;: &quot;artist&quot;,\n            &quot;uri&quot;: &quot;spotify:artist:0WISkx0PwT6lYWdPqKUJY8&quot;\n          },\n          {\n            &quot;external_urls&quot;: {\n              &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7&quot;\n            },\n            &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7&quot;,\n            &quot;id&quot;: &quot;7uStwCeP54Za8gXUFCf5L7&quot;,\n            &quot;name&quot;: &quot;The Jicks&quot;,\n            &quot;type&quot;: &quot;artist&quot;,\n            &quot;uri&quot;: &quot;spotify:artist:7uStwCeP54Za8gXUFCf5L7&quot;\n          }\n        ],\n        &quot;available_markets&quot;: [&quot;AR&quot;,\n          &quot;BO&quot;,\n          &quot;BR&quot;,\n          &quot;CA&quot;,\n          &quot;CL&quot;,\n          &quot;CO&quot;,\n          &quot;CR&quot;,\n          &quot;EC&quot;,\n          &quot;GT&quot;,\n          &quot;HK&quot;,\n          &quot;HN&quot;,\n          &quot;ID&quot;,\n          &quot;MX&quot;,\n          &quot;MY&quot;,\n          &quot;NI&quot;,\n          &quot;PA&quot;,\n          &quot;PE&quot;,\n          &quot;PH&quot;,\n          &quot;PY&quot;,\n          &quot;SG&quot;,\n          &quot;SV&quot;,\n          &quot;TH&quot;,\n          &quot;TW&quot;,\n          &quot;US&quot;,\n          &quot;UY&quot;,\n          &quot;VN&quot;\n        ],\n        &quot;external_urls&quot;: {\n          &quot;spotify&quot;: &quot;https://open.spotify.com/album/6pWpb4IdPu9vp9mOdh5DjY&quot;\n        },\n        &quot;href&quot;: &quot;https://api.spotify.com/v1/albums/6pWpb4IdPu9vp9mOdh5DjY&quot;,\n        &quot;id&quot;: &quot;6pWpb4IdPu9vp9mOdh5DjY&quot;,\n        &quot;images&quot;: [{\n            &quot;height&quot;: 640,\n            &quot;url&quot;: &quot;https://i.scdn.co/image/918fdb6fdffccf2bd2dd1a1a93136000f8cf9bd3&quot;,\n            &quot;width&quot;: 640\n          },\n          {\n            &quot;height&quot;: 300,\n            &quot;url&quot;: &quot;https://i.scdn.co/image/fb39290ebca6fac424d4a40611a7e0d1146c5f88&quot;,\n            &quot;width&quot;: 300\n          },\n          {\n            &quot;height&quot;: 64,\n            &quot;url&quot;: &quot;https://i.scdn.co/image/873da4a0a21acd96e4a0036c9ecd0580b62652d4&quot;,\n            &quot;width&quot;: 64\n          }\n        ],\n        &quot;name&quot;: &quot;Real Emotional Trash&quot;,\n        &quot;release_date&quot;: &quot;2008-03-04&quot;,\n        &quot;release_date_precision&quot;: &quot;day&quot;,\n        &quot;type&quot;: &quot;album&quot;,\n        &quot;uri&quot;: &quot;spotify:album:6pWpb4IdPu9vp9mOdh5DjY&quot;\n      },\n      &quot;artists&quot;: [{\n          &quot;external_urls&quot;: {\n            &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe&quot;\n          },\n          &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe&quot;,\n          &quot;id&quot;: &quot;7wyRA7deGRxozTyBc6QXPe&quot;,\n          &quot;name&quot;: &quot;Stephen Malkmus &amp; The Jicks&quot;,\n          &quot;type&quot;: &quot;artist&quot;,\n          &quot;uri&quot;: &quot;spotify:artist:7wyRA7deGRxozTyBc6QXPe&quot;\n        },\n        {\n          &quot;external_urls&quot;: {\n            &quot;spotify&quot;: &quot;https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8&quot;\n          },\n          &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8&quot;,\n          &quot;id&quot;: &quot;0WISkx0PwT6lYWdPqKUJY8&quot;,\n          &quot;name&quot;: &quot;Stephen Malkmus&quot;,\n          &quot;type&quot;: &quot;artist&quot;,\n          &quot;uri&quot;: &quot;spotify:artist:0WISkx0PwT6lYWdPqKUJY8&quot;\n        },\n        {\n          &quot;external_urls&quot;: {\n            &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7&quot;\n          },\n          &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7&quot;,\n          &quot;id&quot;: &quot;7uStwCeP54Za8gXUFCf5L7&quot;,\n          &quot;name&quot;: &quot;The Jicks&quot;,\n          &quot;type&quot;: &quot;artist&quot;,\n          &quot;uri&quot;: &quot;spotify:artist:7uStwCeP54Za8gXUFCf5L7&quot;\n        }\n      ],\n      &quot;available_markets&quot;: [&quot;AR&quot;,\n        &quot;BO&quot;,\n        &quot;BR&quot;,\n        &quot;CA&quot;,\n        &quot;CL&quot;,\n        &quot;CO&quot;,\n        &quot;CR&quot;,\n        &quot;EC&quot;,\n        &quot;GT&quot;,\n        &quot;HK&quot;,\n        &quot;HN&quot;,\n        &quot;ID&quot;,\n        &quot;MX&quot;,\n        &quot;MY&quot;,\n        &quot;NI&quot;,\n        &quot;PA&quot;,\n        &quot;PE&quot;,\n        &quot;PH&quot;,\n        &quot;PY&quot;,\n        &quot;SG&quot;,\n        &quot;SV&quot;,\n        &quot;TH&quot;,\n        &quot;TW&quot;,\n        &quot;US&quot;,\n        &quot;UY&quot;,\n        &quot;VN&quot;\n      ],\n      &quot;disc_number&quot;: 1,\n      &quot;duration_ms&quot;: 608826,\n      &quot;explicit&quot;: False,\n      &quot;external_ids&quot;: {\n        &quot;isrc&quot;: &quot;USMTD0877204&quot;\n      },\n      &quot;external_urls&quot;: {\n        &quot;spotify&quot;: &quot;https://open.spotify.com/track/0BDYBajZydY54OTgQsH940&quot;\n      },\n      &quot;href&quot;: &quot;https://api.spotify.com/v1/tracks/0BDYBajZydY54OTgQsH940&quot;,\n      &quot;id&quot;: &quot;0BDYBajZydY54OTgQsH940&quot;,\n      &quot;is_local&quot;: False,\n      &quot;name&quot;: &quot;Real Emotional Trash&quot;,\n      &quot;popularity&quot;: 21,\n      &quot;preview_url&quot;: &quot;https://p.scdn.co/mp3-preview/4fcbcd5a99fc7590d5819849e1aad3eff981dc75?cid=be22fd00039241bc96d161a63876b54c&quot;,\n      &quot;track_number&quot;: 4,\n      &quot;type&quot;: &quot;track&quot;,\n      &quot;uri&quot;: &quot;spotify:track:0BDYBajZydY54OTgQsH940&quot;\n    },\n    {\n      &quot;album&quot;: {\n        &quot;album_type&quot;: &quot;album&quot;,\n        &quot;artists&quot;: [{\n            &quot;external_urls&quot;: {\n              &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe&quot;\n            },\n            &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe&quot;,\n            &quot;id&quot;: &quot;7wyRA7deGRxozTyBc6QXPe&quot;,\n            &quot;name&quot;: &quot;Stephen Malkmus &amp; The Jicks&quot;,\n            &quot;type&quot;: &quot;artist&quot;,\n            &quot;uri&quot;: &quot;spotify:artist:7wyRA7deGRxozTyBc6QXPe&quot;\n          },\n          {\n            &quot;external_urls&quot;: {\n              &quot;spotify&quot;: &quot;https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8&quot;\n            },\n            &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8&quot;,\n            &quot;id&quot;: &quot;0WISkx0PwT6lYWdPqKUJY8&quot;,\n            &quot;name&quot;: &quot;Stephen Malkmus&quot;,\n            &quot;type&quot;: &quot;artist&quot;,\n            &quot;uri&quot;: &quot;spotify:artist:0WISkx0PwT6lYWdPqKUJY8&quot;\n          },\n          {\n            &quot;external_urls&quot;: {\n              &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7&quot;\n            },\n            &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7&quot;,\n            &quot;id&quot;: &quot;7uStwCeP54Za8gXUFCf5L7&quot;,\n            &quot;name&quot;: &quot;The Jicks&quot;,\n            &quot;type&quot;: &quot;artist&quot;,\n            &quot;uri&quot;: &quot;spotify:artist:7uStwCeP54Za8gXUFCf5L7&quot;\n          }\n        ],\n        &quot;available_markets&quot;: [&quot;AR&quot;,\n          &quot;BO&quot;,\n          &quot;BR&quot;,\n          &quot;CA&quot;,\n          &quot;CL&quot;,\n          &quot;CO&quot;,\n          &quot;CR&quot;,\n          &quot;EC&quot;,\n          &quot;GT&quot;,\n          &quot;HK&quot;,\n          &quot;HN&quot;,\n          &quot;ID&quot;,\n          &quot;MX&quot;,\n          &quot;MY&quot;,\n          &quot;NI&quot;,\n          &quot;PA&quot;,\n          &quot;PE&quot;,\n          &quot;PH&quot;,\n          &quot;PY&quot;,\n          &quot;SG&quot;,\n          &quot;SV&quot;,\n          &quot;TH&quot;,\n          &quot;TW&quot;,\n          &quot;US&quot;,\n          &quot;UY&quot;,\n          &quot;VN&quot;\n        ],\n        &quot;external_urls&quot;: {\n          &quot;spotify&quot;: &quot;https://open.spotify.com/album/6pWpb4IdPu9vp9mOdh5DjY&quot;\n        },\n        &quot;href&quot;: &quot;https://api.spotify.com/v1/albums/6pWpb4IdPu9vp9mOdh5DjY&quot;,\n        &quot;id&quot;: &quot;6pWpb4IdPu9vp9mOdh5DjY&quot;,\n        &quot;images&quot;: [{\n            &quot;height&quot;: 640,\n            &quot;url&quot;: &quot;https://i.scdn.co/image/918fdb6fdffccf2bd2dd1a1a93136000f8cf9bd3&quot;,\n            &quot;width&quot;: 640\n          },\n          {\n            &quot;height&quot;: 300,\n            &quot;url&quot;: &quot;https://i.scdn.co/image/fb39290ebca6fac424d4a40611a7e0d1146c5f88&quot;,\n            &quot;width&quot;: 300\n          },\n          {\n            &quot;height&quot;: 64,\n            &quot;url&quot;: &quot;https://i.scdn.co/image/873da4a0a21acd96e4a0036c9ecd0580b62652d4&quot;,\n            &quot;width&quot;: 64\n          }\n        ],\n        &quot;name&quot;: &quot;Real Emotional Trash&quot;,\n        &quot;release_date&quot;: &quot;2008-03-04&quot;,\n        &quot;release_date_precision&quot;: &quot;day&quot;,\n        &quot;type&quot;: &quot;album&quot;,\n        &quot;uri&quot;: &quot;spotify:album:6pWpb4IdPu9vp9mOdh5DjY&quot;\n      },\n      &quot;artists&quot;: [{\n          &quot;external_urls&quot;: {\n            &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe&quot;\n          },\n          &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe&quot;,\n          &quot;id&quot;: &quot;7wyRA7deGRxozTyBc6QXPe&quot;,\n          &quot;name&quot;: &quot;Stephen Malkmus &amp; The Jicks&quot;,\n          &quot;type&quot;: &quot;artist&quot;,\n          &quot;uri&quot;: &quot;spotify:artist:7wyRA7deGRxozTyBc6QXPe&quot;\n        },\n        {\n          &quot;external_urls&quot;: {\n            &quot;spotify&quot;: &quot;https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8&quot;\n          },\n          &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8&quot;,\n          &quot;id&quot;: &quot;0WISkx0PwT6lYWdPqKUJY8&quot;,\n          &quot;name&quot;: &quot;Stephen Malkmus&quot;,\n          &quot;type&quot;: &quot;artist&quot;,\n          &quot;uri&quot;: &quot;spotify:artist:0WISkx0PwT6lYWdPqKUJY8&quot;\n        },\n        {\n          &quot;external_urls&quot;: {\n            &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7&quot;\n          },\n          &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7&quot;,\n          &quot;id&quot;: &quot;7uStwCeP54Za8gXUFCf5L7&quot;,\n          &quot;name&quot;: &quot;The Jicks&quot;,\n          &quot;type&quot;: &quot;artist&quot;,\n          &quot;uri&quot;: &quot;spotify:artist:7uStwCeP54Za8gXUFCf5L7&quot;\n        }\n      ],\n      &quot;available_markets&quot;: [&quot;AR&quot;,\n        &quot;BO&quot;,\n        &quot;BR&quot;,\n        &quot;CA&quot;,\n        &quot;CL&quot;,\n        &quot;CO&quot;,\n        &quot;CR&quot;,\n        &quot;EC&quot;,\n        &quot;GT&quot;,\n        &quot;HK&quot;,\n        &quot;HN&quot;,\n        &quot;ID&quot;,\n        &quot;MX&quot;,\n        &quot;MY&quot;,\n        &quot;NI&quot;,\n        &quot;PA&quot;,\n        &quot;PE&quot;,\n        &quot;PH&quot;,\n        &quot;PY&quot;,\n        &quot;SG&quot;,\n        &quot;SV&quot;,\n        &quot;TH&quot;,\n        &quot;TW&quot;,\n        &quot;US&quot;,\n        &quot;UY&quot;,\n        &quot;VN&quot;\n      ],\n      &quot;disc_number&quot;: 1,\n      &quot;duration_ms&quot;: 222706,\n      &quot;explicit&quot;: False,\n      &quot;external_ids&quot;: {\n        &quot;isrc&quot;: &quot;USMTD0877203&quot;\n      },\n      &quot;external_urls&quot;: {\n        &quot;spotify&quot;: &quot;https://open.spotify.com/track/7fdUqrzb8oCcIoKvFuzMrs&quot;\n      },\n      &quot;href&quot;: &quot;https://api.spotify.com/v1/tracks/7fdUqrzb8oCcIoKvFuzMrs&quot;,\n      &quot;id&quot;: &quot;7fdUqrzb8oCcIoKvFuzMrs&quot;,\n      &quot;is_local&quot;: False,\n      &quot;name&quot;: &quot;Cold Son&quot;,\n      &quot;popularity&quot;: 25,\n      &quot;preview_url&quot;: &quot;https://p.scdn.co/mp3-preview/4cf4e21727def47097e27d30de16ffe9f99b7774?cid=be22fd00039241bc96d161a63876b54c&quot;,\n      &quot;track_number&quot;: 3,\n      &quot;type&quot;: &quot;track&quot;,\n      &quot;uri&quot;: &quot;spotify:track:7fdUqrzb8oCcIoKvFuzMrs&quot;\n    },\n    {\n      &quot;album&quot;: {\n        &quot;album_type&quot;: &quot;album&quot;,\n        &quot;artists&quot;: [{\n            &quot;external_urls&quot;: {\n              &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe&quot;\n            },\n            &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe&quot;,\n            &quot;id&quot;: &quot;7wyRA7deGRxozTyBc6QXPe&quot;,\n            &quot;name&quot;: &quot;Stephen Malkmus &amp; The Jicks&quot;,\n            &quot;type&quot;: &quot;artist&quot;,\n            &quot;uri&quot;: &quot;spotify:artist:7wyRA7deGRxozTyBc6QXPe&quot;\n          },\n          {\n            &quot;external_urls&quot;: {\n              &quot;spotify&quot;: &quot;https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8&quot;\n            },\n            &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8&quot;,\n            &quot;id&quot;: &quot;0WISkx0PwT6lYWdPqKUJY8&quot;,\n            &quot;name&quot;: &quot;Stephen Malkmus&quot;,\n            &quot;type&quot;: &quot;artist&quot;,\n            &quot;uri&quot;: &quot;spotify:artist:0WISkx0PwT6lYWdPqKUJY8&quot;\n          },\n          {\n            &quot;external_urls&quot;: {\n              &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7&quot;\n            },\n            &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7&quot;,\n            &quot;id&quot;: &quot;7uStwCeP54Za8gXUFCf5L7&quot;,\n            &quot;name&quot;: &quot;The Jicks&quot;,\n            &quot;type&quot;: &quot;artist&quot;,\n            &quot;uri&quot;: &quot;spotify:artist:7uStwCeP54Za8gXUFCf5L7&quot;\n          }\n        ],\n        &quot;available_markets&quot;: [&quot;AR&quot;,\n          &quot;BO&quot;,\n          &quot;BR&quot;,\n          &quot;CA&quot;,\n          &quot;CL&quot;,\n          &quot;CO&quot;,\n          &quot;CR&quot;,\n          &quot;EC&quot;,\n          &quot;GT&quot;,\n          &quot;HK&quot;,\n          &quot;HN&quot;,\n          &quot;ID&quot;,\n          &quot;MX&quot;,\n          &quot;MY&quot;,\n          &quot;NI&quot;,\n          &quot;PA&quot;,\n          &quot;PE&quot;,\n          &quot;PH&quot;,\n          &quot;PY&quot;,\n          &quot;SG&quot;,\n          &quot;SV&quot;,\n          &quot;TH&quot;,\n          &quot;TW&quot;,\n          &quot;US&quot;,\n          &quot;UY&quot;,\n          &quot;VN&quot;\n        ],\n        &quot;external_urls&quot;: {\n          &quot;spotify&quot;: &quot;https://open.spotify.com/album/6pWpb4IdPu9vp9mOdh5DjY&quot;\n        },\n        &quot;href&quot;: &quot;https://api.spotify.com/v1/albums/6pWpb4IdPu9vp9mOdh5DjY&quot;,\n        &quot;id&quot;: &quot;6pWpb4IdPu9vp9mOdh5DjY&quot;,\n        &quot;images&quot;: [{\n            &quot;height&quot;: 640,\n            &quot;url&quot;: &quot;https://i.scdn.co/image/918fdb6fdffccf2bd2dd1a1a93136000f8cf9bd3&quot;,\n            &quot;width&quot;: 640\n          },\n          {\n            &quot;height&quot;: 300,\n            &quot;url&quot;: &quot;https://i.scdn.co/image/fb39290ebca6fac424d4a40611a7e0d1146c5f88&quot;,\n            &quot;width&quot;: 300\n          },\n          {\n            &quot;height&quot;: 64,\n            &quot;url&quot;: &quot;https://i.scdn.co/image/873da4a0a21acd96e4a0036c9ecd0580b62652d4&quot;,\n            &quot;width&quot;: 64\n          }\n        ],\n        &quot;name&quot;: &quot;Real Emotional Trash&quot;,\n        &quot;release_date&quot;: &quot;2008-03-04&quot;,\n        &quot;release_date_precision&quot;: &quot;day&quot;,\n        &quot;type&quot;: &quot;album&quot;,\n        &quot;uri&quot;: &quot;spotify:album:6pWpb4IdPu9vp9mOdh5DjY&quot;\n      },\n      &quot;artists&quot;: [{\n          &quot;external_urls&quot;: {\n            &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe&quot;\n          },\n          &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe&quot;,\n          &quot;id&quot;: &quot;7wyRA7deGRxozTyBc6QXPe&quot;,\n          &quot;name&quot;: &quot;Stephen Malkmus &amp; The Jicks&quot;,\n          &quot;type&quot;: &quot;artist&quot;,\n          &quot;uri&quot;: &quot;spotify:artist:7wyRA7deGRxozTyBc6QXPe&quot;\n        },\n        {\n          &quot;external_urls&quot;: {\n            &quot;spotify&quot;: &quot;https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8&quot;\n          },\n          &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8&quot;,\n          &quot;id&quot;: &quot;0WISkx0PwT6lYWdPqKUJY8&quot;,\n          &quot;name&quot;: &quot;Stephen Malkmus&quot;,\n          &quot;type&quot;: &quot;artist&quot;,\n          &quot;uri&quot;: &quot;spotify:artist:0WISkx0PwT6lYWdPqKUJY8&quot;\n        },\n        {\n          &quot;external_urls&quot;: {\n            &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7&quot;\n          },\n          &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7&quot;,\n          &quot;id&quot;: &quot;7uStwCeP54Za8gXUFCf5L7&quot;,\n          &quot;name&quot;: &quot;The Jicks&quot;,\n          &quot;type&quot;: &quot;artist&quot;,\n          &quot;uri&quot;: &quot;spotify:artist:7uStwCeP54Za8gXUFCf5L7&quot;\n        }\n      ],\n      &quot;available_markets&quot;: [&quot;AR&quot;,\n        &quot;BO&quot;,\n        &quot;BR&quot;,\n        &quot;CA&quot;,\n        &quot;CL&quot;,\n        &quot;CO&quot;,\n        &quot;CR&quot;,\n        &quot;EC&quot;,\n        &quot;GT&quot;,\n        &quot;HK&quot;,\n        &quot;HN&quot;,\n        &quot;ID&quot;,\n        &quot;MX&quot;,\n        &quot;MY&quot;,\n        &quot;NI&quot;,\n        &quot;PA&quot;,\n        &quot;PE&quot;,\n        &quot;PH&quot;,\n        &quot;PY&quot;,\n        &quot;SG&quot;,\n        &quot;SV&quot;,\n        &quot;TH&quot;,\n        &quot;TW&quot;,\n        &quot;US&quot;,\n        &quot;UY&quot;,\n        &quot;VN&quot;\n      ],\n      &quot;disc_number&quot;: 1,\n      &quot;duration_ms&quot;: 416173,\n      &quot;explicit&quot;: False,\n      &quot;external_ids&quot;: {\n        &quot;isrc&quot;: &quot;USMTD0877202&quot;\n      },\n      &quot;external_urls&quot;: {\n        &quot;spotify&quot;: &quot;https://open.spotify.com/track/0islTY4Fw6lhYbfqi8Qtdj&quot;\n      },\n      &quot;href&quot;: &quot;https://api.spotify.com/v1/tracks/0islTY4Fw6lhYbfqi8Qtdj&quot;,\n      &quot;id&quot;: &quot;0islTY4Fw6lhYbfqi8Qtdj&quot;,\n      &quot;is_local&quot;: False,\n      &quot;name&quot;: &quot;Hopscotch Willie&quot;,\n      &quot;popularity&quot;: 24,\n      &quot;preview_url&quot;: &quot;https://p.scdn.co/mp3-preview/c7782dc6d7c0bb12159db4f90fba8388af034d60?cid=be22fd00039241bc96d161a63876b54c&quot;,\n      &quot;track_number&quot;: 2,\n      &quot;type&quot;: &quot;track&quot;,\n      &quot;uri&quot;: &quot;spotify:track:0islTY4Fw6lhYbfqi8Qtdj&quot;\n    },\n    {\n      &quot;album&quot;: {\n        &quot;album_type&quot;: &quot;album&quot;,\n        &quot;artists&quot;: [{\n            &quot;external_urls&quot;: {\n              &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe&quot;\n            },\n            &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe&quot;,\n            &quot;id&quot;: &quot;7wyRA7deGRxozTyBc6QXPe&quot;,\n            &quot;name&quot;: &quot;Stephen Malkmus &amp; The Jicks&quot;,\n            &quot;type&quot;: &quot;artist&quot;,\n            &quot;uri&quot;: &quot;spotify:artist:7wyRA7deGRxozTyBc6QXPe&quot;\n          },\n          {\n            &quot;external_urls&quot;: {\n              &quot;spotify&quot;: &quot;https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8&quot;\n            },\n            &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8&quot;,\n            &quot;id&quot;: &quot;0WISkx0PwT6lYWdPqKUJY8&quot;,\n            &quot;name&quot;: &quot;Stephen Malkmus&quot;,\n            &quot;type&quot;: &quot;artist&quot;,\n            &quot;uri&quot;: &quot;spotify:artist:0WISkx0PwT6lYWdPqKUJY8&quot;\n          },\n          {\n            &quot;external_urls&quot;: {\n              &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7&quot;\n            },\n            &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7&quot;,\n            &quot;id&quot;: &quot;7uStwCeP54Za8gXUFCf5L7&quot;,\n            &quot;name&quot;: &quot;The Jicks&quot;,\n            &quot;type&quot;: &quot;artist&quot;,\n            &quot;uri&quot;: &quot;spotify:artist:7uStwCeP54Za8gXUFCf5L7&quot;\n          }\n        ],\n        &quot;available_markets&quot;: [&quot;AR&quot;,\n          &quot;BO&quot;,\n          &quot;BR&quot;,\n          &quot;CA&quot;,\n          &quot;CL&quot;,\n          &quot;CO&quot;,\n          &quot;CR&quot;,\n          &quot;EC&quot;,\n          &quot;GT&quot;,\n          &quot;HK&quot;,\n          &quot;HN&quot;,\n          &quot;ID&quot;,\n          &quot;MX&quot;,\n          &quot;MY&quot;,\n          &quot;NI&quot;,\n          &quot;PA&quot;,\n          &quot;PE&quot;,\n          &quot;PH&quot;,\n          &quot;PY&quot;,\n          &quot;SG&quot;,\n          &quot;SV&quot;,\n          &quot;TH&quot;,\n          &quot;TW&quot;,\n          &quot;US&quot;,\n          &quot;UY&quot;,\n          &quot;VN&quot;\n        ],\n        &quot;external_urls&quot;: {\n          &quot;spotify&quot;: &quot;https://open.spotify.com/album/6pWpb4IdPu9vp9mOdh5DjY&quot;\n        },\n        &quot;href&quot;: &quot;https://api.spotify.com/v1/albums/6pWpb4IdPu9vp9mOdh5DjY&quot;,\n        &quot;id&quot;: &quot;6pWpb4IdPu9vp9mOdh5DjY&quot;,\n        &quot;images&quot;: [{\n            &quot;height&quot;: 640,\n            &quot;url&quot;: &quot;https://i.scdn.co/image/918fdb6fdffccf2bd2dd1a1a93136000f8cf9bd3&quot;,\n            &quot;width&quot;: 640\n          },\n          {\n            &quot;height&quot;: 300,\n            &quot;url&quot;: &quot;https://i.scdn.co/image/fb39290ebca6fac424d4a40611a7e0d1146c5f88&quot;,\n            &quot;width&quot;: 300\n          },\n          {\n            &quot;height&quot;: 64,\n            &quot;url&quot;: &quot;https://i.scdn.co/image/873da4a0a21acd96e4a0036c9ecd0580b62652d4&quot;,\n            &quot;width&quot;: 64\n          }\n        ],\n        &quot;name&quot;: &quot;Real Emotional Trash&quot;,\n        &quot;release_date&quot;: &quot;2008-03-04&quot;,\n        &quot;release_date_precision&quot;: &quot;day&quot;,\n        &quot;type&quot;: &quot;album&quot;,\n        &quot;uri&quot;: &quot;spotify:album:6pWpb4IdPu9vp9mOdh5DjY&quot;\n      },\n      &quot;artists&quot;: [{\n          &quot;external_urls&quot;: {\n            &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe&quot;\n          },\n          &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe&quot;,\n          &quot;id&quot;: &quot;7wyRA7deGRxozTyBc6QXPe&quot;,\n          &quot;name&quot;: &quot;Stephen Malkmus &amp; The Jicks&quot;,\n          &quot;type&quot;: &quot;artist&quot;,\n          &quot;uri&quot;: &quot;spotify:artist:7wyRA7deGRxozTyBc6QXPe&quot;\n        },\n        {\n          &quot;external_urls&quot;: {\n            &quot;spotify&quot;: &quot;https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8&quot;\n          },\n          &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8&quot;,\n          &quot;id&quot;: &quot;0WISkx0PwT6lYWdPqKUJY8&quot;,\n          &quot;name&quot;: &quot;Stephen Malkmus&quot;,\n          &quot;type&quot;: &quot;artist&quot;,\n          &quot;uri&quot;: &quot;spotify:artist:0WISkx0PwT6lYWdPqKUJY8&quot;\n        },\n        {\n          &quot;external_urls&quot;: {\n            &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7&quot;\n          },\n          &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7&quot;,\n          &quot;id&quot;: &quot;7uStwCeP54Za8gXUFCf5L7&quot;,\n          &quot;name&quot;: &quot;The Jicks&quot;,\n          &quot;type&quot;: &quot;artist&quot;,\n          &quot;uri&quot;: &quot;spotify:artist:7uStwCeP54Za8gXUFCf5L7&quot;\n        }\n      ],\n      &quot;available_markets&quot;: [&quot;AR&quot;,\n        &quot;BO&quot;,\n        &quot;BR&quot;,\n        &quot;CA&quot;,\n        &quot;CL&quot;,\n        &quot;CO&quot;,\n        &quot;CR&quot;,\n        &quot;EC&quot;,\n        &quot;GT&quot;,\n        &quot;HK&quot;,\n        &quot;HN&quot;,\n        &quot;ID&quot;,\n        &quot;MX&quot;,\n        &quot;MY&quot;,\n        &quot;NI&quot;,\n        &quot;PA&quot;,\n        &quot;PE&quot;,\n        &quot;PH&quot;,\n        &quot;PY&quot;,\n        &quot;SG&quot;,\n        &quot;SV&quot;,\n        &quot;TH&quot;,\n        &quot;TW&quot;,\n        &quot;US&quot;,\n        &quot;UY&quot;,\n        &quot;VN&quot;\n      ],\n      &quot;disc_number&quot;: 1,\n      &quot;duration_ms&quot;: 308146,\n      &quot;explicit&quot;: False,\n      &quot;external_ids&quot;: {\n        &quot;isrc&quot;: &quot;USMTD0877201&quot;\n      },\n      &quot;external_urls&quot;: {\n        &quot;spotify&quot;: &quot;https://open.spotify.com/track/3jyFLbljUTKjE13nIWXchH&quot;\n      },\n      &quot;href&quot;: &quot;https://api.spotify.com/v1/tracks/3jyFLbljUTKjE13nIWXchH&quot;,\n      &quot;id&quot;: &quot;3jyFLbljUTKjE13nIWXchH&quot;,\n      &quot;is_local&quot;: False,\n      &quot;name&quot;: &quot;Dragonfly Pie&quot;,\n      &quot;popularity&quot;: 26,\n      &quot;preview_url&quot;: &quot;https://p.scdn.co/mp3-preview/50f419e7d3e8a6a771515068622250ab06d1cc86?cid=be22fd00039241bc96d161a63876b54c&quot;,\n      &quot;track_number&quot;: 1,\n      &quot;type&quot;: &quot;track&quot;,\n      &quot;uri&quot;: &quot;spotify:track:3jyFLbljUTKjE13nIWXchH&quot;\n    },\n    {\n      &quot;album&quot;: {\n        &quot;album_type&quot;: &quot;album&quot;,\n        &quot;artists&quot;: [{\n          &quot;external_urls&quot;: {\n            &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe&quot;\n          },\n          &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe&quot;,\n          &quot;id&quot;: &quot;7wyRA7deGRxozTyBc6QXPe&quot;,\n          &quot;name&quot;: &quot;Stephen Malkmus &amp; The Jicks&quot;,\n          &quot;type&quot;: &quot;artist&quot;,\n          &quot;uri&quot;: &quot;spotify:artist:7wyRA7deGRxozTyBc6QXPe&quot;\n        }],\n        &quot;available_markets&quot;: [&quot;AR&quot;,\n          &quot;AU&quot;,\n          &quot;BO&quot;,\n          &quot;BR&quot;,\n          &quot;CA&quot;,\n          &quot;CL&quot;,\n          &quot;CO&quot;,\n          &quot;CR&quot;,\n          &quot;DO&quot;,\n          &quot;EC&quot;,\n          &quot;GT&quot;,\n          &quot;HK&quot;,\n          &quot;HN&quot;,\n          &quot;ID&quot;,\n          &quot;JP&quot;,\n          &quot;MX&quot;,\n          &quot;MY&quot;,\n          &quot;NI&quot;,\n          &quot;NZ&quot;,\n          &quot;PA&quot;,\n          &quot;PE&quot;,\n          &quot;PH&quot;,\n          &quot;PY&quot;,\n          &quot;SG&quot;,\n          &quot;SV&quot;,\n          &quot;TH&quot;,\n          &quot;TW&quot;,\n          &quot;US&quot;,\n          &quot;UY&quot;,\n          &quot;VN&quot;,\n          &quot;ZA&quot;\n        ],\n        &quot;external_urls&quot;: {\n          &quot;spotify&quot;: &quot;https://open.spotify.com/album/5DMvSCwRqfNVlMB5LjHOwG&quot;\n        },\n        &quot;href&quot;: &quot;https://api.spotify.com/v1/albums/5DMvSCwRqfNVlMB5LjHOwG&quot;,\n        &quot;id&quot;: &quot;5DMvSCwRqfNVlMB5LjHOwG&quot;,\n        &quot;images&quot;: [{\n            &quot;height&quot;: 640,\n            &quot;url&quot;: &quot;https://i.scdn.co/image/bc96e20fa6b42c765db2fb904d3a70b6ef57b0bb&quot;,\n            &quot;width&quot;: 640\n          },\n          {\n            &quot;height&quot;: 300,\n            &quot;url&quot;: &quot;https://i.scdn.co/image/c7a31ed50b9c704ec066f4aac669cfb9013effb1&quot;,\n            &quot;width&quot;: 300\n          },\n          {\n            &quot;height&quot;: 64,\n            &quot;url&quot;: &quot;https://i.scdn.co/image/8551e108d0950dd62724ff2703e8c13ce7324114&quot;,\n            &quot;width&quot;: 64\n          }\n        ],\n        &quot;name&quot;: &quot;Sparkle Hard&quot;,\n        &quot;release_date&quot;: &quot;2018-05-18&quot;,\n        &quot;release_date_precision&quot;: &quot;day&quot;,\n        &quot;type&quot;: &quot;album&quot;,\n        &quot;uri&quot;: &quot;spotify:album:5DMvSCwRqfNVlMB5LjHOwG&quot;\n      },\n      &quot;artists&quot;: [{\n        &quot;external_urls&quot;: {\n          &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe&quot;\n        },\n        &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe&quot;,\n        &quot;id&quot;: &quot;7wyRA7deGRxozTyBc6QXPe&quot;,\n        &quot;name&quot;: &quot;Stephen Malkmus &amp; The Jicks&quot;,\n        &quot;type&quot;: &quot;artist&quot;,\n        &quot;uri&quot;: &quot;spotify:artist:7wyRA7deGRxozTyBc6QXPe&quot;\n      }],\n      &quot;available_markets&quot;: [&quot;AR&quot;,\n        &quot;AU&quot;,\n        &quot;BO&quot;,\n        &quot;BR&quot;,\n        &quot;CA&quot;,\n        &quot;CL&quot;,\n        &quot;CO&quot;,\n        &quot;CR&quot;,\n        &quot;DO&quot;,\n        &quot;EC&quot;,\n        &quot;GT&quot;,\n        &quot;HK&quot;,\n        &quot;HN&quot;,\n        &quot;ID&quot;,\n        &quot;JP&quot;,\n        &quot;MX&quot;,\n        &quot;MY&quot;,\n        &quot;NI&quot;,\n        &quot;NZ&quot;,\n        &quot;PA&quot;,\n        &quot;PE&quot;,\n        &quot;PH&quot;,\n        &quot;PY&quot;,\n        &quot;SG&quot;,\n        &quot;SV&quot;,\n        &quot;TH&quot;,\n        &quot;TW&quot;,\n        &quot;US&quot;,\n        &quot;UY&quot;,\n        &quot;VN&quot;,\n        &quot;ZA&quot;\n      ],\n      &quot;disc_number&quot;: 1,\n      &quot;duration_ms&quot;: 423275,\n      &quot;explicit&quot;: False,\n      &quot;external_ids&quot;: {\n        &quot;isrc&quot;: &quot;USMTD1710380&quot;\n      },\n      &quot;external_urls&quot;: {\n        &quot;spotify&quot;: &quot;https://open.spotify.com/track/6dNmC2YWtWbVOFOdTuRDQs&quot;\n      },\n      &quot;href&quot;: &quot;https://api.spotify.com/v1/tracks/6dNmC2YWtWbVOFOdTuRDQs&quot;,\n      &quot;id&quot;: &quot;6dNmC2YWtWbVOFOdTuRDQs&quot;,\n      &quot;is_local&quot;: False,\n      &quot;name&quot;: &quot;Difficulties - Let Them Eat Vowels&quot;,\n      &quot;popularity&quot;: 35,\n      &quot;preview_url&quot;: &quot;https://p.scdn.co/mp3-preview/787be9d1bbebcd845d0793476de843fa0a4fff79?cid=be22fd00039241bc96d161a63876b54c&quot;,\n      &quot;track_number&quot;: 11,\n      &quot;type&quot;: &quot;track&quot;,\n      &quot;uri&quot;: &quot;spotify:track:6dNmC2YWtWbVOFOdTuRDQs&quot;\n    }\n  ]\n}\n\n</code></pre>\n<pre><code class=\"language-python\">json_normalise(tracks_response)\n</code></pre>\n<h3 id=\"output--4\">Output:</h3><div class=\"tableshadow tableContainer\" data-simplebar=\"\">\n<table class=\"responsive-table\">\n<thead><tr class=\"tableizer-firstrow\"><th></th><th>album.album_type</th><th>album.artists</th><th>album.available_markets</th><th>album.external_urls.spotify</th><th>album.href</th><th>album.id</th><th>album.images</th><th>album.name</th><th>album.release_date</th><th>album.release_date_precision</th><th>...</th><th>external_urls.spotify</th><th>href</th><th>id</th><th>is_local</th><th>name</th><th>popularity</th><th>preview_url</th><th>track_number</th><th>type</th><th>uri</th></tr></thead><tbody>\n <tr><td>0</td><td>album</td><td>[{'external_urls': {'spotify': 'https://open.s...</td><td>[AR, BO, BR, CA, CL, CO, CR, EC, GT, HK, HN, I...</td><td>https://open.spotify.com/album/6pWpb4IdPu9vp9m...</td><td>https://api.spotify.com/v1/albums/6pWpb4IdPu9v...</td><td>6pWpb4IdPu9vp9mOdh5DjY</td><td>[{'height': 640, 'url': 'https://i.scdn.co/ima...</td><td>Real Emotional Trash</td><td>3/4/2008</td><td>day</td><td>...</td><td>https://open.spotify.com/track/0BDYBajZydY54OT...</td><td>https://api.spotify.com/v1/tracks/0BDYBajZydY5...</td><td>0BDYBajZydY54OTgQsH940</td><td>FALSE</td><td>Real Emotional Trash</td><td>21</td><td>https://p.scdn.co/mp3-preview/4fcbcd5a99fc7590...</td><td>4</td><td>track</td><td>spotify:track:0BDYBajZydY54OTgQsH940</td></tr>\n <tr><td>1</td><td>album</td><td>[{'external_urls': {'spotify': 'https://open.s...</td><td>[AR, BO, BR, CA, CL, CO, CR, EC, GT, HK, HN, I...</td><td>https://open.spotify.com/album/6pWpb4IdPu9vp9m...</td><td>https://api.spotify.com/v1/albums/6pWpb4IdPu9v...</td><td>6pWpb4IdPu9vp9mOdh5DjY</td><td>[{'height': 640, 'url': 'https://i.scdn.co/ima...</td><td>Real Emotional Trash</td><td>3/4/2008</td><td>day</td><td>...</td><td>https://open.spotify.com/track/7fdUqrzb8oCcIoK...</td><td>https://api.spotify.com/v1/tracks/7fdUqrzb8oCc...</td><td>7fdUqrzb8oCcIoKvFuzMrs</td><td>FALSE</td><td>Cold Son</td><td>25</td><td>https://p.scdn.co/mp3-preview/4cf4e21727def470...</td><td>3</td><td>track</td><td>spotify:track:7fdUqrzb8oCcIoKvFuzMrs</td></tr>\n <tr><td>2</td><td>album</td><td>[{'external_urls': {'spotify': 'https://open.s...</td><td>[AR, BO, BR, CA, CL, CO, CR, EC, GT, HK, HN, I...</td><td>https://open.spotify.com/album/6pWpb4IdPu9vp9m...</td><td>https://api.spotify.com/v1/albums/6pWpb4IdPu9v...</td><td>6pWpb4IdPu9vp9mOdh5DjY</td><td>[{'height': 640, 'url': 'https://i.scdn.co/ima...</td><td>Real Emotional Trash</td><td>3/4/2008</td><td>day</td><td>...</td><td>https://open.spotify.com/track/0islTY4Fw6lhYbf...</td><td>https://api.spotify.com/v1/tracks/0islTY4Fw6lh...</td><td>0islTY4Fw6lhYbfqi8Qtdj</td><td>FALSE</td><td>Hopscotch Willie</td><td>24</td><td>https://p.scdn.co/mp3-preview/c7782dc6d7c0bb12...</td><td>2</td><td>track</td><td>spotify:track:0islTY4Fw6lhYbfqi8Qtdj</td></tr>\n <tr><td>3</td><td>album</td><td>[{'external_urls': {'spotify': 'https://open.s...</td><td>[AR, BO, BR, CA, CL, CO, CR, EC, GT, HK, HN, I...</td><td>https://open.spotify.com/album/6pWpb4IdPu9vp9m...</td><td>https://api.spotify.com/v1/albums/6pWpb4IdPu9v...</td><td>6pWpb4IdPu9vp9mOdh5DjY</td><td>[{'height': 640, 'url': 'https://i.scdn.co/ima...</td><td>Real Emotional Trash</td><td>3/4/2008</td><td>day</td><td>...</td><td>https://open.spotify.com/track/3jyFLbljUTKjE13...</td><td>https://api.spotify.com/v1/tracks/3jyFLbljUTKj...</td><td>3jyFLbljUTKjE13nIWXchH</td><td>FALSE</td><td>Dragonfly Pie</td><td>26</td><td>https://p.scdn.co/mp3-preview/50f419e7d3e8a6a7...</td><td>1</td><td>track</td><td>spotify:track:3jyFLbljUTKjE13nIWXchH</td></tr>\n <tr><td>4</td><td>album</td><td>[{'external_urls': {'spotify': 'https://open.s...</td><td>[AR, AU, BO, BR, CA, CL, CO, CR, DO, EC, GT, H...</td><td>https://open.spotify.com/album/5DMvSCwRqfNVlMB...</td><td>https://api.spotify.com/v1/albums/5DMvSCwRqfNV...</td><td>5DMvSCwRqfNVlMB5LjHOwG</td><td>[{'height': 640, 'url': 'https://i.scdn.co/ima...</td><td>Sparkle Hard</td><td>5/18/2018</td><td>day</td><td>...</td><td>https://open.spotify.com/track/6dNmC2YWtWbVOFO...</td><td>https://api.spotify.com/v1/tracks/6dNmC2YWtWbV...</td><td>6dNmC2YWtWbVOFOdTuRDQs</td><td>FALSE</td><td>Difficulties - Let Them Eat Vowels</td><td>35</td><td>https://p.scdn.co/mp3-preview/787be9d1bbebcd84...</td><td>11</td><td>track</td><td>spotify:track:6dNmC2YWtWbVOFOdTuRDQs</td></tr>\n</tbody></table>\n</div><h2 id=\"separate-ways-worlds-apart-\">Separate Ways (Worlds Apart)</h2><p>By default, <code>json_normalize()</code> uses periods <code>.</code> to indicate nested levels of the JSON object (which is actually converted to a Python <code>dict</code> by Spotipy). In our case, the album id is found in <code>track['album']['id']</code>, hence the period between album and id in the DataFrame. This makes things slightly annoying if we want to grab a Series from our new DataFrame. In pandas, we can grab a Series from a DataFrame in many ways. To grab the <code>album.id</code> column, for example:</p><pre><code class=\"language-python\">tracks_df['album.id']\n</code></pre>\n<h3 id=\"output--5\">Output:</h3><pre><code class=\"language-python\">0    6pWpb4IdPu9vp9mOdh5DjY\n1    6pWpb4IdPu9vp9mOdh5DjY\n2    6pWpb4IdPu9vp9mOdh5DjY\n3    6pWpb4IdPu9vp9mOdh5DjY\n4    5DMvSCwRqfNVlMB5LjHOwG\nName: album.id, dtype: object\n</code></pre>\n<p>or</p><pre><code class=\"language-python\">tracks_df.loc[:,'album.id']\n\n</code></pre>\n<h3 id=\"output--6\">Output:</h3><pre><code class=\"language-python\">0    6pWpb4IdPu9vp9mOdh5DjY\n1    6pWpb4IdPu9vp9mOdh5DjY\n2    6pWpb4IdPu9vp9mOdh5DjY\n3    6pWpb4IdPu9vp9mOdh5DjY\n4    5DMvSCwRqfNVlMB5LjHOwG\nName: album.id, dtype: object\n</code></pre>\n<p>pandas also allows us to use dot notation (i.e. <code>dataframe.column_name</code>) to grab a column as a Series, but only if our column name doesn't include a period already. Since <code>json_normalize()</code> uses a period as a separator by default, this ruins that method. Never fear though – overriding this behavior is as simple as overriding the default argument in the function call:</p><pre><code class=\"language-python\">tracks_df = json_normalize(tracks_response['tracks'],sep=&quot;_&quot;)\ntracks_df\n</code></pre>\n<h3 id=\"output--7\">Output:</h3><div class=\"tableshadow tableContainer\" data-simplebar=\"\">\n<table class=\"responsive-table\">\n<thead><tr class=\"tableizer-firstrow\"><th></th><th>album_album_type</th><th>album_artists</th><th>album_available_markets</th><th>album_external_urls_spotify</th><th>album_href</th><th>album_id</th><th>album_images</th><th>album_name</th><th>album_release_date</th><th>album_release_date_precision</th><th>...</th><th>external_urls_spotify</th><th>href</th><th>id</th><th>is_local</th><th>name</th><th>popularity</th><th>preview_url</th><th>track_number</th><th>type</th><th>uri</th></tr></thead><tbody>\n <tr><td>0</td><td>album</td><td>[{'external_urls': {'spotify': 'https://open.s...</td><td>[AR, BO, BR, CA, CL, CO, CR, EC, GT, HK, HN, I...</td><td>https://open.spotify.com/album/6pWpb4IdPu9vp9m...</td><td>https://api.spotify.com/v1/albums/6pWpb4IdPu9v...</td><td>6pWpb4IdPu9vp9mOdh5DjY</td><td>[{'height': 640, 'url': 'https://i.scdn.co/ima...</td><td>Real Emotional Trash</td><td>3/4/2008</td><td>day</td><td>...</td><td>https://open.spotify.com/track/0BDYBajZydY54OT...</td><td>https://api.spotify.com/v1/tracks/0BDYBajZydY5...</td><td>0BDYBajZydY54OTgQsH940</td><td>FALSE</td><td>Real Emotional Trash</td><td>21</td><td>https://p.scdn.co/mp3-preview/4fcbcd5a99fc7590...</td><td>4</td><td>track</td><td>spotify:track:0BDYBajZydY54OTgQsH940</td></tr>\n <tr><td>1</td><td>album</td><td>[{'external_urls': {'spotify': 'https://open.s...</td><td>[AR, BO, BR, CA, CL, CO, CR, EC, GT, HK, HN, I...</td><td>https://open.spotify.com/album/6pWpb4IdPu9vp9m...</td><td>https://api.spotify.com/v1/albums/6pWpb4IdPu9v...</td><td>6pWpb4IdPu9vp9mOdh5DjY</td><td>[{'height': 640, 'url': 'https://i.scdn.co/ima...</td><td>Real Emotional Trash</td><td>3/4/2008</td><td>day</td><td>...</td><td>https://open.spotify.com/track/7fdUqrzb8oCcIoK...</td><td>https://api.spotify.com/v1/tracks/7fdUqrzb8oCc...</td><td>7fdUqrzb8oCcIoKvFuzMrs</td><td>FALSE</td><td>Cold Son</td><td>25</td><td>https://p.scdn.co/mp3-preview/4cf4e21727def470...</td><td>3</td><td>track</td><td>spotify:track:7fdUqrzb8oCcIoKvFuzMrs</td></tr>\n <tr><td>2</td><td>album</td><td>[{'external_urls': {'spotify': 'https://open.s...</td><td>[AR, BO, BR, CA, CL, CO, CR, EC, GT, HK, HN, I...</td><td>https://open.spotify.com/album/6pWpb4IdPu9vp9m...</td><td>https://api.spotify.com/v1/albums/6pWpb4IdPu9v...</td><td>6pWpb4IdPu9vp9mOdh5DjY</td><td>[{'height': 640, 'url': 'https://i.scdn.co/ima...</td><td>Real Emotional Trash</td><td>3/4/2008</td><td>day</td><td>...</td><td>https://open.spotify.com/track/0islTY4Fw6lhYbf...</td><td>https://api.spotify.com/v1/tracks/0islTY4Fw6lh...</td><td>0islTY4Fw6lhYbfqi8Qtdj</td><td>FALSE</td><td>Hopscotch Willie</td><td>24</td><td>https://p.scdn.co/mp3-preview/c7782dc6d7c0bb12...</td><td>2</td><td>track</td><td>spotify:track:0islTY4Fw6lhYbfqi8Qtdj</td></tr>\n <tr><td>3</td><td>album</td><td>[{'external_urls': {'spotify': 'https://open.s...</td><td>[AR, BO, BR, CA, CL, CO, CR, EC, GT, HK, HN, I...</td><td>https://open.spotify.com/album/6pWpb4IdPu9vp9m...</td><td>https://api.spotify.com/v1/albums/6pWpb4IdPu9v...</td><td>6pWpb4IdPu9vp9mOdh5DjY</td><td>[{'height': 640, 'url': 'https://i.scdn.co/ima...</td><td>Real Emotional Trash</td><td>3/4/2008</td><td>day</td><td>...</td><td>https://open.spotify.com/track/3jyFLbljUTKjE13...</td><td>https://api.spotify.com/v1/tracks/3jyFLbljUTKj...</td><td>3jyFLbljUTKjE13nIWXchH</td><td>FALSE</td><td>Dragonfly Pie</td><td>26</td><td>https://p.scdn.co/mp3-preview/50f419e7d3e8a6a7...</td><td>1</td><td>track</td><td>spotify:track:3jyFLbljUTKjE13nIWXchH</td></tr>\n <tr><td>4</td><td>album</td><td>[{'external_urls': {'spotify': 'https://open.s...</td><td>[AR, AU, BO, BR, CA, CL, CO, CR, DO, EC, GT, H...</td><td>https://open.spotify.com/album/5DMvSCwRqfNVlMB...</td><td>https://api.spotify.com/v1/albums/5DMvSCwRqfNV...</td><td>5DMvSCwRqfNVlMB5LjHOwG</td><td>[{'height': 640, 'url': 'https://i.scdn.co/ima...</td><td>Sparkle Hard</td><td>5/18/2018</td><td>day</td><td>...</td><td>https://open.spotify.com/track/6dNmC2YWtWbVOFO...</td><td>https://api.spotify.com/v1/tracks/6dNmC2YWtWbV...</td><td>6dNmC2YWtWbVOFOdTuRDQs</td><td>FALSE</td><td>Difficulties - Let Them Eat Vowels</td><td>35</td><td>https://p.scdn.co/mp3-preview/787be9d1bbebcd84...</td><td>11</td><td>track</td><td>spotify:track:6dNmC2YWtWbVOFOdTuRDQs</td></tr>\n</tbody></table>\n</div><p>Now we can go back to using dot notation to access a column as a Series. This saves us some typing every time we want to grab a column, and it looks a bit nicer (to me, at least). I say worth it.</p><pre><code class=\"language-python\">tracks_df.album_id\n</code></pre>\n<h3 id=\"output--8\">Output:</h3><pre><code class=\"language-shell\">0    6pWpb4IdPu9vp9mOdh5DjY\n1    6pWpb4IdPu9vp9mOdh5DjY\n2    6pWpb4IdPu9vp9mOdh5DjY\n3    6pWpb4IdPu9vp9mOdh5DjY\n4    5DMvSCwRqfNVlMB5LjHOwG\nName: album_id, dtype: object\n</code></pre>\n<h2 id=\"i-need-that-record\">I Need That Record</h2><p>By including more parameters when we use <code>json_normlize()</code>, we can really extract just the data that we want from our API response.</p><p>From our responses above, we can see that the <code>artist</code> property contains a list of artists that are associated with a track:</p><pre><code class=\"language-python\">tracks_response['tracks'][0]['artists']\n</code></pre>\n<h3 id=\"output--9\">Output:</h3><pre><code class=\"language-json\">[{\n    &quot;external_urls&quot;: {\n      &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe&quot;\n    },\n    &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe&quot;,\n    &quot;id&quot;: &quot;7wyRA7deGRxozTyBc6QXPe&quot;,\n    &quot;name&quot;: &quot;Stephen Malkmus &amp; The Jicks&quot;,\n    &quot;type&quot;: &quot;artist&quot;,\n    &quot;uri&quot;: &quot;spotify:artist:7wyRA7deGRxozTyBc6QXPe&quot;\n  },\n  {\n    &quot;external_urls&quot;: {\n      &quot;spotify&quot;: &quot;https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8&quot;\n    },\n    &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8&quot;,\n    &quot;id&quot;: &quot;0WISkx0PwT6lYWdPqKUJY8&quot;,\n    &quot;name&quot;: &quot;Stephen Malkmus&quot;,\n    &quot;type&quot;: &quot;artist&quot;,\n    &quot;uri&quot;: &quot;spotify:artist:0WISkx0PwT6lYWdPqKUJY8&quot;\n  },\n  {\n    &quot;external_urls&quot;: {\n      &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7&quot;\n    },\n    &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7&quot;,\n    &quot;id&quot;: &quot;7uStwCeP54Za8gXUFCf5L7&quot;,\n    &quot;name&quot;: &quot;The Jicks&quot;,\n    &quot;type&quot;: &quot;artist&quot;,\n    &quot;uri&quot;: &quot;spotify:artist:7uStwCeP54Za8gXUFCf5L7&quot;\n  }\n]\n</code></pre>\n<p>Let's say I want to load this data into a database later. It would be nice to have a join table that maps each of the artists that are associated with each track. Luckily, this is possible with <code>json_normalize()</code>'s <code>record_path</code> and <code>meta</code> parameters.</p><p><code>record_path</code> tells <code>json_normalize()</code> what path of keys leads to each individual record in the JSON object. In our case, we want to grab every artist id, so our function call will look like:</p><pre><code class=\"language-python\">json_normalize(tracks_response['tracks'],record_path=['artists'],sep=&quot;_&quot;)\n</code></pre>\n<h3></h3><div class=\"tableshadow tableContainer\" data-simplebar=\"\">\n<table class=\"responsive-table\">\n<thead><tr class=\"tableizer-firstrow\"><th> </th><th>external_urls </th><th>href </th><th>id </th><th>name </th><th>type </th><th>uri</th></tr></thead><tbody>\n <tr><td>1 </td><td>{'spotify': 'https://open.spotify.com/artist/7... </td><td>https://api.spotify.com/v1/artists/7wyRA7deGRx... </td><td>7wyRA7deGRxozTyBc6QXPe </td><td>Stephen Malkmus & The Jicks </td><td>artist </td><td>spotify:artist:7wyRA7deGRxozTyBc6QXPe</td></tr>\n <tr><td>1 </td><td>{'spotify': 'https://open.spotify.com/artist/0... </td><td>https://api.spotify.com/v1/artists/0WISkx0PwT6... </td><td>0WISkx0PwT6lYWdPqKUJY8 </td><td>Stephen Malkmus </td><td>artist </td><td>spotify:artist:0WISkx0PwT6lYWdPqKUJY8</td></tr>\n <tr><td>2 </td><td>{'spotify': 'https://open.spotify.com/artist/7... </td><td>https://api.spotify.com/v1/artists/7uStwCeP54Z... </td><td>7uStwCeP54Za8gXUFCf5L7 </td><td>The Jicks </td><td>artist </td><td>spotify:artist:7uStwCeP54Za8gXUFCf5L7</td></tr>\n <tr><td>3 </td><td>{'spotify': 'https://open.spotify.com/artist/7... </td><td>https://api.spotify.com/v1/artists/7wyRA7deGRx... </td><td>7wyRA7deGRxozTyBc6QXPe </td><td>Stephen Malkmus & The Jicks </td><td>artist </td><td>spotify:artist:7wyRA7deGRxozTyBc6QXPe</td></tr>\n <tr><td>4 </td><td>{'spotify': 'https://open.spotify.com/artist/0... </td><td>https://api.spotify.com/v1/artists/0WISkx0PwT6... </td><td>0WISkx0PwT6lYWdPqKUJY8 </td><td>Stephen Malkmus </td><td>artist </td><td>spotify:artist:0WISkx0PwT6lYWdPqKUJY8</td></tr>\n <tr><td>5 </td><td>{'spotify': 'https://open.spotify.com/artist/7... </td><td>https://api.spotify.com/v1/artists/7uStwCeP54Z... </td><td>7uStwCeP54Za8gXUFCf5L7 </td><td>The Jicks </td><td>artist </td><td>spotify:artist:7uStwCeP54Za8gXUFCf5L7</td></tr>\n <tr><td>6 </td><td>{'spotify': 'https://open.spotify.com/artist/7... </td><td>https://api.spotify.com/v1/artists/7wyRA7deGRx... </td><td>7wyRA7deGRxozTyBc6QXPe </td><td>Stephen Malkmus & The Jicks </td><td>artist </td><td>spotify:artist:7wyRA7deGRxozTyBc6QXPe</td></tr>\n <tr><td>7 </td><td>{'spotify': 'https://open.spotify.com/artist/0... </td><td>https://api.spotify.com/v1/artists/0WISkx0PwT6... </td><td>0WISkx0PwT6lYWdPqKUJY8 </td><td>Stephen Malkmus </td><td>artist </td><td>spotify:artist:0WISkx0PwT6lYWdPqKUJY8</td></tr>\n <tr><td>8 </td><td>{'spotify': 'https://open.spotify.com/artist/7... </td><td>https://api.spotify.com/v1/artists/7uStwCeP54Z... </td><td>7uStwCeP54Za8gXUFCf5L7 </td><td>The Jicks </td><td>artist </td><td>spotify:artist:7uStwCeP54Za8gXUFCf5L7</td></tr>\n <tr><td>9 </td><td>{'spotify': 'https://open.spotify.com/artist/7... </td><td>https://api.spotify.com/v1/artists/7wyRA7deGRx... </td><td>7wyRA7deGRxozTyBc6QXPe </td><td>Stephen Malkmus & The Jicks </td><td>artist </td><td>spotify:artist:7wyRA7deGRxozTyBc6QXPe</td></tr>\n <tr><td>10 </td><td>{'spotify': 'https://open.spotify.com/artist/0... </td><td>https://api.spotify.com/v1/artists/0WISkx0PwT6... </td><td>0WISkx0PwT6lYWdPqKUJY8 </td><td>Stephen Malkmus </td><td>artist </td><td>spotify:artist:0WISkx0PwT6lYWdPqKUJY8</td></tr>\n <tr><td>11 </td><td>{'spotify': 'https://open.spotify.com/artist/7... </td><td>https://api.spotify.com/v1/artists/7uStwCeP54Z... </td><td>7uStwCeP54Za8gXUFCf5L7 </td><td>The Jicks </td><td>artist </td><td>spotify:artist:7uStwCeP54Za8gXUFCf5L7</td></tr>\n <tr><td>12 </td><td>{'spotify': 'https://open.spotify.com/artist/7... </td><td>https://api.spotify.com/v1/artists/7wyRA7deGRx... </td><td>7wyRA7deGRxozTyBc6QXPe </td><td>Stephen Malkmus & The Jicks </td><td>artist </td><td>spotify:artist:7wyRA7deGRxozTyBc6QXPe</td></tr>\n</tbody></table>\n</div><p>Cool – we're almost there. Now we want to use the <code>meta</code> parameter to specify what data we want to include from the rest of the JSON object. In our case, we want to keep the track id and map it to the artist id. If we look back at our API response, the name of the column that included the track is is called, appropriately, <code>id</code>, so our full function call should look like this:</p><pre><code class=\"language-python\">json_normalize(tracks_response['tracks'],record_path=['artists'],meta=['id'],sep=&quot;_&quot;)\n</code></pre>\n<h3 id=\"output--10\">Output:</h3><pre><code class=\"language-python\">-----------------------------------------\nValueError                             Traceback (most recent call last)\n\n    &lt;ipython-input-14-77e00a98c3c0&gt; in &lt;module&gt;()\n    ----&gt; 1 json_normalize(tracks_response['tracks'],record_path=['artists'],meta=['id'],sep=&quot;_&quot;)\n\n    ~/anaconda3/envs/music_data/lib/python3.6/site-packages/pandas/io/json/normalize.py in json_normalize(data, record_path, meta, meta_prefix, record_prefix, errors, sep)\n        268         if k in result:\n        269             raise ValueError('Conflicting metadata name {name}, '\n    --&gt; 270                              'need distinguishing prefix '.format(name=k))\n        271 \n        272         result[k] = np.array(v).repeat(lengths)\n    \nValueError: Conflicting metadata name id, need distinguishing prefix \n</code></pre>\n<p>Uh oh – an error! What's going on? Well, it turns out that both the album id and track id were given the key <code>id</code>. pandas doesn't like that, and it gives us a helpful error to tell us so: <code>ValueError: Conflicting metadata name id, need distinguishing prefix</code>.</p><p>There are two more parameters we can use to overcome this error: <code>record_prefix</code> and <code>meta_prefix</code>. These are strings we'll add to the beginning of our records and metadata to prevent these naming conflicts. Since we're dealing with Spotify artist ids for our records and Spotify track ids as the metadata, I'll use <code>sp_artist_</code> and <code>sp_track_</code> respectively. When that's done, I'll select only the columns that we're interested in.</p><pre><code class=\"language-python\">artist_and_track = json_normalize(\n    data=tracks_response['tracks'],\n    record_path='artists',\n    meta=['id'],\n    record_prefix='sp_artist_',\n    meta_prefix='sp_track_',\n    sep=&quot;_&quot;\n)\nartist_and_track = artist_and_track[['sp_track_id','sp_artist_id']]\nartist_and_track\n</code></pre>\n<h3 id=\"output--11\">Output:</h3><div class=\"tableshadow tableContainer\">\n<table>\n<thead><tr class=\"tableizer-firstrow\"><th></th><th>sp_track_id </th><th>sp_artist_id</th></tr></thead><tbody>\n <tr><td>0</td><td>0BDYBajZydY54OTgQsH940 </td><td>7wyRA7deGRxozTyBc6QXPe</td></tr>\n <tr><td>1</td><td>0BDYBajZydY54OTgQsH940 </td><td>0WISkx0PwT6lYWdPqKUJY8</td></tr>\n <tr><td>2</td><td>0BDYBajZydY54OTgQsH940 </td><td>7uStwCeP54Za8gXUFCf5L7</td></tr>\n <tr><td>3</td><td>7fdUqrzb8oCcIoKvFuzMrs </td><td>7wyRA7deGRxozTyBc6QXPe</td></tr>\n <tr><td>4</td><td>7fdUqrzb8oCcIoKvFuzMrs </td><td>0WISkx0PwT6lYWdPqKUJY8</td></tr>\n <tr><td>5</td><td>7fdUqrzb8oCcIoKvFuzMrs </td><td>7uStwCeP54Za8gXUFCf5L7</td></tr>\n <tr><td>6</td><td>0islTY4Fw6lhYbfqi8Qtdj </td><td>7wyRA7deGRxozTyBc6QXPe</td></tr>\n <tr><td>7</td><td>0islTY4Fw6lhYbfqi8Qtdj </td><td>0WISkx0PwT6lYWdPqKUJY8</td></tr>\n <tr><td>8</td><td>0islTY4Fw6lhYbfqi8Qtdj </td><td>7uStwCeP54Za8gXUFCf5L7</td></tr>\n <tr><td>9</td><td>3jyFLbljUTKjE13nIWXchH </td><td>7wyRA7deGRxozTyBc6QXPe</td></tr>\n <tr><td>10</td><td>3jyFLbljUTKjE13nIWXchH </td><td>0WISkx0PwT6lYWdPqKUJY8</td></tr>\n <tr><td>11</td><td>3jyFLbljUTKjE13nIWXchH </td><td>7uStwCeP54Za8gXUFCf5L7</td></tr>\n <tr><td>12</td><td>6dNmC2YWtWbVOFOdTuRDQs </td><td>7wyRA7deGRxozTyBc6QXPe</td></tr>\n</tbody></table>\n</div><h2 id=\"tl-dr\">TL;DR</h2><ul><li>Use <code>pd.io.json.json_normalize()</code> to automagically flatten a nested JSON object into a DataFrame</li><li>Make your life slightly easier when it comes to selecting columns by overriding the default <code>sep</code> parameter</li><li>Specify what data constitutes a record with the <code>record_path</code> parameter</li><li>Include data from outside of the record path with the <code>meta</code> parameter</li><li>Fix naming conflicts if they arise with the <code>record_prefix</code> and <code>meta_prefix</code> parameters</li></ul>","url":"https://hackersandslackers.com/json-into-pandas-dataframes/","uuid":"172cef40-4545-4c14-8488-a86a891ef47d","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b588eb363c4cc21a000cf51"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736b4","title":"Lynx Roundup, July 28th","slug":"lynx-roundup-july-28th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx21@2x.jpg","excerpt":"Accessing paywalled research!  Linting code in Jupyter!  Properties of numbers!","custom_excerpt":"Accessing paywalled research!  Linting code in Jupyter!  Properties of numbers!","created_at_pretty":"21 July, 2018","published_at_pretty":"28 July, 2018","updated_at_pretty":"28 July, 2018","created_at":"2018-07-20T22:16:38.000-04:00","published_at":"2018-07-28T07:00:00.000-04:00","updated_at":"2018-07-28T07:00:00.000-04:00","meta_title":"Accessing paywalled research!  Linting code in Jupyter!  Properties of numbers! | Hackers And Slackers","meta_description":"Accessing paywalled research!  Linting code in Jupyter!  Properties of numbers!","og_description":"Accessing paywalled research!  Linting code in Jupyter!  Properties of numbers!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx21@2x.jpg","og_title":"Lynx Roundup, July 28th","twitter_description":"Accessing paywalled research!  Linting code in Jupyter!  Properties of numbers!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx21@2x.jpg","twitter_title":"Lynx Roundup, July 28th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"http://www.numbergossip.com/list\n[http://www.numbergossip.com/list?utm_medium=email&utm_source=topic+optin&utm_campaign=awareness&utm_content=20180711+data+nl&mkt_tok=eyJpIjoiWldRMU5qRmhOamxtTlRnNCIsInQiOiJlbitsTWxrU1dsWGsxQ1FXenBacW8rM01qdnJybkZrUEZSZ2ZqSkF3dGZIdkN2NUxGM0lrdlF5ZGdCUHBad0xxK1lwTVdnUXd0bDg0WGl5bjQzOGFIaDllN21iN3hvRHE2OGdGZytEaXQzV0F0K1cyZVFTS2t3TzZnNnBxd1V6NiJ9]\n\n\n\nhttps://vitals.lifehacker.com/how-to-access-paywalled-scientific-journal-articles-1827516361\n\n\n\nhttps://neurosciencenews.com/computer-human-brain-9555/\n\n\n\nhttps://github.com/mlshapiro/jupyterlab-flake8\n\n\n\nhttps://www.dataiq.co.uk/article/how-ai-will-help-save-100000-lives\n[https://www.dataiq.co.uk/article/how-ai-will-help-save-100000-lives?utm_source=Master+List&utm_campaign=b3f590f6d3-JulyNewsletter_Master&utm_medium=email&utm_term=0_44fcdef9e7-b3f590f6d3-463706345&mc_cid=b3f590f6d3&mc_eid=9090defae1]","html":"<p></p><p><a href=\"http://www.numbergossip.com/list?utm_medium=email&amp;utm_source=topic+optin&amp;utm_campaign=awareness&amp;utm_content=20180711+data+nl&amp;mkt_tok=eyJpIjoiWldRMU5qRmhOamxtTlRnNCIsInQiOiJlbitsTWxrU1dsWGsxQ1FXenBacW8rM01qdnJybkZrUEZSZ2ZqSkF3dGZIdkN2NUxGM0lrdlF5ZGdCUHBad0xxK1lwTVdnUXd0bDg0WGl5bjQzOGFIaDllN21iN3hvRHE2OGdGZytEaXQzV0F0K1cyZVFTS2t3TzZnNnBxd1V6NiJ9\">http://www.numbergossip.com/list</a></p><p></p><p><a href=\"https://vitals.lifehacker.com/how-to-access-paywalled-scientific-journal-articles-1827516361\">https://vitals.lifehacker.com/how-to-access-paywalled-scientific-journal-articles-1827516361</a></p><p></p><p><a href=\"https://neurosciencenews.com/computer-human-brain-9555/\">https://neurosciencenews.com/computer-human-brain-9555/</a></p><p></p><p><a href=\"https://github.com/mlshapiro/jupyterlab-flake8\">https://github.com/mlshapiro/jupyterlab-flake8</a></p><p></p><p><a href=\"https://www.dataiq.co.uk/article/how-ai-will-help-save-100000-lives?utm_source=Master+List&amp;utm_campaign=b3f590f6d3-JulyNewsletter_Master&amp;utm_medium=email&amp;utm_term=0_44fcdef9e7-b3f590f6d3-463706345&amp;mc_cid=b3f590f6d3&amp;mc_eid=9090defae1\">https://www.dataiq.co.uk/article/how-ai-will-help-save-100000-lives</a></p>","url":"https://hackersandslackers.com/lynx-roundup-july-28th/","uuid":"6bf5a449-3983-4f11-a84e-0a79b4c8f5c9","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b529786529141018f9dacff"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736b3","title":"Lynx Roundup, July 27th","slug":"lynx-roundup-july-27th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx49@2x.jpg","excerpt":"Hidden Python features!  Visual system!  REST vs GraphQL!","custom_excerpt":"Hidden Python features!  Visual system!  REST vs GraphQL!","created_at_pretty":"21 July, 2018","published_at_pretty":"27 July, 2018","updated_at_pretty":"28 July, 2018","created_at":"2018-07-20T22:14:02.000-04:00","published_at":"2018-07-27T07:00:00.000-04:00","updated_at":"2018-07-28T17:49:43.000-04:00","meta_title":"Hidden Python features!  Visual system!  REST vs GraphQL! | Hackers And Slackers","meta_description":"Hidden Python features!  Visual system!  REST vs GraphQL!","og_description":"Hidden Python features!  Visual system!  REST vs GraphQL!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx49@2x.jpg","og_title":"Lynx Roundup, July 27th","twitter_description":"Hidden Python features!  Visual system!  REST vs GraphQL!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx49@2x.jpg","twitter_title":"Lynx Roundup, July 27th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://stackoverflow.com/questions/101268/hidden-features-of-python\n\n\n\nhttps://www.quora.com/Which-fields-of-advanced-mathematics-and-statistics-are-finding-their-way-into-data-science-or-will-find-their-way-into-data-science-in-the-next-few-decades\n\n\n\nhttps://medicalxpress.com/news/2018-07-brain-vision-tracks.html\n\n\n\nhttps://www.moesif.com/blog/technical/graphql/REST-vs-GraphQL-APIs-the-good-the-bad-the-ugly/\n[https://www.moesif.com/blog/technical/graphql/REST-vs-GraphQL-APIs-the-good-the-bad-the-ugly/?utm_medium=email&utm_source=topic+optin&utm_campaign=awareness&utm_content=20180711+data+nl&mkt_tok=eyJpIjoiWldRMU5qRmhOamxtTlRnNCIsInQiOiJlbitsTWxrU1dsWGsxQ1FXenBacW8rM01qdnJybkZrUEZSZ2ZqSkF3dGZIdkN2NUxGM0lrdlF5ZGdCUHBad0xxK1lwTVdnUXd0bDg0WGl5bjQzOGFIaDllN21iN3hvRHE2OGdGZytEaXQzV0F0K1cyZVFTS2t3TzZnNnBxd1V6NiJ9]\n\n\n\nhttps://medium.com/@rchang/a-beginners-guide-to-data-engineering-the-series-finale-2cc92ff14b0\n[https://medium.com/@rchang/a-beginners-guide-to-data-engineering-the-series-finale-2cc92ff14b0?mkt_tok=eyJpIjoiWldRMU5qRmhOamxtTlRnNCIsInQiOiJlbitsTWxrU1dsWGsxQ1FXenBacW8rM01qdnJybkZrUEZSZ2ZqSkF3dGZIdkN2NUxGM0lrdlF5ZGdCUHBad0xxK1lwTVdnUXd0bDg0WGl5bjQzOGFIaDllN21iN3hvRHE2OGdGZytEaXQzV0F0K1cyZVFTS2t3TzZnNnBxd1V6NiJ9]","html":"<p></p><p><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python\">https://stackoverflow.com/questions/101268/hidden-features-of-python</a></p><p></p><p><a href=\"https://www.quora.com/Which-fields-of-advanced-mathematics-and-statistics-are-finding-their-way-into-data-science-or-will-find-their-way-into-data-science-in-the-next-few-decades\">https://www.quora.com/Which-fields-of-advanced-mathematics-and-statistics-are-finding-their-way-into-data-science-or-will-find-their-way-into-data-science-in-the-next-few-decades</a></p><p></p><p><a href=\"https://medicalxpress.com/news/2018-07-brain-vision-tracks.html\">https://medicalxpress.com/news/2018-07-brain-vision-tracks.html</a></p><p></p><p><a href=\"https://www.moesif.com/blog/technical/graphql/REST-vs-GraphQL-APIs-the-good-the-bad-the-ugly/?utm_medium=email&amp;utm_source=topic+optin&amp;utm_campaign=awareness&amp;utm_content=20180711+data+nl&amp;mkt_tok=eyJpIjoiWldRMU5qRmhOamxtTlRnNCIsInQiOiJlbitsTWxrU1dsWGsxQ1FXenBacW8rM01qdnJybkZrUEZSZ2ZqSkF3dGZIdkN2NUxGM0lrdlF5ZGdCUHBad0xxK1lwTVdnUXd0bDg0WGl5bjQzOGFIaDllN21iN3hvRHE2OGdGZytEaXQzV0F0K1cyZVFTS2t3TzZnNnBxd1V6NiJ9\">https://www.moesif.com/blog/technical/graphql/REST-vs-GraphQL-APIs-the-good-the-bad-the-ugly/</a></p><p></p><p><a href=\"https://medium.com/@rchang/a-beginners-guide-to-data-engineering-the-series-finale-2cc92ff14b0?mkt_tok=eyJpIjoiWldRMU5qRmhOamxtTlRnNCIsInQiOiJlbitsTWxrU1dsWGsxQ1FXenBacW8rM01qdnJybkZrUEZSZ2ZqSkF3dGZIdkN2NUxGM0lrdlF5ZGdCUHBad0xxK1lwTVdnUXd0bDg0WGl5bjQzOGFIaDllN21iN3hvRHE2OGdGZytEaXQzV0F0K1cyZVFTS2t3TzZnNnBxd1V6NiJ9\">https://medium.com/@rchang/a-beginners-guide-to-data-engineering-the-series-finale-2cc92ff14b0</a></p>","url":"https://hackersandslackers.com/lynx-roundup-july-27th/","uuid":"acc15502-eda0-413b-9c8e-72e6809d2a43","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b5296ea529141018f9dacfc"}}]}},"pageContext":{"pageNumber":21,"humanPageNumber":22,"skip":252,"limit":12,"numberOfPages":33,"previousPagePath":"/page/21","nextPagePath":"/page/23"}}