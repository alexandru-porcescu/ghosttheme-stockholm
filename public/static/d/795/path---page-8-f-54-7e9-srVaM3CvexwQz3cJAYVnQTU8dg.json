{"data":{"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5c36e27e797a4f6f1db68dec","title":"Lynx Roundup, January 22nd","slug":"lynx-roundup-january-22nd","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/139@2x.jpg","excerpt":"New SciPy!  Python's Abstract Syntax Trees!  Regex Automata!","custom_excerpt":"New SciPy!  Python's Abstract Syntax Trees!  Regex Automata!","created_at_pretty":"10 January, 2019","published_at_pretty":"22 January, 2019","updated_at_pretty":"22 January, 2019","created_at":"2019-01-10T01:13:18.000-05:00","published_at":"2019-01-22T07:00:00.000-05:00","updated_at":"2019-01-22T07:00:00.000-05:00","meta_title":"Lynx Roundup, January 22nd | Hackers and Slackers","meta_description":"New SciPy!  Python's Abstract Syntax Trees!  Regex Automata!","og_description":"New SciPy!  Python's Abstract Syntax Trees!  Regex Automata!","og_image":"https://hackersandslackers.com/content/images/lynx/139@2x.jpg","og_title":"Lynx Roundup, January 22nd","twitter_description":"New SciPy!  Python's Abstract Syntax Trees!  Regex Automata!","twitter_image":"https://hackersandslackers.com/content/images/lynx/139@2x.jpg","twitter_title":"Lynx Roundup, January 22nd","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://perspectives.mvdirona.com/2018/11/aws-inferentia-machine-learning-processor/\n\nhttps://github.com/scipy/scipy/releases/tag/v1.2.0\n\nhttps://www.santafe.edu/news-center/news/complexity-commons-scientists-recast-social-dilemmas\n\nhttps://openreview.net/forum\n\nhttps://github.com/BurntSushi/regex-automata\n\nhttps://github.com/tensorflow/privacy\n\nhttps://www.mattlayman.com/blog/2018/decipher-python-ast/","html":"<p></p><p><a href=\"https://perspectives.mvdirona.com/2018/11/aws-inferentia-machine-learning-processor/\">https://perspectives.mvdirona.com/2018/11/aws-inferentia-machine-learning-processor/</a></p><p><a href=\"https://github.com/scipy/scipy/releases/tag/v1.2.0\">https://github.com/scipy/scipy/releases/tag/v1.2.0</a></p><p><a href=\"https://www.santafe.edu/news-center/news/complexity-commons-scientists-recast-social-dilemmas\">https://www.santafe.edu/news-center/news/complexity-commons-scientists-recast-social-dilemmas</a></p><p><a href=\"https://openreview.net/forum\">https://openreview.net/forum</a></p><p><a href=\"https://github.com/BurntSushi/regex-automata\">https://github.com/BurntSushi/regex-automata</a></p><p><a href=\"https://github.com/tensorflow/privacy\">https://github.com/tensorflow/privacy</a></p><p><a href=\"https://www.mattlayman.com/blog/2018/decipher-python-ast/\">https://www.mattlayman.com/blog/2018/decipher-python-ast/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-january-22nd/","uuid":"371faa1a-cfbd-4a22-85c1-d64cabc97224","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5c36e27e797a4f6f1db68dec"}},{"node":{"id":"Ghost__Post__5c36e1eb797a4f6f1db68de7","title":"Lynx Roundup, January 21st","slug":"lynx-roundup-january-21st","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/85@2x.jpg","excerpt":"Tensorflow and music!  Turing formula simulates the growth of shark skin!  Fruit flies teach AI about smell!","custom_excerpt":"Tensorflow and music!  Turing formula simulates the growth of shark skin!  Fruit flies teach AI about smell!","created_at_pretty":"10 January, 2019","published_at_pretty":"21 January, 2019","updated_at_pretty":"21 January, 2019","created_at":"2019-01-10T01:10:51.000-05:00","published_at":"2019-01-21T07:00:00.000-05:00","updated_at":"2019-01-21T07:00:00.000-05:00","meta_title":"Lynx Roundup, January 21st | Hackers and Slackers","meta_description":"Tensorflow and music!  Turing formula simulates the growth of shark skin!  Fruit flies teach AI about smell!","og_description":"Tensorflow and music!  Turing formula simulates the growth of shark skin!  Fruit flies teach AI about smell!","og_image":"https://hackersandslackers.com/content/images/lynx/85@2x.jpg","og_title":"Lynx Roundup, January 21st","twitter_description":"Tensorflow and music!  Turing formula simulates the growth of shark skin!  Fruit flies teach AI about smell!","twitter_image":"https://hackersandslackers.com/content/images/lynx/85@2x.jpg","twitter_title":"Lynx Roundup, January 21st","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.cnn.com/2018/12/17/us/mit-nanosize-technology-trnd/index.html\n\nhttps://magenta.tensorflow.org/music-transformer\n\nhttps://www.codementor.io/guidotournois/4-strategies-to-deal-with-large-datasets-using-pandas-qdw3an95k\n\nhttps://mathsection.com/how-google-maps-calculates-the-shortest-route/\n\nhttps://motherboard.vice.com/en_us/article/zmd9a5/tim-cook-to-investors-people-bought-fewer-new-iphones-because-they-repaired-their-old-ones\n\nhttps://www.quantamagazine.org/ancient-turing-pattern-builds-feathers-hair-and-now-shark-skin-20190102/\n\nhttps://www.salk.edu/news-release/to-detect-new-odors-fruit-fly-brains-improve-on-a-well-known-computer-algorithm/","html":"<p></p><p><a href=\"https://www.cnn.com/2018/12/17/us/mit-nanosize-technology-trnd/index.html\">https://www.cnn.com/2018/12/17/us/mit-nanosize-technology-trnd/index.html</a></p><p><a href=\"https://magenta.tensorflow.org/music-transformer\">https://magenta.tensorflow.org/music-transformer</a></p><p><a href=\"https://www.codementor.io/guidotournois/4-strategies-to-deal-with-large-datasets-using-pandas-qdw3an95k\">https://www.codementor.io/guidotournois/4-strategies-to-deal-with-large-datasets-using-pandas-qdw3an95k</a></p><p><a href=\"https://mathsection.com/how-google-maps-calculates-the-shortest-route/\">https://mathsection.com/how-google-maps-calculates-the-shortest-route/</a></p><p><a href=\"https://motherboard.vice.com/en_us/article/zmd9a5/tim-cook-to-investors-people-bought-fewer-new-iphones-because-they-repaired-their-old-ones\">https://motherboard.vice.com/en_us/article/zmd9a5/tim-cook-to-investors-people-bought-fewer-new-iphones-because-they-repaired-their-old-ones</a></p><p><a href=\"https://www.quantamagazine.org/ancient-turing-pattern-builds-feathers-hair-and-now-shark-skin-20190102/\">https://www.quantamagazine.org/ancient-turing-pattern-builds-feathers-hair-and-now-shark-skin-20190102/</a></p><p><a href=\"https://www.salk.edu/news-release/to-detect-new-odors-fruit-fly-brains-improve-on-a-well-known-computer-algorithm/\">https://www.salk.edu/news-release/to-detect-new-odors-fruit-fly-brains-improve-on-a-well-known-computer-algorithm/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-january-21st/","uuid":"3745c97a-0ab9-47b0-b4b7-d319d4595c19","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5c36e1eb797a4f6f1db68de7"}},{"node":{"id":"Ghost__Post__5c36e198797a4f6f1db68de2","title":"Lynx Roundup, January 20th","slug":"lynx-roundup-january-20th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/93-1@2x.jpg","excerpt":"2018 in AI!  AI learning Sumerian!  Averaging ensembles of Deep Learning models!","custom_excerpt":"2018 in AI!  AI learning Sumerian!  Averaging ensembles of Deep Learning models!","created_at_pretty":"10 January, 2019","published_at_pretty":"20 January, 2019","updated_at_pretty":"20 January, 2019","created_at":"2019-01-10T01:09:28.000-05:00","published_at":"2019-01-20T07:00:00.000-05:00","updated_at":"2019-01-20T07:00:00.000-05:00","meta_title":"Lynx Roundup, January 20th | Hackers and Slackers","meta_description":"2018 in AI!  AI learning Sumerian!  Averaging ensembles of Deep Learning models!","og_description":"2018 in AI!  AI learning Sumerian!  Averaging ensembles of Deep Learning models!","og_image":"https://hackersandslackers.com/content/images/lynx/93-1@2x.jpg","og_title":"Lynx Roundup, January 20th","twitter_description":"2018 in AI!  AI learning Sumerian!  Averaging ensembles of Deep Learning models!","twitter_image":"https://hackersandslackers.com/content/images/lynx/93-1@2x.jpg","twitter_title":"Lynx Roundup, January 20th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://machinelearningmastery.com/model-averaging-ensemble-for-deep-learning-neural-networks/\n\nhttps://www.technologyreview.com/lists/innovators-under-35/2017/inventor/ian-goodfellow/\n\nhttps://www.quora.com/What-were-the-most-significant-machine-learning-AI-advances-in-2018\n\nhttps://www.reddit.com/r/rust/comments/abm6hy/why_rust_is_successful_compared_with/\n\nhttps://arxiv.org/abs/1810.09679\n\nhttp://blog.klipse.tech/clojure/2018/12/09/easy-clojure.html\n\nhttp://www.bbc.com/future/story/20181207-how-ai-could-help-us-with-ancient-languages-like-sumerian","html":"<p></p><p><a href=\"https://machinelearningmastery.com/model-averaging-ensemble-for-deep-learning-neural-networks/\">https://machinelearningmastery.com/model-averaging-ensemble-for-deep-learning-neural-networks/</a></p><p><a href=\"https://www.technologyreview.com/lists/innovators-under-35/2017/inventor/ian-goodfellow/\">https://www.technologyreview.com/lists/innovators-under-35/2017/inventor/ian-goodfellow/</a></p><p><a href=\"https://www.quora.com/What-were-the-most-significant-machine-learning-AI-advances-in-2018\">https://www.quora.com/What-were-the-most-significant-machine-learning-AI-advances-in-2018</a></p><p><a href=\"https://www.reddit.com/r/rust/comments/abm6hy/why_rust_is_successful_compared_with/\">https://www.reddit.com/r/rust/comments/abm6hy/why_rust_is_successful_compared_with/</a></p><p><a href=\"https://arxiv.org/abs/1810.09679\">https://arxiv.org/abs/1810.09679</a></p><p><a href=\"http://blog.klipse.tech/clojure/2018/12/09/easy-clojure.html\">http://blog.klipse.tech/clojure/2018/12/09/easy-clojure.html</a></p><p><a href=\"http://www.bbc.com/future/story/20181207-how-ai-could-help-us-with-ancient-languages-like-sumerian\">http://www.bbc.com/future/story/20181207-how-ai-could-help-us-with-ancient-languages-like-sumerian</a></p>","url":"https://hackersandslackers.com/lynx-roundup-january-20th/","uuid":"32cdf887-dd29-4f60-96ba-a95eca641f15","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5c36e198797a4f6f1db68de2"}},{"node":{"id":"Ghost__Post__5c36e11d797a4f6f1db68ddd","title":"Lynx Roundup, January 19th","slug":"lynx-roundup-january-19th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/83-3@2x.jpg","excerpt":"Rust & Python!  Halite, a cool AI game in your browser!  Turning videos into comics!","custom_excerpt":"Rust & Python!  Halite, a cool AI game in your browser!  Turning videos into comics!","created_at_pretty":"10 January, 2019","published_at_pretty":"19 January, 2019","updated_at_pretty":"21 January, 2019","created_at":"2019-01-10T01:07:25.000-05:00","published_at":"2019-01-19T07:00:00.000-05:00","updated_at":"2019-01-20T22:41:34.000-05:00","meta_title":"Lynx Roundup, January 19th | Hackers and Slackers","meta_description":"Rust & Python!  Halite, a cool AI game in your browser!  Turning videos into comics!","og_description":"Rust & Python!  Halite, a cool AI game in your browser!  Turning videos into comics!","og_image":"https://hackersandslackers.com/content/images/lynx/83-3@2x.jpg","og_title":"Lynx Roundup, January 19th","twitter_description":"Rust & Python!  Halite, a cool AI game in your browser!  Turning videos into comics!","twitter_image":"https://hackersandslackers.com/content/images/lynx/83-3@2x.jpg","twitter_title":"Lynx Roundup, January 19th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://halite.io/\n\nhttps://boingboing.net/2018/12/11/smartest-people-in-america.html\n\nhttps://www.theverge.com/2018/10/5/17940650/how-history-gets-things-wrong-alex-rosenberg-interview-neuroscience-stories\n\nhttp://blog.digital-horror.com/rust-python-comparison/amp/\n\nhttp://www.themathcitadel.com/2018/04/05/littles-law-for-estimation-only/\n\nhttps://libcom.org/organise/workplace\n\nhttps://arxiv.org/abs/1812.03473","html":"<p></p><p><a href=\"https://halite.io/\">https://halite.io/</a></p><p><a href=\"https://boingboing.net/2018/12/11/smartest-people-in-america.html\">https://boingboing.net/2018/12/11/smartest-people-in-america.html</a></p><p><a href=\"https://www.theverge.com/2018/10/5/17940650/how-history-gets-things-wrong-alex-rosenberg-interview-neuroscience-stories\">https://www.theverge.com/2018/10/5/17940650/how-history-gets-things-wrong-alex-rosenberg-interview-neuroscience-stories</a></p><p><a href=\"http://blog.digital-horror.com/rust-python-comparison/amp/\">http://blog.digital-horror.com/rust-python-comparison/amp/</a></p><p><a href=\"http://www.themathcitadel.com/2018/04/05/littles-law-for-estimation-only/\">http://www.themathcitadel.com/2018/04/05/littles-law-for-estimation-only/</a></p><p><a href=\"https://libcom.org/organise/workplace\">https://libcom.org/organise/workplace</a></p><p><a href=\"https://arxiv.org/abs/1812.03473\">https://arxiv.org/abs/1812.03473</a></p>","url":"https://hackersandslackers.com/lynx-roundup-january-19th/","uuid":"2ab5ab1a-063d-48d3-9466-881bfaf6bde3","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5c36e11d797a4f6f1db68ddd"}},{"node":{"id":"Ghost__Post__5c36e0ad797a4f6f1db68dd8","title":"Lynx Roundup, January 18th","slug":"lynx-roundup-january-18th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/81-1@2x.jpg","excerpt":"Linear Algebra for Data Science!  Type Checking in Python!  Speeding up Jupyter notebooks!","custom_excerpt":"Linear Algebra for Data Science!  Type Checking in Python!  Speeding up Jupyter notebooks!","created_at_pretty":"10 January, 2019","published_at_pretty":"18 January, 2019","updated_at_pretty":"21 January, 2019","created_at":"2019-01-10T01:05:33.000-05:00","published_at":"2019-01-18T07:00:00.000-05:00","updated_at":"2019-01-20T22:46:29.000-05:00","meta_title":"Lynx Roundup, January 18th | Hackers and Slackers","meta_description":"Linear Algebra for Data Science!  Type Checking in Python!  Speeding up Jupyter notebooks!","og_description":"Linear Algebra for Data Science!  Type Checking in Python!  Speeding up Jupyter notebooks!","og_image":"https://hackersandslackers.com/content/images/lynx/81-1@2x.jpg","og_title":"Lynx Roundup, January 18th","twitter_description":"Linear Algebra for Data Science!  Type Checking in Python!  Speeding up Jupyter notebooks!","twitter_image":"https://hackersandslackers.com/content/images/lynx/81-1@2x.jpg","twitter_title":"Lynx Roundup, January 18th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://notesfrombelow.org/issue/technology-and-the-worker\n\nhttps://medium.com/syncedreview/alibaba-open-sources-mars-to-complement-numpy-ea215ff1fa2f\n\nhttps://medium.com/@rathi.ankit/linear-algebra-for-data-science-a9648b9daee0\n\nhttps://realpython.com/python-type-checking/\n\nhttps://towardsdatascience.com/speed-up-jupyter-notebooks-20716cbe2025\n\nhttps://gisgeography.com/unsigned-integer-signed-integer-raster-data/\n\nhttps://motherboard.vice.com/en_us/article/nepxbz/i-gave-a-bounty-hunter-300-dollars-located-phone-microbilt-zumigo-tmobile","html":"<p></p><p><a href=\"https://notesfrombelow.org/issue/technology-and-the-worker\">https://notesfrombelow.org/issue/technology-and-the-worker</a></p><p><a href=\"https://medium.com/syncedreview/alibaba-open-sources-mars-to-complement-numpy-ea215ff1fa2f\">https://medium.com/syncedreview/alibaba-open-sources-mars-to-complement-numpy-ea215ff1fa2f</a></p><p><a href=\"https://medium.com/@rathi.ankit/linear-algebra-for-data-science-a9648b9daee0\">https://medium.com/@rathi.ankit/linear-algebra-for-data-science-a9648b9daee0</a></p><p><a href=\"https://realpython.com/python-type-checking/\">https://realpython.com/python-type-checking/</a></p><p><a href=\"https://towardsdatascience.com/speed-up-jupyter-notebooks-20716cbe2025\">https://towardsdatascience.com/speed-up-jupyter-notebooks-20716cbe2025</a></p><p><a href=\"https://gisgeography.com/unsigned-integer-signed-integer-raster-data/\">https://gisgeography.com/unsigned-integer-signed-integer-raster-data/</a></p><p><a href=\"https://motherboard.vice.com/en_us/article/nepxbz/i-gave-a-bounty-hunter-300-dollars-located-phone-microbilt-zumigo-tmobile\">https://motherboard.vice.com/en_us/article/nepxbz/i-gave-a-bounty-hunter-300-dollars-located-phone-microbilt-zumigo-tmobile</a></p>","url":"https://hackersandslackers.com/lynx-roundup-january-18th/","uuid":"68659861-4a94-4e8a-b1e2-065b4a9f45f3","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5c36e0ad797a4f6f1db68dd8"}},{"node":{"id":"Ghost__Post__5c3fc99b89c81d4ccc3f64b1","title":"The Hostile Extraction of Tableau Server Data","slug":"hostile-extraction-of-tableau-server-data","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/tableauextraction-1-2.jpg","excerpt":"Say no to proprietary software constraints. Say no to vendor lock. Say yes to freedom.","custom_excerpt":"Say no to proprietary software constraints. Say no to vendor lock. Say yes to freedom.","created_at_pretty":"17 January, 2019","published_at_pretty":"17 January, 2019","updated_at_pretty":"28 March, 2019","created_at":"2019-01-16T19:17:31.000-05:00","published_at":"2019-01-17T07:43:00.000-05:00","updated_at":"2019-03-28T11:06:50.000-04:00","meta_title":"The Hostile Extraction of Tableau Server Data | Hackers and Slackers","meta_description":"How to create a Python application to take back your Tableau data. Say no to proprietary software constraints. Say no to vendor lock. Say yes to freedom.","og_description":"Say no to proprietary software constraints. Say no to vendor lock. Say yes to freedom.","og_image":"https://hackersandslackers.com/content/images/2019/03/tableauextraction-1-2.jpg","og_title":"The Hostile Extraction of Tableau Server Data","twitter_description":"Say no to proprietary software constraints. Say no to vendor lock. Say yes to freedom.","twitter_image":"https://hackersandslackers.com/content/images/2019/03/tableauextraction-1-1.jpg","twitter_title":"The Hostile Extraction of Tableau Server Data","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Tableau","slug":"tableau","description":"Dissect Tableau server and implement hacks to improve your workflow, or simply become familiar with the Tableau desktop user interface.","feature_image":null,"meta_description":"Dissect Tableau server and implement hacks to improve your workflow, or simply become familiar with the Tableau desktop user interface.","meta_title":"Tableau Desktop & Server | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Tableau","slug":"tableau","description":"Dissect Tableau server and implement hacks to improve your workflow, or simply become familiar with the Tableau desktop user interface.","feature_image":null,"meta_description":"Dissect Tableau server and implement hacks to improve your workflow, or simply become familiar with the Tableau desktop user interface.","meta_title":"Tableau Desktop & Server | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"REST APIs","slug":"restapis","description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","feature_image":null,"meta_description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","meta_title":"Consuming and Building REST APIs | Hackers and Slackers","visibility":"public"},{"name":"#Hacking Tableau Server","slug":"hacking-tableau-server","description":"Break free from the constraints of the TSM CLI to bend Tableau Server to your will. Uncover Superadmin privileges, or even rewire Tableau to handle ETL.","feature_image":"https://hackersandslackers.com/content/images/2019/03/tableauseries-2.jpg","meta_description":"Break free from the constraints of the TSM CLI to bend Tableau Server to your will. Uncover Superadmin privileges, or even rewire Tableau to handle ETL.","meta_title":"Hacking Tableau Server","visibility":"internal"},{"name":"BI","slug":"business-intelligence","description":"Business Intelligence, otherwise known as \"making nice reports for executives to ignore.\"","feature_image":null,"meta_description":null,"meta_title":"Business Intelligence Tools | Hackers and Slackers","visibility":"public"},{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"}],"plaintext":"I try my best not to hate on Tableau. It was the software’s combination of power\nand ease-of-use that drove me to purchase a license in the first place. Ever\nsince then, I’m finding new and exciting ways Tableau intentionally locks users\nout of their data. \n\nI gave the Tableau Server Client Python library\n[https://tableau.github.io/server-client-python/docs/]  a spin recently in hopes\nof finding something useful. I decided to (sigh, once more) allow Tableau the\nbenefit of the doubt: after pushing four updates in a single month, maybe things\nhad changed. On the contrary, the Tableau business strategy stands strong: to be\na raging, flaming turd pile. A perfect example of this is the View  object\nTableau allows you to interact with on your server. Those familiar know that \nviews  are slang for sheets  of workbooks  stored on Tableau server. \n\nConnecting to your Tableau instance via Python to retrieve your view objects is\na piece of cake:\n\nimport tableauserverclient as TSC\ntableau_auth = TSC.TableauAuth('username', 'password')\nserver = TSC.Server('http://servername')\n\nwith server.auth.sign_in(tableau_auth):\n  all_views, pagination_item = server.views.get()\n  print([view.name for view in all_views])\n\n\nThis simple snippet lists every view object on your server. Wow! Think of what\nwe can do with all that tabular data we worked so hard to transform, rig- WRONG.\nLook at what Tableau's Python 'View Object' actually contains:\n\n * id  The identifier of the view item.\n * name  The name of the view.\n * owner_id  The id for the owner of the view.\n * preview_image  The thumbnail image for the view.\n * total_views  The usage statistics for the view. Indicates the total number of\n   times the view has been accessed.\n * workbook_id  The id of the workbook associated with the view.\n\nHOLY MOSES STOP THE PRESSES, we can get a thumbnail image  of our data?! THANK\nYOU GENEROUS TABLEAU OVERLORDS!\n\nNotice how there's no mention of, you know, the actual data.\n\nWe're going to play a game. In the wake of my time has been wasted, I feel that\nwarm tickling feeling which seems to say \"Viciously dismantle the ambitions of\nan establishment!\"  May I remind you, we're talking about the kind of\nestablishment that bills customer licenses based on the number of CPUs being\nutilized by their server infrastructure.  This is effectively recognizing the\nhorrifying and inefficient codebase behind Tableau server, and leveraging this\nflaw for monetization. Yes, you're paying more money to incentivize worst\npractices.\n\nLet's Make a Flask App. An Angry One.\nIn our last post I shared a little script to help you get started stealing data\n[https://hackersandslackers.com/tableaus-rest-api-turning-tableau-into-an-etl-pipeline-gui/] \n off your own Tableau Server. That doesn't quite scratch my itch anymore. I'm\ngoing to build an interface. I want to make it easy as possible for anybody to\nsystemically rob Tableau Server of every penny its got. That's a lot of pennies\nwhen we consider the equation: data = oil + new.\n\nBefore I bore you, here's a quick demo of the MVP we're building:\n\nEach table is a view being pulled from Tableau Server.This POC demonstrates that\nit is very  possible to automate the extraction of Tableau views from Tableau\nServer. The success  message is signaling that we've successfully taken a\nTableau view and created a corresponding table in an external database. Any data\nwe manipulate in Tableau is now truly ours: we can now leverage the transforms\nwe've applied in workbooks, use this data in other applications, and utilize an\nextract scheduler to keep the data coming. We've turned a BI tool into an ETL\ntool. In other words, you can kindly take those thumbnail previews and shove it.\n\nI'll be open sourcing all of this, as is my civic duty. Let us be clear to\nenterprises: withholding freedom to one's own data is an act of war. Pricing\nmodels which reward poor craftsmanship are an insult to our intellect. For every\narrogant atrocity committed against consumers, the war will wage twice as hard.\nI should probably mention these opinions are my own.\n\nThe Proletariat Strikes Back\nGet a feel for where we're heading with the obligatory project-file-structure\ntree:\n\ntableau-exporter\n├── application\n│   ├── __init__.py\n│   ├── database.py\n│   ├── tableau.py\n│   ├── routes.py\n│   ├── static\n│   │   ├── data\n│   │   │   └── view.csv\n│   │   ├── dist\n│   │   │   ├── all.css\n│   │   │   ├── packed.js\n│   │   ├── img\n│   │   │   └── tableaugithub.jpg\n│   │   ├── js\n│   │   │   └── main.js\n│   │   └── scss\n│   │       └── main.scss\n│   └── templates\n│       ├── export.html\n│       ├── index.html\n│       ├── layout.html\n│       └── view.html\n├── config.ini\n├── config.py\n├── app.yaml\n├── start.sh\n├── wsgi.py\n├── Pipfile\n├── README.md\n└── requirements.txt\n\n\nAs usual, we're using a classic Flask application factory  set up here.\n\nWeapons Of Choice\nLet's have a look at our core arsenal:\n\n * requests: We're achieving our goal by exploiting some loopholes exposed in\n   the Tableau REST API.\n * pandas: Will handle everything from extracting comma-separated data into a\n   CSV, render HTML tables, and output SQL.\n * flask_sqlalchemy: Used in tandem with pandas  to handle shipping our data off\n   elsewhere.\n * flask_redis: To handle session variables.\n\nInitiating our Application\nHere's how we construct our app:\n\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_redis import FlaskRedis\n\n# Set global entities\ndb = SQLAlchemy()\nr = FlaskRedis()\n\n\ndef create_app():\n    \"\"\"Construct the core application.\"\"\"\n    app = Flask(__name__, instance_relative_config=False)\n    app.config.from_object('config.Config')\n\n    with app.app_context():\n        # Initiate globals\n        db.init_app(app)\n        r.init_app(app, charset=\"utf-8\", decode_responses=True)\n\n        # Set global contexts\n        r.set('uri', app.config['SQLALCHEMY_DATABASE_URI'])\n        r.set('baseurl',  app.config['BASE_URL'])\n        r.set('username',  app.config['USERNAME'])\n        r.set('password', app.config['PASSWORD'])\n\n        # Import our modules\n        from . import routes\n        from . import tableau\n        app.register_blueprint(routes.home_blueprint)\n\n        return app\n\n\nThis should all feel like business-as-usual. The core of our application is\nsplit between routes.py, which handles views, and tableau.py, which handles the\nanti-establishment logic. Let's begin with the latter.\n\nLife, Liberty, and The Pursuit of Sick Data Pipelines\nOur good friend tableau.py  might look familiar to those who joined us last time\n[https://hackersandslackers.com/tableaus-rest-api-turning-tableau-into-an-etl-pipeline-gui/]\n. tableau.py  has been busy hitting the gym since then and is looking sharp for\nprimetime:\n\nimport requests\nimport xml.etree.ElementTree as ET\nfrom . import r\nimport pandas as pd\nimport io\n\n\nclass ExtractTableauView:\n    \"\"\"Class for working in a Tableau instance.\"\"\"\n\n    __baseurl = r.get('baseurl')\n    __username = r.get('username')\n    __password = r.get('password')\n    __database = r.get('uri')\n    __contenturl = r.get('contenturl')\n\n    @classmethod\n    def get_view(cls, site, xml, view, token):\n        \"\"\"Extract contents of a single view.\"\"\"\n        headers = {'X-Tableau-Auth': token,\n                   'Content-Type': 'text/csv'\n                   }\n        req = requests.get(cls.__baseurl + '/api/3.2/sites/' + str(site) +'/views/' + str(view) + '/data', headers=headers, stream=True)\n        csv_text = req.text\n        view_df = pd.read_csv(io.StringIO(csv_text), header=0)\n        return view_df\n\n    @classmethod\n    def list_views(cls, site, xml, token):\n        \"\"\"List all views belonging to a Tableau Site.\"\"\"\n        headers = {'X-Tableau-Auth': token}\n        req = requests.get(cls.__baseurl + '/api/3.2/sites/' + site + '/views', auth=(cls.__username, cls.__password), headers=headers)\n        root = ET.fromstring(req.content)\n        views_arr = []\n        for child in root.iter('*'):\n            if child.tag == '{http://tableau.com/api}views':\n                for view in child:\n                    view_dict = {\n                        'name': view.attrib.get('name'),\n                        'id': view.attrib.get('id'),\n                        'url': cls.__baseurl + '/' + view.attrib.get('contentUrl'),\n                        'created': view.attrib.get('createdAt'),\n                        'updated': view.attrib.get('updatedAt')\n                    }\n                    views_arr.append(view_dict)\n        return views_arr\n\n    @classmethod\n    def get_token(cls, xml):\n        \"\"\"Receive Auth token to perform API requests.\"\"\"\n        for child in xml.iter('*'):\n            if child.tag == '{http://tableau.com/api}credentials':\n                token = child.attrib.get('token')\n                return token\n\n    @classmethod\n    def get_site(cls, xml):\n        \"\"\"Retrieve ID of Tableau 'site' instance.\"\"\"\n        root = xml\n        for child in root.iter('*'):\n            if child.tag == '{http://tableau.com/api}site':\n                site = child.attrib.get('id')\n                return site\n\n    @classmethod\n    def initialize_tableau_request(cls):\n        \"\"\"Retrieve core XML for interacting with Tableau.\"\"\"\n        headers = {'Content-Type': 'application/xml'}\n        body = '<tsRequest><credentials name=\"' + cls.__username + '\" password=\"' + cls.__password + '\" ><site contentUrl=\"' + cls.__contenturl + '\" /></credentials></tsRequest>'\n        req = requests.post(cls.__baseurl + '/api/3.2/auth/signin', auth=(cls.__username, cls.__password), headers=headers, data=body)\n        root = ET.fromstring(req.content)\n        return root\n\n\nI wish I could take full credit for what a shit show this class appears to be at\nfirst glance, but I assure you we've been left with no choice. For example: have\nI mentioned that Tableau's REST API returns XML so malformed that it breaks XML\nparsers? I can't tell incompetence from malicious intent at this point.\n\nHere's a method breakdown of our class:\n\n * initialize_tableau_request(): Handles initial auth and returns valuable\n   information such as site ID and API Token to be used thereafter.\n * get_site(): Extracts the site ID from XML returned by the above.\n * get_token(): Similarly extracts our token.\n * list_views(): Compiles a list of all views within a Tableau site, giving us a\n   chance to select ones for extraction.\n * get_view(): Takes a view of our choice and creates a DataFrame, which is to\n   be shipped off to a foreign database.\n\nOur Routing Logic\nMoving on we have routes.py  building the views and associated logic for our\napp:\n\nfrom flask import current_app as app\nfrom flask import render_template, Blueprint, request, Markup\nfrom flask_assets import Bundle, Environment\nfrom . import tableau\nfrom . import database\nimport pandas as pd\n\nhome_blueprint = Blueprint('home', __name__, template_folder='templates', static_folder='static')\n\nassets = Environment(app)\njs = Bundle('js/*.js', filters='jsmin', output='dist/packed.js')\nscss = Bundle('scss/*.scss', filters='libsass', output='dist/all.css')\nassets.register('scss_all', scss)\nassets.register('js_all', js)\nscss.build()\njs.build()\n\n\n@home_blueprint.route('/', methods=['GET', 'POST'])\ndef entry():\n    \"\"\"Homepage which lists all available views.\"\"\"\n    tableau_view_extractor = tableau.ExtractTableauView()\n    xml = tableau_view_extractor.initialize_tableau_request()\n    token = tableau_view_extractor.get_token(xml)\n    site = tableau_view_extractor.get_site(xml)\n    views = tableau_view_extractor.list_views(site, xml, token)\n    return render_template(\n        'index.html',\n        title=\"Here are your views.\",\n        template=\"home-template\",\n        views=views,\n        token=token,\n        xml=xml,\n        site=site\n    )\n\n\n@home_blueprint.route('/view', methods=['GET', 'POST'])\ndef view():\n    \"\"\"Displays a preview of a selected view.\"\"\"\n    site = request.args.get('site')\n    xml = request.args.get('xml')\n    view = request.args.get('view')\n    token = request.args.get('token')\n    tableau_view_extractor = tableau.ExtractTableauView()\n    view_df = tableau_view_extractor.get_view(site, xml, view, token)\n    view_df.to_csv('application/static/data/view.csv')\n    return render_template(\n        'view.html',\n        title='Your View',\n        template=\"home-template\",\n        view=view,\n        token=token,\n        xml=xml,\n        site=site,\n        view_df=Markup(view_df.to_html(index=False))\n    )\n\n\n@home_blueprint.route('/export', methods=['GET', 'POST'])\ndef export():\n    \"\"\"Exports view to external database.\"\"\"\n    view_df = pd.read_csv('application/static/data/view.csv')\n    view_df.to_sql(name='temp', con=database.engine, if_exists='replace', chunksize=50, index=True)\n    return render_template(\n        'export.html',\n        title='Success!',\n        template=\"success-template\",\n    )\n\n\nWe only have 3 pages to our application. They include our list of views, a\npreview of a single view, and a success page for when said view is exported.\nThis is all core Flask logic.\n\nPutting it On Display\nWe build our pages dynamically based on the values we pass our Jinja templates.\nThe homepage utilizes some nested loops to list the views we returned from \ntableau.py, and also makes use of query strings to pass values on to other\ntemplates.\n\n{% extends \"layout.html\" %}\n\n{% block content %}\n<div class=\"extended-container {{template}}\">\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col s12\">\n        <h1>{{title}}</h1>\n      </div>\n      <div class=\"col s12 flex-container\">\n        {% for view in views %}\n        <div class=\"download\">\n          <a href=\"{{ url_for('home.view') }}?token={{token}}&site={{site}}&view={{view.id}}&xml={{xml}}\">\n            <ul>\n              {% for key, value in view.items() %}\n              <li><span class=\"key {{key}}\">{{key}}</span> {{ value }}</li>\n              {% endfor %}\n            </ul>\n          </a>\n        </div>\n        {% endfor %}\n      </div>\n    </div>\n  </div>\n  {% endblock %}\n\n\nMoving on: our humble view.html  page has two purposes: display the selected\nview, and export it in the name of justice.\n\n{% extends \"layout.html\" %}\n\n{% block content %}\n<div class=\"extended-container {{template}}\">\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col s12\">\n        <h1>{{title}}</h1>\n        <a href=\"{{ url_for('home.export') }}\" class=\"export\"><i class=\"far fa-file-export\"></i></a>\n        {{view_df}}\n      </div>\n    </div>\n  </div>\n  {% endblock %}\n\n\nThe War is Not Over\nThis repository is open to the public and can be found here\n[https://github.com/toddbirchard/tableau-extraction]. There are still crusades\nleft ahead of us: for instance, building out this interface to accept\ncredentials via login as opposed to a config file, and the scheduling of view\nexports, as opposed to on-demand.\n\nWhere we go from here depends on what we the people decide. For all I know, I\ncould be shouting to an empty room here (I'm almost positive anybody who pays\nfor enterprise software prefers the blind eye of denial). If the opposite holds\ntrue, I dare say the revolution is only getting started.","html":"<p>I try my best not to hate on Tableau. It was the software’s combination of power and ease-of-use that drove me to purchase a license in the first place. Ever since then, I’m finding new and exciting ways Tableau intentionally locks users out of their data. </p><p>I gave the <a href=\"https://tableau.github.io/server-client-python/docs/\"><strong>Tableau Server Client</strong> Python library</a> a spin recently in hopes of finding something useful. I decided to (sigh, <em>once more</em>) allow Tableau the benefit of the doubt: after pushing <strong>four updates in a single month</strong>, maybe things had changed. On the contrary, the Tableau business strategy stands strong: to be a raging, flaming turd pile. A perfect example of this is the <strong>View</strong> object Tableau allows you to interact with on your server. Those familiar know that <strong>views</strong> are slang for <em>sheets</em> of <em>workbooks</em> stored on Tableau server. </p><p>Connecting to your Tableau instance via Python to retrieve your view objects is a piece of cake:</p><pre><code class=\"language-python\">import tableauserverclient as TSC\ntableau_auth = TSC.TableauAuth('username', 'password')\nserver = TSC.Server('http://servername')\n\nwith server.auth.sign_in(tableau_auth):\n  all_views, pagination_item = server.views.get()\n  print([view.name for view in all_views])\n</code></pre>\n<p>This simple snippet lists every view object on your server. Wow! Think of what we can do with all that tabular data we worked so hard to transform, rig- <strong>WRONG</strong>. Look at what Tableau's Python 'View Object' actually contains:</p><ul><li><code>id</code> The identifier of the view item.</li><li><code>name</code> The name of the view.</li><li><code>owner_id</code> The id for the owner of the view.</li><li><code>preview_image</code> The thumbnail image for the view.</li><li><code>total_views</code> The usage statistics for the view. Indicates the total number of times the view has been accessed.</li><li><code>workbook_id</code> The id of the workbook associated with the view.</li></ul><p>HOLY MOSES STOP THE PRESSES, we can get a <strong><em>thumbnail image</em></strong> of our data?! THANK YOU GENEROUS TABLEAU OVERLORDS!</p><p>Notice how there's no mention of, you know, the <em>actual data</em>.</p><p>We're going to play a game. In the wake of my time has been wasted, I feel that warm tickling feeling which seems to say <em>\"Viciously dismantle the ambitions of an establishment!\"</em> May I remind you, we're talking about the kind of establishment that bills customer licenses based on the <strong><em>number of CPUs being utilized by their server infrastructure.</em></strong> This is effectively recognizing the horrifying and inefficient codebase behind Tableau server, and leveraging this flaw for monetization. Yes, you're paying more money to incentivize worst practices.</p><h2 id=\"let-s-make-a-flask-app-an-angry-one-\">Let's Make a Flask App. An Angry One.</h2><p>In our last post I shared <a href=\"https://hackersandslackers.com/tableaus-rest-api-turning-tableau-into-an-etl-pipeline-gui/\">a little script to help you get started stealing data</a> off your own Tableau Server. That doesn't quite scratch my itch anymore. I'm going to build an interface. I want to make it easy as possible for anybody to systemically rob Tableau Server of every penny its got. That's a lot of pennies when we consider the equation: <strong>data = oil + new</strong>.</p><p>Before I bore you, here's a quick demo of the MVP we're building:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-4.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/tableau.gif\" class=\"kg-image\"><figcaption>Each table is a view being pulled from Tableau Server.</figcaption></figure><p>This POC demonstrates that it is <em>very</em> possible to automate the extraction of Tableau views from Tableau Server. The <em>success</em> message is signaling that we've successfully taken a Tableau view and <strong>created a corresponding table in an external database</strong>. Any data we manipulate in Tableau is now truly ours: we can now leverage the transforms we've applied in workbooks, use this data in other applications, and utilize an extract scheduler to keep the data coming. We've turned a BI tool into an ETL tool. In other words, you can kindly take those thumbnail previews and shove it.</p><p>I'll be open sourcing all of this, as is my civic duty. Let us be clear to enterprises: withholding freedom to one's own data is an act of war. Pricing models which reward poor craftsmanship are an insult to our intellect. For every arrogant atrocity committed against consumers, the war will wage twice as hard. I should probably mention these opinions are my own.</p><h2 id=\"the-proletariat-strikes-back\">The Proletariat Strikes Back</h2><p>Get a feel for where we're heading with the obligatory project-file-structure tree:</p><pre><code class=\"language-bash\">tableau-exporter\n├── application\n│   ├── __init__.py\n│   ├── database.py\n│   ├── tableau.py\n│   ├── routes.py\n│   ├── static\n│   │   ├── data\n│   │   │   └── view.csv\n│   │   ├── dist\n│   │   │   ├── all.css\n│   │   │   ├── packed.js\n│   │   ├── img\n│   │   │   └── tableaugithub.jpg\n│   │   ├── js\n│   │   │   └── main.js\n│   │   └── scss\n│   │       └── main.scss\n│   └── templates\n│       ├── export.html\n│       ├── index.html\n│       ├── layout.html\n│       └── view.html\n├── config.ini\n├── config.py\n├── app.yaml\n├── start.sh\n├── wsgi.py\n├── Pipfile\n├── README.md\n└── requirements.txt\n</code></pre>\n<p>As usual, we're using a classic Flask <em>application factory</em> set up here.</p><h3 id=\"weapons-of-choice\">Weapons Of Choice</h3><p>Let's have a look at our core arsenal:</p><ul><li><code>requests</code>: We're achieving our goal by exploiting some loopholes exposed in the Tableau REST API.</li><li><code>pandas</code>: Will handle everything from extracting comma-separated data into a CSV, render HTML tables, and output SQL.</li><li><code>flask_sqlalchemy</code>: Used in tandem with <em>pandas</em> to handle shipping our data off elsewhere.</li><li><code>flask_redis</code>: To handle session variables.</li></ul><h3 id=\"initiating-our-application\">Initiating our Application</h3><p>Here's how we construct our app:</p><pre><code class=\"language-python\">from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_redis import FlaskRedis\n\n# Set global entities\ndb = SQLAlchemy()\nr = FlaskRedis()\n\n\ndef create_app():\n    &quot;&quot;&quot;Construct the core application.&quot;&quot;&quot;\n    app = Flask(__name__, instance_relative_config=False)\n    app.config.from_object('config.Config')\n\n    with app.app_context():\n        # Initiate globals\n        db.init_app(app)\n        r.init_app(app, charset=&quot;utf-8&quot;, decode_responses=True)\n\n        # Set global contexts\n        r.set('uri', app.config['SQLALCHEMY_DATABASE_URI'])\n        r.set('baseurl',  app.config['BASE_URL'])\n        r.set('username',  app.config['USERNAME'])\n        r.set('password', app.config['PASSWORD'])\n\n        # Import our modules\n        from . import routes\n        from . import tableau\n        app.register_blueprint(routes.home_blueprint)\n\n        return app\n</code></pre>\n<p>This should all feel like business-as-usual. The core of our application is split between <code>routes.py</code>, which handles views, and <code>tableau.py</code>, which handles the anti-establishment logic. Let's begin with the latter.</p><h2 id=\"life-liberty-and-the-pursuit-of-sick-data-pipelines\">Life, Liberty, and The Pursuit of Sick Data Pipelines</h2><p>Our good friend <code>tableau.py</code> might look familiar to those who joined us <a href=\"https://hackersandslackers.com/tableaus-rest-api-turning-tableau-into-an-etl-pipeline-gui/\">last time</a>. <code>tableau.py</code> has been busy hitting the gym since then and is looking sharp for primetime:</p><pre><code class=\"language-python\">import requests\nimport xml.etree.ElementTree as ET\nfrom . import r\nimport pandas as pd\nimport io\n\n\nclass ExtractTableauView:\n    &quot;&quot;&quot;Class for working in a Tableau instance.&quot;&quot;&quot;\n\n    __baseurl = r.get('baseurl')\n    __username = r.get('username')\n    __password = r.get('password')\n    __database = r.get('uri')\n    __contenturl = r.get('contenturl')\n\n    @classmethod\n    def get_view(cls, site, xml, view, token):\n        &quot;&quot;&quot;Extract contents of a single view.&quot;&quot;&quot;\n        headers = {'X-Tableau-Auth': token,\n                   'Content-Type': 'text/csv'\n                   }\n        req = requests.get(cls.__baseurl + '/api/3.2/sites/' + str(site) +'/views/' + str(view) + '/data', headers=headers, stream=True)\n        csv_text = req.text\n        view_df = pd.read_csv(io.StringIO(csv_text), header=0)\n        return view_df\n\n    @classmethod\n    def list_views(cls, site, xml, token):\n        &quot;&quot;&quot;List all views belonging to a Tableau Site.&quot;&quot;&quot;\n        headers = {'X-Tableau-Auth': token}\n        req = requests.get(cls.__baseurl + '/api/3.2/sites/' + site + '/views', auth=(cls.__username, cls.__password), headers=headers)\n        root = ET.fromstring(req.content)\n        views_arr = []\n        for child in root.iter('*'):\n            if child.tag == '{http://tableau.com/api}views':\n                for view in child:\n                    view_dict = {\n                        'name': view.attrib.get('name'),\n                        'id': view.attrib.get('id'),\n                        'url': cls.__baseurl + '/' + view.attrib.get('contentUrl'),\n                        'created': view.attrib.get('createdAt'),\n                        'updated': view.attrib.get('updatedAt')\n                    }\n                    views_arr.append(view_dict)\n        return views_arr\n\n    @classmethod\n    def get_token(cls, xml):\n        &quot;&quot;&quot;Receive Auth token to perform API requests.&quot;&quot;&quot;\n        for child in xml.iter('*'):\n            if child.tag == '{http://tableau.com/api}credentials':\n                token = child.attrib.get('token')\n                return token\n\n    @classmethod\n    def get_site(cls, xml):\n        &quot;&quot;&quot;Retrieve ID of Tableau 'site' instance.&quot;&quot;&quot;\n        root = xml\n        for child in root.iter('*'):\n            if child.tag == '{http://tableau.com/api}site':\n                site = child.attrib.get('id')\n                return site\n\n    @classmethod\n    def initialize_tableau_request(cls):\n        &quot;&quot;&quot;Retrieve core XML for interacting with Tableau.&quot;&quot;&quot;\n        headers = {'Content-Type': 'application/xml'}\n        body = '&lt;tsRequest&gt;&lt;credentials name=&quot;' + cls.__username + '&quot; password=&quot;' + cls.__password + '&quot; &gt;&lt;site contentUrl=&quot;' + cls.__contenturl + '&quot; /&gt;&lt;/credentials&gt;&lt;/tsRequest&gt;'\n        req = requests.post(cls.__baseurl + '/api/3.2/auth/signin', auth=(cls.__username, cls.__password), headers=headers, data=body)\n        root = ET.fromstring(req.content)\n        return root\n</code></pre>\n<p>I wish I could take full credit for what a shit show this class appears to be at first glance, but I assure you we've been left with no choice. For example: have I mentioned that Tableau's REST API returns XML so malformed that it breaks XML parsers? I can't tell incompetence from malicious intent at this point.</p><p>Here's a method breakdown of our class:</p><ul><li><code>initialize_tableau_request()</code>: Handles initial auth and returns valuable information such as site ID and API Token to be used thereafter.</li><li><code>get_site()</code>: Extracts the site ID from XML returned by the above.</li><li><code>get_token()</code>: Similarly extracts our token.</li><li><code>list_views()</code>: Compiles a list of all views within a Tableau site, giving us a chance to select ones for extraction.</li><li><code>get_view()</code>: Takes a view of our choice and creates a DataFrame, which is to be shipped off to a foreign database.</li></ul><h2 id=\"our-routing-logic\">Our Routing Logic</h2><p>Moving on we have <code>routes.py</code> building the views and associated logic for our app:</p><pre><code class=\"language-python\">from flask import current_app as app\nfrom flask import render_template, Blueprint, request, Markup\nfrom flask_assets import Bundle, Environment\nfrom . import tableau\nfrom . import database\nimport pandas as pd\n\nhome_blueprint = Blueprint('home', __name__, template_folder='templates', static_folder='static')\n\nassets = Environment(app)\njs = Bundle('js/*.js', filters='jsmin', output='dist/packed.js')\nscss = Bundle('scss/*.scss', filters='libsass', output='dist/all.css')\nassets.register('scss_all', scss)\nassets.register('js_all', js)\nscss.build()\njs.build()\n\n\n@home_blueprint.route('/', methods=['GET', 'POST'])\ndef entry():\n    &quot;&quot;&quot;Homepage which lists all available views.&quot;&quot;&quot;\n    tableau_view_extractor = tableau.ExtractTableauView()\n    xml = tableau_view_extractor.initialize_tableau_request()\n    token = tableau_view_extractor.get_token(xml)\n    site = tableau_view_extractor.get_site(xml)\n    views = tableau_view_extractor.list_views(site, xml, token)\n    return render_template(\n        'index.html',\n        title=&quot;Here are your views.&quot;,\n        template=&quot;home-template&quot;,\n        views=views,\n        token=token,\n        xml=xml,\n        site=site\n    )\n\n\n@home_blueprint.route('/view', methods=['GET', 'POST'])\ndef view():\n    &quot;&quot;&quot;Displays a preview of a selected view.&quot;&quot;&quot;\n    site = request.args.get('site')\n    xml = request.args.get('xml')\n    view = request.args.get('view')\n    token = request.args.get('token')\n    tableau_view_extractor = tableau.ExtractTableauView()\n    view_df = tableau_view_extractor.get_view(site, xml, view, token)\n    view_df.to_csv('application/static/data/view.csv')\n    return render_template(\n        'view.html',\n        title='Your View',\n        template=&quot;home-template&quot;,\n        view=view,\n        token=token,\n        xml=xml,\n        site=site,\n        view_df=Markup(view_df.to_html(index=False))\n    )\n\n\n@home_blueprint.route('/export', methods=['GET', 'POST'])\ndef export():\n    &quot;&quot;&quot;Exports view to external database.&quot;&quot;&quot;\n    view_df = pd.read_csv('application/static/data/view.csv')\n    view_df.to_sql(name='temp', con=database.engine, if_exists='replace', chunksize=50, index=True)\n    return render_template(\n        'export.html',\n        title='Success!',\n        template=&quot;success-template&quot;,\n    )\n</code></pre>\n<p>We only have 3 pages to our application. They include our list of views, a preview of a single view, and a success page for when said view is exported. This is all core Flask logic.</p><h2 id=\"putting-it-on-display\">Putting it On Display</h2><p>We build our pages dynamically based on the values we pass our Jinja templates. The homepage utilizes some nested loops to list the views we returned from <code>tableau.py</code>, and also makes use of query strings to pass values on to other templates.</p><pre><code class=\"language-html\">{% extends &quot;layout.html&quot; %}\n\n{% block content %}\n&lt;div class=&quot;extended-container {{template}}&quot;&gt;\n  &lt;div class=&quot;container&quot;&gt;\n    &lt;div class=&quot;row&quot;&gt;\n      &lt;div class=&quot;col s12&quot;&gt;\n        &lt;h1&gt;{{title}}&lt;/h1&gt;\n      &lt;/div&gt;\n      &lt;div class=&quot;col s12 flex-container&quot;&gt;\n        {% for view in views %}\n        &lt;div class=&quot;download&quot;&gt;\n          &lt;a href=&quot;{{ url_for('home.view') }}?token={{token}}&amp;site={{site}}&amp;view={{view.id}}&amp;xml={{xml}}&quot;&gt;\n            &lt;ul&gt;\n              {% for key, value in view.items() %}\n              &lt;li&gt;&lt;span class=&quot;key {{key}}&quot;&gt;{{key}}&lt;/span&gt; {{ value }}&lt;/li&gt;\n              {% endfor %}\n            &lt;/ul&gt;\n          &lt;/a&gt;\n        &lt;/div&gt;\n        {% endfor %}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  {% endblock %}\n</code></pre>\n<p>Moving on: our humble <code>view.html</code> page has two purposes: display the selected view, and export it in the name of justice.</p><pre><code class=\"language-html\">{% extends &quot;layout.html&quot; %}\n\n{% block content %}\n&lt;div class=&quot;extended-container {{template}}&quot;&gt;\n  &lt;div class=&quot;container&quot;&gt;\n    &lt;div class=&quot;row&quot;&gt;\n      &lt;div class=&quot;col s12&quot;&gt;\n        &lt;h1&gt;{{title}}&lt;/h1&gt;\n        &lt;a href=&quot;{{ url_for('home.export') }}&quot; class=&quot;export&quot;&gt;&lt;i class=&quot;far fa-file-export&quot;&gt;&lt;/i&gt;&lt;/a&gt;\n        {{view_df}}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  {% endblock %}\n</code></pre>\n<h2 id=\"the-war-is-not-over\">The War is Not Over</h2><p>This repository is open to the public and can be found <a href=\"https://github.com/toddbirchard/tableau-extraction\">here</a>. There are still crusades left ahead of us: for instance, building out this interface to accept credentials via login as opposed to a config file, and the scheduling of view exports, as opposed to on-demand.</p><p>Where we go from here depends on what we the people decide. For all I know, I could be shouting to an empty room here (I'm almost positive anybody who pays for enterprise software prefers the blind eye of denial). If the opposite holds true, I dare say the revolution is only getting started.</p>","url":"https://hackersandslackers.com/hostile-extraction-of-tableau-server-data/","uuid":"23914fde-b90e-4496-9a7d-56d6ae3765d9","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c3fc99b89c81d4ccc3f64b1"}},{"node":{"id":"Ghost__Post__5c36e03d797a4f6f1db68dd3","title":"Lynx Roundup, January 17th","slug":"lynx-roundup-january-17th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/136@2x.jpg","excerpt":"When to built a distributed system!  A cool package to validate Pandas dataframes!  Mike Bostock (the D3 guy) introduces the Comma Separated Tree! ","custom_excerpt":"When to built a distributed system!  A cool package to validate Pandas dataframes!  Mike Bostock (the D3 guy) introduces the Comma Separated Tree! ","created_at_pretty":"10 January, 2019","published_at_pretty":"17 January, 2019","updated_at_pretty":"17 January, 2019","created_at":"2019-01-10T01:03:41.000-05:00","published_at":"2019-01-17T07:00:00.000-05:00","updated_at":"2019-01-17T07:00:00.000-05:00","meta_title":"Lynx Roundup, January 17th | Hackers and Slackers","meta_description":"When to built a distributed system!  A cool package to validate Pandas dataframes!  Mike Bostock (the D3 guy) introduces the Comma Separated Tree! ","og_description":"When to built a distributed system!  A cool package to validate Pandas dataframes!  Mike Bostock (the D3 guy) introduces the Comma Separated Tree! ","og_image":"https://hackersandslackers.com/content/images/lynx/136@2x.jpg","og_title":"Lynx Roundup, January 17th","twitter_description":"When to built a distributed system!  A cool package to validate Pandas dataframes!  Mike Bostock (the D3 guy) introduces the Comma Separated Tree! ","twitter_image":"https://hackersandslackers.com/content/images/lynx/136@2x.jpg","twitter_title":"Lynx Roundup, January 17th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://llis.nasa.gov/lesson/1956\n\nhttps://beta.observablehq.com/@mbostock/comma-separated-tree\n\nhttps://medium.freecodecamp.org/distributed-systems-when-you-should-build-them-and-how-to-scale-a-step-by-step-guide-37e76a177218\n\nhttps://twitter.com/math_rachel/status/1069719443239038976\n\nhttps://cosmicbboy.github.io/2018/12/28/validating-pandas-dataframes.html\n\nhttps://thenextweb.com/dd/2019/01/05/github-now-gives-free-users-unlimited-private-repositories/\n\nhttps://twitter.com/ivomagi/status/1067527108518383622","html":"<p></p><p><a href=\"https://llis.nasa.gov/lesson/1956\">https://llis.nasa.gov/lesson/1956</a></p><p><a href=\"https://beta.observablehq.com/@mbostock/comma-separated-tree\">https://beta.observablehq.com/@mbostock/comma-separated-tree</a></p><p><a href=\"https://medium.freecodecamp.org/distributed-systems-when-you-should-build-them-and-how-to-scale-a-step-by-step-guide-37e76a177218\">https://medium.freecodecamp.org/distributed-systems-when-you-should-build-them-and-how-to-scale-a-step-by-step-guide-37e76a177218</a></p><p><a href=\"https://twitter.com/math_rachel/status/1069719443239038976\">https://twitter.com/math_rachel/status/1069719443239038976</a></p><p><a href=\"https://cosmicbboy.github.io/2018/12/28/validating-pandas-dataframes.html\">https://cosmicbboy.github.io/2018/12/28/validating-pandas-dataframes.html</a></p><p><a href=\"https://thenextweb.com/dd/2019/01/05/github-now-gives-free-users-unlimited-private-repositories/\">https://thenextweb.com/dd/2019/01/05/github-now-gives-free-users-unlimited-private-repositories/</a></p><p><a href=\"https://twitter.com/ivomagi/status/1067527108518383622\">https://twitter.com/ivomagi/status/1067527108518383622</a></p>","url":"https://hackersandslackers.com/lynx-roundup-january-17th/","uuid":"46b8347f-f2e0-4f5a-80f3-832ff00c91fa","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5c36e03d797a4f6f1db68dd3"}},{"node":{"id":"Ghost__Post__5c36dfce797a4f6f1db68dce","title":"Lynx Roundup, January 16th","slug":"lynx-roundup-january-16th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/138@2x.jpg","excerpt":"2018 in Neuroscience!  Modeling radar and electronic warfare!  Awesome visual stats tutorial!","custom_excerpt":"2018 in Neuroscience!  Modeling radar and electronic warfare!  Awesome visual stats tutorial!","created_at_pretty":"10 January, 2019","published_at_pretty":"16 January, 2019","updated_at_pretty":"16 January, 2019","created_at":"2019-01-10T01:01:50.000-05:00","published_at":"2019-01-16T07:00:00.000-05:00","updated_at":"2019-01-16T07:00:00.000-05:00","meta_title":"Lynx Roundup, January 16th | Hackers and Slackers","meta_description":"2018 in Neuroscience!  Modeling radar and electronic warfare!  Awesome visual stats tutorial!","og_description":"2018 in Neuroscience!  Modeling radar and electronic warfare!  Awesome visual stats tutorial!","og_image":"https://hackersandslackers.com/content/images/lynx/138@2x.jpg","og_title":"Lynx Roundup, January 16th","twitter_description":"2018 in Neuroscience!  Modeling radar and electronic warfare!  Awesome visual stats tutorial!","twitter_image":"https://hackersandslackers.com/content/images/lynx/138@2x.jpg","twitter_title":"Lynx Roundup, January 16th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://medium.com/the-spike/2018-a-mildly-muddled-review-of-the-year-in-neuroscience-de0d9f15fc30\n\nhttps://en.wikipedia.org/wiki/McNamara_fallacy\n\nhttps://www.theatlantic.com/science/archive/2018/10/scholars-shouldnt-fear-dumbing-down-public/573979/\n\nhttp://nautil.us/issue/68/context/its-the-end-of-the-gene-as-we-know-it\n\nhttp://mil-embedded.com/articles/radar-and-electronic-warfare-system-modeling/\n\nhttps://seeing-theory.brown.edu/index.html\n\nhttps://gizmodo.com/the-godfather-of-deep-learning-on-why-we-need-to-ensure-1831239688","html":"<p></p><p><a href=\"https://medium.com/the-spike/2018-a-mildly-muddled-review-of-the-year-in-neuroscience-de0d9f15fc30\">https://medium.com/the-spike/2018-a-mildly-muddled-review-of-the-year-in-neuroscience-de0d9f15fc30</a></p><p><a href=\"https://en.wikipedia.org/wiki/McNamara_fallacy\">https://en.wikipedia.org/wiki/McNamara_fallacy</a></p><p><a href=\"https://www.theatlantic.com/science/archive/2018/10/scholars-shouldnt-fear-dumbing-down-public/573979/\">https://www.theatlantic.com/science/archive/2018/10/scholars-shouldnt-fear-dumbing-down-public/573979/</a></p><p><a href=\"http://nautil.us/issue/68/context/its-the-end-of-the-gene-as-we-know-it\">http://nautil.us/issue/68/context/its-the-end-of-the-gene-as-we-know-it</a></p><p><a href=\"http://mil-embedded.com/articles/radar-and-electronic-warfare-system-modeling/\">http://mil-embedded.com/articles/radar-and-electronic-warfare-system-modeling/</a></p><p><a href=\"https://seeing-theory.brown.edu/index.html\">https://seeing-theory.brown.edu/index.html</a></p><p><a href=\"https://gizmodo.com/the-godfather-of-deep-learning-on-why-we-need-to-ensure-1831239688\">https://gizmodo.com/the-godfather-of-deep-learning-on-why-we-need-to-ensure-1831239688</a></p>","url":"https://hackersandslackers.com/lynx-roundup-january-16th/","uuid":"0c178a23-269d-4acd-83a4-0f20c84b563a","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5c36dfce797a4f6f1db68dce"}},{"node":{"id":"Ghost__Post__5c3d0b441719dc6b38ee53b6","title":"Psycopg2: PostgreSQL & Python the Old Fashioned Way","slug":"psycopg2-postgres-python-the-old-fashioned-way","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/02/psycopg2.jpg","excerpt":"Manage PostgreSQL database interactions in Python with the Psycopg2 library.","custom_excerpt":"Manage PostgreSQL database interactions in Python with the Psycopg2 library.","created_at_pretty":"14 January, 2019","published_at_pretty":"15 January, 2019","updated_at_pretty":"28 March, 2019","created_at":"2019-01-14T17:20:52.000-05:00","published_at":"2019-01-15T15:57:34.000-05:00","updated_at":"2019-03-28T14:46:14.000-04:00","meta_title":"Psycopg2: PostgreSQL & Python the Old Way | Hackers and Slackers","meta_description":"Manage PostgreSQL database interactions in Python with the Psycopg2 library.","og_description":"Manage PostgreSQL database interactions in Python with the Psycopg2 library.","og_image":"https://hackersandslackers.com/content/images/2019/02/psycopg2.jpg","og_title":"Psycopg2: PostgreSQL & Python the Old Fashioned Way","twitter_description":"Manage PostgreSQL database interactions in Python with the Psycopg2 library.","twitter_image":"https://hackersandslackers.com/content/images/2019/02/psycopg2.jpg","twitter_title":"Psycopg2: PostgreSQL & Python the Old Fashioned Way","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"PostgreSQL","slug":"postgresql","description":"Our preferred relational database of choice which deserves more love. Learn the advantages that PostgreSQL provides over closed-source competitors.","feature_image":null,"meta_description":"Our preferred relational database of choice which deserves more love. Learn the advantages that PostgreSQL provides over closed-source competitors.","meta_title":"Working with PostgreSQL | Hackers and Slackers","visibility":"public"},"tags":[{"name":"PostgreSQL","slug":"postgresql","description":"Our preferred relational database of choice which deserves more love. Learn the advantages that PostgreSQL provides over closed-source competitors.","feature_image":null,"meta_description":"Our preferred relational database of choice which deserves more love. Learn the advantages that PostgreSQL provides over closed-source competitors.","meta_title":"Working with PostgreSQL | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"SQL","slug":"sql","description":"Configure relational databases, brush up on your query language syntax, or find third-party services to interact with your data.","feature_image":"https://res-1.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/sql-tag.jpg","meta_description":"Configure relational databases, brush up on your query language syntax, or find third-party services to interact with your data.","meta_title":"Working with SQL | Hackers and Slackers","visibility":"public"},{"name":"Data Engineering","slug":"dataengineering","description":"The systematic collection and transformation of data via the creation of tools and pipelines.","feature_image":null,"meta_description":null,"meta_title":"Data Engineering | Hackers and Slackers","visibility":"public"}],"plaintext":"Last time we met, we joyfully shared a little tirade\n[https://hackersandslackers.com/pythonic-database-management-with-sqlalchemy/] \nabout missing out on functionality provided to us by libraries such as \nSQLAlchemy, and the advantages of interacting with databases where ORMs are\ninvolved. I stand by that sentiment, but I’ll now directly contradict myself by\nsharing some tips on using vanilla Psycopg2  to interact with databases. \n\nWe never know when we’ll be stranded on a desert island without access to\nSQLAlchemy, but a lonesome Psycopg2 washes up on shore. Either that or perhaps\nyou’re part of a development team stuck in a certain way of doing things which\ndoesn't include utilize SQLAlchemy. Whatever the situation may be, we’re here\nfor you. \n\nThe Quintessential Boilerplate\nNo matter the type of database or the library, the boilerplate code for\nconnecting to databases remains mostly the same. To some extent, this even holds\ntrue across programming languages. Let's look at a barebones example while\nignoring the library at hand:\n\nimport SomeDatabaseLibrary\n\nclass Database:\n    \"\"\"A Generic Database class.\"\"\"\n\n    def __init__(self, config):\n        self.username = config.database('USERNAME')\n        self.password = config.database('PASSWORD')\n        self.host = config.database('HOST')\n        self.port = config.database('PORT')\n        self.db = config.database('DB')\n\n    def run_query(self, query):\n            conn = None\n            records = []\n            try:\n                conn = SomeDatabaseLibrary.connect(host=self.host, \n                                                user=self.username, \n                                                password=self.password,\n                                                port=self.port, \n                                                dbname=self.db)\n                with conn.cursor() as cur:\n                    cur.execute(query)\n                    result = cur.fetchall()\n                    for row in result:\n                        records.append(row)\n                    cur.close()\n                    return records\n            except (Exception, SomeDatabaseLibrary.DatabaseError) as error:\n                print(error)\n            finally:\n                if conn is not None:\n                    conn.close()\n                    print('Database connection closed.')\n\n\nIn the above example, we could swap SomeDatabaseLibrary  with either Psycopg2 \nor PyMySQL  just the same. If we compare this to our example with PyMySQL\n[https://hackersandslackers.com/using-pymysql/], it's easy to see that the\nbasics of utilizing connections, cursors, and the methods to close them\ntranscend libraries. If you know the basics of one, you know them all.\n\nIf you'd like to keep your connection logic separate (as I do), we can cleanly\nbreak the logic of handling connections out to a separate function. This time,\nwe'll replace SomeDatabaseLibrary  with Psycopg2  to produce some working code:\n\nimport psycopg2\n\nclass Database:\n    \"\"\"A Generic Database class.\"\"\"\n\n    def __init__(self, config):\n        self.username = config.database('USERNAME')\n        self.password = config.database('PASSWORD')\n        self.host = config.database('HOST')\n        self.port = config.database('PORT')\n        self.db = config.database('DB')\n        self.conn = None\n        \n    def open_connection():\n        \"\"\"Encapsulated connection management logic.\"\"\"\n        try:\n            if(self.conn is None):\n                self.conn = psycopg2.connect(host=self.host, \n                                       user=self.username, \n                                       password=self.password,\n                                       port=self.port, \n                                       dbname=self.db)\n            elif (not conn.open):\n                self.conn = psycopg2.connect(host=self.host, \n                                       user=self.username, \n                                       password=self.password,\n                                       port=self.port, \n                                       dbname=self.db)  \n        except:\n            logger.error(\"ERROR: Could not connect to Postgres.\")\n            sys.exit()\n\n    def run_query(self, query):\n            records = []\n            try:\n                open_connection()\n                with self.conn.cursor() as cur:\n                    cur.execute(query)\n                    result = cur.fetchall()\n                    for row in result:\n                        records.append(row)\n                    cur.close()\n                    return records\n            except (Exception, psycopg2.DatabaseError) as error:\n                print(error)\n            finally:\n                if conn is not None:\n                    conn.close()\n                    print('Database connection closed.')\n\n\nPsycopg2 Extras\nPsycopg2 has many useful features via a library called psycopg2.extras\n[http://initd.org/psycopg/docs/extras.html]. My personal favorite of these\nextras is the DictCursor, which renders the rows being returned by our query as\nPython dictionaries  as opposed to lists. \n\nUsing DictCursor to Return More Useful Results\nWhen using a DictCursor, the key  is always the column name, and the value is\nthe value of that column in that particular row.\n\nTo use extras, we import psycopg2.extras.\n\nThen, we turn our attention to the following line:\n\nself.conn.cursor() as cur:\n\n\nWithin cursor, we can pass an attribute named cursor_factory   and set it as\nsuch:\n\nconn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cur:\n\n\nWhile our cursor is open, all rows returned by the query will be returned as\ndictionaries. For example, the row  in the above example will be returned as a\ndict. To demonstrate, here's what a query on this exact post  you're reading now\nlooks like when returned as a Dict:\n\n{\n    title: \"Psycopg2: Postgres & Python the Old Fashioned Way\",\n    slug: \"psycopg2-postgres-python-the-old-fashioned-way\",\n    feature_image: \"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/psycopg2.jpg\",\n    status: \"draft\",\n    created_at: \"2019-01-14 22:20:52\",\n    custom_excerpt: \"Managing Postgres Database connections with Psycopg2\"\n}\n\n\nCompare this to what we would've seen had we not used DictCursor:\n\n[\"Psycopg2: Postgres & Python the Old Fashioned Way\",\n\"psycopg2-postgres-python-the-old-fashioned-way\",\n\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/psycopg2.jpg\",\n\"draft\",\n\"2019-01-14 22:20:52\",\n\"Managing Postgres Database connections with Psycopg2\"]\n\n\nYes, it's a list, and thereby much less useful. Even from a readability\nstandpoint, I (the human user) have no idea what these values represent unless\ncomparing them to the table schema. Even worse would be compiling CSVs or even\nPandas Dataframes this way. When building a table made of lists, you set your\nheaders and hope that every row to come matches the number of header columns\none-to-one. Otherwise, it's entirely unclear as to which value belongs to which\ncolumn.\n\nOther Psycopg2 Extras\nThere are plenty more Psycopg2 extras where that came from; it's mostly up to\nyou to decide which are worth your while.\n\nFor example, another extra which might be of interest could be \npsycopg2.extras.LoggingConnection, useful for debugging connection statuses and\nerrors as you work through your program.\n\nThere's even a JSON Adaptation  extra, which provides support for leveraging\nJSON data in building queries:\n\ncur.execute(\"insert into mytable (jsondata) values (%s)\",\n    [Json({'a': 100})])\n\n\nI don't dwell too deep in Psycopg2 extras myself, but if you see any Godlike\nextras I'm missing, feel free to call them out in the COMMENTS BELOW!  (Hah!\nI've always wanted to say that).\n\nA Few More Fundamental Useful Things\nSomething worth visiting is the ability to upload CSVs into Postgres to create\ntables. We can accomplish this via the built-in method copy_expert.\n\nFrom CSV to Postgres Table\nTo save a CSV to Postgres table, we need to begin with a basic SQL query saved\nin our project as a variable:\n\nCOPY %s FROM STDIN WITH\n                    CSV\n                    HEADER\n                    DELIMITER AS ','\n\n\nAs should be familiar, %s  represents a value we can pass in later. With this\nraw query, we're only missing two more values:\n\n * The path of our CSV file to be uploaded\n * The name of the table we'd like to upload to in Postgres\n\nCheck out how we use copy_expert  here to put it all together:\n\nsql = \"COPY %s FROM STDIN WITH CSVHEADER DELIMITER AS ','\"\nfile = open('files/myfile.csv', \"r\")\ntable = 'my_postgres_table'\nwith conn.cursor() as cur:\n    cur.execute(\"truncate \" + table + \";\")\n    cur.copy_expert(sql=sql % table, file=file)\n    conn.commit()\n    cur.close()\n    conn.close()\n\n\nNotice that I opt to truncate the existing table before uploading the new data,\nas seen by cur.execute(\"truncate \" + table + \";\"). Without doing this, we would\nbe uploading the same CSV to the same table forever, creating duplicate rows\nover and over.\n\nWhat if The Table Doesn't Exist?\nUgh, of course  this would come up. The truth is (to the best of my knowledge),\nthere aren't many native things Psycopg2 has to offer to make this process easy.\n \n\nRecall that creating a table has a syntax similar to this:\n\nCREATE TABLE `recommended_reads` (\n  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,\n  `title` varchar(150) NOT NULL,\n  `content` text,\n  `url` varchar(150) NOT NULL,\n  `created` int(11) NOT NULL,\n  `unique_ID` int(11) NOT NULL,\n  `image` varchar(150) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `id` (`id`),\n  UNIQUE KEY `uniqueid` (`unique_ID`) USING BTREE\n)\n\n\nIt's not impossible to build this string yourself in Python. It just entails a\nlot of iterating over whichever dynamic data structure you have coming through,\ndetermining the correct data type per column, and then the unavoidable task of\nsetting your Primary  and Unique  keys if applicable. This is where my patience\nends and knee-jerk reaction of \"would be easier in SQLAlchemy\" kicks in. Hey,\nit's possible! I just don't feel like writing about it. :).\n\nGodspeed to You, Brave Warrior\nFor those about to Psycopg2, we salute you. That is unless the choice is\nself-inflicted. In that case, perhaps it's best we don't work together any time\nsoon.","html":"<p>Last time we met, we joyfully <a href=\"https://hackersandslackers.com/pythonic-database-management-with-sqlalchemy/\">shared a little tirade</a> about missing out on functionality provided to us by libraries such as <strong>SQLAlchemy</strong>, and the advantages of interacting with databases where ORMs are involved. I stand by that sentiment, but I’ll now directly contradict myself by sharing some tips on using vanilla <strong>Psycopg2</strong> to interact with databases. </p><p>We never know when we’ll be stranded on a desert island without access to SQLAlchemy, but a lonesome Psycopg2 washes up on shore. Either that or perhaps you’re part of a development team stuck in a certain way of doing things which doesn't include utilize SQLAlchemy. Whatever the situation may be, we’re here for you. </p><h2 id=\"the-quintessential-boilerplate\">The Quintessential Boilerplate</h2><p>No matter the type of database or the library, the boilerplate code for connecting to databases remains mostly the same. To some extent, this even holds true across programming languages. Let's look at a barebones example while ignoring the library at hand:</p><pre><code class=\"language-python\">import SomeDatabaseLibrary\n\nclass Database:\n    &quot;&quot;&quot;A Generic Database class.&quot;&quot;&quot;\n\n    def __init__(self, config):\n        self.username = config.database('USERNAME')\n        self.password = config.database('PASSWORD')\n        self.host = config.database('HOST')\n        self.port = config.database('PORT')\n        self.db = config.database('DB')\n\n    def run_query(self, query):\n            conn = None\n            records = []\n            try:\n                conn = SomeDatabaseLibrary.connect(host=self.host, \n                                                user=self.username, \n                                                password=self.password,\n                                                port=self.port, \n                                                dbname=self.db)\n                with conn.cursor() as cur:\n                    cur.execute(query)\n                    result = cur.fetchall()\n                    for row in result:\n                        records.append(row)\n                    cur.close()\n                    return records\n            except (Exception, SomeDatabaseLibrary.DatabaseError) as error:\n                print(error)\n            finally:\n                if conn is not None:\n                    conn.close()\n                    print('Database connection closed.')\n</code></pre>\n<p>In the above example, we could swap <code>SomeDatabaseLibrary</code> with either <code>Psycopg2</code> or <code>PyMySQL</code> just the same. If we compare this to <a href=\"https://hackersandslackers.com/using-pymysql/\">our example with PyMySQL</a>, it's easy to see that the basics of utilizing <strong>connections</strong>, <strong>cursors</strong>, and the methods to close them transcend libraries. If you know the basics of one, you know them all.</p><p>If you'd like to keep your connection logic separate (as I do), we can cleanly break the logic of handling connections out to a separate function. This time, we'll replace <code>SomeDatabaseLibrary</code> with <code>Psycopg2</code> to produce some working code:</p><pre><code class=\"language-python\">import psycopg2\n\nclass Database:\n    &quot;&quot;&quot;A Generic Database class.&quot;&quot;&quot;\n\n    def __init__(self, config):\n        self.username = config.database('USERNAME')\n        self.password = config.database('PASSWORD')\n        self.host = config.database('HOST')\n        self.port = config.database('PORT')\n        self.db = config.database('DB')\n        self.conn = None\n        \n    def open_connection():\n        &quot;&quot;&quot;Encapsulated connection management logic.&quot;&quot;&quot;\n        try:\n            if(self.conn is None):\n                self.conn = psycopg2.connect(host=self.host, \n                                       user=self.username, \n                                       password=self.password,\n                                       port=self.port, \n                                       dbname=self.db)\n            elif (not conn.open):\n                self.conn = psycopg2.connect(host=self.host, \n                                       user=self.username, \n                                       password=self.password,\n                                       port=self.port, \n                                       dbname=self.db)  \n        except:\n            logger.error(&quot;ERROR: Could not connect to Postgres.&quot;)\n            sys.exit()\n\n    def run_query(self, query):\n            records = []\n            try:\n                open_connection()\n                with self.conn.cursor() as cur:\n                    cur.execute(query)\n                    result = cur.fetchall()\n                    for row in result:\n                        records.append(row)\n                    cur.close()\n                    return records\n            except (Exception, psycopg2.DatabaseError) as error:\n                print(error)\n            finally:\n                if conn is not None:\n                    conn.close()\n                    print('Database connection closed.')\n</code></pre>\n<h2 id=\"psycopg2-extras\">Psycopg2 Extras</h2><p>Psycopg2 has many useful features via a library called <a href=\"http://initd.org/psycopg/docs/extras.html\">psycopg2.extras</a>. My personal favorite of these extras is the <code>DictCursor</code>, which renders the rows being returned by our query as Python <em>dictionaries</em> as opposed to <em>lists. </em></p><h3 id=\"using-dictcursor-to-return-more-useful-results\">Using DictCursor to Return More Useful Results</h3><p>When using a DictCursor, the <em>key</em> is always the column name, and the <em>value </em>is the value of that column in that particular row.</p><p>To use extras, we <code>import psycopg2.extras</code>.</p><p>Then, we turn our attention to the following line:</p><pre><code class=\"language-python\">self.conn.cursor() as cur:\n</code></pre>\n<p>Within <code>cursor</code>, we can pass an attribute named <code>cursor_factory</code>  and set it as such:</p><pre><code class=\"language-python\">conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cur:\n</code></pre>\n<p>While our cursor is open, all rows returned by the query will be returned as dictionaries. For example, the <strong>row</strong> in the above example will be returned as a dict. To demonstrate, here's what a query on this <em>exact post</em> you're reading now looks like when returned as a Dict:</p><pre><code class=\"language-python\">{\n    title: &quot;Psycopg2: Postgres &amp; Python the Old Fashioned Way&quot;,\n    slug: &quot;psycopg2-postgres-python-the-old-fashioned-way&quot;,\n    feature_image: &quot;https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/psycopg2.jpg&quot;,\n    status: &quot;draft&quot;,\n    created_at: &quot;2019-01-14 22:20:52&quot;,\n    custom_excerpt: &quot;Managing Postgres Database connections with Psycopg2&quot;\n}\n</code></pre>\n<p>Compare this to what we would've seen had we not used <code>DictCursor</code>:</p><pre><code class=\"language-python\">[&quot;Psycopg2: Postgres &amp; Python the Old Fashioned Way&quot;,\n&quot;psycopg2-postgres-python-the-old-fashioned-way&quot;,\n&quot;https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/psycopg2.jpg&quot;,\n&quot;draft&quot;,\n&quot;2019-01-14 22:20:52&quot;,\n&quot;Managing Postgres Database connections with Psycopg2&quot;]\n</code></pre>\n<p>Yes, it's a list, and thereby much less useful. Even from a readability standpoint, I (the human user) have no idea what these values represent unless comparing them to the table schema. Even worse would be compiling CSVs or even Pandas Dataframes this way. When building a table made of lists, you set your headers and hope that every row to come matches the number of header columns one-to-one. Otherwise, it's entirely unclear as to which value belongs to which column.</p><h3 id=\"other-psycopg2-extras\">Other Psycopg2 Extras</h3><p>There are plenty more Psycopg2 extras where that came from; it's mostly up to you to decide which are worth your while.</p><p>For example, another extra which might be of interest could be <code>psycopg2.extras.LoggingConnection</code>, useful for debugging connection statuses and errors as you work through your program.</p><p>There's even a <strong>JSON Adaptation</strong> extra, which provides support for leveraging JSON data in building queries:</p><pre><code class=\"language-python\">cur.execute(&quot;insert into mytable (jsondata) values (%s)&quot;,\n    [Json({'a': 100})])\n</code></pre>\n<p>I don't dwell too deep in Psycopg2 extras myself, but if you see any Godlike extras I'm missing, feel free to call them out in the <strong><em>COMMENTS BELOW!</em></strong> (Hah! I've always wanted to say that).</p><h2 id=\"a-few-more-fundamental-useful-things\">A Few More Fundamental Useful Things</h2><p>Something worth visiting is the ability to upload CSVs into Postgres to create tables. We can accomplish this via the built-in method <code>copy_expert</code>.</p><h3 id=\"from-csv-to-postgres-table\">From CSV to Postgres Table</h3><p>To save a CSV to Postgres table, we need to begin with a basic SQL query saved in our project as a variable:</p><pre><code class=\"language-sql\">COPY %s FROM STDIN WITH\n                    CSV\n                    HEADER\n                    DELIMITER AS ','\n</code></pre>\n<p>As should be familiar, <code>%s</code> represents a value we can pass in later. With this raw query, we're only missing two more values:</p><ul><li>The path of our CSV file to be uploaded</li><li>The name of the table we'd like to upload to in Postgres</li></ul><p>Check out how we use <code>copy_expert</code> here to put it all together:</p><pre><code class=\"language-python\">sql = &quot;COPY %s FROM STDIN WITH CSVHEADER DELIMITER AS ','&quot;\nfile = open('files/myfile.csv', &quot;r&quot;)\ntable = 'my_postgres_table'\nwith conn.cursor() as cur:\n    cur.execute(&quot;truncate &quot; + table + &quot;;&quot;)\n    cur.copy_expert(sql=sql % table, file=file)\n    conn.commit()\n    cur.close()\n    conn.close()\n</code></pre>\n<p>Notice that I opt to truncate the existing table before uploading the new data, as seen by <code>cur.execute(\"truncate \" + table + \";\")</code>. Without doing this, we would be uploading the same CSV to the same table forever, creating duplicate rows over and over.</p><h3 id=\"what-if-the-table-doesn-t-exist\">What if The Table Doesn't Exist?</h3><p>Ugh, of <em>course</em> this would come up. The truth is (to the best of my knowledge), there aren't many native things Psycopg2 has to offer to make this process easy. </p><p>Recall that creating a table has a syntax similar to this:</p><pre><code class=\"language-sql\">CREATE TABLE `recommended_reads` (\n  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,\n  `title` varchar(150) NOT NULL,\n  `content` text,\n  `url` varchar(150) NOT NULL,\n  `created` int(11) NOT NULL,\n  `unique_ID` int(11) NOT NULL,\n  `image` varchar(150) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `id` (`id`),\n  UNIQUE KEY `uniqueid` (`unique_ID`) USING BTREE\n)\n</code></pre>\n<p>It's not impossible to build this string yourself in Python. It just entails a lot of iterating over whichever dynamic data structure you have coming through, determining the correct data type per column, and then the unavoidable task of setting your <strong>Primary</strong> and <strong>Unique</strong> keys if applicable. This is where my patience ends and knee-jerk reaction of \"would be easier in SQLAlchemy\" kicks in. Hey, it's possible! I just don't feel like writing about it. :).</p><h2 id=\"godspeed-to-you-brave-warrior\">Godspeed to You, Brave Warrior</h2><p>For those about to Psycopg2, we salute you. That is unless the choice is self-inflicted. In that case, perhaps it's best we don't work together any time soon.</p>","url":"https://hackersandslackers.com/psycopg2-postgres-python-the-old-fashioned-way/","uuid":"f07736c5-c167-4fe9-b932-1b6b4d95e3ff","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c3d0b441719dc6b38ee53b6"}},{"node":{"id":"Ghost__Post__5c36df6f797a4f6f1db68dc9","title":"Lynx Roundup, January 15th","slug":"lynx-roundup-january-15th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/137@2x.jpg","excerpt":"Econometrics in R!  Future directions for Pandas!  Top Synthetic Biology moments of 2018!","custom_excerpt":"Econometrics in R!  Future directions for Pandas!  Top Synthetic Biology moments of 2018!","created_at_pretty":"10 January, 2019","published_at_pretty":"15 January, 2019","updated_at_pretty":"15 January, 2019","created_at":"2019-01-10T01:00:15.000-05:00","published_at":"2019-01-15T07:00:00.000-05:00","updated_at":"2019-01-15T07:00:00.000-05:00","meta_title":"Lynx Roundup, January 15th | Hackers and Slackers","meta_description":"Econometrics in R!  Future directions for Pandas!  Top Synthetic Biology moments of 2018!","og_description":"Econometrics in R!  Future directions for Pandas!  Top Synthetic Biology moments of 2018!","og_image":"https://hackersandslackers.com/content/images/lynx/137@2x.jpg","og_title":"Lynx Roundup, January 15th","twitter_description":"Econometrics in R!  Future directions for Pandas!  Top Synthetic Biology moments of 2018!","twitter_image":"https://hackersandslackers.com/content/images/lynx/137@2x.jpg","twitter_title":"Lynx Roundup, January 15th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.econometrics-with-r.org/\n\nhttps://dev.to/geshan/you-can-do-it-in-sql-stop-writing-extra-code-for-it-lok\n\nhttps://blockgeeks.com/guides/hyperledger-vs-ethereum/\n\nhttps://twistbioscience.com/company/blog/Top10MomentsinSyntheticBiology2018\n\nhttps://medium.com/@TeamCoworker/dos-and-don-ts-for-engaging-colleagues-and-supporters-on-a-workplace-issue-9835534a2491\n\nhttps://www.dataschool.io/future-of-pandas/\n\nhttps://github.com/alash3al/sqler","html":"<p></p><p><a href=\"https://www.econometrics-with-r.org/\">https://www.econometrics-with-r.org/</a></p><p><a href=\"https://dev.to/geshan/you-can-do-it-in-sql-stop-writing-extra-code-for-it-lok\">https://dev.to/geshan/you-can-do-it-in-sql-stop-writing-extra-code-for-it-lok</a></p><p><a href=\"https://blockgeeks.com/guides/hyperledger-vs-ethereum/\">https://blockgeeks.com/guides/hyperledger-vs-ethereum/</a></p><p><a href=\"https://twistbioscience.com/company/blog/Top10MomentsinSyntheticBiology2018\">https://twistbioscience.com/company/blog/Top10MomentsinSyntheticBiology2018</a></p><p><a href=\"https://medium.com/@TeamCoworker/dos-and-don-ts-for-engaging-colleagues-and-supporters-on-a-workplace-issue-9835534a2491\">https://medium.com/@TeamCoworker/dos-and-don-ts-for-engaging-colleagues-and-supporters-on-a-workplace-issue-9835534a2491</a></p><p><a href=\"https://www.dataschool.io/future-of-pandas/\">https://www.dataschool.io/future-of-pandas/</a></p><p><a href=\"https://github.com/alash3al/sqler\">https://github.com/alash3al/sqler</a></p>","url":"https://hackersandslackers.com/lynx-roundup-january-15th/","uuid":"ec8d5359-8bd2-44ef-b036-754af81fef2d","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5c36df6f797a4f6f1db68dc9"}},{"node":{"id":"Ghost__Post__5c36df0e797a4f6f1db68dc4","title":"Lynx Roundup, January 14th","slug":"lynx-roundup-january-14th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/135@2x.jpg","excerpt":"Demonstrating Convnets in NumPy!  Amoeba rocks the Traveling Salesman!  Two cool Jupyter posts!","custom_excerpt":"Demonstrating Convnets in NumPy!  Amoeba rocks the Traveling Salesman!  Two cool Jupyter posts!","created_at_pretty":"10 January, 2019","published_at_pretty":"14 January, 2019","updated_at_pretty":"14 January, 2019","created_at":"2019-01-10T00:58:38.000-05:00","published_at":"2019-01-14T07:00:00.000-05:00","updated_at":"2019-01-14T07:00:00.000-05:00","meta_title":"Lynx Roundup, January 14th | Hackers and Slackers","meta_description":"Demonstrating Convnets in NumPy!  Amoeba rocks the Traveling Salesman!  Two cool Jupyter posts!","og_description":"Demonstrating Convnets in NumPy!  Amoeba rocks the Traveling Salesman!  Two cool Jupyter posts!","og_image":"https://hackersandslackers.com/content/images/lynx/135@2x.jpg","og_title":"Lynx Roundup, January 14th","twitter_description":"Demonstrating Convnets in NumPy!  Amoeba rocks the Traveling Salesman!  Two cool Jupyter posts!","twitter_image":"https://hackersandslackers.com/content/images/lynx/135@2x.jpg","twitter_title":"Lynx Roundup, January 14th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://techcrunch.com/2019/01/07/robot-delivery-dogs-deployed-by-self-driving-cars-are-coming/\n\nhttps://hackernoon.com/convnet-from-scratch-just-lovely-numpy-forward-pass-part-1-6d3a0776f90a\n\nhttps://interestingengineering.com/amoeba-defeats-challenging-traveling-salesman-problem\n\nhttps://www.dataquest.io/blog/advanced-jupyter-notebooks-tutorial/\n\nhttp://mil-embedded.com/articles/ai-military-systems/\n\nhttps://github.com/guillaume-chevalier/How-to-Grow-Neat-Software-Architecture-out-of-Jupyter-Notebooks\n\nhttp://graphit-lang.org/","html":"<p></p><p><a href=\"https://techcrunch.com/2019/01/07/robot-delivery-dogs-deployed-by-self-driving-cars-are-coming/\">https://techcrunch.com/2019/01/07/robot-delivery-dogs-deployed-by-self-driving-cars-are-coming/</a></p><p><a href=\"https://hackernoon.com/convnet-from-scratch-just-lovely-numpy-forward-pass-part-1-6d3a0776f90a\">https://hackernoon.com/convnet-from-scratch-just-lovely-numpy-forward-pass-part-1-6d3a0776f90a</a></p><p><a href=\"https://interestingengineering.com/amoeba-defeats-challenging-traveling-salesman-problem\">https://interestingengineering.com/amoeba-defeats-challenging-traveling-salesman-problem</a></p><p><a href=\"https://www.dataquest.io/blog/advanced-jupyter-notebooks-tutorial/\">https://www.dataquest.io/blog/advanced-jupyter-notebooks-tutorial/</a></p><p><a href=\"http://mil-embedded.com/articles/ai-military-systems/\">http://mil-embedded.com/articles/ai-military-systems/</a></p><p><a href=\"https://github.com/guillaume-chevalier/How-to-Grow-Neat-Software-Architecture-out-of-Jupyter-Notebooks\">https://github.com/guillaume-chevalier/How-to-Grow-Neat-Software-Architecture-out-of-Jupyter-Notebooks</a></p><p><a href=\"http://graphit-lang.org/\">http://graphit-lang.org/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-january-14th/","uuid":"f7988cdf-7f1a-410c-8dbc-aa9e7e3440f0","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5c36df0e797a4f6f1db68dc4"}},{"node":{"id":"Ghost__Post__5c36debc797a4f6f1db68dbf","title":"Lynx Roundup, January 13th","slug":"lynx-roundup-january-13th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/134@2x.jpg","excerpt":"The neural net that knows when your cat wants to go out!  Cool old-timey graphs!  Collective intelligence with ants!","custom_excerpt":"The neural net that knows when your cat wants to go out!  Cool old-timey graphs!  Collective intelligence with ants!","created_at_pretty":"10 January, 2019","published_at_pretty":"13 January, 2019","updated_at_pretty":"13 January, 2019","created_at":"2019-01-10T00:57:16.000-05:00","published_at":"2019-01-13T07:00:00.000-05:00","updated_at":"2019-01-13T07:00:00.000-05:00","meta_title":"Lynx Roundup, January 13th | Hackers and Slackers","meta_description":"The neural net that knows when your cat wants to go out!  Cool old-timey graphs!  Collective intelligence with ants!","og_description":"The neural net that knows when your cat wants to go out!  Cool old-timey graphs!  Collective intelligence with ants!","og_image":"https://hackersandslackers.com/content/images/lynx/134@2x.jpg","og_title":"Lynx Roundup, January 13th","twitter_description":"The neural net that knows when your cat wants to go out!  Cool old-timey graphs!  Collective intelligence with ants!","twitter_image":"https://hackersandslackers.com/content/images/lynx/134@2x.jpg","twitter_title":"Lynx Roundup, January 13th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://hackaday.com/2018/12/21/neural-network-knows-when-cat-wants-to-go-outside/\n\nhttps://richardbrath.wordpress.com/2018/12/31/album-de-statistique-graphique/\n\nhttps://bair.berkeley.edu/blog/2018/12/12/rllib/\n\nhttps://twitter.com/SarahTaber_bww/status/1074864735143804928\n\nhttps://phys.org/news/2018-12-metabolic-machine.html\n\nhttps://www.npr.org/sections/health-shots/2018/12/21/678342879/scientists-find-a-brain-circuit-that-could-explain-seasonal-depression\n\nhttps://aeon.co/ideas/an-ant-colony-has-memories-that-its-individual-members-dont-have","html":"<p></p><p><a href=\"https://hackaday.com/2018/12/21/neural-network-knows-when-cat-wants-to-go-outside/\">https://hackaday.com/2018/12/21/neural-network-knows-when-cat-wants-to-go-outside/</a></p><p><a href=\"https://richardbrath.wordpress.com/2018/12/31/album-de-statistique-graphique/\">https://richardbrath.wordpress.com/2018/12/31/album-de-statistique-graphique/</a></p><p><a href=\"https://bair.berkeley.edu/blog/2018/12/12/rllib/\">https://bair.berkeley.edu/blog/2018/12/12/rllib/</a></p><p><a href=\"https://twitter.com/SarahTaber_bww/status/1074864735143804928\">https://twitter.com/SarahTaber_bww/status/1074864735143804928</a></p><p><a href=\"https://phys.org/news/2018-12-metabolic-machine.html\">https://phys.org/news/2018-12-metabolic-machine.html</a></p><p><a href=\"https://www.npr.org/sections/health-shots/2018/12/21/678342879/scientists-find-a-brain-circuit-that-could-explain-seasonal-depression\">https://www.npr.org/sections/health-shots/2018/12/21/678342879/scientists-find-a-brain-circuit-that-could-explain-seasonal-depression</a></p><p><a href=\"https://aeon.co/ideas/an-ant-colony-has-memories-that-its-individual-members-dont-have\">https://aeon.co/ideas/an-ant-colony-has-memories-that-its-individual-members-dont-have</a></p>","url":"https://hackersandslackers.com/lynx-roundup-january-13th/","uuid":"f431de1f-7982-4a13-b26c-d896a65236a9","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5c36debc797a4f6f1db68dbf"}}]}},"pageContext":{"pageNumber":7,"humanPageNumber":8,"skip":84,"limit":12,"numberOfPages":33,"previousPagePath":"/page/7","nextPagePath":"/page/9"}}