{"data":{"ghostAuthor":{"slug":"matt","name":"Matthew Alhonte","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","cover_image":"https://res-1.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/lynxcover_o.jpg","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","location":"Center of the Universe","website":null,"twitter":"@MattAlhonte","facebook":null},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736f0","title":"Lynx Roundup, September 5th","slug":"lynx-roundup-september-5th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx61@2x.jpg","excerpt":"Git tips!  Python tail call recursion!  Nested window functions in SQL!","custom_excerpt":"Git tips!  Python tail call recursion!  Nested window functions in SQL!","created_at_pretty":"05 September, 2018","published_at_pretty":"05 September, 2018","updated_at_pretty":"05 September, 2018","created_at":"2018-09-05T15:23:43.000-04:00","published_at":"2018-09-05T15:30:21.000-04:00","updated_at":"2018-09-05T15:30:21.000-04:00","meta_title":"Git tips!  Python tail call recursion!  Nested window functions in SQL! | Hackers And Slackers","meta_description":"Git tips!  Python tail call recursion!  Nested window functions in SQL!","og_description":"Git tips!  Python tail call recursion!  Nested window functions in SQL!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx61@2x.jpg","og_title":"Lynx Roundup, September 5th","twitter_description":"Git tips!  Python tail call recursion!  Nested window functions in SQL!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx61@2x.jpg","twitter_title":"Lynx Roundup, September 5th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://medium.freecodecamp.org/follow-these-simple-rules-and-youll-become-a-git-and-github-master-e1045057468f\n\n\n\nCurrying in calculus, PDEs, programming, and categories\n[https://www.johndcook.com/blog/2018/08/11/currying/]\n\nIn an effort to keep up my grueling regime of publishing at least one blog post\nper year, I’ve decided to write today about a neat little problem I ran across.\nThe problem is; how do you calculate the cumulative sum of a time series if\nthere are transactions that reset the count to 0?\n\nNaturally, there are ways to engineer around this problem without complex\nqueries doing the heavy lifting (recording the current balance along side your\ntransaction history, for example). However, if you occasionally find yourself\nbeing asked for a number crunch, half with the expectation of your response\nbeing:\n\n\n\n…it’s not a bad idea to keep this query in your back pocket.\n\nA Convoluted Example\nAlice decides to start a bank. Her engineers are clever and they decide that\nthey can save space in their transaction log by just reporting changes in the\nbalance. They keep the current balance in another table and decide if Grace the\nauditor comes around, they’ll just sum up all of the transactions in their log.\nGood job guys.\n\n\n\nBob is an exceptional client with good credit history. Grace takes a quick\nglance at his balance history and decides everything looks fine. As she leafs\nthrough the other records and pauses at Sybil’s balance history. It’s massive.\nThe problem is that Sybil’s been through a number of bankruptcies that should\nhave set her balance to 0. She breaks the news to Alice. You can imagine that\nAlice was not too happy.\n\n\n\nTo fix the problem, the engineers decide to introduce a new transaction that\nresets the balance to 0.\n\nThe Data Set\nIn order to satisfy Grace, we’ve got to come up with a balance history for both\nBob and Sybil using just transactions. Here’s our data set in Postgres SQL.\nWe’ll use text and integer columns along with small numbers to simplify the\nproblem.\n\n\nCREATE TABLE transactions (\n  id integer\n  ,account text\n  ,type text\n  ,amount integer\n);\n\nINSERT INTO transactions\nVALUES\n  (1, 'bob', 'deposit', 5)\n  ,(2, 'bob', 'withdrawal', -2)\n  ,(3, 'bob', 'deposit', 3)\n  ,(4, 'sybil', 'deposit', 5)\n  ,(5, 'sybil', 'withdrawal', -2)\n  ,(6, 'sybil', 'bankrupt', 0)\n  ,(7, 'sybil', 'deposit' , 3)\n  ,(8, 'sybil', 'deposit', 7)\n  ,(9, 'sybil', 'bankrupt', 0)\n  ,(10, 'sybil', 'deposit' , 5)\n;\n\n\nSimple Cumulative Sums\nOur first job is to calculate Bob’s balance history. This section is a review of\nbasic window functions. If you’re used to using them to create cumulative sums,\nfeel free to skip ahead. Here’s what we’re trying to produce:\n\n\n id | account |    type    | amount | sum\n----+---------+------------+--------+-----\n  1 | bob     | deposit    |      5 |   5\n  2 | bob     | withdrawal |     -2 |   3\n  3 | bob     | deposit    |      3 |   6\n\n\nA window function has two parts; the partition and the order. The partition\ndefines which columns are going to be grouped together in the window. The order\ndefines how to sort the rows in the window.\n\nIn the example above, we want to group transactions by their account. We then\nwant to order them by their ID. Now, when we use the Sum function, it will sum\nfrom the first transaction in the partition, to the current row:\n\n\nSELECT\n  id\n  ,account\n  ,type\n  ,amount\n  ,sum(amount) OVER account\nFROM transactions\nWHERE account = 'bob'\nWINDOW account AS (\n  PARTITION BY account\n  ORDER BY id\n);\n\n\nHowever, if we use the same query for Sybil, we run into our next problem.\n\n\n id | account |    type    | amount | sum\n----+---------+------------+--------+-----\n  4 | sybil   | deposit    |      5 |   5\n  5 | sybil   | withdrawal |     -2 |   3\n  6 | sybil   | bankrupt   |      0 |   3\n  7 | sybil   | deposit    |      3 |   6\n  8 | sybil   | deposit    |      7 |  13\n  9 | sybil   | bankrupt   |      0 |  13\n 10 | sybil   | deposit    |      5 |  18\n\n\nCumulative Sums With Resets\nThe trick to calculating Sybil’s balance is using a nested set of window\nfunctions to make the query sensitive to the transaction type. Here’s what we’re\ntrying to achieve:\n\n\n id | account |    type    | amount | sum\n----+---------+------------+--------+-----\n  4 | sybil   | deposit    |      5 |   5\n  5 | sybil   | withdrawal |     -2 |   3\n  6 | sybil   | bankrupt   |      0 |   0\n  7 | sybil   | deposit    |      3 |   3\n  8 | sybil   | deposit    |      7 |  10\n  9 | sybil   | bankrupt   |      0 |   0\n 10 | sybil   | deposit    |      5 |   5\n\n\nOne possible solution is to try and subtract the cumulative sum using a CASE\nstatement:\n\n\nSELECT\n  id\n  ,account\n  ,type\n  ,amount\n  ,CASE\n    WHEN type = 'bankrupt' THEN\n      -1*sum(amount) OVER account\n    ELSE\n      sum(amount) OVER account\n  END AS sum\nFROM transactions\nWHERE account = 'sybil'\nWINDOW account AS (\n  PARTITION BY account\n  ORDER BY id\n);\n\n\nThe trouble with this approach is that the window function does not use the\noutput of the last row to calculate the next row. The only thing we’ve done is\nto alter the values of the bankrupt transactions:\n\n\n id | account |    type    | amount | sum\n----+---------+------------+--------+-----\n  4 | sybil   | deposit    |      5 |   5\n  5 | sybil   | withdrawal |     -2 |   3\n  6 | sybil   | bankrupt   |      0 |  -3\n  7 | sybil   | deposit    |      3 |   6\n  8 | sybil   | deposit    |      7 |  13\n  9 | sybil   | bankrupt   |      0 | -13\n 10 | sybil   | deposit    |      5 |  18\n\n\nNesting window functions solves this problem. We’ll build up the query by first\nidentifying the transactions that reset the count:\n\n\nSELECT\n  id\n  ,account\n  ,type\n  ,amount\n  ,(type = 'bankrupt')::int AS do_reset\nFROM transactions\nWHERE account = 'sybil'\n;\n\n\nRunning that query we get:\n\n\n id | account |    type    | amount | do_reset\n----+---------+------------+--------+----------\n  4 | sybil   | deposit    |      5 |        0\n  5 | sybil   | withdrawal |     -2 |        0\n  6 | sybil   | bankrupt   |      0 |        1\n  7 | sybil   | deposit    |      3 |        0\n  8 | sybil   | deposit    |      7 |        0\n  9 | sybil   | bankrupt   |      0 |        1\n 10 | sybil   | deposit    |      5 |        0\n\n\nCasting boolean values to integers allows us to then perform a cumulative sum\nover do_reset. This sum will allow us to group transactions chronologically, by\ntheir association to a resetting transaction.\n\n\nSELECT\n  id\n  ,account\n  ,type\n  ,amount\n  ,sum((type = 'bankrupt')::int) OVER account AS reset_id\nFROM transactions\nWHERE account = 'sybil'\nWINDOW account AS (\n  PARTITION BY account\n  ORDER BY id\n);\n\n\nRunning that query we get:\n\n\n id | account |    type    | amount | reset_id\n----+---------+------------+--------+----------\n  4 | sybil   | deposit    |      5 |        0\n  5 | sybil   | withdrawal |     -2 |        0\n  6 | sybil   | bankrupt   |      0 |        1\n  7 | sybil   | deposit    |      3 |        1\n  8 | sybil   | deposit    |      7 |        1\n  9 | sybil   | bankrupt   |      0 |        2\n 10 | sybil   | deposit    |      5 |        2\n\n\nFinally, we can nest this query inside another window function, and perform a\ncumulative sum on amount, using the reset_id we’ve just created:\n\n\nSELECT\n  id\n  ,account\n  ,type\n  ,amount\n  ,sum(amount) OVER resets\nFROM (\n  SELECT\n    id\n    ,account\n    ,type\n    ,amount\n    ,sum((type = 'bankrupt')::int) OVER account AS reset_id\n  FROM transactions\n  WINDOW account AS (\n    PARTITION BY account\n    ORDER BY id\n  )\n) t\nWINDOW resets AS (\n  PARTITION BY\n    account\n    ,reset_id\n  ORDER BY id\n);\n\n\nRunning the query we get the values we expect for both Bob and Sybil. Huzzah!\n\n\n id | account |    type    | amount | sum\n----+---------+------------+--------+-----\n  1 | bob     | deposit    |      5 |   5\n  2 | bob     | withdrawal |     -2 |   3\n  3 | bob     | deposit    |      3 |   6\n  4 | sybil   | deposit    |      5 |   5\n  5 | sybil   | withdrawal |     -2 |   3\n  6 | sybil   | bankrupt   |      0 |   0\n  7 | sybil   | deposit    |      3 |   3\n  8 | sybil   | deposit    |      7 |  10\n  9 | sybil   | bankrupt   |      0 |   0\n 10 | sybil   | deposit    |      5 |   5\n\n\nConclusion\nWindow functions are a really good solution to processing time series with\nchronologically related data. This post scratches the surface of what’s\npossible.\n\nSo, the next time your boss asks you to process some time series data, consider\ngiving window functions a try.\n\n\n\n\n\nhttps://github.com/ac1235/python-tailrec\n\n\n\nhttps://github.com/Avik-Jain/100-Days-Of-ML-Code/blob/master/README.md\n\n\n\nWhat A Mathematical Formula Can Teach Us About Coincidence\n[http://blogs.discovermagazine.com/crux/2018/08/10/kolmogorov-pattern-complexity-pattern-meaning-random/]\n\nhttp://jkk.name/neural-tagger-tutorial/","html":"<p></p><p><a href=\"https://medium.freecodecamp.org/follow-these-simple-rules-and-youll-become-a-git-and-github-master-e1045057468f\">https://medium.freecodecamp.org/follow-these-simple-rules-and-youll-become-a-git-and-github-master-e1045057468f</a></p><p></p><figure class=\"kg-card kg-embed-card\"><blockquote class=\"wp-embedded-content\"><a href=\"https://www.johndcook.com/blog/2018/08/11/currying/\">Currying in calculus, PDEs, programming, and categories</a></blockquote>\n<script type=\"text/javascript\">\n<!--//--><![CDATA[//><!--\n\t\t!function(a,b){\"use strict\";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf(\"MSIE 10\"),h=!!navigator.userAgent.match(/Trident.*rv:11\\./),i=b.querySelectorAll(\"iframe.wp-embedded-content\");for(c=0;c<i.length;c++){if(d=i[c],!d.getAttribute(\"data-secret\"))f=Math.random().toString(36).substr(2,10),d.src+=\"#?secret=\"+f,d.setAttribute(\"data-secret\",f);if(g||h)a=d.cloneNode(!0),a.removeAttribute(\"security\"),d.parentNode.replaceChild(a,d)}}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret=\"'+d.secret+'\"]'),k=b.querySelectorAll('blockquote[data-secret=\"'+d.secret+'\"]');for(e=0;e<k.length;e++)k[e].style.display=\"none\";for(e=0;e<j.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.removeAttribute(\"style\"),\"height\"===d.message){if(g=parseInt(d.value,10),g>1e3)g=1e3;else if(~~g<200)g=200;f.height=g}if(\"link\"===d.message)if(h=b.createElement(\"a\"),i=b.createElement(\"a\"),h.href=f.getAttribute(\"src\"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener(\"message\",a.wp.receiveEmbedMessage,!1),b.addEventListener(\"DOMContentLoaded\",c,!1),a.addEventListener(\"load\",c,!1)}(window,document);\n//--><!]]>\n</script><iframe sandbox=\"allow-scripts\" security=\"restricted\" src=\"https://www.johndcook.com/blog/2018/08/11/currying/embed/\" width=\"600\" height=\"338\" title=\"&#8220;Currying in calculus, PDEs, programming, and categories&#8221; &#8212; John D. Cook\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" class=\"wp-embedded-content\"></iframe></figure><p></p><figure class=\"kg-card kg-embed-card\"><p>In an effort to keep up my grueling regime of publishing at least one blog post per year, I&#8217;ve decided to write today about a neat little problem I ran across. The problem is; how do you calculate the cumulative sum of a time series if there are transactions that reset the count to 0?</p>\n<p>Naturally, there are ways to engineer around this problem without complex queries doing the heavy lifting (recording the current balance along side your transaction history, for example). However, if you occasionally find yourself being asked for a number crunch, half with the expectation of your response being:</p>\n<p><img data-attachment-id=\"968\" data-permalink=\"https://llvllatrix.wordpress.com/2018/08/06/sql-nested-window-functions-and-time-series/leeroy/\" data-orig-file=\"https://llvllatrix.files.wordpress.com/2018/08/leeroy.jpeg?w=1050&#038;h=700\" data-orig-size=\"1050,700\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"leeroy\" data-image-description=\"\" data-medium-file=\"https://llvllatrix.files.wordpress.com/2018/08/leeroy.jpeg?w=1050&#038;h=700?w=300\" data-large-file=\"https://llvllatrix.files.wordpress.com/2018/08/leeroy.jpeg?w=1050&#038;h=700?w=1024\" class=\" size-full wp-image-968 aligncenter\" src=\"https://llvllatrix.files.wordpress.com/2018/08/leeroy.jpeg?w=1050&#038;h=700\" alt=\"leeroy\" width=\"1050\" height=\"700\" srcset=\"https://llvllatrix.files.wordpress.com/2018/08/leeroy.jpeg 1050w, https://llvllatrix.files.wordpress.com/2018/08/leeroy.jpeg?w=150&amp;h=100 150w, https://llvllatrix.files.wordpress.com/2018/08/leeroy.jpeg?w=300&amp;h=200 300w, https://llvllatrix.files.wordpress.com/2018/08/leeroy.jpeg?w=768&amp;h=512 768w, https://llvllatrix.files.wordpress.com/2018/08/leeroy.jpeg?w=1024&amp;h=683 1024w\" sizes=\"(max-width: 1050px) 100vw, 1050px\"></p>\n<p>&#8230;it&#8217;s not a bad idea to keep this query in your back pocket.</p>\n<h1>A Convoluted Example</h1>\n<p>Alice decides to start a bank. Her engineers are clever and they decide that they can save space in their transaction log by just reporting changes in the balance. They keep the current balance in another table and decide if Grace the auditor comes around, they&#8217;ll just sum up all of the transactions in their log. Good job guys.</p>\n<p><img data-attachment-id=\"969\" data-permalink=\"https://llvllatrix.wordpress.com/2018/08/06/sql-nested-window-functions-and-time-series/dilbert_and_wally/\" data-orig-file=\"https://llvllatrix.files.wordpress.com/2018/08/dilbert_and_wally1.jpeg?w=580&#038;h=301\" data-orig-size=\"580,301\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;1533580224&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"dilbert_and_wally\" data-image-description=\"\" data-medium-file=\"https://llvllatrix.files.wordpress.com/2018/08/dilbert_and_wally1.jpeg?w=580&#038;h=301?w=300\" data-large-file=\"https://llvllatrix.files.wordpress.com/2018/08/dilbert_and_wally1.jpeg?w=580&#038;h=301?w=580\" class=\" size-full wp-image-969 aligncenter\" src=\"https://llvllatrix.files.wordpress.com/2018/08/dilbert_and_wally1.jpeg?w=580&#038;h=301\" alt=\"dilbert_and_wally\" width=\"580\" height=\"301\" srcset=\"https://llvllatrix.files.wordpress.com/2018/08/dilbert_and_wally1.jpeg 580w, https://llvllatrix.files.wordpress.com/2018/08/dilbert_and_wally1.jpeg?w=150&amp;h=78 150w, https://llvllatrix.files.wordpress.com/2018/08/dilbert_and_wally1.jpeg?w=300&amp;h=156 300w\" sizes=\"(max-width: 580px) 100vw, 580px\"></p>\n<p>Bob is an exceptional client with good credit history. Grace takes a quick glance at his balance history and decides everything looks fine. As she leafs through the other records and pauses at Sybil&#8217;s balance history. It&#8217;s massive. The problem is that Sybil&#8217;s been through a number of bankruptcies that should have set her balance to 0. She breaks the news to Alice. You can imagine that Alice was not too happy.</p>\n<p><img data-attachment-id=\"965\" data-permalink=\"https://llvllatrix.wordpress.com/2018/08/06/sql-nested-window-functions-and-time-series/alice/\" data-orig-file=\"https://llvllatrix.files.wordpress.com/2018/08/alice.jpeg?w=580&#038;h=301\" data-orig-size=\"580,301\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;1&quot;}\" data-image-title=\"alice\" data-image-description=\"\" data-medium-file=\"https://llvllatrix.files.wordpress.com/2018/08/alice.jpeg?w=580&#038;h=301?w=300\" data-large-file=\"https://llvllatrix.files.wordpress.com/2018/08/alice.jpeg?w=580&#038;h=301?w=580\" class=\" size-full wp-image-965 aligncenter\" src=\"https://llvllatrix.files.wordpress.com/2018/08/alice.jpeg?w=580&#038;h=301\" alt=\"alice\" width=\"580\" height=\"301\" srcset=\"https://llvllatrix.files.wordpress.com/2018/08/alice.jpeg 580w, https://llvllatrix.files.wordpress.com/2018/08/alice.jpeg?w=150&amp;h=78 150w, https://llvllatrix.files.wordpress.com/2018/08/alice.jpeg?w=300&amp;h=156 300w\" sizes=\"(max-width: 580px) 100vw, 580px\"></p>\n<p>To fix the problem, the engineers decide to introduce a new transaction that resets the balance to 0.</p>\n<h1>The Data Set</h1>\n<p>In order to satisfy Grace, we&#8217;ve got to come up with a balance history for both Bob and Sybil using just transactions. Here&#8217;s our data set in Postgres SQL. We&#8217;ll use text and integer columns along with small numbers to simplify the problem.</p>\n<pre class=\"brush: sql; title: ; notranslate\" title=\"\">\nCREATE TABLE transactions (\n  id integer\n  ,account text\n  ,type text\n  ,amount integer\n);\n\nINSERT INTO transactions\nVALUES\n  (1, 'bob', 'deposit', 5)\n  ,(2, 'bob', 'withdrawal', -2)\n  ,(3, 'bob', 'deposit', 3)\n  ,(4, 'sybil', 'deposit', 5)\n  ,(5, 'sybil', 'withdrawal', -2)\n  ,(6, 'sybil', 'bankrupt', 0)\n  ,(7, 'sybil', 'deposit' , 3)\n  ,(8, 'sybil', 'deposit', 7)\n  ,(9, 'sybil', 'bankrupt', 0)\n  ,(10, 'sybil', 'deposit' , 5)\n;\n</pre>\n<h1>Simple Cumulative Sums</h1>\n<p>Our first job is to calculate Bob&#8217;s balance history. This section is a review of basic window functions. If you&#8217;re used to using them to create cumulative sums, feel free to skip ahead. Here&#8217;s what we&#8217;re trying to produce:</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n&nbsp;id | account |    type    | amount | sum\n----+---------+------------+--------+-----\n  1 | bob     | deposit    |      5 |   5\n  2 | bob     | withdrawal |     -2 |   3\n  3 | bob     | deposit    |      3 |   6\n</pre>\n<p>A window function has two parts; the partition and the order. The partition defines which columns are going to be grouped together in the window. The order defines how to sort the rows in the window.</p>\n<p>In the example above, we want to group transactions by their account. We then want to order them by their ID. Now, when we use the Sum function, it will sum from the first transaction in the partition, to the current row:</p>\n<pre class=\"brush: sql; title: ; notranslate\" title=\"\">\nSELECT\n  id\n  ,account\n  ,type\n  ,amount\n  ,sum(amount) OVER account\nFROM transactions\nWHERE account = 'bob'\nWINDOW account AS (\n  PARTITION BY account\n  ORDER BY id\n);\n</pre>\n<p>However, if we use the same query for Sybil, we run into our next problem.</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n&nbsp;id | account |    type    | amount | sum\n----+---------+------------+--------+-----\n  4 | sybil   | deposit    |      5 |   5\n  5 | sybil   | withdrawal |     -2 |   3\n  6 | sybil   | bankrupt   |      0 |   3\n  7 | sybil   | deposit    |      3 |   6\n  8 | sybil   | deposit    |      7 |  13\n  9 | sybil   | bankrupt   |      0 |  13\n 10 | sybil   | deposit    |      5 |  18\n</pre>\n<h1>Cumulative Sums With Resets</h1>\n<p>The trick to calculating Sybil&#8217;s balance is using a nested set of window functions to make the query sensitive to the transaction type. Here&#8217;s what we&#8217;re trying to achieve:</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n&nbsp;id | account |    type    | amount | sum\n----+---------+------------+--------+-----\n  4 | sybil   | deposit    |      5 |   5\n  5 | sybil   | withdrawal |     -2 |   3\n  6 | sybil   | bankrupt   |      0 |   0\n  7 | sybil   | deposit    |      3 |   3\n  8 | sybil   | deposit    |      7 |  10\n  9 | sybil   | bankrupt   |      0 |   0\n 10 | sybil   | deposit    |      5 |   5\n</pre>\n<p>One possible solution is to try and subtract the cumulative sum using a CASE statement:</p>\n<pre class=\"brush: sql; title: ; notranslate\" title=\"\">\nSELECT\n  id\n  ,account\n  ,type\n  ,amount\n  ,CASE\n    WHEN type = 'bankrupt' THEN\n      -1*sum(amount) OVER account\n    ELSE\n      sum(amount) OVER account\n  END AS sum\nFROM transactions\nWHERE account = 'sybil'\nWINDOW account AS (\n  PARTITION BY account\n  ORDER BY id\n);\n</pre>\n<p>The trouble with this approach is that the window function does not use the output of the last row to calculate the next row. The only thing we&#8217;ve done is to alter the values of the bankrupt transactions:</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n&nbsp;id | account |    type    | amount | sum\n----+---------+------------+--------+-----\n  4 | sybil   | deposit    |      5 |   5\n  5 | sybil   | withdrawal |     -2 |   3\n  6 | sybil   | bankrupt   |      0 |  -3\n  7 | sybil   | deposit    |      3 |   6\n  8 | sybil   | deposit    |      7 |  13\n  9 | sybil   | bankrupt   |      0 | -13\n 10 | sybil   | deposit    |      5 |  18\n</pre>\n<p>Nesting window functions solves this problem. We&#8217;ll build up the query by first identifying the transactions that reset the count:</p>\n<pre class=\"brush: sql; title: ; notranslate\" title=\"\">\nSELECT\n  id\n  ,account\n  ,type\n  ,amount\n  ,(type = 'bankrupt')::int AS do_reset\nFROM transactions\nWHERE account = 'sybil'\n;\n</pre>\n<p>Running that query we get:</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n&nbsp;id | account |    type    | amount | do_reset\n----+---------+------------+--------+----------\n  4 | sybil   | deposit    |      5 |        0\n  5 | sybil   | withdrawal |     -2 |        0\n  6 | sybil   | bankrupt   |      0 |        1\n  7 | sybil   | deposit    |      3 |        0\n  8 | sybil   | deposit    |      7 |        0\n  9 | sybil   | bankrupt   |      0 |        1\n 10 | sybil   | deposit    |      5 |        0\n</pre>\n<p>Casting boolean values to integers allows us to then perform a cumulative sum over do_reset. This sum will allow us to group transactions chronologically, by their association to a resetting transaction.</p>\n<pre class=\"brush: sql; title: ; notranslate\" title=\"\">\nSELECT\n  id\n  ,account\n  ,type\n  ,amount\n  ,sum((type = 'bankrupt')::int) OVER account AS reset_id\nFROM transactions\nWHERE account = 'sybil'\nWINDOW account AS (\n  PARTITION BY account\n  ORDER BY id\n);\n</pre>\n<p>Running that query we get:</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n&nbsp;id | account |    type    | amount | reset_id\n----+---------+------------+--------+----------\n  4 | sybil   | deposit    |      5 |        0\n  5 | sybil   | withdrawal |     -2 |        0\n  6 | sybil   | bankrupt   |      0 |        1\n  7 | sybil   | deposit    |      3 |        1\n  8 | sybil   | deposit    |      7 |        1\n  9 | sybil   | bankrupt   |      0 |        2\n 10 | sybil   | deposit    |      5 |        2\n</pre>\n<p>Finally, we can nest this query inside another window function, and perform a cumulative sum on amount, using the reset_id we&#8217;ve just created:</p>\n<pre class=\"brush: sql; title: ; notranslate\" title=\"\">\nSELECT\n  id\n  ,account\n  ,type\n  ,amount\n  ,sum(amount) OVER resets\nFROM (\n  SELECT\n    id\n    ,account\n    ,type\n    ,amount\n    ,sum((type = 'bankrupt')::int) OVER account AS reset_id\n  FROM transactions\n  WINDOW account AS (\n    PARTITION BY account\n    ORDER BY id\n  )\n) t\nWINDOW resets AS (\n  PARTITION BY\n    account\n    ,reset_id\n  ORDER BY id\n);\n</pre>\n<p>Running the query we get the values we expect for both Bob and Sybil. Huzzah!</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n&nbsp;id | account |    type    | amount | sum\n----+---------+------------+--------+-----\n  1 | bob     | deposit    |      5 |   5\n  2 | bob     | withdrawal |     -2 |   3\n  3 | bob     | deposit    |      3 |   6\n  4 | sybil   | deposit    |      5 |   5\n  5 | sybil   | withdrawal |     -2 |   3\n  6 | sybil   | bankrupt   |      0 |   0\n  7 | sybil   | deposit    |      3 |   3\n  8 | sybil   | deposit    |      7 |  10\n  9 | sybil   | bankrupt   |      0 |   0\n 10 | sybil   | deposit    |      5 |   5\n</pre>\n<h1>Conclusion</h1>\n<p>Window functions are a really good solution to processing time series with chronologically related data. This post scratches the surface of what&#8217;s possible.</p>\n<p>So, the next time your boss asks you to process some time series data, consider giving window functions a try.</p>\n<p><img data-attachment-id=\"967\" data-permalink=\"https://llvllatrix.wordpress.com/2018/08/06/sql-nested-window-functions-and-time-series/drake/\" data-orig-file=\"https://llvllatrix.files.wordpress.com/2018/08/drake.jpeg?w=500&#038;h=500\" data-orig-size=\"500,500\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"drake\" data-image-description=\"\" data-medium-file=\"https://llvllatrix.files.wordpress.com/2018/08/drake.jpeg?w=500&#038;h=500?w=300\" data-large-file=\"https://llvllatrix.files.wordpress.com/2018/08/drake.jpeg?w=500&#038;h=500?w=500\" class=\" size-full wp-image-967 aligncenter\" src=\"https://llvllatrix.files.wordpress.com/2018/08/drake.jpeg?w=500&#038;h=500\" alt=\"drake\" width=\"500\" height=\"500\" srcset=\"https://llvllatrix.files.wordpress.com/2018/08/drake.jpeg 500w, https://llvllatrix.files.wordpress.com/2018/08/drake.jpeg?w=150&amp;h=150 150w, https://llvllatrix.files.wordpress.com/2018/08/drake.jpeg?w=300&amp;h=300 300w\" sizes=\"(max-width: 500px) 100vw, 500px\"></p>\n</figure><p></p><p><a href=\"https://github.com/ac1235/python-tailrec\">https://github.com/ac1235/python-tailrec</a></p><p></p><p><a href=\"https://github.com/Avik-Jain/100-Days-Of-ML-Code/blob/master/README.md\">https://github.com/Avik-Jain/100-Days-Of-ML-Code/blob/master/README.md</a></p><p></p><figure class=\"kg-card kg-embed-card\"><blockquote class=\"wp-embedded-content\"><a href=\"http://blogs.discovermagazine.com/crux/2018/08/10/kolmogorov-pattern-complexity-pattern-meaning-random/\">What A Mathematical Formula Can Teach Us About Coincidence</a></blockquote>\n<script type=\"text/javascript\">\n<!--//--><![CDATA[//><!--\n\t\t!function(a,b){\"use strict\";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf(\"MSIE 10\"),h=!!navigator.userAgent.match(/Trident.*rv:11\\./),i=b.querySelectorAll(\"iframe.wp-embedded-content\");for(c=0;c<i.length;c++)if(d=i[c],!d.getAttribute(\"data-secret\")){if(f=Math.random().toString(36).substr(2,10),d.src+=\"#?secret=\"+f,d.setAttribute(\"data-secret\",f),g||h)a=d.cloneNode(!0),a.removeAttribute(\"security\"),d.parentNode.replaceChild(a,d)}else;}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret=\"'+d.secret+'\"]'),k=b.querySelectorAll('blockquote[data-secret=\"'+d.secret+'\"]');for(e=0;e<k.length;e++)k[e].style.display=\"none\";for(e=0;e<j.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.removeAttribute(\"style\"),\"height\"===d.message){if(g=parseInt(d.value,10),g>1e3)g=1e3;else if(200>~~g)g=200;f.height=g}if(\"link\"===d.message)if(h=b.createElement(\"a\"),i=b.createElement(\"a\"),h.href=f.getAttribute(\"src\"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener(\"message\",a.wp.receiveEmbedMessage,!1),b.addEventListener(\"DOMContentLoaded\",c,!1),a.addEventListener(\"load\",c,!1)}(window,document);\n//--><!]]>\n</script><iframe sandbox=\"allow-scripts\" security=\"restricted\" src=\"http://blogs.discovermagazine.com/crux/2018/08/10/kolmogorov-pattern-complexity-pattern-meaning-random/embed/\" width=\"600\" height=\"338\" title=\"Embedded WordPress Post\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" class=\"wp-embedded-content\"></iframe></figure><p></p><p><a href=\"http://jkk.name/neural-tagger-tutorial/\">http://jkk.name/neural-tagger-tutorial/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-september-5th/","uuid":"7fcd6c64-ba7d-4c32-a05f-58286dfaebe4","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b902d3f1fc1fc7d92b5c4d8"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736ec","title":"Tuning Machine Learning Hyperparameters with Binary Search","slug":"tuning-machine-learning-hyperparameters-with-binary-search","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/08/ai2@2x.jpg","excerpt":"Tune the n_estimators parameter in for a Random Forests classifier in scikit-learn in Python.","custom_excerpt":"Tune the n_estimators parameter in for a Random Forests classifier in scikit-learn in Python.","created_at_pretty":"30 August, 2018","published_at_pretty":"03 September, 2018","updated_at_pretty":"14 February, 2019","created_at":"2018-08-29T21:35:41.000-04:00","published_at":"2018-09-03T07:30:00.000-04:00","updated_at":"2019-02-13T22:50:35.000-05:00","meta_title":"Tune the n_estimators parameter in for a Random Forests classifier in scikit-learn in Python | Hackers And Slackers","meta_description":"RandomizedSearchCV goes noticeably faster than a full GridSearchCV but it still takes a while - which can be rough.","og_description":"Code Snippet Corner: Tuning Machine Learning Hyperparameters with Binary Search","og_image":"https://hackersandslackers.com/content/images/2018/08/ai2@2x.jpg","og_title":"Code Snippet Corner: Tuning Machine Learning Hyperparameters with Binary Search","twitter_description":"Tune the n_estimators parameter in for a Random Forests classifier in scikit-learn in Python","twitter_image":"https://hackersandslackers.com/content/images/2018/08/ai2@2x.jpg","twitter_title":"Code Snippet Corner: Tuning Machine Learning Hyperparameters with Binary Search","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Code Snippet Corner","slug":"codesnippetcorner","description":"Real-world examples of Python being used to solve complex data problems, primarily using Jupyter notebooks.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o-1.jpg","meta_description":"Real-world examples of Python being used to solve complex data problems.","meta_title":"Python Code Snippet Corner","visibility":"public"},"tags":[{"name":"Code Snippet Corner","slug":"codesnippetcorner","description":"Real-world examples of Python being used to solve complex data problems, primarily using Jupyter notebooks.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o-1.jpg","meta_description":"Real-world examples of Python being used to solve complex data problems.","meta_title":"Python Code Snippet Corner","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Data Science","slug":"datascience","description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","feature_image":null,"meta_description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","meta_title":"Data Science | Hackers and Slackers","visibility":"public"},{"name":"Machine Learning","slug":"machine-learning","description":"The latest developments in machine learning tools and technology available to data scientists.","feature_image":null,"meta_description":"The latest developments in machine learning tools and technology available to data scientists.","meta_title":"Machine Learning | Hackers and Slackers","visibility":"public"},{"name":"#Code Snippet Corner","slug":"code-snippet-corner","description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o_o.jpg","meta_description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","meta_title":"Python Code Snippet Corner","visibility":"internal"}],"plaintext":"Ah, hyperparameter tuning.  Time & compute-intensive.  Frequently containing\nweird non-linearities in how changing a parameter changes the score and/or the\ntime it takes to train the model.\n\nRandomizedSearchCV  goes noticeably faster than a full GridSearchCV  but it\nstill takes a while - which can be rough, because in my experience you do still\nneed to be iterative with it and experiment with different distributions.  Plus,\nthen you've got hyper-hyperparameters to tune - how many iterations SHOULD you\nrun it for, anyway?\n\nI've been experimenting with using the trusty old Binary Search to tune\nhyperparameters.  I'm finding it has two advantages.\n\n 1. It's blazing fast\n 2. The performance is competitive with a Randomized Search\n 3. It gives you a rough sketch of \"the lay of the land\".  An initial binary\n    search can then provide parameters for future searches, including with Grid\n    or Randomized Searches.\n\nCode is here\n[https://github.com/mattalhonte/binary-grid-search/blob/master/binarygridsearch/binarygridsearch.py]\n\nNotebook summary is here\n[https://github.com/mattalhonte/binary-grid-search/blob/master/Binary%20Search%20Interactive%20(n_estimators).ipynb]\n\nLet's see it in action!\n\nfrom sklearn.ensemble import RandomForestClassifier\n\n\nWe'll be using a Random Forest classifier, because, as with all my code posts,\nit's what I've been using recently.\n\nfrom sklearn.datasets import load_breast_cancer\ndata = load_breast_cancer()\nX, y = data.data, data.target\n\n\nWe'll be using scikit-learn's breast cancer dataset, because I remembered that\nthese packages I'm posting about have built-in demo datasets that I should be\nusing for posts.\n\nrfArgs = {\"random_state\": 0,\n          \"n_jobs\": -1,\n          \"class_weight\": \"balanced\",\n         \"oob_score\": True}\n\n\nLet's set our random_state  for better reproducibility.\nWe'll set n_jobs=-1  because obviously we want to use all our cores, we are not\npatient people.\n\n\nWe'll have class_weight=\"balanced\"  because that'll compensate for the fact that\nthe breast cancer dataset (like most medical datasets) has unbalanced classes.\nWe'll use oob_score  because we like being lazy, part of the appeal of Random\nForests is the opportunity to be extra lazy (no need to normalize features!),\nand oob  lets us be even lazier  by giving some built-in cross-validation.\n\nNow let's define a function that'll take all this, and spit out a score.  I\nwrote the binary search function to take a function like this as an argument -\nscikit-learn is usually pretty consistent when it comes to the interface it\nprovides you, but sometimes different algorithms need to work a little\ndifferently.  For instance, since we'll be using Area Under \nprecision_recall_curve  as our metric (a good choice for classifiers with\nunbalanced classes!), it takes a teensy bit of extra fiddling to get it to play\nnicely with our oob_decision_function_.\n\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import auc\n\ndef getForestAccuracy(X, y, kwargs):\n    clf = RandomForestClassifier(**kwargs)\n    clf.fit(X, y)\n    y_pred = clf.oob_decision_function_[:, 1]\n    precision, recall, _ = precision_recall_curve(y, y_pred)\n    return auc(recall, precision)\n\n\nWe'll try to optimize the n_estimators  parameter first.  For two reasons:\n\n 1. Finding a good mix between speed and accuracy here will make it easier to\n    tune subsequent parameters.\n 2. It's the most straightforward to decide upper and lower bounds for.  Other\n    ones (like, say, max_depth) require a little work to figure the potential\n    range to search in.\n\nOkay!  So, let's put our lower limit as 32 and our upper limit as 128, because I\nread in a StackOverflow post that there's a paper that says to search within\nthat range.\n\nn_estimators = bgs.compareValsBaseCase(X, \n                    y, \n                    getForestAccuracy,        \n                    rfArgs, \n                    \"n_estimators\", \n                    0, \n                    18, \n                    128)\n\nbgs.showTimeScoreChartAndGraph(n_estimators)\n\n\nPlotting score, time, and the ratio between them - we're not just optimizing for\nthe best score right now, we're looking for tipping points that give us good\ntradeoffs.  Scores and times are normalized for a more-meaningful ratio between\nthem.\n\nn_estimators\n score\n time\n scoreTimeRatio\n 0\n 32\n 1.073532\n 0.002459\n 1.000000\n 1\n 128\n 1.867858\n 1.002459\n 0.000000\n 2\n 80\n 2.052255\n 0.440060\n 0.006443\n 3\n 56\n 1.605447\n 0.075185\n 0.044843\n 4\n 68\n 1.910411\n 0.107187\n 0.036721\n 5\n 74\n 2.066440\n 0.377136\n 0.008320\n 6\n 77\n 2.066440\n 0.388378\n 0.007955\n 7\n 75\n 2.073532\n 0.457481\n 0.006141\n n_estimators\n score\n time\n 0\n 32\n 0.988663\n 0.180521\n 1\n 128\n 0.989403\n 0.587113\n 2\n 80\n 0.989575\n 0.358446\n 3\n 56\n 0.989159\n 0.210091\n 4\n 68\n 0.989443\n 0.223102\n 5\n 74\n 0.989588\n 0.332861\n 6\n 77\n 0.989588\n 0.337432\n 7\n 75\n 0.989595\n 0.365529\n Hrm, looks like the score starts getting somewhere interesting around 68, and\ntime starts shooting up at about 80.  Let's do another with those as our bounds!\n\nn_estimators = bgs.compareValsBaseCase(X, \n                    y, \n                    getForestAccuracy,        \n                    rfArgs, \n                    \"n_estimators\", \n                    0, \n                    68, \n                    80)\n\nbgs.showTimeScoreChartAndGraph(n_estimators)\n\n\nn_estimators\n score\n time\n scoreTimeRatio\n 0\n 68\n 6.390333\n 0.333407\n 0.135692\n 1\n 80\n 7.223667\n 1.064343\n 0.000000\n 2\n 74\n 7.307000\n 0.404471\n 0.123622\n 3\n 71\n 6.307000\n 0.064343\n 1.000000\n 4\n 72\n 6.390333\n 0.175190\n 0.325419\n n_estimators\n score\n time\n 0\n 68\n 0.989443\n 0.344220\n 1\n 80\n 0.989575\n 0.355580\n 2\n 74\n 0.989588\n 0.345324\n 3\n 71\n 0.989430\n 0.340038\n 4\n 72\n 0.989443\n 0.341761\n 71 looks like our winner!  Or close enough for our purposes while we then go\noptimize other things.  And we only had to train our model 13 times - as opposed\nto the 96 we would have with a brute-force grid search.\n\nHopefully this will become a series on using this to tune other RF\nhyperparameters - other ones have some interesting quirks that I'd like to\nexpound upon.  Or you could just look at the GitHub repo for spoilers.  Or both!","html":"<p>Ah, hyperparameter tuning.  Time &amp; compute-intensive.  Frequently containing weird non-linearities in how changing a parameter changes the score and/or the time it takes to train the model.</p><p><code>RandomizedSearchCV</code> goes noticeably faster than a full <code>GridSearchCV</code> but it still takes a while - which can be rough, because in my experience you do still need to be iterative with it and experiment with different distributions.  Plus, then you've got hyper-hyperparameters to tune - how many iterations SHOULD you run it for, anyway?</p><p>I've been experimenting with using the trusty old Binary Search to tune hyperparameters.  I'm finding it has two advantages.</p><ol><li>It's blazing fast</li><li>The performance is competitive with a Randomized Search</li><li>It gives you a rough sketch of \"the lay of the land\".  An initial binary search can then provide parameters for future searches, including with Grid or Randomized Searches.</li></ol><p>Code is <a href=\"https://github.com/mattalhonte/binary-grid-search/blob/master/binarygridsearch/binarygridsearch.py\">here</a></p><p>Notebook summary is <a href=\"https://github.com/mattalhonte/binary-grid-search/blob/master/Binary%20Search%20Interactive%20(n_estimators).ipynb\">here</a></p><p>Let's see it in action!</p><pre><code class=\"language-python\">from sklearn.ensemble import RandomForestClassifier\n</code></pre>\n<p>We'll be using a Random Forest classifier, because, as with all my code posts, it's what I've been using recently.</p><pre><code class=\"language-python\">from sklearn.datasets import load_breast_cancer\ndata = load_breast_cancer()\nX, y = data.data, data.target\n</code></pre>\n<p>We'll be using scikit-learn's breast cancer dataset, because I remembered that these packages I'm posting about have built-in demo datasets that I should be using for posts.</p><pre><code class=\"language-python\">rfArgs = {&quot;random_state&quot;: 0,\n          &quot;n_jobs&quot;: -1,\n          &quot;class_weight&quot;: &quot;balanced&quot;,\n         &quot;oob_score&quot;: True}\n</code></pre>\n<p>Let's set our <code>random_state</code> for better reproducibility.<br>We'll set <code>n_jobs=-1</code> because obviously we want to use all our cores, we are not patient people.</p><p><br>We'll have <code>class_weight=\"balanced\"</code> because that'll compensate for the fact that the breast cancer dataset (like most medical datasets) has unbalanced classes.<br>We'll use <code>oob_score</code> because we like being lazy, part of the appeal of Random Forests is the opportunity to be extra lazy (no need to normalize features!), and <code>oob</code> lets us be <em>even lazier</em> by giving some built-in cross-validation.</p><p>Now let's define a function that'll take all this, and spit out a score.  I wrote the binary search function to take a function like this as an argument - scikit-learn is usually pretty consistent when it comes to the interface it provides you, but sometimes different algorithms need to work a little differently.  For instance, since we'll be using Area Under <code>precision_recall_curve</code> as our metric (a good choice for classifiers with unbalanced classes!), it takes a teensy bit of extra fiddling to get it to play nicely with our <code>oob_decision_function_</code>.</p><pre><code class=\"language-python\">from sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import auc\n\ndef getForestAccuracy(X, y, kwargs):\n    clf = RandomForestClassifier(**kwargs)\n    clf.fit(X, y)\n    y_pred = clf.oob_decision_function_[:, 1]\n    precision, recall, _ = precision_recall_curve(y, y_pred)\n    return auc(recall, precision)\n</code></pre>\n<p>We'll try to optimize the <code>n_estimators</code> parameter first.  For two reasons:</p><ol><li>Finding a good mix between speed and accuracy here will make it easier to tune subsequent parameters.</li><li>It's the most straightforward to decide upper and lower bounds for.  Other ones (like, say, <code>max_depth</code>) require a little work to figure the potential range to search in.</li></ol><p>Okay!  So, let's put our lower limit as 32 and our upper limit as 128, because I read in a StackOverflow post that there's a paper that says to search within that range.</p><pre><code class=\"language-python\">n_estimators = bgs.compareValsBaseCase(X, \n                    y, \n                    getForestAccuracy,        \n                    rfArgs, \n                    &quot;n_estimators&quot;, \n                    0, \n                    18, \n                    128)\n\nbgs.showTimeScoreChartAndGraph(n_estimators)\n</code></pre>\n<p>Plotting score, time, and the ratio between them - we're not just optimizing for the best score right now, we're looking for tipping points that give us good tradeoffs.  Scores and times are normalized for a more-meaningful ratio between them.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/visualization--2-.png\" class=\"kg-image\"></figure><div class=\"tableContainer\">\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>n_estimators</th>\n      <th>score</th>\n      <th>time</th>\n      <th>scoreTimeRatio</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>32</td>\n      <td>1.073532</td>\n      <td>0.002459</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>128</td>\n      <td>1.867858</td>\n      <td>1.002459</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>80</td>\n      <td>2.052255</td>\n      <td>0.440060</td>\n      <td>0.006443</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>56</td>\n      <td>1.605447</td>\n      <td>0.075185</td>\n      <td>0.044843</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>68</td>\n      <td>1.910411</td>\n      <td>0.107187</td>\n      <td>0.036721</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>74</td>\n      <td>2.066440</td>\n      <td>0.377136</td>\n      <td>0.008320</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>77</td>\n      <td>2.066440</td>\n      <td>0.388378</td>\n      <td>0.007955</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>75</td>\n      <td>2.073532</td>\n      <td>0.457481</td>\n      <td>0.006141</td>\n    </tr>\n  </tbody>\n</table>\n</div><div class=\"tableContainer\">\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>n_estimators</th>\n      <th>score</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>32</td>\n      <td>0.988663</td>\n      <td>0.180521</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>128</td>\n      <td>0.989403</td>\n      <td>0.587113</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>80</td>\n      <td>0.989575</td>\n      <td>0.358446</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>56</td>\n      <td>0.989159</td>\n      <td>0.210091</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>68</td>\n      <td>0.989443</td>\n      <td>0.223102</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>74</td>\n      <td>0.989588</td>\n      <td>0.332861</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>77</td>\n      <td>0.989588</td>\n      <td>0.337432</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>75</td>\n      <td>0.989595</td>\n      <td>0.365529</td>\n    </tr>\n  </tbody>\n</table>\n</div><p>Hrm, looks like the score starts getting somewhere interesting around 68, and time starts shooting up at about 80.  Let's do another with those as our bounds!</p><pre><code class=\"language-python\">n_estimators = bgs.compareValsBaseCase(X, \n                    y, \n                    getForestAccuracy,        \n                    rfArgs, \n                    &quot;n_estimators&quot;, \n                    0, \n                    68, \n                    80)\n\nbgs.showTimeScoreChartAndGraph(n_estimators)\n</code></pre>\n<figure class=\"kg-card kg-image-card\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/max_depth.png\" class=\"kg-image\"></figure><div class=\"tableContainer\">\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>n_estimators</th>\n      <th>score</th>\n      <th>time</th>\n      <th>scoreTimeRatio</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>68</td>\n      <td>6.390333</td>\n      <td>0.333407</td>\n      <td>0.135692</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>80</td>\n      <td>7.223667</td>\n      <td>1.064343</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>74</td>\n      <td>7.307000</td>\n      <td>0.404471</td>\n      <td>0.123622</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>71</td>\n      <td>6.307000</td>\n      <td>0.064343</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>72</td>\n      <td>6.390333</td>\n      <td>0.175190</td>\n      <td>0.325419</td>\n    </tr>\n  </tbody>\n</table>\n</div><div class=\"tableContainer\">\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>n_estimators</th>\n      <th>score</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>68</td>\n      <td>0.989443</td>\n      <td>0.344220</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>80</td>\n      <td>0.989575</td>\n      <td>0.355580</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>74</td>\n      <td>0.989588</td>\n      <td>0.345324</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>71</td>\n      <td>0.989430</td>\n      <td>0.340038</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>72</td>\n      <td>0.989443</td>\n      <td>0.341761</td>\n    </tr>\n  </tbody>\n</table>\n</div><p>71 looks like our winner!  Or close enough for our purposes while we then go optimize other things.  And we only had to train our model 13 times - as opposed to the 96 we would have with a brute-force grid search.</p><p>Hopefully this will become a series on using this to tune other RF hyperparameters - other ones have some interesting quirks that I'd like to expound upon.  Or you could just look at the GitHub repo for spoilers.  Or both!</p>","url":"https://hackersandslackers.com/tuning-machine-learning-hyperparameters-with-binary-search/","uuid":"ca7241c3-52cd-4910-86dc-0bb5474d07af","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b8749ed4b98380b152292ea"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736e4","title":"Lynx Roundup, September 3rd","slug":"lynx-roundup-august-29th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx60@2x.jpg","excerpt":"Hippocratic oath for coders!  Dynamic programming!  A delightful cartoon about the cute robot who controls a nuclear missile!","custom_excerpt":"Hippocratic oath for coders!  Dynamic programming!  A delightful cartoon about the cute robot who controls a nuclear missile!","created_at_pretty":"18 August, 2018","published_at_pretty":"03 September, 2018","updated_at_pretty":"03 September, 2018","created_at":"2018-08-18T00:54:36.000-04:00","published_at":"2018-09-03T07:00:00.000-04:00","updated_at":"2018-09-03T07:00:00.000-04:00","meta_title":"Hippocratic oath for coders!  Dynamic programming!  A delightful cartoon about the cute robot who controls a nuclear missile! | Hackers And Slackers","meta_description":"Hippocratic oath for coders!  Dynamic programming!  A delightful cartoon about the cute robot who controls a nuclear missile!","og_description":"Hippocratic oath for coders!  Dynamic programming!  A delightful cartoon about the cute robot who controls a nuclear missile!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx60@2x.jpg","og_title":"Lynx Roundup, September 3rd","twitter_description":"Hippocratic oath for coders!  Dynamic programming!  A delightful cartoon about the cute robot who controls a nuclear missile!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx60@2x.jpg","twitter_title":"Lynx Roundup, September 3rd","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.fastcompany.com/90215922/why-we-spent-two-years-rewriting-the-code-of-ethics-for-computing\n\n\n\nhttps://spectrum.ieee.org/view-from-the-valley/at-work/tech-careers/engineers-say-no-thanks-to-silicon-valley-recruiters-citing-ethical-concerns\n\n\n\nhttps://medium.com/@johnmark/why-open-source-failed-6cae5d6a9f6\n\n\n\nSome neat computing history!\n\n\n\nhttps://en.wikipedia.org/wiki/Cyc\n\n\n\nhttps://lukasmericle.github.io/dynprotut/\n\n\n\n\n\nhttps://www.nytimes.com/2018/08/10/smarter-living/how-to-negotiate-salary.html","html":"<p></p><p><a href=\"https://www.fastcompany.com/90215922/why-we-spent-two-years-rewriting-the-code-of-ethics-for-computing\">https://www.fastcompany.com/90215922/why-we-spent-two-years-rewriting-the-code-of-ethics-for-computing</a></p><p></p><p><a href=\"https://spectrum.ieee.org/view-from-the-valley/at-work/tech-careers/engineers-say-no-thanks-to-silicon-valley-recruiters-citing-ethical-concerns\">https://spectrum.ieee.org/view-from-the-valley/at-work/tech-careers/engineers-say-no-thanks-to-silicon-valley-recruiters-citing-ethical-concerns</a></p><p></p><p><a href=\"https://medium.com/@johnmark/why-open-source-failed-6cae5d6a9f6\">https://medium.com/@johnmark/why-open-source-failed-6cae5d6a9f6</a></p><p></p><p>Some neat computing history!</p><p></p><p><a href=\"https://en.wikipedia.org/wiki/Cyc\">https://en.wikipedia.org/wiki/Cyc</a></p><p></p><p><a href=\"https://lukasmericle.github.io/dynprotut/\">https://lukasmericle.github.io/dynprotut/</a></p><p></p><figure class=\"kg-card kg-embed-card\"><iframe width=\"459\" height=\"344\" src=\"https://www.youtube.com/embed/KFz0xVi25LE?feature=oembed\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe></figure><p></p><p><a href=\"https://www.nytimes.com/2018/08/10/smarter-living/how-to-negotiate-salary.html\">https://www.nytimes.com/2018/08/10/smarter-living/how-to-negotiate-salary.html</a></p>","url":"https://hackersandslackers.com/lynx-roundup-august-29th/","uuid":"89994750-2b67-4432-b99a-8099fd26f184","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b77a68cec281f15796ad2a5"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736e9","title":"Lynx Roundup, September 2nd","slug":"lynx-roundup-september-2nd","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/77@2x.jpg","excerpt":"A pocket calculator with all-optical circuitry!  Complaints from a Google Chrome dev!  Health checks in Distributed Systems!","custom_excerpt":"A pocket calculator with all-optical circuitry!  Complaints from a Google Chrome dev!  Health checks in Distributed Systems!","created_at_pretty":"18 August, 2018","published_at_pretty":"02 September, 2018","updated_at_pretty":"02 September, 2018","created_at":"2018-08-18T01:14:01.000-04:00","published_at":"2018-09-02T07:00:00.000-04:00","updated_at":"2018-09-02T12:41:01.000-04:00","meta_title":"A pocket calculator with all-optical circuitry!  Complaints from a Google Chrome dev!  Health checks in Distributed Systems! | Hackers And Slackers","meta_description":"A pocket calculator with all-optical circuitry!  Complaints from a Google Chrome dev!  Health checks in Distributed Systems!","og_description":"A pocket calculator with all-optical circuitry!  Complaints from a Google Chrome dev!  Health checks in Distributed Systems!","og_image":"https://hackersandslackers.com/content/images/lynx/77@2x.jpg","og_title":"Lynx Roundup, September 2nd","twitter_description":"A pocket calculator with all-optical circuitry!  Complaints from a Google Chrome dev!  Health checks in Distributed Systems!","twitter_image":"https://hackersandslackers.com/content/images/lynx/77@2x.jpg","twitter_title":"Lynx Roundup, September 2nd","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://medium.com/@TeamCoworker/a-simple-guide-to-talking-about-workplace-issues-with-your-coworkers-1b0ce08c3a8a\n\n\n\nhttps://medium.com/coryodaniel/from-erverless-to-elixir-48752db4d7bc\n\n\n\nhttps://medium.com/@copyconstruct/health-checks-in-distributed-systems-aa8a0e8c1672\n\n\n\nhttp://www.aalto.fi/en/current/news/2018-07-30/\n\n\n\nIn my 30+ year programming career, every single, bizarrely obscure bug that took\nweeks to chase down has ended up being a one-line fix.\n\n— Josh Susser (@joshsusser) August 14, 2018\n[https://twitter.com/joshsusser/status/1029480886033506304?ref_src=twsrc%5Etfw]\n\nhttps://randomascii.wordpress.com/2018/08/16/24-core-cpu-and-i-cant-type-an-email-part-one/\n\n\n\nhttps://pudding.cool/2018/08/pockets/","html":"<p></p><p><a href=\"https://medium.com/@TeamCoworker/a-simple-guide-to-talking-about-workplace-issues-with-your-coworkers-1b0ce08c3a8a\">https://medium.com/@TeamCoworker/a-simple-guide-to-talking-about-workplace-issues-with-your-coworkers-1b0ce08c3a8a</a></p><p></p><p><a href=\"https://medium.com/coryodaniel/from-erverless-to-elixir-48752db4d7bc\">https://medium.com/coryodaniel/from-erverless-to-elixir-48752db4d7bc</a></p><p></p><p><a href=\"https://medium.com/@copyconstruct/health-checks-in-distributed-systems-aa8a0e8c1672\">https://medium.com/@copyconstruct/health-checks-in-distributed-systems-aa8a0e8c1672</a></p><p></p><p><a href=\"http://www.aalto.fi/en/current/news/2018-07-30/\">http://www.aalto.fi/en/current/news/2018-07-30/</a></p><p></p><figure class=\"kg-card kg-embed-card\"><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">In my 30+ year programming career, every single, bizarrely obscure bug that took weeks to chase down has ended up being a one-line fix.</p>&mdash; Josh Susser (@joshsusser) <a href=\"https://twitter.com/joshsusser/status/1029480886033506304?ref_src=twsrc%5Etfw\">August 14, 2018</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</figure><p></p><p><a href=\"https://randomascii.wordpress.com/2018/08/16/24-core-cpu-and-i-cant-type-an-email-part-one/\">https://randomascii.wordpress.com/2018/08/16/24-core-cpu-and-i-cant-type-an-email-part-one/</a></p><p></p><p><a href=\"https://pudding.cool/2018/08/pockets/\">https://pudding.cool/2018/08/pockets/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-september-2nd/","uuid":"44a1e4c2-931b-4fbd-ad62-c256046373a4","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b77ab19ec281f15796ad2b4"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736e8","title":"Lynx Roundup, September 1st","slug":"lynx-roundup-september-1st","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/02/79-6@2x.jpg","excerpt":"Open science!  Awesome Scala tutorial!  JOINs in Postgres!","custom_excerpt":"Open science!  Awesome Scala tutorial!  JOINs in Postgres!","created_at_pretty":"18 August, 2018","published_at_pretty":"01 September, 2018","updated_at_pretty":"14 February, 2019","created_at":"2018-08-18T01:09:43.000-04:00","published_at":"2018-09-01T07:00:00.000-04:00","updated_at":"2019-02-14T05:20:33.000-05:00","meta_title":"Open science!  Awesome Scala tutorial!  JOINs in Postgres! | Hackers And Slackers","meta_description":"Open science!  Awesome Scala tutorial!  JOINs in Postgres!","og_description":"Open science!  Awesome Scala tutorial!  JOINs in Postgres!","og_image":"https://hackersandslackers.com/content/images/2019/02/79-6@2x.jpg","og_title":"Lynx Roundup, September 1st","twitter_description":"Open science!  Awesome Scala tutorial!  JOINs in Postgres!","twitter_image":"https://hackersandslackers.com/content/images/2019/02/79-6@2x.jpg","twitter_title":"Lynx Roundup, September 1st","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://mindhacks.com/2018/08/14/open-science-essentials-preprints/\n\n\n\nhttps://www.workplacefairness.org/independent-contractors\n\n\n\nhttps://medium.com/@durga.spirit/learning-scala-from-0-60-part-i-dc095d274b78\n\n\n\nhttps://medium.com/technomancy/the-math-required-for-machine-learning-af0d90db3903\n\n\n\nhttps://medium.com/walmartlabs/how-we-build-a-robust-analytics-platform-using-spark-kafka-and-cassandra-lambda-architecture-70c2d1bc8981\n\n\n\nhttps://www.brianlikespostgres.com/cost-of-a-join.html\n\n\n\nhttps://functional.works-hub.com/learn/functor-applicative-and-why-3c5b3","html":"<p></p><p><a href=\"https://mindhacks.com/2018/08/14/open-science-essentials-preprints/\">https://mindhacks.com/2018/08/14/open-science-essentials-preprints/</a></p><p></p><p><a href=\"https://www.workplacefairness.org/independent-contractors\">https://www.workplacefairness.org/independent-contractors</a></p><p></p><p><a href=\"https://medium.com/@durga.spirit/learning-scala-from-0-60-part-i-dc095d274b78\">https://medium.com/@durga.spirit/learning-scala-from-0-60-part-i-dc095d274b78</a></p><p></p><p><a href=\"https://medium.com/technomancy/the-math-required-for-machine-learning-af0d90db3903\">https://medium.com/technomancy/the-math-required-for-machine-learning-af0d90db3903</a></p><p></p><p><a href=\"https://medium.com/walmartlabs/how-we-build-a-robust-analytics-platform-using-spark-kafka-and-cassandra-lambda-architecture-70c2d1bc8981\">https://medium.com/walmartlabs/how-we-build-a-robust-analytics-platform-using-spark-kafka-and-cassandra-lambda-architecture-70c2d1bc8981</a></p><p></p><p><a href=\"https://www.brianlikespostgres.com/cost-of-a-join.html\">https://www.brianlikespostgres.com/cost-of-a-join.html</a></p><p></p><p><a href=\"https://functional.works-hub.com/learn/functor-applicative-and-why-3c5b3\">https://functional.works-hub.com/learn/functor-applicative-and-why-3c5b3</a></p><p></p>","url":"https://hackersandslackers.com/lynx-roundup-september-1st/","uuid":"23aec75e-72d1-46a5-b388-39da35b90c79","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b77aa17ec281f15796ad2b1"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736e7","title":"Lynx Roundup, August 31st","slug":"lynx-roundup-august-31st","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/80@2x.jpg","excerpt":"Self-tuning database data structures!  Parallel Python!  Pandas internals!","custom_excerpt":"Self-tuning database data structures!  Parallel Python!  Pandas internals!","created_at_pretty":"18 August, 2018","published_at_pretty":"31 August, 2018","updated_at_pretty":"03 September, 2018","created_at":"2018-08-18T01:06:07.000-04:00","published_at":"2018-08-31T13:00:00.000-04:00","updated_at":"2018-09-03T09:04:15.000-04:00","meta_title":"Self-tuning database data structures!  Parallel Python!  Pandas internals! | Hackers And Slackers","meta_description":"Self-tuning database data structures!  Parallel Python!  Pandas internals!","og_description":"Self-tuning database data structures!  Parallel Python!  Pandas internals!","og_image":"https://hackersandslackers.com/content/images/lynx/80@2x.jpg","og_title":"Lynx Roundup, August 31st","twitter_description":"Self-tuning database data structures!  Parallel Python!  Pandas internals!","twitter_image":"https://hackersandslackers.com/content/images/lynx/80@2x.jpg","twitter_title":"Lynx Roundup, August 31st","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.zdnet.com/article/zen-and-the-art-of-data-structures-from-self-tuning-to-self-designing-data-systems/\n\n\n\nhttps://www.gamedev.net/articles/programming/artificial-intelligence/the-total-beginners-guide-to-game-ai-r4942\n\n\n\nhttps://github.com/UIUC-PPL/charmpy\n\n\n\nhttps://medium.com/@NetflixTechBlog/notebook-innovation-591ee3221233\n\n\n\nhttps://tomaugspurger.github.io/pandas-moral-philosophy.html\n\n\n\nhttps://www.quantamagazine.org/how-insulin-helped-create-ant-societies-20180814/\n\n\n\nhttp://datagenetics.com/blog/august12018/index.html","html":"<p></p><p><a href=\"https://www.zdnet.com/article/zen-and-the-art-of-data-structures-from-self-tuning-to-self-designing-data-systems/\">https://www.zdnet.com/article/zen-and-the-art-of-data-structures-from-self-tuning-to-self-designing-data-systems/</a></p><p></p><p><a href=\"https://www.gamedev.net/articles/programming/artificial-intelligence/the-total-beginners-guide-to-game-ai-r4942\">https://www.gamedev.net/articles/programming/artificial-intelligence/the-total-beginners-guide-to-game-ai-r4942</a></p><p></p><p><a href=\"https://github.com/UIUC-PPL/charmpy\">https://github.com/UIUC-PPL/charmpy</a></p><p></p><p><a href=\"https://medium.com/@NetflixTechBlog/notebook-innovation-591ee3221233\">https://medium.com/@NetflixTechBlog/notebook-innovation-591ee3221233</a></p><p></p><p><a href=\"https://tomaugspurger.github.io/pandas-moral-philosophy.html\">https://tomaugspurger.github.io/pandas-moral-philosophy.html</a></p><p></p><p><a href=\"https://www.quantamagazine.org/how-insulin-helped-create-ant-societies-20180814/\">https://www.quantamagazine.org/how-insulin-helped-create-ant-societies-20180814/</a></p><p></p><p><a href=\"http://datagenetics.com/blog/august12018/index.html\">http://datagenetics.com/blog/august12018/index.html</a></p>","url":"https://hackersandslackers.com/lynx-roundup-august-31st/","uuid":"9c78194a-ded0-4817-a0cb-e4da8ddb7048","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b77a93fec281f15796ad2ae"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736e6","title":"Lynx Roundup, August 30th","slug":"lynx-roundup-august-30th-2","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx62@2x.jpg","excerpt":"Robots persuading you to not shut them off!  Upping your Git game!  More-readable RegEx!","custom_excerpt":"Robots persuading you to not shut them off!  Upping your Git game!  More-readable RegEx!","created_at_pretty":"18 August, 2018","published_at_pretty":"30 August, 2018","updated_at_pretty":"30 August, 2018","created_at":"2018-08-18T01:02:18.000-04:00","published_at":"2018-08-30T07:00:00.000-04:00","updated_at":"2018-08-30T07:00:00.000-04:00","meta_title":"Robots persuading you to not shut them off!  Upping your Git game!  More-readable RegEx! | Hackers And Slackers","meta_description":"Robots persuading you to not shut them off!  Upping your Git game!  More-readable RegEx!","og_description":"Robots persuading you to not shut them off!  Upping your Git game!  More-readable RegEx!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx62@2x.jpg","og_title":"Lynx Roundup, August 30th","twitter_description":"Robots persuading you to not shut them off!  Upping your Git game!  More-readable RegEx!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx62@2x.jpg","twitter_title":"Lynx Roundup, August 30th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"http://jkk.name/neural-tagger-tutorial/\n\n\n\nhttp://journals.plos.org/plosone/article?id=10.1371/journal.pone.0201581\n\n\n\nhttps://realpython.com/advanced-git-for-pythonistas/\n\n\n\nhttps://neurosciencenews.com/anger-intelligence-narcissists-9695/\n\n\n\nhttps://machinelearningmastery.com/statistical-hypothesis-tests-in-python-cheat-sheet/\n\n\n\nhttps://dev.to/bachnxhedspi/verbalexpressions---regularexpression-made-easy-27a8\n\n\n\nhttps://hackernoon.com/rethinking-fast-and-slow-in-data-science-b2ce18d5b054","html":"<p></p><p><a href=\"http://jkk.name/neural-tagger-tutorial/\">http://jkk.name/neural-tagger-tutorial/</a></p><p></p><p><a href=\"http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0201581\">http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0201581</a></p><p></p><p><a href=\"https://realpython.com/advanced-git-for-pythonistas/\">https://realpython.com/advanced-git-for-pythonistas/</a></p><p></p><p><a href=\"https://neurosciencenews.com/anger-intelligence-narcissists-9695/\">https://neurosciencenews.com/anger-intelligence-narcissists-9695/</a></p><p></p><p><a href=\"https://machinelearningmastery.com/statistical-hypothesis-tests-in-python-cheat-sheet/\">https://machinelearningmastery.com/statistical-hypothesis-tests-in-python-cheat-sheet/</a></p><p></p><p><a href=\"https://dev.to/bachnxhedspi/verbalexpressions---regularexpression-made-easy-27a8\">https://dev.to/bachnxhedspi/verbalexpressions---regularexpression-made-easy-27a8</a></p><p></p><p><a href=\"https://hackernoon.com/rethinking-fast-and-slow-in-data-science-b2ce18d5b054\">https://hackernoon.com/rethinking-fast-and-slow-in-data-science-b2ce18d5b054</a></p>","url":"https://hackersandslackers.com/lynx-roundup-august-30th-2/","uuid":"2904df8c-2799-43b8-a69a-648f294b4413","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b77a85aec281f15796ad2ab"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736e5","title":"Lynx Roundup, August 29th","slug":"lynx-roundup-august-30th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/78@2x.jpg","excerpt":"Getting the most out of Git!  Currying!  Python tail recursion!","custom_excerpt":"Getting the most out of Git!  Currying!  Python tail recursion!","created_at_pretty":"18 August, 2018","published_at_pretty":"29 August, 2018","updated_at_pretty":"02 September, 2018","created_at":"2018-08-18T00:58:29.000-04:00","published_at":"2018-08-29T07:00:00.000-04:00","updated_at":"2018-09-02T12:42:54.000-04:00","meta_title":"Getting the most out of Git!  Currying!  Python tail recursion! | Hackers And Slackers","meta_description":"Getting the most out of Git!  Currying!  Python tail recursion!","og_description":"Getting the most out of Git!  Currying!  Python tail recursion!","og_image":"https://hackersandslackers.com/content/images/lynx/78@2x.jpg","og_title":"Lynx Roundup, August 29th","twitter_description":"Getting the most out of Git!  Currying!  Python tail recursion!","twitter_image":"https://hackersandslackers.com/content/images/lynx/78@2x.jpg","twitter_title":"Lynx Roundup, August 29th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://portside.org/2018-08-08/tech-workers-and-flight-attendants-resist-immigrant-family-separation\n\n\n\nhttps://medium.freecodecamp.org/follow-these-simple-rules-and-youll-become-a-git-and-github-master-e1045057468f\n\n\n\nhttps://www.johndcook.com/blog/2018/08/11/currying/\n\n\n\nhttps://llvllatrix.wordpress.com/2018/08/06/sql-nested-window-functions-and-time-series/\n\n\n\nhttps://github.com/ac1235/python-tailrec\n\n\n\nhttps://github.com/Avik-Jain/100-Days-Of-ML-Code\n\n\n\nhttp://blogs.discovermagazine.com/crux/2018/08/10/kolmogorov-pattern-complexity-pattern-meaning-random/#.W3CkUCUpA0M","html":"<p></p><p><a href=\"https://portside.org/2018-08-08/tech-workers-and-flight-attendants-resist-immigrant-family-separation\">https://portside.org/2018-08-08/tech-workers-and-flight-attendants-resist-immigrant-family-separation</a></p><p></p><p><a href=\"https://medium.freecodecamp.org/follow-these-simple-rules-and-youll-become-a-git-and-github-master-e1045057468f\">https://medium.freecodecamp.org/follow-these-simple-rules-and-youll-become-a-git-and-github-master-e1045057468f</a></p><p></p><p><a href=\"https://www.johndcook.com/blog/2018/08/11/currying/\">https://www.johndcook.com/blog/2018/08/11/currying/</a></p><p></p><p><a href=\"https://llvllatrix.wordpress.com/2018/08/06/sql-nested-window-functions-and-time-series/\">https://llvllatrix.wordpress.com/2018/08/06/sql-nested-window-functions-and-time-series/</a></p><p></p><p><a href=\"https://github.com/ac1235/python-tailrec\">https://github.com/ac1235/python-tailrec</a></p><p></p><p><a href=\"https://github.com/Avik-Jain/100-Days-Of-ML-Code\">https://github.com/Avik-Jain/100-Days-Of-ML-Code</a></p><p></p><p><a href=\"http://blogs.discovermagazine.com/crux/2018/08/10/kolmogorov-pattern-complexity-pattern-meaning-random/#.W3CkUCUpA0M\">http://blogs.discovermagazine.com/crux/2018/08/10/kolmogorov-pattern-complexity-pattern-meaning-random/#.W3CkUCUpA0M</a></p>","url":"https://hackersandslackers.com/lynx-roundup-august-30th/","uuid":"d92580ee-ee2c-4ef8-9d3c-a02543f67f0c","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b77a775ec281f15796ad2a8"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736e3","title":"Lynx Roundup, August 28th","slug":"lynx-roundup-august-28th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx59-2@2x.jpg","excerpt":"Tweetable Python programs!  Mathematical optimization (there's more than just convex methods!)!    Book recommendations from data guru Hadley Wickham!","custom_excerpt":"Tweetable Python programs!  Mathematical optimization (there's more than just convex methods!)!    Book recommendations from data guru Hadley Wickham!","created_at_pretty":"18 August, 2018","published_at_pretty":"28 August, 2018","updated_at_pretty":"04 September, 2018","created_at":"2018-08-18T00:45:22.000-04:00","published_at":"2018-08-28T07:00:00.000-04:00","updated_at":"2018-09-04T01:15:30.000-04:00","meta_title":"Tweetable Python programs!  Mathematical optimization (there's more than just convex methods!)!    Book recommendations from data guru Hadley Wickham! | Hackers And Slackers","meta_description":"Tweetable Python programs!  Mathematical optimization (there's more than just convex methods!)!    Book recommendations from data guru Hadley Wickham!","og_description":"Tweetable Python programs!  Mathematical optimization (there's more than just convex methods!)!    Book recommendations from data guru Hadley Wickham!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx59-2@2x.jpg","og_title":"Lynx Roundup, August 28th","twitter_description":"Tweetable Python programs!  Mathematical optimization (there's more than just convex methods!)!    Book recommendations from data guru Hadley Wickham!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx59-2@2x.jpg","twitter_title":"Lynx Roundup, August 28th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://books.agiliq.com/projects/tweetable-python/en/latest/index.html\n\n\n\nhttps://github.com/bbli/ml_board\n\n\n\nhttps://pynative.com/python-mysql-tutorial/\n\n\n\nhttps://www.kdnuggets.com/2018/08/optimization-101-data-scientists.html\n\n\n\nhttps://jvns.ca/blog/2013/12/30/questions-im-asking-in-interviews/\n\n\n\nhttps://fivebooks.com/best-books/computer-science-data-science-hadley-wickham/\n\n\n\nhttps://www.spinellis.gr/blog/20180805/","html":"<p></p><p><a href=\"https://books.agiliq.com/projects/tweetable-python/en/latest/index.html\">https://books.agiliq.com/projects/tweetable-python/en/latest/index.html</a></p><p></p><p><a href=\"https://github.com/bbli/ml_board\">https://github.com/bbli/ml_board</a></p><p></p><p><a href=\"https://pynative.com/python-mysql-tutorial/\">https://pynative.com/python-mysql-tutorial/</a></p><p></p><p><a href=\"https://www.kdnuggets.com/2018/08/optimization-101-data-scientists.html\">https://www.kdnuggets.com/2018/08/optimization-101-data-scientists.html</a></p><p></p><p><a href=\"https://jvns.ca/blog/2013/12/30/questions-im-asking-in-interviews/\">https://jvns.ca/blog/2013/12/30/questions-im-asking-in-interviews/</a></p><p></p><p><a href=\"https://fivebooks.com/best-books/computer-science-data-science-hadley-wickham/\">https://fivebooks.com/best-books/computer-science-data-science-hadley-wickham/</a></p><p></p><p><a href=\"https://www.spinellis.gr/blog/20180805/\">https://www.spinellis.gr/blog/20180805/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-august-28th/","uuid":"273b8037-2c92-40bb-a240-3e2c25af7e29","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b77a462ec281f15796ad2a2"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736ea","title":"More API Columns, More Problems: Easily Adding DB Variables To Match New Input","slug":"add-db-variables-to-match-new-input-python-pandas","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/08/apidata@2x.jpg","excerpt":"Python, Pandas, & Functional Programming!","custom_excerpt":"Python, Pandas, & Functional Programming!","created_at_pretty":"22 August, 2018","published_at_pretty":"27 August, 2018","updated_at_pretty":"14 February, 2019","created_at":"2018-08-22T18:04:53.000-04:00","published_at":"2018-08-27T07:30:00.000-04:00","updated_at":"2019-02-13T22:48:04.000-05:00","meta_title":"Python, Pandas, & Functional Programming! | Hackers And Slackers","meta_description":"Python, Pandas, & Functional Programming!","og_description":"More API Columns, More Problems: Easily Adding DB Variables To Match New Input","og_image":"https://hackersandslackers.com/content/images/2018/08/apidata@2x.jpg","og_title":"More API Columns, More Problems: Easily Adding DB Variables To Match New Input","twitter_description":"Python, Pandas, & Functional Programming!","twitter_image":"https://hackersandslackers.com/content/images/2018/08/apidata@2x.jpg","twitter_title":"More API Columns, More Problems: Easily Adding DB Variables To Match New Input","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"REST APIs","slug":"restapis","description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","feature_image":null,"meta_description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","meta_title":"Consuming and Building REST APIs | Hackers and Slackers","visibility":"public"}],"plaintext":"APIs.  They're wonderful.  For every headache they've given me, I'm glad I live\nin the age where hitting an API endpoint is a standard way of retrieving data -\nI recently had to crawl a bunch of records from the Brazilian census in 200, and\nthat was an ordeal (but this isn't about that!).\n\nThe thing about APIs is that you generally shouldn't be hitting them all day\nlong - generally you should be doing regular imports to a database (or\nwhatever).  And the other thing about APIs is that they're not quite as fussy\nabout names as databases.  There's nothing stopping you from having the first\nrow of your API's output include field names like \"Account Canceled?\", which a\ntypical SQL RDBMS will not care for one bit.\n\nHow do we translate them?  Well, simple enough - we just have to think of\neverything that might be in our input string that won't be allowed in our\ndatabase, and change that!  I'm going to use the pipe  function from my beloved \ntoolz  library, provider of Functional Programming goodies for Python.\n\nfrom toolz import pipe\nimport string\n\ndef dbReady(toConvert):\n    return pipe(toConvert,\n                lambda x: x.lower(),\n                lambda x: filter(lambda y: \n                                y in string.ascii_lowercase + \" \",\n                                x),\n                lambda x: \"\".join(x),\n                lambda x: x.split(),\n                lambda x: \"_\".join(x))\n\n\n 1. We made it lowercase.\n 2. We filtered everything that wasn't a lowercase letter or a space.\n 3. We joined the filter back into a string.\n 4. We split the resulting string (in case we wound up with any double spaces,\n    such as from deleting a &.\n 5. We joined the list of strings with underscores.\n\ndbReady(\"Account Canceled?\")\n'account_canceled'\n\n\nFor comparison's sake, here's what that same function looks like without pipe\n\ndef dbReady(toConvert):\n    return '_'.join(\n               \"\".join(\n                   filter(lambda x:\n                          x in string.ascii_lowercase + \" \",\n                          (toConvert\n                           .lower()))\n                   ).split())\n\n\nBut wait!  There's more!\n\nWhat if your API changes?  Oh no, that could break your import!\n\nWell, if you don't care about the new columns, you could just filter them out.\n Let's say we have a list of lists called latestResponse  that came from a\nrequest to our API, with the first row as the labels.\n\nimport pymysql\nfrom sqlalchemy import create_engine\nimport sqlalchemy\nimport pandas as pd\n\nlatestCols = latestResponse[0]\n\n#Change to what they'll be in the database\ndbReadies = [dbReady(x) for x in latestCols] \n\n#Grab the columns currently in the database\ncnx = create_engine('mysql+pymysql://root:cracked1@localhost/appointments', echo=False)\ndbCols = pd.io.sql.read_sql_table(\"appointments_tableau\", \n                                  cnx).columns\n\n#Make a dataframe with what the columns would be named in a database\ndf = pd.DataFrame(latestResponse[1:], columns = dbReady)\n\n#Only select the columns that are currently in the db, and upload\ndf[dbCols].to_sql(name=\"my_table\",\n                  con=cnx, \n                  if_exists='append')\n\n\n\nBut what if you DO want the new columns from now on?  But you're already in the\nzone, don't feel like manually searching for which columns are new, and opening\na new terminal window to add the new variables?  What if you are, in a word,\nlazy?  And what if it's sorta important to preserve the order of the fields, and\nthe new ones are in the middle?\n\nNever fear!\n\nFirst, let's cook up a little function to produce an SQL ALTER TABLE  statement\n(standard disclaimers apply: do NOT do this blindly, or automatically).  Oh, and\nfor our purposes let's say these new columns all have the same type ( \nVARCHAR(255)), because if that's not the case then we have to be slightly less\nlazy. \n\ndef alterStatement(existingCol, newCol):\n    return (f\"ALTER TABLE appointments_tableau \"\n            f\"ADD COLUMN {newCol} VARCHAR(255) AFTER {existingCol};\")\n\n\nLet's use the wonderful sliding_window  function from toolz  to feed us a bunch\nof column names. \n\nExample from the official docs:\n\nlist(sliding_window(2, [1, 2, 3, 4]))\n[(1, 2), (2, 3), (3, 4)]\n\n\nBack to the show!\n\nfrom toolz.itertoolz import sliding_window\n\n#Get the variables that aren't currently in the db\nnewVars = [x for x in dbReadies if x not in dbCols]\n\n#Get a list where each entry is a tuple that has every new variable, and the existing preceding one\ntuples = list(sliding_window(2, dbReadies))\nnewVarTups = [x for x in tuples if x[1] in newVars]\n\n\nAnd, finally, let's set up our statements, and have Pandas execute them!  I know\nI promised I was going to start using SQLAlchemy for this kind of thing instead\nof unsanitized raw SQL, but I'm back on my bullshit again.\n\nfor x in newVarTups:\n    pd.io.sql.execute(alterStatement(*x), cnx)","html":"<p>APIs.  They're wonderful.  For every headache they've given me, I'm glad I live in the age where hitting an API endpoint is a standard way of retrieving data - I recently had to crawl a bunch of records from the Brazilian census in 200, and that was an ordeal (but this isn't about that!).</p><p>The thing about APIs is that you generally shouldn't be hitting them all day long - generally you should be doing regular imports to a database (or whatever).  And the other thing about APIs is that they're not quite as fussy about names as databases.  There's nothing stopping you from having the first row of your API's output include field names like \"Account Canceled?\", which a typical SQL RDBMS will not care for one bit.</p><p>How do we translate them?  Well, simple enough - we just have to think of everything that might be in our input string that won't be allowed in our database, and change that!  I'm going to use the <code>pipe</code> function from my beloved <code>toolz</code> library, provider of Functional Programming goodies for Python.</p><pre><code class=\"language-python\">from toolz import pipe\nimport string\n\ndef dbReady(toConvert):\n    return pipe(toConvert,\n                lambda x: x.lower(),\n                lambda x: filter(lambda y: \n                                y in string.ascii_lowercase + &quot; &quot;,\n                                x),\n                lambda x: &quot;&quot;.join(x),\n                lambda x: x.split(),\n                lambda x: &quot;_&quot;.join(x))\n</code></pre>\n<ol><li>We made it lowercase.</li><li>We filtered everything that wasn't a lowercase letter or a space.</li><li>We joined the filter back into a string.</li><li>We split the resulting string (in case we wound up with any double spaces, such as from deleting a <code>&amp;</code>.</li><li>We joined the list of strings with underscores.</li></ol><pre><code class=\"language-python\">dbReady(&quot;Account Canceled?&quot;)\n'account_canceled'\n</code></pre>\n<p>For comparison's sake, here's what that same function looks like without <code>pipe</code></p><pre><code class=\"language-python\">def dbReady(toConvert):\n    return '_'.join(\n               &quot;&quot;.join(\n                   filter(lambda x:\n                          x in string.ascii_lowercase + &quot; &quot;,\n                          (toConvert\n                           .lower()))\n                   ).split())\n</code></pre>\n<p>But wait!  There's more!</p><p>What if your API changes?  Oh no, that could break your import!</p><p>Well, if you don't care about the new columns, you could just filter them out.  Let's say we have a list of lists called <code>latestResponse</code> that came from a request to our API, with the first row as the labels.</p><pre><code class=\"language-python\">import pymysql\nfrom sqlalchemy import create_engine\nimport sqlalchemy\nimport pandas as pd\n\nlatestCols = latestResponse[0]\n\n#Change to what they'll be in the database\ndbReadies = [dbReady(x) for x in latestCols] \n\n#Grab the columns currently in the database\ncnx = create_engine('mysql+pymysql://root:cracked1@localhost/appointments', echo=False)\ndbCols = pd.io.sql.read_sql_table(&quot;appointments_tableau&quot;, \n                                  cnx).columns\n\n#Make a dataframe with what the columns would be named in a database\ndf = pd.DataFrame(latestResponse[1:], columns = dbReady)\n\n#Only select the columns that are currently in the db, and upload\ndf[dbCols].to_sql(name=&quot;my_table&quot;,\n                  con=cnx, \n                  if_exists='append')\n\n</code></pre>\n<p>But what if you DO want the new columns from now on?  But you're already in the zone, don't feel like manually searching for which columns are new, and opening a new terminal window to add the new variables?  What if you are, in a word, lazy?  And what if it's sorta important to preserve the order of the fields, and the new ones are in the middle?  </p><p>Never fear!</p><p>First, let's cook up a little function to produce an SQL <code>ALTER TABLE</code> statement (standard disclaimers apply: do NOT do this blindly, or automatically).  Oh, and for our purposes let's say these new columns all have the same type ( <code>VARCHAR(255)</code>), because if that's not the case then we have to be slightly less lazy. </p><pre><code class=\"language-python\">def alterStatement(existingCol, newCol):\n    return (f&quot;ALTER TABLE appointments_tableau &quot;\n            f&quot;ADD COLUMN {newCol} VARCHAR(255) AFTER {existingCol};&quot;)\n</code></pre>\n<p>Let's use the wonderful <code>sliding_window</code> function from <code>toolz</code> to feed us a bunch of column names. </p><p>Example from the <a href=\"https://toolz.readthedocs.io/en/latest/api.html#toolz.itertoolz.sliding_window\">official docs</a>:</p><pre><code class=\"language-python\">list(sliding_window(2, [1, 2, 3, 4]))\n[(1, 2), (2, 3), (3, 4)]\n</code></pre>\n<p>Back to the show!</p><pre><code class=\"language-python\">from toolz.itertoolz import sliding_window\n\n#Get the variables that aren't currently in the db\nnewVars = [x for x in dbReadies if x not in dbCols]\n\n#Get a list where each entry is a tuple that has every new variable, and the existing preceding one\ntuples = list(sliding_window(2, dbReadies))\nnewVarTups = [x for x in tuples if x[1] in newVars]\n</code></pre>\n<p>And, finally, let's set up our statements, and have Pandas execute them!  I know I promised I was going to start using SQLAlchemy for this kind of thing instead of unsanitized raw SQL, but I'm back on my bullshit again.</p><pre><code class=\"language-python\">for x in newVarTups:\n    pd.io.sql.execute(alterStatement(*x), cnx)\n</code></pre>\n","url":"https://hackersandslackers.com/add-db-variables-to-match-new-input-python-pandas/","uuid":"8c2a6558-0216-46bc-aaef-ef2ab08342a3","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b7dde05a2743b50f2e9edeb"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736e2","title":"Lynx Roundup, August 27th","slug":"lynx-roundup-august-27th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx58@2x.jpg","excerpt":"Agile machine learning!  Math for machine learning!  Pizza hyperspace!","custom_excerpt":"Agile machine learning!  Math for machine learning!  Pizza hyperspace!","created_at_pretty":"18 August, 2018","published_at_pretty":"27 August, 2018","updated_at_pretty":"27 August, 2018","created_at":"2018-08-18T00:39:57.000-04:00","published_at":"2018-08-27T07:00:00.000-04:00","updated_at":"2018-08-27T07:00:00.000-04:00","meta_title":"Agile machine learning!  Math for machine learning!  Pizza hyperspace! | Hackers And Slackers","meta_description":"Agile machine learning!  Math for machine learning!  Pizza hyperspace!","og_description":"Agile machine learning!  Math for machine learning!  Pizza hyperspace!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx58@2x.jpg","og_title":"Lynx Roundup, August 27th","twitter_description":"Agile machine learning!  Math for machine learning!  Pizza hyperspace!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx58@2x.jpg","twitter_title":"Lynx Roundup, August 27th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://medium.com/the-lever/running-agile-machine-learning-experiments-4d500314ab11\n\n\n\nhttps://blog.ycombinator.com/learning-math-for-machine-learning\n[https://blog.ycombinator.com/learning-math-for-machine-learning/?utm_campaign=Data_Elixir&utm_medium=email&utm_source=Data_Elixir_194]\n\n\n\nhttps://healthitanalytics.com/features/using-big-data-analytics-for-patient-safety-hospital-acquired-conditions\n\n\n\nhttps://gizmodo.com/the-algorithm-that-could-save-vulnerable-new-yorkers-fr-1826807459\n\n\n\nhttp://gduverger.com/secret-api-banks\n\n\n\nhttps://medium.com/@Nithanaroy/encoding-fixed-length-high-cardinality-non-numeric-columns-for-a-ml-algorithm-b1c910cb4e6d\n\n\n\nhttps://medium.com/topos-ai/on-dollar-slices-pizza-vectors-prosciutto-zones-and-topping-hyperspace-f163e7ebbccf","html":"<p></p><p><a href=\"https://medium.com/the-lever/running-agile-machine-learning-experiments-4d500314ab11\">https://medium.com/the-lever/running-agile-machine-learning-experiments-4d500314ab11</a></p><p></p><p><a href=\"https://blog.ycombinator.com/learning-math-for-machine-learning/?utm_campaign=Data_Elixir&amp;utm_medium=email&amp;utm_source=Data_Elixir_194\">https://blog.ycombinator.com/learning-math-for-machine-learning</a></p><p></p><p><a href=\"https://healthitanalytics.com/features/using-big-data-analytics-for-patient-safety-hospital-acquired-conditions\">https://healthitanalytics.com/features/using-big-data-analytics-for-patient-safety-hospital-acquired-conditions</a></p><p></p><p><a href=\"https://gizmodo.com/the-algorithm-that-could-save-vulnerable-new-yorkers-fr-1826807459\">https://gizmodo.com/the-algorithm-that-could-save-vulnerable-new-yorkers-fr-1826807459</a></p><p></p><p><a href=\"http://gduverger.com/secret-api-banks\">http://gduverger.com/secret-api-banks</a></p><p></p><p><a href=\"https://medium.com/@Nithanaroy/encoding-fixed-length-high-cardinality-non-numeric-columns-for-a-ml-algorithm-b1c910cb4e6d\">https://medium.com/@Nithanaroy/encoding-fixed-length-high-cardinality-non-numeric-columns-for-a-ml-algorithm-b1c910cb4e6d</a></p><p></p><p><a href=\"https://medium.com/topos-ai/on-dollar-slices-pizza-vectors-prosciutto-zones-and-topping-hyperspace-f163e7ebbccf\">https://medium.com/topos-ai/on-dollar-slices-pizza-vectors-prosciutto-zones-and-topping-hyperspace-f163e7ebbccf</a></p>","url":"https://hackersandslackers.com/lynx-roundup-august-27th/","uuid":"57b06b26-5832-470f-a087-c6a9a3762b4c","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b77a31dec281f15796ad29f"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736e1","title":"Lynx Roundup, August 26th","slug":"lynx-roundup-august-26th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx57-2@2x.jpg","excerpt":"Jupyter tips!  AutoKeras!  Data science interview questions!","custom_excerpt":"Jupyter tips!  AutoKeras!  Data science interview questions!","created_at_pretty":"18 August, 2018","published_at_pretty":"26 August, 2018","updated_at_pretty":"04 September, 2018","created_at":"2018-08-18T00:33:23.000-04:00","published_at":"2018-08-26T07:00:00.000-04:00","updated_at":"2018-09-04T01:16:14.000-04:00","meta_title":"Jupyter tips!  AutoKeras!  Data science interview questions! | Hackers And Slackers","meta_description":"Jupyter tips!  AutoKeras!  Data science interview questions!","og_description":"Jupyter tips!  AutoKeras!  Data science interview questions!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx57-2@2x.jpg","og_title":"Lynx Roundup, August 26th","twitter_description":"Jupyter tips!  AutoKeras!  Data science interview questions!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx57-2@2x.jpg","twitter_title":"Lynx Roundup, August 26th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"http://blog.godatadriven.com/write-less-terrible-notebook-code\n\n\n\nhttps://neo4j.com/blog/data-modeling-pitfalls/\n\n\n\nhttps://medium.com/imandra/scalable-deep-symbolic-reinforcement-learning-with-imandra-part-i-346ebb67433a\n\n\n\nhttps://twobithistory.org/2018/08/05/where-vim-came-from.html\n\n\n\nhttps://www.quora.com/How-do-you-judge-a-good-Data-scientist-with-just-5-questions\n\n\n\nhttps://github.com/jhfjhfj1/autokeras\n\n\n\nhttps://gizmodo.com/facebook-wanted-us-to-kill-this-investigative-tool-1826620111","html":"<p></p><p><a href=\"http://blog.godatadriven.com/write-less-terrible-notebook-code\">http://blog.godatadriven.com/write-less-terrible-notebook-code</a></p><p></p><p><a href=\"https://neo4j.com/blog/data-modeling-pitfalls/\">https://neo4j.com/blog/data-modeling-pitfalls/</a></p><p></p><p><a href=\"https://medium.com/imandra/scalable-deep-symbolic-reinforcement-learning-with-imandra-part-i-346ebb67433a\">https://medium.com/imandra/scalable-deep-symbolic-reinforcement-learning-with-imandra-part-i-346ebb67433a</a></p><p></p><p><a href=\"https://twobithistory.org/2018/08/05/where-vim-came-from.html\">https://twobithistory.org/2018/08/05/where-vim-came-from.html</a></p><p></p><p><a href=\"https://www.quora.com/How-do-you-judge-a-good-Data-scientist-with-just-5-questions\">https://www.quora.com/How-do-you-judge-a-good-Data-scientist-with-just-5-questions</a></p><p></p><p><a href=\"https://github.com/jhfjhfj1/autokeras\">https://github.com/jhfjhfj1/autokeras</a></p><p></p><p><a href=\"https://gizmodo.com/facebook-wanted-us-to-kill-this-investigative-tool-1826620111\">https://gizmodo.com/facebook-wanted-us-to-kill-this-investigative-tool-1826620111</a></p>","url":"https://hackersandslackers.com/lynx-roundup-august-26th/","uuid":"ed64dccc-2e59-4a72-bde6-2b1fdf49379b","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b77a193ec281f15796ad29c"}}]}},"pageContext":{"slug":"matt","limit":12,"skip":156,"numberOfPages":24,"humanPageNumber":14,"prevPageNumber":13,"nextPageNumber":15,"previousPagePath":"/author/matt/page/13/","nextPagePath":"/author/matt/page/15/"}}