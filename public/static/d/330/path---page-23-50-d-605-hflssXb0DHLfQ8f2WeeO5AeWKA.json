{"data":{"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736b2","title":"Lynx Roundup, July 26th","slug":"lynx-roundup-july-26th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/04/159-3.jpg","excerpt":"Map data!  Clean scientific code!  Some Quora questions I thought were cool!","custom_excerpt":"Map data!  Clean scientific code!  Some Quora questions I thought were cool!","created_at_pretty":"21 July, 2018","published_at_pretty":"26 July, 2018","updated_at_pretty":"10 April, 2019","created_at":"2018-07-20T22:10:16.000-04:00","published_at":"2018-07-26T07:00:00.000-04:00","updated_at":"2019-04-10T04:23:10.000-04:00","meta_title":"Map data!  Clean scientific code!  Some Quora questions I thought were cool! | Hackers And Slackers","meta_description":"Map data!  Clean scientific code!  Some Quora questions I thought were cool!","og_description":"Map data!  Clean scientific code!  Some Quora questions I thought were cool!","og_image":"https://hackersandslackers.com/content/images/2019/04/159-5.jpg","og_title":"Lynx Roundup, July 26th","twitter_description":"Map data!  Clean scientific code!  Some Quora questions I thought were cool!","twitter_image":"https://hackersandslackers.com/content/images/2019/04/159-4.jpg","twitter_title":"Lynx Roundup, July 26th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"http://geoffboeing.com/2018/07/comparing-city-street-orientations/\n\n\n\nhttps://softwareengineering.stackexchange.com/questions/373633/programming-cleanly-when-writing-scientific-code\n\n\n\nhttps://www.quora.com/What-is-the-most-interesting-algorithm\n\n\n\nhttps://www.quora.com/What-are-the-10-algorithms-one-must-know-in-order-to-solve-most-algorithm-problems\n\n\n\nhttps://www.quora.com/What-are-the-most-interesting-Stack-Overflow-questions","html":"<p></p><p><a href=\"http://geoffboeing.com/2018/07/comparing-city-street-orientations/\">http://geoffboeing.com/2018/07/comparing-city-street-orientations/</a></p><p></p><p><a href=\"https://softwareengineering.stackexchange.com/questions/373633/programming-cleanly-when-writing-scientific-code\">https://softwareengineering.stackexchange.com/questions/373633/programming-cleanly-when-writing-scientific-code</a></p><p></p><p><a href=\"https://www.quora.com/What-is-the-most-interesting-algorithm\">https://www.quora.com/What-is-the-most-interesting-algorithm</a></p><p></p><p><a href=\"https://www.quora.com/What-are-the-10-algorithms-one-must-know-in-order-to-solve-most-algorithm-problems\">https://www.quora.com/What-are-the-10-algorithms-one-must-know-in-order-to-solve-most-algorithm-problems</a></p><p></p><p><a href=\"https://www.quora.com/What-are-the-most-interesting-Stack-Overflow-questions\">https://www.quora.com/What-are-the-most-interesting-Stack-Overflow-questions</a></p>","url":"https://hackersandslackers.com/lynx-roundup-july-26th/","uuid":"7e544784-e6c1-429a-a462-1ea01d8f6cdb","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b529608529141018f9dacf9"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736c5","title":"Hacking Your Tableau Linux Server","slug":"hacking-linux-tableau-server","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/07/hacktableau@2x.jpg","excerpt":"Cracking Tableau's master Postgres account.","custom_excerpt":"Cracking Tableau's master Postgres account.","created_at_pretty":"26 July, 2018","published_at_pretty":"26 July, 2018","updated_at_pretty":"02 February, 2019","created_at":"2018-07-26T03:17:59.000-04:00","published_at":"2018-07-26T05:55:50.000-04:00","updated_at":"2019-02-02T04:23:43.000-05:00","meta_title":"Cracking Tableau's master Postgres account | Hackers And Slackers","meta_description":"BI tools are great for understanding preexisting data, but they don't allow us to go much further. Your data is with them, and it's not going anywhere else.","og_description":"BI tools are great for understanding preexisting data, they don't go much further. Your data is with them, and it's not going anywhere else.","og_image":"https://hackersandslackers.com/content/images/2018/07/hacktableau@2x.jpg","og_title":"Hacking Your Tableau Linux Server","twitter_description":"BI tools are great for understanding preexisting data, they don't go much further. Your data is with them, and it's not going anywhere else.","twitter_image":"https://hackersandslackers.com/content/images/2018/07/hacktableau@2x.jpg","twitter_title":"Hacking Your Tableau Linux Server","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Tableau","slug":"tableau","description":"Dissect Tableau server and implement hacks to improve your workflow, or simply become familiar with the Tableau desktop user interface.","feature_image":null,"meta_description":"Dissect Tableau server and implement hacks to improve your workflow, or simply become familiar with the Tableau desktop user interface.","meta_title":"Tableau Desktop & Server | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Tableau","slug":"tableau","description":"Dissect Tableau server and implement hacks to improve your workflow, or simply become familiar with the Tableau desktop user interface.","feature_image":null,"meta_description":"Dissect Tableau server and implement hacks to improve your workflow, or simply become familiar with the Tableau desktop user interface.","meta_title":"Tableau Desktop & Server | Hackers and Slackers","visibility":"public"},{"name":"BI","slug":"business-intelligence","description":"Business Intelligence, otherwise known as \"making nice reports for executives to ignore.\"","feature_image":null,"meta_description":null,"meta_title":"Business Intelligence Tools | Hackers and Slackers","visibility":"public"},{"name":"DevOps","slug":"devops","description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","feature_image":null,"meta_description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","meta_title":"DevOps: Networking And Server Configuration | Hackers and Slackers","visibility":"public"},{"name":"Data Engineering","slug":"dataengineering","description":"The systematic collection and transformation of data via the creation of tools and pipelines.","feature_image":null,"meta_description":null,"meta_title":"Data Engineering | Hackers and Slackers","visibility":"public"},{"name":"#Hacking Tableau Server","slug":"hacking-tableau-server","description":"Break free from the constraints of the TSM CLI to bend Tableau Server to your will. Uncover Superadmin privileges, or even rewire Tableau to handle ETL.","feature_image":"https://hackersandslackers.com/content/images/2019/03/tableauseries-2.jpg","meta_description":"Break free from the constraints of the TSM CLI to bend Tableau Server to your will. Uncover Superadmin privileges, or even rewire Tableau to handle ETL.","meta_title":"Hacking Tableau Server","visibility":"internal"}],"plaintext":"Let's say you're a Data Scientist. Well, maybe not a data scientist- I mean,\nthose online data analysis courses were definitely worth it, and you'd made it\nthis far without being quizzed on Bayesian linear regression. So maybe you're an\nanalyst or something, but whatever:  you use Tableau, So you must be a\nScientist™.\n\nI've admitted a few times in the past to have purchased a personal Tableau\nServer license in my more ignorant years (aka a few months ago). While BI tools\nare great for understanding preexisting data, they don't allow us to go much\nfurther. This is is entirely by design. Sure, you can clean and slice your data\nand put it into a cute iFrame dashboard, but Tableau explicitly makes one thing\nexplicitly clear in their product design choices: your data is with them, and\nit's not going anywhere else. Today we're going to take a step towards changing\nthat.\n\nProprietary Product Design: Crimes Against Customers\nTableau has explicit hierarchies for information, but let's start with \nworkbooks.  Workbooks are basically spreadsheets, or in other words,  \ncollections of SQL query outputs against a data source (or multiple data\nsources) via a clean UI. The resulting tabular data is referred to as views. An\nExcel user might equate these to \"sheets\", but a SQL user understands that these\nfunction more like a materialized view of sorts. One would think the tables we\ncreate (from our own data) inherently belongs to us, but it doesn't. Not until\nyou get clever.\n\nI realize Tableau maybe be at the top of the market for its niche.... so the\nthings I'm claiming may seem a little farfetched. Why am I so convinced that\nTableau wants to lock your data? Stay with me here, and let me count the ways.\n\nCommon Courtesy API Visibility\nCommon knowledge suggest that visible APIs attracts development talent. The more\nintelligent people are exposed to your product, the more like they are to\ncontribute. What happens if we check out the API response calls in our browser\nwhen viewing  Worksheet on Tableau Server?\n\nLet's just agree this is all useless.While this level of unnecessary paranoia on\nTableau's part is distasteful, let's not forget that we're dealing with a\nproduct archaic enough to preview Windows server support over Linux. The\nnarrative begins to make sense.\n\nPostgres Hide and Seek\nTableau Server is running a Postgres database; really nothing magical happening\nhere. Well, other than the database has been renamed, protected, and obfuscated\nin a way that even the server owner would struggle with. The default commands to\ninteract with PostgreSQL are hidden from server admins altogether.\n\n$ psql postgres -u toddbirchard -p\nThe program 'psql' is currently not installed. To run 'psql' please ask your administrator to install the package 'postgresql-client-common'\n\n-------------------\n\n$ sudo -u postgres psql postgres\nsudo: unknown user: postgres\nsudo: unable to initialize policy plugin\n\n-------------------\n\n$ sudo -u toddbirchard psql postgres\nsudo: psql: command not found\n\n-------------------\n\n$ psql\npsql: could not connect to server: No such file or directory\n        Is the server running locally and accepting\n        connections on Unix domain socket \"/var/run/postgresql/.s.PGSQL.5432\"?\n\n-------------------\n\n$ pgsql\nNo command 'pgsql' found, did you mean:\n Command 'psql' from package 'postgresql-client-common' (main)\npgsql: command not found\n\n\nWhat if we do a search?\n\n$ locate postgresql\n\n/etc/postgresql-common\n/etc/postgresql-common/user_clusters\n/opt/tableau-postgresql-odbc_9.5.3_amd64.deb\n/opt/tableau/tableau_driver/postgresql-odbc\n/opt/tableau/tableau_driver/postgresql-odbc/psqlodbcw.so\n/opt/tableau/tableau_server/packages/bin.20181.18.0510.1418/repo-jars/postgresql-9.4.1209.jar\n/opt/tableau/tableau_server/packages/clientfileservice.20181.18.0510.1418/postgresql-9.4.1208.jar\n/opt/tableau/tableau_server/packages/lib.20181.18.0510.1418/postgresql-9.4.1208.jar\n/opt/tableau/tableau_server/packages/lib.20181.18.0510.1418/postgresql-9.4.1209.jar\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/_int.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/adminpack.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/ascii_and_mic.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/auth_delay.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/auto_explain.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/autoinc.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/btree_gin.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/btree_gist.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/chkpass.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/citext.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/cube.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/cyrillic_and_mic.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/dblink.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/dict_int.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/dict_snowball.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/dict_xsyn.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/earthdistance.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/euc2004_sjis2004.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/euc_cn_and_mic.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/euc_jp_and_sjis.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/euc_kr_and_mic.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/euc_tw_and_big5.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/file_fdw.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/fuzzystrmatch.so\n\n\n...And so forth. There are over a thousand results. Postgres is definitely up\nand running, Tableau just hates you. Unfortunately for Tableau, this drove me to\nhate them back.\n\nEnter TSM: The Linux Tableau CLI\nOn Linux exclusively, TSM is intended to be your one tool to configure Tableau\nServer. It's a fine tool, but it just so happens to omit critical information\nand capabilities that somebody who owns their data  might want to know. At first\nglance, it seems innocent and helpful:\n\nCommand\n Explanation\n tsm configuration [parameters]\n -- Set customization for Tableau Server.\n tsm customize [parameters] -- Set customization for Tableau Server.\n tsm data-access [parameters]\n -- Category of commands related to data-access.\n tsm help | [category]\n -- Help for tsm commands\n .tsm initialize [parameters]\n -- Initialize Tableau Server\n tsm jobs [parameters]\n -- Category of commands related to async jobs.\n tsm licenses [parameters]\n -- Category of commands related to licensing.\n tsm login [parameters] -- Sign in to the TSM agent\n tsm logout -- Sign out from the TSM agent\n tsm maintenance [parameters]\n -- Category of commands related to maintenance.\n tsm pending-changes [parameters]\n -- Category of commands for pending changes.\n tsm register [parameters]\n -- Register the product\n tsm reset [parameters]\n -- Clears the initial admin user so you can enter a new one. Once reset is\ncompleted you will need to use the tabcmd initialuser command to create a new\ninitial user before remote users can sign in again\n tsm restart [parameters]\n -- Restart Tableau Server\n tsm security [parameters]\n -- Category of commands related to security configuration\n tsm settings [parameters]\n -- Category of commands related to configuration and topology settings\n tsm sites [parameters]\n -- Category of commands related to site import and export\n tsm start [parameters]\n -- Start Tableau Server\n tsm status [parameters]\n -- View Tableau Server status\n tsm stop [parameters]\n -- Stop Tableau Server\n tsm topology [parameters] -- Category of commands related to server topology\n tsm user-identity-store [parameters]\n -- Category of commands related to user-identity-store\n tsm version -- Displays version information.\n The Red Herring\nTableau owns Google results, period. Any search query containing the word\n\"Tableau\" is dominated with pages of content Tableau would prefer  you abide by,\nand of these things is the creation of a readonly  user to access the Postgres\ndatabase. The catch here is that the readonly  user can't read all tables at\nall: there are certain tables reserved specifically for a Postgres tableau\n\"Superuser\", which is utterly and entirely undocumented on Linux.  For all I\nknow, I my be the first to publish an article of this sort, but let's hope not.\n\nFirst, let's see which users exist on Postgres using TSM:\n\n$ tsm data-access repository-access list\n\nUser       Access\nTableau    true\nReadonly   true\n\n\nThere's that Readonly user we talked about: feel free to play around with that\nuser to create meaningless insights if you so please. On the other hand we have\na Tableau  user, which happens to be a Postgres superuser. If you don't feel\ncomfortable accessing Superuser privileges, I suggest you leave now. This is \nHackers And Slackers,  and we don't fuck around; especially when software to the\ntune of 1 thousand dollars hides our data from us.\n\nOperation Shock and Awe\nThere's a little command called tsm configuration  which lets you set some cute\nvariables for your server. The documentation is here\n[https://onlinehelp.tableau.com/current/server-linux/en-us/cli_configuration-set_tsm.htm]\n, but there's just one piece missing, and it's the one we need.\n\nTableau may be our Postgres Superuser, but what would its password possibly be?\nThis isn't documented anywhere. Consider this my gift to you:\n\n$ tsm configuration get -k pgsql.adminpassword\n145v756270d3467bv3140af5f01v5c7e4976bcee\n\n\nCould it be? Did Tableau intentionally prevent users from access PostgreSQL\ndirectly from command line and hide an undocumented password? Yes, it does all\nof those things. It's time to fuck shit up.\n\nClaim Ownership\nWe've made it this far. The bullet is in the chamber. Go ahead and take what is\nrightfully yours.\n\ntsm data-access repository-access enable --repository-username Tableau\n--repository-password 145v756270d3467bv3140af5f01v5c7e4976bcee\n\n\nJust make sure port 8060 is open on your VPC and you're in. Considering that\nthere are zero search results for accomplishing this on Linux, it looks like\nit's just you and me now. One of us may likely go mad with power and turn on one\nanother. That is the way of the Sith. Welcome.\n\nUnspeakable treasures lie within.Moving on Up\nFeel free to cruise the workgroup  database for now and wreck havoc. As fun as\nthis has been, I have another trick up my sleeve. You've spent a lot of time\nbuilding Worksheets and views; what if you could programmatically sync to an\nexternal database and autogenerate a schema for these views, updated on a\nscheduler, to source data for products you're building?\n\nThats sounds a lot like what a useful product would do. Stick around, and next\ntime we'll be beating Tableau down for everything its worth.","html":"<p>Let's say you're a Data Scientist. Well, maybe not a <em>data scientist- </em>I mean, those online data analysis courses were definitely worth it, and you'd made it this far without being quizzed on Bayesian linear regression. So maybe you're an analyst or something, but whatever:  you use Tableau, So you must be a Scientist™.</p><p>I've admitted a few times in the past to have purchased a personal Tableau Server license in my more ignorant years (aka a few months ago). While BI tools are great for understanding preexisting data, they don't allow us to go much further. This is is entirely by design. Sure, you can clean and slice your data and put it into a cute iFrame dashboard, but Tableau explicitly makes one thing explicitly clear in their product design choices: your data is with them, and it's not going anywhere else. Today we're going to take a step towards changing that.</p><h2 id=\"proprietary-product-design-crimes-against-customers\">Proprietary Product Design: Crimes Against Customers</h2><p>Tableau has explicit hierarchies for information, but let's start with <strong>workbooks.</strong> Workbooks are basically spreadsheets, or in other words,<strong> </strong>collections of SQL query outputs against a data source (or multiple data sources) via a clean UI. The resulting tabular data is referred to as <strong>views</strong>. An Excel user might equate these to \"sheets\", but a SQL user understands that these function more like a materialized view of sorts. One would think the tables we create (from our own data) inherently belongs to us, but it doesn't. Not until you get clever.</p><p>I realize Tableau maybe be at the top of the market for its niche.... so the things I'm claiming may seem a little farfetched. Why am I so convinced that Tableau wants to lock your data? Stay with me here, and let me count the ways.</p><h2 id=\"common-courtesy-api-visibility\">Common Courtesy API Visibility</h2><p>Common knowledge suggest that visible APIs attracts development talent. The more intelligent people are exposed to your product, the more like they are to contribute. What happens if we check out the API response calls in our browser when viewing  Worksheet on Tableau Server?</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-1.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/ezgif.com-gif-maker.gif\" class=\"kg-image\"><figcaption>Let's just agree this is all useless.</figcaption></figure><p>While this level of unnecessary paranoia on Tableau's part is distasteful, let's not forget that we're dealing with a product archaic enough to preview Windows server support over Linux. The narrative begins to make sense.</p><h3 id=\"postgres-hide-and-seek\">Postgres Hide and Seek</h3><p>Tableau Server is running a Postgres database; really nothing magical happening here. Well, other than the database has been renamed, protected, and obfuscated in a way that even the server owner would struggle with. The default commands to interact with PostgreSQL are hidden from server admins altogether.</p><pre><code class=\"language-bash\">$ psql postgres -u toddbirchard -p\nThe program 'psql' is currently not installed. To run 'psql' please ask your administrator to install the package 'postgresql-client-common'\n\n-------------------\n\n$ sudo -u postgres psql postgres\nsudo: unknown user: postgres\nsudo: unable to initialize policy plugin\n\n-------------------\n\n$ sudo -u toddbirchard psql postgres\nsudo: psql: command not found\n\n-------------------\n\n$ psql\npsql: could not connect to server: No such file or directory\n        Is the server running locally and accepting\n        connections on Unix domain socket &quot;/var/run/postgresql/.s.PGSQL.5432&quot;?\n\n-------------------\n\n$ pgsql\nNo command 'pgsql' found, did you mean:\n Command 'psql' from package 'postgresql-client-common' (main)\npgsql: command not found\n</code></pre>\n<p>What if we do a search?</p><pre><code class=\"language-bash\">$ locate postgresql\n\n/etc/postgresql-common\n/etc/postgresql-common/user_clusters\n/opt/tableau-postgresql-odbc_9.5.3_amd64.deb\n/opt/tableau/tableau_driver/postgresql-odbc\n/opt/tableau/tableau_driver/postgresql-odbc/psqlodbcw.so\n/opt/tableau/tableau_server/packages/bin.20181.18.0510.1418/repo-jars/postgresql-9.4.1209.jar\n/opt/tableau/tableau_server/packages/clientfileservice.20181.18.0510.1418/postgresql-9.4.1208.jar\n/opt/tableau/tableau_server/packages/lib.20181.18.0510.1418/postgresql-9.4.1208.jar\n/opt/tableau/tableau_server/packages/lib.20181.18.0510.1418/postgresql-9.4.1209.jar\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/_int.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/adminpack.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/ascii_and_mic.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/auth_delay.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/auto_explain.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/autoinc.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/btree_gin.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/btree_gist.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/chkpass.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/citext.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/cube.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/cyrillic_and_mic.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/dblink.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/dict_int.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/dict_snowball.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/dict_xsyn.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/earthdistance.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/euc2004_sjis2004.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/euc_cn_and_mic.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/euc_jp_and_sjis.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/euc_kr_and_mic.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/euc_tw_and_big5.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/file_fdw.so\n/opt/tableau/tableau_server/packages/pgsql.20181.18.0510.1418/lib/postgresql/fuzzystrmatch.so\n</code></pre>\n<p>...And so forth. There are over a thousand results. Postgres is definitely up and running, Tableau just hates you. Unfortunately for Tableau, this drove me to hate them back.</p><h2 id=\"enter-tsm-the-linux-tableau-cli\">Enter TSM: The Linux Tableau CLI</h2><p>On Linux exclusively, TSM is intended to be your one tool to configure Tableau Server. It's a fine tool, but it just so happens to omit critical information and capabilities that somebody who <em>owns their data</em> might want to know. At first glance, it seems innocent and helpful:</p><style>\n    td{\n        min-width: 224px;\n            text-align: left;\n    padding: 10px 20px !important;\n            line-height: 1.3;\n        text-align: left !important;\n    }\n    </style>\n\n<table style=\"cellpadding=\" 10px\"=\"\">\n  <thead>\n    <th>Command</th>\n    <th>Explanation</th>\n  </thead>\n  <tbody>\n    <tr>\n      <td>tsm configuration [parameters]</td>\n      <td>-- Set customization for Tableau Server.</td>\n    </tr>\n    <tr>\n      <td>tsm customize [parameters] </td>\n      <td>-- Set customization for Tableau Server.</td>\n    </tr>\n    <tr>\n      <td>tsm data-access [parameters]</td>\n      <td>-- Category of commands related to data-access.</td>\n    </tr>\n    <tr>\n      <td>tsm help  | [category]</td>\n      <td>-- Help for tsm commands</td>\n    </tr>\n    <tr>\n      <td>.tsm initialize [parameters]</td>\n      <td>-- Initialize Tableau Server</td>\n    </tr>\n    <tr>\n      <td>tsm jobs [parameters]</td>\n      <td> -- Category of commands related to async jobs.</td>\n    </tr>\n    <tr>\n      <td>tsm licenses [parameters]</td>\n      <td>-- Category of commands related to licensing.</td>\n    </tr>\n    <tr>\n      <td>tsm login [parameters] </td>\n      <td>-- Sign in to the TSM agent</td>\n    </tr>\n    <tr>\n      <td>tsm logout </td>\n      <td>-- Sign out from the TSM agent</td>\n    </tr>\n    <tr>\n      <td>tsm maintenance  [parameters]</td>\n      <td>-- Category of commands related to maintenance.</td>\n    </tr>\n    <tr>\n      <td>tsm pending-changes [parameters]</td>\n      <td>-- Category of commands for pending changes.</td>\n    </tr>\n    <tr>\n      <td>tsm register [parameters]</td>\n      <td>-- Register the product</td>\n    </tr>\n    <tr>\n      <td>tsm reset [parameters]</td>\n      <td>-- Clears the initial admin user so you can enter a new one. Once reset is completed you will need to use the tabcmd initialuser command to create a new initial user before remote users can sign in again</td>\n    </tr>\n    <tr>\n      <td>tsm restart [parameters]</td>\n      <td>-- Restart Tableau Server</td>\n    </tr>\n    <tr>\n      <td>tsm security [parameters]</td>\n      <td>-- Category of commands related to security configuration</td>\n    </tr>\n    <tr>\n      <td>tsm settings [parameters]</td>\n      <td>-- Category of commands related to configuration and topology settings</td>\n    </tr>\n    <tr>\n      <td>tsm sites [parameters]</td>\n      <td>-- Category of commands related to site import and export</td>\n    </tr>\n    <tr>\n      <td>tsm start [parameters]</td>\n      <td>-- Start Tableau Server</td>\n    </tr>\n    <tr>\n      <td>tsm status [parameters]</td>\n      <td>-- View Tableau Server status</td>\n    </tr>\n    <tr>\n      <td>tsm stop [parameters]</td>\n      <td>-- Stop Tableau Server</td>\n    </tr>\n    <tr>\n      <td>tsm topology  [parameters] </td>\n      <td>-- Category of commands related to server topology</td>\n    </tr>\n    <tr>\n      <td>tsm user-identity-store [parameters]</td>\n      <td>-- Category of commands related to user-identity-store</td>\n    </tr>\n    <tr>\n      <td>tsm version </td>\n      <td>-- Displays version information.</td>\n    </tr>\n  </tbody>\n</table>\n<!-- DivTable.com -->\n<h2 id=\"the-red-herring\">The Red Herring</h2><p>Tableau owns Google results, period. Any search query containing the word \"Tableau\" is dominated with pages of content Tableau would <em>prefer</em> you abide by, and of these things is the creation of a <em>readonly</em> user to access the Postgres database. The catch here is that the <strong>readonly</strong> user can't read all tables at all: there are certain tables reserved specifically for a Postgres tableau \"Superuser\", which is <em>utterly and entirely undocumented on Linux.</em> For all I know, I my be the first to publish an article of this sort, but let's hope not.</p><p>First, let's see which users exist on Postgres using TSM:</p><pre><code class=\"language-bash\">$ tsm data-access repository-access list\n\nUser       Access\nTableau    true\nReadonly   true\n</code></pre>\n<p>There's that Readonly user we talked about: feel free to play around with that user to create meaningless insights if you so please. On the other hand we have a <strong>Tableau</strong> user, which happens to be a Postgres superuser. If you don't feel comfortable accessing Superuser privileges, I suggest you leave now. This is <strong>Hackers And Slackers,</strong> and we don't fuck around; especially when software to the tune of 1 thousand dollars hides our data from us.</p><h2 id=\"operation-shock-and-awe\">Operation Shock and Awe</h2><p>There's a little command called <code>tsm configuration</code> which lets you set some cute variables for your server. The documentation is <a href=\"https://onlinehelp.tableau.com/current/server-linux/en-us/cli_configuration-set_tsm.htm\">here</a>, but there's just one piece missing, and it's the one we need.</p><p><strong>Tableau </strong>may be our Postgres Superuser, but what would its password possibly be? This isn't documented anywhere. Consider this my gift to you:</p><pre><code class=\"language-bash\">$ tsm configuration get -k pgsql.adminpassword\n145v756270d3467bv3140af5f01v5c7e4976bcee\n</code></pre>\n<p>Could it be? Did Tableau intentionally prevent users from access PostgreSQL directly from command line and hide an undocumented password? Yes, it does all of those things. It's time to fuck shit up.</p><h2 id=\"claim-ownership\">Claim Ownership</h2><p>We've made it this far. The bullet is in the chamber. Go ahead and take what is rightfully yours.</p><pre><code class=\"language-bash\">tsm data-access repository-access enable --repository-username Tableau\n--repository-password 145v756270d3467bv3140af5f01v5c7e4976bcee\n</code></pre>\n<p>Just make sure port 8060 is open on your VPC and you're in. Considering that there are zero search results for accomplishing this on Linux, it looks like it's just you and me now. One of us may likely go mad with power and turn on one another. That is the way of the Sith. Welcome.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/winner.png\" class=\"kg-image\"><figcaption>Unspeakable treasures lie within.</figcaption></figure><h2 id=\"moving-on-up\">Moving on Up</h2><p>Feel free to cruise the <strong>workgroup</strong> database for now and wreck havoc. As fun as this has been, I have another trick up my sleeve. You've spent a lot of time building Worksheets and views; what if you could programmatically sync to an external database and autogenerate a schema for these views, updated on a scheduler, to source data for products you're building?</p><p>Thats sounds a lot like what a useful product would do. Stick around, and next time we'll be beating Tableau down for everything its worth. </p>","url":"https://hackersandslackers.com/hacking-linux-tableau-server/","uuid":"4bcb1c4b-bbe2-428c-b7ee-fa7adc751973","page":false,"codeinjection_foot":"<script>\n    hljs.configure({languages:['bash']});\n</script>","codeinjection_head":"","comment_id":"5b5975a75c6b8259b902b66a"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736b1","title":"Lynx Roundup, July 25th","slug":"lynx-roundup-july-25th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx18@2x.jpg","excerpt":"Analyzing images!  Ethical data!  What people think when they hear \"Possibly\"!","custom_excerpt":"Analyzing images!  Ethical data!  What people think when they hear \"Possibly\"!","created_at_pretty":"21 July, 2018","published_at_pretty":"25 July, 2018","updated_at_pretty":"25 July, 2018","created_at":"2018-07-20T22:07:55.000-04:00","published_at":"2018-07-25T07:00:00.000-04:00","updated_at":"2018-07-25T07:00:00.000-04:00","meta_title":"Analyzing images!  Ethical data!  What people think when they hear \"Possibly\"! | Hackers And Slackers","meta_description":"Analyzing images!  Ethical data!  What people think when they hear \"Possibly\"!","og_description":"Analyzing images!  Ethical data!  What people think when they hear \"Possibly\"!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx18@2x.jpg","og_title":"Lynx Roundup, July 25th","twitter_description":"Analyzing images!  Ethical data!  What people think when they hear \"Possibly\"!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx18@2x.jpg","twitter_title":"Lynx Roundup, July 25th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.mobihealthnews.com/content/prototype-uses-googles-radar-ai-tech-noninvasively-measure-glucose-levels\n\n\n\nhttps://flowingdata.com/2018/07/06/how-people-interpret-probability-through-words/\n\n\n\nhttp://mattturck.com/bigdata2018/\n\n\n\nhttps://www.kdnuggets.com/2018/07/basic-image-data-analysis-numpy-opencv-p1.html\n\n\n\nhttps://machinelearningmastery.com/effect-size-measures-in-python/","html":"<p></p><p><a href=\"https://www.mobihealthnews.com/content/prototype-uses-googles-radar-ai-tech-noninvasively-measure-glucose-levels\">https://www.mobihealthnews.com/content/prototype-uses-googles-radar-ai-tech-noninvasively-measure-glucose-levels</a></p><p></p><p><a href=\"https://flowingdata.com/2018/07/06/how-people-interpret-probability-through-words/\">https://flowingdata.com/2018/07/06/how-people-interpret-probability-through-words/</a></p><p></p><p><a href=\"http://mattturck.com/bigdata2018/\">http://mattturck.com/bigdata2018/</a></p><p></p><p><a href=\"https://www.kdnuggets.com/2018/07/basic-image-data-analysis-numpy-opencv-p1.html\">https://www.kdnuggets.com/2018/07/basic-image-data-analysis-numpy-opencv-p1.html</a></p><p></p><p><a href=\"https://machinelearningmastery.com/effect-size-measures-in-python/\">https://machinelearningmastery.com/effect-size-measures-in-python/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-july-25th/","uuid":"03bdff08-3af8-480c-a764-52c83c68fb20","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b52957b529141018f9dacf6"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736b0","title":"Lynx Roundup, July 24th","slug":"lynx-roundup-july-24th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx17@2x.jpg","excerpt":"Databases!  Parallelizing Pandas!  Massive treasure trove of research on data visualizations!","custom_excerpt":"Databases!  Parallelizing Pandas!  Massive treasure trove of research on data visualizations!","created_at_pretty":"21 July, 2018","published_at_pretty":"24 July, 2018","updated_at_pretty":"25 July, 2018","created_at":"2018-07-20T22:05:38.000-04:00","published_at":"2018-07-24T07:00:00.000-04:00","updated_at":"2018-07-24T22:06:04.000-04:00","meta_title":"Databases!  Parallelizing Pandas!  Massive treasure trove of research on data visualizations! | Hackers And Slackers","meta_description":"Databases!  Parallelizing Pandas!  Massive treasure trove of research on data visualizations!","og_description":"Databases!  Parallelizing Pandas!  Massive treasure trove of research on data visualizations!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx17@2x.jpg","og_title":"Lynx Roundup, July 24th","twitter_description":"Databases!  Parallelizing Pandas!  Massive treasure trove of research on data visualizations!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx17@2x.jpg","twitter_title":"Lynx Roundup, July 24th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.dataquest.io/blog/data-science-project-style-guide/\n\n\n\nhttps://rise.cs.berkeley.edu/blog/pandas-on-ray-early-lessons/\n[https://rise.cs.berkeley.edu/blog/pandas-on-ray-early-lessons/?utm_campaign=Data_Elixir&utm_medium=email&utm_source=Data_Elixir_190]\n\n\n\nhttps://thomaslarock.com/2018/07/databases-101/\n[https://thomaslarock.com/2018/07/databases-101/?utm_campaign=Data_Elixir&utm_medium=email&utm_source=Data_Elixir_190]\n\n\n\nhttps://github.com/mathisonian/awesome-visualization-research\n[https://github.com/mathisonian/awesome-visualization-research?utm_campaign=Data_Elixir&utm_medium=email&utm_source=Data_Elixir_190]\n\n\n\nhttps://johncarlosbaez.wordpress.com/2018/07/10/random-points-on-a-sphere-part-1/","html":"<p></p><p><a href=\"https://www.dataquest.io/blog/data-science-project-style-guide/\">https://www.dataquest.io/blog/data-science-project-style-guide/</a></p><p></p><p><a href=\"https://rise.cs.berkeley.edu/blog/pandas-on-ray-early-lessons/?utm_campaign=Data_Elixir&amp;utm_medium=email&amp;utm_source=Data_Elixir_190\">https://rise.cs.berkeley.edu/blog/pandas-on-ray-early-lessons/</a></p><p></p><p><a href=\"https://thomaslarock.com/2018/07/databases-101/?utm_campaign=Data_Elixir&amp;utm_medium=email&amp;utm_source=Data_Elixir_190\">https://thomaslarock.com/2018/07/databases-101/</a></p><p></p><p><a href=\"https://github.com/mathisonian/awesome-visualization-research?utm_campaign=Data_Elixir&amp;utm_medium=email&amp;utm_source=Data_Elixir_190\">https://github.com/mathisonian/awesome-visualization-research</a></p><p></p><p><a href=\"https://johncarlosbaez.wordpress.com/2018/07/10/random-points-on-a-sphere-part-1/\">https://johncarlosbaez.wordpress.com/2018/07/10/random-points-on-a-sphere-part-1/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-july-24th/","uuid":"1c4d6683-d910-47bd-9442-bf382e708437","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b5294f2529141018f9dacf3"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736ac","title":"Trash Pandas: Messy, Convenient DB Operations via Pandas","slug":"trash-pandas","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/07/racoon@2x.jpg","excerpt":"(And a way to clean it up with SQLAlchemy).","custom_excerpt":"(And a way to clean it up with SQLAlchemy).","created_at_pretty":"19 July, 2018","published_at_pretty":"23 July, 2018","updated_at_pretty":"17 November, 2018","created_at":"2018-07-18T20:26:25.000-04:00","published_at":"2018-07-23T08:30:00.000-04:00","updated_at":"2018-11-16T20:50:25.000-05:00","meta_title":"(And a way to clean it up with SQLAlchemy) | Hackers And Slackers","meta_description":"Python has an extremely handy little tool called f-strings that make string templating a snap!  ","og_description":"Trash Pandas: Messy, Convenient DB Operations via Pandas","og_image":"https://hackersandslackers.com/content/images/2018/07/racoon@2x.jpg","og_title":"Trash Pandas: Messy, Convenient DB Operations via Pandas","twitter_description":"(And a way to clean it up with SQLAlchemy)","twitter_image":"https://hackersandslackers.com/content/images/2018/07/racoon@2x.jpg","twitter_title":"Trash Pandas: Messy, Convenient DB Operations via Pandas","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Pandas","slug":"pandas","description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/pandasmerge.jpg","meta_description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","meta_title":"Pythons and Pandas | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Pandas","slug":"pandas","description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/pandasmerge.jpg","meta_description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","meta_title":"Pythons and Pandas | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Data Science","slug":"datascience","description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","feature_image":null,"meta_description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","meta_title":"Data Science | Hackers and Slackers","visibility":"public"},{"name":"#Data Analysis with Pandas","slug":"data-analysis-pandas","description":"Analyze data with Python's Pandas. Start from the basics or see real-life examples of using Pandas to solve problems.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/pandasseries-1.jpg","meta_description":"Analyze data with Python's Pandas. Start from the basics or see real-life examples of using Pandas to solve problems.","meta_title":"Data Analysis with Pandas","visibility":"internal"}],"plaintext":"Let's say you were continuing our task from last week\n[https://hackersandslackers.com/code-snippet-corner-a-dirty-way-of-cleaning-data-ft-pandas-sql/]\n: Taking a bunch of inconsistent Excel files and CSVs, and putting them into a\ndatabase.\n\nLet's say you've been given a new CSV that conflicts with some rows you've\nalready entered, and you're told that these rows are the correct values.\n\nWhy Not Use Pandas' Built-in Method?\nPandas' built-in to_sql  DataFrame method won't be useful here.  Remember, it\nwrites as a block - if you set the if_exists  flag to \"replace\", that'll make it\nreplace the entire DB table with a new one based on the DF you're uploading.\n And if you're doing this piecemeal, you presumably don't want that.\n\nLast week, we just made a new DataFrame out of each row and appended it to the\nDB table.  That won't work here - we need an Update.  Writing each update by\nhand would be annoying, though - luckily we can use code to generate more code!\n Python has an extremely handy little tool called f-strings  that make string\ntemplating a snap!\n\ndef updateStr(row):\n    return (f\"UPDATE books \"\n            f\"\"\"SET author = '{x.author}' \"\"\"\n            f\"\"\"WHERE id = {x.id};\"\"\")\n\n\nLet's walk through that.  It takes a row from a Dataframe - note that we're\nusing dot notation here instead of the bracket notation.  The reason we're doing\nthat is because, instead of using iterrows()  like last week, we'll be using \nitertuples  because the docstring for iterrows()  said I should.  One reason for\nthis is that iterrows()  gives a pandas Series, which will store everything as\nthe same datatype, which will be annoying in some cases.  I think it's supposed\nto be faster too?itertuples()  instead gives us Named Tuples, which is kind of\nlike a dictionary, except we have to use dot notation instead of square\nbrackets.\n\nSooo, we take a Named Tuple, and then the f-string goes to work.  It's mostly\njust a convenient way of formatting strings with variables - any code inside\ncurly parentheses will be evaluated.  They're convenient, flexible, and\nsupposedly pretty well-optimized!  Let's give it a spin.  Let's say we have a\nDataFrame df2  that only contains the rows to be updated...\n\ncnx = create_engine('mysql+pymysql://root:cracked1@localhost/appointments', echo=False)\nfor x in df2.itertuples(index=False):\n    print(updateStr(x))\nUPDATE books SET author = 'Abby' WHERE id = 3;\nUPDATE books SET author = 'Brian' WHERE id = 7;\nUPDATE books SET author = 'Celestine' WHERE id = 9;\n\n\nSweet!  Now let's actually execute it.  We'll be using the execute()  function\nin Pandas' io.sql  module.  I get the feeling I'm not supposed to, primarily\nbecause it doesn't have an entry in the official Pandas documentation, and I\nonly found it by poking around the module code.  But hey, it works!  (Warning\nfrom last time applies super-duper-extra-double this time!)\n\nfor x in df2.itertuples(index=False):\n    pd.io.sql.execute(updateStr(x), cnx)\n\n\nAnd now let's see if it worked...\n\npd.io.sql.read_sql_table(\"books\", cnx)\n   author copies  id\n     Abby      2   3\n    Brian          7\nCelestine      7   9`\n\n\nSweet!\n\nNow all that's well and good, but surely we're not the first person to try to\nmake SQL statements by calling Python functions!  How about a slightly less\nerror-prone way of doing this?\n\nSQLAlchemy\nI'll level with you - I've never actually used SQLAlchemy for anything but\nconnecting Pandas to databases before via the create_engine()  function.  But\nthat's why blogging's great - gives you an excuse to finally check out that\nthing you knew was gonna be useful!\n\nSQLAlchemy first needs some information about our table, then it'll let us\ncreate statements doing things to said table automagically.  We can either\ndefine it ourselves (maybe in a future post!) or read an existing table.  I\nfound the default way of doing this a little to\n\"has-a-couple-too-many-steps-and-function-args\"-y, so I packaged the version of\nthe command that worked into a little function.  I encourage you all to do the\nsame!\n\ndef loadTable(cnx, tableName):\n    meta = MetaData(bind=cnx) \n    return Table(tableName, meta, autoload=True, autoload_with=cnx)\n\n#Binding it to the Engine will make sure it uses the right SQL dialect\n\n\nThere we go!  Now, let's load our books  table...\n\nbooks = loadTable(cnx, \"books\")\n\n\nAnd here's the cool part!  Now that we have our table object, it has a bunch of\nbuilt-in methods for doing SQL things!  We can print an example...\n\nstr(books.update())\n'UPDATE books SET index=:index, author=:author, copies=:copies, id=:id'\n\n\nIf we call books.update, it'll do exactly that.  It also has a handy string\nrepresentation, for debugging and sanity checks.\n\nSQLAlchemy wants us to have a Connection  in addition to our Engine.  Well,\nalright then.\n\nconn = cnx.connect()\n\n\nFine, happy now?  Good.\n\nSQLAlchemy lets us build SQL statements by chain methods, which is fantastically\nuseful.  Less error-prone, easier to pass collections.  Our basic pattern would\nbe, based on iterating with itertuples...\n\nfor x in df2.itertuples(index=False):\n    stmt = (books\n          .update()\n          .where(books.c.id == x.id)\n          .values(author=x.author)\n         )\n    conn.execute(stmt)\n\n\nSuccess!","html":"<p>Let's say you were continuing our task from <em><a href=\"https://hackersandslackers.com/code-snippet-corner-a-dirty-way-of-cleaning-data-ft-pandas-sql/\">last week</a></em>: Taking a bunch of inconsistent Excel files and CSVs, and putting them into a database.</p><p>Let's say you've been given a new CSV that conflicts with some rows you've already entered, and you're told that these rows are the correct values.</p><h2 id=\"why-not-use-pandas-built-in-method\">Why Not Use Pandas' Built-in Method?</h2><p>Pandas' built-in <code>to_sql</code> DataFrame method won't be useful here.  Remember, it writes as a block - if you set the <code>if_exists</code> flag to <code>\"replace\"</code>, that'll make it replace the entire DB table with a new one based on the DF you're uploading.  And if you're doing this piecemeal, you presumably don't want that.</p><p>Last week, we just made a new DataFrame out of each row and appended it to the DB table.  That won't work here - we need an Update.  Writing each update by hand would be annoying, though - luckily we can use code to generate more code!  Python has an extremely handy little tool called <code>f-strings</code> that make string templating a snap!  </p><pre><code class=\"language-python\">def updateStr(row):\n    return (f&quot;UPDATE books &quot;\n            f&quot;&quot;&quot;SET author = '{x.author}' &quot;&quot;&quot;\n            f&quot;&quot;&quot;WHERE id = {x.id};&quot;&quot;&quot;)\n</code></pre>\n<p>Let's walk through that.  It takes a row from a Dataframe - note that we're using dot notation here instead of the bracket notation.  The reason we're doing that is because, instead of using <code>iterrows()</code> like last week, we'll be using <code>itertuples</code> because the docstring for <code>iterrows()</code> said I should.  One reason for this is that <code>iterrows()</code> gives a pandas Series, which will store everything as the same datatype, which will be annoying in some cases.  I think it's supposed to be faster too?  <code>itertuples()</code> instead gives us Named Tuples, which is kind of like a dictionary, except we have to use dot notation instead of square brackets.  </p><p>Sooo, we take a Named Tuple, and then the f-string goes to work.  It's mostly just a convenient way of formatting strings with variables - any code inside curly parentheses will be evaluated.  They're convenient, flexible, and supposedly pretty well-optimized!  Let's give it a spin.  Let's say we have a DataFrame <code>df2</code> that only contains the rows to be updated...</p><pre><code class=\"language-python\">cnx = create_engine('mysql+pymysql://root:cracked1@localhost/appointments', echo=False)\nfor x in df2.itertuples(index=False):\n    print(updateStr(x))\nUPDATE books SET author = 'Abby' WHERE id = 3;\nUPDATE books SET author = 'Brian' WHERE id = 7;\nUPDATE books SET author = 'Celestine' WHERE id = 9;\n</code></pre>\n<p>Sweet!  Now let's actually execute it.  We'll be using the <code>execute()</code> function in Pandas' <code>io.sql</code> module.  I get the feeling I'm not supposed to, primarily because it doesn't have an entry in the official Pandas documentation, and I only found it by poking around the module code.  But hey, it works!  (Warning from last time applies super-duper-extra-double this time!)</p><pre><code class=\"language-python\">for x in df2.itertuples(index=False):\n    pd.io.sql.execute(updateStr(x), cnx)\n</code></pre>\n<p>And now let's see if it worked...</p><pre><code class=\"language-python\">pd.io.sql.read_sql_table(&quot;books&quot;, cnx)\n   author copies  id\n     Abby      2   3\n    Brian          7\nCelestine      7   9`\n</code></pre>\n<p>Sweet!</p><p>Now all that's well and good, but surely we're not the first person to try to make SQL statements by calling Python functions!  How about a slightly less error-prone way of doing this?</p><h1 id=\"sqlalchemy\">SQLAlchemy</h1><p>I'll level with you - I've never actually used SQLAlchemy for anything but connecting Pandas to databases before via the <code>create_engine()</code> function.  But that's why blogging's great - gives you an excuse to finally check out that thing you knew was gonna be useful!</p><p>SQLAlchemy first needs some information about our table, then it'll let us create statements doing things to said table automagically.  We can either define it ourselves (maybe in a future post!) or read an existing table.  I found the default way of doing this a little to \"has-a-couple-too-many-steps-and-function-args\"-y, so I packaged the version of the command that worked into a little function.  I encourage you all to do the same!</p><pre><code class=\"language-python\">def loadTable(cnx, tableName):\n    meta = MetaData(bind=cnx) \n    return Table(tableName, meta, autoload=True, autoload_with=cnx)\n\n#Binding it to the Engine will make sure it uses the right SQL dialect\n</code></pre>\n<p>There we go!  Now, let's load our <code>books</code> table...</p><pre><code class=\"language-python\">books = loadTable(cnx, &quot;books&quot;)\n</code></pre>\n<p>And here's the cool part!  Now that we have our table object, it has a bunch of built-in methods for doing SQL things!  We can print an example...</p><pre><code class=\"language-python\">str(books.update())\n'UPDATE books SET index=:index, author=:author, copies=:copies, id=:id'\n</code></pre>\n<p>If we call <code>books.update</code>, it'll do exactly that.  It also has a handy string representation, for debugging and sanity checks.</p><p>SQLAlchemy wants us to have a <code>Connection</code> in addition to our <code>Engine</code>.  Well, alright then.</p><pre><code class=\"language-python\">conn = cnx.connect()\n</code></pre>\n<p>Fine, happy now?  Good.</p><p>SQLAlchemy lets us build SQL statements by chain methods, which is fantastically useful.  Less error-prone, easier to pass collections.  Our basic pattern would be, based on iterating with <code>itertuples</code>...</p><pre><code class=\"language-python\">for x in df2.itertuples(index=False):\n    stmt = (books\n          .update()\n          .where(books.c.id == x.id)\n          .values(author=x.author)\n         )\n    conn.execute(stmt)\n</code></pre>\n<p>Success!</p>","url":"https://hackersandslackers.com/trash-pandas/","uuid":"8a789f92-fbde-48b5-8bdf-01206e340cc1","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b4fdab10dda8433e079043f"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736af","title":"Lynx Roundup, July 23rd","slug":"lynx-roundup-july-23rd","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx15@2x.jpg","excerpt":"TensorFlow!  Visualizing cyclical data!  Funny things!","custom_excerpt":"TensorFlow!  Visualizing cyclical data!  Funny things!","created_at_pretty":"21 July, 2018","published_at_pretty":"23 July, 2018","updated_at_pretty":"25 July, 2018","created_at":"2018-07-20T22:01:36.000-04:00","published_at":"2018-07-23T07:00:00.000-04:00","updated_at":"2018-07-24T22:06:04.000-04:00","meta_title":"TensorFlow!  Visualizing cyclical data!  Funny things! | Hackers And Slackers","meta_description":"TensorFlow!  Visualizing cyclical data!  Funny things!","og_description":"TensorFlow!  Visualizing cyclical data!  Funny things!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx15@2x.jpg","og_title":"Lynx Roundup, July 23rd","twitter_description":"TensorFlow!  Visualizing cyclical data!  Funny things!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx15@2x.jpg","twitter_title":"Lynx Roundup, July 23rd","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://towardsdatascience.com/tensorflow-a-hands-on-approach-8614372f021f\n\n\n\nhttps://hackernoon.com/7-features-proposed-so-far-in-python-3-8-acb0d97c83c8\n\n\n\nHey I have a nice variation of the fun meme: what's something that is known to\nbe obvious in your profession but you and your colleagues deliberately try to\nwithhold from the public or mislead them about due to elitism and malice\n\n— Shuja Haider (@shujaxhaider) July 8, 2018\n[https://twitter.com/shujaxhaider/status/1016108335299522563?ref_src=twsrc%5Etfw]\n\nhttps://flowingdata.com/2018/07/09/how-to-visualize-recurring-patterns/\n\n\n\nhttps://www.kdnuggets.com/2018/07/4-levels-data-usage-data-science.html","html":"<p></p><p><a href=\"https://towardsdatascience.com/tensorflow-a-hands-on-approach-8614372f021f\">https://towardsdatascience.com/tensorflow-a-hands-on-approach-8614372f021f</a></p><p></p><p><a href=\"https://hackernoon.com/7-features-proposed-so-far-in-python-3-8-acb0d97c83c8\">https://hackernoon.com/7-features-proposed-so-far-in-python-3-8-acb0d97c83c8</a></p><p></p><figure class=\"kg-card kg-embed-card\"><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Hey I have a nice variation of the fun meme: what&#39;s something that is known to be obvious in your profession but you and your colleagues deliberately try to withhold from the public or mislead them about due to elitism and malice</p>&mdash; Shuja Haider (@shujaxhaider) <a href=\"https://twitter.com/shujaxhaider/status/1016108335299522563?ref_src=twsrc%5Etfw\">July 8, 2018</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</figure><p><a href=\"https://flowingdata.com/2018/07/09/how-to-visualize-recurring-patterns/\">https://flowingdata.com/2018/07/09/how-to-visualize-recurring-patterns/</a></p><p></p><p><a href=\"https://www.kdnuggets.com/2018/07/4-levels-data-usage-data-science.html\">https://www.kdnuggets.com/2018/07/4-levels-data-usage-data-science.html</a></p>","url":"https://hackersandslackers.com/lynx-roundup-july-23rd/","uuid":"4b14c426-747e-43b1-a428-2b97f9a118ec","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b529400529141018f9dacef"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736c2","title":"Serving Frontend Assets in Flask","slug":"serving-static-assets-in-flask","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/flaskstatic.jpg","excerpt":"When Python developers manage presentation layers.","custom_excerpt":"When Python developers manage presentation layers.","created_at_pretty":"23 July, 2018","published_at_pretty":"23 July, 2018","updated_at_pretty":"05 April, 2019","created_at":"2018-07-22T23:56:52.000-04:00","published_at":"2018-07-23T06:22:21.000-04:00","updated_at":"2019-04-04T22:10:24.000-04:00","meta_title":"Serving Frontend Assets in Flask | Hackers And Slackers","meta_description":"flask_static_compress is a library for compressing flask assets. It can be considered to be a Python equivalent to Gulp in the context of asset compression.","og_description":"flask_static_compress is a library for compressing flask assets. It can be considered to be a Python equivalent to Gulp in the context of asset compression.","og_image":"https://hackersandslackers.com/content/images/2019/03/flaskstatic.jpg","og_title":"Serving Frontend Assets in Flask","twitter_description":"flask_static_compress is a library for compressing flask assets. It can be considered to be a Python equivalent to Gulp in the context of asset compression.","twitter_image":"https://hackersandslackers.com/content/images/2019/03/flaskstatic.jpg","twitter_title":"Serving Frontend Assets in Flask","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},{"name":"Frontend","slug":"frontend","description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","feature_image":null,"meta_description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","meta_title":"Frontend Development | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"},{"name":"#Building Flask Apps","slug":"building-flask-apps","description":"Python’s fast-growing and flexible microframework. Can handle apps as simple as API endpoints, to monoliths remininiscent of Django.","feature_image":"https://hackersandslackers.com/content/images/2019/03/flask-gettingstarted.jpg","meta_description":"Python’s fastest growing, most flexible, and perhaps most Pythonic framework.","meta_title":"Building Flask Apps","visibility":"internal"}],"plaintext":"If you're familiar with Django (or Python to any extent), you've probably\naccepted the concept of what Python guys refer to as \"static assets.\" Let's take\na moment to consider this: at some point in Django's conception a design\ndecision was made: all JavaScript, CSS, or  any assets pertaining to the\npresentation layer  belong tucked away into an isolated corner of the framework.\nAlas, it was decreed: henceforward, only two types of code exist in the\nuniverse: Python, and not-Python. Anything that isn't Python is simply a\n\"static\" asset to be dealt with either locally or via a CDN somewhere. \n\nThe implied mindset is both somewhat absurd yet also unsurprising. It's easy to\nimagine a couple of backend nerds nonchalantly writing off frontend development\nas a concept  to be stuck in a single folder. You know, all those things which\nmake an app an app? Like, anything visible to a user? These are simply\nthings-to-be-dealt-with when the frontend guys are ready with their \"make it\npretty\" nonsense. Screw it, throw it all in the /static  folder. We accept this\ndistinction to this day with little thought. Flask has carried over the same\nterminology and concept of a \"static\" folder, so this amusing cultural relic is\nhere to stay.\n\nAnyhow, we're here today to help you serve those beautiful assets of yours, as\nstatic as they may be. We'll do so by exploring the top-two libraries available\nto us: Flask-Static-Compress, and Flask-Assets.\n\nApplication Structure For Flask Apps with Frontend\nBest practices aside, we'll start with the most straightforward project\nstructure for a Flask web app. Let's work with this structure:\n\nmyproject\n├─ /static\n│  └─ /js\n│  └─ /less\n│  └─ /img\n│  └─ /build\n├─ /templates\n└─ app.py\n\n\nAll the Python we need is going to sit in a plump little app.py  file. \n\nTemplates  hold the same concept as they do to equivalent frameworks such as\nExpress: this is where we contain pages, partials, and layouts.  Flask's default\n Jinja2  templating engine has personally served me well enough to never\ninvestigate an alternative.\n\n/Static is where we'll store the raw  source  files for things like preprocessed\nstylesheets and JavaScript. At runtime, these sources files will be compressed\nand stored elsewhere in a production setting, such as that nifty /build  folder\nwe created (or feel free to call it /dist, whatever, it's your party man). \n\nIt's best practice to serve these from a CDN at runtime, but whatever.\n\nIn contrast to NodeJS apps, things like images and fonts are stored in the\n/static folder as well. This distinguishes Python's concept of /static  from,\nsay, another framework's concept of /src: instead of being a folder of only\nsource code, we pretty much have a folder of all that shit which isn't Python. \nAnd we've come full circle.\n\nCreating The Flask App Object\nfrom flask import Flask, url_for, render_template, request, Response\n\napp = Flask(__name__, static_folder=\"static\", template_folder=\"templates\")\n\n\nWe initiate our app on line 4 with app = Flask().  We create our app with three\nparameters/attributes:\n\n * __name__: Now that I think about it, I've never actually considered what this\n   first parameter is doing. Just know that you need it,\n * static_folder: Specifies the name of the folder where static assets will be\n   served. This is based on where your app believes the root folder lives.\n   Because our app is a single directory, it knows that /static  is in the\n   current directory.\n * template_folder: Same as above, but contains Jinja2 templates, AKA the files\n   which become HTML.\n\nIt's important to reiterate that these folders default to being relative to the\ncurrent location of app.py.  If we want to change this behavior, we can pass \ninstance_path=/path/to/desired/dir/  to override this behavior.\n\nMethod 1: Flask-Static-Compress\nThere's more than one way to skin a cat, and there's certainly more than one\nlibrary or philosophy for serving pages and styles in Flask. \nflask_static_compress is one such library, which we'll include in app.py:  \n\nfrom flask import Flask, url_for, render_template, request, Response\nfrom flask_static_compress import FlaskStaticCompress\n\n\nflask_static_compress [https://github.com/alanhamlett/flask-static-compress]  is\na cool library for compressing and joining assets together. If you've ever used\nGulp, it achieves some of the common tasks Gulp might, but with a MUCH different\nphilosophy. Some key differences are:\n\n * The ability to served compressed assets individually, as opposed to one giant\n   site bundle.\n * Never needing to explicitly fun a build command to create files served at\n   runtime.\n\nBefore serving any assets, we'll need a landing page for our app. While still in\n app.py,  we need to set a route for anybody who visits our site:\n\nfrom flask import Flask, url_for, render_template, request, Response\nfrom flask_static_compress import FlaskStaticCompress\n\napp = Flask(__name__, static_folder=\"static\", template_folder=\"templates\")\n\n@app.route('/', methods=['GET'])\ndef home():\n    \"\"\"Landing page.\"\"\"\n    return render_template('/index.html', title=\"Lame Site\")\n\n\nOur route listens for traffic hitting \"/\" (our root directory) and kindly serves\nthem the page index.html  as you might expect. Because we set the value of \ntemplates_folder  just now, Flask knows to serve a file living in /\ntemplates/index.html. \n\nIf you need some pointers on creating basic templates in Flask in which to load\nyour frontend assets, I'd suggest taking a look back at the previous post.\n\nFrontend YOLO Swag\nBack to your project, make .less  file and a .js  file in the appropriate\nplaces:\n\nmyproject\n├─ /build\n├─ /static\n│  └─ js\n│  │  └─ main.js\n│  └─ less\n│  │  └─ style.js\n│  └─ img\n├─ /templates\n│  └─ layout.html\n│  └─ index.html\n└─ app.py\n\n\nUse these files to brand your site accordingly. Add some images, memes,\npropaganda, viruses, etc. Whatever your heart desires.\n\nBack in app.py  we need to finish configuring our library:\n\nfrom flask import Flask, url_for, render_template, request, Response\nfrom flask_static_compress import FlaskStaticCompress\n\napp = Flask(__name__)\napp.config['COMPRESSOR_DEBUG'] = app.config.get('DEBUG')\napp.config['COMPRESSOR_STATIC_PREFIX'] = 'static'\napp.config['COMPRESSOR_OUTPUT_DIR'] = 'build'\napp.static_folder = 'static'\ncompress = FlaskStaticCompress(app)\n\n\n@app.route('/', methods=['GET'])\ndef home():\n    \"\"\"Landing page.\"\"\"\n    return render_template('/index.html', title=\"Lame Site\")\n\n\nCongrats! the main part of your application is pretty much done, just note a few\nthings:\n\n * Notice this time we set our folder paths via app.config[]  as opposed to\n   inline, in the earlier example. This is simply a matter of preference.\n * compress = FlaskStaticCompress(app) initializes our library, so definitely do\n   that.\n * Fun tidbit: app.static_folder = 'static' is a snippet which can live within\n   any route to override  the default app settings for where your folders are\n   located. \n\nCompressed 2 deff\nLet's wrap this bad boy up. Back in layout.html, let's add those static files we\ncreated.\n\n<!doctype html>\n<html>\n<head>\n  <title>{% block title %}{% endblock %} - My Lame Site</title>\n  <!-- Meta Data -->\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, viewport-fit=cover\">\n    \n  <!-- CSS -->\n  {% compress 'css' %}\n     <link href=\"{{ url_for('static', filename='less/home.less') }}\" type=\"text/less\">\n  {% endcompress %}\n    \n  <!-- JS -->\n    {% compress 'js' %}\n      <script src=\"{{ url_for('static', filename='js/previews.js') }}\"></script>\n\t{% endcompress %}\n</head>\n<body>\n  {% block content %}{% endblock %}\n</body>\n</html>\n\n\nLet's analyze this real quick:\n\n{% compress 'css' %}\n   <link href=\"{{ url_for('static', filename='less/home.less') }}\" type=\"text/less\">\n{% endcompress %}\n\n\nAll files within the {% compress 'css' %}  block will be minified and joined\ninto a single file, and then moved to the build folder we specified earlier.\nIt's that easy- no jobs to run beforehand, etc.\n\nWhat might also catch your eye is how we define the path:\n\n{{ url_for('static', filename='less/home.less') }}\n\n\nThis is a Jinja path dynamically locating our source file from our specified\nstatic doc. Well, I'll be darned.\n\nMethod 2: Flask-Assets\nFlaskStaticCompress  is great, but Flask_assets\n[http://flask-assets.readthedocs.io/en/latest/]  might even be better. If you're\nfamiliar with Webpack, consider the philosophy behind bundling.  Creating \nbundles  of frontend assets makes sense when we can draw clear distinctions of\nalike-screens in our app: this way, users don't download the entirety of our\nassets for screens they might not visit upfront, while pre-loading assets for\npages they'll probably  visit.\n\nThe Flask-Assets  library goes hand-in-hand with the concept of Flask Blueprints\n. If you aren't familiar with Blueprints just yet, I encourage you to become\nfamiliar here [https://hackersandslackers.com/structuring-your-flask-app/].\n\nTo get started, we'll install the necessary libraries:\n\n$ pip3 install flask-assets lesscpy cssmin jsmin\n\n\nThis is working under the assumption that we're be writing styles in LESS. If\nyou prefer sass, libsass  can take the place of lesscpy.\n\nThe other two libraries, cssmin  and jsmin, are for minifying CSS and JS assets\nrespectively.\n\nLet's see how we pull this off:\n\n...\nfrom flask_assets import Environment, Bundle\n\n\n# Flask-Assets Configuration\nless_bundle = Bundle('src/less/*.less',\n                     filters='less,cssmin',\n                     output='dist/css/account.css',\n                     extra={'rel': 'stylesheet/less'})\njs_bundle = Bundle('src/js/*.js',\n                   filters='jsmin',\n                   output='dist/js/main.min.js')\nassets.register('less_all', less_bundle)\nassets.register('js_all', js_bundle)\nless_bundle.build()\njs_bundle.build()\n``\n\nNotice how we only import flask_assets of all the libraries we installed- this\nis intentional. The other libraries do not need to be imported anywhere.\n\nless_bundle  and js_bundle  represent groupings of LESS and JS files to be\nstitched into one single file. Any positional arguments to be passed in to \nBundle()  will be taken as paths of sources files to bundle: we can bundle as\nmany or as few files as we want (or in our case , just import *).\n\nThe filters  argument is where we tell our Bundle()  how to treat the files\nwe've passed. In the case of less_bundle, passing less,cssmin  indicates that\nthe incoming files will be LESS files, to be compiled into CSS files, and then\noutputted as minified CSS files. the output destination, of course, is handled\nby the argument output.\n\nFinal Thoughts\nThe great thing about Flask (and Python in general) is that you're provided the\nluxury to write code in a manner which you find enjoyable. Considering Flask is\na relatively young framework, we're in a bit of a golden age where there are\njust enough libraries to suit your tastes, but not enough to get lost in an NPM\nlevel hell.\n\nIn my completely biased and untrustworthy opinion, it's hard to imagine getting\ninvolved with a Framework in a sweeter spot than where Flask is right now.","html":"<p>If you're familiar with Django (or Python to any extent), you've probably accepted the concept of what Python guys refer to as \"static assets.\" Let's take a moment to consider this: at some point in Django's conception a design decision was made: all <em>JavaScript</em>, <em>CSS</em>, or<em> any assets pertaining to the presentation layer</em> belong tucked away into an isolated corner of the framework. Alas, it was decreed: henceforward, only two types of code exist in the universe: Python, and not-Python. Anything that isn't Python is simply a \"static\" asset to be dealt with either locally or via a CDN somewhere. </p><p>The implied mindset is both somewhat absurd yet also unsurprising. It's easy to imagine a couple of backend nerds nonchalantly writing off <em>frontend development as a concept</em> to be stuck in a single folder. You know, all those things which make an app an app? Like, anything visible to a user? These are simply things-to-be-dealt-with when the frontend guys are ready with their \"make it pretty\" nonsense. Screw it, throw it all in the <strong>/static</strong> folder. We accept this distinction to this day with little thought. Flask has carried over the same terminology and concept of a \"static\" folder, so this amusing cultural relic is here to stay.</p><p>Anyhow, we're here today to help you serve those beautiful assets of yours, as static as they may be. We'll do so by exploring the top-two libraries available to us: <strong>Flask-Static-Compress</strong>, and <strong>Flask-Assets</strong>.</p><h2 id=\"application-structure-for-flask-apps-with-frontend\">Application Structure For Flask Apps with Frontend</h2><p>Best practices aside, we'll start with the most straightforward project structure for a Flask web app. Let's work with this structure:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">myproject\n├─ /static\n│  └─ /js\n│  └─ /less\n│  └─ /img\n│  └─ /build\n├─ /templates\n└─ app.py\n</code></pre>\n<!--kg-card-end: markdown--><p>All the Python we need is going to sit in a plump little <strong>app.py</strong><em> </em>file. </p><p><strong>Templates</strong> hold the same concept as they do to equivalent frameworks such as Express: this is where we contain <em>pages</em>, <em>partials</em>, and <em>layouts.</em> Flask's default <strong>Jinja2</strong> templating engine has personally served me well enough to never investigate an alternative.</p><p><strong>/Static </strong>is where we'll store the <em>raw</em> <em>source</em> files for things like preprocessed stylesheets and JavaScript. At runtime, these sources files will be compressed and stored elsewhere in a production setting, such as that nifty <strong>/build</strong> folder we created (or feel free to call it <em>/dist</em>, whatever, it's your party man). </p><p>It's best practice to serve these from a CDN at runtime, but whatever.</p><p>In contrast to NodeJS apps, things like images and fonts are stored in the /static folder as well. This distinguishes Python's concept of /<em>static</em> from, say, another framework's concept of /<em>src: </em>instead of being a folder of only source code, we pretty much have a folder of <em>all that shit which isn't Python. </em>And we've come full circle.</p><h2 id=\"creating-the-flask-app-object\">Creating The Flask App Object</h2><!--kg-card-begin: markdown--><pre><code class=\"language-python\">from flask import Flask, url_for, render_template, request, Response\n\napp = Flask(__name__, static_folder=&quot;static&quot;, template_folder=&quot;templates&quot;)\n</code></pre>\n<!--kg-card-end: markdown--><p>We initiate our app on line 4 with <code>app = Flask()</code>.  We create our app with three parameters/attributes:</p><ul><li><code>__name__</code>: Now that I think about it, I've never actually considered what this first parameter is doing. Just know that you need it,</li><li><code>static_folder</code>: Specifies the name of the folder where static assets will be served. This is based on where your app believes the root folder lives. Because our app is a single directory, it knows that /<em>static</em> is in the current directory.</li><li><code>template_folder</code>: Same as above, but contains Jinja2 templates, AKA the files which become HTML.</li></ul><p>It's important to reiterate that these folders default to being <em>relative to the current location of </em><strong>app.py</strong><em>.</em> If we want to change this behavior, we can pass <code>instance_path=/path/to/desired/dir/</code> to override this behavior.</p><h2 id=\"method-1-flask-static-compress\">Method 1: Flask-Static-Compress</h2><p>There's more than one way to skin a cat, and there's certainly more than one library or philosophy for serving pages and styles in Flask. <strong>flask_static_compress </strong>is one such library, which we'll include in <strong>app.py</strong><em>:</em> </p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">from flask import Flask, url_for, render_template, request, Response\nfrom flask_static_compress import FlaskStaticCompress\n</code></pre>\n<!--kg-card-end: markdown--><p><strong><a href=\"https://github.com/alanhamlett/flask-static-compress\">flask_static_compress</a></strong> is a cool library for compressing and joining assets together. If you've ever used Gulp, it achieves some of the common tasks Gulp might, but with a MUCH different philosophy. Some key differences are:</p><ul><li>The ability to served compressed assets individually, as opposed to one giant site bundle.</li><li>Never needing to explicitly fun a build command to create files served at runtime.</li></ul><p>Before serving any assets, we'll need a landing page for our app. While still in <strong>app.py,</strong> we need to set a route for anybody who visits our site:</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">from flask import Flask, url_for, render_template, request, Response\nfrom flask_static_compress import FlaskStaticCompress\n\napp = Flask(__name__, static_folder=&quot;static&quot;, template_folder=&quot;templates&quot;)\n\n@app.route('/', methods=['GET'])\ndef home():\n    &quot;&quot;&quot;Landing page.&quot;&quot;&quot;\n    return render_template('/index.html', title=&quot;Lame Site&quot;)\n</code></pre>\n<!--kg-card-end: markdown--><p>Our route listens for traffic hitting \"/\" (our root directory) and kindly serves them the page <strong>index.html</strong> as you might expect. Because we set the value of <code>templates_folder</code> just now, Flask knows to serve a file living in /<strong>templates/index.html</strong>. </p><p>If you need some pointers on creating basic templates in Flask in which to load your frontend assets, I'd suggest taking a look back at the previous post.</p><h3 id=\"frontend-yolo-swag\">Frontend YOLO Swag</h3><p>Back to your project, make <strong>.less</strong> file and a <strong>.js</strong> file in the appropriate places:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">myproject\n├─ /build\n├─ /static\n│  └─ js\n│  │  └─ main.js\n│  └─ less\n│  │  └─ style.js\n│  └─ img\n├─ /templates\n│  └─ layout.html\n│  └─ index.html\n└─ app.py\n</code></pre>\n<!--kg-card-end: markdown--><p>Use these files to brand your site accordingly. Add some images, memes, propaganda, viruses, etc. Whatever your heart desires.</p><p>Back in <strong>app.py</strong><em> </em>we need to finish configuring our library:</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">from flask import Flask, url_for, render_template, request, Response\nfrom flask_static_compress import FlaskStaticCompress\n\napp = Flask(__name__)\napp.config['COMPRESSOR_DEBUG'] = app.config.get('DEBUG')\napp.config['COMPRESSOR_STATIC_PREFIX'] = 'static'\napp.config['COMPRESSOR_OUTPUT_DIR'] = 'build'\napp.static_folder = 'static'\ncompress = FlaskStaticCompress(app)\n\n\n@app.route('/', methods=['GET'])\ndef home():\n    &quot;&quot;&quot;Landing page.&quot;&quot;&quot;\n    return render_template('/index.html', title=&quot;Lame Site&quot;)\n</code></pre>\n<!--kg-card-end: markdown--><p>Congrats! the main part of your application is pretty much done, just note a few things:</p><ul><li>Notice this time we set our folder paths via <em><strong>app.config[]</strong></em> as opposed to inline, in the earlier example. This is simply a matter of preference.</li><li><strong>compress = FlaskStaticCompress(app) </strong>initializes our library, so definitely do that.</li><li>Fun tidbit: <strong>app.static_folder = 'static' </strong>is a snippet which can live within any route to <em>override</em> the default app settings for where your folders are located. </li></ul><h2 id=\"compressed-2-deff\">Compressed 2 deff</h2><p>Let's wrap this bad boy up. Back in layout.html, let's add those static files we created.</p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;{% block title %}{% endblock %} - My Lame Site&lt;/title&gt;\n  &lt;!-- Meta Data --&gt;\n  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\n  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, viewport-fit=cover&quot;&gt;\n    \n  &lt;!-- CSS --&gt;\n  {% compress 'css' %}\n     &lt;link href=&quot;{{ url_for('static', filename='less/home.less') }}&quot; type=&quot;text/less&quot;&gt;\n  {% endcompress %}\n    \n  &lt;!-- JS --&gt;\n    {% compress 'js' %}\n      &lt;script src=&quot;{{ url_for('static', filename='js/previews.js') }}&quot;&gt;&lt;/script&gt;\n\t{% endcompress %}\n&lt;/head&gt;\n&lt;body&gt;\n  {% block content %}{% endblock %}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<!--kg-card-end: markdown--><p>Let's analyze this real quick:</p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">{% compress 'css' %}\n   &lt;link href=&quot;{{ url_for('static', filename='less/home.less') }}&quot; type=&quot;text/less&quot;&gt;\n{% endcompress %}\n</code></pre>\n<!--kg-card-end: markdown--><p>All files within the <code>{% compress 'css' %}</code> block will be minified and joined into a single file, and then moved to the build folder we specified earlier. It's that easy- no jobs to run beforehand, etc.</p><p>What might also catch your eye is how we define the path:</p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">{{ url_for('static', filename='less/home.less') }}\n</code></pre>\n<!--kg-card-end: markdown--><p>This is a Jinja path dynamically locating our source file from our specified static doc. Well, I'll be darned.</p><h2 id=\"method-2-flask-assets\">Method 2: Flask-Assets</h2><p><strong>FlaskStaticCompress</strong> is great, but <strong><a href=\"http://flask-assets.readthedocs.io/en/latest/\">Flask_assets</a> </strong>might even be better. If you're familiar with Webpack, consider the philosophy behind <em>bundling.</em> Creating <em>bundles</em> of frontend assets makes sense when we can draw clear distinctions of alike-screens in our app: this way, users don't download the entirety of our assets for screens they might not visit upfront, while pre-loading assets for pages they'll <em>probably</em> visit.</p><p>The <strong>Flask-Assets</strong> library goes hand-in-hand with the concept of Flask <strong>Blueprints</strong>. If you aren't familiar with Blueprints just yet, I encourage you to become familiar <a href=\"https://hackersandslackers.com/structuring-your-flask-app/\">here</a>.</p><p>To get started, we'll install the necessary libraries:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">$ pip3 install flask-assets lesscpy cssmin jsmin\n</code></pre>\n<!--kg-card-end: markdown--><p>This is working under the assumption that we're be writing styles in LESS. If you prefer sass, <strong>libsass</strong> can take the place of <strong>lesscpy</strong>.</p><p>The other two libraries, <strong>cssmin</strong> and <strong>jsmin</strong>, are for minifying CSS and JS assets respectively.</p><p>Let's see how we pull this off:</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">...\nfrom flask_assets import Environment, Bundle\n\n\n# Flask-Assets Configuration\nless_bundle = Bundle('src/less/*.less',\n                     filters='less,cssmin',\n                     output='dist/css/account.css',\n                     extra={'rel': 'stylesheet/less'})\njs_bundle = Bundle('src/js/*.js',\n                   filters='jsmin',\n                   output='dist/js/main.min.js')\nassets.register('less_all', less_bundle)\nassets.register('js_all', js_bundle)\nless_bundle.build()\njs_bundle.build()\n``</code></pre>\n<!--kg-card-end: markdown--><p>Notice how we only import flask_assets of all the libraries we installed- this is intentional. The other libraries do not need to be imported anywhere.</p><p><strong>less_bundle</strong> and <strong>js_bundle</strong> represent groupings of LESS and JS files to be stitched into one single file. Any positional arguments to be passed in to <code>Bundle()</code> will be taken as paths of sources files to bundle: we can bundle as many or as few files as we want (or in our case , just import *).</p><p>The <strong>filters</strong> argument is where we tell our <code>Bundle()</code> how to treat the files we've passed. In the case of <strong>less_bundle, </strong>passing <code>less,cssmin</code> indicates that the incoming files will be LESS files, to be compiled into CSS files, and then outputted as minified CSS files. the output destination, of course, is handled by the argument <code>output</code>.</p><h2 id=\"final-thoughts\">Final Thoughts</h2><p>The great thing about Flask (and Python in general) is that you're provided the luxury to write code in a manner which you find enjoyable. Considering Flask is a relatively young framework, we're in a bit of a golden age where there are just enough libraries to suit your tastes, but not enough to get lost in an NPM level hell.</p><p>In my completely biased and untrustworthy opinion, it's hard to imagine getting involved with a Framework in a sweeter spot than where Flask is right now. </p>","url":"https://hackersandslackers.com/serving-static-assets-in-flask/","uuid":"d1c8d104-6392-411b-86d4-75326e8e0960","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b5552047c9c156d9440c0ae"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736ae","title":"Lynx Roundup, July 22nd","slug":"lynx-roundup-july-22nd","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx13@2x.jpg","excerpt":"AI & Designer Drugs!  Dynamic Programming!  Physics modeling and elections!","custom_excerpt":"AI & Designer Drugs!  Dynamic Programming!  Physics modeling and elections!","created_at_pretty":"21 July, 2018","published_at_pretty":"22 July, 2018","updated_at_pretty":"25 July, 2018","created_at":"2018-07-20T21:57:35.000-04:00","published_at":"2018-07-22T07:30:00.000-04:00","updated_at":"2018-07-24T22:06:04.000-04:00","meta_title":"AI & Designer Drugs!  Dynamic Programming!  Physics modeling and elections! | Hackers And Slackers","meta_description":"AI & Designer Drugs!  Dynamic Programming!  Physics modeling and elections!","og_description":"AI & Designer Drugs!  Dynamic Programming!  Physics modeling and elections!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx13@2x.jpg","og_title":"Lynx Roundup, July 22nd","twitter_description":"AI & Designer Drugs!  Dynamic Programming!  Physics modeling and elections!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx13@2x.jpg","twitter_title":"Lynx Roundup, July 22nd","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.kdnuggets.com/2018/07/suenaga-fast-ai-machine-learning-notes.html\n\n\n\nhttps://itnext.io/dynamic-programming-vs-divide-and-conquer-2fea680becbe\n\n\n\nhttps://www.aps.org/publications/apsnews/201604/campaigning.cfm\n\n\n\nhttps://www.engadget.com/2018/07/06/mit-automate-drug-design-machine-learning/\n\n\n\nhttp://sound-of-pixels.csail.mit.edu/","html":"<p></p><p><a href=\"https://www.kdnuggets.com/2018/07/suenaga-fast-ai-machine-learning-notes.html\">https://www.kdnuggets.com/2018/07/suenaga-fast-ai-machine-learning-notes.html</a></p><p></p><p><a href=\"https://itnext.io/dynamic-programming-vs-divide-and-conquer-2fea680becbe\">https://itnext.io/dynamic-programming-vs-divide-and-conquer-2fea680becbe</a></p><p></p><p><a href=\"https://www.aps.org/publications/apsnews/201604/campaigning.cfm\">https://www.aps.org/publications/apsnews/201604/campaigning.cfm</a></p><p></p><p><a href=\"https://www.engadget.com/2018/07/06/mit-automate-drug-design-machine-learning/\">https://www.engadget.com/2018/07/06/mit-automate-drug-design-machine-learning/</a></p><p></p><p><a href=\"http://sound-of-pixels.csail.mit.edu/\">http://sound-of-pixels.csail.mit.edu/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-july-22nd/","uuid":"f314accd-d5fe-4465-9197-671173e0eb92","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b52930f529141018f9dacec"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736bd","title":"Your Invitation to the Excel Pivot Party","slug":"excel-pivot-table-party","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/07/party@2x.jpg","excerpt":"Becoming well-versed in pivot tables to the point where it’s a problem.","custom_excerpt":"Becoming well-versed in pivot tables to the point where it’s a problem.","created_at_pretty":"21 July, 2018","published_at_pretty":"21 July, 2018","updated_at_pretty":"02 February, 2019","created_at":"2018-07-20T22:39:01.000-04:00","published_at":"2018-07-21T11:41:44.000-04:00","updated_at":"2019-02-02T05:07:40.000-05:00","meta_title":"Your Invitation to the Excel Pivot Party | Hackers And Slackers","meta_description":"Become well-versed in Excel’s pivot tables to the point where it’s a problem.","og_description":"Becoming well-versed in pivot tables to the point where it’s a problem","og_image":"https://hackersandslackers.com/content/images/2018/07/party@2x.jpg","og_title":"Your Invitation to the Excel Pivot Party","twitter_description":"Becoming well-versed in pivot tables to the point where it’s a problem","twitter_image":"https://hackersandslackers.com/content/images/2018/07/party@2x.jpg","twitter_title":"Your Invitation to the Excel Pivot Party","authors":[{"name":"Max Mileaf","slug":"snacks","bio":"One of three therapists in the known universe who knows how to use a computer. Finds meaning in highly protected data, in a cave, utilizing nothing but a box of scraps. ","profile_image":"https://hackersandslackers.com/content/images/2019/03/max2.jpg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Max Mileaf","slug":"snacks","bio":"One of three therapists in the known universe who knows how to use a computer. Finds meaning in highly protected data, in a cave, utilizing nothing but a box of scraps. ","profile_image":"https://hackersandslackers.com/content/images/2019/03/max2.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},"tags":[{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},{"name":"#Adventures in Excel","slug":"adventures-in-excel","description":"Excel secrets and magic. The kind of industry knowledge that could put financial analysts out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"internal"}],"plaintext":"I know its been a while, but you'd be surprised how little time an energy you\nhave when you're building a plane while you're flying it...or perhaps, if you've\nbeen reading along with this series, you won't. \n\nBefore jumping right into the deep end and showing you some lesser known (but\nsupremely useful) tricks to save even more time (which you'll no doubt use to\nimplement new tricks to save more time, it's a vicious cycle), allow me to\nintroduce \u0000\u0000the downside of dabbling in the mystic arts: \n\nOne of the issues that nearly any overly competent technical analyst will run\ninto eventually is what I'd like to call \"the competence loop.\" This is what\nhappens when your company doesn't understand what you do (because if they did,\nyou literally wouldn't need to exist), but they do understand that you finish\nyour work faster than everyone else, and noticing that when they give you more\nwork, it doesn't take you any longer to finish. Now you may be asking how this\ncould be and the answer is simple: you're curious, get frustrated with monotony,\nand are easily bored. Perhaps you're seeing how this materializes, and if you're\na faithful reader, I know this has happened to you:\n\n * You begin to get frustrated with time consuming spreadsheet tasks (which is\n   what your company thinks you do).\n * Your frustration leads you the realization that there has to be an easier,\n   faster, and possibly even more accurate way (it's much harder to type\n   something wrong when you're not typing it!)\n * Your curiosity leads you to begin researching and eventually implementing a\n   new strategy that does your spreadsheet work for you.\n * You enter a holding pattern where you keep coming up with more and more\n   efficient ways to accomplish your old tasks, and you've probably shared them\n   with your team. \n * Your boss will be mind-boggled with how you're doing this, and will offer you\n   more complex work. \n * You will accept this work because you're now frequently bored at work with\n   your work, working for you (so that you can drive while you drive). \n * In roughly a year, your company will misunderstand what you're  good at, and\n   will now change your job to primarily helping others on your team with their\n   work. However, this proves to be difficult, because some people that you work\n   with have a different skill-set, and would probably be a lot better at\n   management/training/and supervision than you.\n * As it's currently impossible to optimize people (which isn't to say that\n   Silicon Valley isn't trying), you'll stay at this position even if you can\n   move up because with one more promotion, you won't be working with data\n   anymore.\n\nSo, now that we're in the right headspace, let's continue speeding this process\nalong, shall we? \n\nWhen we last left off, you're now capable of solving the vast majority of Excel\nissues using some combination of IFs, ANDs, ORs, Indexes, and Pivots (and for\nthose situations where you haven't solved the issue, you can always Spackle over\nit with =iferror(X,\"N/A\")   (which will simply fill a cell with the phrase \"N/A\"\nif there's an error...which lets you continue summarizing values in a column,\neven if some of them are erroneous. This is called \"throwing an error\"). Now\nwe're going into some cool features that you wouldn't know existed until someone\ntold you.\n\nSo for the first of these case studies, we'll explore the often neglected\n\"design\" tab on the pivot table window, as shown below (hey look, I can embed\nimages now!)\n\nTo get here, first create a pivot table, then populate the columns with some\ninformation. With the pivot table menu still open, you'll realize that the\nheader changes to include two new tabs: Analyze and Design. \n\nOnce choosing design, check out the left-hand side, the real power begins on\n\"report layout\". You'll notice that pivot tables generally stack row information\non top of each other, which great for readability, but not much else. As such,\nif you click the report layout button, and choose \"tabular format\", it'll\nrearrange your data so that the values turn into columns...however, it currently\nlooks like hot garbage, as you can see here:\n\nThat's where the other design buttons come in.\n\nFirst, click the subtotals box, then \"do not show subtotals\" (you can also\nchange where the subtotals are located if you still want em). You can see the\nresults here:\n\nThe final step if to click the report layout button yet again, and click \"repeat\nall item labels\", this gives you something magical: \n\nYep, that's right, we essentially created the original data source from the\npivot table. While this isn't useful in and of itself (and there's actually an\neven easier way to do that), pivot tables can be very quickly reconfigured, and\nin this format, it allows you to work other excel magic (like index matches and\nIF statements), and you can get really tricky by copying the entire pivot table,\nand configuring it differently...matching it against itself. As extra icing on\nthe cake, pivot tables are quicker to sort, just right click the column you want\nto sort by, and click \"sort\". \n\nIn summary, we learned the following: \n\n * The Engineer's competence feedback loop\n * How to use the design tab to format a pivot table to make it friendlier for\n   calculations.\n * How to sort within a pivot table.\n * Some ideas for how you can mess around with this functionality.\n\nNext time, we'll go full McGuyver and use Excel (and Excel alone) to replicate\nsome computer code that if it were programmed in a standard language, would only\ntake 5 seconds to write!","html":"<p>I know its been a while, but you'd be surprised how little time an energy you have when you're building a plane while you're flying it...or perhaps, if you've been reading along with this series, you won't. <br><br>Before jumping right into the deep end and showing you some lesser known (but supremely useful) tricks to save even more time (which you'll no doubt use to implement new tricks to save more time, it's a vicious cycle), allow me to introduce \u0000\u0000the downside of dabbling in the mystic arts: </p><p>One of the issues that nearly any overly competent technical analyst will run into eventually is what I'd like to call \"the competence loop.\" This is what happens when your company doesn't understand what you do (because if they did, you literally wouldn't need to exist), but they do understand that you finish your work faster than everyone else, and noticing that when they give you more work, it doesn't take you any longer to finish. Now you <em>may </em>be asking how this could be and the answer is simple: you're curious, get frustrated with monotony, and are easily bored. Perhaps you're seeing how this materializes, and if you're a faithful reader, I know this has happened to you:</p><ul><li>You begin to get frustrated with time consuming spreadsheet tasks (which is what your company thinks you do).</li><li>Your frustration leads you the realization that there has to be an easier, faster, and possibly even more accurate way (it's much harder to type something wrong when you're not typing it!)</li><li>Your curiosity leads you to begin researching and eventually implementing a new strategy that does your spreadsheet work for you.</li><li>You enter a holding pattern where you keep coming up with more and more efficient ways to accomplish your old tasks, and you've probably shared them with your team. </li><li>Your boss will be mind-boggled with how you're doing this, and will offer you more complex work. </li><li>You will accept this work because you're now frequently bored at work with your work, working for you (so that you can drive while you drive). </li><li>In roughly a year, your company will misunderstand what you're  good at, and will now change your job to primarily helping others on your team with their work. However, this proves to be difficult, because some people that you work with have a different skill-set, and would probably be a lot better at management/training/and supervision than you.</li><li>As it's currently impossible to optimize people (which isn't to say that Silicon Valley isn't trying), you'll stay at this position even if you can move up because with one more promotion, you won't be working with data anymore.</li></ul><p>So, now that we're in the right headspace, let's continue speeding this process along, shall we? </p><p>When we last left off, you're now capable of solving the vast majority of Excel issues using some combination of IFs, ANDs, ORs, Indexes, and Pivots (and for those situations where you haven't solved the issue, you can always Spackle over it with <code>=iferror(X,\"N/A\")</code>  (which will simply fill a cell with the phrase \"N/A\" if there's an error...which lets you continue summarizing values in a column, even if some of them are erroneous. This is called \"throwing an error\"). Now we're going into some cool features that you wouldn't know existed until someone told you.</p><p>So for the first of these case studies, we'll explore the often neglected \"design\" tab on the pivot table window, as shown below (hey look, I can embed images now!)</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/image-1.png\" class=\"kg-image\"></figure><p>To get here, first create a pivot table, then populate the columns with some information. With the pivot table menu still open, you'll realize that the header changes to include two new tabs: Analyze and Design. </p><p>Once choosing design, check out the left-hand side, the real power begins on \"report layout\". You'll notice that pivot tables generally stack row information on top of each other, which great for readability, but not much else. As such, if you click the report layout button, and choose \"tabular format\", it'll rearrange your data so that the values turn into columns...however, it currently looks like hot garbage, as you can see here:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/image-2.png\" class=\"kg-image\"></figure><p>That's where the other design buttons come in.</p><p>First, click the subtotals box, then \"do not show subtotals\" (you can also change where the subtotals are located if you still want em). You can see the results here:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/image-3.png\" class=\"kg-image\"></figure><p>The final step if to click the report layout button yet again, and click \"repeat all item labels\", this gives you something magical: </p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/image-4.png\" class=\"kg-image\"></figure><p>Yep, that's right, we essentially created the original data source from the pivot table. While this isn't useful in and of itself (and there's actually an even easier way to do that), pivot tables can be very quickly reconfigured, and in this format, it allows you to work other excel magic (like index matches and IF statements), and you can get really tricky by copying the entire pivot table, and configuring it differently...matching it against itself. As extra icing on the cake, pivot tables are quicker to sort, just right click the column you want to sort by, and click \"sort\". </p><p>In summary, we learned the following: </p><ul><li>The Engineer's competence feedback loop</li><li>How to use the design tab to format a pivot table to make it friendlier for calculations.</li><li>How to sort within a pivot table.</li><li>Some ideas for how you can mess around with this functionality.</li></ul><p>Next time, we'll go full McGuyver and use Excel (and Excel alone) to replicate some computer code that if it were programmed in a standard language, would only take 5 seconds to write! </p>","url":"https://hackersandslackers.com/excel-pivot-table-party/","uuid":"39b55165-4f71-46ec-a4c5-f3bb4a58fc4d","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b529cc5529141018f9dad1b"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736ad","title":"Lynx Roundup, July 21st","slug":"lynx-roundup-july-21st","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/lynx12@2x.jpg","excerpt":"Quantum computing!  Database indices!  How to give helpful answers via Sensible Defaults!","custom_excerpt":"Quantum computing!  Database indices!  How to give helpful answers via Sensible Defaults!","created_at_pretty":"21 July, 2018","published_at_pretty":"21 July, 2018","updated_at_pretty":"25 July, 2018","created_at":"2018-07-20T21:54:44.000-04:00","published_at":"2018-07-21T07:30:00.000-04:00","updated_at":"2018-07-24T22:06:04.000-04:00","meta_title":"Quantum computing!  Database indices!  How to give helpful answers via Sensible Defaults! | Hackers And Slackers","meta_description":"Quantum computing!  Database indices!  How to give helpful answers via Sensible Defaults!","og_description":"Quantum computing!  Database indices!  How to give helpful answers via Sensible Defaults!","og_image":"https://hackersandslackers.com/content/images/lynx/lynx12@2x.jpg","og_title":"Lynx Roundup, July 21st","twitter_description":"Quantum computing!  Database indices!  How to give helpful answers via Sensible Defaults!","twitter_image":"https://hackersandslackers.com/content/images/lynx/lynx12@2x.jpg","twitter_title":"Lynx Roundup, July 21st","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://medium.com/@Pier/vue-js-the-good-the-meh-and-the-ugly-82800bbe6684\n\n\n\nhttps://eng.uber.com/h3/\n\n\n\nhttps://www.bennadel.com/blog/3467-the-not-so-dark-art-of-designing-database-indexes-reflections-from-an-average-software-engineer.htm\n\n\n\nhttps://www.bennadel.com/blog/3413-the-practice-of-empathy-and-the-avoidance-of-it-depends-as-an-answer.htm","html":"<p></p><figure class=\"kg-card kg-embed-card\"><iframe width=\"480\" height=\"270\" src=\"https://www.youtube.com/embed/OWJCfOvochA?feature=oembed\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe></figure><p></p><p><a href=\"https://medium.com/@Pier/vue-js-the-good-the-meh-and-the-ugly-82800bbe6684\">https://medium.com/@Pier/vue-js-the-good-the-meh-and-the-ugly-82800bbe6684</a></p><p></p><p><a href=\"https://eng.uber.com/h3/\">https://eng.uber.com/h3/</a></p><p></p><p><a href=\"https://www.bennadel.com/blog/3467-the-not-so-dark-art-of-designing-database-indexes-reflections-from-an-average-software-engineer.htm\">https://www.bennadel.com/blog/3467-the-not-so-dark-art-of-designing-database-indexes-reflections-from-an-average-software-engineer.htm</a></p><p></p><p><a href=\"https://www.bennadel.com/blog/3413-the-practice-of-empathy-and-the-avoidance-of-it-depends-as-an-answer.htm\">https://www.bennadel.com/blog/3413-the-practice-of-empathy-and-the-avoidance-of-it-depends-as-an-answer.htm</a></p>","url":"https://hackersandslackers.com/lynx-roundup-july-21st/","uuid":"5e99968e-4389-45a7-b33e-43ebedd88e86","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b529264529141018f9dace9"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736a8","title":"Lynx Roundup, July 20th","slug":"lynx-roundup-july-20th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/73@2x.jpg","excerpt":"Kafka!  New brain cell!  Computers made of liquid!","custom_excerpt":"Kafka!  New brain cell!  Computers made of liquid!","created_at_pretty":"13 July, 2018","published_at_pretty":"20 July, 2018","updated_at_pretty":"25 July, 2018","created_at":"2018-07-13T04:34:04.000-04:00","published_at":"2018-07-20T07:00:00.000-04:00","updated_at":"2018-07-24T22:06:04.000-04:00","meta_title":"Lynx Roundup, July 20th | Hackers and Slackers","meta_description":"Kafka!  New brain cell!  Computers made of liquid!","og_description":"Kafka!  New brain cell!  Computers made of liquid!","og_image":"https://hackersandslackers.com/content/images/lynx/73@2x.jpg","og_title":"Lynx Roundup, July 20th","twitter_description":"Kafka!  New brain cell!  Computers made of liquid!","twitter_image":"https://hackersandslackers.com/content/images/lynx/73@2x.jpg","twitter_title":"Lynx Roundup, July 20th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Big Data","slug":"bigdata","description":"Work with unstructured data across file types and schemas. Tools such as data warehouses, Hadoop, Spark, BigQuery, etc.","feature_image":null,"meta_description":"Work with massive amounts of unstandardized data across file types and schemas. Includes working with data warehouses, Hadoop, Spark, BigQuery, etc.","meta_title":"Big Data | Hackers and Slackers","visibility":"public"},{"name":"Machine Learning","slug":"machine-learning","description":"The latest developments in machine learning tools and technology available to data scientists.","feature_image":null,"meta_description":"The latest developments in machine learning tools and technology available to data scientists.","meta_title":"Machine Learning | Hackers and Slackers","visibility":"public"},{"name":"Science News","slug":"science-news","description":"Breakthroughs in general science.","feature_image":null,"meta_description":"Breakthroughs in general science.","meta_title":"Science News | Hackers and Slackers","visibility":"public"},{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"http://www.admintome.com/blog/kafka-python-and-google-analytics/\n\n\n\nhttps://neurosciencenews.com/learning-neurons-9516/\n\n\n\nhttp://cs231n.github.io/understanding-cnn/\n\n\n\nhttps://code.fb.com/data-infrastructure/spiral-self-tuning-services-via-real-time-machine-learning/\n\n\n\nhttps://www.nist.gov/news-events/news/2018/06/nist-researchers-simulate-simple-logic-nanofluidic-computing","html":"<p></p><p><a href=\"http://www.admintome.com/blog/kafka-python-and-google-analytics/\">http://www.admintome.com/blog/kafka-python-and-google-analytics/</a></p><p></p><p><a href=\"https://neurosciencenews.com/learning-neurons-9516/\">https://neurosciencenews.com/learning-neurons-9516/</a></p><p></p><p><a href=\"http://cs231n.github.io/understanding-cnn/\">http://cs231n.github.io/understanding-cnn/</a></p><p></p><p><a href=\"https://code.fb.com/data-infrastructure/spiral-self-tuning-services-via-real-time-machine-learning/\">https://code.fb.com/data-infrastructure/spiral-self-tuning-services-via-real-time-machine-learning/</a></p><p></p><p><a href=\"https://www.nist.gov/news-events/news/2018/06/nist-researchers-simulate-simple-logic-nanofluidic-computing\">https://www.nist.gov/news-events/news/2018/06/nist-researchers-simulate-simple-logic-nanofluidic-computing</a></p>","url":"https://hackersandslackers.com/lynx-roundup-july-20th/","uuid":"556f0ff4-3929-47ac-87a7-fe061c056c38","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b4863fcc6a9e951f8a6cc67"}},{"node":{"id":"Ghost__Post__5c5822200a214230dae40906","title":"Powerful Page Templates in Flask With Jinja","slug":"powerful-page-templates-in-flask-with-jinja","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/02/jinja@2x.jpg","excerpt":"Work with markup that writes itself using Flask's built-in Jinja library.","custom_excerpt":"Work with markup that writes itself using Flask's built-in Jinja library.","created_at_pretty":"04 February, 2019","published_at_pretty":"20 July, 2018","updated_at_pretty":"28 March, 2019","created_at":"2019-02-04T06:29:36.000-05:00","published_at":"2018-07-20T06:30:00.000-04:00","updated_at":"2019-03-28T05:18:50.000-04:00","meta_title":"Powerful Page Templates in Flask With Jinja | Hackers and Slackers","meta_description":"Work with markup that writes itself. Flask's built-in Jinja library allows you to create Python applications with smarter page templates.","og_description":"Work with markup that writes itself. Flask's built-in Jinja library allows you to create Python applications with smarter page templates.","og_image":"https://hackersandslackers.com/content/images/2019/02/jinja@2x.jpg","og_title":"Powerful Page Templates in Flask With Jinja","twitter_description":"Work with markup that writes itself. Flask's built-in Jinja library allows you to create Python applications with smarter page templates.","twitter_image":"https://hackersandslackers.com/content/images/2019/02/jinja@2x.jpg","twitter_title":"Powerful Page Templates in Flask With Jinja","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"},{"name":"#Building Flask Apps","slug":"building-flask-apps","description":"Python’s fast-growing and flexible microframework. Can handle apps as simple as API endpoints, to monoliths remininiscent of Django.","feature_image":"https://hackersandslackers.com/content/images/2019/03/flask-gettingstarted.jpg","meta_description":"Python’s fastest growing, most flexible, and perhaps most Pythonic framework.","meta_title":"Building Flask Apps","visibility":"internal"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"}],"plaintext":"So you want to build a web application in Python, eh? Hasn't anybody told you...\nPython is SLOW! Python is subject to CONTEXT SWITCHING! Oh, the HORROR!\n\nChances are most of these people aren't well-versed in Python at all. I enjoy\ncreating web applications in Flask more-so than I do in Node. Even if we were to\nput aside somehow the thousands of potentially malicious Javascript libraries\nneeded to stand up a simple app, or the decades of legacy knowledge needed to\ntolerate the JavaScript ecosystem without going insane: the simplicity of Flask\npaired and its libraries get the job done faster in most cases. Oh yeah, and you\ncan write backend logic in a language intended to do  so at the drop of a dime.\n\nOne of Flask's early surprises hits you when working with Jinja2. Jinja is\nFlask's default templating system, which processes templates into HTML markup to\nbe served to users at runtime. In addition to the inheritance and partial\ninclusion we've come to expect from templating systems, Jinja is particularly\nwell-equipped build pages out of raw data. You'll see what I mean.\n\nLayouts, Pages, and Partials\nLet's add three pages to our templates  folder, which is a directory typically\nreserved for template files. We'll add 3 files: layout.html, index.html, and \nnav.html.  Each of these templates represents one of three common template\n\"types\" when building in Jinja. \n\nOh, and disregard the fact that these files retain an HTML file extension- they\nare oh, so much more than that.\n\nmyproject\n├─ /templates\n│  ├─ layout.html\n│  ├─ index.html\n│  └─ nav.html\n└─ app.py\n\n\nCreate a Simple Route to Get Started\nWe'll make a brief stop in app.py  to set up the most basic logic an app can\nhave: serving up a homepage:\n\nfrom flask import Flask, render_template\n\napp = Flask(__name__, template_folder=\"templates\")\n\n@app.route('/')\ndef home():\n    \"\"\"Landing page.\"\"\"\n    return render_template('/index.html', title=\"Lame Site\")\n\n\nNote how we specify template_folder=\"templates\"  when instantiating our app\nobject; this is critical to let Flask know where templates are going to be\nstored in the project directory. Be aware that this directory is almost always\nexplicitly set as /templates. If you store your templates anywhere else, you\nhave a mental health problem.\n\nThe Bread and Butter of Template Inheritance\nLayout.html  is going to be our base template. In other words, this barebones\nfile will represent elements which should be common to all  of our app's pages,\nsuch as metadata, analytics, etc. It is the 'page we load other pages into.'  \n\nIf you're familiar with Handlebars\n[https://hackersandslackers.com/handlebars-templating-in-expressjs/], Jinja's\ntemplating concepts are the same deal with slightly different syntax. Here's a\ndecent layout.html  example:\n\n<!-- layout.html -->\n<!doctype html>\n<html>\n<head>\n  <title>{{title}}</title>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, viewport-fit=cover\">\n    <!-- Google Analytics -->\n    <script>\n    window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;\n    ga('create', 'UA-XXXXX-Y', 'auto');\n    ga('send', 'pageview');\n    </script>\n    <script async src='https://www.google-analytics.com/analytics.js'></script>\n    <!-- End Google Analytics -->\n</head>\n<body>\n  {% include 'nav.html' %}\n  {% block content %}{% endblock %}\n  {% include 'footer.html' %}\n</body>\n</html>\n\n\nNote the bracketed values in our otherwise-HTML! Each of these represents a\nreservation of \"stuff to come.\" That \"stuff\" could come in the form of a\nvariable, a partial, or code from another template. \n\nWe've just utilized three templating concepts in the above example:\n\n * The double-bracket {{title}}  is reserved to be replaced with a variable\n   named 'title' when we serve this view in Flask. We pass variables to\n   templates when we render them in the 'routes' part of our app.\n * Includes such as {% include 'nav.html' %}  are saying \"load the entirety of a\n   separate HTML file named nav.html  into this spot right here.\" This is called\n   a partial. Partials are encapsulated, standalone components intended to be\n   frequently reused throughout our app.\n * Things get real interesting with blocks, as seen in {% block content %}{%\n   endblock %}. This statement is reserving a chunk  of our template to receive\n   a corresponding chunk  of another template when such a template is loaded\n   into layout.hml. Remember: layouts are just barebones commonalities between\n   pages. To build meaningful pages, we must combine the parts of unique pages\n   (such as index.html) with layouts to create full pages. \n\nLet's look at index.html:  the file we're about to shove into layout.html:\n\n<!-- index.html -->\n{% extends 'layout.html' %}\n\n{% block content %}\n<div class=\"container\">\n<h1>My Lame site</h1>\n    <p>Hello, and welcome to my lame site! I'm so glad you're here. I'm so lonely.</p>\n</div>\n{% endblock %}\n\n\nRemember in the route we created in app.py:  our function states \"load\nindex.html when users visit /.\" We never mention layout.html  at all. That is\nbecause by including {% extends 'layout.html' %}  in  index.html, we're  stating\nthat index.html  should extend  layout.html. index.html  is our unique snowflake\nof a page, and layout  is our boring skeleton.\n\nBack to talking about blocks:  templates can contain multiple \"blocks\" of code.\nEach named block (such as  {% block content %}) in a page such as index.html \nshould correspond to an empty block we reserved in layout.html. When we serve\nthe final page, it's like we're plugging plugs into their respective sockets. We\ncan reserve as many \"blocks\" in our layout as we want, and thus serve multiple\nblocks within the same template. \n\nTo help illustrate this, let's say you're building a horrible clickbait site\nwhere your requirements dictate that horrible, invasive ads should appear\nbetween pieces of content of every page of your site. If we keep that page\nstructure to layout.html, then we can retrofit our layout to have multiple slots\nfor incoming content from index.html:  both before  and after  the horrible\nmonstrosity of an idea I already regret imagining. If index.html  contained both\n {% block content1 %}...{% endblock %}  and {% block content2 %}...{% endblock\n%}, those blocks are now independent entities which can be loaded to their\nrespective slots.\n\nPassing Data to Templates\nWhen we passed title=\"Lame Site\"  to index.html in our route, we were passing a\nsimple variable to replace {{title}}. Check out this example of what we can do\nwhen we pass JSON objects to templates:\n\n<form action=\"/submitted\" method=post>\n  {% if error %}\n   <p class=error><strong>Error:</strong> {{ error }}</p>\n  {% endif %}\n  {% for field in request.fields.requestTypeFields %}\n     {% if field.name in ('Category', 'Product', 'Dashboard Name') %}\n          <select id=\"{{request.name}} {{field.name}}\" \n                  name=\"{{field.name}}\" \n                  label=\"{{field.name}}\" \n                  class=\"input-field\">\n           <option value=\"Choose your option\" \n                   disabled \n                   selected>\n               {{field.description}}\n            </option>\n            {% for option in field.validValues %}\n                <option value=\"{{option.value}}\">\n                    {{option.label}}\n                </option>\n                {% endfor %}\n            </select>\n            <label>{{field.name}}</label>\n       {% elif field.name == 'Description' %}\n            <label for=\"{{request.name}} {{field.name}}\">\n                {{field.name}}\n            </label>\n            <textarea id=\"{{field.name}}\" \n                      class=\"materialize-textarea input-field\" \n                      placeholder=\"{{field.description}}\" \n                      name=\"{{field.name}}\">\n             </textarea>\n         {% else %}\n         <label for=\"{{request.name}} {{field.name}}\">\n             {{field.name}}\n         </label>\n         <input placeholder=\"{{field.description}}\" \n                id=\"{{request.name}} {{field.name}}\" \n                type=\"text\" \n                class=\"input-field validate\" \n                name=\"{{field.name}}\">\n         {% endif %}\n    {% endfor %}\n    <input type=\"submit\" value=\"Submit\" class=\"btn cyan formsubmit\">\n</form>\n\n\nThose are for  loops and if  statements all working against a single JSON\nobject. This specific example demonstrates building a form based on a JSON\nobject; one we've happened to fetch from JIRA. Just by passing this JSON to a\nJinja template, we can recreate an entire enterprise system's form logic in a\nsimple template block.\n\nHere's another example. This one returns feedback to a user who presumably\nfilled out a form incorrectly, thus must be chastised with popup error messages:\n\n{% with messages = get_flashed_messages() %}\n  {% if messages %}\n    <ul class=flashes>\n    {% for message in messages %}\n      <li>{{ message }}</li>\n    {% endfor %}\n    </ul>\n  {% endif %}\n{% endwith %}\n\n\nSmall But Powerful\nTemplates are one small part of Flask, but they demonstrate a greater philosophy\ngenerally consistent throughout the framework: small libraries can do big\nthings. Sometimes it may take some courage to maneuver with the tools at hand\ncleverly, but the power of the Triforce is with you. You are Hyrule's last hope,\ngreat warrior... now you must make haste in your duties to build little apps. Or\nwhatever.","html":"<p>So you want to build a web application in Python, eh? Hasn't anybody told you... Python is <em>SLOW</em>! Python is subject to <em>CONTEXT SWITCHING</em>! Oh, the <em>HORROR</em>!</p><p>Chances are most of these people aren't well-versed in Python at all. I enjoy creating web applications in Flask more-so than I do in Node. Even if we were to put aside somehow the thousands of potentially malicious Javascript libraries needed to stand up a simple app, or the decades of legacy knowledge needed to tolerate the JavaScript ecosystem without going insane: the simplicity of Flask paired and its libraries get the job done faster in most cases. Oh yeah, and you can write backend logic in a language <em>intended to do</em> so at the drop of a dime.</p><p>One of Flask's early surprises hits you when working with <strong>Jinja2</strong>. Jinja is Flask's default templating system, which processes templates into HTML markup to be served to users at runtime. In addition to the inheritance and partial inclusion we've come to expect from templating systems, Jinja is particularly well-equipped build pages out of raw data. You'll see what I mean.</p><h2 id=\"layouts-pages-and-partials\">Layouts, Pages, and Partials</h2><p>Let's add three pages to our <em>templates</em> folder, which is a directory typically reserved for template files. We'll add 3 files: <strong>layout.html, index.html, </strong>and <strong>nav.html.</strong> Each of these templates represents one of three common template \"types\" when building in Jinja. </p><p>Oh, and disregard the fact that these files retain an HTML file extension- they are oh, so much more than that.</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">myproject\n├─ /templates\n│  ├─ layout.html\n│  ├─ index.html\n│  └─ nav.html\n└─ app.py\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"create-a-simple-route-to-get-started\">Create a Simple Route to Get Started</h2><p>We'll make a brief stop in <strong>app.py</strong> to set up the most basic logic an app can have: serving up a homepage:</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">from flask import Flask, render_template\n\napp = Flask(__name__, template_folder=&quot;templates&quot;)\n\n@app.route('/')\ndef home():\n    &quot;&quot;&quot;Landing page.&quot;&quot;&quot;\n    return render_template('/index.html', title=&quot;Lame Site&quot;)\n</code></pre>\n<!--kg-card-end: markdown--><p>Note how we specify <code>template_folder=\"templates\"</code> when instantiating our app object; this is critical to let Flask know where templates are going to be stored in the project directory. Be aware that this directory is almost always explicitly set as /<em>templates. </em>If you store your templates anywhere else, you have a mental health problem.</p><h2 id=\"the-bread-and-butter-of-template-inheritance\">The Bread and Butter of Template Inheritance</h2><p><strong>Layout.html</strong> is going to be our base template. In other words, this barebones file will represent elements which should be common to <em>all</em> of our app's pages, such as metadata, analytics, etc. It is the '<em>page we load other pages into.'</em> </p><p>If you're familiar with <a href=\"https://hackersandslackers.com/handlebars-templating-in-expressjs/\">Handlebars</a>, Jinja's templating concepts are the same deal with slightly different syntax. Here's a decent <strong>layout.html</strong> example:</p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">&lt;!-- layout.html --&gt;\n&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;{{title}}&lt;/title&gt;\n  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\n  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, viewport-fit=cover&quot;&gt;\n    &lt;!-- Google Analytics --&gt;\n    &lt;script&gt;\n    window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;\n    ga('create', 'UA-XXXXX-Y', 'auto');\n    ga('send', 'pageview');\n    &lt;/script&gt;\n    &lt;script async src='https://www.google-analytics.com/analytics.js'&gt;&lt;/script&gt;\n    &lt;!-- End Google Analytics --&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  {% include 'nav.html' %}\n  {% block content %}{% endblock %}\n  {% include 'footer.html' %}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<!--kg-card-end: markdown--><p>Note the bracketed values in our otherwise-HTML! Each of these represents a reservation of \"stuff to come.\" That \"stuff\" could come in the form of a variable, a partial, or code from another template. </p><p>We've just utilized three templating concepts in the above example:</p><ul><li>The double-bracket <code>{{title}}</code> is reserved to be replaced with a variable named 'title' when we serve this view in Flask. We pass variables to templates when we render them in the 'routes' part of our app.</li><li>Includes such as <code>{% include 'nav.html' %}</code> are saying \"load the entirety of a separate HTML file named <strong>nav.html</strong> into this spot right here.\" This is called a <em>partial</em>. Partials are encapsulated, standalone components intended to be frequently reused throughout our app.</li><li>Things get real interesting with <em>blocks</em>, as seen in <code>{% block content %}{% endblock %}</code>. This statement is reserving a <em>chunk</em> of our template to receive a <em>corresponding chunk</em> of another template when such a template is loaded into <strong>layout.hml</strong>. Remember: layouts are just barebones commonalities between pages. To build meaningful pages, we must combine the parts of unique pages (such as <strong>index.html</strong>) with layouts to create full pages. </li></ul><p>Let's look at <strong>index.html:</strong> the file we're about to shove into <strong>layout.html:</strong></p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">&lt;!-- index.html --&gt;\n{% extends 'layout.html' %}\n\n{% block content %}\n&lt;div class=&quot;container&quot;&gt;\n&lt;h1&gt;My Lame site&lt;/h1&gt;\n    &lt;p&gt;Hello, and welcome to my lame site! I'm so glad you're here. I'm so lonely.&lt;/p&gt;\n&lt;/div&gt;\n{% endblock %}\n</code></pre>\n<!--kg-card-end: markdown--><p>Remember in the route we created in <strong>app.py:</strong> our function states <em>\"load index.html when users visit /.\" </em>We never mention <strong>layout.html</strong> at all. That is because by including <code>{% extends 'layout.html' %}</code><strong> </strong>in<strong> index.html, </strong>we're<strong> </strong>stating that <strong>index.html</strong> should <em>extend</em> <strong>layout.html. index.html</strong> is our unique snowflake of a page, and <strong>layout</strong> is our boring skeleton.</p><p>Back to talking about blocks:  templates can contain multiple \"blocks\" of code. Each named block (such as<strong> </strong><code>{% block content %}</code>) in a page such as <strong>index.html</strong> should correspond to an empty block we reserved in <strong>layout.html</strong>. When we serve the final page, it's like we're plugging plugs into their respective sockets. We can reserve as many \"blocks\" in our layout as we want, and thus serve multiple blocks within the same template. </p><p>To help illustrate this, let's say you're building a horrible clickbait site where your requirements dictate that horrible, invasive ads should appear between pieces of content of every page of your site. If we keep that page structure to <strong>layout.html</strong>, then we can retrofit our layout to have multiple slots for incoming content from <strong>index.html:</strong> both <em>before</em> and <em>after</em> the horrible monstrosity of an idea I already regret imagining. If <strong>index.html</strong> contained both <code>{% block content1 %}...{% endblock %}</code> and <code>{% block content2 %}...{% endblock %}</code>, those blocks are now independent entities which can be loaded to their respective slots.</p><h2 id=\"passing-data-to-templates\">Passing Data to Templates</h2><p>When we passed <code>title=\"Lame Site\"</code> to <strong>index.html </strong>in our route, we were passing a simple variable to replace <code>{{title}}</code>. Check out this example of what we can do when we pass JSON objects to templates:</p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">&lt;form action=&quot;/submitted&quot; method=post&gt;\n  {% if error %}\n   &lt;p class=error&gt;&lt;strong&gt;Error:&lt;/strong&gt; {{ error }}&lt;/p&gt;\n  {% endif %}\n  {% for field in request.fields.requestTypeFields %}\n     {% if field.name in ('Category', 'Product', 'Dashboard Name') %}\n          &lt;select id=&quot;{{request.name}} {{field.name}}&quot; \n                  name=&quot;{{field.name}}&quot; \n                  label=&quot;{{field.name}}&quot; \n                  class=&quot;input-field&quot;&gt;\n           &lt;option value=&quot;Choose your option&quot; \n                   disabled \n                   selected&gt;\n               {{field.description}}\n            &lt;/option&gt;\n            {% for option in field.validValues %}\n                &lt;option value=&quot;{{option.value}}&quot;&gt;\n                    {{option.label}}\n                &lt;/option&gt;\n                {% endfor %}\n            &lt;/select&gt;\n            &lt;label&gt;{{field.name}}&lt;/label&gt;\n       {% elif field.name == 'Description' %}\n            &lt;label for=&quot;{{request.name}} {{field.name}}&quot;&gt;\n                {{field.name}}\n            &lt;/label&gt;\n            &lt;textarea id=&quot;{{field.name}}&quot; \n                      class=&quot;materialize-textarea input-field&quot; \n                      placeholder=&quot;{{field.description}}&quot; \n                      name=&quot;{{field.name}}&quot;&gt;\n             &lt;/textarea&gt;\n         {% else %}\n         &lt;label for=&quot;{{request.name}} {{field.name}}&quot;&gt;\n             {{field.name}}\n         &lt;/label&gt;\n         &lt;input placeholder=&quot;{{field.description}}&quot; \n                id=&quot;{{request.name}} {{field.name}}&quot; \n                type=&quot;text&quot; \n                class=&quot;input-field validate&quot; \n                name=&quot;{{field.name}}&quot;&gt;\n         {% endif %}\n    {% endfor %}\n    &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; class=&quot;btn cyan formsubmit&quot;&gt;\n&lt;/form&gt;\n</code></pre>\n<!--kg-card-end: markdown--><p>Those are <code>for</code> loops and <code>if</code> statements all working against a single JSON object. This specific example demonstrates building a form based on a JSON object; one we've happened to fetch from JIRA. Just by passing this JSON to a Jinja template, we can recreate an entire enterprise system's form logic in a simple template block.</p><p>Here's another example. This one returns feedback to a user who presumably filled out a form incorrectly, thus must be chastised with popup error messages:</p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">{% with messages = get_flashed_messages() %}\n  {% if messages %}\n    &lt;ul class=flashes&gt;\n    {% for message in messages %}\n      &lt;li&gt;{{ message }}&lt;/li&gt;\n    {% endfor %}\n    &lt;/ul&gt;\n  {% endif %}\n{% endwith %}\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"small-but-powerful\">Small But Powerful</h3><p>Templates are one small part of Flask, but they demonstrate a greater philosophy generally consistent throughout the framework: small libraries can do big things. Sometimes it may take some courage to maneuver with the tools at hand cleverly, but the power of the Triforce is with you. You are Hyrule's last hope, great warrior... now you must make haste in your duties to build little apps. Or whatever.</p>","url":"https://hackersandslackers.com/powerful-page-templates-in-flask-with-jinja/","uuid":"055ba6eb-f177-4b9d-b85e-2c7730850bf1","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c5822200a214230dae40906"}}]}},"pageContext":{"pageNumber":22,"humanPageNumber":23,"skip":264,"limit":12,"numberOfPages":33,"previousPagePath":"/page/22","nextPagePath":"/page/24"}}