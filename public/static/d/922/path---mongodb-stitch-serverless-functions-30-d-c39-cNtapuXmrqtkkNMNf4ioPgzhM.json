{"data":{"ghostPost":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736c9","title":"MongoDB Stitch Serverless Functions","slug":"mongodb-stitch-serverless-functions","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/08/stitch3@2x.jpg","excerpt":"A crash course in MongoDB Stitch serverless functions: the bread and butter of MongoDB Cloud.","custom_excerpt":"A crash course in MongoDB Stitch serverless functions: the bread and butter of MongoDB Cloud.","created_at_pretty":"06 August, 2018","published_at_pretty":"26 November, 2018","updated_at_pretty":"05 April, 2019","created_at":"2018-08-06T19:35:37.000-04:00","published_at":"2018-11-26T08:00:00.000-05:00","updated_at":"2019-04-04T21:42:58.000-04:00","meta_title":"Using Serverless Functions in MongoDB Stitch  | Hackers And Slackers","meta_description":"You have a database, and you want to get data out of it. MongoDB Stitch can achieve this without building an API and can do it securely via frontend code.","og_description":"A crash course in MongoDB Stitch serverless functions: the bread and butter of MongoDB Cloud.\n","og_image":"https://hackersandslackers.com/content/images/2018/08/stitch3@2x.jpg","og_title":"MongoDB Stitch Serverless Functions","twitter_description":"A crash course in MongoDB Stitch serverless functions: the bread and butter of MongoDB Cloud.\n","twitter_image":"https://hackersandslackers.com/content/images/2018/08/stitch3@2x.jpg","twitter_title":"MongoDB Stitch Serverless Functions","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"NoSQL","slug":"nosql","description":"Schemaless data for gunslingers. Heavily focused on databases such as MongoDB, as well as hosting said databases as cloud instances.","feature_image":null,"meta_description":"Schemaless data for gunslingers. Heavily focused on databases such as MongoDB, as well as hosting said databases as cloud instances.","meta_title":"NoSQL | Hackers and Slackers","visibility":"public"},"tags":[{"name":"NoSQL","slug":"nosql","description":"Schemaless data for gunslingers. Heavily focused on databases such as MongoDB, as well as hosting said databases as cloud instances.","feature_image":null,"meta_description":"Schemaless data for gunslingers. Heavily focused on databases such as MongoDB, as well as hosting said databases as cloud instances.","meta_title":"NoSQL | Hackers and Slackers","visibility":"public"},{"name":"Frontend","slug":"frontend","description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","feature_image":null,"meta_description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","meta_title":"Frontend Development | Hackers and Slackers","visibility":"public"},{"name":"JavaScript","slug":"javascript","description":"JavaScript covering both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","feature_image":null,"meta_description":"JavaScript topics, both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","meta_title":"Javascript Tutorials | Hackers and Slackers","visibility":"public"},{"name":"Data Engineering","slug":"dataengineering","description":"The systematic collection and transformation of data via the creation of tools and pipelines.","feature_image":null,"meta_description":null,"meta_title":"Data Engineering | Hackers and Slackers","visibility":"public"},{"name":"#MongoDB Cloud","slug":"mongodb-cloud","description":"All you need to know about MongoDB’s official cloud offering. Dive into MongoDB Atlas, or the architecture & microservices provided by MongoDB Stitch.","feature_image":"https://hackersandslackers.com/content/images/2019/03/mongodbcloudseries.jpg","meta_description":"All you need to know about MongoDB’s official cloud offering. Dive into MongoDB Atlas, or the architecture & microservices provided by MongoDB Stitch.","meta_title":"MongoDB Cloud","visibility":"internal"}],"plaintext":"At times, I've found my opinion of MongoDB Atlas  and MongoDB Stitch  to waver\nbetween two extremes. Sometimes I'm struck by the allure of a cloud which\nfundamentally disregards schemas (wooo no schema party!). Other times, such as\nwhen Mongo decides to upgrade to a new version and you find all your production\ninstances broken, I like the ecosystem a bit less. \n\nMy biggest qualm with MongoDB is poor documentation. The \"tutorials\" and sample\ncode seems hacked-together, unmaintained, and worst of all, inconsistent with\nitself. Reading through the docs seems to always end up with Mongo forcing\nTwilio down my throat my for some miserable reason. \n\nJust to illustrate how bad things can get, below are two totally sets of\ndocumentation for what is supposed to be the same product. Mongo's main\ndocumentation on the left frequently references the bastardized documentation on\nthe right. What is the documentation on the right? It's a collection of\nnonsense\nliving on an S3 bucket\n[https://s3.amazonaws.com/stitch-sdks/js/docs/4.0.0/index.html]  which lists the\nmethods black-boxed into Stitch, often with zero explanation on how to actually\nutilize functionality.\n\nWhich one is real? And WHY?!How frustrating is this? I've had email user\nauthentication \"working\" for weeks as far as Stitch's logs say, although not a\nsingle user has actually been registered in that time. Anyways, I digress.\n\nMaking a Serverless Function\nStitch Serverless functions are of course strictly Javascript (MongoDB abides by\nECMA2015 features). In your Stitch console, check out the \"functions\" link in\nthe left hand nav:\n\nGo ahead and create a new function.There are just a few things we need to\nspecify when creating a new function:\n\n * The name of the function (duh).\n * Whether or not the function can be accessed \"publicly\". A \"Private\" function\n   is the equivalent of a function that only accessible to the VPC it belongs to\n   (although technically MongoDB Cloud doesn't use this terminology).\n * A condition which needs to be met in order for the function to execute.\n\nHere's a screenshot of everything we just went over. Because whatever.Switch\nover to the function editor to start really F*&king Sh!t up.\n\nMongo's Serverless Function Editor\nWe can call a Serverless function in a number of ways, with one of those ways\nbeing directly from our frontend code. In this case, we're basically just taking\na Javascript function which could  live in our frontend codebase and moving it\nto the cloud, thus functions can be passed any number of arguments (just like a\nnormal function).\n\nLuckily for us, Mongo provides some commented out boilerplate code when creating\na new function, which gives us an idea of what we might want to use these\nfunctions for:\n\nexports = function(arg){\n  /*\n    Accessing application's values:\n    var x = context.values.get(\"value_name\");\n\n    Accessing a mongodb service:\n    var collection = context.services.get(\"mongodb-atlas\").db(\"dbname\").collection(\"coll_name\");\n    var doc = collection.findOne({owner_id: context.user.id});\n\n    To call other named functions:\n    var result = context.functions.execute(\"function_name\", arg1, arg2);\n\n    Try running in the console below.\n  */\n  return {arg: arg};\n};\n\n\nPay special attention to context.services  here. When using a serverless\nfunction to access MongoDB services such as our database or endpoints, we can\naccess these via context.services  along with whichever service we're trying to\nmess with.\n\nQuerying our Database Within a Function\nLet's grab a single record from a collection in our Atlas collection:\n\nexports = function(arg){\n      const mongodb = context.services.get(\"mongodb-atlas\");\n      const collection = mongodb.db(\"blog\").collection(\"authors\");\n      var result = collection.findOne({\"author\": arg});\n      return result;\n};\n\n\nWe use findOne here to return an object, whereas we'd probably use toArray  if\nwe'd be expecting multiple results. The query we're running is contained within \nfindOne({\"author\": arg}). Our function takes an argument and returns a record\nwhere the value matches the argument: this makes our functions highly reusable,\nof course.\n\nCalling Our Function via Our App\nAs a recap, you have the option of including Stitch in your app either via a\nlink to a script or by installing the appropriate NPM modules. It's preferable\nto do the latter, but for the sake of this post, my patience with dealing with\nJavascript's babel browserify webpack gulp yarn npm requires package-lock .env\npipify facepunch  ecosystem has reached its limit. \n\nFeel free to follow in my footsteps of worst practices by embedding stitch\ndirectly:\n\n<script src=\"https://s3.amazonaws.com/stitch-sdks/js/bundles/4.0.8/stitch.js\"></script>\n\n\nAuthenticating Before Calling Functions\nBefore making queries or interacting with any serverless functions of any kind,\nwe need to authenticate a 'user' with the server; even if that user is an\nanonymous one (it's in our own best benefit to know which user crashed the\nserver, even if that 'users' is a random string of numbers). Because we allowed\nanonymous users to peruse through our data, this is easy:\n\n// Authenticates anonymous user\nclient.auth.loginWithCredential(new stitch.AnonymousCredential()).then(user => {\n  console.log('logged in anonymously as user')\n});\n\n\nCalling our Function\nNow that that's done, we can call our function immediately after:\n\n// Authenticates anonymous user\nclient.auth.loginWithCredential(new stitch.AnonymousCredential()).then(user => {\n  console.log('logged in anonymously as user')\n});\n\n// Calls function\nclient.callFunction(\"getUsers\", [\"{{author}}\"]).then(result => {\n  console.log(result)\n});\n\n\nOur function is called get users  and we're passing a single parameter of \n{{author}}. Even though one parameter is being passed, we pass parameters as\nlists as Mongo Serverless functions, as these functions are agnostic to what\nmight be coming their way.\n\nUsing Functions to Grab Stored Values\nLet's look at one more use case where calling a Stitch Serverless function might\ncome in handy.\n\nBack in the Stitch UI, check out the \"values\" tab in the left-hand nav. This is\na place where we can store constant values which should accessible through our\napplication, or even a place to retrieve secrets:\n\n2secret4uValues can only be retrieved by functions, and this would be a good\ntime to ensure those particular functions are marked \"private\" For instance, if\nyou have an API call you need to make, It would be best to create a function\nthat handles the logic of that API call, and within that function, invoke\nanother private function whose job it is simply to retrieve the key in question.\nMake sense?  Ah well, you'll figure it out.\n\nMaking a Serverless Function that Does Something\nAnyway, let's apply our knowledge of functions to actually do something. On our\nsite we currently use a third party Medium widget which fetches stories from a\nuser's Medium account. Here's how that would look in its entirety:\n\n<script src=\"https://s3.amazonaws.com/stitch-sdks/js/bundles/4.0.8/stitch.js\"></script>\n\n<script src=\"https://medium-widget.pixelpoint.io/widget.js\"></script>\n\n<script>\nfunction createMediumCard(medium){\n  console.log('medium= ' + medium);\n  MediumWidget.Init({\n    renderTo: '#medium-widget',\n    params: {\n      \"resource\": 'https://medium.com/' + medium,\n      \"postsPerLine\": 1,\n      \"limit\": 3,\n      \"picture\": \"small\",\n      \"fields\": [\"description\", \"publishAt\"],\n      \"ratio\": \"square\"\n    }\n  })\n  $('#medium').css('display', 'block');\n}\n    \nclient.auth.loginWithCredential(new stitch.AnonymousCredential()).then(user => {\n  console.log('logged in anonymously as user')\n});\n    \nclient.callFunction(\"getUsers\", [\"{{author}}\"]).then(result => {\n  console.log(result)\n});\n</script>\n\n\nNormally, \"resource\": medium,  would actually read the URL of the Medium profile\nwe're trying to embed. However, when you blog on a platform like Ghost which\nonly allows your authors to have either Facebook or Twitter profiles, we need to\nessentially go out of our way to build a second, nonintrusive database to pull\ndata from to add functionality like this. Yeah - I'll have to show you what MY\n\"stack\" looks like for a single blog theme some day. It's ridiculous.\n\nAnyway, that’s all I’ve got for now. I hope these ramblings help you assess\nMongoDB Cloud for yourself. No matter the provider, Enterprise Clouds target fat\nbudgets and are designed to rake in big money. It almost makes you wonder why\nsomebody would pay out of pocket for three of them just to write a stupid blog.","html":"<p>At times, I've found my opinion of <strong>MongoDB Atlas</strong> and <strong>MongoDB Stitch</strong> to waver between two extremes. Sometimes I'm struck by the allure of a cloud which fundamentally disregards schemas (wooo no schema party!). Other times, such as when Mongo decides to upgrade to a new version and you find all your production instances broken, I like the ecosystem a bit less. </p><p><strong>My biggest qualm with MongoDB is poor documentation. </strong>The \"tutorials\" and sample code seems hacked-together, unmaintained, and worst of all, inconsistent with itself. Reading through the docs seems to always end up with Mongo forcing Twilio down my throat my for some miserable reason. </p><p>Just to illustrate how bad things can get, below are two totally sets of documentation for what is supposed to be the same product. Mongo's main documentation on the left frequently references the bastardized documentation on the right. What is the documentation on the right? It's a <a href=\"https://s3.amazonaws.com/stitch-sdks/js/docs/4.0.0/index.html\">collection of nonsense living on an S3 bucket</a> which lists the methods black-boxed into Stitch, often with zero explanation on how to actually utilize functionality.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/mongodocs.jpg\" class=\"kg-image\"><figcaption>Which one is real? And WHY?!</figcaption></figure><!--kg-card-end: image--><p>How frustrating is this? I've had email user authentication \"working\" for weeks as far as Stitch's logs say, although not a single user has actually been registered in that time. Anyways, I digress.</p><h2 id=\"making-a-serverless-function\">Making a Serverless Function</h2><p>Stitch Serverless functions are of course strictly Javascript (MongoDB abides by ECMA2015 features). In your Stitch console, check out the \"functions\" link in the left hand nav:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://res-1.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/Screen-Shot-2018-11-25-at-10.28.24-PM.png\" class=\"kg-image\"><figcaption>Go ahead and create a new function.</figcaption></figure><!--kg-card-end: image--><p>There are just a few things we need to specify when creating a new function:</p><ul><li>The name of the function (duh).</li><li>Whether or not the function can be accessed \"publicly\". A \"Private\" function is the equivalent of a function that only accessible to the VPC it belongs to (although technically MongoDB Cloud doesn't use this terminology).</li><li>A condition which needs to be met in order for the function to execute.</li></ul><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/Screen-Shot-2018-11-25-at-10.31.05-PM_o.png\" class=\"kg-image\"><figcaption>Here's a screenshot of everything we just went over. Because whatever.</figcaption></figure><!--kg-card-end: image--><p>Switch over to the function editor to start really F*&amp;king Sh!t up.</p><h2 id=\"mongo-s-serverless-function-editor\">Mongo's Serverless Function Editor</h2><p>We can call a Serverless function in a number of ways, with one of those ways being directly from our frontend code. In this case, we're basically just taking a Javascript function which <em>could</em> live in our frontend codebase and moving it to the cloud, thus functions can be passed any number of arguments (just like a normal function).</p><p>Luckily for us, Mongo provides some commented out boilerplate code when creating a new function, which gives us an idea of what we might want to use these functions for:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">exports = function(arg){\n  /*\n    Accessing application's values:\n    var x = context.values.get(&quot;value_name&quot;);\n\n    Accessing a mongodb service:\n    var collection = context.services.get(&quot;mongodb-atlas&quot;).db(&quot;dbname&quot;).collection(&quot;coll_name&quot;);\n    var doc = collection.findOne({owner_id: context.user.id});\n\n    To call other named functions:\n    var result = context.functions.execute(&quot;function_name&quot;, arg1, arg2);\n\n    Try running in the console below.\n  */\n  return {arg: arg};\n};\n</code></pre>\n<!--kg-card-end: markdown--><p>Pay special attention to <code>context.services</code> here. When using a serverless function to access MongoDB services such as our database or endpoints, we can access these via <code>context.services</code> along with whichever service we're trying to mess with.</p><h3 id=\"querying-our-database-within-a-function\">Querying our Database Within a Function</h3><p>Let's grab a single record from a collection in our Atlas collection:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">exports = function(arg){\n      const mongodb = context.services.get(&quot;mongodb-atlas&quot;);\n      const collection = mongodb.db(&quot;blog&quot;).collection(&quot;authors&quot;);\n      var result = collection.findOne({&quot;author&quot;: arg});\n      return result;\n};\n</code></pre>\n<!--kg-card-end: markdown--><p>We use <strong>findOne </strong>here to return an object, whereas we'd probably use <strong>toArray</strong> if we'd be expecting multiple results. The query we're running is contained within <code>findOne({\"author\": arg})</code>. Our function takes an argument and returns a record where the value matches the argument: this makes our functions highly reusable, of course.</p><h2 id=\"calling-our-function-via-our-app\">Calling Our Function via Our App</h2><p>As a recap, you have the option of including Stitch in your app either via a link to a script or by installing the appropriate NPM modules. It's preferable to do the latter, but for the sake of this post, my patience with dealing with Javascript's <strong>babel browserify webpack gulp yarn npm requires package-lock .env pipify facepunch</strong> ecosystem has reached its limit. </p><p>Feel free to follow in my footsteps of worst practices by embedding stitch directly:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">&lt;script src=&quot;https://s3.amazonaws.com/stitch-sdks/js/bundles/4.0.8/stitch.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"authenticating-before-calling-functions\">Authenticating Before Calling Functions</h3><p>Before making queries or interacting with any serverless functions of any kind, we need to authenticate a 'user' with the server; even if that user is an anonymous one (it's in our own best benefit to know which user crashed the server, even if that 'users' is a random string of numbers). Because we allowed anonymous users to peruse through our data, this is easy:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">// Authenticates anonymous user\nclient.auth.loginWithCredential(new stitch.AnonymousCredential()).then(user =&gt; {\n  console.log('logged in anonymously as user')\n});\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"calling-our-function\">Calling our Function</h3><p>Now that that's done, we can call our function immediately after:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">// Authenticates anonymous user\nclient.auth.loginWithCredential(new stitch.AnonymousCredential()).then(user =&gt; {\n  console.log('logged in anonymously as user')\n});\n\n// Calls function\nclient.callFunction(&quot;getUsers&quot;, [&quot;{{author}}&quot;]).then(result =&gt; {\n  console.log(result)\n});\n</code></pre>\n<!--kg-card-end: markdown--><p>Our function is called <code>get users</code> and we're passing a single parameter of <code>{{author}}</code>. Even though one parameter is being passed, we pass parameters as lists as Mongo Serverless functions, as these functions are agnostic to what might be coming their way.</p><h2 id=\"using-functions-to-grab-stored-values\">Using Functions to Grab Stored Values</h2><p>Let's look at one more use case where calling a Stitch Serverless function might come in handy.</p><p>Back in the Stitch UI, check out the \"values\" tab in the left-hand nav. This is a place where we can store constant values which should accessible through our application, or even a place to retrieve secrets:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/Screen-Shot-2018-11-26-at-8.04.25-AM_o.png\" class=\"kg-image\"><figcaption>2secret4u</figcaption></figure><!--kg-card-end: image--><p>Values can only be retrieved by functions, and this would be a good time to ensure those particular functions are marked \"private\" For instance, if you have an API call you need to make, It would be best to create a function that handles the logic of that API call, and within that function, invoke another private function whose job it is simply to retrieve the key in question. Make sense?  Ah well, you'll figure it out.</p><h2 id=\"making-a-serverless-function-that-does-something\">Making a Serverless Function that Does Something</h2><p>Anyway, let's apply our knowledge of functions to actually do something. On our site we currently use a third party Medium widget which fetches stories from a user's Medium account. Here's how that would look in its entirety:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">&lt;script src=&quot;https://s3.amazonaws.com/stitch-sdks/js/bundles/4.0.8/stitch.js&quot;&gt;&lt;/script&gt;\n\n&lt;script src=&quot;https://medium-widget.pixelpoint.io/widget.js&quot;&gt;&lt;/script&gt;\n\n&lt;script&gt;\nfunction createMediumCard(medium){\n  console.log('medium= ' + medium);\n  MediumWidget.Init({\n    renderTo: '#medium-widget',\n    params: {\n      &quot;resource&quot;: 'https://medium.com/' + medium,\n      &quot;postsPerLine&quot;: 1,\n      &quot;limit&quot;: 3,\n      &quot;picture&quot;: &quot;small&quot;,\n      &quot;fields&quot;: [&quot;description&quot;, &quot;publishAt&quot;],\n      &quot;ratio&quot;: &quot;square&quot;\n    }\n  })\n  $('#medium').css('display', 'block');\n}\n    \nclient.auth.loginWithCredential(new stitch.AnonymousCredential()).then(user =&gt; {\n  console.log('logged in anonymously as user')\n});\n    \nclient.callFunction(&quot;getUsers&quot;, [&quot;{{author}}&quot;]).then(result =&gt; {\n  console.log(result)\n});\n&lt;/script&gt;\n</code></pre>\n<!--kg-card-end: markdown--><p>Normally, <code>\"resource\": medium,</code> would actually read the URL of the Medium profile we're trying to embed. However, when you blog on a platform like Ghost which only allows your authors to have either Facebook or Twitter profiles, we need to essentially go out of our way to build a second, nonintrusive database to pull data from to add functionality like this. Yeah - I'll have to show you what MY \"stack\" looks like for a single blog theme some day. It's ridiculous.</p><p>Anyway, that’s all I’ve got for now. I hope these ramblings help you assess MongoDB Cloud for yourself. No matter the provider, Enterprise Clouds target fat budgets and are designed to rake in big money. It almost makes you wonder why somebody would pay out of pocket for three of them just to write a stupid blog.</p>","url":"https://hackersandslackers.com/mongodb-stitch-serverless-functions/","uuid":"96e26ca1-02d4-41d6-afa8-db92b2e9c171","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b68db4904d65d1246ebd1eb"}},"pageContext":{"slug":"mongodb-stitch-serverless-functions"}}