{"data":{"ghostTag":{"slug":"python","name":"Python","visibility":"public","feature_image":null,"description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold"},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736d6","title":"Importing Excel Datetimes Into Pandas, Part II","slug":"importing-excel-datetimes-into-pandas-part-2","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/04/excelpandas.jpg","excerpt":"Pandas and Excel Pt. 2","custom_excerpt":"Pandas and Excel Pt. 2","created_at_pretty":"13 August, 2018","published_at_pretty":"20 August, 2018","updated_at_pretty":"10 April, 2019","created_at":"2018-08-12T22:28:46.000-04:00","published_at":"2018-08-20T07:30:00.000-04:00","updated_at":"2019-04-10T00:47:31.000-04:00","meta_title":"Pandas and Excel Pt. 2 | Hackers And Slackers","meta_description":"Read date times from Excel files into a Pandas DataFrame. Utilize Python's Arrow and Toolz libraries to write a quick script for date extraction.","og_description":"Read date times from Excel files into a Pandas DataFrame. Utilize Python's Arrow and Toolz libraries to write a quick script for date extraction.","og_image":"https://hackersandslackers.com/content/images/2019/04/excelpandas-2.jpg","og_title":"Importing Excel Datetimes Into Pandas II","twitter_description":"Read date times from Excel files into a Pandas DataFrame. Utilize Python's Arrow and Toolz libraries to write a quick script for date extraction.","twitter_image":"https://hackersandslackers.com/content/images/2019/04/excelpandas-1.jpg","twitter_title":"Importing Excel Datetimes Into Pandas II","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Pandas","slug":"pandas","description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/pandasmerge.jpg","meta_description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","meta_title":"Pythons and Pandas | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Pandas","slug":"pandas","description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/pandasmerge.jpg","meta_description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","meta_title":"Pythons and Pandas | Hackers and Slackers","visibility":"public"},{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Code Snippet Corner","slug":"codesnippetcorner","description":"Real-world examples of Python being used to solve complex data problems, primarily using Jupyter notebooks.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o-1.jpg","meta_description":"Real-world examples of Python being used to solve complex data problems.","meta_title":"Python Code Snippet Corner","visibility":"public"},{"name":"#Code Snippet Corner","slug":"code-snippet-corner","description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o_o.jpg","meta_description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","meta_title":"Python Code Snippet Corner","visibility":"internal"}],"plaintext":"What if, like during my data import task a few months back, the dates & times\nare in separate columns?  This gives us a few new issues.  Let's import that\nExcel file!\n\nimport pandas as pd\nimport xlrd\nimport datetime\n\ndf = pd.read_excel(\"hasDatesAndTimes.xlsx\", sheet_name=\"Sheet1\")\n\nbook = xlrd.open_workbook(\"hasDatesAndTimes.xlsx\")\ndatemode = book.datemode\n\n\n\nAnd let's see that time variable!\n\ndf[\"Time\"]\n\n\nIndex\n Time\n 0\n 0.909907\n 1\n 0.909919\n 2\n 0.909931\n 3\n 0.909942\n 4\n 0.909954\n df[\"Time\"].map(lambda x: xlrd.xldate_as_tuple(x, datemode))\n\n\nSo far, so good....\n\ndf[\"Time\"].map(lambda x: datetime.datetime(*xlrd.xldate_as_tuple(x, \n                                              datemode)))\nValueError: year 0 is out of range\n\n\nAgh!  Plain datetime won't let us have 0 as our year.\n\nWe'll want two packages to fix this.  One is an awesome package for handling\ndates called arrow.  In order for arrow  to recognize what we want it to,\nthough, we'll need some more manipulations - I'll be using the pipe  function\nfrom toolz  in order to make that more readable.\n\nIndex\n Time\n 0\n (0, 0, 0, 21, 50, 16)\n 1\n (0, 0, 0, 21, 50, 17)\n 2\n (0, 0, 0, 21, 50, 18)\n 3\n (0, 0, 0, 21, 50, 19)\n 4\n (0, 0, 0, 21, 50, 20)\n Pipe lets us have a nice workflow where we just list the transformations we\nwant, and our value will be \"piped\" sequentially through each one.\n\nfns = [lambda x: xlrd.xldate_as_tuple(x, datemode),\n     lambda x: x[3:6],\n      lambda x: map(str, x),\n      lambda x: \"-\".join(x),\n       lambda x: arrow.get(x, \"H-m-s\"),\n       lambda x: x.format('HH:mm:ss')\n      ]\n\n\nLet's see a blow-by-blow of how one of our values gets transformed by that.\n\nfnRanges = [fns[:i+1] for i in range(len(fns))]\n[pipe(0.909907, *x) for x in fnRanges]\n\n[(0, 0, 0, 21, 50, 16),\n (21, 50, 16),\n <map at 0x7f105151af98>,\n '21-50-16',\n <Arrow [0001-01-01T21:50:16+00:00]>,\n '21:50:16']\n\n\nThe first function takes us from an Excel datetime to a datetime tuple.\n\nThe next extracts just the time variables.\n\nWe then map that all to a string (which shows up as nothing because map  is\nevaluated lazily).\n\nThen we put a dash between all those elements so it'll be easier to parse as a\ntime.\n\nThen arrow  consumes the value, with the format we specified.\n\nAnd finally gives us a neatly-formatted time, ready to be consumed by a\ndatabase!\n\nHelper Functions\ndef mapPipe(ser, fns):\n    return ser.map(lambda a: pipe(a, *fns),\n        na_action=\"ignore\" )\n\nmapPipe(df['Time'],\n   fns)\n\n\nIndex\n Time\n 0\n 21:50:16\n 1\n 21:50:17\n 2\n 21:50:18\n 3\n 21:50:19\n 4\n 21:50:20\n Dates are a bit easier - though the pipe  syntax is still helpful!\n\ndateFns = [lambda x: xlrd.xldate_as_tuple(x, datemode),\n      lambda x: arrow.get(*x),\n      lambda x: x.format('YYYY-MM-DD')\n      ]\nmapPipe(df['Date'],\n       dateFns)\n\n\nIndex\n Date\n 0\n 2018-08-12\n 1\n 2018-08-12\n 2\n 2018-08-12\n 3\n 2018-08-12\n 4\n 2018-08-12\n Put it all together....\n\n(df.assign(Date = mapPipe(df['Date'],\n       dateFns))\n   .assign(Time = mapPipe(df['Time'],\n       fns)))\n\n\nIndex\n Date\n Time\n 0\n 2018-08-12\n 21:50:16\n 1\n 2018-08-12\n 21:50:17\n 2\n 2018-08-12\n 21:50:18\n 3\n 2018-08-12\n 21:50:19\n 4\n 2018-08-12\n 21:50:20","html":"<p>What if, like during my data import task a few months back, the dates &amp; times are in separate columns?  This gives us a few new issues.  Let's import that Excel file!</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">import pandas as pd\nimport xlrd\nimport datetime\n\ndf = pd.read_excel(&quot;hasDatesAndTimes.xlsx&quot;, sheet_name=&quot;Sheet1&quot;)\n\nbook = xlrd.open_workbook(&quot;hasDatesAndTimes.xlsx&quot;)\ndatemode = book.datemode\n\n</code></pre>\n<!--kg-card-end: markdown--><p>And let's see that time variable!</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">df[&quot;Time&quot;]\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: html--><div class=\"tableContainer\">\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Index</th>\n      <th>Time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>0.909907</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>0.909919</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>0.909931</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>0.909942</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>0.909954</td>\n    </tr>\n  </tbody>\n</table>\n</div><!--kg-card-end: html--><!--kg-card-begin: markdown--><pre><code class=\"language-python\">df[&quot;Time&quot;].map(lambda x: xlrd.xldate_as_tuple(x, datemode))\n</code></pre>\n<!--kg-card-end: markdown--><p>So far, so good....</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">df[&quot;Time&quot;].map(lambda x: datetime.datetime(*xlrd.xldate_as_tuple(x, \n                                              datemode)))\nValueError: year 0 is out of range\n</code></pre>\n<!--kg-card-end: markdown--><p>Agh!  Plain datetime won't let us have 0 as our year.</p><p>We'll want two packages to fix this.  One is an awesome package for handling dates called <code>arrow</code>.  In order for <code>arrow</code> to recognize what we want it to, though, we'll need some more manipulations - I'll be using the <code>pipe</code> function from <code>toolz</code> in order to make that more readable.</p><!--kg-card-begin: html--><div class=\"tableContainer\">\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Index</th>\n      <th>Time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>(0, 0, 0, 21, 50, 16)</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>(0, 0, 0, 21, 50, 17)</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>(0, 0, 0, 21, 50, 18)</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>(0, 0, 0, 21, 50, 19)</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>(0, 0, 0, 21, 50, 20)</td>\n    </tr>\n  </tbody>\n</table>\n</div><!--kg-card-end: html--><p>Pipe lets us have a nice workflow where we just list the transformations we want, and our value will be \"piped\" sequentially through each one.</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">fns = [lambda x: xlrd.xldate_as_tuple(x, datemode),\n     lambda x: x[3:6],\n      lambda x: map(str, x),\n      lambda x: &quot;-&quot;.join(x),\n       lambda x: arrow.get(x, &quot;H-m-s&quot;),\n       lambda x: x.format('HH:mm:ss')\n      ]\n</code></pre>\n<!--kg-card-end: markdown--><p>Let's see a blow-by-blow of how one of our values gets transformed by that.</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">fnRanges = [fns[:i+1] for i in range(len(fns))]\n[pipe(0.909907, *x) for x in fnRanges]\n\n[(0, 0, 0, 21, 50, 16),\n (21, 50, 16),\n &lt;map at 0x7f105151af98&gt;,\n '21-50-16',\n &lt;Arrow [0001-01-01T21:50:16+00:00]&gt;,\n '21:50:16']\n</code></pre>\n<!--kg-card-end: markdown--><p>The first function takes us from an Excel datetime to a datetime tuple.</p><p>The next extracts just the time variables.</p><p>We then map that all to a string (which shows up as nothing because <code>map</code> is evaluated lazily).</p><p>Then we put a dash between all those elements so it'll be easier to parse as a time.</p><p>Then <code>arrow</code> consumes the value, with the format we specified.</p><p>And finally gives us a neatly-formatted time, ready to be consumed by a database!</p><h2 id=\"helper-functions\">Helper Functions</h2><!--kg-card-begin: markdown--><pre><code class=\"language-python\">def mapPipe(ser, fns):\n    return ser.map(lambda a: pipe(a, *fns),\n        na_action=&quot;ignore&quot; )\n\nmapPipe(df['Time'],\n   fns)\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: html--><div class=\"tableContainer\">\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Index</th>\n      <th>Time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>21:50:16</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>21:50:17</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>21:50:18</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>21:50:19</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>21:50:20</td>\n    </tr>\n  </tbody>\n</table>\n</div><!--kg-card-end: html--><p>Dates are a bit easier - though the <code>pipe</code> syntax is still helpful!</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">dateFns = [lambda x: xlrd.xldate_as_tuple(x, datemode),\n      lambda x: arrow.get(*x),\n      lambda x: x.format('YYYY-MM-DD')\n      ]\nmapPipe(df['Date'],\n       dateFns)\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: html--><div class=\"tableContainer\">\n    <table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Index</th>\n      <th>Date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>2018-08-12</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>2018-08-12</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>2018-08-12</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>2018-08-12</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>2018-08-12</td>\n    </tr>\n  </tbody>\n</table>\n</div><!--kg-card-end: html--><p>Put it all together....</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">(df.assign(Date = mapPipe(df['Date'],\n       dateFns))\n   .assign(Time = mapPipe(df['Time'],\n       fns)))\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: html--><div class=\"tableContainer\">\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Index</th>\n      <th>Date</th>\n      <th>Time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>2018-08-12</td>\n      <td>21:50:16</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>2018-08-12</td>\n      <td>21:50:17</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>2018-08-12</td>\n      <td>21:50:18</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>2018-08-12</td>\n      <td>21:50:19</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>2018-08-12</td>\n      <td>21:50:20</td>\n    </tr>\n  </tbody>\n</table>\n</div><!--kg-card-end: html-->","url":"https://hackersandslackers.com/importing-excel-datetimes-into-pandas-part-2/","uuid":"f106291a-af02-4b8a-87b4-7afe333a9548","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b70ecde0230162100a1daa5"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736d8","title":"The End-to-End Guide to Handling Forms in Flask","slug":"guide-to-building-forms-in-flask","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/08/forms@2x.jpg","excerpt":"The subtle art of consensually capturing personal data.","custom_excerpt":"The subtle art of consensually capturing personal data.","created_at_pretty":"15 August, 2018","published_at_pretty":"15 August, 2018","updated_at_pretty":"09 April, 2019","created_at":"2018-08-14T22:13:40.000-04:00","published_at":"2018-08-15T06:25:00.000-04:00","updated_at":"2019-04-08T23:17:31.000-04:00","meta_title":"The End-to-End Guide to Handling Forms in Flask | Hackers And Slackers","meta_description":"Learn how to build complex form logic in Flask using the WTForms Python library! Cover the backend logic as well as best practices for form Jinja templates.","og_description":"Learn how to build complex form logic in Flask using the WTForms Python library! Cover the backend logic as well as best practices for form Jinja templates.","og_image":"https://hackersandslackers.com/content/images/2018/08/forms@2x.jpg","og_title":"The End-to-End Guide to Building Forms in Flask","twitter_description":"Learn how to build complex form logic in Flask using the WTForms Python library! Cover the backend logic as well as best practices for form Jinja templates.","twitter_image":"https://hackersandslackers.com/content/images/2018/08/forms@2x.jpg","twitter_title":"The End-to-End Guide to Building Forms in Flask","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"},{"name":"#Building Flask Apps","slug":"building-flask-apps","description":"Python’s fast-growing and flexible microframework. Can handle apps as simple as API endpoints, to monoliths remininiscent of Django.","feature_image":"https://hackersandslackers.com/content/images/2019/03/flask-gettingstarted.jpg","meta_description":"Python’s fastest growing, most flexible, and perhaps most Pythonic framework.","meta_title":"Building Flask Apps","visibility":"internal"}],"plaintext":"Happy Tuesday everybody! To start this week hot, let's talk about something that\neverybody hates: forms. The only thing more painful than filling out a web form\nis creating one, much less a functional one with feedback. Listen, if you're\ninto creating pleasant form UI experiences, you're probably into some freaky\nshit. Call me.\n\nFlask's youth is an advantage in one regard, in that there are only so many\nlibraries available to handle any given task. In this case, there's only one:\nthe aptly named WTForms.\n\nIf you don't have an immediate pressing need to create a Flask form and feel\nlike ditching this post to check out Instagram, be my guest, but know this:\nhandling form authentication, data submission, and session management is the\npinnacle of app development. This weird data collection traditional we\nexperience every day actually touches on nearly all aspects of app development.\nYou could argue that he who creates forms is a harbinger of a golden age: a hero\nwho brings us to the pinnacle of Western technology. Then again, there's always\nInstagram.\n\nThe Gist of it All\nBefore laying down some code snippets for you to mindlessly copy+paste, it helps\nto understand conceptually what we're about to throw down.\n\nAt a minimum, creating a form has us working routes, form  models, and templates\n. Since you already understand the concept of MVC, that entire last sentence was\nprobably redundant, and I should probably just delete it as opposed to\ncontinuing to write this second sentence contemplating my own redundancy. Oh\nwell.\n\nWe'll keep our routes in app.py  for a compact little app.\n\nmyproject\n├─ app.py\n├─ config.py\n├─ forms.py\n├─ db.py\n├─ /static\n│  ├─ /src\n│  │  ├─ js\n│  │  └─ less\n│  └─ /dist\n│     ├─ js\n│     ├─ css\n│     └─ img\n└─ /templates\n   └─ layout.html\n   └─ index.html\n   └─ form.html\n\n\nHere's the game plan: our form, with all its fields, labels, and potential error\nmessages, will live in forms.py. app.py  will contain the logic of not only\nrouting to the page serving the form, but also validating user input, which\ncovers anything from error checking to session creation. \n\nform.html  will be the presentation layer template which will get loaded into \nindex.html  in this case. Both of those templates are wrapped by layout.html \nwhich is basically just metadata and shit you already know — we’ve been through\nthis. Let’s start off by creating our forms.py.\n\nWhat The Form\nWTForms  has a nice little monopoly over the Python form handling industry\ndating back to Django, so at least we aren't burdened with choices here. Set up\nyour environment and let's install everything we need:\n\npipenv shell\npip3 install Flask WTForms Flask-Login\n\n\nThat'll hold us over for now. In forms.py,  we're going to do two main imports:\n\nfrom wtforms import Form, StringField, PasswordField, validators, SubmitField, SelectField\n\nfrom wtforms.validators import ValidationError, DataRequired, Email, EqualTo, Length\n\n\nForms really boil down into these two things: types of input, and validation of\nsaid input. There are plenty more fields and validators available, but this is\nwhat we'd need for a user signup form. Guess what we're making. \n\nClassy as Form\nForms in your app will always be defined 1-to-1 with a Python class declaration.\nIt's kind of like working with models, except they're forms. Just wait until\nyour forms work with models.\n\nfrom wtforms import Form, StringField, PasswordField, validators, SubmitField, SelectField\nfrom wtforms.validators import ValidationError, DataRequired, Email, EqualTo, Length\n\n\nclass SignupForm(Form):\n    \"\"\"User Signup Form.\"\"\"\n\n    name = StringField('Name', [\n        validators.DataRequired(message=('Don\\'t be shy!'))\n    ])\n    email = StringField('Email', [\n        Length(min=6, message=(u'Little short for an email address?')),\n        Email(message=('That\\'s not a valid email address.')),\n        DataRequired(message=('That\\'s not a valid email address.'))\n    ])\n    password = PasswordField('Password', validators=[\n        DataRequired(message=\"Please enter a password.\"),\n    ])\n    confirm = PasswordField('Repeat Password', validators=[\n            EqualTo(password, message='Passwords must match.')\n            ])\n    website = StringField('Website')\n    submit = SubmitField('Register')\n\n    def validate_email(self, email):\n        \"\"\"Email validation.\"\"\"\n        user = User.query.filter_by(email=email.data).first()\n        if user is not None:\n            raise ValidationError('Please use a different email address.')\n\n\nAs expected, every variable child of our class is a field. Field types are\ndeclared immediately (such as StringField()) and accept a label (name of the\nfield) as well as validators, which are conditions which must be met for the\nfield to be considered valid. A single field can accept an infinite number of\nvalidators, which would come in handy if you're a stickler for password\nsecurity. As well as setting the validators, we also set the error message to\npass to the user for that particular field if they are to submit invalid\ninformation. Fields accept other parameters as well, such as placeholder text,\nif you're interested in that side of things\n[https://wtforms.readthedocs.io/en/stable/fields.html#the-field-base-class].\n\nSome validators are more sophisticated enough to handle heavy-lifting: note how \nEmail()  is a validator in itself which handles the nonsense of looking for an\n'@' symbol (or whatever it is PHP guys did in the 90's). There’s even a regex\nvalidator available if you want to go full pro-mode.\n\nHardcore Validation XXX\nYou'll notice the example provided contains a validate_email()  function to\ncheck the database for a user record match. We can basically write any custom\nlogic we want to validate forms this way, in case the event that the standard\nvalidators just don't cut it.\n\nForming the Actual Form\nAlright, it's that time. Jinja's form handling isn't as daunting as this next\nwall of text might seem, once you get in the groove of things:\n\n{% block content %}\n<div class=\"formwrapper\">\n  <form method=post>\n    <div class=\"name\">\n      {{ form.name(placeholder='Joe Blah') }} {{ form.name.label }}\n      {% if form.name.errors %}\n        <ul class=\"errors\">{% for error in form.name.errors %}<li>{{ error }}</li>{% endfor %}</ul>\n      {% endif %}\n    </div>\n    <div class=\"email\">\n      {{ form.email }} {{ form.email.label }}\n      {% if form.email.errors %}\n        <ul class=\"errors\">{% for error in form.email.errors %}<li>{{ error }}</li>{% endfor %}</ul>\n      {% endif %}\n    </div>\n    <div class=\"password\">\n      {{ form.password }} {{ form.password.label }}\n      {% if form.password.errors %}\n        <ul class=\"errors\">{% for error in form.password.errors %}<li>{{ error }}</li>{% endfor %}</ul>\n      {% endif %}\n    </div>\n    <div class=\"confirm\">\n      {{ form.confirm }} {{ form.confirm.label }}\n      {% if form.confirm.errors %}\n        <ul class=\"errors\">{% for error in form.password.errors %}<li>{{ error }}</li>{% endfor %}</ul>\n      {% endif %}\n    </div>\n    <div class=\"website\">\n      {{ form.website(placeholder='http://example.com') }} {{ form.website.label }}\n    </div>\n    <div class=\"submitbutton\">\n      <input id=\"submit\" type=\"submit\" value=\"Submit\">\n    </div>\n  </form>\n</div>\n\n{% for message in get_flashed_messages() %}\n<div class=\"alert alert-warning\">\n    <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\n    {{ message }}\n</div>\n{% endfor %}\n\n\nNotice that our form contains a method, but neither a destination nor an action.\nMore on that late.\n\nEach form field is pulling in three dynamic assets: the form itself, the display\nname, and a space reserved for error handling. This general layout is robust\nenough to handle returning multiple errors per field, which we obviously would\nprefer to keep in-line with the offending fields for UI purposes.\n\nAnother way of handling errors is by utilizing Flask's flash  module. A 'flash'\nis a temporary modal telling the user what they did wrong, which can be closed\nor simply expire after a number of seconds. We're using both forms of error\nhandling here for educational purposes, but you probably won't need to most of\nthe time.\n\nDrop Some Logic on These Fools\napp.py  contains the route to the form, which allows for both GET and POST \nmethods. Submitting a form in Flask cleverly routes the user to the page they're\nalready on. Depending on what the logic decides, the user will experience\neither: \n\n * Instant in-line errors, with no visible change of page.\n * A successful redirect to wherever they hoped the form would take them.\n\nfrom flask import Flask, url_for, render_template, Markup, redirect, request, flash\nfrom flask import session as login_session\nfrom forms import SignupForm\nimport config\nfrom models import User, users, login_manager\nfrom db import users_col\nimport logging\nimport sys\nimport json\n\n\napp = Flask(__name__, static_url_path='', static_folder=\"static\", template_folder=\"templates\")\ncompress = FlaskStaticCompress(app)\napp.config.from_object('config.Config')\n\n\n@app.route('/signup', methods=['GET', 'POST'])\ndef signup():\n    \"\"\"Signup Form.\"\"\"\n    signup_form = SignupForm()\n    if request.method == 'POST':\n        if signup_form.validate():\n            flash('Logged in successfully.')\n            return render_template('/dashboard.html', template=\"dashbord-template\")\n    return render_template('/signup.html', form=signup_form, template=\"form-page\")\n\n\nYou'll recognize SignupForm() as our good old buddy from forms.py  which has\nbeen imported here. Because the user submitted their form, they will experience\nthe page with everything that lives within if request.method == 'POST':  this\ntime around. Determining validation is as simple as the next line: if\nsignup_form.validate():. This one-liner will validate each field individually,\nand deliver the proper errors to the offending fields. This level of black magic\nsaves us a huge headache and actually means that creating additional forms in\nthe future won't be all that different from simply adjusting the class and\ntemplate we already made. All that negative form talk I dropped earlier was a\ntest. You passed.\n\nWhat happens next?\nAs you might infer from the conditional statements, the user will either\nsuccessfully complete the form and move on to the next page, or they might find\nthemselves in a Ancient Greek version of hell where they find themselves\nincorrectly filling out the same form forever. Sucks to suck.\n\nIf this were a real signup form, we'd handle user creation and database\ninteraction here as well. As great as that sounds, I'll save your time as I know\nyou still have an Instagram to check. Hats off to anybody who has made it\nthrough this rambling nonsense  - you deserve it.","html":"<p>Happy Tuesday everybody! To start this week hot, let's talk about something that everybody hates: forms. The only thing more painful than filling out a web form is creating one, much less a functional one with feedback. Listen, if you're into creating pleasant form UI experiences, you're probably into some freaky shit. Call me.</p><p>Flask's youth is an advantage in one regard, in that there are only so many libraries available to handle any given task. In this case, there's only one: the aptly named WTForms.</p><p>If you don't have an immediate pressing need to create a Flask form and feel like ditching this post to check out Instagram, be my guest, but know this: handling form authentication, data submission, and session management is the pinnacle of app development. This weird data collection traditional we experience every day actually touches on nearly all aspects of app development. You could argue that he who creates forms is a harbinger of a golden age: a hero who brings us to the pinnacle of Western technology. Then again, there's always Instagram.</p><h2 id=\"the-gist-of-it-all\">The Gist of it All</h2><p>Before laying down some code snippets for you to mindlessly copy+paste, it helps to understand conceptually what we're about to throw down.</p><p>At a minimum, creating a form has us working <strong>routes</strong>, form<strong> models</strong>, and <strong>templates</strong>. Since you already understand the concept of MVC, that entire last sentence was probably redundant, and I should probably just delete it as opposed to continuing to write this second sentence contemplating my own redundancy. Oh well.</p><p>We'll keep our routes in <code>app.py</code> for a compact little app.</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">myproject\n├─ app.py\n├─ config.py\n├─ forms.py\n├─ db.py\n├─ /static\n│  ├─ /src\n│  │  ├─ js\n│  │  └─ less\n│  └─ /dist\n│     ├─ js\n│     ├─ css\n│     └─ img\n└─ /templates\n   └─ layout.html\n   └─ index.html\n   └─ form.html\n</code></pre>\n<!--kg-card-end: markdown--><p>Here's the game plan: our form, with all its fields, labels, and potential error messages, will live in <code>forms.py</code>. <code>app.py</code><strong> </strong>will contain the logic of not only routing to the page serving the form, but also validating user input, which covers anything from error checking to session creation. </p><p><code>form.html</code> will be the presentation layer template which will get loaded into <code>index.html</code> in this case. Both of those templates are wrapped by <code>layout.html</code> which is basically just metadata and shit you already know — we’ve been through this. Let’s start off by creating our <code>forms.py</code><strong>.</strong></p><h2 id=\"what-the-form\">What The Form</h2><p><code>WTForms</code> has a nice little monopoly over the Python form handling industry dating back to Django, so at least we aren't burdened with choices here. Set up your environment and let's install everything we need:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">pipenv shell\npip3 install Flask WTForms Flask-Login\n</code></pre>\n<!--kg-card-end: markdown--><p>That'll hold us over for now. In <code>forms.py</code><strong>,</strong> we're going to do two main imports:</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">from wtforms import Form, StringField, PasswordField, validators, SubmitField, SelectField\n\nfrom wtforms.validators import ValidationError, DataRequired, Email, EqualTo, Length\n</code></pre>\n<!--kg-card-end: markdown--><p>Forms really boil down into these two things: types of input, and validation of said input. There are plenty more fields and validators available, but this is what we'd need for a user signup form. Guess what we're making. </p><h3 id=\"classy-as-form\">Classy as Form</h3><p>Forms in your app will always be defined 1-to-1 with a Python class declaration. It's kind of like working with models, except they're forms. Just wait until your forms work with models.</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">from wtforms import Form, StringField, PasswordField, validators, SubmitField, SelectField\nfrom wtforms.validators import ValidationError, DataRequired, Email, EqualTo, Length\n\n\nclass SignupForm(Form):\n    &quot;&quot;&quot;User Signup Form.&quot;&quot;&quot;\n\n    name = StringField('Name', [\n        validators.DataRequired(message=('Don\\'t be shy!'))\n    ])\n    email = StringField('Email', [\n        Length(min=6, message=(u'Little short for an email address?')),\n        Email(message=('That\\'s not a valid email address.')),\n        DataRequired(message=('That\\'s not a valid email address.'))\n    ])\n    password = PasswordField('Password', validators=[\n        DataRequired(message=&quot;Please enter a password.&quot;),\n    ])\n    confirm = PasswordField('Repeat Password', validators=[\n            EqualTo(password, message='Passwords must match.')\n            ])\n    website = StringField('Website')\n    submit = SubmitField('Register')\n\n    def validate_email(self, email):\n        &quot;&quot;&quot;Email validation.&quot;&quot;&quot;\n        user = User.query.filter_by(email=email.data).first()\n        if user is not None:\n            raise ValidationError('Please use a different email address.')\n</code></pre>\n<!--kg-card-end: markdown--><p>As expected, every variable child of our class is a field. Field types are declared immediately (such as StringField()) and accept a <em>label </em>(name of the field) as well as <em>validators</em>, which are conditions which must be met for the field to be considered valid. A single field can accept an infinite number of validators, which would come in handy if you're a stickler for password security. As well as setting the validators, we also set the error message to pass to the user for that particular field if they are to submit invalid information. Fields accept other parameters as well, such as placeholder text, if you're interested in <a href=\"https://wtforms.readthedocs.io/en/stable/fields.html#the-field-base-class\">that side of things</a>.</p><p>Some validators are more sophisticated enough to handle heavy-lifting: note how <em>Email()</em> is a validator in itself which handles the nonsense of looking for an '@' symbol (or whatever it is PHP guys did in the 90's). There’s even a regex validator available if you want to go full pro-mode.</p><h3 id=\"hardcore-validation-xxx\">Hardcore Validation XXX</h3><p>You'll notice the example provided contains a <strong>validate_email()</strong> function to check the database for a user record match. We can basically write any custom logic we want to validate forms this way, in case the event that the standard validators just don't cut it.</p><h2 id=\"forming-the-actual-form\">Forming the Actual Form</h2><p>Alright, it's that time. Jinja's form handling isn't as daunting as this next wall of text might seem, once you get in the groove of things:</p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">{% block content %}\n&lt;div class=&quot;formwrapper&quot;&gt;\n  &lt;form method=post&gt;\n    &lt;div class=&quot;name&quot;&gt;\n      {{ form.name(placeholder='Joe Blah') }} {{ form.name.label }}\n      {% if form.name.errors %}\n        &lt;ul class=&quot;errors&quot;&gt;{% for error in form.name.errors %}&lt;li&gt;{{ error }}&lt;/li&gt;{% endfor %}&lt;/ul&gt;\n      {% endif %}\n    &lt;/div&gt;\n    &lt;div class=&quot;email&quot;&gt;\n      {{ form.email }} {{ form.email.label }}\n      {% if form.email.errors %}\n        &lt;ul class=&quot;errors&quot;&gt;{% for error in form.email.errors %}&lt;li&gt;{{ error }}&lt;/li&gt;{% endfor %}&lt;/ul&gt;\n      {% endif %}\n    &lt;/div&gt;\n    &lt;div class=&quot;password&quot;&gt;\n      {{ form.password }} {{ form.password.label }}\n      {% if form.password.errors %}\n        &lt;ul class=&quot;errors&quot;&gt;{% for error in form.password.errors %}&lt;li&gt;{{ error }}&lt;/li&gt;{% endfor %}&lt;/ul&gt;\n      {% endif %}\n    &lt;/div&gt;\n    &lt;div class=&quot;confirm&quot;&gt;\n      {{ form.confirm }} {{ form.confirm.label }}\n      {% if form.confirm.errors %}\n        &lt;ul class=&quot;errors&quot;&gt;{% for error in form.password.errors %}&lt;li&gt;{{ error }}&lt;/li&gt;{% endfor %}&lt;/ul&gt;\n      {% endif %}\n    &lt;/div&gt;\n    &lt;div class=&quot;website&quot;&gt;\n      {{ form.website(placeholder='http://example.com') }} {{ form.website.label }}\n    &lt;/div&gt;\n    &lt;div class=&quot;submitbutton&quot;&gt;\n      &lt;input id=&quot;submit&quot; type=&quot;submit&quot; value=&quot;Submit&quot;&gt;\n    &lt;/div&gt;\n  &lt;/form&gt;\n&lt;/div&gt;\n\n{% for message in get_flashed_messages() %}\n&lt;div class=&quot;alert alert-warning&quot;&gt;\n    &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot;&gt;&amp;times;&lt;/button&gt;\n    {{ message }}\n&lt;/div&gt;\n{% endfor %}\n</code></pre>\n<!--kg-card-end: markdown--><p>Notice that our form contains a method, but neither a destination nor an action. More on that late.</p><p>Each form field is pulling in three dynamic assets: the form itself, the display name, and a space reserved for error handling. This general layout is robust enough to handle returning multiple errors per field, which we obviously would prefer to keep in-line with the offending fields for UI purposes.</p><p>Another way of handling errors is by utilizing Flask's <em>flash</em> module. A 'flash' is a temporary modal telling the user what they did wrong, which can be closed or simply expire after a number of seconds. We're using both forms of error handling here for educational purposes, but you probably won't need to most of the time.</p><h2 id=\"drop-some-logic-on-these-fools\">Drop Some Logic on These Fools</h2><p><code>app.py</code> contains the route to the form, which allows for both <strong>GET </strong>and <strong>POST</strong> methods. Submitting a form in Flask cleverly routes the user to the <em>page they're already on. </em>Depending on what the logic decides, the user will experience either: </p><ul><li>Instant in-line errors, with no visible change of page.</li><li>A successful redirect to wherever they hoped the form would take them.</li></ul><!--kg-card-begin: markdown--><pre><code class=\"language-python\">from flask import Flask, url_for, render_template, Markup, redirect, request, flash\nfrom flask import session as login_session\nfrom forms import SignupForm\nimport config\nfrom models import User, users, login_manager\nfrom db import users_col\nimport logging\nimport sys\nimport json\n\n\napp = Flask(__name__, static_url_path='', static_folder=&quot;static&quot;, template_folder=&quot;templates&quot;)\ncompress = FlaskStaticCompress(app)\napp.config.from_object('config.Config')\n\n\n@app.route('/signup', methods=['GET', 'POST'])\ndef signup():\n    &quot;&quot;&quot;Signup Form.&quot;&quot;&quot;\n    signup_form = SignupForm()\n    if request.method == 'POST':\n        if signup_form.validate():\n            flash('Logged in successfully.')\n            return render_template('/dashboard.html', template=&quot;dashbord-template&quot;)\n    return render_template('/signup.html', form=signup_form, template=&quot;form-page&quot;)\n</code></pre>\n<!--kg-card-end: markdown--><p>You'll recognize SignupForm() as our good old buddy from <code>forms.py</code> which has been imported here. Because the user submitted their form, they will experience the page with everything that lives within <code>if request.method == 'POST':</code> this time around. Determining validation is as simple as the next line: <code>if signup_form.validate():</code>. This one-liner will validate each field individually, and deliver the proper errors to the offending fields. This level of black magic saves us a huge headache and actually means that creating additional forms in the future won't be all that different from simply adjusting the class and template we already made. All that negative form talk I dropped earlier was a test. You passed.</p><h3 id=\"what-happens-next\">What happens next?</h3><p>As you might infer from the conditional statements, the user will either successfully complete the form and move on to the next page, or they might find themselves in a Ancient Greek version of hell where they find themselves incorrectly filling out the same form forever. Sucks to suck.</p><p>If this were a real signup form, we'd handle user creation and database interaction here as well. As great as that sounds, I'll save your time as I know you still have an Instagram to check. Hats off to anybody who has made it through this rambling nonsense  - you deserve it.</p>","url":"https://hackersandslackers.com/guide-to-building-forms-in-flask/","uuid":"7cb4b740-9bda-4d96-a28d-83487d6581ce","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b738c54c43a944face384b1"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736d3","title":"Importing Excel Datetimes Into Pandas, Part I","slug":"importing-excel-dates-times-into-pandas","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/04/excelpandaspart1-1.jpg","excerpt":"Pandas & Excel, Part 1.","custom_excerpt":"Pandas & Excel, Part 1.","created_at_pretty":"13 August, 2018","published_at_pretty":"13 August, 2018","updated_at_pretty":"10 April, 2019","created_at":"2018-08-12T20:21:40.000-04:00","published_at":"2018-08-13T07:30:00.000-04:00","updated_at":"2019-04-09T23:40:15.000-04:00","meta_title":"Pandas & Excel, Part 1 | Hackers And Slackers","meta_description":"Import dates & times from Excel .xlsx files into Pandas!","og_description":"Import dates & times from Excel .xlsx files into Pandas!","og_image":"https://hackersandslackers.com/content/images/2019/04/excelpandaspart1-1-2.jpg","og_title":"Importing Excel Datetimes Into Pandas","twitter_description":"Import dates & times from Excel .xlsx files into Pandas!","twitter_image":"https://hackersandslackers.com/content/images/2019/04/excelpandaspart1-1-1.jpg","twitter_title":"Importing Excel Datetimes Into Pandas","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Pandas","slug":"pandas","description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/pandasmerge.jpg","meta_description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","meta_title":"Pythons and Pandas | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Pandas","slug":"pandas","description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/pandasmerge.jpg","meta_description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","meta_title":"Pythons and Pandas | Hackers and Slackers","visibility":"public"},{"name":"Excel","slug":"excel","description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/excelseries-1.jpg","meta_description":"Pro Excel secrets and magic. The kind of industry knowledge to put junior finance guys out of business.","meta_title":"Adventures in Excel","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Code Snippet Corner","slug":"codesnippetcorner","description":"Real-world examples of Python being used to solve complex data problems, primarily using Jupyter notebooks.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o-1.jpg","meta_description":"Real-world examples of Python being used to solve complex data problems.","meta_title":"Python Code Snippet Corner","visibility":"public"},{"name":"#Code Snippet Corner","slug":"code-snippet-corner","description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o_o.jpg","meta_description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","meta_title":"Python Code Snippet Corner","visibility":"internal"}],"plaintext":"Different file formats are different!  For all kinds of reasons!\n\nA few months back, I had to import some Excel files into a database. In this\nprocess I learned so much about the delightfully unique way Excel stores dates &\ntimes!\n\nThe basic datetime will be a decimal number, like 43324.909907407404.  The\nnumber before the decimal is the day, the number afterwards is the time.  So\nfar, so good - this is pretty common for computers.  The date is often the\nnumber of days past a certain date, and the time is the number of seconds.\n\nSo, let's load our excel sheet!  Pandas of course has a painless way of doing\nthis.\n\nimport pandas as pd\n\ndfRaw = pd.read_excel(\"hasDates.xlsx\", sheet_name=\"Sheet1\")\n\ndfRaw[\"dateTimes\"]\n\n\n0\n 0\n 43324.909907\n 1\n 43324.909919\n 2\n 43324.909931\n 3\n 43324.909942\n 4\n 43324.909954\n Sadly, we can't yet convert these.  Different Excel files start at different\ndates, and you'll get a very wrong result if you use the wrong one.  Luckily,\nthere are tools that'll go into the file and extract what we need!  Enter xlrd:\n\nimport xlrd\n\nbook = xlrd.open_workbook(\"hasDates.xlsx\")\ndatemode = book.datemode\n\n\nxlrd  also has a handy function for turning those dates into a datetime  tuple\nthat'll play nicely with Python.\n\ndfRaw[\"dateTimes\"].map(lambda x: \n          xlrd.xldate_as_tuple(x, datemode))\n\n\n0\n 0\n (2018, 8, 12, 21, 50, 16)\n 1\n (2018, 8, 12, 21, 50, 17)\n 2\n (2018, 8, 12, 21, 50, 18)\n 3\n (2018, 8, 12, 21, 50, 19)\n 4\n (2018, 8, 12, 21, 50, 20)\n And once we've got that, simple enough to convert to proper datetimes!\n\nimport datetime\n\ndfRaw[\"dateTimes\"].map(lambda x: \n          datetime.datetime(*xlrd.xldate_as_tuple(x, \n                                                  datemode)))\n\n\n0\n 0\n 2018-08-12 21:50:16\n 1\n 2018-08-12 21:50:17\n 2\n 2018-08-12 21:50:18\n 3\n 2018-08-12 21:50:19\n 4\n 2018-08-12 21:50:20\n Stick around for Part 2, where we look at some messier situations.","html":"<p>Different file formats are different!  For all kinds of reasons!</p><p>A few months back, I had to import some Excel files into a database. In this process I learned so much about the delightfully unique way Excel stores dates &amp; times!  </p><p>The basic datetime will be a decimal number, like <code>43324.909907407404</code>.  The number before the decimal is the day, the number afterwards is the time.  So far, so good - this is pretty common for computers.  The date is often the number of days past a certain date, and the time is the number of seconds.  </p><p>So, let's load our excel sheet!  Pandas of course has a painless way of doing this.</p><pre><code class=\"language-python\">import pandas as pd\n\ndfRaw = pd.read_excel(&quot;hasDates.xlsx&quot;, sheet_name=&quot;Sheet1&quot;)\n\ndfRaw[&quot;dateTimes&quot;]\n</code></pre>\n<div class=\"tableContainer\">\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>43324.909907</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>43324.909919</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>43324.909931</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>43324.909942</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>43324.909954</td>\n    </tr>\n  </tbody>\n</table>\n</div><p>Sadly, we can't yet convert these.  Different Excel files start at different dates, and you'll get a very wrong result if you use the wrong one.  Luckily, there are tools that'll go into the file and extract what we need!  Enter <code>xlrd</code>:</p><pre><code class=\"language-python\">import xlrd\n\nbook = xlrd.open_workbook(&quot;hasDates.xlsx&quot;)\ndatemode = book.datemode\n</code></pre>\n<p><code>xlrd</code> also has a handy function for turning those dates into a <code>datetime</code> tuple that'll play nicely with Python.</p><pre><code class=\"language-python\">dfRaw[&quot;dateTimes&quot;].map(lambda x: \n          xlrd.xldate_as_tuple(x, datemode))\n</code></pre>\n<div class=\"tableContainer\">\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>(2018, 8, 12, 21, 50, 16)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>(2018, 8, 12, 21, 50, 17)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>(2018, 8, 12, 21, 50, 18)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>(2018, 8, 12, 21, 50, 19)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>(2018, 8, 12, 21, 50, 20)</td>\n    </tr>\n  </tbody>\n</table>\n</div><p>And once we've got that, simple enough to convert to proper datetimes!</p><pre><code class=\"language-python\">import datetime\n\ndfRaw[&quot;dateTimes&quot;].map(lambda x: \n          datetime.datetime(*xlrd.xldate_as_tuple(x, \n                                                  datemode)))\n</code></pre>\n<div class=\"tableContainer\">\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2018-08-12 21:50:16</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2018-08-12 21:50:17</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2018-08-12 21:50:18</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2018-08-12 21:50:19</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2018-08-12 21:50:20</td>\n    </tr>\n  </tbody>\n</table>\n</div><p>Stick around for Part 2, where we look at some messier situations.</p>","url":"https://hackersandslackers.com/importing-excel-dates-times-into-pandas/","uuid":"727f6571-8ca4-4abc-b278-c7517cdaa29b","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b70cf140230162100a1da9b"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736c6","title":"Using MongoDB Atlas as your Flask Database","slug":"using-mongodb-atlas-as-your-flask-database","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/flaskpymongo@2x.jpg","excerpt":"Since you prefer using Python and Flask, I’ll assume we both prefer enjoyable dev.","custom_excerpt":"Since you prefer using Python and Flask, I’ll assume we both prefer enjoyable dev.","created_at_pretty":"28 July, 2018","published_at_pretty":"31 July, 2018","updated_at_pretty":"07 March, 2019","created_at":"2018-07-28T13:42:54.000-04:00","published_at":"2018-07-31T16:59:00.000-04:00","updated_at":"2019-03-07T01:02:11.000-05:00","meta_title":"Using MongoDB Atlas as your Flask Database | Hackers And Slackers","meta_description":"MongoDB Atlas and Stitch are easy to use, making Mongo’s cloud offering a natural choice for quick Flask-based applications.","og_description":"MongoDB Atlas and Stitch are easy to use, making Mongo’s cloud offering a natural choice for quick Flask-based applications.","og_image":"https://hackersandslackers.com/content/images/2019/03/flaskpymongo@2x.jpg","og_title":"Using MongoDB Atlas as your Flask Database","twitter_description":"MongoDB Atlas and Stitch are easy to use, making Mongo’s cloud offering a natural choice for quick Flask-based applications.","twitter_image":"https://hackersandslackers.com/content/images/2019/03/flaskpymongo@2x.jpg","twitter_title":"Using MongoDB Atlas as your Flask Database","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"NoSQL","slug":"nosql","description":"Schemaless data for gunslingers. Heavily focused on databases such as MongoDB, as well as hosting said databases as cloud instances.","feature_image":null,"meta_description":"Schemaless data for gunslingers. Heavily focused on databases such as MongoDB, as well as hosting said databases as cloud instances.","meta_title":"NoSQL | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"},{"name":"#Building Flask Apps","slug":"building-flask-apps","description":"Python’s fast-growing and flexible microframework. Can handle apps as simple as API endpoints, to monoliths remininiscent of Django.","feature_image":"https://hackersandslackers.com/content/images/2019/03/flask-gettingstarted.jpg","meta_description":"Python’s fastest growing, most flexible, and perhaps most Pythonic framework.","meta_title":"Building Flask Apps","visibility":"internal"}],"plaintext":"It's been roughly a year since MongoDB launched their Stitch: a \"back-end as a\nservice\" cloud offering. I've been tinkering with Mongo on the cloud ever\nsince... Alright fine, \"tinkering with\"  may better be described as\"accidentally\nbecame dependent on it after developing new features in production\nenvironments,\" but I can't really complain thus-far. If you're not familiar, \nMongoDB Atlas  is MongoDB's cloud-hosted database offering; that is to say, the\nsame as any other MongoDB database, except very expensive.\n\nThe jury is still out on how MongoDB Atlas  and its counterpart Stitch  will fit\ninto the picture of next generation cloud services. That said, I can vouch that\nMongo products are simply fun to use  for developers, especially when compared\nto  traditional rigid alternatives. Since I would also group Python  and Flask \nin the 'fun to use' category, selecting MongoDB as the database for your Flask\napp makes a lot of sense.\n\nFor this tutorial we're going to set up a simple app where users can submit\ninformation via a form to MongoDB. After writing to our database, we'll query\nthe db to see the results. The result will be a Flask app with the following\nfile structure:\n\nmy-flask-project\n├── templates/\n├── static/\n├── app.py\n├── config.py\n├── currenttime.py\n└── form.py\n\n\nConnect to your Database with PyMongo\nPyMongo  is Python's go-to library for interacting with MongoDB. \n\nWe'll keep all database connection logic within db.py. After importing PyMongo,\nmost of the configuration we need to handle happens in a single line containing\nour MongoDB URI: the massive string which contains our DB location, creds, and\nauthorization DB. The string is broken down like this:\n\nmongodb+srv://[username]:[password]@[projectname]-gktww.gcp.mongodb.net/[authDB]\n\n\nAuthenticate with a [username]  and [password] you’ve set up in whichever\ndatabase handles authentication for your MongoDB instance (this is also what \n[authDB]  is referring to). \n\n[projectname]  is the unique name of your cloud instance. The rest of the URI\ncontains some nonsense, including the host of your particular instance (I’m\nusing Google Cloud, hence the .gcp in the URI). Most of this information can be\nfound just by jumping on mongodb.com [https://www.mongodb.com/]  and\ninvestigating your URI via the \"connect\" popup:\n\nThat should make things a bit easier.Now we can set up our connection:\n\nimport pymongo\n\nmongo = pymongo.MongoClient('mongodb+srv://username:password@hackerdata-gktww.gcp.mongodb.net/admin', maxPoolSize=50, connect=False)\n\n\nNote that we intentionally set the connection to False. Otherwise, we're going\nto find ourselves in a hell of managing open connections every time we interact\nwith the DB.\n\nSpeaking of the DB, we need to specify which database and collection we want to\ninteract with. This brings our config file to something as follows:\n\nimport pymongo\n\nmongo = pymongo.MongoClient('mongodb+srv://username:password@myInstance-gktww.gcp.mongodb.net/admin', maxPoolSize=50, connect=False)\n\ndb = pymongo.database.Database(mongo, 'mydatabase')\ncol = pymongo.collection.Collection(db, 'mycollection')\n\n\nLastly, if you'd like to access, say, all the objects inside of a collection (or\nsimilar query), we'll just need to add a few lines line to ensure we're reading\nthe collection's data:\n\nimport pymongo\nfrom bson.json_util import dumps\nimport json\n\nmongo = pymongo.MongoClient('mongodb+srv://username:password@myInstance-gktww.gcp.mongodb.net/admin', maxPoolSize=50, connect=False)\n\ndb = pymongo.database.Database(mongo, 'mydatabase')\ncol = pymongo.collection.Collection(db, 'mycollection')\n\ncol_results = json.loads(dumps(col.find().limit(5).sort(\"time\", -1)))\n\n\nRemember that Mongo returns BSON objects as opposed to JSON objects, which isn't\nvery useful for our purposes. To alleviate this we'll do a messy little dance to\nconvert Mongo's BSON into a string, and convert this to JSON using json.dumps().\n\nNote: the need to do this may have been something changed in recent versions of\nMongo, as I have older application functioning where this wasn't the case.\n¯\\_(ツ)_/¯.\n\nCreating a Form\nHeading over to form.py, we just need to set up a simple single-field form for\nusers to submit their URLs. For the sake of Python, let's say we're only\naccepting URLs for Jupyter noteboooks:\n\nfrom wtforms import Form, StringField, validators\nfrom wtforms.validators import DataRequired, Regexp\n\nclass myForm(Form):\n    \"\"\"Homepage form.\"\"\"\n    PlotlyURL = StringField('Provide a raw .ipynb URL from Github',\n    validators=[\n            DataRequired(),\n            Regexp(\".*\\.ipynb$\",\n            message=\"Please provide a URL ending in ipynb\"),\n          ])\n\n\nWe could have an entire tutorial just about Flask's WTForms\n[http://flask.pocoo.org/docs/1.0/patterns/wtforms/], but let's stay on topic\n and move on to currenttime.py.\n\nAdding Time Metadata\nIn a lot of cases where we store information to a database, we at least want to\nadd certain metadata such as the time something was added. This allows us to\narrange results by most recently updated, which we'll be doing in this example.\n\nfrom datetime import datetime, timezone\n\ndef getTime():\n    \"\"\"Get user's current time\"\"\"\n    rightnow = datetime.today()\n    return rightnow\n\ndef getPrettyTime():\n    \"\"\"Get user's pretty current time\"\"\"\n    rightnow = datetime.today()\n    prettytime = rightnow.ctime()\n    return prettytime\n\nyourtime = getTime()\nprettytime = getPrettyTime()\n\n\nThe variable yourtime  will be a datetime string representing the local time of\nthe user creating a new record. We will use this value to sort the queried\nresults by time. On the contrary,prettytime  will be the same time, only\nformatted in a way that is readable to humans.\n\nPutting the Pieces Together\nFinally we get to move on app.py and get this thing moving. We'll initiate our\napp by importing the necessary libraries, as well as the scripts we just\ncreated:\n\nfrom flask import Flask, render_template, Markup, request, redirect\nfrom config import col, col_results\nimport requests\nfrom form import myForm\nfrom flask_static_compress import FlaskStaticCompress\nfrom currenttime import yourtime, prettytime\nimport logging\n\n\nNote that we need to import from the DB config we set earlier is the \"col\"\nvariable; we'll only be interacting directly with the collection we want to\nmodify, and the rest is assumed within the config file itself. Now let's build a\nroute for our homepage that does two things:\n\n * Allows users to submit a URL via the simple form we created\n * Displays all previous searches by all users.\n\nfrom flask import Flask, render_template, Markup, request, redirect\nfrom config import col, col_results\nimport requests\nfrom form import myForm\nfrom flask_static_compress import FlaskStaticCompress\nfrom currenttime import yourtime, prettytime\nimport logging\n\n@app.route('/', methods=['GET', 'POST', 'OPTIONS'])\ndef home():\n    \"\"\"Landing page.\"\"\"\n    recent_searches = list(col_results)\n    return render_template('/index.html', form=myForm(), recents=recent_searches, template=\"home-template\")\n\n\nThere's only two significant lines here, but let's break them down piece by\npiece.\n\nrecent_searches\nFirst we set a recent_searches  variable which is essentially a query against\nour collection to retrieve a list of previous searches. We ask that these be\nreturned as a list()  upfront. Typically the find() method would contain the\nconstraints of our query, but we're simply asking to return all  results in the\ncollection, with a limit()  up to 5. Finally, we sort()  the results by the\nfield we refer to as 'time' is descending order, as noted by the -1 argument.\n\nThis is all probably very difficult to visualize without a graphic. Here's a\nsnapshot of the collection we're defining with dummy data added:\n\nSee why we need to differentiate \"time\" and \"prettytime\"?render_template\nWe already know [https://hackersandslackers.com/serving-static-assets-in-flask/] \n the basics of serving templates and assets in Flask, so it shouldn't be too\ndifficult to break down the last line in our route:\n\n * '/index.html'  specifies the base template we'll be serving up.\n * form=myForm()  passes the form class we created earlier to the form partial\n   we're including as part of the index page.\n * recents=recent_searches  passes the query of previous searches to the\n   template, with which we can build a widget.\n * template=\"home-template\" is a simple variable passed which we'll utilize as a\n   class on the page we're loading.\n\nThe Result\nFrom everything we've completed, you should be expecting to see a somewhat\nworthless page where users can submit links via a form, simply to see results\nposted by previous posters. If we expand on this idea just a bit, we can see how\nsomething so simple can actually be extended to a full product: \n\n> Planet Jupyter [https://planetjupyter.com]\nStyle your Jupyter Notebooks.\n\n\nPlanet Jupyter is demo product we built at H&S to style Jupyter notebooks.\nPerhaps 60% of the logic behind Planet Jupyter is the simple DB interactions we\njust covered, with the rest being added flair.\n\nThis is not a shameless plug for the barely functioning toys we've built, mind\nyou, but rather an example of simple DB interactions using Flask can be easily\nextensible into relevant, useful, products.\n\nWe hope you’ve found this tutorial to be useful!","html":"<p>It's been roughly a year since MongoDB launched their <strong>Stitch: </strong>a \"back-end as a service\" cloud offering. I've been tinkering with Mongo on the cloud ever since... Alright fine, <em>\"tinkering with\"</em> may better be described as  <em>\"accidentally became dependent on it after developing new features in production environments,\" </em>but I can't really complain thus-far. If you're not familiar, <strong>MongoDB Atlas</strong> is MongoDB's cloud-hosted database offering; that is to say, the same as any other MongoDB database, except very expensive.</p><p>The jury is still out on how MongoDB <strong>Atlas</strong> and its counterpart <strong>Stitch</strong> will fit into the picture of next generation cloud services. That said, I can vouch that Mongo products are simply <em>fun to use</em> for developers, especially when compared to  traditional rigid alternatives. Since I would also group <em>Python</em> and <em>Flask</em> in the 'fun to use' category, selecting MongoDB as the database for your Flask app makes a lot of sense.</p><p>For this tutorial we're going to set up a simple app where users can submit information via a form to MongoDB. After writing to our database, we'll query the db to see the results. The result will be a Flask app with the following file structure:</p><pre><code class=\"language-shell\">my-flask-project\n├── templates/\n├── static/\n├── app.py\n├── config.py\n├── currenttime.py\n└── form.py\n</code></pre>\n<h2 id=\"connect-to-your-database-with-pymongo\">Connect to your Database with PyMongo</h2><p><strong>PyMongo</strong> is Python's go-to library for interacting with MongoDB. </p><p>We'll keep all database connection logic within <strong>db.py</strong>. After importing PyMongo, most of the configuration we need to handle happens in a single line containing our MongoDB URI: the massive string which contains our DB location, creds, and authorization DB. The string is broken down like this:</p><pre><code class=\"language-shell\">mongodb+srv://[username]:[password]@[projectname]-gktww.gcp.mongodb.net/[authDB]\n</code></pre>\n<p>Authenticate with a <strong>[username]</strong> and <strong>[password] </strong>you’ve set up in whichever database handles authentication for your MongoDB instance (this is also what<strong> [authDB]</strong> is referring to). </p><p><strong>[projectname]</strong> is the unique name of your cloud instance. The rest of the URI contains some nonsense, including the host of your particular instance (I’m using Google Cloud, hence the .gcp in the URI). Most of this information can be found just by jumping on <a href=\"https://www.mongodb.com/\">mongodb.com</a> and investigating your URI via the \"connect\" popup:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-1.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/Screen-Shot-2018-07-30-at-9.46.42-PM.png\" class=\"kg-image\"><figcaption>That should make things a bit easier.</figcaption></figure><p>Now we can set up our connection:</p><pre><code class=\"language-python\">import pymongo\n\nmongo = pymongo.MongoClient('mongodb+srv://username:password@hackerdata-gktww.gcp.mongodb.net/admin', maxPoolSize=50, connect=False)\n</code></pre>\n<p>Note that we intentionally set the connection to <strong>False. </strong>Otherwise, we're going to find ourselves in a hell of managing open connections every time we interact with the DB.</p><p>Speaking of the DB, we need to specify which database and collection we want to interact with. This brings our config file to something as follows:</p><pre><code class=\"language-python\">import pymongo\n\nmongo = pymongo.MongoClient('mongodb+srv://username:password@myInstance-gktww.gcp.mongodb.net/admin', maxPoolSize=50, connect=False)\n\ndb = pymongo.database.Database(mongo, 'mydatabase')\ncol = pymongo.collection.Collection(db, 'mycollection')\n</code></pre>\n<p>Lastly, if you'd like to access, say, all the objects inside of a collection (or similar query), we'll just need to add a few lines line to ensure we're reading the collection's data:</p><pre><code class=\"language-python\">import pymongo\nfrom bson.json_util import dumps\nimport json\n\nmongo = pymongo.MongoClient('mongodb+srv://username:password@myInstance-gktww.gcp.mongodb.net/admin', maxPoolSize=50, connect=False)\n\ndb = pymongo.database.Database(mongo, 'mydatabase')\ncol = pymongo.collection.Collection(db, 'mycollection')\n\ncol_results = json.loads(dumps(col.find().limit(5).sort(&quot;time&quot;, -1)))\n</code></pre>\n<p>Remember that Mongo returns BSON objects as opposed to JSON objects, which isn't very useful for our purposes. To alleviate this we'll do a messy little dance to convert Mongo's BSON into a string, and convert this to JSON using <strong>json.dumps()</strong>.</p><p><strong>Note: </strong>the need to do this may have been something changed in recent versions of Mongo, as I have older application functioning where this wasn't the case. ¯\\_(ツ)_/¯.</p><h2 id=\"creating-a-form\">Creating a Form</h2><p>Heading over to <strong>form.py, </strong>we just need to set up a simple single-field form for users to submit their URLs. For the sake of Python, let's say we're only accepting URLs for Jupyter noteboooks:</p><pre><code class=\"language-python\">from wtforms import Form, StringField, validators\nfrom wtforms.validators import DataRequired, Regexp\n\nclass myForm(Form):\n    &quot;&quot;&quot;Homepage form.&quot;&quot;&quot;\n    PlotlyURL = StringField('Provide a raw .ipynb URL from Github',\n    validators=[\n            DataRequired(),\n            Regexp(&quot;.*\\.ipynb$&quot;,\n            message=&quot;Please provide a URL ending in ipynb&quot;),\n          ])\n</code></pre>\n<p>We could have an entire tutorial just about Flask's WTF<a href=\"http://flask.pocoo.org/docs/1.0/patterns/wtforms/\">orms</a>, but let's stay on topic  and move on to <strong>currenttime.py.</strong></p><h2 id=\"adding-time-metadata\">Adding Time Metadata</h2><p>In a lot of cases where we store information to a database, we at least want to add certain metadata such as the time something was added. This allows us to arrange results by most recently updated, which we'll be doing in this example.</p><pre><code class=\"language-python\">from datetime import datetime, timezone\n\ndef getTime():\n    &quot;&quot;&quot;Get user's current time&quot;&quot;&quot;\n    rightnow = datetime.today()\n    return rightnow\n\ndef getPrettyTime():\n    &quot;&quot;&quot;Get user's pretty current time&quot;&quot;&quot;\n    rightnow = datetime.today()\n    prettytime = rightnow.ctime()\n    return prettytime\n\nyourtime = getTime()\nprettytime = getPrettyTime()\n</code></pre>\n<p>The variable <strong>yourtime</strong> will be a datetime string representing the local time of the user creating a new record. We will use this value to sort the queried results by time. On the contrary,  <strong>prettytime</strong> will be the same time, only formatted in a way that is readable to humans.</p><h2 id=\"putting-the-pieces-together\">Putting the Pieces Together</h2><p>Finally we get to move on <strong>app.py </strong>and get this thing moving. We'll initiate our app by importing the necessary libraries, as well as the scripts we just created:</p><pre><code class=\"language-python\">from flask import Flask, render_template, Markup, request, redirect\nfrom config import col, col_results\nimport requests\nfrom form import myForm\nfrom flask_static_compress import FlaskStaticCompress\nfrom currenttime import yourtime, prettytime\nimport logging\n</code></pre>\n<p>Note that we need to import from the DB config we set earlier is the \"col\" variable; we'll only be interacting directly with the collection we want to modify, and the rest is assumed within the config file itself. Now let's build a route for our homepage that does two things:</p><ul><li>Allows users to submit a URL via the simple form we created</li><li>Displays all previous searches by all users.</li></ul><pre><code class=\"language-python\">from flask import Flask, render_template, Markup, request, redirect\nfrom config import col, col_results\nimport requests\nfrom form import myForm\nfrom flask_static_compress import FlaskStaticCompress\nfrom currenttime import yourtime, prettytime\nimport logging\n\n@app.route('/', methods=['GET', 'POST', 'OPTIONS'])\ndef home():\n    &quot;&quot;&quot;Landing page.&quot;&quot;&quot;\n    recent_searches = list(col_results)\n    return render_template('/index.html', form=myForm(), recents=recent_searches, template=&quot;home-template&quot;)\n</code></pre>\n<p>There's only two significant lines here, but let's break them down piece by piece.</p><h3 id=\"recent_searches\">recent_searches</h3><p>First we set a <strong>recent_searches</strong> variable which is essentially a query against our collection to retrieve a list of previous searches. We ask that these be returned as a <strong>list()</strong> upfront. Typically the <strong>find() </strong>method would contain the constraints of our query, but we're simply asking to return <em>all</em> results in the collection, with a <strong>limit()</strong> up to 5. Finally, we <strong>sort()</strong> the results by the field we refer to as 'time' is descending order, as noted by the -1 argument.</p><p>This is all probably very difficult to visualize without a graphic. Here's a snapshot of the collection we're defining with dummy data added:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/Screen-Shot-2018-07-31-at-11.08.44-AM.png\" class=\"kg-image\"><figcaption>See why we need to differentiate \"time\" and \"prettytime\"?</figcaption></figure><h3 id=\"render_template\">render_template</h3><p>We <a href=\"https://hackersandslackers.com/serving-static-assets-in-flask/\">already know</a> the basics of serving templates and assets in Flask, so it shouldn't be too difficult to break down the last line in our route:</p><ul><li><strong>'/index.html'</strong> specifies the base template we'll be serving up.</li><li><strong>form=myForm()</strong> passes the form class we created earlier to the form partial we're including as part of the index page.</li><li><strong>recents=recent_searches</strong> passes the query of previous searches to the template, with which we can build a widget.</li><li><strong>template=\"home-template\" </strong>is a simple variable passed which we'll utilize as a class on the page we're loading.</li></ul><h2 id=\"the-result\">The Result</h2><p>From everything we've completed, you should be expecting to see a somewhat worthless page where users can submit links via a form, simply to see results posted by previous posters. If we expand on this idea just a bit, we can see how something so simple can actually be extended to a full product: </p><blockquote class=\"embedly-card\" data-card-controls=\"0\"><h4><a href=\"https://planetjupyter.com\">Planet Jupyter</a></h4><p>Style your Jupyter Notebooks.</p></blockquote>\n<script async src=\"//cdn.embedly.com/widgets/platform.js\" charset=\"UTF-8\"></script><p>Planet Jupyter is demo product we built at H&amp;S to style Jupyter notebooks. Perhaps 60% of the logic behind Planet Jupyter is the simple DB interactions we just covered, with the rest being added flair.</p><p>This is not a shameless plug for the barely functioning toys we've built, mind you, but rather an example of simple DB interactions using Flask can be easily extensible into relevant, useful, products.</p><p>We hope you’ve found this tutorial to be useful!</p>","url":"https://hackersandslackers.com/using-mongodb-atlas-as-your-flask-database/","uuid":"e8c92cbd-6845-45b5-acfc-a744810eafcd","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b5cab1e2189c353565a2adf"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736c4","title":"All That Is Solid Melts Into Graphs","slug":"all-that-is-solid-melts-into-graphs","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/07/iceberg@2x.jpg","excerpt":"Reshaping Pandas dataframes with a real-life example, and graphing it with Altair.","custom_excerpt":"Reshaping Pandas dataframes with a real-life example, and graphing it with Altair.","created_at_pretty":"26 July, 2018","published_at_pretty":"30 July, 2018","updated_at_pretty":"02 February, 2019","created_at":"2018-07-25T21:53:23.000-04:00","published_at":"2018-07-30T07:30:00.000-04:00","updated_at":"2019-02-02T04:07:03.000-05:00","meta_title":"All That Is Solid Melts Into Graphs | Hackers and Slackers","meta_description":"Reshaping Pandas dataframes with a real-life example, and graphing it with Altair","og_description":"Reshaping Pandas dataframes with a real-life example, and graphing it with #Altair","og_image":"https://hackersandslackers.com/content/images/2018/07/iceberg@2x.jpg","og_title":"All That Is Solid Melts Into Graphs","twitter_description":"Reshaping Pandas dataframes with a real-life example, and graphing it with #Altair","twitter_image":"https://hackersandslackers.com/content/images/2018/07/iceberg@2x.jpg","twitter_title":"All That Is Solid Melts Into Graphs","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Pandas","slug":"pandas","description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/pandasmerge.jpg","meta_description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","meta_title":"Pythons and Pandas | Hackers and Slackers","visibility":"public"},{"name":"Code Snippet Corner","slug":"codesnippetcorner","description":"Real-world examples of Python being used to solve complex data problems, primarily using Jupyter notebooks.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o-1.jpg","meta_description":"Real-world examples of Python being used to solve complex data problems.","meta_title":"Python Code Snippet Corner","visibility":"public"},{"name":"#Code Snippet Corner","slug":"code-snippet-corner","description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o_o.jpg","meta_description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","meta_title":"Python Code Snippet Corner","visibility":"internal"}],"plaintext":"Last few Code Snippet Corners were about using Pandas as an easy way to handle\ninput and output between files & databases.  Let's shift gears a little bit!\n Among other reasons, because earlier today I discovered a package that\nexclusively does that, which means I can stop importing the massive Pandas\npackage when all I really wanted to do with it was take advantage of its I/O\nmodules.Check it out [https://github.com/insightindustry/sqlathanor]! \n\nSo, rather than the entrances & exits, let's focus on all the crazy ways you can\nreshape data with Pandas!\n\nOur Data\nFor our demonstration, I'll use a dataset based on something I was once actually\nsent.  It was a big CSV with sensor readings from HVAC systems.  Each line had a\ndifferent house, a different room, a datetime, and readings from a bunch of\ndifferent types of sensors.  Oh, hrm, I probably shouldn't use data I got from a\nclient.  Uh...\n\nBONUS SECTION!\nGENERATING DUMMY TEMPERATURE DATA\n(Feel free to skip to next part if you don't care)\n\nWe want it to fluctuate, but we don't want to just make a bunch of totally\nrandom values - a reading should have some relationship to the reading taken a\nsecond earlier.\n\nLet's use NumPy  for some Randomness, and the accumulate  and repeat  functions\nfrom itertools.  Maybe I'll do an in-depth post on these at some point, but the\ncode I'll be writing with them will be pretty short and hopefully somewhat\nself-demonstrating.  If you wanna go deeper here's some good material: Official\nDocs [https://docs.python.org/3/library/itertools.html], Good article\n[https://realpython.com/python-itertools/]\n\nimport numpy as np\nfrom itertools import accumulate, repeat\n\n\nWe want there to be some random \"noise\", but we also want the occasional\nsubstantive change.  We'll reflect this by having it so that 90% of the time we\nget a small fluctuation, with a 10% chance of a smaller fluctuation. \n\ndef genTempDataPoint(x, *args):\n    if np.random.rand(1) <= 0.9:\n        return x + np.random.uniform(-3,3,1)[0]\n    else:\n        return x + np.random.uniform(-10,10,1)[0]\n\n\n  Now let's see some test points!\n\nlist(accumulate(repeat(70, 5), genTempDataPoint))\n[70,\n 69.00258239202094,\n 59.34919781643355,\n 56.60722073795931,\n 57.265078261782946]\n\n\nSure, fine, why not.  Good enough for our purposes!   Now let's put it all\ntogether so we can just call it with a base temp and the number of points we\nwant.\n\ndef genTempData(base, n):\n    return list(accumulate(repeat(base, n), \n                           genTempDataPoint))\n\n\nTo simulate the dataset, we actually need to mix it up.  Or else what good are\nthe GroupBys gonna be?  So, let's create a problem to fix later!  Here's a\nfunction to create a simplified version of the dataset - each row will have a\nlocation ID, a number corresponding to time (just raw ints, I'm not making\nactual datetimes - I've spent too much time on this part already).  We'll also\ngenerate humidity values, to add another monkey wrench to fix later (we'll still\nuse the genTempData  function).\n\nfrom itertools import chain\n\ndef makeLocation(name, base1, n1, base2, n2):\n    return [(x[0], name, x[1][0], x[1][1]) \n        for x in enumerate(zip(genTempData(base1, n1),\n              genTempData(base2, n2)) )]\n\nbigList = list(chain.from_iterable(makeLocation(str(x), \n                                                70, \n                                                15,\n                                                40, \n                                                15) \n                         for x in range(5)))\nnp.random.shuffle(bigList)\n\ndf = pd.DataFrame(bigList, \n                  columns = [\"Time\", \"Loc\", \"Temp\", \"Hum\"])\n\n\nBack To The Main Plot\nLet's look at some test rows!\n\n# Viewing test rows\n\ndf.iloc[:5]\nTime\tLoc\tTemp     \tHum\n10\t4\t68.396970\t34.169753\n13\t0\t80.288846\t42.076786\n7\t4\t69.923273\t37.967951\n6\t0\t71.781362\t41.186802\n5\t2\t62.678844\t37.321636\n\n\nNow, when I'm getting started with a new dataset, one of the first things I like\nto do is make some graphs.  As of late, my favorite package has been Altair\n[https://altair-viz.github.io/].  Looks very nice by default, is pretty easy to\niterate with, and has nice declarative syntax.\n\nOnly one problem!  It wants date in \"long-form\" - as in, rather than each row\nhaving several variables of interest, each row has one (or more) \"ID\" variables,\none numerical value, and the name of the variable we're measuring.  So for\ninstance, something more like this:\n\nTime\tLoc\tvariable\tvalue\n10\t4\tTemp\t        68.396970\n13\t0\tTemp\t        80.288846\n7\t4\tTemp\t        69.923273\n6\t0\tTemp\t        71.781362\n5\t2\tTemp\t        62.678844\n\n\nNot quite sure why!  Buuut, that's kind of a feature of modern coding - we're\nsitting on an inheritance of libraries that have built up over the years, and so\nmore often than not we're just building the \"plumbing\" between existing stuff.\n It's cool!  And good!  It lets us separate Function from Implementation.  We\ndon't need to know what's going on under the hood - we just need to know thing X\nwill produce an output we want, and that in order to get it we first need to\nreshape what we've already got into an input that it'll accept.  Since that's\nsuch a huge part of coding these days, Pandas' power in that realm is super\nuseful.\n\nSooo, how do we get from here to there?  Shockingly easily!\n\nmelted = pd.melt(df, id_vars=[\"Time\", \"Loc\"])\n\n\nDone!\n\nWell, obviously we're not REALLY done yet.  Half the point of having such terse,\nexpressive code is that we can do MORE things!\n\nLet's say we want to see how humidity & temperature change over the course of\nthe day.  First, we'll have to grab all the readings from a single location.\n Let's say Location 3!\n\nloc3 = melted[melted[\"Loc\"]==\"3\"]\n\n\nAltair's pretty neat.\n\n(alt.Chart(loc3)\n .mark_line()\n .encode(x='Time:O', #We're encoding time as an Ordinal \n         y='value:Q',\n         color='variable:N'))\n\n\nHrm, lot of room there at the bottom.  If we were in an interactive session, we\ncould make this interactive (zoomable and navigable!) by just adding the \n.interactive()  method to the end, but I don't know how to do that in the blog.\n Regardless, it's pretty easy to rescale if we want a closer look!\n\n(alt.Chart(loc3)\n .mark_line()\n .encode(x='Time:O',\n         y=alt.Y('value:Q', scale=alt.Scale(zero=False)),\n         color='variable:N'))\n\n\nLet's try it with just temperature, and color will encode the location!\n\nmeltedJustTemp = pd.melt(df, \n                         id_vars=[\"Time\", \"Loc\"],\n                        value_vars= [\"Temp\"])\n\n(alt.Chart(meltedJustTemp)\n .mark_line()\n .encode(x='Time:O',\n         y='value:Q',\n         color='Loc:N'))\n\n\nLet's zoom in again...\n\n(alt.Chart(meltedJustTemp)\n .mark_line()\n .encode(x='Time:O',\n         y=alt.Y('value:Q', scale=alt.Scale(zero=False)),\n         color='Loc:N'))\n\n\nAltair also lets us Facet our graphs extremely flexibly & painlessly.\n\nalt.Chart(melted).mark_line().encode(\n      x='Time:O',\n      y=alt.Y('value:Q', scale=alt.Scale(zero=False)),\n      color='Loc:N',\n      column=\"variable\")\n\n\nOr how about another way!  Let's see humidity & temp, location by location.\n\nalt.Chart(melted).mark_line().encode(\n      x='Time:O',\n      y=alt.Y('value:Q', scale=alt.Scale(zero=False)),\n      color='variable:N',\n      row=\"Loc\")\n\n\nWe could make them nicer (there's a WIDE array of customizations), but I'm\nlooking to simulate Exploratory Data Analysis.  I can't think of another\ngraphing package in Python that has quite this level of \"instant gratification\"\nfor so many different variations.","html":"<p>Last few Code Snippet Corners were about using Pandas as an easy way to handle input and output between files &amp; databases.  Let's shift gears a little bit!  Among other reasons, because earlier today I discovered a package that exclusively does that, which means I can stop importing the massive Pandas package when all I really wanted to do with it was take advantage of its I/O modules.  <a href=\"https://github.com/insightindustry/sqlathanor\">Check it out</a>! </p><p>So, rather than the entrances &amp; exits, let's focus on all the crazy ways you can reshape data with Pandas!</p><h2 id=\"our-data\">Our Data</h2><p>For our demonstration, I'll use a dataset based on something I was once actually sent.  It was a big CSV with sensor readings from HVAC systems.  Each line had a different house, a different room, a datetime, and readings from a bunch of different types of sensors.  Oh, hrm, I probably shouldn't use data I got from a client.  Uh...</p><h2 id=\"bonus-section-\">BONUS SECTION!</h2><h3 id=\"generating-dummy-temperature-data\">GENERATING DUMMY TEMPERATURE DATA</h3><p><strong>(Feel free to skip to next part if you don't care)</strong></p><p>We want it to fluctuate, but we don't want to just make a bunch of totally random values - a reading should have some relationship to the reading taken a second earlier.</p><p>Let's use <code>NumPy</code> for some Randomness, and the <code>accumulate</code> and <code>repeat</code> functions from <code>itertools</code>.  Maybe I'll do an in-depth post on these at some point, but the code I'll be writing with them will be pretty short and hopefully somewhat self-demonstrating.  If you wanna go deeper here's some good material: <a href=\"https://docs.python.org/3/library/itertools.html\">Official Docs</a>, <a href=\"https://realpython.com/python-itertools/\">Good article</a></p><pre><code class=\"language-python\">import numpy as np\nfrom itertools import accumulate, repeat\n</code></pre>\n<p>We want there to be some random \"noise\", but we also want the occasional substantive change.  We'll reflect this by having it so that 90% of the time we get a small fluctuation, with a 10% chance of a smaller fluctuation. </p><pre><code class=\"language-python\">def genTempDataPoint(x, *args):\n    if np.random.rand(1) &lt;= 0.9:\n        return x + np.random.uniform(-3,3,1)[0]\n    else:\n        return x + np.random.uniform(-10,10,1)[0]\n</code></pre>\n<p> Now let's see some test points!</p><pre><code class=\"language-python\">list(accumulate(repeat(70, 5), genTempDataPoint))\n[70,\n 69.00258239202094,\n 59.34919781643355,\n 56.60722073795931,\n 57.265078261782946]\n</code></pre>\n<p>Sure, fine, why not.  Good enough for our purposes!   Now let's put it all together so we can just call it with a base temp and the number of points we want.</p><pre><code class=\"language-python\">def genTempData(base, n):\n    return list(accumulate(repeat(base, n), \n                           genTempDataPoint))\n</code></pre>\n<p>To simulate the dataset, we actually need to mix it up.  Or else what good are the GroupBys gonna be?  So, let's create a problem to fix later!  Here's a function to create a simplified version of the dataset - each row will have a location ID, a number corresponding to time (just raw ints, I'm not making actual datetimes - I've spent too much time on this part already).  We'll also generate humidity values, to add another monkey wrench to fix later (we'll still use the <code>genTempData</code> function).</p><pre><code class=\"language-python\">from itertools import chain\n\ndef makeLocation(name, base1, n1, base2, n2):\n    return [(x[0], name, x[1][0], x[1][1]) \n        for x in enumerate(zip(genTempData(base1, n1),\n              genTempData(base2, n2)) )]\n\nbigList = list(chain.from_iterable(makeLocation(str(x), \n                                                70, \n                                                15,\n                                                40, \n                                                15) \n                         for x in range(5)))\nnp.random.shuffle(bigList)\n\ndf = pd.DataFrame(bigList, \n                  columns = [&quot;Time&quot;, &quot;Loc&quot;, &quot;Temp&quot;, &quot;Hum&quot;])\n</code></pre>\n<h2 id=\"back-to-the-main-plot\">Back To The Main Plot</h2><p>Let's look at some test rows!</p><pre><code class=\"language-python\"># Viewing test rows\n\ndf.iloc[:5]\nTime\tLoc\tTemp     \tHum\n10\t4\t68.396970\t34.169753\n13\t0\t80.288846\t42.076786\n7\t4\t69.923273\t37.967951\n6\t0\t71.781362\t41.186802\n5\t2\t62.678844\t37.321636\n</code></pre>\n<p>Now, when I'm getting started with a new dataset, one of the first things I like to do is make some graphs.  As of late, my favorite package has been <a href=\"https://altair-viz.github.io/\">Altair</a>.  Looks very nice by default, is pretty easy to iterate with, and has nice declarative syntax.</p><p>Only one problem!  It wants date in \"long-form\" - as in, rather than each row having several variables of interest, each row has one (or more) \"ID\" variables, one numerical value, and the name of the variable we're measuring.  So for instance, something more like this:</p><pre><code class=\"language-python\">Time\tLoc\tvariable\tvalue\n10\t4\tTemp\t        68.396970\n13\t0\tTemp\t        80.288846\n7\t4\tTemp\t        69.923273\n6\t0\tTemp\t        71.781362\n5\t2\tTemp\t        62.678844\n</code></pre>\n<p>Not quite sure why!  Buuut, that's kind of a feature of modern coding - we're sitting on an inheritance of libraries that have built up over the years, and so more often than not we're just building the \"plumbing\" between existing stuff.  It's cool!  And good!  It lets us separate Function from Implementation.  We don't need to know what's going on under the hood - we just need to know thing X will produce an output we want, and that in order to get it we first need to reshape what we've already got into an input that it'll accept.  Since that's such a huge part of coding these days, Pandas' power in that realm is super useful.</p><p>Sooo, how do we get from here to there?  Shockingly easily!</p><pre><code class=\"language-python\">melted = pd.melt(df, id_vars=[&quot;Time&quot;, &quot;Loc&quot;])\n</code></pre>\n<p>Done!</p><p>Well, obviously we're not REALLY done yet.  Half the point of having such terse, expressive code is that we can do MORE things!</p><p>Let's say we want to see how humidity &amp; temperature change over the course of the day.  First, we'll have to grab all the readings from a single location.  Let's say Location 3!</p><pre><code class=\"language-python\">loc3 = melted[melted[&quot;Loc&quot;]==&quot;3&quot;]\n</code></pre>\n<p>Altair's pretty neat.</p><pre><code class=\"language-python\">(alt.Chart(loc3)\n .mark_line()\n .encode(x='Time:O', #We're encoding time as an Ordinal \n         y='value:Q',\n         color='variable:N'))\n</code></pre>\n<figure class=\"kg-card kg-image-card\"><img src=\"https://res-4.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/visualization--2--1.png\" class=\"kg-image\"></figure><p>Hrm, lot of room there at the bottom.  If we were in an interactive session, we could make this interactive (zoomable and navigable!) by just adding the <code>.interactive()</code> method to the end, but I don't know how to do that in the blog.  Regardless, it's pretty easy to rescale if we want a closer look!</p><pre><code class=\"language-python\">(alt.Chart(loc3)\n .mark_line()\n .encode(x='Time:O',\n         y=alt.Y('value:Q', scale=alt.Scale(zero=False)),\n         color='variable:N'))\n</code></pre>\n<figure class=\"kg-card kg-image-card\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/visualization--3--2.png\" class=\"kg-image\"></figure><p>Let's try it with just temperature, and color will encode the location!</p><pre><code class=\"language-python\">meltedJustTemp = pd.melt(df, \n                         id_vars=[&quot;Time&quot;, &quot;Loc&quot;],\n                        value_vars= [&quot;Temp&quot;])\n\n(alt.Chart(meltedJustTemp)\n .mark_line()\n .encode(x='Time:O',\n         y='value:Q',\n         color='Loc:N'))\n</code></pre>\n<figure class=\"kg-card kg-image-card\"><img src=\"https://res-5.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/visualization--4--2.png\" class=\"kg-image\"></figure><p>Let's zoom in again...</p><pre><code class=\"language-python\">(alt.Chart(meltedJustTemp)\n .mark_line()\n .encode(x='Time:O',\n         y=alt.Y('value:Q', scale=alt.Scale(zero=False)),\n         color='Loc:N'))\n</code></pre>\n<figure class=\"kg-card kg-image-card\"><img src=\"https://res-5.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/visualization--4--2.png\" class=\"kg-image\"></figure><p>Altair also lets us Facet our graphs extremely flexibly &amp; painlessly.</p><pre><code class=\"language-python\">alt.Chart(melted).mark_line().encode(\n      x='Time:O',\n      y=alt.Y('value:Q', scale=alt.Scale(zero=False)),\n      color='Loc:N',\n      column=&quot;variable&quot;)\n</code></pre>\n<figure class=\"kg-card kg-image-card\"><img src=\"https://res-2.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/visualization--5--1.png\" class=\"kg-image\"></figure><p>Or how about another way!  Let's see humidity &amp; temp, location by location.</p><pre><code class=\"language-python\">alt.Chart(melted).mark_line().encode(\n      x='Time:O',\n      y=alt.Y('value:Q', scale=alt.Scale(zero=False)),\n      color='variable:N',\n      row=&quot;Loc&quot;)\n</code></pre>\n<figure class=\"kg-card kg-image-card\"><img src=\"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/visualization--6--1.png\" class=\"kg-image\"></figure><p>We could make them nicer (there's a WIDE array of customizations), but I'm looking to simulate Exploratory Data Analysis.  I can't think of another graphing package in Python that has quite this level of \"instant gratification\" for so many different variations.</p>","url":"https://hackersandslackers.com/all-that-is-solid-melts-into-graphs/","uuid":"603156b0-ee55-4aaa-b5cd-34950389cd08","page":false,"codeinjection_foot":"<script>\n    hljs.configure({language: ['python']})\n </script>","codeinjection_head":"","comment_id":"5b5929932714bc41b8a370c5"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736c3","title":"Automagically Turn JSON into Pandas DataFrames","slug":"json-into-pandas-dataframes","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/07/json@2x.jpg","excerpt":"Let Pandas do the heavy lifting for you when turning JSON into a DataFrame.","custom_excerpt":"Let Pandas do the heavy lifting for you when turning JSON into a DataFrame.","created_at_pretty":"25 July, 2018","published_at_pretty":"28 July, 2018","updated_at_pretty":"21 February, 2019","created_at":"2018-07-25T10:52:35.000-04:00","published_at":"2018-07-28T08:00:00.000-04:00","updated_at":"2019-02-20T21:35:53.000-05:00","meta_title":"Turn JSON into Pandas DataFrames | Hackers And Slackers","meta_description":"Let Pandas do the heavy lifting for you when turning JSON into a DataFrame, especially when that JSON is heavily nested.","og_description":"Let Pandas do the heavy lifting for you when turning JSON into a DataFrame, especially when that JSON is heavily nested.","og_image":"https://hackersandslackers.com/content/images/2018/07/json@2x.jpg","og_title":"Automagically Turn JSON into Pandas DataFrames","twitter_description":"Let Pandas do the heavy lifting for you when turning JSON into a DataFrame, especially when that JSON is heavily nested.","twitter_image":"https://hackersandslackers.com/content/images/2018/07/json@2x.jpg","twitter_title":"Automagically Turn JSON into Pandas DataFrames","authors":[{"name":"Graham Beckley","slug":"graham","bio":"Loves Python; loves pandas; leaves every project more Pythonic than he found it.","profile_image":"https://hackersandslackers.com/content/images/2019/03/graham2.jpg","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Graham Beckley","slug":"graham","bio":"Loves Python; loves pandas; leaves every project more Pythonic than he found it.","profile_image":"https://hackersandslackers.com/content/images/2019/03/graham2.jpg","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"Pandas","slug":"pandas","description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/pandasmerge.jpg","meta_description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","meta_title":"Pythons and Pandas | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Pandas","slug":"pandas","description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/pandasmerge.jpg","meta_description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","meta_title":"Pythons and Pandas | Hackers and Slackers","visibility":"public"},{"name":"Data Science","slug":"datascience","description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","feature_image":null,"meta_description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","meta_title":"Data Science | Hackers and Slackers","visibility":"public"},{"name":"REST APIs","slug":"restapis","description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","feature_image":null,"meta_description":"Get the most out of REST APIs by example, or build your own. Discover new APIs and how to interact with them, regardless of proffered programming language.","meta_title":"Consuming and Building REST APIs | Hackers and Slackers","visibility":"public"},{"name":"#Data Analysis with Pandas","slug":"data-analysis-pandas","description":"Analyze data with Python's Pandas. Start from the basics or see real-life examples of using Pandas to solve problems.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/pandasseries-1.jpg","meta_description":"Analyze data with Python's Pandas. Start from the basics or see real-life examples of using Pandas to solve problems.","meta_title":"Data Analysis with Pandas","visibility":"internal"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"}],"plaintext":"In his post about extracting data from APIs\n[https://hackersandslackers.com/extracting-massive-datasets-from-apis/], Todd\n[https://hackersandslackers.com/author/todd/]  demonstrated a nice way to\nmassage JSON into a pandas DataFrame. This method works great when our JSON\nresponse is flat, because dict.keys()  only gets the keys on the first \"level\"\nof a dictionary. It gets a little trickier when our JSON starts to become nested\nthough, as I experienced when working with Spotify's API\n[https://developer.spotify.com/documentation/web-api/]  via the Spotipy\n[https://spotipy.readthedocs.io/en/latest/]  library. For example, take a look\nat a response from their https://api.spotify.com/v1/tracks/{id}  endpoint:\n\nimport spotipy\nfrom spotipy.oauth2 import SpotifyClientCredentials\n\nspotify_client_id = 'YOUR_ID'\nspotify_client_secret  = 'YOUR_SECRET'\nclient_credentials_manager = SpotifyClientCredentials(client_id=spotify_client_id, client_secret=spotify_client_secret)\nsp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)\n\n\ntrack_response = sp.track('0BDYBajZydY54OTgQsH940')\ntrack_response\n\n\nOutput:\n{\n  \"album\": {\n    \"album_type\": \"album\",\n    \"artists\": [{\n        \"external_urls\": {\n          \"spotify\": \"https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe\"\n        },\n        \"href\": \"https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe\",\n        \"id\": \"7wyRA7deGRxozTyBc6QXPe\",\n        \"name\": \"Stephen Malkmus & The Jicks\",\n        \"type\": \"artist\",\n        \"uri\": \"spotify:artist:7wyRA7deGRxozTyBc6QXPe\"\n      },\n      {\n        \"external_urls\": {\n          \"spotify\": \"https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8\"\n        },\n        \"href\": \"https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8\",\n        \"id\": \"0WISkx0PwT6lYWdPqKUJY8\",\n        \"name\": \"Stephen Malkmus\",\n        \"type\": \"artist\",\n        \"uri\": \"spotify:artist:0WISkx0PwT6lYWdPqKUJY8\"\n      },\n      {\n        \"external_urls\": {\n          \"spotify\": \"https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7\"\n        },\n        \"href\": \"https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7\",\n        \"id\": \"7uStwCeP54Za8gXUFCf5L7\",\n        \"name\": \"The Jicks\",\n        \"type\": \"artist\",\n        \"uri\": \"spotify:artist:7uStwCeP54Za8gXUFCf5L7\"\n      }\n    ],\n    \"available_markets\": [\"AR\",\n      \"BO\",\n      \"BR\",\n      \"CA\",\n      \"...\",\n      \"US\",\n      \"UY\",\n      \"VN\"\n    ],\n    \"external_urls\": {\n      \"spotify\": \"https://open.spotify.com/album/6pWpb4IdPu9vp9mOdh5DjY\"\n    },\n    \"href\": \"https://api.spotify.com/v1/albums/6pWpb4IdPu9vp9mOdh5DjY\",\n    \"id\": \"6pWpb4IdPu9vp9mOdh5DjY\",\n    \"images\": [{\n        \"height\": 640,\n        \"url\": \"https://i.scdn.co/image/918fdb6fdffccf2bd2dd1a1a93136000f8cf9bd3\",\n        \"width\": 640\n      },\n      {\n        \"height\": 300,\n        \"url\": \"https://i.scdn.co/image/fb39290ebca6fac424d4a40611a7e0d1146c5f88\",\n        \"width\": 300\n      },\n      {\n        \"height\": 64,\n        \"url\": \"https://i.scdn.co/image/873da4a0a21acd96e4a0036c9ecd0580b62652d4\",\n        \"width\": 64\n      }\n    ],\n    \"name\": \"Real Emotional Trash\",\n    \"release_date\": \"2008-03-04\",\n    \"release_date_precision\": \"day\",\n    \"type\": \"album\",\n    \"uri\": \"spotify:album:6pWpb4IdPu9vp9mOdh5DjY\"\n  },\n  \"artists\": [{\n      \"external_urls\": {\n        \"spotify\": \"https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe\"\n      },\n      \"href\": \"https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe\",\n      \"id\": \"7wyRA7deGRxozTyBc6QXPe\",\n      \"name\": \"Stephen Malkmus & The Jicks\",\n      \"type\": \"artist\",\n      \"uri\": \"spotify:artist:7wyRA7deGRxozTyBc6QXPe\"\n    },\n    {\n      \"external_urls\": {\n        \"spotify\": \"https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8\"\n      },\n      \"href\": \"https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8\",\n      \"id\": \"0WISkx0PwT6lYWdPqKUJY8\",\n      \"name\": \"Stephen Malkmus\",\n      \"type\": \"artist\",\n      \"uri\": \"spotify:artist:0WISkx0PwT6lYWdPqKUJY8\"\n    },\n    {\n      \"external_urls\": {\n        \"spotify\": \"https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7\"\n      },\n      \"href\": \"https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7\",\n      \"id\": \"7uStwCeP54Za8gXUFCf5L7\",\n      \"name\": \"The Jicks\",\n      \"type\": \"artist\",\n      \"uri\": \"spotify:artist:7uStwCeP54Za8gXUFCf5L7\"\n    }\n  ],\n  \"available_markets\": [\"AR\",\n    \"BO\",\n    \"BR\",\n    \"CA\",\n    \"...\",\n    \"US\",\n    \"UY\",\n    \"VN\"\n  ],\n  \"disc_number\": 1,\n  \"duration_ms\": 608826,\n  \"explicit\": False,\n  \"external_ids\": {\n    \"isrc\": \"USMTD0877204\"\n  },\n  \"external_urls\": {\n    \"spotify\": \"https://open.spotify.com/track/0BDYBajZydY54OTgQsH940\"\n  },\n  \"href\": \"https://api.spotify.com/v1/tracks/0BDYBajZydY54OTgQsH940\",\n  \"id\": \"0BDYBajZydY54OTgQsH940\",\n  \"is_local\": False,\n  \"name\": \"Real Emotional Trash\",\n  \"popularity\": 21,\n  \"preview_url\": \"https://p.scdn.co/mp3-preview/4fcbcd5a99fc7590d5819849e1aad3eff981dc75?cid=be22fd00039241bc96d161a63876b54c\",\n  \"track_number\": 4,\n  \"type\": \"track\",\n  \"uri\": \"spotify:track:0BDYBajZydY54OTgQsH940\"\n}\n\n\nIn addition to plenty of information about the track, Spotify also includes\ninformation about the album that contains the track. If we were to just use the \ndict.keys()  method to turn this response into a DataFrame, we'd be missing out\non all that extra album information. Well, it would be there, just not readily\naccessible.\n\ntrack_response.keys()\n\n\nOutput:\ndict_keys(['album', 'artists', 'available_markets', 'disc_number', 'duration_ms', 'explicit', 'external_ids', 'external_urls', 'href', 'id', 'is_local', 'name', 'popularity', 'preview_url', 'track_number', 'type', 'uri'])\n\n\nSo how do we get around this? Well, we could write our own function, but because\npandas is amazing, it already has a built in tool that takes care of this for\nus.\n\nData Normalization\nMeet json_normalize():\n\nimport pandas as pd\nfrom pandas.io.json import json_normalize\njson_normalize(track_response)\n\n\nOutput:\nalbum.album_type\n album.artists\n album.available_markets\n album.external_urls.spotify\n album.href\n album.id\n album.images\n album.name\n album.release_date\n album.release_date_precision\n ...\n external_urls.spotify\n href\n id\n is_local\n name\n popularity\n preview_url\n track_number\n type\n uri\n 0\n album\n [{'external_urls': {'spotify': 'https://open.s...\n [AR, BO, BR, CA, CL, CO, CR, EC, GT, HK, HN, I...\n https://open.spotify.com/album/6pWpb4IdPu9vp9m...\n https://api.spotify.com/v1/albums/6pWpb4IdPu9v...\n 6pWpb4IdPu9vp9mOdh5DjY\n [{'height': 640, 'url': 'https://i.scdn.co/ima...\n Real Emotional Trash\n 2008-03-04\n day\n ...\n https://open.spotify.com/track/0BDYBajZydY54OT...\n https://api.spotify.com/v1/tracks/0BDYBajZydY5...\n 0BDYBajZydY54OTgQsH940\n False\n Real Emotional Trash\n 21\n https://p.scdn.co/mp3-preview/4fcbcd5a99fc7590...\n 4\n track\n spotify:track:0BDYBajZydY54OTgQsH940\n Yep – it's that easy. pandas takes our nested JSON object, flattens it out, and\nturns it into a DataFrame.\n\nThis makes our life easier when we're dealing with one record, but it really \ncomes in handy when we're dealing with a response that contains multiple\nrecords.\n\ntracks_response = sp.tracks(\n    ['0BDYBajZydY54OTgQsH940',\n     '7fdUqrzb8oCcIoKvFuzMrs',\n     '0islTY4Fw6lhYbfqi8Qtdj',\n     '3jyFLbljUTKjE13nIWXchH',\n     '6dNmC2YWtWbVOFOdTuRDQs']\n)\ntracks_response\n\n\nOutput:\n{\n  \"tracks\": [{\n      \"album\": {\n        \"album_type\": \"album\",\n        \"artists\": [{\n            \"external_urls\": {\n              \"spotify\": \"https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe\"\n            },\n            \"href\": \"https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe\",\n            \"id\": \"7wyRA7deGRxozTyBc6QXPe\",\n            \"name\": \"Stephen Malkmus & The Jicks\",\n            \"type\": \"artist\",\n            \"uri\": \"spotify:artist:7wyRA7deGRxozTyBc6QXPe\"\n          },\n          {\n            \"external_urls\": {\n              \"spotify\": \"https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8\"\n            },\n            \"href\": \"https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8\",\n            \"id\": \"0WISkx0PwT6lYWdPqKUJY8\",\n            \"name\": \"Stephen Malkmus\",\n            \"type\": \"artist\",\n            \"uri\": \"spotify:artist:0WISkx0PwT6lYWdPqKUJY8\"\n          },\n          {\n            \"external_urls\": {\n              \"spotify\": \"https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7\"\n            },\n            \"href\": \"https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7\",\n            \"id\": \"7uStwCeP54Za8gXUFCf5L7\",\n            \"name\": \"The Jicks\",\n            \"type\": \"artist\",\n            \"uri\": \"spotify:artist:7uStwCeP54Za8gXUFCf5L7\"\n          }\n        ],\n        \"available_markets\": [\"AR\",\n          \"BO\",\n          \"BR\",\n          \"CA\",\n          \"CL\",\n          \"CO\",\n          \"CR\",\n          \"EC\",\n          \"GT\",\n          \"HK\",\n          \"HN\",\n          \"ID\",\n          \"MX\",\n          \"MY\",\n          \"NI\",\n          \"PA\",\n          \"PE\",\n          \"PH\",\n          \"PY\",\n          \"SG\",\n          \"SV\",\n          \"TH\",\n          \"TW\",\n          \"US\",\n          \"UY\",\n          \"VN\"\n        ],\n        \"external_urls\": {\n          \"spotify\": \"https://open.spotify.com/album/6pWpb4IdPu9vp9mOdh5DjY\"\n        },\n        \"href\": \"https://api.spotify.com/v1/albums/6pWpb4IdPu9vp9mOdh5DjY\",\n        \"id\": \"6pWpb4IdPu9vp9mOdh5DjY\",\n        \"images\": [{\n            \"height\": 640,\n            \"url\": \"https://i.scdn.co/image/918fdb6fdffccf2bd2dd1a1a93136000f8cf9bd3\",\n            \"width\": 640\n          },\n          {\n            \"height\": 300,\n            \"url\": \"https://i.scdn.co/image/fb39290ebca6fac424d4a40611a7e0d1146c5f88\",\n            \"width\": 300\n          },\n          {\n            \"height\": 64,\n            \"url\": \"https://i.scdn.co/image/873da4a0a21acd96e4a0036c9ecd0580b62652d4\",\n            \"width\": 64\n          }\n        ],\n        \"name\": \"Real Emotional Trash\",\n        \"release_date\": \"2008-03-04\",\n        \"release_date_precision\": \"day\",\n        \"type\": \"album\",\n        \"uri\": \"spotify:album:6pWpb4IdPu9vp9mOdh5DjY\"\n      },\n      \"artists\": [{\n          \"external_urls\": {\n            \"spotify\": \"https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe\"\n          },\n          \"href\": \"https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe\",\n          \"id\": \"7wyRA7deGRxozTyBc6QXPe\",\n          \"name\": \"Stephen Malkmus & The Jicks\",\n          \"type\": \"artist\",\n          \"uri\": \"spotify:artist:7wyRA7deGRxozTyBc6QXPe\"\n        },\n        {\n          \"external_urls\": {\n            \"spotify\": \"https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8\"\n          },\n          \"href\": \"https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8\",\n          \"id\": \"0WISkx0PwT6lYWdPqKUJY8\",\n          \"name\": \"Stephen Malkmus\",\n          \"type\": \"artist\",\n          \"uri\": \"spotify:artist:0WISkx0PwT6lYWdPqKUJY8\"\n        },\n        {\n          \"external_urls\": {\n            \"spotify\": \"https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7\"\n          },\n          \"href\": \"https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7\",\n          \"id\": \"7uStwCeP54Za8gXUFCf5L7\",\n          \"name\": \"The Jicks\",\n          \"type\": \"artist\",\n          \"uri\": \"spotify:artist:7uStwCeP54Za8gXUFCf5L7\"\n        }\n      ],\n      \"available_markets\": [\"AR\",\n        \"BO\",\n        \"BR\",\n        \"CA\",\n        \"CL\",\n        \"CO\",\n        \"CR\",\n        \"EC\",\n        \"GT\",\n        \"HK\",\n        \"HN\",\n        \"ID\",\n        \"MX\",\n        \"MY\",\n        \"NI\",\n        \"PA\",\n        \"PE\",\n        \"PH\",\n        \"PY\",\n        \"SG\",\n        \"SV\",\n        \"TH\",\n        \"TW\",\n        \"US\",\n        \"UY\",\n        \"VN\"\n      ],\n      \"disc_number\": 1,\n      \"duration_ms\": 608826,\n      \"explicit\": False,\n      \"external_ids\": {\n        \"isrc\": \"USMTD0877204\"\n      },\n      \"external_urls\": {\n        \"spotify\": \"https://open.spotify.com/track/0BDYBajZydY54OTgQsH940\"\n      },\n      \"href\": \"https://api.spotify.com/v1/tracks/0BDYBajZydY54OTgQsH940\",\n      \"id\": \"0BDYBajZydY54OTgQsH940\",\n      \"is_local\": False,\n      \"name\": \"Real Emotional Trash\",\n      \"popularity\": 21,\n      \"preview_url\": \"https://p.scdn.co/mp3-preview/4fcbcd5a99fc7590d5819849e1aad3eff981dc75?cid=be22fd00039241bc96d161a63876b54c\",\n      \"track_number\": 4,\n      \"type\": \"track\",\n      \"uri\": \"spotify:track:0BDYBajZydY54OTgQsH940\"\n    },\n    {\n      \"album\": {\n        \"album_type\": \"album\",\n        \"artists\": [{\n            \"external_urls\": {\n              \"spotify\": \"https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe\"\n            },\n            \"href\": \"https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe\",\n            \"id\": \"7wyRA7deGRxozTyBc6QXPe\",\n            \"name\": \"Stephen Malkmus & The Jicks\",\n            \"type\": \"artist\",\n            \"uri\": \"spotify:artist:7wyRA7deGRxozTyBc6QXPe\"\n          },\n          {\n            \"external_urls\": {\n              \"spotify\": \"https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8\"\n            },\n            \"href\": \"https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8\",\n            \"id\": \"0WISkx0PwT6lYWdPqKUJY8\",\n            \"name\": \"Stephen Malkmus\",\n            \"type\": \"artist\",\n            \"uri\": \"spotify:artist:0WISkx0PwT6lYWdPqKUJY8\"\n          },\n          {\n            \"external_urls\": {\n              \"spotify\": \"https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7\"\n            },\n            \"href\": \"https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7\",\n            \"id\": \"7uStwCeP54Za8gXUFCf5L7\",\n            \"name\": \"The Jicks\",\n            \"type\": \"artist\",\n            \"uri\": \"spotify:artist:7uStwCeP54Za8gXUFCf5L7\"\n          }\n        ],\n        \"available_markets\": [\"AR\",\n          \"BO\",\n          \"BR\",\n          \"CA\",\n          \"CL\",\n          \"CO\",\n          \"CR\",\n          \"EC\",\n          \"GT\",\n          \"HK\",\n          \"HN\",\n          \"ID\",\n          \"MX\",\n          \"MY\",\n          \"NI\",\n          \"PA\",\n          \"PE\",\n          \"PH\",\n          \"PY\",\n          \"SG\",\n          \"SV\",\n          \"TH\",\n          \"TW\",\n          \"US\",\n          \"UY\",\n          \"VN\"\n        ],\n        \"external_urls\": {\n          \"spotify\": \"https://open.spotify.com/album/6pWpb4IdPu9vp9mOdh5DjY\"\n        },\n        \"href\": \"https://api.spotify.com/v1/albums/6pWpb4IdPu9vp9mOdh5DjY\",\n        \"id\": \"6pWpb4IdPu9vp9mOdh5DjY\",\n        \"images\": [{\n            \"height\": 640,\n            \"url\": \"https://i.scdn.co/image/918fdb6fdffccf2bd2dd1a1a93136000f8cf9bd3\",\n            \"width\": 640\n          },\n          {\n            \"height\": 300,\n            \"url\": \"https://i.scdn.co/image/fb39290ebca6fac424d4a40611a7e0d1146c5f88\",\n            \"width\": 300\n          },\n          {\n            \"height\": 64,\n            \"url\": \"https://i.scdn.co/image/873da4a0a21acd96e4a0036c9ecd0580b62652d4\",\n            \"width\": 64\n          }\n        ],\n        \"name\": \"Real Emotional Trash\",\n        \"release_date\": \"2008-03-04\",\n        \"release_date_precision\": \"day\",\n        \"type\": \"album\",\n        \"uri\": \"spotify:album:6pWpb4IdPu9vp9mOdh5DjY\"\n      },\n      \"artists\": [{\n          \"external_urls\": {\n            \"spotify\": \"https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe\"\n          },\n          \"href\": \"https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe\",\n          \"id\": \"7wyRA7deGRxozTyBc6QXPe\",\n          \"name\": \"Stephen Malkmus & The Jicks\",\n          \"type\": \"artist\",\n          \"uri\": \"spotify:artist:7wyRA7deGRxozTyBc6QXPe\"\n        },\n        {\n          \"external_urls\": {\n            \"spotify\": \"https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8\"\n          },\n          \"href\": \"https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8\",\n          \"id\": \"0WISkx0PwT6lYWdPqKUJY8\",\n          \"name\": \"Stephen Malkmus\",\n          \"type\": \"artist\",\n          \"uri\": \"spotify:artist:0WISkx0PwT6lYWdPqKUJY8\"\n        },\n        {\n          \"external_urls\": {\n            \"spotify\": \"https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7\"\n          },\n          \"href\": \"https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7\",\n          \"id\": \"7uStwCeP54Za8gXUFCf5L7\",\n          \"name\": \"The Jicks\",\n          \"type\": \"artist\",\n          \"uri\": \"spotify:artist:7uStwCeP54Za8gXUFCf5L7\"\n        }\n      ],\n      \"available_markets\": [\"AR\",\n        \"BO\",\n        \"BR\",\n        \"CA\",\n        \"CL\",\n        \"CO\",\n        \"CR\",\n        \"EC\",\n        \"GT\",\n        \"HK\",\n        \"HN\",\n        \"ID\",\n        \"MX\",\n        \"MY\",\n        \"NI\",\n        \"PA\",\n        \"PE\",\n        \"PH\",\n        \"PY\",\n        \"SG\",\n        \"SV\",\n        \"TH\",\n        \"TW\",\n        \"US\",\n        \"UY\",\n        \"VN\"\n      ],\n      \"disc_number\": 1,\n      \"duration_ms\": 222706,\n      \"explicit\": False,\n      \"external_ids\": {\n        \"isrc\": \"USMTD0877203\"\n      },\n      \"external_urls\": {\n        \"spotify\": \"https://open.spotify.com/track/7fdUqrzb8oCcIoKvFuzMrs\"\n      },\n      \"href\": \"https://api.spotify.com/v1/tracks/7fdUqrzb8oCcIoKvFuzMrs\",\n      \"id\": \"7fdUqrzb8oCcIoKvFuzMrs\",\n      \"is_local\": False,\n      \"name\": \"Cold Son\",\n      \"popularity\": 25,\n      \"preview_url\": \"https://p.scdn.co/mp3-preview/4cf4e21727def47097e27d30de16ffe9f99b7774?cid=be22fd00039241bc96d161a63876b54c\",\n      \"track_number\": 3,\n      \"type\": \"track\",\n      \"uri\": \"spotify:track:7fdUqrzb8oCcIoKvFuzMrs\"\n    },\n    {\n      \"album\": {\n        \"album_type\": \"album\",\n        \"artists\": [{\n            \"external_urls\": {\n              \"spotify\": \"https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe\"\n            },\n            \"href\": \"https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe\",\n            \"id\": \"7wyRA7deGRxozTyBc6QXPe\",\n            \"name\": \"Stephen Malkmus & The Jicks\",\n            \"type\": \"artist\",\n            \"uri\": \"spotify:artist:7wyRA7deGRxozTyBc6QXPe\"\n          },\n          {\n            \"external_urls\": {\n              \"spotify\": \"https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8\"\n            },\n            \"href\": \"https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8\",\n            \"id\": \"0WISkx0PwT6lYWdPqKUJY8\",\n            \"name\": \"Stephen Malkmus\",\n            \"type\": \"artist\",\n            \"uri\": \"spotify:artist:0WISkx0PwT6lYWdPqKUJY8\"\n          },\n          {\n            \"external_urls\": {\n              \"spotify\": \"https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7\"\n            },\n            \"href\": \"https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7\",\n            \"id\": \"7uStwCeP54Za8gXUFCf5L7\",\n            \"name\": \"The Jicks\",\n            \"type\": \"artist\",\n            \"uri\": \"spotify:artist:7uStwCeP54Za8gXUFCf5L7\"\n          }\n        ],\n        \"available_markets\": [\"AR\",\n          \"BO\",\n          \"BR\",\n          \"CA\",\n          \"CL\",\n          \"CO\",\n          \"CR\",\n          \"EC\",\n          \"GT\",\n          \"HK\",\n          \"HN\",\n          \"ID\",\n          \"MX\",\n          \"MY\",\n          \"NI\",\n          \"PA\",\n          \"PE\",\n          \"PH\",\n          \"PY\",\n          \"SG\",\n          \"SV\",\n          \"TH\",\n          \"TW\",\n          \"US\",\n          \"UY\",\n          \"VN\"\n        ],\n        \"external_urls\": {\n          \"spotify\": \"https://open.spotify.com/album/6pWpb4IdPu9vp9mOdh5DjY\"\n        },\n        \"href\": \"https://api.spotify.com/v1/albums/6pWpb4IdPu9vp9mOdh5DjY\",\n        \"id\": \"6pWpb4IdPu9vp9mOdh5DjY\",\n        \"images\": [{\n            \"height\": 640,\n            \"url\": \"https://i.scdn.co/image/918fdb6fdffccf2bd2dd1a1a93136000f8cf9bd3\",\n            \"width\": 640\n          },\n          {\n            \"height\": 300,\n            \"url\": \"https://i.scdn.co/image/fb39290ebca6fac424d4a40611a7e0d1146c5f88\",\n            \"width\": 300\n          },\n          {\n            \"height\": 64,\n            \"url\": \"https://i.scdn.co/image/873da4a0a21acd96e4a0036c9ecd0580b62652d4\",\n            \"width\": 64\n          }\n        ],\n        \"name\": \"Real Emotional Trash\",\n        \"release_date\": \"2008-03-04\",\n        \"release_date_precision\": \"day\",\n        \"type\": \"album\",\n        \"uri\": \"spotify:album:6pWpb4IdPu9vp9mOdh5DjY\"\n      },\n      \"artists\": [{\n          \"external_urls\": {\n            \"spotify\": \"https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe\"\n          },\n          \"href\": \"https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe\",\n          \"id\": \"7wyRA7deGRxozTyBc6QXPe\",\n          \"name\": \"Stephen Malkmus & The Jicks\",\n          \"type\": \"artist\",\n          \"uri\": \"spotify:artist:7wyRA7deGRxozTyBc6QXPe\"\n        },\n        {\n          \"external_urls\": {\n            \"spotify\": \"https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8\"\n          },\n          \"href\": \"https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8\",\n          \"id\": \"0WISkx0PwT6lYWdPqKUJY8\",\n          \"name\": \"Stephen Malkmus\",\n          \"type\": \"artist\",\n          \"uri\": \"spotify:artist:0WISkx0PwT6lYWdPqKUJY8\"\n        },\n        {\n          \"external_urls\": {\n            \"spotify\": \"https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7\"\n          },\n          \"href\": \"https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7\",\n          \"id\": \"7uStwCeP54Za8gXUFCf5L7\",\n          \"name\": \"The Jicks\",\n          \"type\": \"artist\",\n          \"uri\": \"spotify:artist:7uStwCeP54Za8gXUFCf5L7\"\n        }\n      ],\n      \"available_markets\": [\"AR\",\n        \"BO\",\n        \"BR\",\n        \"CA\",\n        \"CL\",\n        \"CO\",\n        \"CR\",\n        \"EC\",\n        \"GT\",\n        \"HK\",\n        \"HN\",\n        \"ID\",\n        \"MX\",\n        \"MY\",\n        \"NI\",\n        \"PA\",\n        \"PE\",\n        \"PH\",\n        \"PY\",\n        \"SG\",\n        \"SV\",\n        \"TH\",\n        \"TW\",\n        \"US\",\n        \"UY\",\n        \"VN\"\n      ],\n      \"disc_number\": 1,\n      \"duration_ms\": 416173,\n      \"explicit\": False,\n      \"external_ids\": {\n        \"isrc\": \"USMTD0877202\"\n      },\n      \"external_urls\": {\n        \"spotify\": \"https://open.spotify.com/track/0islTY4Fw6lhYbfqi8Qtdj\"\n      },\n      \"href\": \"https://api.spotify.com/v1/tracks/0islTY4Fw6lhYbfqi8Qtdj\",\n      \"id\": \"0islTY4Fw6lhYbfqi8Qtdj\",\n      \"is_local\": False,\n      \"name\": \"Hopscotch Willie\",\n      \"popularity\": 24,\n      \"preview_url\": \"https://p.scdn.co/mp3-preview/c7782dc6d7c0bb12159db4f90fba8388af034d60?cid=be22fd00039241bc96d161a63876b54c\",\n      \"track_number\": 2,\n      \"type\": \"track\",\n      \"uri\": \"spotify:track:0islTY4Fw6lhYbfqi8Qtdj\"\n    },\n    {\n      \"album\": {\n        \"album_type\": \"album\",\n        \"artists\": [{\n            \"external_urls\": {\n              \"spotify\": \"https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe\"\n            },\n            \"href\": \"https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe\",\n            \"id\": \"7wyRA7deGRxozTyBc6QXPe\",\n            \"name\": \"Stephen Malkmus & The Jicks\",\n            \"type\": \"artist\",\n            \"uri\": \"spotify:artist:7wyRA7deGRxozTyBc6QXPe\"\n          },\n          {\n            \"external_urls\": {\n              \"spotify\": \"https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8\"\n            },\n            \"href\": \"https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8\",\n            \"id\": \"0WISkx0PwT6lYWdPqKUJY8\",\n            \"name\": \"Stephen Malkmus\",\n            \"type\": \"artist\",\n            \"uri\": \"spotify:artist:0WISkx0PwT6lYWdPqKUJY8\"\n          },\n          {\n            \"external_urls\": {\n              \"spotify\": \"https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7\"\n            },\n            \"href\": \"https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7\",\n            \"id\": \"7uStwCeP54Za8gXUFCf5L7\",\n            \"name\": \"The Jicks\",\n            \"type\": \"artist\",\n            \"uri\": \"spotify:artist:7uStwCeP54Za8gXUFCf5L7\"\n          }\n        ],\n        \"available_markets\": [\"AR\",\n          \"BO\",\n          \"BR\",\n          \"CA\",\n          \"CL\",\n          \"CO\",\n          \"CR\",\n          \"EC\",\n          \"GT\",\n          \"HK\",\n          \"HN\",\n          \"ID\",\n          \"MX\",\n          \"MY\",\n          \"NI\",\n          \"PA\",\n          \"PE\",\n          \"PH\",\n          \"PY\",\n          \"SG\",\n          \"SV\",\n          \"TH\",\n          \"TW\",\n          \"US\",\n          \"UY\",\n          \"VN\"\n        ],\n        \"external_urls\": {\n          \"spotify\": \"https://open.spotify.com/album/6pWpb4IdPu9vp9mOdh5DjY\"\n        },\n        \"href\": \"https://api.spotify.com/v1/albums/6pWpb4IdPu9vp9mOdh5DjY\",\n        \"id\": \"6pWpb4IdPu9vp9mOdh5DjY\",\n        \"images\": [{\n            \"height\": 640,\n            \"url\": \"https://i.scdn.co/image/918fdb6fdffccf2bd2dd1a1a93136000f8cf9bd3\",\n            \"width\": 640\n          },\n          {\n            \"height\": 300,\n            \"url\": \"https://i.scdn.co/image/fb39290ebca6fac424d4a40611a7e0d1146c5f88\",\n            \"width\": 300\n          },\n          {\n            \"height\": 64,\n            \"url\": \"https://i.scdn.co/image/873da4a0a21acd96e4a0036c9ecd0580b62652d4\",\n            \"width\": 64\n          }\n        ],\n        \"name\": \"Real Emotional Trash\",\n        \"release_date\": \"2008-03-04\",\n        \"release_date_precision\": \"day\",\n        \"type\": \"album\",\n        \"uri\": \"spotify:album:6pWpb4IdPu9vp9mOdh5DjY\"\n      },\n      \"artists\": [{\n          \"external_urls\": {\n            \"spotify\": \"https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe\"\n          },\n          \"href\": \"https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe\",\n          \"id\": \"7wyRA7deGRxozTyBc6QXPe\",\n          \"name\": \"Stephen Malkmus & The Jicks\",\n          \"type\": \"artist\",\n          \"uri\": \"spotify:artist:7wyRA7deGRxozTyBc6QXPe\"\n        },\n        {\n          \"external_urls\": {\n            \"spotify\": \"https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8\"\n          },\n          \"href\": \"https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8\",\n          \"id\": \"0WISkx0PwT6lYWdPqKUJY8\",\n          \"name\": \"Stephen Malkmus\",\n          \"type\": \"artist\",\n          \"uri\": \"spotify:artist:0WISkx0PwT6lYWdPqKUJY8\"\n        },\n        {\n          \"external_urls\": {\n            \"spotify\": \"https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7\"\n          },\n          \"href\": \"https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7\",\n          \"id\": \"7uStwCeP54Za8gXUFCf5L7\",\n          \"name\": \"The Jicks\",\n          \"type\": \"artist\",\n          \"uri\": \"spotify:artist:7uStwCeP54Za8gXUFCf5L7\"\n        }\n      ],\n      \"available_markets\": [\"AR\",\n        \"BO\",\n        \"BR\",\n        \"CA\",\n        \"CL\",\n        \"CO\",\n        \"CR\",\n        \"EC\",\n        \"GT\",\n        \"HK\",\n        \"HN\",\n        \"ID\",\n        \"MX\",\n        \"MY\",\n        \"NI\",\n        \"PA\",\n        \"PE\",\n        \"PH\",\n        \"PY\",\n        \"SG\",\n        \"SV\",\n        \"TH\",\n        \"TW\",\n        \"US\",\n        \"UY\",\n        \"VN\"\n      ],\n      \"disc_number\": 1,\n      \"duration_ms\": 308146,\n      \"explicit\": False,\n      \"external_ids\": {\n        \"isrc\": \"USMTD0877201\"\n      },\n      \"external_urls\": {\n        \"spotify\": \"https://open.spotify.com/track/3jyFLbljUTKjE13nIWXchH\"\n      },\n      \"href\": \"https://api.spotify.com/v1/tracks/3jyFLbljUTKjE13nIWXchH\",\n      \"id\": \"3jyFLbljUTKjE13nIWXchH\",\n      \"is_local\": False,\n      \"name\": \"Dragonfly Pie\",\n      \"popularity\": 26,\n      \"preview_url\": \"https://p.scdn.co/mp3-preview/50f419e7d3e8a6a771515068622250ab06d1cc86?cid=be22fd00039241bc96d161a63876b54c\",\n      \"track_number\": 1,\n      \"type\": \"track\",\n      \"uri\": \"spotify:track:3jyFLbljUTKjE13nIWXchH\"\n    },\n    {\n      \"album\": {\n        \"album_type\": \"album\",\n        \"artists\": [{\n          \"external_urls\": {\n            \"spotify\": \"https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe\"\n          },\n          \"href\": \"https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe\",\n          \"id\": \"7wyRA7deGRxozTyBc6QXPe\",\n          \"name\": \"Stephen Malkmus & The Jicks\",\n          \"type\": \"artist\",\n          \"uri\": \"spotify:artist:7wyRA7deGRxozTyBc6QXPe\"\n        }],\n        \"available_markets\": [\"AR\",\n          \"AU\",\n          \"BO\",\n          \"BR\",\n          \"CA\",\n          \"CL\",\n          \"CO\",\n          \"CR\",\n          \"DO\",\n          \"EC\",\n          \"GT\",\n          \"HK\",\n          \"HN\",\n          \"ID\",\n          \"JP\",\n          \"MX\",\n          \"MY\",\n          \"NI\",\n          \"NZ\",\n          \"PA\",\n          \"PE\",\n          \"PH\",\n          \"PY\",\n          \"SG\",\n          \"SV\",\n          \"TH\",\n          \"TW\",\n          \"US\",\n          \"UY\",\n          \"VN\",\n          \"ZA\"\n        ],\n        \"external_urls\": {\n          \"spotify\": \"https://open.spotify.com/album/5DMvSCwRqfNVlMB5LjHOwG\"\n        },\n        \"href\": \"https://api.spotify.com/v1/albums/5DMvSCwRqfNVlMB5LjHOwG\",\n        \"id\": \"5DMvSCwRqfNVlMB5LjHOwG\",\n        \"images\": [{\n            \"height\": 640,\n            \"url\": \"https://i.scdn.co/image/bc96e20fa6b42c765db2fb904d3a70b6ef57b0bb\",\n            \"width\": 640\n          },\n          {\n            \"height\": 300,\n            \"url\": \"https://i.scdn.co/image/c7a31ed50b9c704ec066f4aac669cfb9013effb1\",\n            \"width\": 300\n          },\n          {\n            \"height\": 64,\n            \"url\": \"https://i.scdn.co/image/8551e108d0950dd62724ff2703e8c13ce7324114\",\n            \"width\": 64\n          }\n        ],\n        \"name\": \"Sparkle Hard\",\n        \"release_date\": \"2018-05-18\",\n        \"release_date_precision\": \"day\",\n        \"type\": \"album\",\n        \"uri\": \"spotify:album:5DMvSCwRqfNVlMB5LjHOwG\"\n      },\n      \"artists\": [{\n        \"external_urls\": {\n          \"spotify\": \"https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe\"\n        },\n        \"href\": \"https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe\",\n        \"id\": \"7wyRA7deGRxozTyBc6QXPe\",\n        \"name\": \"Stephen Malkmus & The Jicks\",\n        \"type\": \"artist\",\n        \"uri\": \"spotify:artist:7wyRA7deGRxozTyBc6QXPe\"\n      }],\n      \"available_markets\": [\"AR\",\n        \"AU\",\n        \"BO\",\n        \"BR\",\n        \"CA\",\n        \"CL\",\n        \"CO\",\n        \"CR\",\n        \"DO\",\n        \"EC\",\n        \"GT\",\n        \"HK\",\n        \"HN\",\n        \"ID\",\n        \"JP\",\n        \"MX\",\n        \"MY\",\n        \"NI\",\n        \"NZ\",\n        \"PA\",\n        \"PE\",\n        \"PH\",\n        \"PY\",\n        \"SG\",\n        \"SV\",\n        \"TH\",\n        \"TW\",\n        \"US\",\n        \"UY\",\n        \"VN\",\n        \"ZA\"\n      ],\n      \"disc_number\": 1,\n      \"duration_ms\": 423275,\n      \"explicit\": False,\n      \"external_ids\": {\n        \"isrc\": \"USMTD1710380\"\n      },\n      \"external_urls\": {\n        \"spotify\": \"https://open.spotify.com/track/6dNmC2YWtWbVOFOdTuRDQs\"\n      },\n      \"href\": \"https://api.spotify.com/v1/tracks/6dNmC2YWtWbVOFOdTuRDQs\",\n      \"id\": \"6dNmC2YWtWbVOFOdTuRDQs\",\n      \"is_local\": False,\n      \"name\": \"Difficulties - Let Them Eat Vowels\",\n      \"popularity\": 35,\n      \"preview_url\": \"https://p.scdn.co/mp3-preview/787be9d1bbebcd845d0793476de843fa0a4fff79?cid=be22fd00039241bc96d161a63876b54c\",\n      \"track_number\": 11,\n      \"type\": \"track\",\n      \"uri\": \"spotify:track:6dNmC2YWtWbVOFOdTuRDQs\"\n    }\n  ]\n}\n\n\n\njson_normalise(tracks_response)\n\n\nOutput:\nalbum.album_typealbum.artistsalbum.available_marketsalbum.external_urls.spotify\nalbum.hrefalbum.idalbum.imagesalbum.namealbum.release_date\nalbum.release_date_precision...external_urls.spotifyhrefidis_localnamepopularity\npreview_urltrack_numbertypeuri\n 0album[{'external_urls': {'spotify': 'https://open.s...[AR, BO, BR, CA, CL, CO,\nCR, EC, GT, HK, HN, I...https://open.spotify.com/album/6pWpb4IdPu9vp9m...\nhttps://api.spotify.com/v1/albums/6pWpb4IdPu9v...6pWpb4IdPu9vp9mOdh5DjY\n[{'height': 640, 'url': 'https://i.scdn.co/ima...Real Emotional Trash3/4/2008day\n...https://open.spotify.com/track/0BDYBajZydY54OT...\nhttps://api.spotify.com/v1/tracks/0BDYBajZydY5...0BDYBajZydY54OTgQsH940FALSEReal\nEmotional Trash21https://p.scdn.co/mp3-preview/4fcbcd5a99fc7590...4track\nspotify:track:0BDYBajZydY54OTgQsH940\n 1album[{'external_urls': {'spotify': 'https://open.s...[AR, BO, BR, CA, CL, CO,\nCR, EC, GT, HK, HN, I...https://open.spotify.com/album/6pWpb4IdPu9vp9m...\nhttps://api.spotify.com/v1/albums/6pWpb4IdPu9v...6pWpb4IdPu9vp9mOdh5DjY\n[{'height': 640, 'url': 'https://i.scdn.co/ima...Real Emotional Trash3/4/2008day\n...https://open.spotify.com/track/7fdUqrzb8oCcIoK...\nhttps://api.spotify.com/v1/tracks/7fdUqrzb8oCc...7fdUqrzb8oCcIoKvFuzMrsFALSECold\nSon25https://p.scdn.co/mp3-preview/4cf4e21727def470...3track\nspotify:track:7fdUqrzb8oCcIoKvFuzMrs\n 2album[{'external_urls': {'spotify': 'https://open.s...[AR, BO, BR, CA, CL, CO,\nCR, EC, GT, HK, HN, I...https://open.spotify.com/album/6pWpb4IdPu9vp9m...\nhttps://api.spotify.com/v1/albums/6pWpb4IdPu9v...6pWpb4IdPu9vp9mOdh5DjY\n[{'height': 640, 'url': 'https://i.scdn.co/ima...Real Emotional Trash3/4/2008day\n...https://open.spotify.com/track/0islTY4Fw6lhYbf...\nhttps://api.spotify.com/v1/tracks/0islTY4Fw6lh...0islTY4Fw6lhYbfqi8QtdjFALSE\nHopscotch Willie24https://p.scdn.co/mp3-preview/c7782dc6d7c0bb12...2track\nspotify:track:0islTY4Fw6lhYbfqi8Qtdj\n 3album[{'external_urls': {'spotify': 'https://open.s...[AR, BO, BR, CA, CL, CO,\nCR, EC, GT, HK, HN, I...https://open.spotify.com/album/6pWpb4IdPu9vp9m...\nhttps://api.spotify.com/v1/albums/6pWpb4IdPu9v...6pWpb4IdPu9vp9mOdh5DjY\n[{'height': 640, 'url': 'https://i.scdn.co/ima...Real Emotional Trash3/4/2008day\n...https://open.spotify.com/track/3jyFLbljUTKjE13...\nhttps://api.spotify.com/v1/tracks/3jyFLbljUTKj...3jyFLbljUTKjE13nIWXchHFALSE\nDragonfly Pie26https://p.scdn.co/mp3-preview/50f419e7d3e8a6a7...1track\nspotify:track:3jyFLbljUTKjE13nIWXchH\n 4album[{'external_urls': {'spotify': 'https://open.s...[AR, AU, BO, BR, CA, CL,\nCO, CR, DO, EC, GT, H...https://open.spotify.com/album/5DMvSCwRqfNVlMB...\nhttps://api.spotify.com/v1/albums/5DMvSCwRqfNV...5DMvSCwRqfNVlMB5LjHOwG\n[{'height': 640, 'url': 'https://i.scdn.co/ima...Sparkle Hard5/18/2018day...\nhttps://open.spotify.com/track/6dNmC2YWtWbVOFO...\nhttps://api.spotify.com/v1/tracks/6dNmC2YWtWbV...6dNmC2YWtWbVOFOdTuRDQsFALSE\nDifficulties - Let Them Eat Vowels35\nhttps://p.scdn.co/mp3-preview/787be9d1bbebcd84...11track\nspotify:track:6dNmC2YWtWbVOFOdTuRDQsSeparate Ways (Worlds Apart)\nBy default, json_normalize()  uses periods .  to indicate nested levels of the\nJSON object (which is actually converted to a Python dict  by Spotipy). In our\ncase, the album id is found in track['album']['id'], hence the period between\nalbum and id in the DataFrame. This makes things slightly annoying if we want to\ngrab a Series from our new DataFrame. In pandas, we can grab a Series from a\nDataFrame in many ways. To grab the album.id  column, for example:\n\ntracks_df['album.id']\n\n\nOutput:\n0    6pWpb4IdPu9vp9mOdh5DjY\n1    6pWpb4IdPu9vp9mOdh5DjY\n2    6pWpb4IdPu9vp9mOdh5DjY\n3    6pWpb4IdPu9vp9mOdh5DjY\n4    5DMvSCwRqfNVlMB5LjHOwG\nName: album.id, dtype: object\n\n\nor\n\ntracks_df.loc[:,'album.id']\n\n\n\nOutput:\n0    6pWpb4IdPu9vp9mOdh5DjY\n1    6pWpb4IdPu9vp9mOdh5DjY\n2    6pWpb4IdPu9vp9mOdh5DjY\n3    6pWpb4IdPu9vp9mOdh5DjY\n4    5DMvSCwRqfNVlMB5LjHOwG\nName: album.id, dtype: object\n\n\npandas also allows us to use dot notation (i.e. dataframe.column_name) to grab a\ncolumn as a Series, but only if our column name doesn't include a period\nalready. Since json_normalize()  uses a period as a separator by default, this\nruins that method. Never fear though – overriding this behavior is as simple as\noverriding the default argument in the function call:\n\ntracks_df = json_normalize(tracks_response['tracks'],sep=\"_\")\ntracks_df\n\n\nOutput:\nalbum_album_typealbum_artistsalbum_available_marketsalbum_external_urls_spotify\nalbum_hrefalbum_idalbum_imagesalbum_namealbum_release_date\nalbum_release_date_precision...external_urls_spotifyhrefidis_localnamepopularity\npreview_urltrack_numbertypeuri\n 0album[{'external_urls': {'spotify': 'https://open.s...[AR, BO, BR, CA, CL, CO,\nCR, EC, GT, HK, HN, I...https://open.spotify.com/album/6pWpb4IdPu9vp9m...\nhttps://api.spotify.com/v1/albums/6pWpb4IdPu9v...6pWpb4IdPu9vp9mOdh5DjY\n[{'height': 640, 'url': 'https://i.scdn.co/ima...Real Emotional Trash3/4/2008day\n...https://open.spotify.com/track/0BDYBajZydY54OT...\nhttps://api.spotify.com/v1/tracks/0BDYBajZydY5...0BDYBajZydY54OTgQsH940FALSEReal\nEmotional Trash21https://p.scdn.co/mp3-preview/4fcbcd5a99fc7590...4track\nspotify:track:0BDYBajZydY54OTgQsH940\n 1album[{'external_urls': {'spotify': 'https://open.s...[AR, BO, BR, CA, CL, CO,\nCR, EC, GT, HK, HN, I...https://open.spotify.com/album/6pWpb4IdPu9vp9m...\nhttps://api.spotify.com/v1/albums/6pWpb4IdPu9v...6pWpb4IdPu9vp9mOdh5DjY\n[{'height': 640, 'url': 'https://i.scdn.co/ima...Real Emotional Trash3/4/2008day\n...https://open.spotify.com/track/7fdUqrzb8oCcIoK...\nhttps://api.spotify.com/v1/tracks/7fdUqrzb8oCc...7fdUqrzb8oCcIoKvFuzMrsFALSECold\nSon25https://p.scdn.co/mp3-preview/4cf4e21727def470...3track\nspotify:track:7fdUqrzb8oCcIoKvFuzMrs\n 2album[{'external_urls': {'spotify': 'https://open.s...[AR, BO, BR, CA, CL, CO,\nCR, EC, GT, HK, HN, I...https://open.spotify.com/album/6pWpb4IdPu9vp9m...\nhttps://api.spotify.com/v1/albums/6pWpb4IdPu9v...6pWpb4IdPu9vp9mOdh5DjY\n[{'height': 640, 'url': 'https://i.scdn.co/ima...Real Emotional Trash3/4/2008day\n...https://open.spotify.com/track/0islTY4Fw6lhYbf...\nhttps://api.spotify.com/v1/tracks/0islTY4Fw6lh...0islTY4Fw6lhYbfqi8QtdjFALSE\nHopscotch Willie24https://p.scdn.co/mp3-preview/c7782dc6d7c0bb12...2track\nspotify:track:0islTY4Fw6lhYbfqi8Qtdj\n 3album[{'external_urls': {'spotify': 'https://open.s...[AR, BO, BR, CA, CL, CO,\nCR, EC, GT, HK, HN, I...https://open.spotify.com/album/6pWpb4IdPu9vp9m...\nhttps://api.spotify.com/v1/albums/6pWpb4IdPu9v...6pWpb4IdPu9vp9mOdh5DjY\n[{'height': 640, 'url': 'https://i.scdn.co/ima...Real Emotional Trash3/4/2008day\n...https://open.spotify.com/track/3jyFLbljUTKjE13...\nhttps://api.spotify.com/v1/tracks/3jyFLbljUTKj...3jyFLbljUTKjE13nIWXchHFALSE\nDragonfly Pie26https://p.scdn.co/mp3-preview/50f419e7d3e8a6a7...1track\nspotify:track:3jyFLbljUTKjE13nIWXchH\n 4album[{'external_urls': {'spotify': 'https://open.s...[AR, AU, BO, BR, CA, CL,\nCO, CR, DO, EC, GT, H...https://open.spotify.com/album/5DMvSCwRqfNVlMB...\nhttps://api.spotify.com/v1/albums/5DMvSCwRqfNV...5DMvSCwRqfNVlMB5LjHOwG\n[{'height': 640, 'url': 'https://i.scdn.co/ima...Sparkle Hard5/18/2018day...\nhttps://open.spotify.com/track/6dNmC2YWtWbVOFO...\nhttps://api.spotify.com/v1/tracks/6dNmC2YWtWbV...6dNmC2YWtWbVOFOdTuRDQsFALSE\nDifficulties - Let Them Eat Vowels35\nhttps://p.scdn.co/mp3-preview/787be9d1bbebcd84...11track\nspotify:track:6dNmC2YWtWbVOFOdTuRDQsNow we can go back to using dot notation to\naccess a column as a Series. This saves us some typing every time we want to\ngrab a column, and it looks a bit nicer (to me, at least). I say worth it.\n\ntracks_df.album_id\n\n\nOutput:\n0    6pWpb4IdPu9vp9mOdh5DjY\n1    6pWpb4IdPu9vp9mOdh5DjY\n2    6pWpb4IdPu9vp9mOdh5DjY\n3    6pWpb4IdPu9vp9mOdh5DjY\n4    5DMvSCwRqfNVlMB5LjHOwG\nName: album_id, dtype: object\n\n\nI Need That Record\nBy including more parameters when we use json_normlize(), we can really extract\njust the data that we want from our API response.\n\nFrom our responses above, we can see that the artist  property contains a list\nof artists that are associated with a track:\n\ntracks_response['tracks'][0]['artists']\n\n\nOutput:\n[{\n    \"external_urls\": {\n      \"spotify\": \"https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe\"\n    },\n    \"href\": \"https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe\",\n    \"id\": \"7wyRA7deGRxozTyBc6QXPe\",\n    \"name\": \"Stephen Malkmus & The Jicks\",\n    \"type\": \"artist\",\n    \"uri\": \"spotify:artist:7wyRA7deGRxozTyBc6QXPe\"\n  },\n  {\n    \"external_urls\": {\n      \"spotify\": \"https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8\"\n    },\n    \"href\": \"https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8\",\n    \"id\": \"0WISkx0PwT6lYWdPqKUJY8\",\n    \"name\": \"Stephen Malkmus\",\n    \"type\": \"artist\",\n    \"uri\": \"spotify:artist:0WISkx0PwT6lYWdPqKUJY8\"\n  },\n  {\n    \"external_urls\": {\n      \"spotify\": \"https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7\"\n    },\n    \"href\": \"https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7\",\n    \"id\": \"7uStwCeP54Za8gXUFCf5L7\",\n    \"name\": \"The Jicks\",\n    \"type\": \"artist\",\n    \"uri\": \"spotify:artist:7uStwCeP54Za8gXUFCf5L7\"\n  }\n]\n\n\nLet's say I want to load this data into a database later. It would be nice to\nhave a join table that maps each of the artists that are associated with each\ntrack. Luckily, this is possible with json_normalize()'s record_path  and meta \nparameters.\n\nrecord_path  tells json_normalize()  what path of keys leads to each individual\nrecord in the JSON object. In our case, we want to grab every artist id, so our\nfunction call will look like:\n\njson_normalize(tracks_response['tracks'],record_path=['artists'],sep=\"_\")\n\n\n\nexternal_urls href id name type uri\n 1 {'spotify': 'https://open.spotify.com/artist/7... \nhttps://api.spotify.com/v1/artists/7wyRA7deGRx... 7wyRA7deGRxozTyBc6QXPe Stephen\nMalkmus & The Jicks artist spotify:artist:7wyRA7deGRxozTyBc6QXPe\n 1 {'spotify': 'https://open.spotify.com/artist/0... \nhttps://api.spotify.com/v1/artists/0WISkx0PwT6... 0WISkx0PwT6lYWdPqKUJY8 Stephen\nMalkmus artist spotify:artist:0WISkx0PwT6lYWdPqKUJY8\n 2 {'spotify': 'https://open.spotify.com/artist/7... \nhttps://api.spotify.com/v1/artists/7uStwCeP54Z... 7uStwCeP54Za8gXUFCf5L7 The\nJicks artist spotify:artist:7uStwCeP54Za8gXUFCf5L7\n 3 {'spotify': 'https://open.spotify.com/artist/7... \nhttps://api.spotify.com/v1/artists/7wyRA7deGRx... 7wyRA7deGRxozTyBc6QXPe Stephen\nMalkmus & The Jicks artist spotify:artist:7wyRA7deGRxozTyBc6QXPe\n 4 {'spotify': 'https://open.spotify.com/artist/0... \nhttps://api.spotify.com/v1/artists/0WISkx0PwT6... 0WISkx0PwT6lYWdPqKUJY8 Stephen\nMalkmus artist spotify:artist:0WISkx0PwT6lYWdPqKUJY8\n 5 {'spotify': 'https://open.spotify.com/artist/7... \nhttps://api.spotify.com/v1/artists/7uStwCeP54Z... 7uStwCeP54Za8gXUFCf5L7 The\nJicks artist spotify:artist:7uStwCeP54Za8gXUFCf5L7\n 6 {'spotify': 'https://open.spotify.com/artist/7... \nhttps://api.spotify.com/v1/artists/7wyRA7deGRx... 7wyRA7deGRxozTyBc6QXPe Stephen\nMalkmus & The Jicks artist spotify:artist:7wyRA7deGRxozTyBc6QXPe\n 7 {'spotify': 'https://open.spotify.com/artist/0... \nhttps://api.spotify.com/v1/artists/0WISkx0PwT6... 0WISkx0PwT6lYWdPqKUJY8 Stephen\nMalkmus artist spotify:artist:0WISkx0PwT6lYWdPqKUJY8\n 8 {'spotify': 'https://open.spotify.com/artist/7... \nhttps://api.spotify.com/v1/artists/7uStwCeP54Z... 7uStwCeP54Za8gXUFCf5L7 The\nJicks artist spotify:artist:7uStwCeP54Za8gXUFCf5L7\n 9 {'spotify': 'https://open.spotify.com/artist/7... \nhttps://api.spotify.com/v1/artists/7wyRA7deGRx... 7wyRA7deGRxozTyBc6QXPe Stephen\nMalkmus & The Jicks artist spotify:artist:7wyRA7deGRxozTyBc6QXPe\n 10 {'spotify': 'https://open.spotify.com/artist/0... \nhttps://api.spotify.com/v1/artists/0WISkx0PwT6... 0WISkx0PwT6lYWdPqKUJY8 Stephen\nMalkmus artist spotify:artist:0WISkx0PwT6lYWdPqKUJY8\n 11 {'spotify': 'https://open.spotify.com/artist/7... \nhttps://api.spotify.com/v1/artists/7uStwCeP54Z... 7uStwCeP54Za8gXUFCf5L7 The\nJicks artist spotify:artist:7uStwCeP54Za8gXUFCf5L7\n 12 {'spotify': 'https://open.spotify.com/artist/7... \nhttps://api.spotify.com/v1/artists/7wyRA7deGRx... 7wyRA7deGRxozTyBc6QXPe Stephen\nMalkmus & The Jicks artist spotify:artist:7wyRA7deGRxozTyBc6QXPeCool – we're\nalmost there. Now we want to use the meta  parameter to specify what data we\nwant to include from the rest of the JSON object. In our case, we want to keep\nthe track id and map it to the artist id. If we look back at our API response,\nthe name of the column that included the track is is called, appropriately, id,\nso our full function call should look like this:\n\njson_normalize(tracks_response['tracks'],record_path=['artists'],meta=['id'],sep=\"_\")\n\n\nOutput:\n-----------------------------------------\nValueError                             Traceback (most recent call last)\n\n    <ipython-input-14-77e00a98c3c0> in <module>()\n    ----> 1 json_normalize(tracks_response['tracks'],record_path=['artists'],meta=['id'],sep=\"_\")\n\n    ~/anaconda3/envs/music_data/lib/python3.6/site-packages/pandas/io/json/normalize.py in json_normalize(data, record_path, meta, meta_prefix, record_prefix, errors, sep)\n        268         if k in result:\n        269             raise ValueError('Conflicting metadata name {name}, '\n    --> 270                              'need distinguishing prefix '.format(name=k))\n        271 \n        272         result[k] = np.array(v).repeat(lengths)\n    \nValueError: Conflicting metadata name id, need distinguishing prefix \n\n\nUh oh – an error! What's going on? Well, it turns out that both the album id and\ntrack id were given the key id. pandas doesn't like that, and it gives us a\nhelpful error to tell us so: ValueError: Conflicting metadata name id, need\ndistinguishing prefix.\n\nThere are two more parameters we can use to overcome this error: record_prefix \nand meta_prefix. These are strings we'll add to the beginning of our records and\nmetadata to prevent these naming conflicts. Since we're dealing with Spotify\nartist ids for our records and Spotify track ids as the metadata, I'll use \nsp_artist_  and sp_track_  respectively. When that's done, I'll select only the\ncolumns that we're interested in.\n\nartist_and_track = json_normalize(\n    data=tracks_response['tracks'],\n    record_path='artists',\n    meta=['id'],\n    record_prefix='sp_artist_',\n    meta_prefix='sp_track_',\n    sep=\"_\"\n)\nartist_and_track = artist_and_track[['sp_track_id','sp_artist_id']]\nartist_and_track\n\n\nOutput:\nsp_track_id sp_artist_id\n 00BDYBajZydY54OTgQsH940 7wyRA7deGRxozTyBc6QXPe\n 10BDYBajZydY54OTgQsH940 0WISkx0PwT6lYWdPqKUJY8\n 20BDYBajZydY54OTgQsH940 7uStwCeP54Za8gXUFCf5L7\n 37fdUqrzb8oCcIoKvFuzMrs 7wyRA7deGRxozTyBc6QXPe\n 47fdUqrzb8oCcIoKvFuzMrs 0WISkx0PwT6lYWdPqKUJY8\n 57fdUqrzb8oCcIoKvFuzMrs 7uStwCeP54Za8gXUFCf5L7\n 60islTY4Fw6lhYbfqi8Qtdj 7wyRA7deGRxozTyBc6QXPe\n 70islTY4Fw6lhYbfqi8Qtdj 0WISkx0PwT6lYWdPqKUJY8\n 80islTY4Fw6lhYbfqi8Qtdj 7uStwCeP54Za8gXUFCf5L7\n 93jyFLbljUTKjE13nIWXchH 7wyRA7deGRxozTyBc6QXPe\n 103jyFLbljUTKjE13nIWXchH 0WISkx0PwT6lYWdPqKUJY8\n 113jyFLbljUTKjE13nIWXchH 7uStwCeP54Za8gXUFCf5L7\n 126dNmC2YWtWbVOFOdTuRDQs 7wyRA7deGRxozTyBc6QXPeTL;DR\n * Use pd.io.json.json_normalize()  to automagically flatten a nested JSON\n   object into a DataFrame\n * Make your life slightly easier when it comes to selecting columns by\n   overriding the default sep  parameter\n * Specify what data constitutes a record with the record_path  parameter\n * Include data from outside of the record path with the meta  parameter\n * Fix naming conflicts if they arise with the record_prefix  and meta_prefix \n   parameters","html":"<p>In his post about <a href=\"https://hackersandslackers.com/extracting-massive-datasets-from-apis/\">extracting data from APIs</a>, <a href=\"https://hackersandslackers.com/author/todd/\">Todd</a> demonstrated a nice way to massage JSON into a pandas DataFrame. This method works great when our JSON response is flat, because <code>dict.keys()</code> only gets the keys on the first \"level\" of a dictionary. It gets a little trickier when our JSON starts to become nested though, as I experienced when working with <a href=\"https://developer.spotify.com/documentation/web-api/\">Spotify's API</a> via the <a href=\"https://spotipy.readthedocs.io/en/latest/\">Spotipy</a> library. For example, take a look at a response from their <code>https://api.spotify.com/v1/tracks/{id}</code> endpoint:</p><pre><code class=\"language-python\">import spotipy\nfrom spotipy.oauth2 import SpotifyClientCredentials\n\nspotify_client_id = 'YOUR_ID'\nspotify_client_secret  = 'YOUR_SECRET'\nclient_credentials_manager = SpotifyClientCredentials(client_id=spotify_client_id, client_secret=spotify_client_secret)\nsp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)\n</code></pre>\n<pre><code class=\"language-python\">track_response = sp.track('0BDYBajZydY54OTgQsH940')\ntrack_response\n</code></pre>\n<h3 id=\"output-\">Output:</h3><pre><code class=\"language-json\">{\n  &quot;album&quot;: {\n    &quot;album_type&quot;: &quot;album&quot;,\n    &quot;artists&quot;: [{\n        &quot;external_urls&quot;: {\n          &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe&quot;\n        },\n        &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe&quot;,\n        &quot;id&quot;: &quot;7wyRA7deGRxozTyBc6QXPe&quot;,\n        &quot;name&quot;: &quot;Stephen Malkmus &amp; The Jicks&quot;,\n        &quot;type&quot;: &quot;artist&quot;,\n        &quot;uri&quot;: &quot;spotify:artist:7wyRA7deGRxozTyBc6QXPe&quot;\n      },\n      {\n        &quot;external_urls&quot;: {\n          &quot;spotify&quot;: &quot;https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8&quot;\n        },\n        &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8&quot;,\n        &quot;id&quot;: &quot;0WISkx0PwT6lYWdPqKUJY8&quot;,\n        &quot;name&quot;: &quot;Stephen Malkmus&quot;,\n        &quot;type&quot;: &quot;artist&quot;,\n        &quot;uri&quot;: &quot;spotify:artist:0WISkx0PwT6lYWdPqKUJY8&quot;\n      },\n      {\n        &quot;external_urls&quot;: {\n          &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7&quot;\n        },\n        &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7&quot;,\n        &quot;id&quot;: &quot;7uStwCeP54Za8gXUFCf5L7&quot;,\n        &quot;name&quot;: &quot;The Jicks&quot;,\n        &quot;type&quot;: &quot;artist&quot;,\n        &quot;uri&quot;: &quot;spotify:artist:7uStwCeP54Za8gXUFCf5L7&quot;\n      }\n    ],\n    &quot;available_markets&quot;: [&quot;AR&quot;,\n      &quot;BO&quot;,\n      &quot;BR&quot;,\n      &quot;CA&quot;,\n      &quot;...&quot;,\n      &quot;US&quot;,\n      &quot;UY&quot;,\n      &quot;VN&quot;\n    ],\n    &quot;external_urls&quot;: {\n      &quot;spotify&quot;: &quot;https://open.spotify.com/album/6pWpb4IdPu9vp9mOdh5DjY&quot;\n    },\n    &quot;href&quot;: &quot;https://api.spotify.com/v1/albums/6pWpb4IdPu9vp9mOdh5DjY&quot;,\n    &quot;id&quot;: &quot;6pWpb4IdPu9vp9mOdh5DjY&quot;,\n    &quot;images&quot;: [{\n        &quot;height&quot;: 640,\n        &quot;url&quot;: &quot;https://i.scdn.co/image/918fdb6fdffccf2bd2dd1a1a93136000f8cf9bd3&quot;,\n        &quot;width&quot;: 640\n      },\n      {\n        &quot;height&quot;: 300,\n        &quot;url&quot;: &quot;https://i.scdn.co/image/fb39290ebca6fac424d4a40611a7e0d1146c5f88&quot;,\n        &quot;width&quot;: 300\n      },\n      {\n        &quot;height&quot;: 64,\n        &quot;url&quot;: &quot;https://i.scdn.co/image/873da4a0a21acd96e4a0036c9ecd0580b62652d4&quot;,\n        &quot;width&quot;: 64\n      }\n    ],\n    &quot;name&quot;: &quot;Real Emotional Trash&quot;,\n    &quot;release_date&quot;: &quot;2008-03-04&quot;,\n    &quot;release_date_precision&quot;: &quot;day&quot;,\n    &quot;type&quot;: &quot;album&quot;,\n    &quot;uri&quot;: &quot;spotify:album:6pWpb4IdPu9vp9mOdh5DjY&quot;\n  },\n  &quot;artists&quot;: [{\n      &quot;external_urls&quot;: {\n        &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe&quot;\n      },\n      &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe&quot;,\n      &quot;id&quot;: &quot;7wyRA7deGRxozTyBc6QXPe&quot;,\n      &quot;name&quot;: &quot;Stephen Malkmus &amp; The Jicks&quot;,\n      &quot;type&quot;: &quot;artist&quot;,\n      &quot;uri&quot;: &quot;spotify:artist:7wyRA7deGRxozTyBc6QXPe&quot;\n    },\n    {\n      &quot;external_urls&quot;: {\n        &quot;spotify&quot;: &quot;https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8&quot;\n      },\n      &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8&quot;,\n      &quot;id&quot;: &quot;0WISkx0PwT6lYWdPqKUJY8&quot;,\n      &quot;name&quot;: &quot;Stephen Malkmus&quot;,\n      &quot;type&quot;: &quot;artist&quot;,\n      &quot;uri&quot;: &quot;spotify:artist:0WISkx0PwT6lYWdPqKUJY8&quot;\n    },\n    {\n      &quot;external_urls&quot;: {\n        &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7&quot;\n      },\n      &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7&quot;,\n      &quot;id&quot;: &quot;7uStwCeP54Za8gXUFCf5L7&quot;,\n      &quot;name&quot;: &quot;The Jicks&quot;,\n      &quot;type&quot;: &quot;artist&quot;,\n      &quot;uri&quot;: &quot;spotify:artist:7uStwCeP54Za8gXUFCf5L7&quot;\n    }\n  ],\n  &quot;available_markets&quot;: [&quot;AR&quot;,\n    &quot;BO&quot;,\n    &quot;BR&quot;,\n    &quot;CA&quot;,\n    &quot;...&quot;,\n    &quot;US&quot;,\n    &quot;UY&quot;,\n    &quot;VN&quot;\n  ],\n  &quot;disc_number&quot;: 1,\n  &quot;duration_ms&quot;: 608826,\n  &quot;explicit&quot;: False,\n  &quot;external_ids&quot;: {\n    &quot;isrc&quot;: &quot;USMTD0877204&quot;\n  },\n  &quot;external_urls&quot;: {\n    &quot;spotify&quot;: &quot;https://open.spotify.com/track/0BDYBajZydY54OTgQsH940&quot;\n  },\n  &quot;href&quot;: &quot;https://api.spotify.com/v1/tracks/0BDYBajZydY54OTgQsH940&quot;,\n  &quot;id&quot;: &quot;0BDYBajZydY54OTgQsH940&quot;,\n  &quot;is_local&quot;: False,\n  &quot;name&quot;: &quot;Real Emotional Trash&quot;,\n  &quot;popularity&quot;: 21,\n  &quot;preview_url&quot;: &quot;https://p.scdn.co/mp3-preview/4fcbcd5a99fc7590d5819849e1aad3eff981dc75?cid=be22fd00039241bc96d161a63876b54c&quot;,\n  &quot;track_number&quot;: 4,\n  &quot;type&quot;: &quot;track&quot;,\n  &quot;uri&quot;: &quot;spotify:track:0BDYBajZydY54OTgQsH940&quot;\n}\n</code></pre>\n<p>In addition to plenty of information about the track, Spotify also includes information about the album that contains the track. If we were to just use the <code>dict.keys()</code> method to turn this response into a DataFrame, we'd be missing out on all that extra album information. Well, it would be there, just not readily accessible.</p><pre><code class=\"language-python\">track_response.keys()\n</code></pre>\n<h3 id=\"output--1\">Output:</h3><pre><code class=\"language-python\">dict_keys(['album', 'artists', 'available_markets', 'disc_number', 'duration_ms', 'explicit', 'external_ids', 'external_urls', 'href', 'id', 'is_local', 'name', 'popularity', 'preview_url', 'track_number', 'type', 'uri'])\n</code></pre>\n<p>So how do we get around this? Well, we could write our own function, but because pandas is amazing, it already has a built in tool that takes care of this for us.</p><h2 id=\"data-normalization\">Data Normalization</h2><p>Meet <code>json_normalize()</code>:</p><pre><code class=\"language-python\">import pandas as pd\nfrom pandas.io.json import json_normalize\njson_normalize(track_response)\n</code></pre>\n<h3 id=\"output--2\">Output:</h3><div class=\"tableshadow tableContainer\" data-simplebar=\"\">\n<table class=\"responsive-table\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>album.album_type</th>\n      <th>album.artists</th>\n      <th>album.available_markets</th>\n      <th>album.external_urls.spotify</th>\n      <th>album.href</th>\n      <th>album.id</th>\n      <th>album.images</th>\n      <th>album.name</th>\n      <th>album.release_date</th>\n      <th>album.release_date_precision</th>\n      <th>...</th>\n      <th>external_urls.spotify</th>\n      <th>href</th>\n      <th>id</th>\n      <th>is_local</th>\n      <th>name</th>\n      <th>popularity</th>\n      <th>preview_url</th>\n      <th>track_number</th>\n      <th>type</th>\n      <th>uri</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>album</td>\n      <td>[{'external_urls': {'spotify': 'https://open.s...</td>\n      <td>[AR, BO, BR, CA, CL, CO, CR, EC, GT, HK, HN, I...</td>\n      <td>https://open.spotify.com/album/6pWpb4IdPu9vp9m...</td>\n      <td>https://api.spotify.com/v1/albums/6pWpb4IdPu9v...</td>\n      <td>6pWpb4IdPu9vp9mOdh5DjY</td>\n      <td>[{'height': 640, 'url': 'https://i.scdn.co/ima...</td>\n      <td>Real Emotional Trash</td>\n      <td>2008-03-04</td>\n      <td>day</td>\n      <td>...</td>\n      <td>https://open.spotify.com/track/0BDYBajZydY54OT...</td>\n      <td>https://api.spotify.com/v1/tracks/0BDYBajZydY5...</td>\n      <td>0BDYBajZydY54OTgQsH940</td>\n      <td>False</td>\n      <td>Real Emotional Trash</td>\n      <td>21</td>\n      <td>https://p.scdn.co/mp3-preview/4fcbcd5a99fc7590...</td>\n      <td>4</td>\n      <td>track</td>\n      <td>spotify:track:0BDYBajZydY54OTgQsH940</td>\n    </tr>\n  </tbody>\n</table>\n</div><p>Yep – it's that easy. pandas takes our nested JSON object, flattens it out, and turns it into a DataFrame.</p><p>This makes our life easier when we're dealing with one record, but it <em>really</em> comes in handy when we're dealing with a response that contains multiple records.</p><pre><code class=\"language-python\">tracks_response = sp.tracks(\n    ['0BDYBajZydY54OTgQsH940',\n     '7fdUqrzb8oCcIoKvFuzMrs',\n     '0islTY4Fw6lhYbfqi8Qtdj',\n     '3jyFLbljUTKjE13nIWXchH',\n     '6dNmC2YWtWbVOFOdTuRDQs']\n)\ntracks_response\n</code></pre>\n<h3 id=\"output--3\">Output:</h3><pre><code class=\"language-json\">{\n  &quot;tracks&quot;: [{\n      &quot;album&quot;: {\n        &quot;album_type&quot;: &quot;album&quot;,\n        &quot;artists&quot;: [{\n            &quot;external_urls&quot;: {\n              &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe&quot;\n            },\n            &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe&quot;,\n            &quot;id&quot;: &quot;7wyRA7deGRxozTyBc6QXPe&quot;,\n            &quot;name&quot;: &quot;Stephen Malkmus &amp; The Jicks&quot;,\n            &quot;type&quot;: &quot;artist&quot;,\n            &quot;uri&quot;: &quot;spotify:artist:7wyRA7deGRxozTyBc6QXPe&quot;\n          },\n          {\n            &quot;external_urls&quot;: {\n              &quot;spotify&quot;: &quot;https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8&quot;\n            },\n            &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8&quot;,\n            &quot;id&quot;: &quot;0WISkx0PwT6lYWdPqKUJY8&quot;,\n            &quot;name&quot;: &quot;Stephen Malkmus&quot;,\n            &quot;type&quot;: &quot;artist&quot;,\n            &quot;uri&quot;: &quot;spotify:artist:0WISkx0PwT6lYWdPqKUJY8&quot;\n          },\n          {\n            &quot;external_urls&quot;: {\n              &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7&quot;\n            },\n            &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7&quot;,\n            &quot;id&quot;: &quot;7uStwCeP54Za8gXUFCf5L7&quot;,\n            &quot;name&quot;: &quot;The Jicks&quot;,\n            &quot;type&quot;: &quot;artist&quot;,\n            &quot;uri&quot;: &quot;spotify:artist:7uStwCeP54Za8gXUFCf5L7&quot;\n          }\n        ],\n        &quot;available_markets&quot;: [&quot;AR&quot;,\n          &quot;BO&quot;,\n          &quot;BR&quot;,\n          &quot;CA&quot;,\n          &quot;CL&quot;,\n          &quot;CO&quot;,\n          &quot;CR&quot;,\n          &quot;EC&quot;,\n          &quot;GT&quot;,\n          &quot;HK&quot;,\n          &quot;HN&quot;,\n          &quot;ID&quot;,\n          &quot;MX&quot;,\n          &quot;MY&quot;,\n          &quot;NI&quot;,\n          &quot;PA&quot;,\n          &quot;PE&quot;,\n          &quot;PH&quot;,\n          &quot;PY&quot;,\n          &quot;SG&quot;,\n          &quot;SV&quot;,\n          &quot;TH&quot;,\n          &quot;TW&quot;,\n          &quot;US&quot;,\n          &quot;UY&quot;,\n          &quot;VN&quot;\n        ],\n        &quot;external_urls&quot;: {\n          &quot;spotify&quot;: &quot;https://open.spotify.com/album/6pWpb4IdPu9vp9mOdh5DjY&quot;\n        },\n        &quot;href&quot;: &quot;https://api.spotify.com/v1/albums/6pWpb4IdPu9vp9mOdh5DjY&quot;,\n        &quot;id&quot;: &quot;6pWpb4IdPu9vp9mOdh5DjY&quot;,\n        &quot;images&quot;: [{\n            &quot;height&quot;: 640,\n            &quot;url&quot;: &quot;https://i.scdn.co/image/918fdb6fdffccf2bd2dd1a1a93136000f8cf9bd3&quot;,\n            &quot;width&quot;: 640\n          },\n          {\n            &quot;height&quot;: 300,\n            &quot;url&quot;: &quot;https://i.scdn.co/image/fb39290ebca6fac424d4a40611a7e0d1146c5f88&quot;,\n            &quot;width&quot;: 300\n          },\n          {\n            &quot;height&quot;: 64,\n            &quot;url&quot;: &quot;https://i.scdn.co/image/873da4a0a21acd96e4a0036c9ecd0580b62652d4&quot;,\n            &quot;width&quot;: 64\n          }\n        ],\n        &quot;name&quot;: &quot;Real Emotional Trash&quot;,\n        &quot;release_date&quot;: &quot;2008-03-04&quot;,\n        &quot;release_date_precision&quot;: &quot;day&quot;,\n        &quot;type&quot;: &quot;album&quot;,\n        &quot;uri&quot;: &quot;spotify:album:6pWpb4IdPu9vp9mOdh5DjY&quot;\n      },\n      &quot;artists&quot;: [{\n          &quot;external_urls&quot;: {\n            &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe&quot;\n          },\n          &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe&quot;,\n          &quot;id&quot;: &quot;7wyRA7deGRxozTyBc6QXPe&quot;,\n          &quot;name&quot;: &quot;Stephen Malkmus &amp; The Jicks&quot;,\n          &quot;type&quot;: &quot;artist&quot;,\n          &quot;uri&quot;: &quot;spotify:artist:7wyRA7deGRxozTyBc6QXPe&quot;\n        },\n        {\n          &quot;external_urls&quot;: {\n            &quot;spotify&quot;: &quot;https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8&quot;\n          },\n          &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8&quot;,\n          &quot;id&quot;: &quot;0WISkx0PwT6lYWdPqKUJY8&quot;,\n          &quot;name&quot;: &quot;Stephen Malkmus&quot;,\n          &quot;type&quot;: &quot;artist&quot;,\n          &quot;uri&quot;: &quot;spotify:artist:0WISkx0PwT6lYWdPqKUJY8&quot;\n        },\n        {\n          &quot;external_urls&quot;: {\n            &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7&quot;\n          },\n          &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7&quot;,\n          &quot;id&quot;: &quot;7uStwCeP54Za8gXUFCf5L7&quot;,\n          &quot;name&quot;: &quot;The Jicks&quot;,\n          &quot;type&quot;: &quot;artist&quot;,\n          &quot;uri&quot;: &quot;spotify:artist:7uStwCeP54Za8gXUFCf5L7&quot;\n        }\n      ],\n      &quot;available_markets&quot;: [&quot;AR&quot;,\n        &quot;BO&quot;,\n        &quot;BR&quot;,\n        &quot;CA&quot;,\n        &quot;CL&quot;,\n        &quot;CO&quot;,\n        &quot;CR&quot;,\n        &quot;EC&quot;,\n        &quot;GT&quot;,\n        &quot;HK&quot;,\n        &quot;HN&quot;,\n        &quot;ID&quot;,\n        &quot;MX&quot;,\n        &quot;MY&quot;,\n        &quot;NI&quot;,\n        &quot;PA&quot;,\n        &quot;PE&quot;,\n        &quot;PH&quot;,\n        &quot;PY&quot;,\n        &quot;SG&quot;,\n        &quot;SV&quot;,\n        &quot;TH&quot;,\n        &quot;TW&quot;,\n        &quot;US&quot;,\n        &quot;UY&quot;,\n        &quot;VN&quot;\n      ],\n      &quot;disc_number&quot;: 1,\n      &quot;duration_ms&quot;: 608826,\n      &quot;explicit&quot;: False,\n      &quot;external_ids&quot;: {\n        &quot;isrc&quot;: &quot;USMTD0877204&quot;\n      },\n      &quot;external_urls&quot;: {\n        &quot;spotify&quot;: &quot;https://open.spotify.com/track/0BDYBajZydY54OTgQsH940&quot;\n      },\n      &quot;href&quot;: &quot;https://api.spotify.com/v1/tracks/0BDYBajZydY54OTgQsH940&quot;,\n      &quot;id&quot;: &quot;0BDYBajZydY54OTgQsH940&quot;,\n      &quot;is_local&quot;: False,\n      &quot;name&quot;: &quot;Real Emotional Trash&quot;,\n      &quot;popularity&quot;: 21,\n      &quot;preview_url&quot;: &quot;https://p.scdn.co/mp3-preview/4fcbcd5a99fc7590d5819849e1aad3eff981dc75?cid=be22fd00039241bc96d161a63876b54c&quot;,\n      &quot;track_number&quot;: 4,\n      &quot;type&quot;: &quot;track&quot;,\n      &quot;uri&quot;: &quot;spotify:track:0BDYBajZydY54OTgQsH940&quot;\n    },\n    {\n      &quot;album&quot;: {\n        &quot;album_type&quot;: &quot;album&quot;,\n        &quot;artists&quot;: [{\n            &quot;external_urls&quot;: {\n              &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe&quot;\n            },\n            &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe&quot;,\n            &quot;id&quot;: &quot;7wyRA7deGRxozTyBc6QXPe&quot;,\n            &quot;name&quot;: &quot;Stephen Malkmus &amp; The Jicks&quot;,\n            &quot;type&quot;: &quot;artist&quot;,\n            &quot;uri&quot;: &quot;spotify:artist:7wyRA7deGRxozTyBc6QXPe&quot;\n          },\n          {\n            &quot;external_urls&quot;: {\n              &quot;spotify&quot;: &quot;https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8&quot;\n            },\n            &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8&quot;,\n            &quot;id&quot;: &quot;0WISkx0PwT6lYWdPqKUJY8&quot;,\n            &quot;name&quot;: &quot;Stephen Malkmus&quot;,\n            &quot;type&quot;: &quot;artist&quot;,\n            &quot;uri&quot;: &quot;spotify:artist:0WISkx0PwT6lYWdPqKUJY8&quot;\n          },\n          {\n            &quot;external_urls&quot;: {\n              &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7&quot;\n            },\n            &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7&quot;,\n            &quot;id&quot;: &quot;7uStwCeP54Za8gXUFCf5L7&quot;,\n            &quot;name&quot;: &quot;The Jicks&quot;,\n            &quot;type&quot;: &quot;artist&quot;,\n            &quot;uri&quot;: &quot;spotify:artist:7uStwCeP54Za8gXUFCf5L7&quot;\n          }\n        ],\n        &quot;available_markets&quot;: [&quot;AR&quot;,\n          &quot;BO&quot;,\n          &quot;BR&quot;,\n          &quot;CA&quot;,\n          &quot;CL&quot;,\n          &quot;CO&quot;,\n          &quot;CR&quot;,\n          &quot;EC&quot;,\n          &quot;GT&quot;,\n          &quot;HK&quot;,\n          &quot;HN&quot;,\n          &quot;ID&quot;,\n          &quot;MX&quot;,\n          &quot;MY&quot;,\n          &quot;NI&quot;,\n          &quot;PA&quot;,\n          &quot;PE&quot;,\n          &quot;PH&quot;,\n          &quot;PY&quot;,\n          &quot;SG&quot;,\n          &quot;SV&quot;,\n          &quot;TH&quot;,\n          &quot;TW&quot;,\n          &quot;US&quot;,\n          &quot;UY&quot;,\n          &quot;VN&quot;\n        ],\n        &quot;external_urls&quot;: {\n          &quot;spotify&quot;: &quot;https://open.spotify.com/album/6pWpb4IdPu9vp9mOdh5DjY&quot;\n        },\n        &quot;href&quot;: &quot;https://api.spotify.com/v1/albums/6pWpb4IdPu9vp9mOdh5DjY&quot;,\n        &quot;id&quot;: &quot;6pWpb4IdPu9vp9mOdh5DjY&quot;,\n        &quot;images&quot;: [{\n            &quot;height&quot;: 640,\n            &quot;url&quot;: &quot;https://i.scdn.co/image/918fdb6fdffccf2bd2dd1a1a93136000f8cf9bd3&quot;,\n            &quot;width&quot;: 640\n          },\n          {\n            &quot;height&quot;: 300,\n            &quot;url&quot;: &quot;https://i.scdn.co/image/fb39290ebca6fac424d4a40611a7e0d1146c5f88&quot;,\n            &quot;width&quot;: 300\n          },\n          {\n            &quot;height&quot;: 64,\n            &quot;url&quot;: &quot;https://i.scdn.co/image/873da4a0a21acd96e4a0036c9ecd0580b62652d4&quot;,\n            &quot;width&quot;: 64\n          }\n        ],\n        &quot;name&quot;: &quot;Real Emotional Trash&quot;,\n        &quot;release_date&quot;: &quot;2008-03-04&quot;,\n        &quot;release_date_precision&quot;: &quot;day&quot;,\n        &quot;type&quot;: &quot;album&quot;,\n        &quot;uri&quot;: &quot;spotify:album:6pWpb4IdPu9vp9mOdh5DjY&quot;\n      },\n      &quot;artists&quot;: [{\n          &quot;external_urls&quot;: {\n            &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe&quot;\n          },\n          &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe&quot;,\n          &quot;id&quot;: &quot;7wyRA7deGRxozTyBc6QXPe&quot;,\n          &quot;name&quot;: &quot;Stephen Malkmus &amp; The Jicks&quot;,\n          &quot;type&quot;: &quot;artist&quot;,\n          &quot;uri&quot;: &quot;spotify:artist:7wyRA7deGRxozTyBc6QXPe&quot;\n        },\n        {\n          &quot;external_urls&quot;: {\n            &quot;spotify&quot;: &quot;https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8&quot;\n          },\n          &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8&quot;,\n          &quot;id&quot;: &quot;0WISkx0PwT6lYWdPqKUJY8&quot;,\n          &quot;name&quot;: &quot;Stephen Malkmus&quot;,\n          &quot;type&quot;: &quot;artist&quot;,\n          &quot;uri&quot;: &quot;spotify:artist:0WISkx0PwT6lYWdPqKUJY8&quot;\n        },\n        {\n          &quot;external_urls&quot;: {\n            &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7&quot;\n          },\n          &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7&quot;,\n          &quot;id&quot;: &quot;7uStwCeP54Za8gXUFCf5L7&quot;,\n          &quot;name&quot;: &quot;The Jicks&quot;,\n          &quot;type&quot;: &quot;artist&quot;,\n          &quot;uri&quot;: &quot;spotify:artist:7uStwCeP54Za8gXUFCf5L7&quot;\n        }\n      ],\n      &quot;available_markets&quot;: [&quot;AR&quot;,\n        &quot;BO&quot;,\n        &quot;BR&quot;,\n        &quot;CA&quot;,\n        &quot;CL&quot;,\n        &quot;CO&quot;,\n        &quot;CR&quot;,\n        &quot;EC&quot;,\n        &quot;GT&quot;,\n        &quot;HK&quot;,\n        &quot;HN&quot;,\n        &quot;ID&quot;,\n        &quot;MX&quot;,\n        &quot;MY&quot;,\n        &quot;NI&quot;,\n        &quot;PA&quot;,\n        &quot;PE&quot;,\n        &quot;PH&quot;,\n        &quot;PY&quot;,\n        &quot;SG&quot;,\n        &quot;SV&quot;,\n        &quot;TH&quot;,\n        &quot;TW&quot;,\n        &quot;US&quot;,\n        &quot;UY&quot;,\n        &quot;VN&quot;\n      ],\n      &quot;disc_number&quot;: 1,\n      &quot;duration_ms&quot;: 222706,\n      &quot;explicit&quot;: False,\n      &quot;external_ids&quot;: {\n        &quot;isrc&quot;: &quot;USMTD0877203&quot;\n      },\n      &quot;external_urls&quot;: {\n        &quot;spotify&quot;: &quot;https://open.spotify.com/track/7fdUqrzb8oCcIoKvFuzMrs&quot;\n      },\n      &quot;href&quot;: &quot;https://api.spotify.com/v1/tracks/7fdUqrzb8oCcIoKvFuzMrs&quot;,\n      &quot;id&quot;: &quot;7fdUqrzb8oCcIoKvFuzMrs&quot;,\n      &quot;is_local&quot;: False,\n      &quot;name&quot;: &quot;Cold Son&quot;,\n      &quot;popularity&quot;: 25,\n      &quot;preview_url&quot;: &quot;https://p.scdn.co/mp3-preview/4cf4e21727def47097e27d30de16ffe9f99b7774?cid=be22fd00039241bc96d161a63876b54c&quot;,\n      &quot;track_number&quot;: 3,\n      &quot;type&quot;: &quot;track&quot;,\n      &quot;uri&quot;: &quot;spotify:track:7fdUqrzb8oCcIoKvFuzMrs&quot;\n    },\n    {\n      &quot;album&quot;: {\n        &quot;album_type&quot;: &quot;album&quot;,\n        &quot;artists&quot;: [{\n            &quot;external_urls&quot;: {\n              &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe&quot;\n            },\n            &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe&quot;,\n            &quot;id&quot;: &quot;7wyRA7deGRxozTyBc6QXPe&quot;,\n            &quot;name&quot;: &quot;Stephen Malkmus &amp; The Jicks&quot;,\n            &quot;type&quot;: &quot;artist&quot;,\n            &quot;uri&quot;: &quot;spotify:artist:7wyRA7deGRxozTyBc6QXPe&quot;\n          },\n          {\n            &quot;external_urls&quot;: {\n              &quot;spotify&quot;: &quot;https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8&quot;\n            },\n            &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8&quot;,\n            &quot;id&quot;: &quot;0WISkx0PwT6lYWdPqKUJY8&quot;,\n            &quot;name&quot;: &quot;Stephen Malkmus&quot;,\n            &quot;type&quot;: &quot;artist&quot;,\n            &quot;uri&quot;: &quot;spotify:artist:0WISkx0PwT6lYWdPqKUJY8&quot;\n          },\n          {\n            &quot;external_urls&quot;: {\n              &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7&quot;\n            },\n            &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7&quot;,\n            &quot;id&quot;: &quot;7uStwCeP54Za8gXUFCf5L7&quot;,\n            &quot;name&quot;: &quot;The Jicks&quot;,\n            &quot;type&quot;: &quot;artist&quot;,\n            &quot;uri&quot;: &quot;spotify:artist:7uStwCeP54Za8gXUFCf5L7&quot;\n          }\n        ],\n        &quot;available_markets&quot;: [&quot;AR&quot;,\n          &quot;BO&quot;,\n          &quot;BR&quot;,\n          &quot;CA&quot;,\n          &quot;CL&quot;,\n          &quot;CO&quot;,\n          &quot;CR&quot;,\n          &quot;EC&quot;,\n          &quot;GT&quot;,\n          &quot;HK&quot;,\n          &quot;HN&quot;,\n          &quot;ID&quot;,\n          &quot;MX&quot;,\n          &quot;MY&quot;,\n          &quot;NI&quot;,\n          &quot;PA&quot;,\n          &quot;PE&quot;,\n          &quot;PH&quot;,\n          &quot;PY&quot;,\n          &quot;SG&quot;,\n          &quot;SV&quot;,\n          &quot;TH&quot;,\n          &quot;TW&quot;,\n          &quot;US&quot;,\n          &quot;UY&quot;,\n          &quot;VN&quot;\n        ],\n        &quot;external_urls&quot;: {\n          &quot;spotify&quot;: &quot;https://open.spotify.com/album/6pWpb4IdPu9vp9mOdh5DjY&quot;\n        },\n        &quot;href&quot;: &quot;https://api.spotify.com/v1/albums/6pWpb4IdPu9vp9mOdh5DjY&quot;,\n        &quot;id&quot;: &quot;6pWpb4IdPu9vp9mOdh5DjY&quot;,\n        &quot;images&quot;: [{\n            &quot;height&quot;: 640,\n            &quot;url&quot;: &quot;https://i.scdn.co/image/918fdb6fdffccf2bd2dd1a1a93136000f8cf9bd3&quot;,\n            &quot;width&quot;: 640\n          },\n          {\n            &quot;height&quot;: 300,\n            &quot;url&quot;: &quot;https://i.scdn.co/image/fb39290ebca6fac424d4a40611a7e0d1146c5f88&quot;,\n            &quot;width&quot;: 300\n          },\n          {\n            &quot;height&quot;: 64,\n            &quot;url&quot;: &quot;https://i.scdn.co/image/873da4a0a21acd96e4a0036c9ecd0580b62652d4&quot;,\n            &quot;width&quot;: 64\n          }\n        ],\n        &quot;name&quot;: &quot;Real Emotional Trash&quot;,\n        &quot;release_date&quot;: &quot;2008-03-04&quot;,\n        &quot;release_date_precision&quot;: &quot;day&quot;,\n        &quot;type&quot;: &quot;album&quot;,\n        &quot;uri&quot;: &quot;spotify:album:6pWpb4IdPu9vp9mOdh5DjY&quot;\n      },\n      &quot;artists&quot;: [{\n          &quot;external_urls&quot;: {\n            &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe&quot;\n          },\n          &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe&quot;,\n          &quot;id&quot;: &quot;7wyRA7deGRxozTyBc6QXPe&quot;,\n          &quot;name&quot;: &quot;Stephen Malkmus &amp; The Jicks&quot;,\n          &quot;type&quot;: &quot;artist&quot;,\n          &quot;uri&quot;: &quot;spotify:artist:7wyRA7deGRxozTyBc6QXPe&quot;\n        },\n        {\n          &quot;external_urls&quot;: {\n            &quot;spotify&quot;: &quot;https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8&quot;\n          },\n          &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8&quot;,\n          &quot;id&quot;: &quot;0WISkx0PwT6lYWdPqKUJY8&quot;,\n          &quot;name&quot;: &quot;Stephen Malkmus&quot;,\n          &quot;type&quot;: &quot;artist&quot;,\n          &quot;uri&quot;: &quot;spotify:artist:0WISkx0PwT6lYWdPqKUJY8&quot;\n        },\n        {\n          &quot;external_urls&quot;: {\n            &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7&quot;\n          },\n          &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7&quot;,\n          &quot;id&quot;: &quot;7uStwCeP54Za8gXUFCf5L7&quot;,\n          &quot;name&quot;: &quot;The Jicks&quot;,\n          &quot;type&quot;: &quot;artist&quot;,\n          &quot;uri&quot;: &quot;spotify:artist:7uStwCeP54Za8gXUFCf5L7&quot;\n        }\n      ],\n      &quot;available_markets&quot;: [&quot;AR&quot;,\n        &quot;BO&quot;,\n        &quot;BR&quot;,\n        &quot;CA&quot;,\n        &quot;CL&quot;,\n        &quot;CO&quot;,\n        &quot;CR&quot;,\n        &quot;EC&quot;,\n        &quot;GT&quot;,\n        &quot;HK&quot;,\n        &quot;HN&quot;,\n        &quot;ID&quot;,\n        &quot;MX&quot;,\n        &quot;MY&quot;,\n        &quot;NI&quot;,\n        &quot;PA&quot;,\n        &quot;PE&quot;,\n        &quot;PH&quot;,\n        &quot;PY&quot;,\n        &quot;SG&quot;,\n        &quot;SV&quot;,\n        &quot;TH&quot;,\n        &quot;TW&quot;,\n        &quot;US&quot;,\n        &quot;UY&quot;,\n        &quot;VN&quot;\n      ],\n      &quot;disc_number&quot;: 1,\n      &quot;duration_ms&quot;: 416173,\n      &quot;explicit&quot;: False,\n      &quot;external_ids&quot;: {\n        &quot;isrc&quot;: &quot;USMTD0877202&quot;\n      },\n      &quot;external_urls&quot;: {\n        &quot;spotify&quot;: &quot;https://open.spotify.com/track/0islTY4Fw6lhYbfqi8Qtdj&quot;\n      },\n      &quot;href&quot;: &quot;https://api.spotify.com/v1/tracks/0islTY4Fw6lhYbfqi8Qtdj&quot;,\n      &quot;id&quot;: &quot;0islTY4Fw6lhYbfqi8Qtdj&quot;,\n      &quot;is_local&quot;: False,\n      &quot;name&quot;: &quot;Hopscotch Willie&quot;,\n      &quot;popularity&quot;: 24,\n      &quot;preview_url&quot;: &quot;https://p.scdn.co/mp3-preview/c7782dc6d7c0bb12159db4f90fba8388af034d60?cid=be22fd00039241bc96d161a63876b54c&quot;,\n      &quot;track_number&quot;: 2,\n      &quot;type&quot;: &quot;track&quot;,\n      &quot;uri&quot;: &quot;spotify:track:0islTY4Fw6lhYbfqi8Qtdj&quot;\n    },\n    {\n      &quot;album&quot;: {\n        &quot;album_type&quot;: &quot;album&quot;,\n        &quot;artists&quot;: [{\n            &quot;external_urls&quot;: {\n              &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe&quot;\n            },\n            &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe&quot;,\n            &quot;id&quot;: &quot;7wyRA7deGRxozTyBc6QXPe&quot;,\n            &quot;name&quot;: &quot;Stephen Malkmus &amp; The Jicks&quot;,\n            &quot;type&quot;: &quot;artist&quot;,\n            &quot;uri&quot;: &quot;spotify:artist:7wyRA7deGRxozTyBc6QXPe&quot;\n          },\n          {\n            &quot;external_urls&quot;: {\n              &quot;spotify&quot;: &quot;https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8&quot;\n            },\n            &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8&quot;,\n            &quot;id&quot;: &quot;0WISkx0PwT6lYWdPqKUJY8&quot;,\n            &quot;name&quot;: &quot;Stephen Malkmus&quot;,\n            &quot;type&quot;: &quot;artist&quot;,\n            &quot;uri&quot;: &quot;spotify:artist:0WISkx0PwT6lYWdPqKUJY8&quot;\n          },\n          {\n            &quot;external_urls&quot;: {\n              &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7&quot;\n            },\n            &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7&quot;,\n            &quot;id&quot;: &quot;7uStwCeP54Za8gXUFCf5L7&quot;,\n            &quot;name&quot;: &quot;The Jicks&quot;,\n            &quot;type&quot;: &quot;artist&quot;,\n            &quot;uri&quot;: &quot;spotify:artist:7uStwCeP54Za8gXUFCf5L7&quot;\n          }\n        ],\n        &quot;available_markets&quot;: [&quot;AR&quot;,\n          &quot;BO&quot;,\n          &quot;BR&quot;,\n          &quot;CA&quot;,\n          &quot;CL&quot;,\n          &quot;CO&quot;,\n          &quot;CR&quot;,\n          &quot;EC&quot;,\n          &quot;GT&quot;,\n          &quot;HK&quot;,\n          &quot;HN&quot;,\n          &quot;ID&quot;,\n          &quot;MX&quot;,\n          &quot;MY&quot;,\n          &quot;NI&quot;,\n          &quot;PA&quot;,\n          &quot;PE&quot;,\n          &quot;PH&quot;,\n          &quot;PY&quot;,\n          &quot;SG&quot;,\n          &quot;SV&quot;,\n          &quot;TH&quot;,\n          &quot;TW&quot;,\n          &quot;US&quot;,\n          &quot;UY&quot;,\n          &quot;VN&quot;\n        ],\n        &quot;external_urls&quot;: {\n          &quot;spotify&quot;: &quot;https://open.spotify.com/album/6pWpb4IdPu9vp9mOdh5DjY&quot;\n        },\n        &quot;href&quot;: &quot;https://api.spotify.com/v1/albums/6pWpb4IdPu9vp9mOdh5DjY&quot;,\n        &quot;id&quot;: &quot;6pWpb4IdPu9vp9mOdh5DjY&quot;,\n        &quot;images&quot;: [{\n            &quot;height&quot;: 640,\n            &quot;url&quot;: &quot;https://i.scdn.co/image/918fdb6fdffccf2bd2dd1a1a93136000f8cf9bd3&quot;,\n            &quot;width&quot;: 640\n          },\n          {\n            &quot;height&quot;: 300,\n            &quot;url&quot;: &quot;https://i.scdn.co/image/fb39290ebca6fac424d4a40611a7e0d1146c5f88&quot;,\n            &quot;width&quot;: 300\n          },\n          {\n            &quot;height&quot;: 64,\n            &quot;url&quot;: &quot;https://i.scdn.co/image/873da4a0a21acd96e4a0036c9ecd0580b62652d4&quot;,\n            &quot;width&quot;: 64\n          }\n        ],\n        &quot;name&quot;: &quot;Real Emotional Trash&quot;,\n        &quot;release_date&quot;: &quot;2008-03-04&quot;,\n        &quot;release_date_precision&quot;: &quot;day&quot;,\n        &quot;type&quot;: &quot;album&quot;,\n        &quot;uri&quot;: &quot;spotify:album:6pWpb4IdPu9vp9mOdh5DjY&quot;\n      },\n      &quot;artists&quot;: [{\n          &quot;external_urls&quot;: {\n            &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe&quot;\n          },\n          &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe&quot;,\n          &quot;id&quot;: &quot;7wyRA7deGRxozTyBc6QXPe&quot;,\n          &quot;name&quot;: &quot;Stephen Malkmus &amp; The Jicks&quot;,\n          &quot;type&quot;: &quot;artist&quot;,\n          &quot;uri&quot;: &quot;spotify:artist:7wyRA7deGRxozTyBc6QXPe&quot;\n        },\n        {\n          &quot;external_urls&quot;: {\n            &quot;spotify&quot;: &quot;https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8&quot;\n          },\n          &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8&quot;,\n          &quot;id&quot;: &quot;0WISkx0PwT6lYWdPqKUJY8&quot;,\n          &quot;name&quot;: &quot;Stephen Malkmus&quot;,\n          &quot;type&quot;: &quot;artist&quot;,\n          &quot;uri&quot;: &quot;spotify:artist:0WISkx0PwT6lYWdPqKUJY8&quot;\n        },\n        {\n          &quot;external_urls&quot;: {\n            &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7&quot;\n          },\n          &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7&quot;,\n          &quot;id&quot;: &quot;7uStwCeP54Za8gXUFCf5L7&quot;,\n          &quot;name&quot;: &quot;The Jicks&quot;,\n          &quot;type&quot;: &quot;artist&quot;,\n          &quot;uri&quot;: &quot;spotify:artist:7uStwCeP54Za8gXUFCf5L7&quot;\n        }\n      ],\n      &quot;available_markets&quot;: [&quot;AR&quot;,\n        &quot;BO&quot;,\n        &quot;BR&quot;,\n        &quot;CA&quot;,\n        &quot;CL&quot;,\n        &quot;CO&quot;,\n        &quot;CR&quot;,\n        &quot;EC&quot;,\n        &quot;GT&quot;,\n        &quot;HK&quot;,\n        &quot;HN&quot;,\n        &quot;ID&quot;,\n        &quot;MX&quot;,\n        &quot;MY&quot;,\n        &quot;NI&quot;,\n        &quot;PA&quot;,\n        &quot;PE&quot;,\n        &quot;PH&quot;,\n        &quot;PY&quot;,\n        &quot;SG&quot;,\n        &quot;SV&quot;,\n        &quot;TH&quot;,\n        &quot;TW&quot;,\n        &quot;US&quot;,\n        &quot;UY&quot;,\n        &quot;VN&quot;\n      ],\n      &quot;disc_number&quot;: 1,\n      &quot;duration_ms&quot;: 308146,\n      &quot;explicit&quot;: False,\n      &quot;external_ids&quot;: {\n        &quot;isrc&quot;: &quot;USMTD0877201&quot;\n      },\n      &quot;external_urls&quot;: {\n        &quot;spotify&quot;: &quot;https://open.spotify.com/track/3jyFLbljUTKjE13nIWXchH&quot;\n      },\n      &quot;href&quot;: &quot;https://api.spotify.com/v1/tracks/3jyFLbljUTKjE13nIWXchH&quot;,\n      &quot;id&quot;: &quot;3jyFLbljUTKjE13nIWXchH&quot;,\n      &quot;is_local&quot;: False,\n      &quot;name&quot;: &quot;Dragonfly Pie&quot;,\n      &quot;popularity&quot;: 26,\n      &quot;preview_url&quot;: &quot;https://p.scdn.co/mp3-preview/50f419e7d3e8a6a771515068622250ab06d1cc86?cid=be22fd00039241bc96d161a63876b54c&quot;,\n      &quot;track_number&quot;: 1,\n      &quot;type&quot;: &quot;track&quot;,\n      &quot;uri&quot;: &quot;spotify:track:3jyFLbljUTKjE13nIWXchH&quot;\n    },\n    {\n      &quot;album&quot;: {\n        &quot;album_type&quot;: &quot;album&quot;,\n        &quot;artists&quot;: [{\n          &quot;external_urls&quot;: {\n            &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe&quot;\n          },\n          &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe&quot;,\n          &quot;id&quot;: &quot;7wyRA7deGRxozTyBc6QXPe&quot;,\n          &quot;name&quot;: &quot;Stephen Malkmus &amp; The Jicks&quot;,\n          &quot;type&quot;: &quot;artist&quot;,\n          &quot;uri&quot;: &quot;spotify:artist:7wyRA7deGRxozTyBc6QXPe&quot;\n        }],\n        &quot;available_markets&quot;: [&quot;AR&quot;,\n          &quot;AU&quot;,\n          &quot;BO&quot;,\n          &quot;BR&quot;,\n          &quot;CA&quot;,\n          &quot;CL&quot;,\n          &quot;CO&quot;,\n          &quot;CR&quot;,\n          &quot;DO&quot;,\n          &quot;EC&quot;,\n          &quot;GT&quot;,\n          &quot;HK&quot;,\n          &quot;HN&quot;,\n          &quot;ID&quot;,\n          &quot;JP&quot;,\n          &quot;MX&quot;,\n          &quot;MY&quot;,\n          &quot;NI&quot;,\n          &quot;NZ&quot;,\n          &quot;PA&quot;,\n          &quot;PE&quot;,\n          &quot;PH&quot;,\n          &quot;PY&quot;,\n          &quot;SG&quot;,\n          &quot;SV&quot;,\n          &quot;TH&quot;,\n          &quot;TW&quot;,\n          &quot;US&quot;,\n          &quot;UY&quot;,\n          &quot;VN&quot;,\n          &quot;ZA&quot;\n        ],\n        &quot;external_urls&quot;: {\n          &quot;spotify&quot;: &quot;https://open.spotify.com/album/5DMvSCwRqfNVlMB5LjHOwG&quot;\n        },\n        &quot;href&quot;: &quot;https://api.spotify.com/v1/albums/5DMvSCwRqfNVlMB5LjHOwG&quot;,\n        &quot;id&quot;: &quot;5DMvSCwRqfNVlMB5LjHOwG&quot;,\n        &quot;images&quot;: [{\n            &quot;height&quot;: 640,\n            &quot;url&quot;: &quot;https://i.scdn.co/image/bc96e20fa6b42c765db2fb904d3a70b6ef57b0bb&quot;,\n            &quot;width&quot;: 640\n          },\n          {\n            &quot;height&quot;: 300,\n            &quot;url&quot;: &quot;https://i.scdn.co/image/c7a31ed50b9c704ec066f4aac669cfb9013effb1&quot;,\n            &quot;width&quot;: 300\n          },\n          {\n            &quot;height&quot;: 64,\n            &quot;url&quot;: &quot;https://i.scdn.co/image/8551e108d0950dd62724ff2703e8c13ce7324114&quot;,\n            &quot;width&quot;: 64\n          }\n        ],\n        &quot;name&quot;: &quot;Sparkle Hard&quot;,\n        &quot;release_date&quot;: &quot;2018-05-18&quot;,\n        &quot;release_date_precision&quot;: &quot;day&quot;,\n        &quot;type&quot;: &quot;album&quot;,\n        &quot;uri&quot;: &quot;spotify:album:5DMvSCwRqfNVlMB5LjHOwG&quot;\n      },\n      &quot;artists&quot;: [{\n        &quot;external_urls&quot;: {\n          &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe&quot;\n        },\n        &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe&quot;,\n        &quot;id&quot;: &quot;7wyRA7deGRxozTyBc6QXPe&quot;,\n        &quot;name&quot;: &quot;Stephen Malkmus &amp; The Jicks&quot;,\n        &quot;type&quot;: &quot;artist&quot;,\n        &quot;uri&quot;: &quot;spotify:artist:7wyRA7deGRxozTyBc6QXPe&quot;\n      }],\n      &quot;available_markets&quot;: [&quot;AR&quot;,\n        &quot;AU&quot;,\n        &quot;BO&quot;,\n        &quot;BR&quot;,\n        &quot;CA&quot;,\n        &quot;CL&quot;,\n        &quot;CO&quot;,\n        &quot;CR&quot;,\n        &quot;DO&quot;,\n        &quot;EC&quot;,\n        &quot;GT&quot;,\n        &quot;HK&quot;,\n        &quot;HN&quot;,\n        &quot;ID&quot;,\n        &quot;JP&quot;,\n        &quot;MX&quot;,\n        &quot;MY&quot;,\n        &quot;NI&quot;,\n        &quot;NZ&quot;,\n        &quot;PA&quot;,\n        &quot;PE&quot;,\n        &quot;PH&quot;,\n        &quot;PY&quot;,\n        &quot;SG&quot;,\n        &quot;SV&quot;,\n        &quot;TH&quot;,\n        &quot;TW&quot;,\n        &quot;US&quot;,\n        &quot;UY&quot;,\n        &quot;VN&quot;,\n        &quot;ZA&quot;\n      ],\n      &quot;disc_number&quot;: 1,\n      &quot;duration_ms&quot;: 423275,\n      &quot;explicit&quot;: False,\n      &quot;external_ids&quot;: {\n        &quot;isrc&quot;: &quot;USMTD1710380&quot;\n      },\n      &quot;external_urls&quot;: {\n        &quot;spotify&quot;: &quot;https://open.spotify.com/track/6dNmC2YWtWbVOFOdTuRDQs&quot;\n      },\n      &quot;href&quot;: &quot;https://api.spotify.com/v1/tracks/6dNmC2YWtWbVOFOdTuRDQs&quot;,\n      &quot;id&quot;: &quot;6dNmC2YWtWbVOFOdTuRDQs&quot;,\n      &quot;is_local&quot;: False,\n      &quot;name&quot;: &quot;Difficulties - Let Them Eat Vowels&quot;,\n      &quot;popularity&quot;: 35,\n      &quot;preview_url&quot;: &quot;https://p.scdn.co/mp3-preview/787be9d1bbebcd845d0793476de843fa0a4fff79?cid=be22fd00039241bc96d161a63876b54c&quot;,\n      &quot;track_number&quot;: 11,\n      &quot;type&quot;: &quot;track&quot;,\n      &quot;uri&quot;: &quot;spotify:track:6dNmC2YWtWbVOFOdTuRDQs&quot;\n    }\n  ]\n}\n\n</code></pre>\n<pre><code class=\"language-python\">json_normalise(tracks_response)\n</code></pre>\n<h3 id=\"output--4\">Output:</h3><div class=\"tableshadow tableContainer\" data-simplebar=\"\">\n<table class=\"responsive-table\">\n<thead><tr class=\"tableizer-firstrow\"><th></th><th>album.album_type</th><th>album.artists</th><th>album.available_markets</th><th>album.external_urls.spotify</th><th>album.href</th><th>album.id</th><th>album.images</th><th>album.name</th><th>album.release_date</th><th>album.release_date_precision</th><th>...</th><th>external_urls.spotify</th><th>href</th><th>id</th><th>is_local</th><th>name</th><th>popularity</th><th>preview_url</th><th>track_number</th><th>type</th><th>uri</th></tr></thead><tbody>\n <tr><td>0</td><td>album</td><td>[{'external_urls': {'spotify': 'https://open.s...</td><td>[AR, BO, BR, CA, CL, CO, CR, EC, GT, HK, HN, I...</td><td>https://open.spotify.com/album/6pWpb4IdPu9vp9m...</td><td>https://api.spotify.com/v1/albums/6pWpb4IdPu9v...</td><td>6pWpb4IdPu9vp9mOdh5DjY</td><td>[{'height': 640, 'url': 'https://i.scdn.co/ima...</td><td>Real Emotional Trash</td><td>3/4/2008</td><td>day</td><td>...</td><td>https://open.spotify.com/track/0BDYBajZydY54OT...</td><td>https://api.spotify.com/v1/tracks/0BDYBajZydY5...</td><td>0BDYBajZydY54OTgQsH940</td><td>FALSE</td><td>Real Emotional Trash</td><td>21</td><td>https://p.scdn.co/mp3-preview/4fcbcd5a99fc7590...</td><td>4</td><td>track</td><td>spotify:track:0BDYBajZydY54OTgQsH940</td></tr>\n <tr><td>1</td><td>album</td><td>[{'external_urls': {'spotify': 'https://open.s...</td><td>[AR, BO, BR, CA, CL, CO, CR, EC, GT, HK, HN, I...</td><td>https://open.spotify.com/album/6pWpb4IdPu9vp9m...</td><td>https://api.spotify.com/v1/albums/6pWpb4IdPu9v...</td><td>6pWpb4IdPu9vp9mOdh5DjY</td><td>[{'height': 640, 'url': 'https://i.scdn.co/ima...</td><td>Real Emotional Trash</td><td>3/4/2008</td><td>day</td><td>...</td><td>https://open.spotify.com/track/7fdUqrzb8oCcIoK...</td><td>https://api.spotify.com/v1/tracks/7fdUqrzb8oCc...</td><td>7fdUqrzb8oCcIoKvFuzMrs</td><td>FALSE</td><td>Cold Son</td><td>25</td><td>https://p.scdn.co/mp3-preview/4cf4e21727def470...</td><td>3</td><td>track</td><td>spotify:track:7fdUqrzb8oCcIoKvFuzMrs</td></tr>\n <tr><td>2</td><td>album</td><td>[{'external_urls': {'spotify': 'https://open.s...</td><td>[AR, BO, BR, CA, CL, CO, CR, EC, GT, HK, HN, I...</td><td>https://open.spotify.com/album/6pWpb4IdPu9vp9m...</td><td>https://api.spotify.com/v1/albums/6pWpb4IdPu9v...</td><td>6pWpb4IdPu9vp9mOdh5DjY</td><td>[{'height': 640, 'url': 'https://i.scdn.co/ima...</td><td>Real Emotional Trash</td><td>3/4/2008</td><td>day</td><td>...</td><td>https://open.spotify.com/track/0islTY4Fw6lhYbf...</td><td>https://api.spotify.com/v1/tracks/0islTY4Fw6lh...</td><td>0islTY4Fw6lhYbfqi8Qtdj</td><td>FALSE</td><td>Hopscotch Willie</td><td>24</td><td>https://p.scdn.co/mp3-preview/c7782dc6d7c0bb12...</td><td>2</td><td>track</td><td>spotify:track:0islTY4Fw6lhYbfqi8Qtdj</td></tr>\n <tr><td>3</td><td>album</td><td>[{'external_urls': {'spotify': 'https://open.s...</td><td>[AR, BO, BR, CA, CL, CO, CR, EC, GT, HK, HN, I...</td><td>https://open.spotify.com/album/6pWpb4IdPu9vp9m...</td><td>https://api.spotify.com/v1/albums/6pWpb4IdPu9v...</td><td>6pWpb4IdPu9vp9mOdh5DjY</td><td>[{'height': 640, 'url': 'https://i.scdn.co/ima...</td><td>Real Emotional Trash</td><td>3/4/2008</td><td>day</td><td>...</td><td>https://open.spotify.com/track/3jyFLbljUTKjE13...</td><td>https://api.spotify.com/v1/tracks/3jyFLbljUTKj...</td><td>3jyFLbljUTKjE13nIWXchH</td><td>FALSE</td><td>Dragonfly Pie</td><td>26</td><td>https://p.scdn.co/mp3-preview/50f419e7d3e8a6a7...</td><td>1</td><td>track</td><td>spotify:track:3jyFLbljUTKjE13nIWXchH</td></tr>\n <tr><td>4</td><td>album</td><td>[{'external_urls': {'spotify': 'https://open.s...</td><td>[AR, AU, BO, BR, CA, CL, CO, CR, DO, EC, GT, H...</td><td>https://open.spotify.com/album/5DMvSCwRqfNVlMB...</td><td>https://api.spotify.com/v1/albums/5DMvSCwRqfNV...</td><td>5DMvSCwRqfNVlMB5LjHOwG</td><td>[{'height': 640, 'url': 'https://i.scdn.co/ima...</td><td>Sparkle Hard</td><td>5/18/2018</td><td>day</td><td>...</td><td>https://open.spotify.com/track/6dNmC2YWtWbVOFO...</td><td>https://api.spotify.com/v1/tracks/6dNmC2YWtWbV...</td><td>6dNmC2YWtWbVOFOdTuRDQs</td><td>FALSE</td><td>Difficulties - Let Them Eat Vowels</td><td>35</td><td>https://p.scdn.co/mp3-preview/787be9d1bbebcd84...</td><td>11</td><td>track</td><td>spotify:track:6dNmC2YWtWbVOFOdTuRDQs</td></tr>\n</tbody></table>\n</div><h2 id=\"separate-ways-worlds-apart-\">Separate Ways (Worlds Apart)</h2><p>By default, <code>json_normalize()</code> uses periods <code>.</code> to indicate nested levels of the JSON object (which is actually converted to a Python <code>dict</code> by Spotipy). In our case, the album id is found in <code>track['album']['id']</code>, hence the period between album and id in the DataFrame. This makes things slightly annoying if we want to grab a Series from our new DataFrame. In pandas, we can grab a Series from a DataFrame in many ways. To grab the <code>album.id</code> column, for example:</p><pre><code class=\"language-python\">tracks_df['album.id']\n</code></pre>\n<h3 id=\"output--5\">Output:</h3><pre><code class=\"language-python\">0    6pWpb4IdPu9vp9mOdh5DjY\n1    6pWpb4IdPu9vp9mOdh5DjY\n2    6pWpb4IdPu9vp9mOdh5DjY\n3    6pWpb4IdPu9vp9mOdh5DjY\n4    5DMvSCwRqfNVlMB5LjHOwG\nName: album.id, dtype: object\n</code></pre>\n<p>or</p><pre><code class=\"language-python\">tracks_df.loc[:,'album.id']\n\n</code></pre>\n<h3 id=\"output--6\">Output:</h3><pre><code class=\"language-python\">0    6pWpb4IdPu9vp9mOdh5DjY\n1    6pWpb4IdPu9vp9mOdh5DjY\n2    6pWpb4IdPu9vp9mOdh5DjY\n3    6pWpb4IdPu9vp9mOdh5DjY\n4    5DMvSCwRqfNVlMB5LjHOwG\nName: album.id, dtype: object\n</code></pre>\n<p>pandas also allows us to use dot notation (i.e. <code>dataframe.column_name</code>) to grab a column as a Series, but only if our column name doesn't include a period already. Since <code>json_normalize()</code> uses a period as a separator by default, this ruins that method. Never fear though – overriding this behavior is as simple as overriding the default argument in the function call:</p><pre><code class=\"language-python\">tracks_df = json_normalize(tracks_response['tracks'],sep=&quot;_&quot;)\ntracks_df\n</code></pre>\n<h3 id=\"output--7\">Output:</h3><div class=\"tableshadow tableContainer\" data-simplebar=\"\">\n<table class=\"responsive-table\">\n<thead><tr class=\"tableizer-firstrow\"><th></th><th>album_album_type</th><th>album_artists</th><th>album_available_markets</th><th>album_external_urls_spotify</th><th>album_href</th><th>album_id</th><th>album_images</th><th>album_name</th><th>album_release_date</th><th>album_release_date_precision</th><th>...</th><th>external_urls_spotify</th><th>href</th><th>id</th><th>is_local</th><th>name</th><th>popularity</th><th>preview_url</th><th>track_number</th><th>type</th><th>uri</th></tr></thead><tbody>\n <tr><td>0</td><td>album</td><td>[{'external_urls': {'spotify': 'https://open.s...</td><td>[AR, BO, BR, CA, CL, CO, CR, EC, GT, HK, HN, I...</td><td>https://open.spotify.com/album/6pWpb4IdPu9vp9m...</td><td>https://api.spotify.com/v1/albums/6pWpb4IdPu9v...</td><td>6pWpb4IdPu9vp9mOdh5DjY</td><td>[{'height': 640, 'url': 'https://i.scdn.co/ima...</td><td>Real Emotional Trash</td><td>3/4/2008</td><td>day</td><td>...</td><td>https://open.spotify.com/track/0BDYBajZydY54OT...</td><td>https://api.spotify.com/v1/tracks/0BDYBajZydY5...</td><td>0BDYBajZydY54OTgQsH940</td><td>FALSE</td><td>Real Emotional Trash</td><td>21</td><td>https://p.scdn.co/mp3-preview/4fcbcd5a99fc7590...</td><td>4</td><td>track</td><td>spotify:track:0BDYBajZydY54OTgQsH940</td></tr>\n <tr><td>1</td><td>album</td><td>[{'external_urls': {'spotify': 'https://open.s...</td><td>[AR, BO, BR, CA, CL, CO, CR, EC, GT, HK, HN, I...</td><td>https://open.spotify.com/album/6pWpb4IdPu9vp9m...</td><td>https://api.spotify.com/v1/albums/6pWpb4IdPu9v...</td><td>6pWpb4IdPu9vp9mOdh5DjY</td><td>[{'height': 640, 'url': 'https://i.scdn.co/ima...</td><td>Real Emotional Trash</td><td>3/4/2008</td><td>day</td><td>...</td><td>https://open.spotify.com/track/7fdUqrzb8oCcIoK...</td><td>https://api.spotify.com/v1/tracks/7fdUqrzb8oCc...</td><td>7fdUqrzb8oCcIoKvFuzMrs</td><td>FALSE</td><td>Cold Son</td><td>25</td><td>https://p.scdn.co/mp3-preview/4cf4e21727def470...</td><td>3</td><td>track</td><td>spotify:track:7fdUqrzb8oCcIoKvFuzMrs</td></tr>\n <tr><td>2</td><td>album</td><td>[{'external_urls': {'spotify': 'https://open.s...</td><td>[AR, BO, BR, CA, CL, CO, CR, EC, GT, HK, HN, I...</td><td>https://open.spotify.com/album/6pWpb4IdPu9vp9m...</td><td>https://api.spotify.com/v1/albums/6pWpb4IdPu9v...</td><td>6pWpb4IdPu9vp9mOdh5DjY</td><td>[{'height': 640, 'url': 'https://i.scdn.co/ima...</td><td>Real Emotional Trash</td><td>3/4/2008</td><td>day</td><td>...</td><td>https://open.spotify.com/track/0islTY4Fw6lhYbf...</td><td>https://api.spotify.com/v1/tracks/0islTY4Fw6lh...</td><td>0islTY4Fw6lhYbfqi8Qtdj</td><td>FALSE</td><td>Hopscotch Willie</td><td>24</td><td>https://p.scdn.co/mp3-preview/c7782dc6d7c0bb12...</td><td>2</td><td>track</td><td>spotify:track:0islTY4Fw6lhYbfqi8Qtdj</td></tr>\n <tr><td>3</td><td>album</td><td>[{'external_urls': {'spotify': 'https://open.s...</td><td>[AR, BO, BR, CA, CL, CO, CR, EC, GT, HK, HN, I...</td><td>https://open.spotify.com/album/6pWpb4IdPu9vp9m...</td><td>https://api.spotify.com/v1/albums/6pWpb4IdPu9v...</td><td>6pWpb4IdPu9vp9mOdh5DjY</td><td>[{'height': 640, 'url': 'https://i.scdn.co/ima...</td><td>Real Emotional Trash</td><td>3/4/2008</td><td>day</td><td>...</td><td>https://open.spotify.com/track/3jyFLbljUTKjE13...</td><td>https://api.spotify.com/v1/tracks/3jyFLbljUTKj...</td><td>3jyFLbljUTKjE13nIWXchH</td><td>FALSE</td><td>Dragonfly Pie</td><td>26</td><td>https://p.scdn.co/mp3-preview/50f419e7d3e8a6a7...</td><td>1</td><td>track</td><td>spotify:track:3jyFLbljUTKjE13nIWXchH</td></tr>\n <tr><td>4</td><td>album</td><td>[{'external_urls': {'spotify': 'https://open.s...</td><td>[AR, AU, BO, BR, CA, CL, CO, CR, DO, EC, GT, H...</td><td>https://open.spotify.com/album/5DMvSCwRqfNVlMB...</td><td>https://api.spotify.com/v1/albums/5DMvSCwRqfNV...</td><td>5DMvSCwRqfNVlMB5LjHOwG</td><td>[{'height': 640, 'url': 'https://i.scdn.co/ima...</td><td>Sparkle Hard</td><td>5/18/2018</td><td>day</td><td>...</td><td>https://open.spotify.com/track/6dNmC2YWtWbVOFO...</td><td>https://api.spotify.com/v1/tracks/6dNmC2YWtWbV...</td><td>6dNmC2YWtWbVOFOdTuRDQs</td><td>FALSE</td><td>Difficulties - Let Them Eat Vowels</td><td>35</td><td>https://p.scdn.co/mp3-preview/787be9d1bbebcd84...</td><td>11</td><td>track</td><td>spotify:track:6dNmC2YWtWbVOFOdTuRDQs</td></tr>\n</tbody></table>\n</div><p>Now we can go back to using dot notation to access a column as a Series. This saves us some typing every time we want to grab a column, and it looks a bit nicer (to me, at least). I say worth it.</p><pre><code class=\"language-python\">tracks_df.album_id\n</code></pre>\n<h3 id=\"output--8\">Output:</h3><pre><code class=\"language-shell\">0    6pWpb4IdPu9vp9mOdh5DjY\n1    6pWpb4IdPu9vp9mOdh5DjY\n2    6pWpb4IdPu9vp9mOdh5DjY\n3    6pWpb4IdPu9vp9mOdh5DjY\n4    5DMvSCwRqfNVlMB5LjHOwG\nName: album_id, dtype: object\n</code></pre>\n<h2 id=\"i-need-that-record\">I Need That Record</h2><p>By including more parameters when we use <code>json_normlize()</code>, we can really extract just the data that we want from our API response.</p><p>From our responses above, we can see that the <code>artist</code> property contains a list of artists that are associated with a track:</p><pre><code class=\"language-python\">tracks_response['tracks'][0]['artists']\n</code></pre>\n<h3 id=\"output--9\">Output:</h3><pre><code class=\"language-json\">[{\n    &quot;external_urls&quot;: {\n      &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7wyRA7deGRxozTyBc6QXPe&quot;\n    },\n    &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7wyRA7deGRxozTyBc6QXPe&quot;,\n    &quot;id&quot;: &quot;7wyRA7deGRxozTyBc6QXPe&quot;,\n    &quot;name&quot;: &quot;Stephen Malkmus &amp; The Jicks&quot;,\n    &quot;type&quot;: &quot;artist&quot;,\n    &quot;uri&quot;: &quot;spotify:artist:7wyRA7deGRxozTyBc6QXPe&quot;\n  },\n  {\n    &quot;external_urls&quot;: {\n      &quot;spotify&quot;: &quot;https://open.spotify.com/artist/0WISkx0PwT6lYWdPqKUJY8&quot;\n    },\n    &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/0WISkx0PwT6lYWdPqKUJY8&quot;,\n    &quot;id&quot;: &quot;0WISkx0PwT6lYWdPqKUJY8&quot;,\n    &quot;name&quot;: &quot;Stephen Malkmus&quot;,\n    &quot;type&quot;: &quot;artist&quot;,\n    &quot;uri&quot;: &quot;spotify:artist:0WISkx0PwT6lYWdPqKUJY8&quot;\n  },\n  {\n    &quot;external_urls&quot;: {\n      &quot;spotify&quot;: &quot;https://open.spotify.com/artist/7uStwCeP54Za8gXUFCf5L7&quot;\n    },\n    &quot;href&quot;: &quot;https://api.spotify.com/v1/artists/7uStwCeP54Za8gXUFCf5L7&quot;,\n    &quot;id&quot;: &quot;7uStwCeP54Za8gXUFCf5L7&quot;,\n    &quot;name&quot;: &quot;The Jicks&quot;,\n    &quot;type&quot;: &quot;artist&quot;,\n    &quot;uri&quot;: &quot;spotify:artist:7uStwCeP54Za8gXUFCf5L7&quot;\n  }\n]\n</code></pre>\n<p>Let's say I want to load this data into a database later. It would be nice to have a join table that maps each of the artists that are associated with each track. Luckily, this is possible with <code>json_normalize()</code>'s <code>record_path</code> and <code>meta</code> parameters.</p><p><code>record_path</code> tells <code>json_normalize()</code> what path of keys leads to each individual record in the JSON object. In our case, we want to grab every artist id, so our function call will look like:</p><pre><code class=\"language-python\">json_normalize(tracks_response['tracks'],record_path=['artists'],sep=&quot;_&quot;)\n</code></pre>\n<h3></h3><div class=\"tableshadow tableContainer\" data-simplebar=\"\">\n<table class=\"responsive-table\">\n<thead><tr class=\"tableizer-firstrow\"><th> </th><th>external_urls </th><th>href </th><th>id </th><th>name </th><th>type </th><th>uri</th></tr></thead><tbody>\n <tr><td>1 </td><td>{'spotify': 'https://open.spotify.com/artist/7... </td><td>https://api.spotify.com/v1/artists/7wyRA7deGRx... </td><td>7wyRA7deGRxozTyBc6QXPe </td><td>Stephen Malkmus & The Jicks </td><td>artist </td><td>spotify:artist:7wyRA7deGRxozTyBc6QXPe</td></tr>\n <tr><td>1 </td><td>{'spotify': 'https://open.spotify.com/artist/0... </td><td>https://api.spotify.com/v1/artists/0WISkx0PwT6... </td><td>0WISkx0PwT6lYWdPqKUJY8 </td><td>Stephen Malkmus </td><td>artist </td><td>spotify:artist:0WISkx0PwT6lYWdPqKUJY8</td></tr>\n <tr><td>2 </td><td>{'spotify': 'https://open.spotify.com/artist/7... </td><td>https://api.spotify.com/v1/artists/7uStwCeP54Z... </td><td>7uStwCeP54Za8gXUFCf5L7 </td><td>The Jicks </td><td>artist </td><td>spotify:artist:7uStwCeP54Za8gXUFCf5L7</td></tr>\n <tr><td>3 </td><td>{'spotify': 'https://open.spotify.com/artist/7... </td><td>https://api.spotify.com/v1/artists/7wyRA7deGRx... </td><td>7wyRA7deGRxozTyBc6QXPe </td><td>Stephen Malkmus & The Jicks </td><td>artist </td><td>spotify:artist:7wyRA7deGRxozTyBc6QXPe</td></tr>\n <tr><td>4 </td><td>{'spotify': 'https://open.spotify.com/artist/0... </td><td>https://api.spotify.com/v1/artists/0WISkx0PwT6... </td><td>0WISkx0PwT6lYWdPqKUJY8 </td><td>Stephen Malkmus </td><td>artist </td><td>spotify:artist:0WISkx0PwT6lYWdPqKUJY8</td></tr>\n <tr><td>5 </td><td>{'spotify': 'https://open.spotify.com/artist/7... </td><td>https://api.spotify.com/v1/artists/7uStwCeP54Z... </td><td>7uStwCeP54Za8gXUFCf5L7 </td><td>The Jicks </td><td>artist </td><td>spotify:artist:7uStwCeP54Za8gXUFCf5L7</td></tr>\n <tr><td>6 </td><td>{'spotify': 'https://open.spotify.com/artist/7... </td><td>https://api.spotify.com/v1/artists/7wyRA7deGRx... </td><td>7wyRA7deGRxozTyBc6QXPe </td><td>Stephen Malkmus & The Jicks </td><td>artist </td><td>spotify:artist:7wyRA7deGRxozTyBc6QXPe</td></tr>\n <tr><td>7 </td><td>{'spotify': 'https://open.spotify.com/artist/0... </td><td>https://api.spotify.com/v1/artists/0WISkx0PwT6... </td><td>0WISkx0PwT6lYWdPqKUJY8 </td><td>Stephen Malkmus </td><td>artist </td><td>spotify:artist:0WISkx0PwT6lYWdPqKUJY8</td></tr>\n <tr><td>8 </td><td>{'spotify': 'https://open.spotify.com/artist/7... </td><td>https://api.spotify.com/v1/artists/7uStwCeP54Z... </td><td>7uStwCeP54Za8gXUFCf5L7 </td><td>The Jicks </td><td>artist </td><td>spotify:artist:7uStwCeP54Za8gXUFCf5L7</td></tr>\n <tr><td>9 </td><td>{'spotify': 'https://open.spotify.com/artist/7... </td><td>https://api.spotify.com/v1/artists/7wyRA7deGRx... </td><td>7wyRA7deGRxozTyBc6QXPe </td><td>Stephen Malkmus & The Jicks </td><td>artist </td><td>spotify:artist:7wyRA7deGRxozTyBc6QXPe</td></tr>\n <tr><td>10 </td><td>{'spotify': 'https://open.spotify.com/artist/0... </td><td>https://api.spotify.com/v1/artists/0WISkx0PwT6... </td><td>0WISkx0PwT6lYWdPqKUJY8 </td><td>Stephen Malkmus </td><td>artist </td><td>spotify:artist:0WISkx0PwT6lYWdPqKUJY8</td></tr>\n <tr><td>11 </td><td>{'spotify': 'https://open.spotify.com/artist/7... </td><td>https://api.spotify.com/v1/artists/7uStwCeP54Z... </td><td>7uStwCeP54Za8gXUFCf5L7 </td><td>The Jicks </td><td>artist </td><td>spotify:artist:7uStwCeP54Za8gXUFCf5L7</td></tr>\n <tr><td>12 </td><td>{'spotify': 'https://open.spotify.com/artist/7... </td><td>https://api.spotify.com/v1/artists/7wyRA7deGRx... </td><td>7wyRA7deGRxozTyBc6QXPe </td><td>Stephen Malkmus & The Jicks </td><td>artist </td><td>spotify:artist:7wyRA7deGRxozTyBc6QXPe</td></tr>\n</tbody></table>\n</div><p>Cool – we're almost there. Now we want to use the <code>meta</code> parameter to specify what data we want to include from the rest of the JSON object. In our case, we want to keep the track id and map it to the artist id. If we look back at our API response, the name of the column that included the track is is called, appropriately, <code>id</code>, so our full function call should look like this:</p><pre><code class=\"language-python\">json_normalize(tracks_response['tracks'],record_path=['artists'],meta=['id'],sep=&quot;_&quot;)\n</code></pre>\n<h3 id=\"output--10\">Output:</h3><pre><code class=\"language-python\">-----------------------------------------\nValueError                             Traceback (most recent call last)\n\n    &lt;ipython-input-14-77e00a98c3c0&gt; in &lt;module&gt;()\n    ----&gt; 1 json_normalize(tracks_response['tracks'],record_path=['artists'],meta=['id'],sep=&quot;_&quot;)\n\n    ~/anaconda3/envs/music_data/lib/python3.6/site-packages/pandas/io/json/normalize.py in json_normalize(data, record_path, meta, meta_prefix, record_prefix, errors, sep)\n        268         if k in result:\n        269             raise ValueError('Conflicting metadata name {name}, '\n    --&gt; 270                              'need distinguishing prefix '.format(name=k))\n        271 \n        272         result[k] = np.array(v).repeat(lengths)\n    \nValueError: Conflicting metadata name id, need distinguishing prefix \n</code></pre>\n<p>Uh oh – an error! What's going on? Well, it turns out that both the album id and track id were given the key <code>id</code>. pandas doesn't like that, and it gives us a helpful error to tell us so: <code>ValueError: Conflicting metadata name id, need distinguishing prefix</code>.</p><p>There are two more parameters we can use to overcome this error: <code>record_prefix</code> and <code>meta_prefix</code>. These are strings we'll add to the beginning of our records and metadata to prevent these naming conflicts. Since we're dealing with Spotify artist ids for our records and Spotify track ids as the metadata, I'll use <code>sp_artist_</code> and <code>sp_track_</code> respectively. When that's done, I'll select only the columns that we're interested in.</p><pre><code class=\"language-python\">artist_and_track = json_normalize(\n    data=tracks_response['tracks'],\n    record_path='artists',\n    meta=['id'],\n    record_prefix='sp_artist_',\n    meta_prefix='sp_track_',\n    sep=&quot;_&quot;\n)\nartist_and_track = artist_and_track[['sp_track_id','sp_artist_id']]\nartist_and_track\n</code></pre>\n<h3 id=\"output--11\">Output:</h3><div class=\"tableshadow tableContainer\">\n<table>\n<thead><tr class=\"tableizer-firstrow\"><th></th><th>sp_track_id </th><th>sp_artist_id</th></tr></thead><tbody>\n <tr><td>0</td><td>0BDYBajZydY54OTgQsH940 </td><td>7wyRA7deGRxozTyBc6QXPe</td></tr>\n <tr><td>1</td><td>0BDYBajZydY54OTgQsH940 </td><td>0WISkx0PwT6lYWdPqKUJY8</td></tr>\n <tr><td>2</td><td>0BDYBajZydY54OTgQsH940 </td><td>7uStwCeP54Za8gXUFCf5L7</td></tr>\n <tr><td>3</td><td>7fdUqrzb8oCcIoKvFuzMrs </td><td>7wyRA7deGRxozTyBc6QXPe</td></tr>\n <tr><td>4</td><td>7fdUqrzb8oCcIoKvFuzMrs </td><td>0WISkx0PwT6lYWdPqKUJY8</td></tr>\n <tr><td>5</td><td>7fdUqrzb8oCcIoKvFuzMrs </td><td>7uStwCeP54Za8gXUFCf5L7</td></tr>\n <tr><td>6</td><td>0islTY4Fw6lhYbfqi8Qtdj </td><td>7wyRA7deGRxozTyBc6QXPe</td></tr>\n <tr><td>7</td><td>0islTY4Fw6lhYbfqi8Qtdj </td><td>0WISkx0PwT6lYWdPqKUJY8</td></tr>\n <tr><td>8</td><td>0islTY4Fw6lhYbfqi8Qtdj </td><td>7uStwCeP54Za8gXUFCf5L7</td></tr>\n <tr><td>9</td><td>3jyFLbljUTKjE13nIWXchH </td><td>7wyRA7deGRxozTyBc6QXPe</td></tr>\n <tr><td>10</td><td>3jyFLbljUTKjE13nIWXchH </td><td>0WISkx0PwT6lYWdPqKUJY8</td></tr>\n <tr><td>11</td><td>3jyFLbljUTKjE13nIWXchH </td><td>7uStwCeP54Za8gXUFCf5L7</td></tr>\n <tr><td>12</td><td>6dNmC2YWtWbVOFOdTuRDQs </td><td>7wyRA7deGRxozTyBc6QXPe</td></tr>\n</tbody></table>\n</div><h2 id=\"tl-dr\">TL;DR</h2><ul><li>Use <code>pd.io.json.json_normalize()</code> to automagically flatten a nested JSON object into a DataFrame</li><li>Make your life slightly easier when it comes to selecting columns by overriding the default <code>sep</code> parameter</li><li>Specify what data constitutes a record with the <code>record_path</code> parameter</li><li>Include data from outside of the record path with the <code>meta</code> parameter</li><li>Fix naming conflicts if they arise with the <code>record_prefix</code> and <code>meta_prefix</code> parameters</li></ul>","url":"https://hackersandslackers.com/json-into-pandas-dataframes/","uuid":"172cef40-4545-4c14-8488-a86a891ef47d","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b588eb363c4cc21a000cf51"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736ac","title":"Trash Pandas: Messy, Convenient DB Operations via Pandas","slug":"trash-pandas","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/07/racoon@2x.jpg","excerpt":"(And a way to clean it up with SQLAlchemy).","custom_excerpt":"(And a way to clean it up with SQLAlchemy).","created_at_pretty":"19 July, 2018","published_at_pretty":"23 July, 2018","updated_at_pretty":"17 November, 2018","created_at":"2018-07-18T20:26:25.000-04:00","published_at":"2018-07-23T08:30:00.000-04:00","updated_at":"2018-11-16T20:50:25.000-05:00","meta_title":"(And a way to clean it up with SQLAlchemy) | Hackers And Slackers","meta_description":"Python has an extremely handy little tool called f-strings that make string templating a snap!  ","og_description":"Trash Pandas: Messy, Convenient DB Operations via Pandas","og_image":"https://hackersandslackers.com/content/images/2018/07/racoon@2x.jpg","og_title":"Trash Pandas: Messy, Convenient DB Operations via Pandas","twitter_description":"(And a way to clean it up with SQLAlchemy)","twitter_image":"https://hackersandslackers.com/content/images/2018/07/racoon@2x.jpg","twitter_title":"Trash Pandas: Messy, Convenient DB Operations via Pandas","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Pandas","slug":"pandas","description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/pandasmerge.jpg","meta_description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","meta_title":"Pythons and Pandas | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Pandas","slug":"pandas","description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/pandasmerge.jpg","meta_description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","meta_title":"Pythons and Pandas | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Data Science","slug":"datascience","description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","feature_image":null,"meta_description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","meta_title":"Data Science | Hackers and Slackers","visibility":"public"},{"name":"#Data Analysis with Pandas","slug":"data-analysis-pandas","description":"Analyze data with Python's Pandas. Start from the basics or see real-life examples of using Pandas to solve problems.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/pandasseries-1.jpg","meta_description":"Analyze data with Python's Pandas. Start from the basics or see real-life examples of using Pandas to solve problems.","meta_title":"Data Analysis with Pandas","visibility":"internal"}],"plaintext":"Let's say you were continuing our task from last week\n[https://hackersandslackers.com/code-snippet-corner-a-dirty-way-of-cleaning-data-ft-pandas-sql/]\n: Taking a bunch of inconsistent Excel files and CSVs, and putting them into a\ndatabase.\n\nLet's say you've been given a new CSV that conflicts with some rows you've\nalready entered, and you're told that these rows are the correct values.\n\nWhy Not Use Pandas' Built-in Method?\nPandas' built-in to_sql  DataFrame method won't be useful here.  Remember, it\nwrites as a block - if you set the if_exists  flag to \"replace\", that'll make it\nreplace the entire DB table with a new one based on the DF you're uploading.\n And if you're doing this piecemeal, you presumably don't want that.\n\nLast week, we just made a new DataFrame out of each row and appended it to the\nDB table.  That won't work here - we need an Update.  Writing each update by\nhand would be annoying, though - luckily we can use code to generate more code!\n Python has an extremely handy little tool called f-strings  that make string\ntemplating a snap!\n\ndef updateStr(row):\n    return (f\"UPDATE books \"\n            f\"\"\"SET author = '{x.author}' \"\"\"\n            f\"\"\"WHERE id = {x.id};\"\"\")\n\n\nLet's walk through that.  It takes a row from a Dataframe - note that we're\nusing dot notation here instead of the bracket notation.  The reason we're doing\nthat is because, instead of using iterrows()  like last week, we'll be using \nitertuples  because the docstring for iterrows()  said I should.  One reason for\nthis is that iterrows()  gives a pandas Series, which will store everything as\nthe same datatype, which will be annoying in some cases.  I think it's supposed\nto be faster too?itertuples()  instead gives us Named Tuples, which is kind of\nlike a dictionary, except we have to use dot notation instead of square\nbrackets.\n\nSooo, we take a Named Tuple, and then the f-string goes to work.  It's mostly\njust a convenient way of formatting strings with variables - any code inside\ncurly parentheses will be evaluated.  They're convenient, flexible, and\nsupposedly pretty well-optimized!  Let's give it a spin.  Let's say we have a\nDataFrame df2  that only contains the rows to be updated...\n\ncnx = create_engine('mysql+pymysql://root:cracked1@localhost/appointments', echo=False)\nfor x in df2.itertuples(index=False):\n    print(updateStr(x))\nUPDATE books SET author = 'Abby' WHERE id = 3;\nUPDATE books SET author = 'Brian' WHERE id = 7;\nUPDATE books SET author = 'Celestine' WHERE id = 9;\n\n\nSweet!  Now let's actually execute it.  We'll be using the execute()  function\nin Pandas' io.sql  module.  I get the feeling I'm not supposed to, primarily\nbecause it doesn't have an entry in the official Pandas documentation, and I\nonly found it by poking around the module code.  But hey, it works!  (Warning\nfrom last time applies super-duper-extra-double this time!)\n\nfor x in df2.itertuples(index=False):\n    pd.io.sql.execute(updateStr(x), cnx)\n\n\nAnd now let's see if it worked...\n\npd.io.sql.read_sql_table(\"books\", cnx)\n   author copies  id\n     Abby      2   3\n    Brian          7\nCelestine      7   9`\n\n\nSweet!\n\nNow all that's well and good, but surely we're not the first person to try to\nmake SQL statements by calling Python functions!  How about a slightly less\nerror-prone way of doing this?\n\nSQLAlchemy\nI'll level with you - I've never actually used SQLAlchemy for anything but\nconnecting Pandas to databases before via the create_engine()  function.  But\nthat's why blogging's great - gives you an excuse to finally check out that\nthing you knew was gonna be useful!\n\nSQLAlchemy first needs some information about our table, then it'll let us\ncreate statements doing things to said table automagically.  We can either\ndefine it ourselves (maybe in a future post!) or read an existing table.  I\nfound the default way of doing this a little to\n\"has-a-couple-too-many-steps-and-function-args\"-y, so I packaged the version of\nthe command that worked into a little function.  I encourage you all to do the\nsame!\n\ndef loadTable(cnx, tableName):\n    meta = MetaData(bind=cnx) \n    return Table(tableName, meta, autoload=True, autoload_with=cnx)\n\n#Binding it to the Engine will make sure it uses the right SQL dialect\n\n\nThere we go!  Now, let's load our books  table...\n\nbooks = loadTable(cnx, \"books\")\n\n\nAnd here's the cool part!  Now that we have our table object, it has a bunch of\nbuilt-in methods for doing SQL things!  We can print an example...\n\nstr(books.update())\n'UPDATE books SET index=:index, author=:author, copies=:copies, id=:id'\n\n\nIf we call books.update, it'll do exactly that.  It also has a handy string\nrepresentation, for debugging and sanity checks.\n\nSQLAlchemy wants us to have a Connection  in addition to our Engine.  Well,\nalright then.\n\nconn = cnx.connect()\n\n\nFine, happy now?  Good.\n\nSQLAlchemy lets us build SQL statements by chain methods, which is fantastically\nuseful.  Less error-prone, easier to pass collections.  Our basic pattern would\nbe, based on iterating with itertuples...\n\nfor x in df2.itertuples(index=False):\n    stmt = (books\n          .update()\n          .where(books.c.id == x.id)\n          .values(author=x.author)\n         )\n    conn.execute(stmt)\n\n\nSuccess!","html":"<p>Let's say you were continuing our task from <em><a href=\"https://hackersandslackers.com/code-snippet-corner-a-dirty-way-of-cleaning-data-ft-pandas-sql/\">last week</a></em>: Taking a bunch of inconsistent Excel files and CSVs, and putting them into a database.</p><p>Let's say you've been given a new CSV that conflicts with some rows you've already entered, and you're told that these rows are the correct values.</p><h2 id=\"why-not-use-pandas-built-in-method\">Why Not Use Pandas' Built-in Method?</h2><p>Pandas' built-in <code>to_sql</code> DataFrame method won't be useful here.  Remember, it writes as a block - if you set the <code>if_exists</code> flag to <code>\"replace\"</code>, that'll make it replace the entire DB table with a new one based on the DF you're uploading.  And if you're doing this piecemeal, you presumably don't want that.</p><p>Last week, we just made a new DataFrame out of each row and appended it to the DB table.  That won't work here - we need an Update.  Writing each update by hand would be annoying, though - luckily we can use code to generate more code!  Python has an extremely handy little tool called <code>f-strings</code> that make string templating a snap!  </p><pre><code class=\"language-python\">def updateStr(row):\n    return (f&quot;UPDATE books &quot;\n            f&quot;&quot;&quot;SET author = '{x.author}' &quot;&quot;&quot;\n            f&quot;&quot;&quot;WHERE id = {x.id};&quot;&quot;&quot;)\n</code></pre>\n<p>Let's walk through that.  It takes a row from a Dataframe - note that we're using dot notation here instead of the bracket notation.  The reason we're doing that is because, instead of using <code>iterrows()</code> like last week, we'll be using <code>itertuples</code> because the docstring for <code>iterrows()</code> said I should.  One reason for this is that <code>iterrows()</code> gives a pandas Series, which will store everything as the same datatype, which will be annoying in some cases.  I think it's supposed to be faster too?  <code>itertuples()</code> instead gives us Named Tuples, which is kind of like a dictionary, except we have to use dot notation instead of square brackets.  </p><p>Sooo, we take a Named Tuple, and then the f-string goes to work.  It's mostly just a convenient way of formatting strings with variables - any code inside curly parentheses will be evaluated.  They're convenient, flexible, and supposedly pretty well-optimized!  Let's give it a spin.  Let's say we have a DataFrame <code>df2</code> that only contains the rows to be updated...</p><pre><code class=\"language-python\">cnx = create_engine('mysql+pymysql://root:cracked1@localhost/appointments', echo=False)\nfor x in df2.itertuples(index=False):\n    print(updateStr(x))\nUPDATE books SET author = 'Abby' WHERE id = 3;\nUPDATE books SET author = 'Brian' WHERE id = 7;\nUPDATE books SET author = 'Celestine' WHERE id = 9;\n</code></pre>\n<p>Sweet!  Now let's actually execute it.  We'll be using the <code>execute()</code> function in Pandas' <code>io.sql</code> module.  I get the feeling I'm not supposed to, primarily because it doesn't have an entry in the official Pandas documentation, and I only found it by poking around the module code.  But hey, it works!  (Warning from last time applies super-duper-extra-double this time!)</p><pre><code class=\"language-python\">for x in df2.itertuples(index=False):\n    pd.io.sql.execute(updateStr(x), cnx)\n</code></pre>\n<p>And now let's see if it worked...</p><pre><code class=\"language-python\">pd.io.sql.read_sql_table(&quot;books&quot;, cnx)\n   author copies  id\n     Abby      2   3\n    Brian          7\nCelestine      7   9`\n</code></pre>\n<p>Sweet!</p><p>Now all that's well and good, but surely we're not the first person to try to make SQL statements by calling Python functions!  How about a slightly less error-prone way of doing this?</p><h1 id=\"sqlalchemy\">SQLAlchemy</h1><p>I'll level with you - I've never actually used SQLAlchemy for anything but connecting Pandas to databases before via the <code>create_engine()</code> function.  But that's why blogging's great - gives you an excuse to finally check out that thing you knew was gonna be useful!</p><p>SQLAlchemy first needs some information about our table, then it'll let us create statements doing things to said table automagically.  We can either define it ourselves (maybe in a future post!) or read an existing table.  I found the default way of doing this a little to \"has-a-couple-too-many-steps-and-function-args\"-y, so I packaged the version of the command that worked into a little function.  I encourage you all to do the same!</p><pre><code class=\"language-python\">def loadTable(cnx, tableName):\n    meta = MetaData(bind=cnx) \n    return Table(tableName, meta, autoload=True, autoload_with=cnx)\n\n#Binding it to the Engine will make sure it uses the right SQL dialect\n</code></pre>\n<p>There we go!  Now, let's load our <code>books</code> table...</p><pre><code class=\"language-python\">books = loadTable(cnx, &quot;books&quot;)\n</code></pre>\n<p>And here's the cool part!  Now that we have our table object, it has a bunch of built-in methods for doing SQL things!  We can print an example...</p><pre><code class=\"language-python\">str(books.update())\n'UPDATE books SET index=:index, author=:author, copies=:copies, id=:id'\n</code></pre>\n<p>If we call <code>books.update</code>, it'll do exactly that.  It also has a handy string representation, for debugging and sanity checks.</p><p>SQLAlchemy wants us to have a <code>Connection</code> in addition to our <code>Engine</code>.  Well, alright then.</p><pre><code class=\"language-python\">conn = cnx.connect()\n</code></pre>\n<p>Fine, happy now?  Good.</p><p>SQLAlchemy lets us build SQL statements by chain methods, which is fantastically useful.  Less error-prone, easier to pass collections.  Our basic pattern would be, based on iterating with <code>itertuples</code>...</p><pre><code class=\"language-python\">for x in df2.itertuples(index=False):\n    stmt = (books\n          .update()\n          .where(books.c.id == x.id)\n          .values(author=x.author)\n         )\n    conn.execute(stmt)\n</code></pre>\n<p>Success!</p>","url":"https://hackersandslackers.com/trash-pandas/","uuid":"8a789f92-fbde-48b5-8bdf-01206e340cc1","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b4fdab10dda8433e079043f"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736c2","title":"Serving Frontend Assets in Flask","slug":"serving-static-assets-in-flask","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/flaskstatic.jpg","excerpt":"When Python developers manage presentation layers.","custom_excerpt":"When Python developers manage presentation layers.","created_at_pretty":"23 July, 2018","published_at_pretty":"23 July, 2018","updated_at_pretty":"05 April, 2019","created_at":"2018-07-22T23:56:52.000-04:00","published_at":"2018-07-23T06:22:21.000-04:00","updated_at":"2019-04-04T22:10:24.000-04:00","meta_title":"Serving Frontend Assets in Flask | Hackers And Slackers","meta_description":"flask_static_compress is a library for compressing flask assets. It can be considered to be a Python equivalent to Gulp in the context of asset compression.","og_description":"flask_static_compress is a library for compressing flask assets. It can be considered to be a Python equivalent to Gulp in the context of asset compression.","og_image":"https://hackersandslackers.com/content/images/2019/03/flaskstatic.jpg","og_title":"Serving Frontend Assets in Flask","twitter_description":"flask_static_compress is a library for compressing flask assets. It can be considered to be a Python equivalent to Gulp in the context of asset compression.","twitter_image":"https://hackersandslackers.com/content/images/2019/03/flaskstatic.jpg","twitter_title":"Serving Frontend Assets in Flask","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},{"name":"Frontend","slug":"frontend","description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","feature_image":null,"meta_description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","meta_title":"Frontend Development | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"},{"name":"#Building Flask Apps","slug":"building-flask-apps","description":"Python’s fast-growing and flexible microframework. Can handle apps as simple as API endpoints, to monoliths remininiscent of Django.","feature_image":"https://hackersandslackers.com/content/images/2019/03/flask-gettingstarted.jpg","meta_description":"Python’s fastest growing, most flexible, and perhaps most Pythonic framework.","meta_title":"Building Flask Apps","visibility":"internal"}],"plaintext":"If you're familiar with Django (or Python to any extent), you've probably\naccepted the concept of what Python guys refer to as \"static assets.\" Let's take\na moment to consider this: at some point in Django's conception a design\ndecision was made: all JavaScript, CSS, or  any assets pertaining to the\npresentation layer  belong tucked away into an isolated corner of the framework.\nAlas, it was decreed: henceforward, only two types of code exist in the\nuniverse: Python, and not-Python. Anything that isn't Python is simply a\n\"static\" asset to be dealt with either locally or via a CDN somewhere. \n\nThe implied mindset is both somewhat absurd yet also unsurprising. It's easy to\nimagine a couple of backend nerds nonchalantly writing off frontend development\nas a concept  to be stuck in a single folder. You know, all those things which\nmake an app an app? Like, anything visible to a user? These are simply\nthings-to-be-dealt-with when the frontend guys are ready with their \"make it\npretty\" nonsense. Screw it, throw it all in the /static  folder. We accept this\ndistinction to this day with little thought. Flask has carried over the same\nterminology and concept of a \"static\" folder, so this amusing cultural relic is\nhere to stay.\n\nAnyhow, we're here today to help you serve those beautiful assets of yours, as\nstatic as they may be. We'll do so by exploring the top-two libraries available\nto us: Flask-Static-Compress, and Flask-Assets.\n\nApplication Structure For Flask Apps with Frontend\nBest practices aside, we'll start with the most straightforward project\nstructure for a Flask web app. Let's work with this structure:\n\nmyproject\n├─ /static\n│  └─ /js\n│  └─ /less\n│  └─ /img\n│  └─ /build\n├─ /templates\n└─ app.py\n\n\nAll the Python we need is going to sit in a plump little app.py  file. \n\nTemplates  hold the same concept as they do to equivalent frameworks such as\nExpress: this is where we contain pages, partials, and layouts.  Flask's default\n Jinja2  templating engine has personally served me well enough to never\ninvestigate an alternative.\n\n/Static is where we'll store the raw  source  files for things like preprocessed\nstylesheets and JavaScript. At runtime, these sources files will be compressed\nand stored elsewhere in a production setting, such as that nifty /build  folder\nwe created (or feel free to call it /dist, whatever, it's your party man). \n\nIt's best practice to serve these from a CDN at runtime, but whatever.\n\nIn contrast to NodeJS apps, things like images and fonts are stored in the\n/static folder as well. This distinguishes Python's concept of /static  from,\nsay, another framework's concept of /src: instead of being a folder of only\nsource code, we pretty much have a folder of all that shit which isn't Python. \nAnd we've come full circle.\n\nCreating The Flask App Object\nfrom flask import Flask, url_for, render_template, request, Response\n\napp = Flask(__name__, static_folder=\"static\", template_folder=\"templates\")\n\n\nWe initiate our app on line 4 with app = Flask().  We create our app with three\nparameters/attributes:\n\n * __name__: Now that I think about it, I've never actually considered what this\n   first parameter is doing. Just know that you need it,\n * static_folder: Specifies the name of the folder where static assets will be\n   served. This is based on where your app believes the root folder lives.\n   Because our app is a single directory, it knows that /static  is in the\n   current directory.\n * template_folder: Same as above, but contains Jinja2 templates, AKA the files\n   which become HTML.\n\nIt's important to reiterate that these folders default to being relative to the\ncurrent location of app.py.  If we want to change this behavior, we can pass \ninstance_path=/path/to/desired/dir/  to override this behavior.\n\nMethod 1: Flask-Static-Compress\nThere's more than one way to skin a cat, and there's certainly more than one\nlibrary or philosophy for serving pages and styles in Flask. \nflask_static_compress is one such library, which we'll include in app.py:  \n\nfrom flask import Flask, url_for, render_template, request, Response\nfrom flask_static_compress import FlaskStaticCompress\n\n\nflask_static_compress [https://github.com/alanhamlett/flask-static-compress]  is\na cool library for compressing and joining assets together. If you've ever used\nGulp, it achieves some of the common tasks Gulp might, but with a MUCH different\nphilosophy. Some key differences are:\n\n * The ability to served compressed assets individually, as opposed to one giant\n   site bundle.\n * Never needing to explicitly fun a build command to create files served at\n   runtime.\n\nBefore serving any assets, we'll need a landing page for our app. While still in\n app.py,  we need to set a route for anybody who visits our site:\n\nfrom flask import Flask, url_for, render_template, request, Response\nfrom flask_static_compress import FlaskStaticCompress\n\napp = Flask(__name__, static_folder=\"static\", template_folder=\"templates\")\n\n@app.route('/', methods=['GET'])\ndef home():\n    \"\"\"Landing page.\"\"\"\n    return render_template('/index.html', title=\"Lame Site\")\n\n\nOur route listens for traffic hitting \"/\" (our root directory) and kindly serves\nthem the page index.html  as you might expect. Because we set the value of \ntemplates_folder  just now, Flask knows to serve a file living in /\ntemplates/index.html. \n\nIf you need some pointers on creating basic templates in Flask in which to load\nyour frontend assets, I'd suggest taking a look back at the previous post.\n\nFrontend YOLO Swag\nBack to your project, make .less  file and a .js  file in the appropriate\nplaces:\n\nmyproject\n├─ /build\n├─ /static\n│  └─ js\n│  │  └─ main.js\n│  └─ less\n│  │  └─ style.js\n│  └─ img\n├─ /templates\n│  └─ layout.html\n│  └─ index.html\n└─ app.py\n\n\nUse these files to brand your site accordingly. Add some images, memes,\npropaganda, viruses, etc. Whatever your heart desires.\n\nBack in app.py  we need to finish configuring our library:\n\nfrom flask import Flask, url_for, render_template, request, Response\nfrom flask_static_compress import FlaskStaticCompress\n\napp = Flask(__name__)\napp.config['COMPRESSOR_DEBUG'] = app.config.get('DEBUG')\napp.config['COMPRESSOR_STATIC_PREFIX'] = 'static'\napp.config['COMPRESSOR_OUTPUT_DIR'] = 'build'\napp.static_folder = 'static'\ncompress = FlaskStaticCompress(app)\n\n\n@app.route('/', methods=['GET'])\ndef home():\n    \"\"\"Landing page.\"\"\"\n    return render_template('/index.html', title=\"Lame Site\")\n\n\nCongrats! the main part of your application is pretty much done, just note a few\nthings:\n\n * Notice this time we set our folder paths via app.config[]  as opposed to\n   inline, in the earlier example. This is simply a matter of preference.\n * compress = FlaskStaticCompress(app) initializes our library, so definitely do\n   that.\n * Fun tidbit: app.static_folder = 'static' is a snippet which can live within\n   any route to override  the default app settings for where your folders are\n   located. \n\nCompressed 2 deff\nLet's wrap this bad boy up. Back in layout.html, let's add those static files we\ncreated.\n\n<!doctype html>\n<html>\n<head>\n  <title>{% block title %}{% endblock %} - My Lame Site</title>\n  <!-- Meta Data -->\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, viewport-fit=cover\">\n    \n  <!-- CSS -->\n  {% compress 'css' %}\n     <link href=\"{{ url_for('static', filename='less/home.less') }}\" type=\"text/less\">\n  {% endcompress %}\n    \n  <!-- JS -->\n    {% compress 'js' %}\n      <script src=\"{{ url_for('static', filename='js/previews.js') }}\"></script>\n\t{% endcompress %}\n</head>\n<body>\n  {% block content %}{% endblock %}\n</body>\n</html>\n\n\nLet's analyze this real quick:\n\n{% compress 'css' %}\n   <link href=\"{{ url_for('static', filename='less/home.less') }}\" type=\"text/less\">\n{% endcompress %}\n\n\nAll files within the {% compress 'css' %}  block will be minified and joined\ninto a single file, and then moved to the build folder we specified earlier.\nIt's that easy- no jobs to run beforehand, etc.\n\nWhat might also catch your eye is how we define the path:\n\n{{ url_for('static', filename='less/home.less') }}\n\n\nThis is a Jinja path dynamically locating our source file from our specified\nstatic doc. Well, I'll be darned.\n\nMethod 2: Flask-Assets\nFlaskStaticCompress  is great, but Flask_assets\n[http://flask-assets.readthedocs.io/en/latest/]  might even be better. If you're\nfamiliar with Webpack, consider the philosophy behind bundling.  Creating \nbundles  of frontend assets makes sense when we can draw clear distinctions of\nalike-screens in our app: this way, users don't download the entirety of our\nassets for screens they might not visit upfront, while pre-loading assets for\npages they'll probably  visit.\n\nThe Flask-Assets  library goes hand-in-hand with the concept of Flask Blueprints\n. If you aren't familiar with Blueprints just yet, I encourage you to become\nfamiliar here [https://hackersandslackers.com/structuring-your-flask-app/].\n\nTo get started, we'll install the necessary libraries:\n\n$ pip3 install flask-assets lesscpy cssmin jsmin\n\n\nThis is working under the assumption that we're be writing styles in LESS. If\nyou prefer sass, libsass  can take the place of lesscpy.\n\nThe other two libraries, cssmin  and jsmin, are for minifying CSS and JS assets\nrespectively.\n\nLet's see how we pull this off:\n\n...\nfrom flask_assets import Environment, Bundle\n\n\n# Flask-Assets Configuration\nless_bundle = Bundle('src/less/*.less',\n                     filters='less,cssmin',\n                     output='dist/css/account.css',\n                     extra={'rel': 'stylesheet/less'})\njs_bundle = Bundle('src/js/*.js',\n                   filters='jsmin',\n                   output='dist/js/main.min.js')\nassets.register('less_all', less_bundle)\nassets.register('js_all', js_bundle)\nless_bundle.build()\njs_bundle.build()\n``\n\nNotice how we only import flask_assets of all the libraries we installed- this\nis intentional. The other libraries do not need to be imported anywhere.\n\nless_bundle  and js_bundle  represent groupings of LESS and JS files to be\nstitched into one single file. Any positional arguments to be passed in to \nBundle()  will be taken as paths of sources files to bundle: we can bundle as\nmany or as few files as we want (or in our case , just import *).\n\nThe filters  argument is where we tell our Bundle()  how to treat the files\nwe've passed. In the case of less_bundle, passing less,cssmin  indicates that\nthe incoming files will be LESS files, to be compiled into CSS files, and then\noutputted as minified CSS files. the output destination, of course, is handled\nby the argument output.\n\nFinal Thoughts\nThe great thing about Flask (and Python in general) is that you're provided the\nluxury to write code in a manner which you find enjoyable. Considering Flask is\na relatively young framework, we're in a bit of a golden age where there are\njust enough libraries to suit your tastes, but not enough to get lost in an NPM\nlevel hell.\n\nIn my completely biased and untrustworthy opinion, it's hard to imagine getting\ninvolved with a Framework in a sweeter spot than where Flask is right now.","html":"<p>If you're familiar with Django (or Python to any extent), you've probably accepted the concept of what Python guys refer to as \"static assets.\" Let's take a moment to consider this: at some point in Django's conception a design decision was made: all <em>JavaScript</em>, <em>CSS</em>, or<em> any assets pertaining to the presentation layer</em> belong tucked away into an isolated corner of the framework. Alas, it was decreed: henceforward, only two types of code exist in the universe: Python, and not-Python. Anything that isn't Python is simply a \"static\" asset to be dealt with either locally or via a CDN somewhere. </p><p>The implied mindset is both somewhat absurd yet also unsurprising. It's easy to imagine a couple of backend nerds nonchalantly writing off <em>frontend development as a concept</em> to be stuck in a single folder. You know, all those things which make an app an app? Like, anything visible to a user? These are simply things-to-be-dealt-with when the frontend guys are ready with their \"make it pretty\" nonsense. Screw it, throw it all in the <strong>/static</strong> folder. We accept this distinction to this day with little thought. Flask has carried over the same terminology and concept of a \"static\" folder, so this amusing cultural relic is here to stay.</p><p>Anyhow, we're here today to help you serve those beautiful assets of yours, as static as they may be. We'll do so by exploring the top-two libraries available to us: <strong>Flask-Static-Compress</strong>, and <strong>Flask-Assets</strong>.</p><h2 id=\"application-structure-for-flask-apps-with-frontend\">Application Structure For Flask Apps with Frontend</h2><p>Best practices aside, we'll start with the most straightforward project structure for a Flask web app. Let's work with this structure:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">myproject\n├─ /static\n│  └─ /js\n│  └─ /less\n│  └─ /img\n│  └─ /build\n├─ /templates\n└─ app.py\n</code></pre>\n<!--kg-card-end: markdown--><p>All the Python we need is going to sit in a plump little <strong>app.py</strong><em> </em>file. </p><p><strong>Templates</strong> hold the same concept as they do to equivalent frameworks such as Express: this is where we contain <em>pages</em>, <em>partials</em>, and <em>layouts.</em> Flask's default <strong>Jinja2</strong> templating engine has personally served me well enough to never investigate an alternative.</p><p><strong>/Static </strong>is where we'll store the <em>raw</em> <em>source</em> files for things like preprocessed stylesheets and JavaScript. At runtime, these sources files will be compressed and stored elsewhere in a production setting, such as that nifty <strong>/build</strong> folder we created (or feel free to call it <em>/dist</em>, whatever, it's your party man). </p><p>It's best practice to serve these from a CDN at runtime, but whatever.</p><p>In contrast to NodeJS apps, things like images and fonts are stored in the /static folder as well. This distinguishes Python's concept of /<em>static</em> from, say, another framework's concept of /<em>src: </em>instead of being a folder of only source code, we pretty much have a folder of <em>all that shit which isn't Python. </em>And we've come full circle.</p><h2 id=\"creating-the-flask-app-object\">Creating The Flask App Object</h2><!--kg-card-begin: markdown--><pre><code class=\"language-python\">from flask import Flask, url_for, render_template, request, Response\n\napp = Flask(__name__, static_folder=&quot;static&quot;, template_folder=&quot;templates&quot;)\n</code></pre>\n<!--kg-card-end: markdown--><p>We initiate our app on line 4 with <code>app = Flask()</code>.  We create our app with three parameters/attributes:</p><ul><li><code>__name__</code>: Now that I think about it, I've never actually considered what this first parameter is doing. Just know that you need it,</li><li><code>static_folder</code>: Specifies the name of the folder where static assets will be served. This is based on where your app believes the root folder lives. Because our app is a single directory, it knows that /<em>static</em> is in the current directory.</li><li><code>template_folder</code>: Same as above, but contains Jinja2 templates, AKA the files which become HTML.</li></ul><p>It's important to reiterate that these folders default to being <em>relative to the current location of </em><strong>app.py</strong><em>.</em> If we want to change this behavior, we can pass <code>instance_path=/path/to/desired/dir/</code> to override this behavior.</p><h2 id=\"method-1-flask-static-compress\">Method 1: Flask-Static-Compress</h2><p>There's more than one way to skin a cat, and there's certainly more than one library or philosophy for serving pages and styles in Flask. <strong>flask_static_compress </strong>is one such library, which we'll include in <strong>app.py</strong><em>:</em> </p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">from flask import Flask, url_for, render_template, request, Response\nfrom flask_static_compress import FlaskStaticCompress\n</code></pre>\n<!--kg-card-end: markdown--><p><strong><a href=\"https://github.com/alanhamlett/flask-static-compress\">flask_static_compress</a></strong> is a cool library for compressing and joining assets together. If you've ever used Gulp, it achieves some of the common tasks Gulp might, but with a MUCH different philosophy. Some key differences are:</p><ul><li>The ability to served compressed assets individually, as opposed to one giant site bundle.</li><li>Never needing to explicitly fun a build command to create files served at runtime.</li></ul><p>Before serving any assets, we'll need a landing page for our app. While still in <strong>app.py,</strong> we need to set a route for anybody who visits our site:</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">from flask import Flask, url_for, render_template, request, Response\nfrom flask_static_compress import FlaskStaticCompress\n\napp = Flask(__name__, static_folder=&quot;static&quot;, template_folder=&quot;templates&quot;)\n\n@app.route('/', methods=['GET'])\ndef home():\n    &quot;&quot;&quot;Landing page.&quot;&quot;&quot;\n    return render_template('/index.html', title=&quot;Lame Site&quot;)\n</code></pre>\n<!--kg-card-end: markdown--><p>Our route listens for traffic hitting \"/\" (our root directory) and kindly serves them the page <strong>index.html</strong> as you might expect. Because we set the value of <code>templates_folder</code> just now, Flask knows to serve a file living in /<strong>templates/index.html</strong>. </p><p>If you need some pointers on creating basic templates in Flask in which to load your frontend assets, I'd suggest taking a look back at the previous post.</p><h3 id=\"frontend-yolo-swag\">Frontend YOLO Swag</h3><p>Back to your project, make <strong>.less</strong> file and a <strong>.js</strong> file in the appropriate places:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">myproject\n├─ /build\n├─ /static\n│  └─ js\n│  │  └─ main.js\n│  └─ less\n│  │  └─ style.js\n│  └─ img\n├─ /templates\n│  └─ layout.html\n│  └─ index.html\n└─ app.py\n</code></pre>\n<!--kg-card-end: markdown--><p>Use these files to brand your site accordingly. Add some images, memes, propaganda, viruses, etc. Whatever your heart desires.</p><p>Back in <strong>app.py</strong><em> </em>we need to finish configuring our library:</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">from flask import Flask, url_for, render_template, request, Response\nfrom flask_static_compress import FlaskStaticCompress\n\napp = Flask(__name__)\napp.config['COMPRESSOR_DEBUG'] = app.config.get('DEBUG')\napp.config['COMPRESSOR_STATIC_PREFIX'] = 'static'\napp.config['COMPRESSOR_OUTPUT_DIR'] = 'build'\napp.static_folder = 'static'\ncompress = FlaskStaticCompress(app)\n\n\n@app.route('/', methods=['GET'])\ndef home():\n    &quot;&quot;&quot;Landing page.&quot;&quot;&quot;\n    return render_template('/index.html', title=&quot;Lame Site&quot;)\n</code></pre>\n<!--kg-card-end: markdown--><p>Congrats! the main part of your application is pretty much done, just note a few things:</p><ul><li>Notice this time we set our folder paths via <em><strong>app.config[]</strong></em> as opposed to inline, in the earlier example. This is simply a matter of preference.</li><li><strong>compress = FlaskStaticCompress(app) </strong>initializes our library, so definitely do that.</li><li>Fun tidbit: <strong>app.static_folder = 'static' </strong>is a snippet which can live within any route to <em>override</em> the default app settings for where your folders are located. </li></ul><h2 id=\"compressed-2-deff\">Compressed 2 deff</h2><p>Let's wrap this bad boy up. Back in layout.html, let's add those static files we created.</p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;{% block title %}{% endblock %} - My Lame Site&lt;/title&gt;\n  &lt;!-- Meta Data --&gt;\n  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\n  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, viewport-fit=cover&quot;&gt;\n    \n  &lt;!-- CSS --&gt;\n  {% compress 'css' %}\n     &lt;link href=&quot;{{ url_for('static', filename='less/home.less') }}&quot; type=&quot;text/less&quot;&gt;\n  {% endcompress %}\n    \n  &lt;!-- JS --&gt;\n    {% compress 'js' %}\n      &lt;script src=&quot;{{ url_for('static', filename='js/previews.js') }}&quot;&gt;&lt;/script&gt;\n\t{% endcompress %}\n&lt;/head&gt;\n&lt;body&gt;\n  {% block content %}{% endblock %}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<!--kg-card-end: markdown--><p>Let's analyze this real quick:</p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">{% compress 'css' %}\n   &lt;link href=&quot;{{ url_for('static', filename='less/home.less') }}&quot; type=&quot;text/less&quot;&gt;\n{% endcompress %}\n</code></pre>\n<!--kg-card-end: markdown--><p>All files within the <code>{% compress 'css' %}</code> block will be minified and joined into a single file, and then moved to the build folder we specified earlier. It's that easy- no jobs to run beforehand, etc.</p><p>What might also catch your eye is how we define the path:</p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">{{ url_for('static', filename='less/home.less') }}\n</code></pre>\n<!--kg-card-end: markdown--><p>This is a Jinja path dynamically locating our source file from our specified static doc. Well, I'll be darned.</p><h2 id=\"method-2-flask-assets\">Method 2: Flask-Assets</h2><p><strong>FlaskStaticCompress</strong> is great, but <strong><a href=\"http://flask-assets.readthedocs.io/en/latest/\">Flask_assets</a> </strong>might even be better. If you're familiar with Webpack, consider the philosophy behind <em>bundling.</em> Creating <em>bundles</em> of frontend assets makes sense when we can draw clear distinctions of alike-screens in our app: this way, users don't download the entirety of our assets for screens they might not visit upfront, while pre-loading assets for pages they'll <em>probably</em> visit.</p><p>The <strong>Flask-Assets</strong> library goes hand-in-hand with the concept of Flask <strong>Blueprints</strong>. If you aren't familiar with Blueprints just yet, I encourage you to become familiar <a href=\"https://hackersandslackers.com/structuring-your-flask-app/\">here</a>.</p><p>To get started, we'll install the necessary libraries:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">$ pip3 install flask-assets lesscpy cssmin jsmin\n</code></pre>\n<!--kg-card-end: markdown--><p>This is working under the assumption that we're be writing styles in LESS. If you prefer sass, <strong>libsass</strong> can take the place of <strong>lesscpy</strong>.</p><p>The other two libraries, <strong>cssmin</strong> and <strong>jsmin</strong>, are for minifying CSS and JS assets respectively.</p><p>Let's see how we pull this off:</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">...\nfrom flask_assets import Environment, Bundle\n\n\n# Flask-Assets Configuration\nless_bundle = Bundle('src/less/*.less',\n                     filters='less,cssmin',\n                     output='dist/css/account.css',\n                     extra={'rel': 'stylesheet/less'})\njs_bundle = Bundle('src/js/*.js',\n                   filters='jsmin',\n                   output='dist/js/main.min.js')\nassets.register('less_all', less_bundle)\nassets.register('js_all', js_bundle)\nless_bundle.build()\njs_bundle.build()\n``</code></pre>\n<!--kg-card-end: markdown--><p>Notice how we only import flask_assets of all the libraries we installed- this is intentional. The other libraries do not need to be imported anywhere.</p><p><strong>less_bundle</strong> and <strong>js_bundle</strong> represent groupings of LESS and JS files to be stitched into one single file. Any positional arguments to be passed in to <code>Bundle()</code> will be taken as paths of sources files to bundle: we can bundle as many or as few files as we want (or in our case , just import *).</p><p>The <strong>filters</strong> argument is where we tell our <code>Bundle()</code> how to treat the files we've passed. In the case of <strong>less_bundle, </strong>passing <code>less,cssmin</code> indicates that the incoming files will be LESS files, to be compiled into CSS files, and then outputted as minified CSS files. the output destination, of course, is handled by the argument <code>output</code>.</p><h2 id=\"final-thoughts\">Final Thoughts</h2><p>The great thing about Flask (and Python in general) is that you're provided the luxury to write code in a manner which you find enjoyable. Considering Flask is a relatively young framework, we're in a bit of a golden age where there are just enough libraries to suit your tastes, but not enough to get lost in an NPM level hell.</p><p>In my completely biased and untrustworthy opinion, it's hard to imagine getting involved with a Framework in a sweeter spot than where Flask is right now. </p>","url":"https://hackersandslackers.com/serving-static-assets-in-flask/","uuid":"d1c8d104-6392-411b-86d4-75326e8e0960","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b5552047c9c156d9440c0ae"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736a8","title":"Lynx Roundup, July 20th","slug":"lynx-roundup-july-20th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/73@2x.jpg","excerpt":"Kafka!  New brain cell!  Computers made of liquid!","custom_excerpt":"Kafka!  New brain cell!  Computers made of liquid!","created_at_pretty":"13 July, 2018","published_at_pretty":"20 July, 2018","updated_at_pretty":"25 July, 2018","created_at":"2018-07-13T04:34:04.000-04:00","published_at":"2018-07-20T07:00:00.000-04:00","updated_at":"2018-07-24T22:06:04.000-04:00","meta_title":"Lynx Roundup, July 20th | Hackers and Slackers","meta_description":"Kafka!  New brain cell!  Computers made of liquid!","og_description":"Kafka!  New brain cell!  Computers made of liquid!","og_image":"https://hackersandslackers.com/content/images/lynx/73@2x.jpg","og_title":"Lynx Roundup, July 20th","twitter_description":"Kafka!  New brain cell!  Computers made of liquid!","twitter_image":"https://hackersandslackers.com/content/images/lynx/73@2x.jpg","twitter_title":"Lynx Roundup, July 20th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Big Data","slug":"bigdata","description":"Work with unstructured data across file types and schemas. Tools such as data warehouses, Hadoop, Spark, BigQuery, etc.","feature_image":null,"meta_description":"Work with massive amounts of unstandardized data across file types and schemas. Includes working with data warehouses, Hadoop, Spark, BigQuery, etc.","meta_title":"Big Data | Hackers and Slackers","visibility":"public"},{"name":"Machine Learning","slug":"machine-learning","description":"The latest developments in machine learning tools and technology available to data scientists.","feature_image":null,"meta_description":"The latest developments in machine learning tools and technology available to data scientists.","meta_title":"Machine Learning | Hackers and Slackers","visibility":"public"},{"name":"Science News","slug":"science-news","description":"Breakthroughs in general science.","feature_image":null,"meta_description":"Breakthroughs in general science.","meta_title":"Science News | Hackers and Slackers","visibility":"public"},{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"http://www.admintome.com/blog/kafka-python-and-google-analytics/\n\n\n\nhttps://neurosciencenews.com/learning-neurons-9516/\n\n\n\nhttp://cs231n.github.io/understanding-cnn/\n\n\n\nhttps://code.fb.com/data-infrastructure/spiral-self-tuning-services-via-real-time-machine-learning/\n\n\n\nhttps://www.nist.gov/news-events/news/2018/06/nist-researchers-simulate-simple-logic-nanofluidic-computing","html":"<p></p><p><a href=\"http://www.admintome.com/blog/kafka-python-and-google-analytics/\">http://www.admintome.com/blog/kafka-python-and-google-analytics/</a></p><p></p><p><a href=\"https://neurosciencenews.com/learning-neurons-9516/\">https://neurosciencenews.com/learning-neurons-9516/</a></p><p></p><p><a href=\"http://cs231n.github.io/understanding-cnn/\">http://cs231n.github.io/understanding-cnn/</a></p><p></p><p><a href=\"https://code.fb.com/data-infrastructure/spiral-self-tuning-services-via-real-time-machine-learning/\">https://code.fb.com/data-infrastructure/spiral-self-tuning-services-via-real-time-machine-learning/</a></p><p></p><p><a href=\"https://www.nist.gov/news-events/news/2018/06/nist-researchers-simulate-simple-logic-nanofluidic-computing\">https://www.nist.gov/news-events/news/2018/06/nist-researchers-simulate-simple-logic-nanofluidic-computing</a></p>","url":"https://hackersandslackers.com/lynx-roundup-july-20th/","uuid":"556f0ff4-3929-47ac-87a7-fe061c056c38","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5b4863fcc6a9e951f8a6cc67"}},{"node":{"id":"Ghost__Post__5c5822200a214230dae40906","title":"Powerful Page Templates in Flask With Jinja","slug":"powerful-page-templates-in-flask-with-jinja","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/02/jinja@2x.jpg","excerpt":"Work with markup that writes itself using Flask's built-in Jinja library.","custom_excerpt":"Work with markup that writes itself using Flask's built-in Jinja library.","created_at_pretty":"04 February, 2019","published_at_pretty":"20 July, 2018","updated_at_pretty":"28 March, 2019","created_at":"2019-02-04T06:29:36.000-05:00","published_at":"2018-07-20T06:30:00.000-04:00","updated_at":"2019-03-28T05:18:50.000-04:00","meta_title":"Powerful Page Templates in Flask With Jinja | Hackers and Slackers","meta_description":"Work with markup that writes itself. Flask's built-in Jinja library allows you to create Python applications with smarter page templates.","og_description":"Work with markup that writes itself. Flask's built-in Jinja library allows you to create Python applications with smarter page templates.","og_image":"https://hackersandslackers.com/content/images/2019/02/jinja@2x.jpg","og_title":"Powerful Page Templates in Flask With Jinja","twitter_description":"Work with markup that writes itself. Flask's built-in Jinja library allows you to create Python applications with smarter page templates.","twitter_image":"https://hackersandslackers.com/content/images/2019/02/jinja@2x.jpg","twitter_title":"Powerful Page Templates in Flask With Jinja","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"},{"name":"#Building Flask Apps","slug":"building-flask-apps","description":"Python’s fast-growing and flexible microframework. Can handle apps as simple as API endpoints, to monoliths remininiscent of Django.","feature_image":"https://hackersandslackers.com/content/images/2019/03/flask-gettingstarted.jpg","meta_description":"Python’s fastest growing, most flexible, and perhaps most Pythonic framework.","meta_title":"Building Flask Apps","visibility":"internal"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"}],"plaintext":"So you want to build a web application in Python, eh? Hasn't anybody told you...\nPython is SLOW! Python is subject to CONTEXT SWITCHING! Oh, the HORROR!\n\nChances are most of these people aren't well-versed in Python at all. I enjoy\ncreating web applications in Flask more-so than I do in Node. Even if we were to\nput aside somehow the thousands of potentially malicious Javascript libraries\nneeded to stand up a simple app, or the decades of legacy knowledge needed to\ntolerate the JavaScript ecosystem without going insane: the simplicity of Flask\npaired and its libraries get the job done faster in most cases. Oh yeah, and you\ncan write backend logic in a language intended to do  so at the drop of a dime.\n\nOne of Flask's early surprises hits you when working with Jinja2. Jinja is\nFlask's default templating system, which processes templates into HTML markup to\nbe served to users at runtime. In addition to the inheritance and partial\ninclusion we've come to expect from templating systems, Jinja is particularly\nwell-equipped build pages out of raw data. You'll see what I mean.\n\nLayouts, Pages, and Partials\nLet's add three pages to our templates  folder, which is a directory typically\nreserved for template files. We'll add 3 files: layout.html, index.html, and \nnav.html.  Each of these templates represents one of three common template\n\"types\" when building in Jinja. \n\nOh, and disregard the fact that these files retain an HTML file extension- they\nare oh, so much more than that.\n\nmyproject\n├─ /templates\n│  ├─ layout.html\n│  ├─ index.html\n│  └─ nav.html\n└─ app.py\n\n\nCreate a Simple Route to Get Started\nWe'll make a brief stop in app.py  to set up the most basic logic an app can\nhave: serving up a homepage:\n\nfrom flask import Flask, render_template\n\napp = Flask(__name__, template_folder=\"templates\")\n\n@app.route('/')\ndef home():\n    \"\"\"Landing page.\"\"\"\n    return render_template('/index.html', title=\"Lame Site\")\n\n\nNote how we specify template_folder=\"templates\"  when instantiating our app\nobject; this is critical to let Flask know where templates are going to be\nstored in the project directory. Be aware that this directory is almost always\nexplicitly set as /templates. If you store your templates anywhere else, you\nhave a mental health problem.\n\nThe Bread and Butter of Template Inheritance\nLayout.html  is going to be our base template. In other words, this barebones\nfile will represent elements which should be common to all  of our app's pages,\nsuch as metadata, analytics, etc. It is the 'page we load other pages into.'  \n\nIf you're familiar with Handlebars\n[https://hackersandslackers.com/handlebars-templating-in-expressjs/], Jinja's\ntemplating concepts are the same deal with slightly different syntax. Here's a\ndecent layout.html  example:\n\n<!-- layout.html -->\n<!doctype html>\n<html>\n<head>\n  <title>{{title}}</title>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, viewport-fit=cover\">\n    <!-- Google Analytics -->\n    <script>\n    window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;\n    ga('create', 'UA-XXXXX-Y', 'auto');\n    ga('send', 'pageview');\n    </script>\n    <script async src='https://www.google-analytics.com/analytics.js'></script>\n    <!-- End Google Analytics -->\n</head>\n<body>\n  {% include 'nav.html' %}\n  {% block content %}{% endblock %}\n  {% include 'footer.html' %}\n</body>\n</html>\n\n\nNote the bracketed values in our otherwise-HTML! Each of these represents a\nreservation of \"stuff to come.\" That \"stuff\" could come in the form of a\nvariable, a partial, or code from another template. \n\nWe've just utilized three templating concepts in the above example:\n\n * The double-bracket {{title}}  is reserved to be replaced with a variable\n   named 'title' when we serve this view in Flask. We pass variables to\n   templates when we render them in the 'routes' part of our app.\n * Includes such as {% include 'nav.html' %}  are saying \"load the entirety of a\n   separate HTML file named nav.html  into this spot right here.\" This is called\n   a partial. Partials are encapsulated, standalone components intended to be\n   frequently reused throughout our app.\n * Things get real interesting with blocks, as seen in {% block content %}{%\n   endblock %}. This statement is reserving a chunk  of our template to receive\n   a corresponding chunk  of another template when such a template is loaded\n   into layout.hml. Remember: layouts are just barebones commonalities between\n   pages. To build meaningful pages, we must combine the parts of unique pages\n   (such as index.html) with layouts to create full pages. \n\nLet's look at index.html:  the file we're about to shove into layout.html:\n\n<!-- index.html -->\n{% extends 'layout.html' %}\n\n{% block content %}\n<div class=\"container\">\n<h1>My Lame site</h1>\n    <p>Hello, and welcome to my lame site! I'm so glad you're here. I'm so lonely.</p>\n</div>\n{% endblock %}\n\n\nRemember in the route we created in app.py:  our function states \"load\nindex.html when users visit /.\" We never mention layout.html  at all. That is\nbecause by including {% extends 'layout.html' %}  in  index.html, we're  stating\nthat index.html  should extend  layout.html. index.html  is our unique snowflake\nof a page, and layout  is our boring skeleton.\n\nBack to talking about blocks:  templates can contain multiple \"blocks\" of code.\nEach named block (such as  {% block content %}) in a page such as index.html \nshould correspond to an empty block we reserved in layout.html. When we serve\nthe final page, it's like we're plugging plugs into their respective sockets. We\ncan reserve as many \"blocks\" in our layout as we want, and thus serve multiple\nblocks within the same template. \n\nTo help illustrate this, let's say you're building a horrible clickbait site\nwhere your requirements dictate that horrible, invasive ads should appear\nbetween pieces of content of every page of your site. If we keep that page\nstructure to layout.html, then we can retrofit our layout to have multiple slots\nfor incoming content from index.html:  both before  and after  the horrible\nmonstrosity of an idea I already regret imagining. If index.html  contained both\n {% block content1 %}...{% endblock %}  and {% block content2 %}...{% endblock\n%}, those blocks are now independent entities which can be loaded to their\nrespective slots.\n\nPassing Data to Templates\nWhen we passed title=\"Lame Site\"  to index.html in our route, we were passing a\nsimple variable to replace {{title}}. Check out this example of what we can do\nwhen we pass JSON objects to templates:\n\n<form action=\"/submitted\" method=post>\n  {% if error %}\n   <p class=error><strong>Error:</strong> {{ error }}</p>\n  {% endif %}\n  {% for field in request.fields.requestTypeFields %}\n     {% if field.name in ('Category', 'Product', 'Dashboard Name') %}\n          <select id=\"{{request.name}} {{field.name}}\" \n                  name=\"{{field.name}}\" \n                  label=\"{{field.name}}\" \n                  class=\"input-field\">\n           <option value=\"Choose your option\" \n                   disabled \n                   selected>\n               {{field.description}}\n            </option>\n            {% for option in field.validValues %}\n                <option value=\"{{option.value}}\">\n                    {{option.label}}\n                </option>\n                {% endfor %}\n            </select>\n            <label>{{field.name}}</label>\n       {% elif field.name == 'Description' %}\n            <label for=\"{{request.name}} {{field.name}}\">\n                {{field.name}}\n            </label>\n            <textarea id=\"{{field.name}}\" \n                      class=\"materialize-textarea input-field\" \n                      placeholder=\"{{field.description}}\" \n                      name=\"{{field.name}}\">\n             </textarea>\n         {% else %}\n         <label for=\"{{request.name}} {{field.name}}\">\n             {{field.name}}\n         </label>\n         <input placeholder=\"{{field.description}}\" \n                id=\"{{request.name}} {{field.name}}\" \n                type=\"text\" \n                class=\"input-field validate\" \n                name=\"{{field.name}}\">\n         {% endif %}\n    {% endfor %}\n    <input type=\"submit\" value=\"Submit\" class=\"btn cyan formsubmit\">\n</form>\n\n\nThose are for  loops and if  statements all working against a single JSON\nobject. This specific example demonstrates building a form based on a JSON\nobject; one we've happened to fetch from JIRA. Just by passing this JSON to a\nJinja template, we can recreate an entire enterprise system's form logic in a\nsimple template block.\n\nHere's another example. This one returns feedback to a user who presumably\nfilled out a form incorrectly, thus must be chastised with popup error messages:\n\n{% with messages = get_flashed_messages() %}\n  {% if messages %}\n    <ul class=flashes>\n    {% for message in messages %}\n      <li>{{ message }}</li>\n    {% endfor %}\n    </ul>\n  {% endif %}\n{% endwith %}\n\n\nSmall But Powerful\nTemplates are one small part of Flask, but they demonstrate a greater philosophy\ngenerally consistent throughout the framework: small libraries can do big\nthings. Sometimes it may take some courage to maneuver with the tools at hand\ncleverly, but the power of the Triforce is with you. You are Hyrule's last hope,\ngreat warrior... now you must make haste in your duties to build little apps. Or\nwhatever.","html":"<p>So you want to build a web application in Python, eh? Hasn't anybody told you... Python is <em>SLOW</em>! Python is subject to <em>CONTEXT SWITCHING</em>! Oh, the <em>HORROR</em>!</p><p>Chances are most of these people aren't well-versed in Python at all. I enjoy creating web applications in Flask more-so than I do in Node. Even if we were to put aside somehow the thousands of potentially malicious Javascript libraries needed to stand up a simple app, or the decades of legacy knowledge needed to tolerate the JavaScript ecosystem without going insane: the simplicity of Flask paired and its libraries get the job done faster in most cases. Oh yeah, and you can write backend logic in a language <em>intended to do</em> so at the drop of a dime.</p><p>One of Flask's early surprises hits you when working with <strong>Jinja2</strong>. Jinja is Flask's default templating system, which processes templates into HTML markup to be served to users at runtime. In addition to the inheritance and partial inclusion we've come to expect from templating systems, Jinja is particularly well-equipped build pages out of raw data. You'll see what I mean.</p><h2 id=\"layouts-pages-and-partials\">Layouts, Pages, and Partials</h2><p>Let's add three pages to our <em>templates</em> folder, which is a directory typically reserved for template files. We'll add 3 files: <strong>layout.html, index.html, </strong>and <strong>nav.html.</strong> Each of these templates represents one of three common template \"types\" when building in Jinja. </p><p>Oh, and disregard the fact that these files retain an HTML file extension- they are oh, so much more than that.</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">myproject\n├─ /templates\n│  ├─ layout.html\n│  ├─ index.html\n│  └─ nav.html\n└─ app.py\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"create-a-simple-route-to-get-started\">Create a Simple Route to Get Started</h2><p>We'll make a brief stop in <strong>app.py</strong> to set up the most basic logic an app can have: serving up a homepage:</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">from flask import Flask, render_template\n\napp = Flask(__name__, template_folder=&quot;templates&quot;)\n\n@app.route('/')\ndef home():\n    &quot;&quot;&quot;Landing page.&quot;&quot;&quot;\n    return render_template('/index.html', title=&quot;Lame Site&quot;)\n</code></pre>\n<!--kg-card-end: markdown--><p>Note how we specify <code>template_folder=\"templates\"</code> when instantiating our app object; this is critical to let Flask know where templates are going to be stored in the project directory. Be aware that this directory is almost always explicitly set as /<em>templates. </em>If you store your templates anywhere else, you have a mental health problem.</p><h2 id=\"the-bread-and-butter-of-template-inheritance\">The Bread and Butter of Template Inheritance</h2><p><strong>Layout.html</strong> is going to be our base template. In other words, this barebones file will represent elements which should be common to <em>all</em> of our app's pages, such as metadata, analytics, etc. It is the '<em>page we load other pages into.'</em> </p><p>If you're familiar with <a href=\"https://hackersandslackers.com/handlebars-templating-in-expressjs/\">Handlebars</a>, Jinja's templating concepts are the same deal with slightly different syntax. Here's a decent <strong>layout.html</strong> example:</p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">&lt;!-- layout.html --&gt;\n&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;{{title}}&lt;/title&gt;\n  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\n  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, viewport-fit=cover&quot;&gt;\n    &lt;!-- Google Analytics --&gt;\n    &lt;script&gt;\n    window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;\n    ga('create', 'UA-XXXXX-Y', 'auto');\n    ga('send', 'pageview');\n    &lt;/script&gt;\n    &lt;script async src='https://www.google-analytics.com/analytics.js'&gt;&lt;/script&gt;\n    &lt;!-- End Google Analytics --&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  {% include 'nav.html' %}\n  {% block content %}{% endblock %}\n  {% include 'footer.html' %}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<!--kg-card-end: markdown--><p>Note the bracketed values in our otherwise-HTML! Each of these represents a reservation of \"stuff to come.\" That \"stuff\" could come in the form of a variable, a partial, or code from another template. </p><p>We've just utilized three templating concepts in the above example:</p><ul><li>The double-bracket <code>{{title}}</code> is reserved to be replaced with a variable named 'title' when we serve this view in Flask. We pass variables to templates when we render them in the 'routes' part of our app.</li><li>Includes such as <code>{% include 'nav.html' %}</code> are saying \"load the entirety of a separate HTML file named <strong>nav.html</strong> into this spot right here.\" This is called a <em>partial</em>. Partials are encapsulated, standalone components intended to be frequently reused throughout our app.</li><li>Things get real interesting with <em>blocks</em>, as seen in <code>{% block content %}{% endblock %}</code>. This statement is reserving a <em>chunk</em> of our template to receive a <em>corresponding chunk</em> of another template when such a template is loaded into <strong>layout.hml</strong>. Remember: layouts are just barebones commonalities between pages. To build meaningful pages, we must combine the parts of unique pages (such as <strong>index.html</strong>) with layouts to create full pages. </li></ul><p>Let's look at <strong>index.html:</strong> the file we're about to shove into <strong>layout.html:</strong></p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">&lt;!-- index.html --&gt;\n{% extends 'layout.html' %}\n\n{% block content %}\n&lt;div class=&quot;container&quot;&gt;\n&lt;h1&gt;My Lame site&lt;/h1&gt;\n    &lt;p&gt;Hello, and welcome to my lame site! I'm so glad you're here. I'm so lonely.&lt;/p&gt;\n&lt;/div&gt;\n{% endblock %}\n</code></pre>\n<!--kg-card-end: markdown--><p>Remember in the route we created in <strong>app.py:</strong> our function states <em>\"load index.html when users visit /.\" </em>We never mention <strong>layout.html</strong> at all. That is because by including <code>{% extends 'layout.html' %}</code><strong> </strong>in<strong> index.html, </strong>we're<strong> </strong>stating that <strong>index.html</strong> should <em>extend</em> <strong>layout.html. index.html</strong> is our unique snowflake of a page, and <strong>layout</strong> is our boring skeleton.</p><p>Back to talking about blocks:  templates can contain multiple \"blocks\" of code. Each named block (such as<strong> </strong><code>{% block content %}</code>) in a page such as <strong>index.html</strong> should correspond to an empty block we reserved in <strong>layout.html</strong>. When we serve the final page, it's like we're plugging plugs into their respective sockets. We can reserve as many \"blocks\" in our layout as we want, and thus serve multiple blocks within the same template. </p><p>To help illustrate this, let's say you're building a horrible clickbait site where your requirements dictate that horrible, invasive ads should appear between pieces of content of every page of your site. If we keep that page structure to <strong>layout.html</strong>, then we can retrofit our layout to have multiple slots for incoming content from <strong>index.html:</strong> both <em>before</em> and <em>after</em> the horrible monstrosity of an idea I already regret imagining. If <strong>index.html</strong> contained both <code>{% block content1 %}...{% endblock %}</code> and <code>{% block content2 %}...{% endblock %}</code>, those blocks are now independent entities which can be loaded to their respective slots.</p><h2 id=\"passing-data-to-templates\">Passing Data to Templates</h2><p>When we passed <code>title=\"Lame Site\"</code> to <strong>index.html </strong>in our route, we were passing a simple variable to replace <code>{{title}}</code>. Check out this example of what we can do when we pass JSON objects to templates:</p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">&lt;form action=&quot;/submitted&quot; method=post&gt;\n  {% if error %}\n   &lt;p class=error&gt;&lt;strong&gt;Error:&lt;/strong&gt; {{ error }}&lt;/p&gt;\n  {% endif %}\n  {% for field in request.fields.requestTypeFields %}\n     {% if field.name in ('Category', 'Product', 'Dashboard Name') %}\n          &lt;select id=&quot;{{request.name}} {{field.name}}&quot; \n                  name=&quot;{{field.name}}&quot; \n                  label=&quot;{{field.name}}&quot; \n                  class=&quot;input-field&quot;&gt;\n           &lt;option value=&quot;Choose your option&quot; \n                   disabled \n                   selected&gt;\n               {{field.description}}\n            &lt;/option&gt;\n            {% for option in field.validValues %}\n                &lt;option value=&quot;{{option.value}}&quot;&gt;\n                    {{option.label}}\n                &lt;/option&gt;\n                {% endfor %}\n            &lt;/select&gt;\n            &lt;label&gt;{{field.name}}&lt;/label&gt;\n       {% elif field.name == 'Description' %}\n            &lt;label for=&quot;{{request.name}} {{field.name}}&quot;&gt;\n                {{field.name}}\n            &lt;/label&gt;\n            &lt;textarea id=&quot;{{field.name}}&quot; \n                      class=&quot;materialize-textarea input-field&quot; \n                      placeholder=&quot;{{field.description}}&quot; \n                      name=&quot;{{field.name}}&quot;&gt;\n             &lt;/textarea&gt;\n         {% else %}\n         &lt;label for=&quot;{{request.name}} {{field.name}}&quot;&gt;\n             {{field.name}}\n         &lt;/label&gt;\n         &lt;input placeholder=&quot;{{field.description}}&quot; \n                id=&quot;{{request.name}} {{field.name}}&quot; \n                type=&quot;text&quot; \n                class=&quot;input-field validate&quot; \n                name=&quot;{{field.name}}&quot;&gt;\n         {% endif %}\n    {% endfor %}\n    &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; class=&quot;btn cyan formsubmit&quot;&gt;\n&lt;/form&gt;\n</code></pre>\n<!--kg-card-end: markdown--><p>Those are <code>for</code> loops and <code>if</code> statements all working against a single JSON object. This specific example demonstrates building a form based on a JSON object; one we've happened to fetch from JIRA. Just by passing this JSON to a Jinja template, we can recreate an entire enterprise system's form logic in a simple template block.</p><p>Here's another example. This one returns feedback to a user who presumably filled out a form incorrectly, thus must be chastised with popup error messages:</p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">{% with messages = get_flashed_messages() %}\n  {% if messages %}\n    &lt;ul class=flashes&gt;\n    {% for message in messages %}\n      &lt;li&gt;{{ message }}&lt;/li&gt;\n    {% endfor %}\n    &lt;/ul&gt;\n  {% endif %}\n{% endwith %}\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"small-but-powerful\">Small But Powerful</h3><p>Templates are one small part of Flask, but they demonstrate a greater philosophy generally consistent throughout the framework: small libraries can do big things. Sometimes it may take some courage to maneuver with the tools at hand cleverly, but the power of the Triforce is with you. You are Hyrule's last hope, great warrior... now you must make haste in your duties to build little apps. Or whatever.</p>","url":"https://hackersandslackers.com/powerful-page-templates-in-flask-with-jinja/","uuid":"055ba6eb-f177-4b9d-b85e-2c7730850bf1","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c5822200a214230dae40906"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736a6","title":"Lynx Roundup, July 18th","slug":"lynx-roundup-july-18th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/02/147.jpg","excerpt":"Agile Data!  Medical Data!  Python string tricks! ","custom_excerpt":"Agile Data!  Medical Data!  Python string tricks! ","created_at_pretty":"13 July, 2018","published_at_pretty":"18 July, 2018","updated_at_pretty":"28 February, 2019","created_at":"2018-07-13T04:30:13.000-04:00","published_at":"2018-07-18T07:00:00.000-04:00","updated_at":"2019-02-28T02:27:37.000-05:00","meta_title":"Lynx Roundup, July 18th | Hackers and Slackers","meta_description":"Agile Data!  Medical Data!  Python string tricks! ","og_description":"Agile Data!  Medical Data!  Python string tricks! ","og_image":"https://hackersandslackers.com/content/images/2019/02/147.jpg","og_title":"Lynx Roundup, July 18th","twitter_description":"Agile Data!  Medical Data!  Python string tricks! ","twitter_image":"https://hackersandslackers.com/content/images/2019/02/147.jpg","twitter_title":"Lynx Roundup, July 18th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Data Science","slug":"datascience","description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","feature_image":null,"meta_description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","meta_title":"Data Science | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Data Science","slug":"datascience","description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","feature_image":null,"meta_description":"Watch as we attempt to maintain a delicate harmony of math, engineering, and intuition to solve larger-than-life problems.","meta_title":"Data Science | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.locallyoptimistic.com/post/agile-analytics-p1/\n\n\n\nhttps://realpython.com/python-string-formatting/\n\n\n\nhttps://eli.thegreenplace.net/2018/elegant-python-code-for-a-markov-chain-text-generator/\n\n\n\nhttps://css-tricks.com/prototyping-in-the-browser/\n\n\n\nhttps://medium.com/tensorflow/an-introduction-to-biomedical-image-analysis-with-tensorflow-and-dltk-2c25304e7c13","html":"<p></p><p><a href=\"https://www.locallyoptimistic.com/post/agile-analytics-p1/\">https://www.locallyoptimistic.com/post/agile-analytics-p1/</a></p><p></p><p><a href=\"https://realpython.com/python-string-formatting/\">https://realpython.com/python-string-formatting/</a></p><p></p><p><a href=\"https://eli.thegreenplace.net/2018/elegant-python-code-for-a-markov-chain-text-generator/\">https://eli.thegreenplace.net/2018/elegant-python-code-for-a-markov-chain-text-generator/</a></p><p></p><p><a href=\"https://css-tricks.com/prototyping-in-the-browser/\">https://css-tricks.com/prototyping-in-the-browser/</a></p><p></p><p><a href=\"https://medium.com/tensorflow/an-introduction-to-biomedical-image-analysis-with-tensorflow-and-dltk-2c25304e7c13\">https://medium.com/tensorflow/an-introduction-to-biomedical-image-analysis-with-tensorflow-and-dltk-2c25304e7c13</a></p>","url":"https://hackersandslackers.com/lynx-roundup-july-18th/","uuid":"864fbc9d-d98d-483f-8636-66ffe8ec9987","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b486315c6a9e951f8a6cc5f"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb86736a1","title":"A Dirty Way of Cleaning Data (ft. Pandas & SQL)","slug":"code-snippet-corner-a-dirty-way-of-cleaning-data-ft-pandas-sql","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/07/panderz@2x.jpg","excerpt":"Code Snippet Corner ft. Pandas & SQL","custom_excerpt":"Code Snippet Corner ft. Pandas & SQL","created_at_pretty":"12 July, 2018","published_at_pretty":"16 July, 2018","updated_at_pretty":"25 November, 2018","created_at":"2018-07-11T21:54:04.000-04:00","published_at":"2018-07-16T07:30:00.000-04:00","updated_at":"2018-11-25T12:50:00.000-05:00","meta_title":"Code Snippet Corner: A Dirty Way of Cleaning Data (ft. Pandas & SQL) | Hackers and Slackers","meta_description":"Code Snippet Corner ft. Pandas & SQL","og_description":"A Dirty Way of Cleaning Data (ft. Pandas & SQL)","og_image":"https://hackersandslackers.com/content/images/2018/07/panderz@2x.jpg","og_title":"A Dirty Way of Cleaning Data (ft. Pandas & SQL)","twitter_description":"Code Snippet Corner ft. Pandas & SQL","twitter_image":"https://hackersandslackers.com/content/images/2018/07/panderz@2x.jpg","twitter_title":"A Dirty Way of Cleaning Data (ft. Pandas & SQL)","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Pandas","slug":"pandas","description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/pandasmerge.jpg","meta_description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","meta_title":"Pythons and Pandas | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Pandas","slug":"pandas","description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/pandasmerge.jpg","meta_description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","meta_title":"Pythons and Pandas | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"SQL","slug":"sql","description":"Configure relational databases, brush up on your query language syntax, or find third-party services to interact with your data.","feature_image":"https://res-1.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/sql-tag.jpg","meta_description":"Configure relational databases, brush up on your query language syntax, or find third-party services to interact with your data.","meta_title":"Working with SQL | Hackers and Slackers","visibility":"public"},{"name":"#Code Snippet Corner","slug":"code-snippet-corner","description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o_o.jpg","meta_description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","meta_title":"Python Code Snippet Corner","visibility":"internal"}],"plaintext":"Warning  The following is FANTASTICALLY not-secure.  Do not put this in a script\nthat's going to be running unsupervised.  This is for interactive sessions where\nyou're prototyping the data cleaning methods that you're going to use, and/or\njust manually entering stuff.  Especially if there's any chance there could be\nsomething malicious hiding in the data to be uploaded.  We're going to be\nexecuting formatted strings of SQL unsanitized code.  Also, this will lead to\nLOTS of silent failures, which are arguably The Worst Thing - if guaranteed\ncorrectness is a requirement, leave this for the tinkering table.\n Alternatively, if it's a project where \"getting something in there is better\nthan nothing\", this can provide a lot of bang for your buck.  Actually, it's\npurely for entertainment purposes and not for human consumption.\n\nLet's say you were helping someone take a bunch of scattered Excel files and\nCSVs and input them all into a MySQL database.  This is a very iterative, trial\n& error process.  We certainly don't want to be re-entering a bunch of\nboilerplate.  Pandas to the rescue!  We can painlessly load those files into a\nDataFrame, then just export them to the db!\n\nWell, not so fast  First off, loading stuff into a DB is a task all its own -\nPandas and your RDBMS have different kinds of tolerance for mistakes, and differ\nin often-unpredictable ways.  For example, one time I was performing a task\nsimilar to the one described here (taking scattered files and loading them into\na DB) - I was speeding along nicely, but then ran into a speedbump: turns out\nPandas generally doesn't infer that a column is a date unless you tell it\nspecifically, and will generally parse dates as strings.  Now, this was fine\nwhen the dates were present - MySQL is pretty smart about accepting different\nforms of dates & times.  But one thing it doesn't like is accepting an empty\nstring ''  into a date or time column.  Not a huge deal, just had to cast the\ncolumn as a date:\n\ndf['date'] = pd.to_datetime(df['date'])\n\nNow the blank strings are NaT, which MySQL knows how to handle!\n\nThis was simple enough, but there's all kinds of little hiccups that can happen.\n And, unfortunately, writing a DataFrame to a DB table is an all-or-nothing\naffair - if there's one error, that means none of the rows will write.  Which\ncan get pretty annoying if you were trying to write a decent-sized DataFrame,\nespecially if the first error doesn't show up until one of the later rows.\n Waiting sucks.  And it's not just about being impatient - long waiting times\ncan disrupt your flow.\n\nRapid prototyping & highly-interactive development are some of Python's greatest\nstrengths, and they are great strengths indeed!  Paul Graham (one of the guys\nbehind Y Combinator) once made the comparison between REPL-heavy development and\nthe popularizing of oil paints (he was talking about LISP, but it's also quite\ntrue of Python, as Python took a lot of its cues from LISP):\n\nBefore oil paint became popular, painters used a medium, called tempera , that\ncannot be blended or over-painted. The cost of mistakes was high, and this\ntended to make painters conservative. Then came oil paint, and with it a great\nchange in style. Oil \"allows for second thoughts\". This proved a decisive\nadvantage in dealing with difficult subjects like the human figure.The new\nmedium did not just make painters' lives easier. It made possible a new and more\nambitious kind of painting. Janson writes:Without oil, the Flemish\nMasters'conquest of visible reality would have been much more limited. Thus,\nfrom a technical point of view, too, they deserve to be called the \"fathers of\nmodern painting\" , for oil has been the painter's basic medium ever since. As a\nmaterial, tempera is no lesss beautiful than oil. But the flexibility of oil\npaint gives greater scope to the imagination--that was the deciding factor.\nProgramming is now undergoing a similar change...Meanwhile, ideas borrowed from\nLisp increasingly turn up in the mainstream: interactive programming\nenvironments, garbage collection, and run-time typing  to name a few.More\npowerful tools are taking the risk out of exploration. That's good news for\nprogrammers, because it means that we will be able to undertake more ambitious\nprojects. The use of oil paint certainly had this effect. The period immediately\nfollowing its adoption was a golden age for painting. There are signs already\nthat something similar is happening in programming.\n(Emphasis mine)\nFrom here: http://www.cs.oswego.edu/~blue/xhx/books/ai/ns1/section02/main.htmlA\nlittle scenario to demonstrate:\n\nLet's pretend we have a MySQL instance running, and have already created a\ndatabase named items\n\nimport pymysql\nfrom sqlalchemy import create_engine\nimport sqlalchemy\nimport pandas as pd\n\ncnx = create_engine('mysql+pymysql://analyst:badsecuritykills@localhost:3306/items)\n\npd.io.sql.execute(\"\"\"CREATE TABLE books( \\\nid                               VARCHAR(40) PRIMARY KEY NOT NULL \\\n,author                          VARCHAR(255) \\\n,copies                          INT)\"\"\", cnx)\n\ndf = pd.DataFrame({\n    \"author\": [\"Alice\", \"Bob\", \"Charlie\"],\n    \"copies\": [2, \"\", 7, ],}, \n    index = [1, 2, 3])\n    #Notice that one of these has the wrong data type!\n    \ndf.to_sql(name='books',con=cnx,if_exists='append',index=False)\n#Yeah, I'm not listing this whole stacktrace.  Fantastic package with some extremely helpful Exceptions, but you've gotta scroll a whole bunch to find em.  Here's the important part:\nInternalError: (pymysql.err.InternalError) (1366, \"Incorrect integer value: '' for column 'copies' at row 1\") [SQL: 'INSERT INTO books (id, author, copies) VALUES (%(id)s, %(author)s, %(copies)s)'] [parameters: {'id': 2, 'author': 'Bob', 'copies': ''}] (Background on this error at: http://sqlalche.me/e/2j85)\n\n\nSoo, let's tighten this feedback loop, shall we?\n\nWe'll iterate through the DataFrame with the useful iterrows()  method.  This\ngives us essentially an enum  made from our DataFrame - we'll get a bunch of\ntuples giving us the index as the first element and the row as its own Pandas\nSeries as the second.\n\nfor x in df.iterrows():\n    try:\n        pd.DataFrame(x[1]).transpose().to_sql(name='books',\n                          con=cnx,\n                          if_exists='append',\n                         index_label='id')\n    except:\n        continue\n\n\nLet's unpack that a bit.\n\nRemember that we're getting a two-element tuple, with the good stuff in the\nsecond element, so\n\nx[1]\n\nNext, we convert the Series to a one-entry DataFrame, because the Series doesn't\nhave the DataFrame's to_sql()  method.\n\npd.DataFrame(x[1])\n\nThe default behavior will assume this is a single column with, each variable\nbeing the address of a different row.  MySQL isn't going to be having it.  Sooo,\nwe transpose!\n\npd.DataFrame(x[1]).transpose()\n\nAnd finally, we use our beloved to_sql  method on that.\n\nLet's check our table now!\n\npd.io.sql.read_sql_table(\"books\", cnx, index_col='id')\n  \tauthor\tcopies\nid\n1\tAlice\t2\n\n\nIt wrote the first row!  Not much of a difference with this toy example, but\nonce you were writing a few thousand rows and the error didn't pop up until the\n3000th, this would make a pretty noticeable difference in your ability to\nquickly experiment with different cleaning schemes.\n\nNote that this will still short-circuit as soon as we hit the error.  If we\nwanted to make sure we got all the valid input before working on our tough\ncases, we could make a little try/except  block.\n\n\n\n\nfor x in df.iterrows():\n    try:\n        pd.DataFrame(x[1]).transpose().to_sql(name='books',\n                          con=cnx,\n                          if_exists='append',\n                         index=False,)\n    except:\n        continue\n\n\nThis will try  to write each line, and if it encounters an Exception  it'll \ncontinue  the loop.\n\npd.io.sql.read_sql_table(\"books\", cnx, index_col='id')\n\tauthor\tcopies\nid\t\t\n1\tAlice\t2\n3\tCharlie\t7\n\n\nAlright, now the bulk of our data's in the db!  Whatever else happens, you've\ndone that much!  Now you can relax a bit, which is useful for stimulating the\ncreativity you'll need for the more complicated edge cases.\n\nSo, we're ready to start testing new cleaning schemes?  Well, not quite yet...\n\nLet's say we went and tried to think up a fix.  We go to test it out and...\n\n#Note that we want to see our exceptions here, so either do without the the try/except block\nfor x in df.iterrows():\n    pd.DataFrame(x[1]).transpose().to_sql(name='books',\n                              con=cnx,\n                              if_exists='append',\n                             index=False,\n                             )\n\n#OR have it print the exception\nfor x in df.iterrows():\n    try:\n        pd.DataFrame(x[1]).transpose().to_sql(name='books',\n                          con=cnx,\n                          if_exists='append',\n                         index_label='id')\n    except Exception as e:\n        print(e)\n        continue\n        \n#Either way, we get...\n(pymysql.err.IntegrityError) (1062, \"Duplicate entry '1' for key 'PRIMARY'\") [SQL: 'INSERT INTO books (id, author, copies) VALUES (%(id)s, %(author)s, %(copies)s)'] [parameters: {'id': 1, 'author': 'Alice', 'copies': 2}] (Background on this error at: http://sqlalche.me/e/gkpj)\n(pymysql.err.InternalError) (1366, \"Incorrect integer value: '' for column 'copies' at row 1\") [SQL: 'INSERT INTO books (id, author, copies) VALUES (%(id)s, %(author)s, %(copies)s)'] [parameters: {'id': 2, 'author': 'Bob', 'copies': ''}] (Background on this error at: http://sqlalche.me/e/2j85)\n(pymysql.err.IntegrityError) (1062, \"Duplicate entry '3' for key 'PRIMARY'\") [SQL: 'INSERT INTO books (id, author, copies) VALUES (%(id)s, %(author)s, %(copies)s)'] [parameters: {'id': 3, 'author': 'Charlie', 'copies': 7}] (Background on this error at: http://sqlalche.me/e/gkpj)            \n\n\nThe error we're interested is in there, but what's all this other nonsense\ncrowding it?\n\nWell, one of the handy things about a database is that it'll enforce uniqueness\nbased on the constraints you give it.  It's already got an entry with an id \nvalue of 1, so it's going to complain if you try to put another one.  In\naddition to providing a lot of distraction, this'll also slow us down\nconsiderably - after all, part of the point was to make our experiments with\ndata-cleaning go faster!\n\nLuckily, Pandas' wonderful logical indexing will make it a snap to ensure that\nwe only bother with entries that aren't in the database yet.\n\n#First, let's get the indices that are in there\nusedIDs = pd.read_sql_table(\"books\", cnx, columns=[\"id\"])[\"id\"].values\n\ndf[~df.index.isin(usedIDs)]\n    author\tcopies\n2\tBob\t\n#Remember how the logical indexing works: We want every element of the dataframe where the index ISN'T in our array of IDs that are already in the DB\n\n\nThis will also be shockingly quick - Pandas' logical indexing takes advantage of\nall that magic going on under the hood.  Using it, instead of manually\niteration, can literally bring you from waiting minutes to waiting seconds.\n\nBuuut, that's a lot of stuff to type!  We're going to be doing this A LOT, so\nhow about we just turn it into a function?\n\n#Ideally we'd make a much more modular version, but for this toy example we'll be messy and hardcode some paramaters\ndef filterDFNotInDB(df):\n    usedIDs = pd.read_sql_table(\"books\", cnx, columns=[\"id\"])[\"id\"].values\n    return df[~df.index.isin(usedIDs)]\n\n\nSo, next time we think we've made some progress on an edge case, we just call...\n\n#Going back to the to_sql method here - we don't want to have to loop through every single failing case, or get spammed with every variety of error message the thing can throw at us.\n\nfilterDFNotInDB(cleanedDF).to_sql(name='books',\n                          con=cnx,\n                          if_exists='append',\n                         index_label='id')\n\n\nActually, let's clean that up even more - the more keys we hit, the more\nopportunities to make a mistake!  The most bug-free code is the code you don't\nwrite.\n\ndef writeNewRows(df):\n    filterDFNotInDB(df).to_sql(name='books',\n                          con=cnx,\n                          if_exists='append',\n                         index_label='id')\n\n\nSo, finally, we can work on our new cleaning scheme, and whenever we think we're\ndone...\n\nwriteNewRows(cleanedDF)\n\nAnd boom!  Instant feedback!","html":"<p><strong>Warning</strong> The following is FANTASTICALLY not-secure.  Do not put this in a script that's going to be running unsupervised.  This is for interactive sessions where you're prototyping the data cleaning methods that you're going to use, and/or just manually entering stuff.  Especially if there's any chance there could be something malicious hiding in the data to be uploaded.  We're going to be executing formatted strings of SQL unsanitized code.  Also, this will lead to LOTS of silent failures, which are arguably The Worst Thing - if guaranteed correctness is a requirement, leave this for the tinkering table.  Alternatively, if it's a project where \"getting something in there is better than nothing\", this can provide a lot of bang for your buck.  Actually, it's purely for entertainment purposes and not for human consumption.</p><p>Let's say you were helping someone take a bunch of scattered Excel files and CSVs and input them all into a MySQL database.  This is a very iterative, trial &amp; error process.  We certainly don't want to be re-entering a bunch of boilerplate.  Pandas to the rescue!  We can painlessly load those files into a DataFrame, then just export them to the db!</p><p>Well, not so fast  First off, loading stuff into a DB is a task all its own - Pandas and your RDBMS have different kinds of tolerance for mistakes, and differ in often-unpredictable ways.  For example, one time I was performing a task similar to the one described here (taking scattered files and loading them into a DB) - I was speeding along nicely, but then ran into a speedbump: turns out Pandas generally doesn't infer that a column is a date unless you tell it specifically, and will generally parse dates as strings.  Now, this was fine when the dates were present - MySQL is pretty smart about accepting different forms of dates &amp; times.  But one thing it doesn't like is accepting an empty string <code>''</code> into a date or time column.  Not a huge deal, just had to cast the column as a date:</p><p><code>df['date'] = pd.to_datetime(df['date'])</code></p><p>Now the blank strings are <code>NaT</code>, which MySQL knows how to handle!</p><p>This was simple enough, but there's all kinds of little hiccups that can happen.  And, unfortunately, writing a DataFrame to a DB table is an all-or-nothing affair - if there's one error, that means none of the rows will write.  Which can get pretty annoying if you were trying to write a decent-sized DataFrame, especially if the first error doesn't show up until one of the later rows.  Waiting sucks.  And it's not just about being impatient - long waiting times can disrupt your flow.</p><p>Rapid prototyping &amp; highly-interactive development are some of Python's greatest strengths, and they are great strengths indeed!  Paul Graham (one of the guys behind Y Combinator) once made the comparison between REPL-heavy development and the popularizing of oil paints (he was talking about LISP, but it's also quite true of Python, as Python took a lot of its cues from LISP):</p><blockquote>Before oil paint became popular, painters used a medium, called tempera , that cannot be blended or over-painted. The cost of mistakes was high, and this tended to make painters conservative. Then came oil paint, and with it a great change in style. Oil \"allows for second thoughts\". This proved a decisive advantage in dealing with difficult subjects like the human figure.The new medium did not just make painters' lives easier. It made possible a new and more ambitious kind of painting. Janson writes:Without oil, the Flemish Masters'conquest of visible reality would have been much more limited. Thus, from a technical point of view, too, they deserve to be called the \"fathers of modern painting\" , for oil has been the painter's basic medium ever since. As a material, tempera is no lesss beautiful than oil. But the flexibility of oil paint gives greater scope to the imagination--that was the deciding factor.<br>Programming is now undergoing a similar change...Meanwhile, ideas borrowed from Lisp increasingly turn up in the mainstream: <strong>interactive programming environments, garbage collection, and run-time typing</strong> to name a few.More powerful tools are taking the risk out of exploration. That's good news for programmers, because it means that we will be able to undertake more ambitious projects. The use of oil paint certainly had this effect. The period immediately following its adoption was a golden age for painting. There are signs already that something similar is happening in programming.<br>(Emphasis mine)<br>From here: <a href=\"http://www.cs.oswego.edu/~blue/xhx/books/ai/ns1/section02/main.html\">http://www.cs.oswego.edu/~blue/xhx/books/ai/ns1/section02/main.html</a></blockquote><p>A little scenario to demonstrate:</p><p>Let's pretend we have a MySQL instance running, and have already created a database named <code>items</code></p><pre><code class=\"language-python\">import pymysql\nfrom sqlalchemy import create_engine\nimport sqlalchemy\nimport pandas as pd\n\ncnx = create_engine('mysql+pymysql://analyst:badsecuritykills@localhost:3306/items)\n\npd.io.sql.execute(&quot;&quot;&quot;CREATE TABLE books( \\\nid                               VARCHAR(40) PRIMARY KEY NOT NULL \\\n,author                          VARCHAR(255) \\\n,copies                          INT)&quot;&quot;&quot;, cnx)\n\ndf = pd.DataFrame({\n    &quot;author&quot;: [&quot;Alice&quot;, &quot;Bob&quot;, &quot;Charlie&quot;],\n    &quot;copies&quot;: [2, &quot;&quot;, 7, ],}, \n    index = [1, 2, 3])\n    #Notice that one of these has the wrong data type!\n    \ndf.to_sql(name='books',con=cnx,if_exists='append',index=False)\n#Yeah, I'm not listing this whole stacktrace.  Fantastic package with some extremely helpful Exceptions, but you've gotta scroll a whole bunch to find em.  Here's the important part:\nInternalError: (pymysql.err.InternalError) (1366, &quot;Incorrect integer value: '' for column 'copies' at row 1&quot;) [SQL: 'INSERT INTO books (id, author, copies) VALUES (%(id)s, %(author)s, %(copies)s)'] [parameters: {'id': 2, 'author': 'Bob', 'copies': ''}] (Background on this error at: http://sqlalche.me/e/2j85)\n</code></pre>\n<p>Soo, let's tighten this feedback loop, shall we?</p><p>We'll iterate through the DataFrame with the useful <code>iterrows()</code> method.  This gives us essentially an <code>enum</code> made from our DataFrame - we'll get a bunch of tuples giving us the index as the first element and the row as its own Pandas Series as the second.</p><pre><code class=\"language-python\">for x in df.iterrows():\n    try:\n        pd.DataFrame(x[1]).transpose().to_sql(name='books',\n                          con=cnx,\n                          if_exists='append',\n                         index_label='id')\n    except:\n        continue\n</code></pre>\n<p>Let's unpack that a bit.</p><p>Remember that we're getting a two-element tuple, with the good stuff in the second element, so</p><p><code>x[1]</code></p><p>Next, we convert the Series to a one-entry DataFrame, because the Series doesn't have the DataFrame's <code>to_sql()</code> method.</p><p><code>pd.DataFrame(x[1])</code></p><p>The default behavior will assume this is a single column with, each variable being the address of a different row.  MySQL isn't going to be having it.  Sooo, we transpose!</p><p><code>pd.DataFrame(x[1]).transpose()</code></p><p>And finally, we use our beloved <code>to_sql</code> method on that.</p><p>Let's check our table now!</p><pre><code class=\"language-python\">pd.io.sql.read_sql_table(&quot;books&quot;, cnx, index_col='id')\n  \tauthor\tcopies\nid\n1\tAlice\t2\n</code></pre>\n<p>It wrote the first row!  Not much of a difference with this toy example, but once you were writing a few thousand rows and the error didn't pop up until the 3000th, this would make a pretty noticeable difference in your ability to quickly experiment with different cleaning schemes.</p><p>Note that this will still short-circuit as soon as we hit the error.  If we wanted to make sure we got all the valid input before working on our tough cases, we could make a little <code>try/except</code> block.</p><pre><code class=\"language-python\">\n</code></pre>\n<pre><code>for x in df.iterrows():\n    try:\n        pd.DataFrame(x[1]).transpose().to_sql(name='books',\n                          con=cnx,\n                          if_exists='append',\n                         index=False,)\n    except:\n        continue\n</code></pre><p>This will <code>try</code> to write each line, and if it encounters an <code>Exception</code> it'll <code>continue</code> the loop.</p><pre><code class=\"language-python\">pd.io.sql.read_sql_table(&quot;books&quot;, cnx, index_col='id')\n\tauthor\tcopies\nid\t\t\n1\tAlice\t2\n3\tCharlie\t7\n</code></pre>\n<p>Alright, now the bulk of our data's in the db!  Whatever else happens, you've done that much!  Now you can relax a bit, which is useful for stimulating the creativity you'll need for the more complicated edge cases.</p><p>So, we're ready to start testing new cleaning schemes?  Well, not quite yet...</p><p>Let's say we went and tried to think up a fix.  We go to test it out and...</p><pre><code class=\"language-python\">#Note that we want to see our exceptions here, so either do without the the try/except block\nfor x in df.iterrows():\n    pd.DataFrame(x[1]).transpose().to_sql(name='books',\n                              con=cnx,\n                              if_exists='append',\n                             index=False,\n                             )\n\n#OR have it print the exception\nfor x in df.iterrows():\n    try:\n        pd.DataFrame(x[1]).transpose().to_sql(name='books',\n                          con=cnx,\n                          if_exists='append',\n                         index_label='id')\n    except Exception as e:\n        print(e)\n        continue\n        \n#Either way, we get...\n(pymysql.err.IntegrityError) (1062, &quot;Duplicate entry '1' for key 'PRIMARY'&quot;) [SQL: 'INSERT INTO books (id, author, copies) VALUES (%(id)s, %(author)s, %(copies)s)'] [parameters: {'id': 1, 'author': 'Alice', 'copies': 2}] (Background on this error at: http://sqlalche.me/e/gkpj)\n(pymysql.err.InternalError) (1366, &quot;Incorrect integer value: '' for column 'copies' at row 1&quot;) [SQL: 'INSERT INTO books (id, author, copies) VALUES (%(id)s, %(author)s, %(copies)s)'] [parameters: {'id': 2, 'author': 'Bob', 'copies': ''}] (Background on this error at: http://sqlalche.me/e/2j85)\n(pymysql.err.IntegrityError) (1062, &quot;Duplicate entry '3' for key 'PRIMARY'&quot;) [SQL: 'INSERT INTO books (id, author, copies) VALUES (%(id)s, %(author)s, %(copies)s)'] [parameters: {'id': 3, 'author': 'Charlie', 'copies': 7}] (Background on this error at: http://sqlalche.me/e/gkpj)            \n</code></pre>\n<p>The error we're interested is in there, but what's all this other nonsense crowding it?</p><p>Well, one of the handy things about a database is that it'll enforce uniqueness based on the constraints you give it.  It's already got an entry with an <code>id</code> value of 1, so it's going to complain if you try to put another one.  In addition to providing a lot of distraction, this'll also slow us down considerably - after all, part of the point was to make our experiments with data-cleaning go faster!</p><p>Luckily, Pandas' wonderful logical indexing will make it a snap to ensure that we only bother with entries that aren't in the database yet.</p><pre><code class=\"language-python\">#First, let's get the indices that are in there\nusedIDs = pd.read_sql_table(&quot;books&quot;, cnx, columns=[&quot;id&quot;])[&quot;id&quot;].values\n\ndf[~df.index.isin(usedIDs)]\n    author\tcopies\n2\tBob\t\n#Remember how the logical indexing works: We want every element of the dataframe where the index ISN'T in our array of IDs that are already in the DB\n</code></pre>\n<p>This will also be shockingly quick - Pandas' logical indexing takes advantage of all that magic going on under the hood.  Using it, instead of manually iteration, can literally bring you from waiting minutes to waiting seconds.</p><p>Buuut, that's a lot of stuff to type!  We're going to be doing this A LOT, so how about we just turn it into a function?</p><pre><code class=\"language-python\">#Ideally we'd make a much more modular version, but for this toy example we'll be messy and hardcode some paramaters\ndef filterDFNotInDB(df):\n    usedIDs = pd.read_sql_table(&quot;books&quot;, cnx, columns=[&quot;id&quot;])[&quot;id&quot;].values\n    return df[~df.index.isin(usedIDs)]\n</code></pre>\n<p>So, next time we think we've made some progress on an edge case, we just call...</p><pre><code class=\"language-python\">#Going back to the to_sql method here - we don't want to have to loop through every single failing case, or get spammed with every variety of error message the thing can throw at us.\n\nfilterDFNotInDB(cleanedDF).to_sql(name='books',\n                          con=cnx,\n                          if_exists='append',\n                         index_label='id')\n</code></pre>\n<p>Actually, let's clean that up even more - the more keys we hit, the more opportunities to make a mistake!  The most bug-free code is the code you don't write.</p><pre><code class=\"language-python\">def writeNewRows(df):\n    filterDFNotInDB(df).to_sql(name='books',\n                          con=cnx,\n                          if_exists='append',\n                         index_label='id')\n</code></pre>\n<p>So, finally, we can work on our new cleaning scheme, and whenever we think we're done...</p><p><code>writeNewRows(cleanedDF)</code></p><p>And boom!  Instant feedback!</p>","url":"https://hackersandslackers.com/code-snippet-corner-a-dirty-way-of-cleaning-data-ft-pandas-sql/","uuid":"9788b54d-ef44-4a35-9ec6-6a8678038480","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b46b4bcc6a9e951f8a6cc32"}}]}},"pageContext":{"slug":"python","limit":12,"skip":36,"numberOfPages":7,"humanPageNumber":4,"prevPageNumber":3,"nextPageNumber":5,"previousPagePath":"/tag/python/page/3/","nextPagePath":"/tag/python/page/5/"}}