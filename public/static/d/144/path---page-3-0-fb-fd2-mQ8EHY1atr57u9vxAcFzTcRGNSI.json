{"data":{"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5c80c351665ce4577adfaf72","title":"Lynx Roundup, March 17th","slug":"lynx-roundup-march-17th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/lynx25.jpg","excerpt":"Blameless postmortems!  Minimally sufficient Pandas!  Airbnb's knowledge graph!","custom_excerpt":"Blameless postmortems!  Minimally sufficient Pandas!  Airbnb's knowledge graph!","created_at_pretty":"07 March, 2019","published_at_pretty":"18 March, 2019","updated_at_pretty":"18 March, 2019","created_at":"2019-03-07T02:08:01.000-05:00","published_at":"2019-03-18T01:06:00.000-04:00","updated_at":"2019-03-18T01:06:48.000-04:00","meta_title":"Lynx Roundup, March 17th | Hackers and Slackers","meta_description":"Blameless postmortems!  Minimally sufficient Pandas!  Airbnb's knowledge graph!","og_description":"Blameless postmortems!  Minimally sufficient Pandas!  Airbnb's knowledge graph!","og_image":"https://hackersandslackers.com/content/images/2019/03/lynx25.jpg","og_title":"Lynx Roundup, March 17th","twitter_description":"Blameless postmortems!  Minimally sufficient Pandas!  Airbnb's knowledge graph!","twitter_image":"https://hackersandslackers.com/content/images/2019/03/lynx25.jpg","twitter_title":"Lynx Roundup, March 17th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"\n\nhttps://codeascraft.com/2012/05/22/blameless-postmortems/\n\nhttps://medium.com/dunder-data/minimally-sufficient-pandas-a8e67f2a2428\n\nhttps://www.axios.com/nsa-releases-cybersecurity-tool-open-source-3c94ebe4-8229-428d-876c-47a08e2c08e3.html\n\nhttps://stanford.edu/~jgrimmer/bd_2.pdf\n\nhttps://medium.com/airbnb-engineering/contextualizing-airbnb-by-building-knowledge-graph-b7077e268d5a\n\nhttps://www.wired.com/story/your-brain-is-memories/\n\nhttps://www.kdnuggets.com/2018/09/6-steps-write-machine-learning-algorithm.html","html":"<p></p><p><a href=\"https://codeascraft.com/2012/05/22/blameless-postmortems/\">https://codeascraft.com/2012/05/22/blameless-postmortems/</a></p><p><a href=\"https://medium.com/dunder-data/minimally-sufficient-pandas-a8e67f2a2428\">https://medium.com/dunder-data/minimally-sufficient-pandas-a8e67f2a2428</a></p><p><a href=\"https://www.axios.com/nsa-releases-cybersecurity-tool-open-source-3c94ebe4-8229-428d-876c-47a08e2c08e3.html\">https://www.axios.com/nsa-releases-cybersecurity-tool-open-source-3c94ebe4-8229-428d-876c-47a08e2c08e3.html</a></p><p><a href=\"https://stanford.edu/~jgrimmer/bd_2.pdf\">https://stanford.edu/~jgrimmer/bd_2.pdf</a></p><p><a href=\"https://medium.com/airbnb-engineering/contextualizing-airbnb-by-building-knowledge-graph-b7077e268d5a\">https://medium.com/airbnb-engineering/contextualizing-airbnb-by-building-knowledge-graph-b7077e268d5a</a></p><p><a href=\"https://www.wired.com/story/your-brain-is-memories/\">https://www.wired.com/story/your-brain-is-memories/</a></p><p><a href=\"https://www.kdnuggets.com/2018/09/6-steps-write-machine-learning-algorithm.html\">https://www.kdnuggets.com/2018/09/6-steps-write-machine-learning-algorithm.html</a></p>","url":"https://hackersandslackers.com/lynx-roundup-march-17th/","uuid":"250fb2c2-eca6-4774-b5ea-a2cf0c9195c5","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c80c351665ce4577adfaf72"}},{"node":{"id":"Ghost__Post__5c80c1e7665ce4577adfaf66","title":"Lynx Roundup, March 16th","slug":"lynx-roundup-march-16th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/150-1.jpg","excerpt":"Cognitive biases & heuristics!  Programming the Z3!  Organizing tech!  Mathematical models & microbes!","custom_excerpt":"Cognitive biases & heuristics!  Programming the Z3!  Organizing tech!  Mathematical models & microbes!","created_at_pretty":"07 March, 2019","published_at_pretty":"16 March, 2019","updated_at_pretty":"16 March, 2019","created_at":"2019-03-07T02:01:59.000-05:00","published_at":"2019-03-16T19:26:00.000-04:00","updated_at":"2019-03-16T19:26:33.000-04:00","meta_title":"Lynx Roundup, March 16th | Hackers and Slackers","meta_description":"Cognitive biases & heuristics!  Programming the Z3!  Organizing tech!  Mathematical models & microbes!","og_description":"Cognitive biases & heuristics!  Programming the Z3!  Organizing tech!  Mathematical models & microbes!","og_image":"https://hackersandslackers.com/content/images/2019/03/150-1.jpg","og_title":"Lynx Roundup, March 16th","twitter_description":"Cognitive biases & heuristics!  Programming the Z3!  Organizing tech!  Mathematical models & microbes!","twitter_image":"https://hackersandslackers.com/content/images/2019/03/150-1.jpg","twitter_title":"Lynx Roundup, March 16th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"\n\nhttp://nautil.us/issue/19/illusions/how-your-brain-decides-without-you\n\nhttps://phys.org/news/2019-03-microbes-mathematical.html\n\nhttp://generalintellectunit.net/e/030-organising-tech-with-wendy-liu-jason-prado/\n\nhttps://econfip.org/\n\nhttps://theory.stanford.edu/~nikolaj/programmingz3.html\n\nhttps://github.com/tylerwince/pydbg\n\nhttp://raganwald.com/2019/02/14/i-love-programming-and-programmers.html","html":"<p></p><p><a href=\"http://nautil.us/issue/19/illusions/how-your-brain-decides-without-you\">http://nautil.us/issue/19/illusions/how-your-brain-decides-without-you</a></p><p><a href=\"https://phys.org/news/2019-03-microbes-mathematical.html\">https://phys.org/news/2019-03-microbes-mathematical.html</a></p><p><a href=\"http://generalintellectunit.net/e/030-organising-tech-with-wendy-liu-jason-prado/\">http://generalintellectunit.net/e/030-organising-tech-with-wendy-liu-jason-prado/</a></p><p><a href=\"https://econfip.org/\">https://econfip.org/</a></p><p><a href=\"https://theory.stanford.edu/~nikolaj/programmingz3.html\">https://theory.stanford.edu/~nikolaj/programmingz3.html</a></p><p><a href=\"https://github.com/tylerwince/pydbg\">https://github.com/tylerwince/pydbg</a></p><p><a href=\"http://raganwald.com/2019/02/14/i-love-programming-and-programmers.html\">http://raganwald.com/2019/02/14/i-love-programming-and-programmers.html</a></p>","url":"https://hackersandslackers.com/lynx-roundup-march-16th/","uuid":"957faaac-efb9-4c19-9738-e29063bfef73","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c80c1e7665ce4577adfaf66"}},{"node":{"id":"Ghost__Post__5c80c15048278b7063d89764","title":"Lynx Roundup, March 15th","slug":"lynx-roundup-march-15th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/lynx23.jpg","excerpt":"Generalized language models!  Categorical variables & Random Forests!  Guide to Matrix Calculus!","custom_excerpt":"Generalized language models!  Categorical variables & Random Forests!  Guide to Matrix Calculus!","created_at_pretty":"07 March, 2019","published_at_pretty":"15 March, 2019","updated_at_pretty":"15 March, 2019","created_at":"2019-03-07T01:59:28.000-05:00","published_at":"2019-03-15T03:15:00.000-04:00","updated_at":"2019-03-15T03:15:47.000-04:00","meta_title":"Lynx Roundup, March 15th | Hackers and Slackers","meta_description":"Generalized language models!  Categorical variables & Random Forests!  Guide to Matrix Calculus!","og_description":"Generalized language models!  Categorical variables & Random Forests!  Guide to Matrix Calculus!","og_image":"https://hackersandslackers.com/content/images/2019/03/lynx23.jpg","og_title":"Lynx Roundup, March 15th","twitter_description":"Generalized language models!  Categorical variables & Random Forests!  Guide to Matrix Calculus!","twitter_image":"https://hackersandslackers.com/content/images/2019/03/lynx23.jpg","twitter_title":"Lynx Roundup, March 15th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"\n\nhttps://flowingdata.com/2019/03/06/women-men-timeuse/\n\nhttps://lilianweng.github.io/lil-log/2019/01/31/generalized-language-models.html\n\nhttps://github.com/ThePlasmaRailgun/owoScript\n\nhttps://roamanalytics.com/2016/10/28/are-categorical-variables-getting-lost-in-your-random-forests/\n\nhttps://sites.google.com/view/emergent-coordination/home\n\nhttps://github.com/LynnHo/Matrix-Calculus\n\nhttps://www.searchenginejournal.com/python-seo-data-reference-guide/287927/#close","html":"<p></p><p><a href=\"https://flowingdata.com/2019/03/06/women-men-timeuse/\">https://flowingdata.com/2019/03/06/women-men-timeuse/</a></p><p><a href=\"https://lilianweng.github.io/lil-log/2019/01/31/generalized-language-models.html\">https://lilianweng.github.io/lil-log/2019/01/31/generalized-language-models.html</a></p><p><a href=\"https://github.com/ThePlasmaRailgun/owoScript\">https://github.com/ThePlasmaRailgun/owoScript</a></p><p><a href=\"https://roamanalytics.com/2016/10/28/are-categorical-variables-getting-lost-in-your-random-forests/\">https://roamanalytics.com/2016/10/28/are-categorical-variables-getting-lost-in-your-random-forests/</a></p><p><a href=\"https://sites.google.com/view/emergent-coordination/home\">https://sites.google.com/view/emergent-coordination/home</a></p><p><a href=\"https://github.com/LynnHo/Matrix-Calculus\">https://github.com/LynnHo/Matrix-Calculus</a></p><p><a href=\"https://www.searchenginejournal.com/python-seo-data-reference-guide/287927/#close\">https://www.searchenginejournal.com/python-seo-data-reference-guide/287927/#close</a></p>","url":"https://hackersandslackers.com/lynx-roundup-march-15th/","uuid":"45d1fd11-2b58-4cf5-8034-49d9227f3b91","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c80c15048278b7063d89764"}},{"node":{"id":"Ghost__Post__5c654f34eab17b74dbf2d2c0","title":"Welcome to SQL 4: Aggregate Functions","slug":"welcome-to-sql-4-aggregate-functions","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/welcometosql4.jpg","excerpt":"Become more intimate with your data- use SQL's aggregate functions to explore the traits which make your data unique and beautiful.","custom_excerpt":"Become more intimate with your data- use SQL's aggregate functions to explore the traits which make your data unique and beautiful.","created_at_pretty":"14 February, 2019","published_at_pretty":"14 March, 2019","updated_at_pretty":"17 March, 2019","created_at":"2019-02-14T06:21:24.000-05:00","published_at":"2019-03-14T03:10:00.000-04:00","updated_at":"2019-03-17T17:25:34.000-04:00","meta_title":"Welcome to SQL 4: Aggregate Functions | Hackers and Slackers","meta_description":"Become more intimate with your data- use SQL's aggregate functions to explore the traits which make your data unique and beautiful.","og_description":"Become more intimate with your data- use SQL's aggregate functions to explore the traits which make your data unique and beautiful.","og_image":"https://hackersandslackers.com/content/images/2019/03/welcometosql4.jpg","og_title":"Welcome to SQL 4: Aggregate Functions","twitter_description":"Become more intimate with your data- use SQL's aggregate functions to explore the traits which make your data unique and beautiful.","twitter_image":"https://hackersandslackers.com/content/images/2019/03/welcometosql4.jpg","twitter_title":"Welcome to SQL 4: Aggregate Functions","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"SQL","slug":"sql","description":"Configure relational databases, brush up on your query language syntax, or find third-party services to interact with your data.","feature_image":"https://res-1.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/sql-tag.jpg","meta_description":"Configure relational databases, brush up on your query language syntax, or find third-party services to interact with your data.","meta_title":"Working with SQL | Hackers and Slackers","visibility":"public"},"tags":[{"name":"SQL","slug":"sql","description":"Configure relational databases, brush up on your query language syntax, or find third-party services to interact with your data.","feature_image":"https://res-1.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/sql-tag.jpg","meta_description":"Configure relational databases, brush up on your query language syntax, or find third-party services to interact with your data.","meta_title":"Working with SQL | Hackers and Slackers","visibility":"public"},{"name":"MySQL","slug":"mysql","description":"Database configuration, building queries, and cloud hosting options for MySQL.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/mysqlrevamp_o.jpg","meta_description":"Database configuration, building queries, and cloud hosting options for MySQL.","meta_title":"Working with MySQL | Hackers and Slackers","visibility":"public"},{"name":"PostgreSQL","slug":"postgresql","description":"Our preferred relational database of choice which deserves more love. Learn the advantages that PostgreSQL provides over closed-source competitors.","feature_image":null,"meta_description":"Our preferred relational database of choice which deserves more love. Learn the advantages that PostgreSQL provides over closed-source competitors.","meta_title":"Working with PostgreSQL | Hackers and Slackers","visibility":"public"},{"name":"#Welcome to SQL","slug":"welcome-to-sql","description":"If you feel like you’re late to the data party, we all are. The party has been going strong since the 70s: brush up on SQL syntax the old-fashioned way.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/welcometosqlseries.jpg","meta_description":"If you feel like you’re late to the data party, we all are. The party has been going strong since the 70s: brush up on SQL syntax the old-fashioned way.","meta_title":"Welcome to SQL","visibility":"internal"}],"plaintext":"Aggregate functions in SQL are super dope. When combining these functions with\nclauses such as GROUP BY  and HAVING, we discover ways to view our data from\ncompletely new perspectives. Instead of looking at the same old endless flat\ntable, we can use these functions to give us entirely new insights; aggregate\nfunctions help us to understand bigger-picture things.  Those things might\ninclude finding outliers in datasets, or simply figuring out which employee with\na family to feed should be terminated, based on some arbitrary metric such as\nsales numbers.\n\nWith the basics of JOINs under our belts, this is when SQL starts feel really,\nreally powerful. Our plain two-dimensional tables suddenly gain this power to be\ncombined, aggregated, folded on to themselves, expand infinitely outward as the\nuniverse itself, and even transcend into the fourth dimension.*\n\n*Needs citationOur Base Aggregation Functions\nFirst up, let's see what we mean by \"aggregate functions\" anyway. These simple\nfunctions provide us with a way to mathematically quantify what exactly is in\nour database. Aggregate functions are performed on table columns to give us the\nmake-up of said column. On their own, they seem quite simple:\n\n * AVG: The average of a set of values in a column.\n * COUNT: Number of rows a column contains in a specified table or view.\n * MIN: The minimum value in a set of values.\n * MAX: The maximum value in a set of values.\n * SUM: The sum of values.\n\nDISTINCT Aggregations\nA particularly useful way of using aggregate functions on their own is when we'd\nlike to know the number of DISTINCT  values. While aggregate values take all\nrecords into account, using DISTINCT  limits the data returned to specifically\nrefer to unique values. COUNT(column_name)  will return the number of all\nrecords in a column, where COUNT(DISTINCT column_name)  will ignore counting\nrecords where the value in the counted column is repeated.\n\nUsing GROUP BY\nThe GROUP BY  statement is often used with aggregate functions (COUNT, MAX, MIN,\nSUM, AVG) to group the result-set by one or more columns.\n\nTo demonstrate how aggregate functions work moving forward, I'll be using a\nfamiliar database: the database which contains all the content for this very\nblog. Let's look at how we can use aggregate functions to find which authors\nhave been posting most frequently:\n\nSELECT\n  COUNT(title), author_id\nFROM\n  posts\nGROUP BY author_id;\n\n\nAnd the result:\n\nCount\n author_id\n 102\n 1\n 280\n 5c12c3821345c22dced9f591\n 17\n 5c12c3821345c22dced9f592\n 5\n 5c12c3821345c22dced9f593\n 2\n 5c12c3821345c22dced9f594\n 2\n 5c12c3821345c22dced9f595\n Oh look, a real-life data problem to solve! It seems like authors are\nrepresented in Ghost's posts  table simply by their IDs. This isn't very useful.\nLuckily, we've already learned enough about JOINs\n[https://hackersandslackers.com/welcome-to-sql-3-building-relationships-and-combining-data/] \n to know we can fill in the missing information from the users  table!\n\nSELECT\n  COUNT(posts.title),\n  users.name\nFROM\n  posts\nLEFT JOIN users\nON \n  (posts.author_id = users.id)\nGROUP BY users.id\nORDER BY COUNT(posts.title) DESC;\n\n\nLet's see the results this time around:\n\nCount\n author_id\n 280\n Matthew Alhonte\n 102\n Todd Birchard\n 17\n Max Mileaf\n 5\n Ryan Rosado\n 2\n Graham Beckley\n 2\n David Aquino\n Now that's more like it! Matt is crushing the game with his Lynx Roundup \nseries, with myself in second place. Max had respectable numbers for a moment\nbut has presumably moved on to other hobbies, such as living his life.\n\nFor the remainder, well, I've got nothing to say other than we're hiring. We\ndon't pay though. In fact, there's probably zero benefits to joining us.\n\nConditional Grouping With \"HAVING\"\nHAVING  is like the WHERE  of aggregations. We can't use WHERE  on aggregate\nvalues, so that's why HAVING  exists. HAVING  can't accept any conditional\nvalue, but instead it must accept a numerical conditional derived from a GROUP\nBY. Perhaps this would be easier to visualize in a query:\n\nSELECT\n  tags.name,\n  COUNT(DISTINCT posts_tags.post_id)\nFROM posts_tags \n  LEFT JOIN tags ON tags.id = posts_tags.tag_id\n  LEFT JOIN posts ON posts.id = posts_tags.post_id\nGROUP BY\n  tags.id\nHAVING \n  COUNT(DISTINCT posts_tags.post_id) > 10\nORDER BY\n  COUNT(DISTINCT posts_tags.post_id)\n  DESC;\n\n\nIn this scenario, we want to see which tags on our blog have the highest number\nof associated posts. The query is very similar to the one we made previously,\nonly this time we have a special guest:\n\nHAVING \n  COUNT(DISTINCT posts_tags.post_id) > 10\n\n\nThis usage of HAVING  only gives us tags which have ten posts or more. This\nshould clean up our report by letting Darwinism takes its course. Here's how it\nworked out:\n\ntag\n Count\n Roundup\n 263\n Python\n 80\n Machine Learning\n 29\n DevOps\n 28\n Data Science\n 28\n Software Development\n 27\n Data Engineering\n 23\n Excel\n 19\n SQL\n 18\n Architecture\n 18\n REST APIs\n 16\n #Adventures in Excel\n 16\n Pandas\n 15\n Flask\n 14\n Data Analysis\n 12\n JavaScript\n 12\n AWS\n 11\n MySQL\n 11\n As expected, Matt's roundup posts take the lead (and if we compare this to\nprevious data, we can see Matt has made a total of 17  non-Lynx posts: meaning\nMax and Matt are officially TIED).\n\nIf we hadn't included our HAVING  statement, this list would be much longer,\nfilled with tags nobody cares about. Thanks to explicit omission, now we don't\nneed to experience the dark depression that comes when confronting those sad\npathetic tags. Out of sight, out of mind.\n\nGet Creative\nAggregate functions aren't just about counting values. Especially in Data\nScience, these functions are critical  to drawing any statistical conclusions\nfrom data. That said, attention spans only last so long, and I'm not a\nscientist. Perhaps that can be your job.","html":"<p>Aggregate functions in SQL are super dope. When combining these functions with clauses such as <code>GROUP BY</code> and <code>HAVING</code>, we discover ways to view our data from completely new perspectives. Instead of looking at the same old endless flat table, we can use these functions to give us entirely new insights; aggregate functions help us to understand bigger-picture things.<em> </em>Those things might include finding outliers in datasets, or simply figuring out which employee with a family to feed should be terminated, based on some arbitrary metric such as sales numbers.</p><p>With the basics of <code>JOIN</code>s under our belts, this is when SQL starts feel really, really powerful. Our plain two-dimensional tables suddenly gain this power to be combined, aggregated, folded on to themselves, expand infinitely outward as the universe itself, and even transcend into the fourth dimension.*</p><!--kg-card-begin: html--><div style=\"color:grey; text-align: right; font-style: italic;\">\n    *Needs citation\n</div><!--kg-card-end: html--><h2 id=\"our-base-aggregation-functions\">Our Base Aggregation Functions</h2><p>First up, let's see what we mean by \"aggregate functions\" anyway. These simple functions provide us with a way to mathematically quantify what exactly is in our database. Aggregate functions are performed on table columns to give us the make-up of said column. On their own, they seem quite simple:</p><ul><li><code>AVG</code>: The average of a set of values in a column.</li><li><code>COUNT</code>: Number of rows a column contains in a specified table or view.</li><li><code>MIN</code>: The minimum value in a set of values.</li><li><code>MAX</code>: The maximum value in a set of values.</li><li><code>SUM</code>: The sum of values.</li></ul><h3 id=\"distinct-aggregations\">DISTINCT Aggregations</h3><p>A particularly useful way of using aggregate functions on their own is when we'd like to know the number of <code>DISTINCT</code> values. While aggregate values take all records into account, using <code>DISTINCT</code> limits the data returned to specifically refer to unique values. <code>COUNT(column_name)</code> will return the number of all records in a column, where <code>COUNT(DISTINCT column_name)</code> will ignore counting records where the value in the counted column is repeated.</p><h2 id=\"using-group-by\">Using GROUP BY</h2><p>The <code>GROUP BY</code> statement is often used with aggregate functions (COUNT, MAX, MIN, SUM, AVG) to group the result-set by one or more columns.</p><p>To demonstrate how aggregate functions work moving forward, I'll be using a familiar database: the database which contains all the content for this very blog. Let's look at how we can use aggregate functions to find which authors have been posting most frequently:</p><!--kg-card-begin: markdown--><pre><code class=\"language-sql\">SELECT\n  COUNT(title), author_id\nFROM\n  posts\nGROUP BY author_id;\n</code></pre>\n<!--kg-card-end: markdown--><p>And the result:</p><!--kg-card-begin: html--><div class=\"tableContainer\">\n  <table>\n    <thead>\n      <tr>\n        <th>Count</th>\n        <th>author_id</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>102</td>\n        <td>1</td>\n      </tr>\n      <tr>\n        <td>280</td>\n        <td>5c12c3821345c22dced9f591</td>\n      </tr>\n      <tr>\n        <td>17</td>\n        <td>5c12c3821345c22dced9f592</td>\n      </tr>\n      <tr>\n        <td>5</td>\n        <td>5c12c3821345c22dced9f593</td>\n      </tr>\n      <tr>\n        <td>2</td>\n        <td>5c12c3821345c22dced9f594</td>\n      </tr>\n      <tr>\n        <td>2</td>\n        <td>5c12c3821345c22dced9f595</td>\n      </tr>\n    </tbody>\n  </table>\n</div><!--kg-card-end: html--><p>Oh look, a real-life data problem to solve! It seems like authors are represented in Ghost's <strong><em>posts</em></strong> table simply by their IDs. This isn't very useful. Luckily, we've <a href=\"https://hackersandslackers.com/welcome-to-sql-3-building-relationships-and-combining-data/\">already learned enough about JOINs</a> to know we can fill in the missing information from the <strong><em>users</em></strong> table!</p><!--kg-card-begin: markdown--><pre><code class=\"language-sql\">SELECT\n  COUNT(posts.title),\n  users.name\nFROM\n  posts\nLEFT JOIN users\nON \n  (posts.author_id = users.id)\nGROUP BY users.id\nORDER BY COUNT(posts.title) DESC;\n</code></pre>\n<!--kg-card-end: markdown--><p>Let's see the results this time around:</p><!--kg-card-begin: html--><div class=\"tableContainer\">\n    <table>\n  <thead>\n    <tr>\n      <th>Count</th>\n      <th>author_id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>280</td>\n      <td>Matthew Alhonte</td>\n    </tr>\n    <tr>\n      <td>102</td>\n      <td>Todd Birchard</td>\n    </tr>\n    <tr>\n      <td>17</td>\n      <td>Max Mileaf</td>\n    </tr>\n    <tr>\n      <td>5</td>\n      <td>Ryan Rosado</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>Graham Beckley</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>David Aquino</td>\n    </tr>\n  </tbody>\n</table>\n</div><!--kg-card-end: html--><p>Now that's more like it! Matt is crushing the game with his <strong>Lynx Roundup</strong> series, with myself in second place. Max had respectable numbers for a moment but has presumably moved on to other hobbies, such as living his life.</p><p>For the remainder, well, I've got nothing to say other than we're hiring. We don't pay though. In fact, there's probably zero benefits to joining us.</p><h3 id=\"conditional-grouping-with-having\">Conditional Grouping With \"HAVING\"</h3><p><code>HAVING</code> is like the <code>WHERE</code> of aggregations. We can't use <code>WHERE</code> on aggregate values, so that's why <code>HAVING</code> exists. <code>HAVING</code> can't accept any conditional value, but instead it <em>must </em>accept a numerical conditional derived from a <code>GROUP BY</code>. Perhaps this would be easier to visualize in a query:</p><!--kg-card-begin: markdown--><pre><code class=\"language-sql\">SELECT\n  tags.name,\n  COUNT(DISTINCT posts_tags.post_id)\nFROM posts_tags \n  LEFT JOIN tags ON tags.id = posts_tags.tag_id\n  LEFT JOIN posts ON posts.id = posts_tags.post_id\nGROUP BY\n  tags.id\nHAVING \n  COUNT(DISTINCT posts_tags.post_id) &gt; 10\nORDER BY\n  COUNT(DISTINCT posts_tags.post_id)\n  DESC;\n</code></pre>\n<!--kg-card-end: markdown--><p>In this scenario, we want to see which tags on our blog have the highest number of associated posts. The query is very similar to the one we made previously, only this time we have a special guest:</p><!--kg-card-begin: markdown--><pre><code class=\"language-sql\">HAVING \n  COUNT(DISTINCT posts_tags.post_id) &gt; 10\n</code></pre>\n<!--kg-card-end: markdown--><p>This usage of <code>HAVING</code> only gives us tags which have ten posts or more. This should clean up our report by letting Darwinism takes its course. Here's how it worked out:</p><!--kg-card-begin: html--><div class=\"tableContainer\">\n    <table>\n  <thead>\n    <tr>\n      <th>tag</th>\n      <th>Count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Roundup</td>\n      <td>263</td>\n    </tr>\n    <tr>\n      <td>Python</td>\n      <td>80</td>\n    </tr>\n    <tr>\n      <td>Machine Learning</td>\n      <td>29</td>\n    </tr>\n    <tr>\n      <td>DevOps</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <td>Data Science</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <td>Software Development</td>\n      <td>27</td>\n    </tr>\n    <tr>\n      <td>Data Engineering</td>\n      <td>23</td>\n    </tr>\n    <tr>\n      <td>Excel</td>\n      <td>19</td>\n    </tr>\n    <tr>\n      <td>SQL</td>\n      <td>18</td>\n    </tr>\n    <tr>\n      <td>Architecture</td>\n      <td>18</td>\n    </tr>\n    <tr>\n      <td>REST APIs</td>\n      <td>16</td>\n    </tr>\n    <tr>\n      <td>#Adventures in Excel</td>\n      <td>16</td>\n    </tr>\n    <tr>\n      <td>Pandas</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <td>Flask</td>\n      <td>14</td>\n    </tr>\n    <tr>\n      <td>Data Analysis</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <td>JavaScript</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <td>AWS</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <td>MySQL</td>\n      <td>11</td>\n    </tr>\n  </tbody>\n</table>\n</div><!--kg-card-end: html--><p>As expected, Matt's roundup posts take the lead (and if we compare this to previous data, we can see Matt has made a total of <strong>17</strong> non-Lynx posts: meaning Max and Matt are officially TIED).</p><p>If we hadn't included our <code>HAVING</code> statement, this list would be much longer, filled with tags nobody cares about. Thanks to explicit omission, now we don't need to experience the dark depression that comes when confronting those sad pathetic tags. Out of sight, out of mind.</p><h3 id=\"get-creative\">Get Creative</h3><p>Aggregate functions aren't just about counting values. Especially in Data Science, these functions are <em>critical</em> to drawing any statistical conclusions from data. That said, attention spans only last so long, and I'm not a scientist. Perhaps that can be your job.</p>","url":"https://hackersandslackers.com/welcome-to-sql-4-aggregate-functions/","uuid":"f45c0ccc-3efc-4963-a236-a23db74c2e96","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c654f34eab17b74dbf2d2c0"}},{"node":{"id":"Ghost__Post__5c80c0ca48278b7063d8975a","title":"Lynx Roundup, March 14th","slug":"lynx-roundup-march-14th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/149.jpg","excerpt":"SQL material!  A planet-scale AR game!  ML workflow vs software engineering workflow!","custom_excerpt":"SQL material!  A planet-scale AR game!  ML workflow vs software engineering workflow!","created_at_pretty":"07 March, 2019","published_at_pretty":"14 March, 2019","updated_at_pretty":"14 March, 2019","created_at":"2019-03-07T01:57:14.000-05:00","published_at":"2019-03-14T03:09:00.000-04:00","updated_at":"2019-03-14T03:09:53.000-04:00","meta_title":"Lynx Roundup, March 14th | Hackers and Slackers","meta_description":"SQL material!  A planet-scale AR game!  ML workflow vs software engineering workflow!","og_description":"SQL material!  A planet-scale AR game!  ML workflow vs software engineering workflow!","og_image":"https://hackersandslackers.com/content/images/2019/03/149.jpg","og_title":"Lynx Roundup, March 14th","twitter_description":"SQL material!  A planet-scale AR game!  ML workflow vs software engineering workflow!","twitter_image":"https://hackersandslackers.com/content/images/2019/03/149.jpg","twitter_title":"Lynx Roundup, March 14th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"\n\nhttps://kanoki.org/2019/02/02/learn-sql-for-data-science/\n\nhttps://www.gamasutra.com/blogs/EdwardWu/20190227/337414/Designing_a_planetscale_realworld_AR_platform.php\n\nhttps://medium.com/@plotlygraphs/introducing-dash-cytoscape-ce96cac824e4\n\nhttps://engineering.linkedin.com/blog/2019/02/introducing-kafka-cruise-control-frontend\n\nhttps://www.reddit.com/r/MachineLearning/comments/ac0v2a/d_should_ml_workflow_be_different_from_se_workflow/\n\nhttps://blogs.ams.org/matheducation/2019/02/01/everyone-can-learn-mathematics-to-high-levels-the-evidence-from-neuroscience-that-should-change-our-teaching/\n\nhttps://www.sciencealert.com/scientists-just-identified-the-brain-patterns-of-consciousness","html":"<p></p><p><a href=\"https://kanoki.org/2019/02/02/learn-sql-for-data-science/\">https://kanoki.org/2019/02/02/learn-sql-for-data-science/</a></p><p><a href=\"https://www.gamasutra.com/blogs/EdwardWu/20190227/337414/Designing_a_planetscale_realworld_AR_platform.php\">https://www.gamasutra.com/blogs/EdwardWu/20190227/337414/Designing_a_planetscale_realworld_AR_platform.php</a></p><p><a href=\"https://medium.com/@plotlygraphs/introducing-dash-cytoscape-ce96cac824e4\">https://medium.com/@plotlygraphs/introducing-dash-cytoscape-ce96cac824e4</a></p><p><a href=\"https://engineering.linkedin.com/blog/2019/02/introducing-kafka-cruise-control-frontend\">https://engineering.linkedin.com/blog/2019/02/introducing-kafka-cruise-control-frontend</a></p><p><a href=\"https://www.reddit.com/r/MachineLearning/comments/ac0v2a/d_should_ml_workflow_be_different_from_se_workflow/\">https://www.reddit.com/r/MachineLearning/comments/ac0v2a/d_should_ml_workflow_be_different_from_se_workflow/</a></p><p><a href=\"https://blogs.ams.org/matheducation/2019/02/01/everyone-can-learn-mathematics-to-high-levels-the-evidence-from-neuroscience-that-should-change-our-teaching/\">https://blogs.ams.org/matheducation/2019/02/01/everyone-can-learn-mathematics-to-high-levels-the-evidence-from-neuroscience-that-should-change-our-teaching/</a></p><p><a href=\"https://www.sciencealert.com/scientists-just-identified-the-brain-patterns-of-consciousness\">https://www.sciencealert.com/scientists-just-identified-the-brain-patterns-of-consciousness</a></p>","url":"https://hackersandslackers.com/lynx-roundup-march-14th/","uuid":"53f45f6f-e5de-4709-9797-88bf84a64c71","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c80c0ca48278b7063d8975a"}},{"node":{"id":"Ghost__Post__5c80c01748278b7063d8974f","title":"Lynx Roundup, March 13th","slug":"lynx-roundup-march-13th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/148-1-1.jpg","excerpt":"Cool guide to the proof-assistant Agda!  Monte Carlo methods!  Deep Learning style transfer!","custom_excerpt":"Cool guide to the proof-assistant Agda!  Monte Carlo methods!  Deep Learning style transfer!","created_at_pretty":"07 March, 2019","published_at_pretty":"13 March, 2019","updated_at_pretty":"13 March, 2019","created_at":"2019-03-07T01:54:15.000-05:00","published_at":"2019-03-13T04:57:00.000-04:00","updated_at":"2019-03-13T04:57:03.000-04:00","meta_title":"Lynx Roundup, March 13th | Hackers and Slackers","meta_description":"Cool guide to the proof-assistant Agda!  Monte Carlo methods!  Deep Learning style transfer!","og_description":"Cool guide to the proof-assistant Agda!  Monte Carlo methods!  Deep Learning style transfer!","og_image":"https://hackersandslackers.com/content/images/2019/03/148-1-1.jpg","og_title":"Lynx Roundup, March 13th","twitter_description":"Cool guide to the proof-assistant Agda!  Monte Carlo methods!  Deep Learning style transfer!","twitter_image":"https://hackersandslackers.com/content/images/2019/03/148-1-1.jpg","twitter_title":"Lynx Roundup, March 13th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"\n\nhttps://plfa.github.io/\n\nhttps://medium.com/ibm-watson-data-lab/art-ai-the-logic-behind-deep-learning-style-transfer-1f59f51441d1\n\nhttps://www.reuters.com/investigates/special-report/usa-spying-raven/\n\nhttps://phys.org/news/2019-01-metallic-wood-strength-titanium-density.html\n\nhttps://towardsdatascience.com/back-to-the-metal-top-3-programming-language-to-develop-big-data-frameworks-in-2019-69a44a36a842\n\nhttps://neurosciencenews.com/cognition-organoid-brain-10797/\n\nhttps://pbpython.com/monte-carlo.html","html":"<p></p><p><a href=\"https://plfa.github.io/\">https://plfa.github.io/</a></p><p><a href=\"https://medium.com/ibm-watson-data-lab/art-ai-the-logic-behind-deep-learning-style-transfer-1f59f51441d1\">https://medium.com/ibm-watson-data-lab/art-ai-the-logic-behind-deep-learning-style-transfer-1f59f51441d1</a></p><p><a href=\"https://www.reuters.com/investigates/special-report/usa-spying-raven/\">https://www.reuters.com/investigates/special-report/usa-spying-raven/</a></p><p><a href=\"https://phys.org/news/2019-01-metallic-wood-strength-titanium-density.html\">https://phys.org/news/2019-01-metallic-wood-strength-titanium-density.html</a></p><p><a href=\"https://towardsdatascience.com/back-to-the-metal-top-3-programming-language-to-develop-big-data-frameworks-in-2019-69a44a36a842\">https://towardsdatascience.com/back-to-the-metal-top-3-programming-language-to-develop-big-data-frameworks-in-2019-69a44a36a842</a></p><p><a href=\"https://neurosciencenews.com/cognition-organoid-brain-10797/\">https://neurosciencenews.com/cognition-organoid-brain-10797/</a></p><p><a href=\"https://pbpython.com/monte-carlo.html\">https://pbpython.com/monte-carlo.html</a></p>","url":"https://hackersandslackers.com/lynx-roundup-march-13th/","uuid":"ce7e9d1e-fbc9-44a1-979f-26838809cd8e","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c80c01748278b7063d8974f"}},{"node":{"id":"Ghost__Post__5c80bf8648278b7063d89744","title":"Lynx Roundup, March 12th","slug":"lynx-roundup-march-12th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/lynx20.jpg","excerpt":"Formal verification in Distributed Systems!  Interpreting ML models with SHAP!  Cool lesser-known Python data science libraries!","custom_excerpt":"Formal verification in Distributed Systems!  Interpreting ML models with SHAP!  Cool lesser-known Python data science libraries!","created_at_pretty":"07 March, 2019","published_at_pretty":"12 March, 2019","updated_at_pretty":"12 March, 2019","created_at":"2019-03-07T01:51:50.000-05:00","published_at":"2019-03-12T09:06:00.000-04:00","updated_at":"2019-03-12T18:42:21.000-04:00","meta_title":"Lynx Roundup, March 12th | Hackers and Slackers","meta_description":"Formal verification in Distributed Systems!  Interpreting ML models with SHAP!  Cool lesser-known Python data science libraries!","og_description":"Formal verification in Distributed Systems!  Interpreting ML models with SHAP!  Cool lesser-known Python data science libraries!","og_image":"https://hackersandslackers.com/content/images/2019/03/lynx20.jpg","og_title":"Lynx Roundup, March 12th","twitter_description":"Formal verification in Distributed Systems!  Interpreting ML models with SHAP!  Cool lesser-known Python data science libraries!","twitter_image":"https://hackersandslackers.com/content/images/2019/03/lynx20.jpg","twitter_title":"Lynx Roundup, March 12th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"\n\nhttps://veekaybee.github.io/2019/02/13/data-science-is-different/\n\nhttps://github.com/equinor/pylops\n\nhttps://kotaku.com/an-open-letter-to-game-developers-from-americas-largest-1832652654\n\nhttps://realpython.com/jupyter-notebook-introduction/\n\nhttps://github.com/slundberg/shap\n\nhttps://www.reddit.com/r/datascience/comments/auj866/what_are_some_very_useful_lesser_known_python/\n\nhttps://jack-vanlightly.com/blog/2019/1/27/building-a-simple-distributed-system-formal-verification","html":"<p></p><p><a href=\"https://veekaybee.github.io/2019/02/13/data-science-is-different/\">https://veekaybee.github.io/2019/02/13/data-science-is-different/</a></p><p><a href=\"https://github.com/equinor/pylops\">https://github.com/equinor/pylops</a></p><p><a href=\"https://kotaku.com/an-open-letter-to-game-developers-from-americas-largest-1832652654\">https://kotaku.com/an-open-letter-to-game-developers-from-americas-largest-1832652654</a></p><p><a href=\"https://realpython.com/jupyter-notebook-introduction/\">https://realpython.com/jupyter-notebook-introduction/</a></p><p><a href=\"https://github.com/slundberg/shap\">https://github.com/slundberg/shap</a></p><p><a href=\"https://www.reddit.com/r/datascience/comments/auj866/what_are_some_very_useful_lesser_known_python/\">https://www.reddit.com/r/datascience/comments/auj866/what_are_some_very_useful_lesser_known_python/</a></p><p><a href=\"https://jack-vanlightly.com/blog/2019/1/27/building-a-simple-distributed-system-formal-verification\">https://jack-vanlightly.com/blog/2019/1/27/building-a-simple-distributed-system-formal-verification</a></p>","url":"https://hackersandslackers.com/lynx-roundup-march-12th/","uuid":"fbf2c129-028e-434f-9c5f-51d681a0bae4","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c80bf8648278b7063d89744"}},{"node":{"id":"Ghost__Post__5c80bec748278b7063d89739","title":"Lynx Roundup, March 11th","slug":"lynx-roundup-march-11th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/115-1-1.jpg","excerpt":"An alternative to Python exceptions!  A cool vm injector!  The upcoming Walrus operator in Python!","custom_excerpt":"An alternative to Python exceptions!  A cool vm injector!  The upcoming Walrus operator in Python!","created_at_pretty":"07 March, 2019","published_at_pretty":"11 March, 2019","updated_at_pretty":"12 March, 2019","created_at":"2019-03-07T01:48:39.000-05:00","published_at":"2019-03-11T06:25:00.000-04:00","updated_at":"2019-03-11T20:55:14.000-04:00","meta_title":"Lynx Roundup, March 11th | Hackers and Slackers","meta_description":"An alternative to Python exceptions!  A cool vm injector!  The upcoming Walrus operator in Python!","og_description":"An alternative to Python exceptions!  A cool vm injector!  The upcoming Walrus operator in Python!","og_image":"https://hackersandslackers.com/content/images/2019/03/115-1-1.jpg","og_title":"Lynx Roundup, March 11th","twitter_description":"An alternative to Python exceptions!  A cool vm injector!  The upcoming Walrus operator in Python!","twitter_image":"https://hackersandslackers.com/content/images/2019/03/115-1-1.jpg","twitter_title":"Lynx Roundup, March 11th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"\n\nhttps://dev.to/wemake-services/python-exceptions-considered-an-anti-pattern-17o9\n\nhttps://semiengineering.com/using-memory-differently/\n\nhttp://cyberneticzoo.com/early-mobile-robots/1982-4-mar-1-agricultural-robot-v-p-goryachkina-ukraine/\n\nhttps://github.com/NtesEyes/pylane\n\nhttps://medium.com/hultner/try-out-walrus-operator-in-python-3-8-d030ce0ce601\n\nhttps://blog.adafruit.com/2019/02/14/new-guide-circuitscheme-lisp-on-circuitpython-circuitpython-lisp-samd51-adafruitlearningsystem-microchipmakes-adafruit/\n\nhttps://github.com/activityhistory/jupyter_on_github","html":"<p></p><p><a href=\"https://dev.to/wemake-services/python-exceptions-considered-an-anti-pattern-17o9\">https://dev.to/wemake-services/python-exceptions-considered-an-anti-pattern-17o9</a></p><p><a href=\"https://semiengineering.com/using-memory-differently/\">https://semiengineering.com/using-memory-differently/</a></p><p><a href=\"http://cyberneticzoo.com/early-mobile-robots/1982-4-mar-1-agricultural-robot-v-p-goryachkina-ukraine/\">http://cyberneticzoo.com/early-mobile-robots/1982-4-mar-1-agricultural-robot-v-p-goryachkina-ukraine/</a></p><p><a href=\"https://github.com/NtesEyes/pylane\">https://github.com/NtesEyes/pylane</a></p><p><a href=\"https://medium.com/hultner/try-out-walrus-operator-in-python-3-8-d030ce0ce601\">https://medium.com/hultner/try-out-walrus-operator-in-python-3-8-d030ce0ce601</a></p><p><a href=\"https://blog.adafruit.com/2019/02/14/new-guide-circuitscheme-lisp-on-circuitpython-circuitpython-lisp-samd51-adafruitlearningsystem-microchipmakes-adafruit/\">https://blog.adafruit.com/2019/02/14/new-guide-circuitscheme-lisp-on-circuitpython-circuitpython-lisp-samd51-adafruitlearningsystem-microchipmakes-adafruit/</a></p><p><a href=\"https://github.com/activityhistory/jupyter_on_github\">https://github.com/activityhistory/jupyter_on_github</a></p>","url":"https://hackersandslackers.com/lynx-roundup-march-11th/","uuid":"fc184885-a0d5-4be9-8ad0-abf99c9e2e84","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c80bec748278b7063d89739"}},{"node":{"id":"Ghost__Post__5c85a8da181da30210ceca9d","title":"Serve Docker Containers With A Custom Domain and SSL","slug":"serve-docker-containers-with-custom-dns-and-ssl","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/caddy.jpg","excerpt":"Do even less work to deploy your Docker apps to production.","custom_excerpt":"Do even less work to deploy your Docker apps to production.","created_at_pretty":"11 March, 2019","published_at_pretty":"11 March, 2019","updated_at_pretty":"09 April, 2019","created_at":"2019-03-10T20:16:26.000-04:00","published_at":"2019-03-11T06:15:00.000-04:00","updated_at":"2019-04-09T15:05:49.000-04:00","meta_title":"Serve Docker Containers With A Domain and SSL | Hackers and Slackers","meta_description":"Do even less work to deploy your Docker apps to production. Caddy is a Fast, cross-platform HTTP/2 web server with automatic SSL.","og_description":"Do even less work to deploy your Docker apps to production. Caddy is a Fast, cross-platform HTTP/2 web server with automatic SSL.","og_image":"https://hackersandslackers.com/content/images/2019/03/caddy.jpg","og_title":"Serve Docker Containers With A Custom Domain and SSL","twitter_description":"Do even less work to deploy your Docker apps to production. Caddy is a Fast, cross-platform HTTP/2 web server with automatic SSL.","twitter_image":"https://hackersandslackers.com/content/images/2019/03/caddy.jpg","twitter_title":"Serve Docker Containers With A Custom Domain and SSL","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"DevOps","slug":"devops","description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","feature_image":null,"meta_description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","meta_title":"DevOps: Networking And Server Configuration | Hackers and Slackers","visibility":"public"},"tags":[{"name":"DevOps","slug":"devops","description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","feature_image":null,"meta_description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","meta_title":"DevOps: Networking And Server Configuration | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"}],"plaintext":"The past few years of software development and architecture has witnessed\nmultiple revolutions. The rise of containers, unruly package management\necosystems, and one-click-deployments holds an unspoken narrative: most people\nprobably don’t care about how  things work beneath the top layer. Sure,\nadvancements in application infrastructure has undoubtedly made our lives\neasier. I suppose I find this lack of curiosity and unwillingness to dig deeper\ninto the innards, an unrelatable trait. Yet I digress.\n\nI’ve never found web server configurations to be particularly difficult, but\napparently most consider this enough of a nuisance to make something even easier\nto use. That’s where I came across Caddy [https://caddyserver.com/].\n\nCaddy  is a web server and free SSL service in which most of the actual work\nhappens via their download GUI [https://caddyserver.com/download]. It’s great.\nEven though I never expected us to reach a place where apt install nginx  and \napt install certbot  is considered too much of a burden, it only took a few\nminutes of wrestling with a Docker container running on a VPS that I realized\nthere was a better way.\n\nServe Anything With Caddy\nIn my particular example, the Docker container I was running produced an API\nendpoint. For some reason, this service forcefully insists that this endpoint is\nyour machine’s localhost, or it simply won’t work. While scoffing at vanity URLs\nfor APIs is fine, what isn’t  fine is you can’t assign an SSL certificate to an\nIP address. That means whichever app consuming your API will fail because your\napp surely has a cert of its own, and HTTPS > HTTP  API calls just aren’t gonna\nhappen.\n\nCaddy trivializes SSL certs to the point where you might not notice you’ve\nacquired one. Any host specified in a Caddyfile  immediately receives an SSL\ncert, but we'll get to that in a moment.\n\nCaddy’s download page is like a shopping cart for which things you might want\nyour web server to do. Proxies, CORS, you name it: just put it in the (free)\nshopping cart:\n\nSoon we won't even have to write code at all!Selecting your platform, plugins, and license  will provide you with a\nconvenient one-liner which downloads your exact package, unpacks, and installs\nit on your machine. For example, a Caddy installation for Linux with no bells or\nwhistles looks like this:\n\ncurl https://getcaddy.com | bash\n\n\nThis will install Caddy, which leaves only some trivial configuration before\nyou're up and running.\n\nConfiguring Your Caddyfile\nCaddy is configured via what is simply named Caddyfile, a file which can\nconveniently live in your project folder, as opposed to a distant land called \n/etc/nginx/sites-enabled. Go ahead and create your Caddy file.\n\nThe first line in our Caddyfile config is both simple and magic. It contains\nmerely the domain you’re intending to listen on, such something like \nhackersandslackers.com.  No matter what else happens in your config, the mere\nexistence of this line will generate an SSL cert for you when you run caddy.\n\nYou can serve content via any method that Nginx  or Apache  can, albeit much\neasier. A few examples:\n\n * root path/to/project  points your DNS to serve HTTP out a root folder.\n * websocket path/to/socket command  will serve an application via the specified\n   websocket.\n * rewrite [/original/folder/path] [/new/folder/path]  will reroute internal\n   requests made to origin A to origin B,\n\nThe point I’m trying to make here is that no matter what your desired\nconfiguration might be, it’s dead simple and likely won’t exceed more than 5\nlines.\n\nServing Our Docker Container via Proxy\nIf you’re using Node, chances are you’re going for a proxy configuration. In my\ncase I had no choice: I somehow needed to interact with an HTTP  url, while also\npassing the authentication headers necessary to make the app work. Luckily, this\nis trivial:\n\nexample.com\n\nproxy example.com proxy example.com localhost:4466/my_api/prod {\n transparent\n} \n\nerrors proxieserrors.log\n\nYes, really. Our proxy  block simply creates a proxy from  example.com, and\nserves localhost:4466/my_api/prod.\n\ntransparent  is a magic phrase which passes through all our headers to the\ntarget. It's shorthand for the following:\n\nheader_upstream Host {host}\nheader_upstream X-Real-IP {remote}\nheader_upstream X-Forwarded-For {remote}\nheader_upstream X-Forwarded-Port {server_port}\nheader_upstream X-Forwarded-Proto {scheme}\n\nDespite our Docker app requiring an authentication token to work hitting \nexample.com  will still result in a working endpoint thanks to the headers we're\npushing upstream.\n\nI even went the extra mile to include errors proxieserrors.log  as a way to log\nerrors. I didn't even need to. I only even got two errors total: Caddy works\nobnoxiously well.\n\nIn case you need anything more, I’d recommend reading the documentation\n[https://caddyserver.com/docs/proxy]. Even then, this basically summarizes the\nthings you can potentially configure:\n\nproxy from to... {\n\tpolicy name [value]\n\tfail_timeout duration\n\tmax_fails integer\n\tmax_conns in≈teger\n\ttry_duration duration\n\ttry_interval duration\n\thealth_check path\n\thealth_check_port port\n\thealth_check_interval interval_duration\n\thealth_check_timeout timeout_duration\n\tfallback_delay delay_duration\n\theader_upstream name value\n\theader_downstream name value\n\tkeepalive number\n\ttimeout duration\n\twithout prefix\n\texcept ignored_paths...\n\tupstream to\n\tca_certificates certs...\n\tinsecure_skip_verify\n\tpreset\n}\n\nRun Caddy And Never Worry About It Again\nSaving your Caddyfile  and running $ caddy  will issue your cert, and run Caddy\nas a process. This will result in a dialogue letting  you know that Caddy is\nlistening on both ports 80  and 443.\n\nCaddy won’t run as a background process by default. To do this, simply use the\ncommand $ nohup caddy &  and you're good to go.","html":"<p>The past few years of software development and architecture has witnessed multiple revolutions. The rise of containers, unruly package management ecosystems, and one-click-deployments holds an unspoken narrative: most people probably don’t care about <em>how</em> things work beneath the top layer. Sure, advancements in application infrastructure has undoubtedly made our lives easier. I suppose I find this lack of curiosity and unwillingness to dig deeper into the innards, an unrelatable trait. Yet I digress.</p><p>I’ve never found web server configurations to be particularly difficult, but apparently most consider this enough of a nuisance to make something even easier to use. That’s where I came across <a href=\"https://caddyserver.com/\" rel=\"noopener\">Caddy</a>.</p><p><strong>Caddy</strong> is a web server and free SSL service in which most of the actual work happens via their <a href=\"https://caddyserver.com/download\" rel=\"noopener\">download GUI</a>. It’s great. Even though I never expected us to reach a place where <code>apt install nginx</code> and <code>apt install certbot</code> is considered too much of a burden, it only took a few minutes of wrestling with a Docker container running on a VPS that I realized there was a better way.</p><h2 id=\"serve-anything-with-caddy\">Serve Anything With Caddy</h2><p>In my particular example, the Docker container I was running produced an API endpoint. For some reason, this service forcefully insists that this endpoint is your machine’s <em>localhost</em>, or it simply won’t work. While scoffing at vanity URLs for APIs is fine, what <em>isn’t</em> fine is <em>you can’t assign an SSL certificate to an IP address. </em>That means whichever app consuming your API will fail because your app <em>surely </em>has a cert of its own, and <strong>HTTPS &gt; HTTP</strong> API calls just aren’t gonna happen.</p><p>Caddy trivializes SSL certs to the point where you might not notice you’ve acquired one. Any host specified in a <code>Caddyfile</code> immediately receives an SSL cert, but we'll get to that in a moment.</p><p>Caddy’s download page is like a shopping cart for which things you might want your web server to do. Proxies, CORS, you name it: just put it in the (free) shopping cart:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://hackersandslackers.com/content/images/2019/03/caddy-download.png\" class=\"kg-image\"><figcaption>Soon we won't even have to write code at all!</figcaption></figure><!--kg-card-end: image--><p>Selecting your <strong>platform</strong>, <strong>plugins</strong>, and <strong>license</strong> will provide you with a convenient one-liner which downloads your exact package, unpacks, and installs it on your machine. For example, a Caddy installation for Linux with no bells or whistles looks like this:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">curl https://getcaddy.com | bash\n</code></pre>\n<!--kg-card-end: markdown--><p>This will install Caddy, which leaves only some trivial configuration before you're up and running.</p><h2 id=\"configuring-your-caddyfile\">Configuring Your Caddyfile</h2><p>Caddy is configured via what is simply named <code>Caddyfile</code>, a file which can conveniently live in your project folder, as opposed to a distant land called <code>/etc/nginx/sites-enabled</code>. Go ahead and create your Caddy file.</p><p>The first line in our Caddyfile config is both simple and magic. It contains merely the domain you’re intending to listen on, such something like <em>hackersandslackers.com.</em> No matter what else happens in your config, the mere existence of this line will generate an SSL cert for you when you run caddy.</p><p>You can serve content via any method that <strong>Nginx</strong> or <strong>Apache</strong> can, albeit much easier. A few examples:</p><ul><li><code>root path/to/project</code> points your DNS to serve HTTP out a root folder.</li><li><code>websocket path/to/socket command</code> will serve an application via the specified websocket.</li><li><code>rewrite [/original/folder/path] [/new/folder/path]</code> will reroute internal requests made to origin A to origin B,</li></ul><p>The point I’m trying to make here is that no matter what your desired configuration might be, it’s dead simple and likely won’t exceed more than 5 lines.</p><h2 id=\"serving-our-docker-container-via-proxy\">Serving Our Docker Container via Proxy</h2><p>If you’re using Node, chances are you’re going for a proxy configuration. In my case I had no choice: I somehow needed to interact with an <strong>HTTP</strong> url, while also passing the authentication headers necessary to make the app work. Luckily, this is trivial:</p><!--kg-card-begin: code--><pre><code>example.com\n\nproxy example.com proxy example.com localhost:4466/my_api/prod {\n transparent\n} \n\nerrors proxieserrors.log</code></pre><!--kg-card-end: code--><p>Yes, really. Our <code>proxy</code> block simply creates a proxy <em>from</em> <code>example.com</code>, and serves <code>localhost:4466/my_api/prod</code>.</p><p><code>transparent</code> is a magic phrase which passes through all our headers to the target. It's shorthand for the following:</p><!--kg-card-begin: code--><pre><code>header_upstream Host {host}\nheader_upstream X-Real-IP {remote}\nheader_upstream X-Forwarded-For {remote}\nheader_upstream X-Forwarded-Port {server_port}\nheader_upstream X-Forwarded-Proto {scheme}</code></pre><!--kg-card-end: code--><p>Despite our Docker app requiring an authentication token to work hitting <code>example.com</code> will still result in a working endpoint thanks to the headers we're pushing upstream.</p><p>I even went the extra mile to include <code>errors proxieserrors.log</code> as a way to log errors. I didn't even need to. I only even got two errors total: Caddy works obnoxiously well.</p><p>In case you need anything more, I’d recommend reading <a href=\"https://caddyserver.com/docs/proxy\" rel=\"noopener\">the documentation</a>. Even then, this basically summarizes the things you can potentially configure:</p><!--kg-card-begin: code--><pre><code>proxy from to... {\n\tpolicy name [value]\n\tfail_timeout duration\n\tmax_fails integer\n\tmax_conns in≈teger\n\ttry_duration duration\n\ttry_interval duration\n\thealth_check path\n\thealth_check_port port\n\thealth_check_interval interval_duration\n\thealth_check_timeout timeout_duration\n\tfallback_delay delay_duration\n\theader_upstream name value\n\theader_downstream name value\n\tkeepalive number\n\ttimeout duration\n\twithout prefix\n\texcept ignored_paths...\n\tupstream to\n\tca_certificates certs...\n\tinsecure_skip_verify\n\tpreset\n}</code></pre><!--kg-card-end: code--><h2 id=\"run-caddy-and-never-worry-about-it-again\">Run Caddy And Never Worry About It Again</h2><p>Saving your <code>Caddyfile</code> and running <code>$ caddy</code> will issue your cert, and run Caddy as a process. This will result in a dialogue letting  you know that Caddy is listening on both ports <code>80</code> and <code>443</code>.</p><p>Caddy won’t run as a background process by default. To do this, simply use the command <code>$ nohup caddy &amp;</code> and you're good to go.</p>","url":"https://hackersandslackers.com/serve-docker-containers-with-custom-dns-and-ssl/","uuid":"5b609f96-d76d-4b8b-943e-d470ee414d97","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c85a8da181da30210ceca9d"}},{"node":{"id":"Ghost__Post__5c80be4448278b7063d8972f","title":"Lynx Roundup, March 10th","slug":"lynx-roundup-march-10th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/111.jpg","excerpt":"Git for Data Scientists!  Google's cool new automatic differentiation tool!  Cool data science repos!","custom_excerpt":"Git for Data Scientists!  Google's cool new automatic differentiation tool!  Cool data science repos!","created_at_pretty":"07 March, 2019","published_at_pretty":"10 March, 2019","updated_at_pretty":"10 March, 2019","created_at":"2019-03-07T01:46:28.000-05:00","published_at":"2019-03-10T05:00:00.000-04:00","updated_at":"2019-03-10T05:00:23.000-04:00","meta_title":"Lynx Roundup, March 10th | Hackers and Slackers","meta_description":"Git for Data Scientists!  Google's cool new automatic differentiation tool!  Cool data science repos!","og_description":"Git for Data Scientists!  Google's cool new automatic differentiation tool!  Cool data science repos!","og_image":"https://hackersandslackers.com/content/images/2019/03/111.jpg","og_title":"Lynx Roundup, March 10th","twitter_description":"Git for Data Scientists!  Google's cool new automatic differentiation tool!  Cool data science repos!","twitter_image":"https://hackersandslackers.com/content/images/2019/03/111.jpg","twitter_title":"Lynx Roundup, March 10th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"\n\nhttps://krebsonsecurity.com/2019/02/new-breed-of-fuel-pump-skimmer-uses-sms-and-bluetooth/\n\nhttps://stackabuse.com/understanding-recursive-functions-with-python/\n\nhttps://towardsdatascience.com/why-git-and-how-to-use-git-as-a-data-scientist-4fa2d3bdc197\n\nhttps://www.analyticsvidhya.com/blog/2017/12/15-data-science-repositories-github-2017/\n\nhttps://www.forbes.com/sites/quora/2018/01/24/when-is-haskell-more-useful-than-r-or-python-in-data-science/\n\nhttps://github.com/google/jax\n\nhttps://www.reddit.com/r/learnpython/comments/ajds8s/classes_vs_functions_when_to_use_which_and_why/","html":"<p></p><p><a href=\"https://krebsonsecurity.com/2019/02/new-breed-of-fuel-pump-skimmer-uses-sms-and-bluetooth/\">https://krebsonsecurity.com/2019/02/new-breed-of-fuel-pump-skimmer-uses-sms-and-bluetooth/</a></p><p><a href=\"https://stackabuse.com/understanding-recursive-functions-with-python/\">https://stackabuse.com/understanding-recursive-functions-with-python/</a></p><p><a href=\"https://towardsdatascience.com/why-git-and-how-to-use-git-as-a-data-scientist-4fa2d3bdc197\">https://towardsdatascience.com/why-git-and-how-to-use-git-as-a-data-scientist-4fa2d3bdc197</a></p><p><a href=\"https://www.analyticsvidhya.com/blog/2017/12/15-data-science-repositories-github-2017/\">https://www.analyticsvidhya.com/blog/2017/12/15-data-science-repositories-github-2017/</a></p><p><a href=\"https://www.forbes.com/sites/quora/2018/01/24/when-is-haskell-more-useful-than-r-or-python-in-data-science/\">https://www.forbes.com/sites/quora/2018/01/24/when-is-haskell-more-useful-than-r-or-python-in-data-science/</a></p><p><a href=\"https://github.com/google/jax\">https://github.com/google/jax</a></p><p><a href=\"https://www.reddit.com/r/learnpython/comments/ajds8s/classes_vs_functions_when_to_use_which_and_why/\">https://www.reddit.com/r/learnpython/comments/ajds8s/classes_vs_functions_when_to_use_which_and_why/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-march-10th/","uuid":"37aba664-a637-44fd-bf8d-9f48b4c79273","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c80be4448278b7063d8972f"}},{"node":{"id":"Ghost__Post__5c80bdb248278b7063d89723","title":"Lynx Roundup, March 9th","slug":"lynx-roundup-march-9th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/118.jpg","excerpt":"Speeding up Python with Rust!  Giving infrared vision to mice!  A new form of neural communication!","custom_excerpt":"Speeding up Python with Rust!  Giving infrared vision to mice!  A new form of neural communication!","created_at_pretty":"07 March, 2019","published_at_pretty":"10 March, 2019","updated_at_pretty":"10 March, 2019","created_at":"2019-03-07T01:44:02.000-05:00","published_at":"2019-03-10T04:59:00.000-04:00","updated_at":"2019-03-10T05:00:01.000-04:00","meta_title":"Lynx Roundup, March 9th | Hackers and Slackers","meta_description":"Speeding up Python with Rust!  Giving infrared vision to mice!  A new form of neural communication!","og_description":"Speeding up Python with Rust!  Giving infrared vision to mice!  A new form of neural communication!","og_image":"https://hackersandslackers.com/content/images/2019/03/118.jpg","og_title":"Lynx Roundup, March 9th","twitter_description":"Speeding up Python with Rust!  Giving infrared vision to mice!  A new form of neural communication!","twitter_image":"https://hackersandslackers.com/content/images/2019/03/118.jpg","twitter_title":"Lynx Roundup, March 9th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"\n\nhttps://developers.redhat.com/blog/2017/11/16/speed-python-using-rust/\n\nhttps://blog.dgraph.io/post/why-google-needed-graph-serving-system/\n\nhttps://foone.wordpress.com/2019/02/14/normalization-of-deviance/\n\nhttps://www.sciencealert.com/neuroscientists-say-they-ve-found-an-entirely-new-form-of-neural-communication\n\nhttps://gizmodo.com/incredible-experiment-gives-infrared-vision-to-mice-and-1832940986\n\nhttps://github.com/taki0112/Tensorflow-Cookbook\n\nhttps://towardsdatascience.com/the-complete-reinforcement-learning-dictionary-e16230b7d24e","html":"<p></p><p><a href=\"https://developers.redhat.com/blog/2017/11/16/speed-python-using-rust/\">https://developers.redhat.com/blog/2017/11/16/speed-python-using-rust/</a></p><p><a href=\"https://blog.dgraph.io/post/why-google-needed-graph-serving-system/\">https://blog.dgraph.io/post/why-google-needed-graph-serving-system/</a></p><p><a href=\"https://foone.wordpress.com/2019/02/14/normalization-of-deviance/\">https://foone.wordpress.com/2019/02/14/normalization-of-deviance/</a></p><p><a href=\"https://www.sciencealert.com/neuroscientists-say-they-ve-found-an-entirely-new-form-of-neural-communication\">https://www.sciencealert.com/neuroscientists-say-they-ve-found-an-entirely-new-form-of-neural-communication</a></p><p><a href=\"https://gizmodo.com/incredible-experiment-gives-infrared-vision-to-mice-and-1832940986\">https://gizmodo.com/incredible-experiment-gives-infrared-vision-to-mice-and-1832940986</a></p><p><a href=\"https://github.com/taki0112/Tensorflow-Cookbook\">https://github.com/taki0112/Tensorflow-Cookbook</a></p><p><a href=\"https://towardsdatascience.com/the-complete-reinforcement-learning-dictionary-e16230b7d24e\">https://towardsdatascience.com/the-complete-reinforcement-learning-dictionary-e16230b7d24e</a></p>","url":"https://hackersandslackers.com/lynx-roundup-march-9th/","uuid":"a123cd72-4cbd-4b3a-935c-8838d679f227","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c80bdb248278b7063d89723"}},{"node":{"id":"Ghost__Post__5c838ee05af763016e85085b","title":"Building a Client For Your GraphQL API","slug":"interacting-with-your-graphql-api","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/graphqlclient.jpg","excerpt":"Now that we have an understanding of GraphQL queries and API setup, it's time to get that data.","custom_excerpt":"Now that we have an understanding of GraphQL queries and API setup, it's time to get that data.","created_at_pretty":"09 March, 2019","published_at_pretty":"09 March, 2019","updated_at_pretty":"14 April, 2019","created_at":"2019-03-09T05:01:04.000-05:00","published_at":"2019-03-09T15:43:14.000-05:00","updated_at":"2019-04-14T05:36:35.000-04:00","meta_title":"Building a Client For Your GraphQL API | Hackers and Slackers","meta_description":"Now that we have an understanding of GraphQL queries and API setup, it's time to get that data.","og_description":"Now that we have an understanding of GraphQL queries and API setup, it's time to get that data.","og_image":"https://hackersandslackers.com/content/images/2019/03/graphqlclient.jpg","og_title":"Building a Client For Your GraphQL API","twitter_description":"Now that we have an understanding of GraphQL queries and API setup, it's time to get that data.","twitter_image":"https://hackersandslackers.com/content/images/2019/03/graphqlclient.jpg","twitter_title":"Building a Client For Your GraphQL API","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"GraphQL","slug":"graphql","description":"Ditch REST endpoints and build APIs that make sense with your workflow. Get started with Prisma or Apollo toolkits, and join the GraphQL bandwagon.","feature_image":null,"meta_description":"Ditch REST endpoints and build APIs that make sense with your workflow. Get started with Prisma or Apollo toolkits, and join the GraphQL bandwagon.","meta_title":"Build a GraphQL API | Hackers and Slackers","visibility":"public"},"tags":[{"name":"GraphQL","slug":"graphql","description":"Ditch REST endpoints and build APIs that make sense with your workflow. Get started with Prisma or Apollo toolkits, and join the GraphQL bandwagon.","feature_image":null,"meta_description":"Ditch REST endpoints and build APIs that make sense with your workflow. Get started with Prisma or Apollo toolkits, and join the GraphQL bandwagon.","meta_title":"Build a GraphQL API | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"},{"name":"Data Engineering","slug":"dataengineering","description":"The systematic collection and transformation of data via the creation of tools and pipelines.","feature_image":null,"meta_description":null,"meta_title":"Data Engineering | Hackers and Slackers","visibility":"public"},{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},{"name":"JavaScript","slug":"javascript","description":"JavaScript covering both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","feature_image":null,"meta_description":"JavaScript topics, both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","meta_title":"Javascript Tutorials | Hackers and Slackers","visibility":"public"},{"name":"#GraphQL Hype","slug":"graphql-hype","description":"Learn GraphQL syntax and see the reasons why the future of APIs is here to stay. We walk through everything from server/client setup to intricate tricks.","feature_image":"https://hackersandslackers.com/content/images/2019/03/graphqlseries.jpg","meta_description":"Learn GraphQL syntax and see the reasons why the future of APIs is here to stay. We walk through everything from server/client setup to intricate tricks.","meta_title":"GraphQL Hype","visibility":"internal"}],"plaintext":"If you had the pleasure of joining us last time, we had just completed a crash\ncourse in structuring GraphQL Queries\n[https://hackersandslackers.com/writing-your-first-graphql-queries/]. As much we\nall love studying abstract queries within the confines of a playground\nenvironment, the only real way to learn anything to overzealously attempt to\nbuild something way out of our skill level. Thus, we're going to shift gears and\nactually make something  with all the dry technical knowledge we've accumulated\nso far. Hooray!\n\nData Gone Wild: Exposing Your GraphQL Endpoint\nIf you're following along with Prisma as your GraphQL service, the endpoint for\nyour API defaults to [your_ip_address]:4466. What's more, you've probably\nnoticed it is publicly accessible. THIS IS VERY BAD.  Your server has full\nread/write access to whichever database you configured with it... if anybody\nfinds your endpoint hanging out in a Github commit somewhere, you've just lost\nyour database and everything in it. You're pretty much Equifax, and you should\nfeel bad.\n\nPrisma has a straightforward solution. While SSHed into\nwherever-you-set-up-your-server, check out the prisma.yaml  file which was\ngenerated as a result of when we first started getting set up. You know, this\ndirectory:\n\nmy-prisma\n├── datamodel.prisma\n├── docker-compose.yml\n├── generated\n│   └── prisma-client\n│       ├── index.ts\n│       └── prisma-schema.ts\n└── prisma.yml\n\n\nprisma.yaml  seems inglorious, but that's because it's hiding a secret; or\nshould I say, it's not  hiding a secret! Hah!... (you know, like, credentials).\nAnyway. \n\nIn order to enable authorization on our endpoint, we need to add a secret to our\n prisma.yaml  file. The secret can be anything you like; this is simply a string\nwhich will be used to generate a token. Add a line which defines secret  like\nthis:\n\nendpoint: http://localhost:4466\ndatamodel: datamodel.prisma\nsecret: HIIHGUTFTUY$VK$G$YI&TUYCUY$DT$\n\ngenerate:\n  - generator: typescript-client\n    output: ./generated/prisma-client/\n\n\nWith your secret stashed away safely, the Prisma CLI can now use this secret to\ncreate the authentication token. This will be the value we pass in the headers\nof our requests to actually interact with our Prisma server remotely.\n\nType $ prisma token  in your project directory to get the work of art:\n\n$ prisma token\neyJhbGciOiJIUzI1NiIsInUYGFUJGSFKHFGSJFKSFJKSFGJdfSwiaWF0IjoxNTUyMTYwMDQ5LCJleHAiOjE1NTI3NjQ4NDl9.xrubUg_dRc93bqqR4f6jGt-KvQRS2Xq6lRi0a0uw-C0\n\n\nNice; believe it or not, that was the \"hard\" part.\n\nEXTRA CREDIT: Assign a DNS Record and Apply a Security Certificate\nIf really want to, you could already query against your insecure IP address and\nstart receiving some information. That said, making HTTP  requests as such from \nHTTPS  origins will fail. Not only that, but you kind of look shitty for not\neven bothering to name your API, much less apply a free SSL certificate. For the\neasiest possible way to do this, see our post on using Caddy as an HTTP server\n[https://hackersandslackers.com/serve-docker-containers-with-custom-dns-and-ssl/]\n.\n\nBuilding a Javascript Client to Consume Our API\nWith our API nice and secure, we can start hitting this baby from wherever we\nwant... as long as it's a Node app. We'll start by requiring two packages:\n\nconst { GraphQLClient } = require('graphql-request')\nconst { dotenv } = require('dotenv').config()\n\n\nGraphQLClient  is the magic behind our client- it's everything. It also happens\nto be very similar to existing npm  libraries for making requests, such as \nnode-fetch [https://hackersandslackers.com/making-api-requests-with-nodejs/].\n\nWe'll also leverage the dotenv  library to make sure our API endpoint  and \nBearer token  stay out of source code. Try not to be Equifax whenever possible. \ndotenv  allows us to load sensitive values from a .env  file. Just in case you\nneed a refresher, that file should look like this:\n\nNODE_ENV=Production\nENDPOINT=https://yourapiendpoint.com\nAUTH=Bearer eyJhbGciOBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHGUYFIERIBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHZl-UGnMrOk3w\n\nInitialize The GraphQL Client\nI like to set up a one-time client for our API that we can go back and reuse if\nneed be. After pulling the API endpoint and token from our .env  file, setting\nup the client is easy:\n\nconst { GraphQLClient } = require('graphql-request')\nconst { dotenv } = require('dotenv').config()\n\nconst endpoint = process.env.ENDPOINT;\nconst token = process.env.AUTH;\n\n// Initialize GraphQL Client\nconst client = new GraphQLClient(endpoint, {\n  headers: {\n    Authorization: token\n  }\n});\n\n\nEMERGENCY MEETING: EVERYBODY HUDDLE UP\nOh I'm sorry, were you focusing on development? Unfortunately for you, I spent 8\nyears as a product manager, and I love  stopping everything suddenly to call\nemergency meetings.\n\nReal talk though, let's think back to the JIRA Kanban board example we've been\nusing for the last two posts. If you recall, we're going to write a query that\npopulates a 4-column Kanban board. The board represents a project (in this case,\n Hackers and Slackers) and each column represents a status  of ticket, like\nthis:\n\nconst statuses = ['Backlog', 'To Do', 'In Progress', 'Done'];\n\n\nWe've previously established that GraphQL queries are friendly to drop-in\nvariables. Let's use this to build some logic into our client, as opposed to\nhardcoding a massive query, which is really just the same 4 queries stitched\ntogether. Here's what a query to populate a single JIRA column looks like:\n\n// Structured query\nconst query = `\n    query JiraIssuesByStatus($project: String, $status: String) {\n         jiraIssues(where: {project: $project, status: $status}, \n         orderBy: timestamp_DESC, \n         first: 6) {\n            key\n            summary\n            epic\n            status\n            project\n            priority\n            issuetype\n            timestamp\n            }\n         }\n       `\n\nWe're passing both the project  and the issue status  as variables to our query.\nWe can make things a bit dynamic here by looping through our statuses and\nexecuting this query four times: each time resulting in a callback filling the\nappropriate columns with JIRA issues.\n\nThis approach is certainly less clunky and more dynamic than a hardcoded query.\nThat said, this still  isn't the best solution. Remember: the strength of\nGraphQL is the ability to get obscene amounts of data across complex\nrelationships in a single call. The best approach here would probably be to\nbuild the query string itself dynamically using fragments,  which we'll review\nin the next post.Game On: Our Client in Action\nconst { GraphQLClient } = require('graphql-request')\nconst { dotenv } = require('dotenv').config()\n\nconst endpoint = process.env.ENDPOINT;\nconst token = process.env.AUTH;\n\n// Initialize GraphQL Client\nconst client = new GraphQLClient(endpoint, {\n  headers: {\n    Authorization: token\n  }\n});\n\n// Structured query\nconst query = `\n   query JiraIssuesByStatus($project: String, $status: String) {\n      jiraIssues(where: {project: $project, status: $status}, orderBy: timestamp_DESC, first: 6) {\n         key\n         summary\n         epic\n         status\n         project\n         priority\n         issuetype\n         timestamp\n        }\n      }\n    `;\n\n// All Possible Issue Statuses\nconst statuses = ['Backlog', 'To Do', 'In Progress', 'Done'];\n\n// Execute a query per issue status\nfor(var i = 0; i < statuses.length; i++){\n  var variables = {\n    project: \"Hackers and Slackers\",\n    status: statuses[i]\n  }\n\n  client.request(query, variables).then((data) => {\n    console.log(data)\n  }).catch(err => {\n    console.log(err.response.errors) // GraphQL response errors\n    console.log(err.response.data) // Response data if available\n  });\n}\n\n\nWorks like a charm. We only had one endpoint, only had to set one header, and\ndidn't spend any time reading through hundreds of pages of documentation to\nfigure out which combination of REST API endpoint, parameters, and methods\nactually get us what we want. It's almost as if we're writing SQL now, except...\nit looks a lot more like... NoSQL. Thanks for the inspiration, MongoDB! Hope\nthat whole selling-open-source-software  thing works out.\n\nOh, and of course, here were the results of my query:\n\n{ jiraIssues:\n   [ { priority: 'Medium',\n       timestamp: 1550194791,\n       project: 'Hackers and Slackers',\n       key: 'HACK-778',\n       epic: 'Code snippets',\n       status: 'Backlog',\n       issuetype: 'Task',\n       summary: 'HLJS: set indentation level' },\n     { priority: 'Medium',\n       timestamp: 1550194782,\n\n       project: 'Hackers and Slackers',\n       key: 'HACK-555',\n       epic: 'Optimization',\n       status: 'Backlog',\n       issuetype: 'Task',\n       summary: 'Minify Babel' },\n     { priority: 'Medium',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-785',\n       epic: 'New Post',\n       status: 'Backlog',\n       issuetype: 'Task',\n       summary: 'Unix commands for data' },\n     { priority: 'Medium',\n       timestamp: 1550016000,\n       project: 'Hackers and Slackers',\n       key: 'HACK-251',\n       epic: 'New Post',\n       status: 'Backlog',\n       issuetype: 'Content',\n       summary: 'Using Ghost\\'s content filtering' },\n     { priority: 'Medium',\n       timestamp: 1550016000,\n       project: 'Hackers and Slackers',\n       key: 'HACK-302',\n       epic: 'Widgets',\n       status: 'Backlog',\n       issuetype: 'Integration',\n       summary: 'Discord channel signups ' },\n     { priority: 'Low',\n       timestamp: 1550016000,\n       project: 'Hackers and Slackers',\n       key: 'HACK-336',\n       epic: 'New Post',\n       status: 'Backlog',\n       issuetype: 'Content',\n       summary: 'Linux: Configuring your server to send SMTP emails' } ] }\n{ jiraIssues:\n   [ { priority: 'Medium',\n       timestamp: 1550224412,\n       project: 'Hackers and Slackers',\n       key: 'HACK-769',\n       epic: 'Projects Page',\n       status: 'Done',\n       issuetype: 'Bug',\n       summary: 'Fix projects dropdown' },\n     { priority: 'High',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-710',\n       epic: 'Lynx',\n       status: 'Done',\n       issuetype: 'Task',\n       summary: 'Implement auto text synopsis for Lynx posts' },\n     { priority: 'Medium',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-777',\n       epic: 'Creative',\n       status: 'Done',\n       issuetype: 'Task',\n       summary: 'Redesign footer to be informative; link-heavy' },\n     { priority: 'Highest',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-779',\n       epic: 'Urgent',\n       status: 'Done',\n       issuetype: 'Task',\n       summary: 'Changeover from cloudinary to DO' },\n     { priority: 'Medium',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-780',\n       epic: 'Creative',\n       status: 'Done',\n       issuetype: 'Task',\n       summary: 'Make mobile post title bold' },\n     { priority: 'High',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-781',\n       epic: 'Urgent',\n       status: 'Done',\n       issuetype: 'Bug',\n       summary: 'This post consistently doesn’t work on mobile' } ] }\n{ jiraIssues:\n   [ { priority: 'Low',\n       timestamp: 1550223282,\n       project: 'Hackers and Slackers',\n       key: 'HACK-782',\n       epic: 'Widgets',\n       status: 'To Do',\n       issuetype: 'Task',\n       summary:\n        'Lynx: on mobile, instead of full link, show domainname.com/...' },\n     { priority: 'High',\n       timestamp: 1550194799,\n       project: 'Hackers and Slackers',\n       key: 'HACK-774',\n       epic: 'Widgets',\n       status: 'To Do',\n       issuetype: 'Task',\n       summary: 'New Widget: Next/Previous article in series' },\n     { priority: 'Low',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-395',\n       epic: 'Page Templates',\n       status: 'To Do',\n       issuetype: 'Task',\n       summary: 'Create fallback image for posts with no image' },\n     { priority: 'High',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-756',\n       epic: 'Newsletter',\n       status: 'To Do',\n       issuetype: 'Major Functionality',\n       summary: 'Automate newsletter' },\n     { priority: 'Low',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-775',\n       epic: 'Projects Page',\n       status: 'To Do',\n       issuetype: 'Data & Analytics',\n       summary: 'Update issuetype icons' },\n     { priority: 'Lowest',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-776',\n       epic: 'Projects Page',\n       status: 'To Do',\n       issuetype: 'Task',\n       summary: 'Add fork icon to repos' } ] }\n{ jiraIssues:\n   [ { priority: 'High',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-784',\n       epic: 'New Post',\n       status: 'In Progress',\n       issuetype: 'Content',\n       summary: 'Welcome to SQL part1' } ] }\n\n\nBefore we say \"GG, 2ez, 1v1 me,\" know that we're  only getting started \nuncovering what GraphQL can do. It's not all just creating and deleting records\neither; we're talking full-on database JOIN equivalent type shit here. Stick\naround folks, the bandwagon's just getting warmed up.","html":"<p>If you had the pleasure of joining us last time, we had just completed a <a href=\"https://hackersandslackers.com/writing-your-first-graphql-queries/\">crash course in structuring GraphQL Queries</a>. As much we all love studying abstract queries within the confines of a playground environment, the only real way to learn anything to overzealously attempt to build something way out of our skill level. Thus, we're going to shift gears and actually <em>make something</em> with all the dry technical knowledge we've accumulated so far. Hooray!</p><h2 id=\"data-gone-wild-exposing-your-graphql-endpoint\">Data Gone Wild: Exposing Your GraphQL Endpoint</h2><p>If you're following along with Prisma as your GraphQL service, the endpoint for your API defaults to <code>[your_ip_address]:4466</code>. What's more, you've probably noticed it is publicly accessible. <strong>THIS IS VERY BAD.</strong> Your server has full read/write access to whichever database you configured with it... if anybody finds your endpoint hanging out in a Github commit somewhere, you've just lost your database and everything in it. You're pretty much Equifax, and you should feel bad.</p><p>Prisma has a straightforward solution. While SSHed into wherever-you-set-up-your-server, check out the <code>prisma.yaml</code> file which was generated as a result of when we first started getting set up. You know, this directory:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">my-prisma\n├── datamodel.prisma\n├── docker-compose.yml\n├── generated\n│   └── prisma-client\n│       ├── index.ts\n│       └── prisma-schema.ts\n└── prisma.yml\n</code></pre>\n<!--kg-card-end: markdown--><p><code>prisma.yaml</code> seems inglorious, but that's because it's hiding a secret; or should I say, it's <em>not</em> hiding a secret! Hah!... (you know, like, credentials). Anyway. </p><p>In order to enable authorization on our endpoint, we need to add a secret to our <code>prisma.yaml</code> file. The secret can be anything you like; this is simply a string which will be used to generate a token. Add a line which defines <code>secret</code> like this:</p><!--kg-card-begin: markdown--><pre><code class=\"language-yaml\">endpoint: http://localhost:4466\ndatamodel: datamodel.prisma\nsecret: HIIHGUTFTUY$VK$G$YI&amp;TUYCUY$DT$\n\ngenerate:\n  - generator: typescript-client\n    output: ./generated/prisma-client/\n</code></pre>\n<!--kg-card-end: markdown--><p>With your secret stashed away safely, the <strong>Prisma CLI </strong>can now use this secret to create the authentication token. This will be the value we pass in the headers of our requests to actually interact with our Prisma server remotely.</p><p>Type <code>$ prisma token</code> in your project directory to get the work of art:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">$ prisma token\neyJhbGciOiJIUzI1NiIsInUYGFUJGSFKHFGSJFKSFJKSFGJdfSwiaWF0IjoxNTUyMTYwMDQ5LCJleHAiOjE1NTI3NjQ4NDl9.xrubUg_dRc93bqqR4f6jGt-KvQRS2Xq6lRi0a0uw-C0\n</code></pre>\n<!--kg-card-end: markdown--><p>Nice; believe it or not, that was the \"hard\" part.</p><h3 id=\"extra-credit-assign-a-dns-record-and-apply-a-security-certificate\">EXTRA CREDIT: Assign a DNS Record and Apply a Security Certificate</h3><p>If really want to, you could already query against your insecure IP address and start receiving some information. That said, making <strong>HTTP</strong> requests as such from <strong>HTTPS</strong> origins will fail. Not only that, but you kind of look shitty for not even bothering to name your API, much less apply a free SSL certificate. For the easiest possible way to do this, see our post on <a href=\"https://hackersandslackers.com/serve-docker-containers-with-custom-dns-and-ssl/\">using Caddy as an HTTP server</a>.</p><h2 id=\"building-a-javascript-client-to-consume-our-api\">Building a Javascript Client to Consume Our API</h2><p>With our API nice and secure, we can start hitting this baby from wherever we want... as long as it's a Node app. We'll start by requiring two packages:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">const { GraphQLClient } = require('graphql-request')\nconst { dotenv } = require('dotenv').config()\n</code></pre>\n<!--kg-card-end: markdown--><p><code>GraphQLClient</code> is the magic behind our client- it's everything. It also happens to be very similar to existing <strong>npm</strong> libraries for making requests, such as <a href=\"https://hackersandslackers.com/making-api-requests-with-nodejs/\">node-fetch</a>.</p><p>We'll also leverage the <code>dotenv</code> library to make sure our <strong>API endpoint</strong> and <strong>Bearer token</strong> stay out of source code. Try not to be Equifax whenever possible. <code>dotenv</code> allows us to load sensitive values from a <code>.env</code> file. Just in case you need a refresher, that file should look like this:</p><!--kg-card-begin: code--><pre><code>NODE_ENV=Production\nENDPOINT=https://yourapiendpoint.com\nAUTH=Bearer eyJhbGciOBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHGUYFIERIBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHZl-UGnMrOk3w</code></pre><!--kg-card-end: code--><h3 id=\"initialize-the-graphql-client\">Initialize The GraphQL Client</h3><p>I like to set up a one-time client for our API that we can go back and reuse if need be. After pulling the API endpoint and token from our <code>.env</code> file, setting up the client is easy:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">const { GraphQLClient } = require('graphql-request')\nconst { dotenv } = require('dotenv').config()\n\nconst endpoint = process.env.ENDPOINT;\nconst token = process.env.AUTH;\n\n// Initialize GraphQL Client\nconst client = new GraphQLClient(endpoint, {\n  headers: {\n    Authorization: token\n  }\n});\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"emergency-meeting-everybody-huddle-up\">EMERGENCY MEETING: EVERYBODY HUDDLE UP</h2><p>Oh I'm sorry, were you focusing on development? Unfortunately for you, I spent 8 years as a product manager, and I <em>love</em> stopping everything suddenly to call emergency meetings.</p><p>Real talk though, let's think back to the JIRA Kanban board example we've been using for the last two posts. If you recall, we're going to write a query that populates a 4-column Kanban board. The board represents a <em>project </em>(in this case, <strong>Hackers and Slackers</strong>) and each column represents a <em>status</em> of ticket, like this:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">const statuses = ['Backlog', 'To Do', 'In Progress', 'Done'];\n</code></pre>\n<!--kg-card-end: markdown--><p>We've previously established that GraphQL queries are friendly to drop-in variables. Let's use this to build some logic into our client, as opposed to hardcoding a massive query, which is really just the same 4 queries stitched together. Here's what a query to populate a single JIRA column looks like:</p><!--kg-card-begin: code--><pre><code>// Structured query\nconst query = `\n    query JiraIssuesByStatus($project: String, $status: String) {\n         jiraIssues(where: {project: $project, status: $status}, \n         orderBy: timestamp_DESC, \n         first: 6) {\n            key\n            summary\n            epic\n            status\n            project\n            priority\n            issuetype\n            timestamp\n            }\n         }\n       `</code></pre><!--kg-card-end: code--><p>We're passing both the <em>project</em> and the <em>issue status</em> as variables to our query. We can make things a bit dynamic here by looping through our statuses and executing this query four times: each time resulting in a callback filling the appropriate columns with JIRA issues.</p><!--kg-card-begin: html--><div class=\"protip\">\nThis approach is certainly less clunky and more dynamic than a hardcoded query. That said, this <i>still</i> isn't the best solution. Remember: the strength of GraphQL is the ability to get obscene amounts of data across complex relationships in a single call. The best approach here would probably be to build the query string itself dynamically using <strong>fragments,</strong> which we'll review in the next post.\n</div><!--kg-card-end: html--><h2 id=\"game-on-our-client-in-action\">Game On: Our Client in Action</h2><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">const { GraphQLClient } = require('graphql-request')\nconst { dotenv } = require('dotenv').config()\n\nconst endpoint = process.env.ENDPOINT;\nconst token = process.env.AUTH;\n\n// Initialize GraphQL Client\nconst client = new GraphQLClient(endpoint, {\n  headers: {\n    Authorization: token\n  }\n});\n\n// Structured query\nconst query = `\n   query JiraIssuesByStatus($project: String, $status: String) {\n      jiraIssues(where: {project: $project, status: $status}, orderBy: timestamp_DESC, first: 6) {\n         key\n         summary\n         epic\n         status\n         project\n         priority\n         issuetype\n         timestamp\n        }\n      }\n    `;\n\n// All Possible Issue Statuses\nconst statuses = ['Backlog', 'To Do', 'In Progress', 'Done'];\n\n// Execute a query per issue status\nfor(var i = 0; i &lt; statuses.length; i++){\n  var variables = {\n    project: &quot;Hackers and Slackers&quot;,\n    status: statuses[i]\n  }\n\n  client.request(query, variables).then((data) =&gt; {\n    console.log(data)\n  }).catch(err =&gt; {\n    console.log(err.response.errors) // GraphQL response errors\n    console.log(err.response.data) // Response data if available\n  });\n}\n</code></pre>\n<!--kg-card-end: markdown--><p>Works like a charm. We only had one endpoint, only had to set one header, and didn't spend any time reading through hundreds of pages of documentation to figure out which combination of REST API endpoint, parameters, and methods actually get us what we want. It's almost as if we're writing SQL now, except... it looks a lot more like... NoSQL. Thanks for the inspiration, <strong>MongoDB</strong>! Hope that whole <em>selling-open-source-software</em> thing works out.</p><p>Oh, and of course, here were the results of my query:</p><!--kg-card-begin: markdown--><pre><code class=\"language-json\">{ jiraIssues:\n   [ { priority: 'Medium',\n       timestamp: 1550194791,\n       project: 'Hackers and Slackers',\n       key: 'HACK-778',\n       epic: 'Code snippets',\n       status: 'Backlog',\n       issuetype: 'Task',\n       summary: 'HLJS: set indentation level' },\n     { priority: 'Medium',\n       timestamp: 1550194782,\n\n       project: 'Hackers and Slackers',\n       key: 'HACK-555',\n       epic: 'Optimization',\n       status: 'Backlog',\n       issuetype: 'Task',\n       summary: 'Minify Babel' },\n     { priority: 'Medium',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-785',\n       epic: 'New Post',\n       status: 'Backlog',\n       issuetype: 'Task',\n       summary: 'Unix commands for data' },\n     { priority: 'Medium',\n       timestamp: 1550016000,\n       project: 'Hackers and Slackers',\n       key: 'HACK-251',\n       epic: 'New Post',\n       status: 'Backlog',\n       issuetype: 'Content',\n       summary: 'Using Ghost\\'s content filtering' },\n     { priority: 'Medium',\n       timestamp: 1550016000,\n       project: 'Hackers and Slackers',\n       key: 'HACK-302',\n       epic: 'Widgets',\n       status: 'Backlog',\n       issuetype: 'Integration',\n       summary: 'Discord channel signups ' },\n     { priority: 'Low',\n       timestamp: 1550016000,\n       project: 'Hackers and Slackers',\n       key: 'HACK-336',\n       epic: 'New Post',\n       status: 'Backlog',\n       issuetype: 'Content',\n       summary: 'Linux: Configuring your server to send SMTP emails' } ] }\n{ jiraIssues:\n   [ { priority: 'Medium',\n       timestamp: 1550224412,\n       project: 'Hackers and Slackers',\n       key: 'HACK-769',\n       epic: 'Projects Page',\n       status: 'Done',\n       issuetype: 'Bug',\n       summary: 'Fix projects dropdown' },\n     { priority: 'High',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-710',\n       epic: 'Lynx',\n       status: 'Done',\n       issuetype: 'Task',\n       summary: 'Implement auto text synopsis for Lynx posts' },\n     { priority: 'Medium',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-777',\n       epic: 'Creative',\n       status: 'Done',\n       issuetype: 'Task',\n       summary: 'Redesign footer to be informative; link-heavy' },\n     { priority: 'Highest',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-779',\n       epic: 'Urgent',\n       status: 'Done',\n       issuetype: 'Task',\n       summary: 'Changeover from cloudinary to DO' },\n     { priority: 'Medium',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-780',\n       epic: 'Creative',\n       status: 'Done',\n       issuetype: 'Task',\n       summary: 'Make mobile post title bold' },\n     { priority: 'High',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-781',\n       epic: 'Urgent',\n       status: 'Done',\n       issuetype: 'Bug',\n       summary: 'This post consistently doesn’t work on mobile' } ] }\n{ jiraIssues:\n   [ { priority: 'Low',\n       timestamp: 1550223282,\n       project: 'Hackers and Slackers',\n       key: 'HACK-782',\n       epic: 'Widgets',\n       status: 'To Do',\n       issuetype: 'Task',\n       summary:\n        'Lynx: on mobile, instead of full link, show domainname.com/...' },\n     { priority: 'High',\n       timestamp: 1550194799,\n       project: 'Hackers and Slackers',\n       key: 'HACK-774',\n       epic: 'Widgets',\n       status: 'To Do',\n       issuetype: 'Task',\n       summary: 'New Widget: Next/Previous article in series' },\n     { priority: 'Low',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-395',\n       epic: 'Page Templates',\n       status: 'To Do',\n       issuetype: 'Task',\n       summary: 'Create fallback image for posts with no image' },\n     { priority: 'High',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-756',\n       epic: 'Newsletter',\n       status: 'To Do',\n       issuetype: 'Major Functionality',\n       summary: 'Automate newsletter' },\n     { priority: 'Low',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-775',\n       epic: 'Projects Page',\n       status: 'To Do',\n       issuetype: 'Data &amp; Analytics',\n       summary: 'Update issuetype icons' },\n     { priority: 'Lowest',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-776',\n       epic: 'Projects Page',\n       status: 'To Do',\n       issuetype: 'Task',\n       summary: 'Add fork icon to repos' } ] }\n{ jiraIssues:\n   [ { priority: 'High',\n       timestamp: 1550102400,\n       project: 'Hackers and Slackers',\n       key: 'HACK-784',\n       epic: 'New Post',\n       status: 'In Progress',\n       issuetype: 'Content',\n       summary: 'Welcome to SQL part1' } ] }\n</code></pre>\n<!--kg-card-end: markdown--><p>Before we say \"GG, 2ez, 1v1 me,\" know that we're<em> only getting started</em> uncovering what GraphQL can do. It's not all just creating and deleting records either; we're talking full-on database JOIN equivalent type shit here. Stick around folks, the bandwagon's just getting warmed up.</p>","url":"https://hackersandslackers.com/interacting-with-your-graphql-api/","uuid":"34fef193-6a56-4754-a329-3d34571fcd15","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c838ee05af763016e85085b"}}]}},"pageContext":{"pageNumber":2,"humanPageNumber":3,"skip":24,"limit":12,"numberOfPages":33,"previousPagePath":"/page/2","nextPagePath":"/page/4"}}