{"data":{"ghostPost":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673719","title":"Creating an AMI with HashiCorp Packer","slug":"hashicorp-packer","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/10/packer4@2x.jpg","excerpt":"HashiCorp's version control for infrastructure .","custom_excerpt":"HashiCorp's version control for infrastructure .","created_at_pretty":"02 October, 2018","published_at_pretty":"03 October, 2018","updated_at_pretty":"30 December, 2018","created_at":"2018-10-02T16:05:02.000-04:00","published_at":"2018-10-03T07:00:00.000-04:00","updated_at":"2018-12-30T07:00:11.000-05:00","meta_title":"Creating an AMI with HashiCorp Packer | Hackers and Slackers","meta_description":"Infrastructure as code has become part of the buzzword bingo surrounding operational teams and their desired optimal workflows.","og_description":"Infrastructure as code has become part of the buzzword bingo surrounding operational teams and their desired optimal workflows.","og_image":"https://hackersandslackers.com/content/images/2018/10/packer4@2x.jpg","og_title":"Creating an AMI with HashiCorp Packer","twitter_description":"Infrastructure as code has become part of the buzzword bingo surrounding operational teams and their desired optimal workflows.","twitter_image":"https://hackersandslackers.com/content/images/2018/10/packer4@2x.jpg","twitter_title":"Creating an AMI with HashiCorp Packer","authors":[{"name":"David Aquino","slug":"david","bio":"Spent years in the military to become a killing machine using only 2 CDJs. Automated all of life's inconveniences, including investments in the financial markets.","profile_image":"https://hackersandslackers.com/content/images/2019/03/keno2.jpg","twitter":"@_k3n0","facebook":null,"website":null}],"primary_author":{"name":"David Aquino","slug":"david","bio":"Spent years in the military to become a killing machine using only 2 CDJs. Automated all of life's inconveniences, including investments in the financial markets.","profile_image":"https://hackersandslackers.com/content/images/2019/03/keno2.jpg","twitter":"@_k3n0","facebook":null,"website":null},"primary_tag":{"name":"DevOps","slug":"devops","description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","feature_image":null,"meta_description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","meta_title":"DevOps: Networking And Server Configuration | Hackers and Slackers","visibility":"public"},"tags":[{"name":"DevOps","slug":"devops","description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","feature_image":null,"meta_description":"Configuring server-side infrastructure, cloud architecture, and sometimes networking. Even automate your DevOps workflow with products from Hashicorp.","meta_title":"DevOps: Networking And Server Configuration | Hackers and Slackers","visibility":"public"},{"name":"AWS","slug":"aws","description":"Monolithic cloud architecture via microservices. Become familiar with AWS products, account administration, security practices, and tips to make it all easier.","feature_image":null,"meta_description":"Become familiar with AWS services, account administration, security practices, and tips to make it all easier.","meta_title":"Learn AWS | Hackers and Slackers","visibility":"public"},{"name":"Hashicorp","slug":"hashicorp","description":"Automate serverless architecture for enterprise AWS Cloud instances with Terraform, or leverage products such as Vault and Packer to improve your ecosystem.","feature_image":null,"meta_description":"Automate serverless architecture for enterprise AWS Cloud instances with Terraform, or leverage products such as Vault and Packer to improve your ecosystem.","meta_title":"Hashicorp Suite | Hackers and Slackers","visibility":"public"}],"plaintext":"Why use Packer [https://www.packer.io/]? Infrastructure as code has become part\nof the buzzword bingo surrounding operational teams and their desired optimal\nworkflows.\n\nOne could theoretically just start with a base AMI and manually update it and\nthen re-save it as a new AMI, but this process is not repeatable.  We can check\nin our desired infrastructure states as code to version control.  This is good\npractice for change control management.  We can readily see what worked before\nand what was changed in the latest update.  If something catastrophic happens or\nwe encounter unforeseen issues, we can always rollback to a previous state.\n\nI'm the first new guy on our ops team in a few years.  We work with a base image\nto create our EC2 instances and that image does not have my ssh keys.  In our\ncurrent workflow, when I spin up a new instance using our latest base AMI, I\ncan't ssh to the box because my key isn't on there.  Amazon has also released\nAmazon Linux 2, so we had a card to update the base AMI in the backlog.  I\npicked up this task and found the HashiCorp tool to be very powerful and useful.\n\n{\n  \"description\": \"Builds a Base Image for EC2 AWS provisioner\",\n  \"variables\":{\n    \"hostname\": \"cne-aws-trusty64\",\n    \"config_dir\": \".\"\n  },\n\n  \"builders\": [\n    {\n      \"type\": \"amazon-ebs\",\n      \"region\": \"us-east-1\",\n      \"source_ami\": \"ami-04681a1dbd79675a5\",\n      \"instance_type\": \"m5.xlarge\",\n      \"ssh_username\": \"ec2-user\",\n      \"ami_name\": \"snapdragon-v3.6.9\",\n      \"subnet_id\": \"subnet-0000000000\",\n      \"tags\": {\n        \"OS_Version\": \"Amazon Linux 2\",\n        \"Release\": \"2017-12\",\n        \"Builder\": \"packer\"\n      },\n      \"ssh_timeout\": \"60m\"\n    }\n  ],\n\n  \"provisioners\": [\n    {\n      \"type\": \"shell\",\n        \"scripts\": [\n          \"scripts/setup-example.sh\"\n        ]\n    } \n  ]\n}\n\n\nIn our setup script, we install dependencies and a configuration management tool\nadds users, and updates permissions as needed for all of our applications.  It's\nbasically the equivalent of whatever you would do manually to achieve a desired\nstate.","html":"<p><strong>Why use <a href=\"https://www.packer.io/\">Packer</a>? </strong>Infrastructure as code has become part of the buzzword bingo surrounding operational teams and their desired optimal workflows.</p><p>One could theoretically just start with a base AMI and manually update it and then re-save it as a new AMI, but this process is not repeatable.  We can check in our desired infrastructure states as code to version control.  This is good practice for change control management.  We can readily see what worked before and what was changed in the latest update.  If something catastrophic happens or we encounter unforeseen issues, we can always rollback to a previous state.</p><p>I'm the first new guy on our ops team in a few years.  We work with a base image to create our EC2 instances and that image does not have my ssh keys.  In our current workflow, when I spin up a new instance using our latest base AMI, I can't ssh to the box because my key isn't on there.  Amazon has also released Amazon Linux 2, so we had a card to update the base AMI in the backlog.  I picked up this task and found the HashiCorp tool to be very powerful and useful.</p><pre><code>{\n  &quot;description&quot;: &quot;Builds a Base Image for EC2 AWS provisioner&quot;,\n  &quot;variables&quot;:{\n    &quot;hostname&quot;: &quot;cne-aws-trusty64&quot;,\n    &quot;config_dir&quot;: &quot;.&quot;\n  },\n\n  &quot;builders&quot;: [\n    {\n      &quot;type&quot;: &quot;amazon-ebs&quot;,\n      &quot;region&quot;: &quot;us-east-1&quot;,\n      &quot;source_ami&quot;: &quot;ami-04681a1dbd79675a5&quot;,\n      &quot;instance_type&quot;: &quot;m5.xlarge&quot;,\n      &quot;ssh_username&quot;: &quot;ec2-user&quot;,\n      &quot;ami_name&quot;: &quot;snapdragon-v3.6.9&quot;,\n      &quot;subnet_id&quot;: &quot;subnet-0000000000&quot;,\n      &quot;tags&quot;: {\n        &quot;OS_Version&quot;: &quot;Amazon Linux 2&quot;,\n        &quot;Release&quot;: &quot;2017-12&quot;,\n        &quot;Builder&quot;: &quot;packer&quot;\n      },\n      &quot;ssh_timeout&quot;: &quot;60m&quot;\n    }\n  ],\n\n  &quot;provisioners&quot;: [\n    {\n      &quot;type&quot;: &quot;shell&quot;,\n        &quot;scripts&quot;: [\n          &quot;scripts/setup-example.sh&quot;\n        ]\n    } \n  ]\n}\n</code></pre>\n<p>In our setup script, we install dependencies and a configuration management tool adds users, and updates permissions as needed for all of our applications.  It's basically the equivalent of whatever you would do manually to achieve a desired state.</p>","url":"https://hackersandslackers.com/hashicorp-packer/","uuid":"0c50713b-1c8c-4071-b65d-e57fd87f3536","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5bb3cf6e7ae39d0d60547523"}},"pageContext":{"slug":"hashicorp-packer"}}