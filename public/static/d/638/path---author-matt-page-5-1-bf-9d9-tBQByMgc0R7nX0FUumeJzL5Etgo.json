{"data":{"ghostAuthor":{"slug":"matt","name":"Matthew Alhonte","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","cover_image":"https://res-1.cloudinary.com/hackers-and-slackers/image/upload/q_auto/v1/images/lynxcover_o.jpg","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","location":"Center of the Universe","website":null,"twitter":"@MattAlhonte","facebook":null},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5c4bf3b4fd307f72b350ae39","title":"Lynx Roundup, February 8th","slug":"lynx-roundup-february-8th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/125-1@2x.jpg","excerpt":"Time series in Pandas!  Donald Knuth Lectures on Algorithms!  Walking through PCA as matrix transformations!","custom_excerpt":"Time series in Pandas!  Donald Knuth Lectures on Algorithms!  Walking through PCA as matrix transformations!","created_at_pretty":"26 January, 2019","published_at_pretty":"09 February, 2019","updated_at_pretty":"26 February, 2019","created_at":"2019-01-26T00:44:20.000-05:00","published_at":"2019-02-08T21:06:00.000-05:00","updated_at":"2019-02-25T21:06:41.000-05:00","meta_title":"Lynx Roundup, February 8th | Hackers and Slackers","meta_description":"Time series in Pandas!  Donald Knuth Lectures on Algorithms!  Walking through PCA as matrix transformations!","og_description":"Time series in Pandas!  Donald Knuth Lectures on Algorithms!  Walking through PCA as matrix transformations!","og_image":"https://hackersandslackers.com/content/images/lynx/125-1@2x.jpg","og_title":"Lynx Roundup, February 8th","twitter_description":"Time series in Pandas!  Donald Knuth Lectures on Algorithms!  Walking through PCA as matrix transformations!","twitter_image":"https://hackersandslackers.com/content/images/lynx/125-1@2x.jpg","twitter_title":"Lynx Roundup, February 8th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://towardsdatascience.com/the-next-level-of-data-visualization-in-python-dd6e99039d5e\n\nhttps://www.dataquest.io/blog/tutorial-time-series-analysis-pandas/\n\nhttps://www.braze.com/perspectives/article/building-braze-job-queues-resiliency\n\nhttps://www.wired.com/story/jos-jansen-universe-amsterdam-science-park/\n\nhttps://towardsdatascience.com/visualizing-principal-component-analysis-with-matrix-transforms-d17dabc8230e\n\nhttps://www.helsinki.fi/en/news/sustainability-news/how-trees-and-turnips-grow-fatter-researchers-unlock-the-secrets-of-radial-growth","html":"<p></p><p><a href=\"https://towardsdatascience.com/the-next-level-of-data-visualization-in-python-dd6e99039d5e\">https://towardsdatascience.com/the-next-level-of-data-visualization-in-python-dd6e99039d5e</a></p><p><a href=\"https://www.dataquest.io/blog/tutorial-time-series-analysis-pandas/\">https://www.dataquest.io/blog/tutorial-time-series-analysis-pandas/</a></p><p><a href=\"https://www.braze.com/perspectives/article/building-braze-job-queues-resiliency\">https://www.braze.com/perspectives/article/building-braze-job-queues-resiliency</a></p><p><a href=\"https://www.wired.com/story/jos-jansen-universe-amsterdam-science-park/\">https://www.wired.com/story/jos-jansen-universe-amsterdam-science-park/</a></p><figure class=\"kg-card kg-embed-card\"><iframe width=\"480\" height=\"270\" src=\"https://www.youtube.com/embed/videoseries?list=PL94E35692EB9D36F3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></figure><p><a href=\"https://towardsdatascience.com/visualizing-principal-component-analysis-with-matrix-transforms-d17dabc8230e\">https://towardsdatascience.com/visualizing-principal-component-analysis-with-matrix-transforms-d17dabc8230e</a></p><p><a href=\"https://www.helsinki.fi/en/news/sustainability-news/how-trees-and-turnips-grow-fatter-researchers-unlock-the-secrets-of-radial-growth\">https://www.helsinki.fi/en/news/sustainability-news/how-trees-and-turnips-grow-fatter-researchers-unlock-the-secrets-of-radial-growth</a></p>","url":"https://hackersandslackers.com/lynx-roundup-february-8th/","uuid":"5a18ef36-f870-4a25-8d22-c1f466c13608","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c4bf3b4fd307f72b350ae39"}},{"node":{"id":"Ghost__Post__5c4bf34afd307f72b350ae2e","title":"Lynx Roundup, February 7th","slug":"lynx-roundup-february-7th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/02/116-1-4.jpg","excerpt":"PySpark & Jupyter backed by EMR!  Analyzing your filesystem with Python!  How Quizlet uses Hierarchical Classification!","custom_excerpt":"PySpark & Jupyter backed by EMR!  Analyzing your filesystem with Python!  How Quizlet uses Hierarchical Classification!","created_at_pretty":"26 January, 2019","published_at_pretty":"07 February, 2019","updated_at_pretty":"28 February, 2019","created_at":"2019-01-26T00:42:34.000-05:00","published_at":"2019-02-07T07:00:00.000-05:00","updated_at":"2019-02-27T23:05:43.000-05:00","meta_title":"Lynx Roundup, February 7th | Hackers and Slackers","meta_description":"PySpark & Jupyter backed by EMR!  Analyzing your filesystem with Python!  How Quizlet uses Hierarchical Classification!","og_description":"PySpark & Jupyter backed by EMR!  Analyzing your filesystem with Python!  How Quizlet uses Hierarchical Classification!","og_image":"https://hackersandslackers.com/content/images/2019/02/116-1-4.jpg","og_title":"Lynx Roundup, February 7th","twitter_description":"PySpark & Jupyter backed by EMR!  Analyzing your filesystem with Python!  How Quizlet uses Hierarchical Classification!","twitter_image":"https://hackersandslackers.com/content/images/2019/02/116-1-4.jpg","twitter_title":"Lynx Roundup, February 7th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://data805.com/data-science-learning-goals/\n\nhttps://medium.freecodecamp.org/how-to-build-your-data-science-muscle-memory-slicing-and-mapping-data-for-machine-learning-d38e65986c69\n\nhttps://twitter.com/techworkersco/status/1088568748980588544\n\nhttps://towardsdatascience.com/use-pyspark-with-a-jupyter-notebook-in-an-aws-emr-cluster-e5abc4cc9bdd\n\nhttp://janakiev.com/blog/python-filesystem-analysis/\n\nhttps://towardsdatascience.com/keeping-it-classy-how-quizlet-uses-hierarchical-classification-to-label-content-with-academic-4e89a175ebe3\n\nhttps://towardsdatascience.com/3-steps-to-a-clean-dataset-with-pandas-2b80ef0c81ae","html":"<p></p><p><a href=\"https://data805.com/data-science-learning-goals/\">https://data805.com/data-science-learning-goals/</a></p><p><a href=\"https://medium.freecodecamp.org/how-to-build-your-data-science-muscle-memory-slicing-and-mapping-data-for-machine-learning-d38e65986c69\">https://medium.freecodecamp.org/how-to-build-your-data-science-muscle-memory-slicing-and-mapping-data-for-machine-learning-d38e65986c69</a></p><p><a href=\"https://twitter.com/techworkersco/status/1088568748980588544\">https://twitter.com/techworkersco/status/1088568748980588544</a></p><p><a href=\"https://towardsdatascience.com/use-pyspark-with-a-jupyter-notebook-in-an-aws-emr-cluster-e5abc4cc9bdd\">https://towardsdatascience.com/use-pyspark-with-a-jupyter-notebook-in-an-aws-emr-cluster-e5abc4cc9bdd</a></p><p><a href=\"http://janakiev.com/blog/python-filesystem-analysis/\">http://janakiev.com/blog/python-filesystem-analysis/</a></p><p><a href=\"https://towardsdatascience.com/keeping-it-classy-how-quizlet-uses-hierarchical-classification-to-label-content-with-academic-4e89a175ebe3\">https://towardsdatascience.com/keeping-it-classy-how-quizlet-uses-hierarchical-classification-to-label-content-with-academic-4e89a175ebe3</a></p><p><a href=\"https://towardsdatascience.com/3-steps-to-a-clean-dataset-with-pandas-2b80ef0c81ae\">https://towardsdatascience.com/3-steps-to-a-clean-dataset-with-pandas-2b80ef0c81ae</a></p>","url":"https://hackersandslackers.com/lynx-roundup-february-7th/","uuid":"c135be27-3298-4f5f-a5db-40a99e65900b","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c4bf34afd307f72b350ae2e"}},{"node":{"id":"Ghost__Post__5c4bf2ccfd307f72b350ae25","title":"Lynx Roundup, February 6th","slug":"lynx-roundup-february-6th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/103-1@2x.jpg","excerpt":"Async in Python!  Prototyping Data Dashboards in Blazer!  Election Audits in Jupyter!","custom_excerpt":"Async in Python!  Prototyping Data Dashboards in Blazer!  Election Audits in Jupyter!","created_at_pretty":"26 January, 2019","published_at_pretty":"06 February, 2019","updated_at_pretty":"06 February, 2019","created_at":"2019-01-26T00:40:28.000-05:00","published_at":"2019-02-06T07:00:00.000-05:00","updated_at":"2019-02-06T07:00:00.000-05:00","meta_title":"Lynx Roundup, February 6th | Hackers and Slackers","meta_description":"Async in Python!  Prototyping Data Dashboards in Blazer!  Election Audits in Jupyter!","og_description":"Async in Python!  Prototyping Data Dashboards in Blazer!  Election Audits in Jupyter!","og_image":"https://hackersandslackers.com/content/images/lynx/103-1@2x.jpg","og_title":"Lynx Roundup, February 6th","twitter_description":"Async in Python!  Prototyping Data Dashboards in Blazer!  Election Audits in Jupyter!","twitter_image":"https://hackersandslackers.com/content/images/lynx/103-1@2x.jpg","twitter_title":"Lynx Roundup, February 6th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.technologyreview.com/s/612775/algorithms-criminal-justice-ai/\n\nhttps://realpython.com/async-io-python/\n\nhttps://modern-sql.com/blog/2019-01/sqlite-in-2018\n\nhttps://medicalxpress.com/news/2019-01-brain.html\n\nhttps://blog.jupyter.org/jupyter-notebooks-for-post-election-audits-4bdd13d3e800\n\nhttp://themlbook.com/wiki/doku.php\n\nhttps://github.com/ankane/blazer","html":"<p></p><p><a href=\"https://www.technologyreview.com/s/612775/algorithms-criminal-justice-ai/\">https://www.technologyreview.com/s/612775/algorithms-criminal-justice-ai/</a></p><p><a href=\"https://realpython.com/async-io-python/\">https://realpython.com/async-io-python/</a></p><p><a href=\"https://modern-sql.com/blog/2019-01/sqlite-in-2018\">https://modern-sql.com/blog/2019-01/sqlite-in-2018</a></p><p><a href=\"https://medicalxpress.com/news/2019-01-brain.html\">https://medicalxpress.com/news/2019-01-brain.html</a></p><p><a href=\"https://blog.jupyter.org/jupyter-notebooks-for-post-election-audits-4bdd13d3e800\">https://blog.jupyter.org/jupyter-notebooks-for-post-election-audits-4bdd13d3e800</a></p><p><a href=\"http://themlbook.com/wiki/doku.php\">http://themlbook.com/wiki/doku.php</a></p><p><a href=\"https://github.com/ankane/blazer\">https://github.com/ankane/blazer</a></p>","url":"https://hackersandslackers.com/lynx-roundup-february-6th/","uuid":"b1d8e1c7-974f-455a-8731-110143a2dddb","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5c4bf2ccfd307f72b350ae25"}},{"node":{"id":"Ghost__Post__5c4bf24cfd307f72b350ae20","title":"Lynx Roundup, February 5th","slug":"lynx-roundup-february-5th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/102-1@2x.jpg","excerpt":"Data Science cheat sheets!  Periodic Table of Brains!  Data science interviews!","custom_excerpt":"Data Science cheat sheets!  Periodic Table of Brains!  Data science interviews!","created_at_pretty":"26 January, 2019","published_at_pretty":"05 February, 2019","updated_at_pretty":"05 February, 2019","created_at":"2019-01-26T00:38:20.000-05:00","published_at":"2019-02-05T07:00:00.000-05:00","updated_at":"2019-02-05T07:00:00.000-05:00","meta_title":"Lynx Roundup, February 5th | Hackers and Slackers","meta_description":"Data Science cheat sheets!  Periodic Table of Brains!  Data science interviews!","og_description":"Data Science cheat sheets!  Periodic Table of Brains!  Data science interviews!","og_image":"https://hackersandslackers.com/content/images/lynx/102-1@2x.jpg","og_title":"Lynx Roundup, February 5th","twitter_description":"Data Science cheat sheets!  Periodic Table of Brains!  Data science interviews!","twitter_image":"https://hackersandslackers.com/content/images/lynx/102-1@2x.jpg","twitter_title":"Lynx Roundup, February 5th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://tcf.org/content/report/datafication-employment-surveillance-capitalism-shaping-workers-futures-without-knowledge/\n\nhttps://github.com/FavioVazquez/ds-cheatsheets\n\nhttps://www.infoq.com/articles/no-reliable-messaging\n\nhttps://www.nature.com/articles/s41591-018-0316-z.epdf\n\nhttp://citeseerx.ist.psu.edu/viewdoc/download\n\nhttps://towardsdatascience.com/mastering-the-data-science-interview-15f9c0a558a7\n\nhttps://gizmodo.com/how-a-periodic-table-of-brains-could-revolutionize-neur-1831622367","html":"<p></p><p><a href=\"https://tcf.org/content/report/datafication-employment-surveillance-capitalism-shaping-workers-futures-without-knowledge/\">https://tcf.org/content/report/datafication-employment-surveillance-capitalism-shaping-workers-futures-without-knowledge/</a></p><p><a href=\"https://github.com/FavioVazquez/ds-cheatsheets\">https://github.com/FavioVazquez/ds-cheatsheets</a></p><p><a href=\"https://www.infoq.com/articles/no-reliable-messaging\">https://www.infoq.com/articles/no-reliable-messaging</a></p><p><a href=\"https://www.nature.com/articles/s41591-018-0316-z.epdf\">https://www.nature.com/articles/s41591-018-0316-z.epdf</a></p><p><a href=\"http://citeseerx.ist.psu.edu/viewdoc/download\">http://citeseerx.ist.psu.edu/viewdoc/download</a></p><p><a href=\"https://towardsdatascience.com/mastering-the-data-science-interview-15f9c0a558a7\">https://towardsdatascience.com/mastering-the-data-science-interview-15f9c0a558a7</a></p><p><a href=\"https://gizmodo.com/how-a-periodic-table-of-brains-could-revolutionize-neur-1831622367\">https://gizmodo.com/how-a-periodic-table-of-brains-could-revolutionize-neur-1831622367</a></p>","url":"https://hackersandslackers.com/lynx-roundup-february-5th/","uuid":"4f1d8032-69a8-4496-9c00-5582b3d17328","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5c4bf24cfd307f72b350ae20"}},{"node":{"id":"Ghost__Post__5c4bf1dafd307f72b350ae1a","title":"Lynx Roundup, February 4th","slug":"lynx-roundup-february-4th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/101-2@2x.jpg","excerpt":"The neural origins of pain!  Agile data science!  Data pipelines in Superglue!","custom_excerpt":"The neural origins of pain!  Agile data science!  Data pipelines in Superglue!","created_at_pretty":"26 January, 2019","published_at_pretty":"04 February, 2019","updated_at_pretty":"04 February, 2019","created_at":"2019-01-26T00:36:26.000-05:00","published_at":"2019-02-04T07:00:00.000-05:00","updated_at":"2019-02-04T10:37:07.000-05:00","meta_title":"Lynx Roundup, February 4th | Hackers and Slackers","meta_description":"The neural origins of pain!  Agile data science!  Data pipelines in Superglue!","og_description":"The neural origins of pain!  Agile data science!  Data pipelines in Superglue!","og_image":"https://hackersandslackers.com/content/images/lynx/101-2@2x.jpg","og_title":"Lynx Roundup, February 4th","twitter_description":"The neural origins of pain!  Agile data science!  Data pipelines in Superglue!","twitter_image":"https://hackersandslackers.com/content/images/lynx/101-2@2x.jpg","twitter_title":"Lynx Roundup, February 4th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"http://www.sci-news.com/othersciences/neuroscience/neurons-pain-unpleasantness-06833.html\n\nhttps://towardsdatascience.com/my-best-tips-for-agile-data-science-research-b40365cc979d\n\nhttps://serialmentor.com/dataviz/index.html\n\nhttps://quickbooks-engineering.intuit.com/demystifying-complex-data-pipeline-lineage-with-superglue-d5b4014b1482\n\nhttps://medium.com/@d3lm/understand-tensorflow-by-mimicking-its-api-from-scratch-faa55787170d\n\nhttps://github.com/Bjarten/alvito\n\nhttps://realpython.com/working-with-files-in-python/","html":"<p></p><p><a href=\"http://www.sci-news.com/othersciences/neuroscience/neurons-pain-unpleasantness-06833.html\">http://www.sci-news.com/othersciences/neuroscience/neurons-pain-unpleasantness-06833.html</a></p><p><a href=\"https://towardsdatascience.com/my-best-tips-for-agile-data-science-research-b40365cc979d\">https://towardsdatascience.com/my-best-tips-for-agile-data-science-research-b40365cc979d</a></p><p><a href=\"https://serialmentor.com/dataviz/index.html\">https://serialmentor.com/dataviz/index.html</a></p><p><a href=\"https://quickbooks-engineering.intuit.com/demystifying-complex-data-pipeline-lineage-with-superglue-d5b4014b1482\">https://quickbooks-engineering.intuit.com/demystifying-complex-data-pipeline-lineage-with-superglue-d5b4014b1482</a></p><p><a href=\"https://medium.com/@d3lm/understand-tensorflow-by-mimicking-its-api-from-scratch-faa55787170d\">https://medium.com/@d3lm/understand-tensorflow-by-mimicking-its-api-from-scratch-faa55787170d</a></p><p><a href=\"https://github.com/Bjarten/alvito\">https://github.com/Bjarten/alvito</a></p><p><a href=\"https://realpython.com/working-with-files-in-python/\">https://realpython.com/working-with-files-in-python/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-february-4th/","uuid":"d44ca9dd-c976-4c0f-aa5a-a91b942a1559","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5c4bf1dafd307f72b350ae1a"}},{"node":{"id":"Ghost__Post__5c4bf112fd307f72b350ae15","title":"Lynx Roundup, February 3rd","slug":"lynx-roundup-february-3rd","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/02/100.jpg","excerpt":"Graphing CDFs in place of Histograms!  Getting started with Emacs Lisp!  Optimizing Python!","custom_excerpt":"Graphing CDFs in place of Histograms!  Getting started with Emacs Lisp!  Optimizing Python!","created_at_pretty":"26 January, 2019","published_at_pretty":"03 February, 2019","updated_at_pretty":"28 February, 2019","created_at":"2019-01-26T00:33:06.000-05:00","published_at":"2019-02-03T07:00:00.000-05:00","updated_at":"2019-02-27T23:00:37.000-05:00","meta_title":"Lynx Roundup, February 3rd | Hackers and Slackers","meta_description":"Graphing CDFs in place of Histograms!  Getting started with Emacs Lisp!  Optimizing Python!","og_description":"Graphing CDFs in place of Histograms!  Getting started with Emacs Lisp!  Optimizing Python!","og_image":"https://hackersandslackers.com/content/images/2019/02/100.jpg","og_title":"Lynx Roundup, February 3rd","twitter_description":"Graphing CDFs in place of Histograms!  Getting started with Emacs Lisp!  Optimizing Python!","twitter_image":"https://hackersandslackers.com/content/images/2019/02/100.jpg","twitter_title":"Lynx Roundup, February 3rd","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://www.andata.at/en/software-blog-reader/why-we-love-the-cdf-and-do-not-like-histograms-that-much.html\n\nhttps://www.nature.com/articles/d41586-019-00107-y\n\nhttps://twitter.com/whereistanya/status/1080864493108776961\n\nhttps://emacs.stackexchange.com/questions/47318/how-can-i-start-learning-emacs-lisp\n\nhttps://bigdatapath.wordpress.com/2019/01/18/comparing-hadoop-mapreduce-spark-flink-and-storm/\n\nhttps://semiengineering.com/power-performance-bits-dec-26/\n\nhttps://gregoryszorc.com/blog/2019/01/10/what-i've-learned-about-optimizing-python/\n[https://gregoryszorc.com/blog/2019/01/10/what-ive-learned-about-optimizing-python/]","html":"<p></p><p><a href=\"https://www.andata.at/en/software-blog-reader/why-we-love-the-cdf-and-do-not-like-histograms-that-much.html\">https://www.andata.at/en/software-blog-reader/why-we-love-the-cdf-and-do-not-like-histograms-that-much.html</a></p><p><a href=\"https://www.nature.com/articles/d41586-019-00107-y\">https://www.nature.com/articles/d41586-019-00107-y</a></p><p><a href=\"https://twitter.com/whereistanya/status/1080864493108776961\">https://twitter.com/whereistanya/status/1080864493108776961</a></p><p><a href=\"https://emacs.stackexchange.com/questions/47318/how-can-i-start-learning-emacs-lisp\">https://emacs.stackexchange.com/questions/47318/how-can-i-start-learning-emacs-lisp</a></p><p><a href=\"https://bigdatapath.wordpress.com/2019/01/18/comparing-hadoop-mapreduce-spark-flink-and-storm/\">https://bigdatapath.wordpress.com/2019/01/18/comparing-hadoop-mapreduce-spark-flink-and-storm/</a></p><p><a href=\"https://semiengineering.com/power-performance-bits-dec-26/\">https://semiengineering.com/power-performance-bits-dec-26/</a></p><p><a href=\"https://gregoryszorc.com/blog/2019/01/10/what-ive-learned-about-optimizing-python/\">https://gregoryszorc.com/blog/2019/01/10/what-i've-learned-about-optimizing-python/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-february-3rd/","uuid":"4c6f04ed-a6ff-4db0-b9c8-8a821f26f0a5","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c4bf112fd307f72b350ae15"}},{"node":{"id":"Ghost__Post__5c4bf098fd307f72b350ae10","title":"Lynx Roundup, February 2nd","slug":"lynx-roundup-february-2nd","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/02/99-2.jpg","excerpt":"Awesome explanation of Taylor Series!  Plotly Charts in Jupyterlab!  Ordinal Classification with Neural Nets!","custom_excerpt":"Awesome explanation of Taylor Series!  Plotly Charts in Jupyterlab!  Ordinal Classification with Neural Nets!","created_at_pretty":"26 January, 2019","published_at_pretty":"02 February, 2019","updated_at_pretty":"28 February, 2019","created_at":"2019-01-26T00:31:04.000-05:00","published_at":"2019-02-02T07:00:00.000-05:00","updated_at":"2019-02-27T23:06:28.000-05:00","meta_title":"Lynx Roundup, February 2nd | Hackers and Slackers","meta_description":"Awesome explanation of Taylor Series!  Plotly Charts in Jupyterlab!  Ordinal Classification with Neural Nets!","og_description":"Awesome explanation of Taylor Series!  Plotly Charts in Jupyterlab!  Ordinal Classification with Neural Nets!","og_image":"https://hackersandslackers.com/content/images/2019/02/99-2.jpg","og_title":"Lynx Roundup, February 2nd","twitter_description":"Awesome explanation of Taylor Series!  Plotly Charts in Jupyterlab!  Ordinal Classification with Neural Nets!","twitter_image":"https://hackersandslackers.com/content/images/2019/02/99-2.jpg","twitter_title":"Lynx Roundup, February 2nd","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://betterexplained.com/articles/taylor-series/\n\nhttps://www.kdnuggets.com/2019/01/from-zero-to-employment-data-science.html\n\nhttps://medium.com/taxify-labs/what-they-dont-teach-you-in-machine-learning-courses-53c936ccaacd\n\nhttps://github.com/plotly/jupyterlab-chart-editor/blob/master/README.md\n\nhttps://www.researchgate.net/publication/221112186_Classification_of_Ordinal_Data_Using_Neural_Networks\n\nhttps://www.reddit.com/r/datascience/comments/aedwz9/im_stuck_in_eda/\n\nhttps://mitpress.mit.edu/books/engineering-safer-world","html":"<p></p><p><a href=\"https://betterexplained.com/articles/taylor-series/\">https://betterexplained.com/articles/taylor-series/</a></p><p><a href=\"https://www.kdnuggets.com/2019/01/from-zero-to-employment-data-science.html\">https://www.kdnuggets.com/2019/01/from-zero-to-employment-data-science.html</a></p><p><a href=\"https://medium.com/taxify-labs/what-they-dont-teach-you-in-machine-learning-courses-53c936ccaacd\">https://medium.com/taxify-labs/what-they-dont-teach-you-in-machine-learning-courses-53c936ccaacd</a></p><p><a href=\"https://github.com/plotly/jupyterlab-chart-editor/blob/master/README.md\">https://github.com/plotly/jupyterlab-chart-editor/blob/master/README.md</a></p><p><a href=\"https://www.researchgate.net/publication/221112186_Classification_of_Ordinal_Data_Using_Neural_Networks\">https://www.researchgate.net/publication/221112186_Classification_of_Ordinal_Data_Using_Neural_Networks</a></p><p><a href=\"https://www.reddit.com/r/datascience/comments/aedwz9/im_stuck_in_eda/\">https://www.reddit.com/r/datascience/comments/aedwz9/im_stuck_in_eda/</a></p><p><a href=\"https://mitpress.mit.edu/books/engineering-safer-world\">https://mitpress.mit.edu/books/engineering-safer-world</a></p>","url":"https://hackersandslackers.com/lynx-roundup-february-2nd/","uuid":"4500ea69-ae64-4e02-b405-037f87beb55d","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c4bf098fd307f72b350ae10"}},{"node":{"id":"Ghost__Post__5c4befd7fd307f72b350ae0b","title":"Lynx Roundup, February 1st","slug":"lynx-roundup-february-1st","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/98@2x.jpg","excerpt":"Custom loss functions in Keras!  Visualizing Gaussian Processes!  Game Developers' Union gaining steam!","custom_excerpt":"Custom loss functions in Keras!  Visualizing Gaussian Processes!  Game Developers' Union gaining steam!","created_at_pretty":"26 January, 2019","published_at_pretty":"01 February, 2019","updated_at_pretty":"01 February, 2019","created_at":"2019-01-26T00:27:51.000-05:00","published_at":"2019-02-01T07:00:00.000-05:00","updated_at":"2019-02-01T07:00:00.000-05:00","meta_title":"Lynx Roundup, February 1st | Hackers and Slackers","meta_description":"Custom loss functions in Keras!  Visualizing Gaussian Processes!  Game Developers' Union gaining steam!","og_description":"Custom loss functions in Keras!  Visualizing Gaussian Processes!  Game Developers' Union gaining steam!","og_image":"https://hackersandslackers.com/content/images/lynx/98@2x.jpg","og_title":"Lynx Roundup, February 1st","twitter_description":"Custom loss functions in Keras!  Visualizing Gaussian Processes!  Game Developers' Union gaining steam!","twitter_image":"https://hackersandslackers.com/content/images/lynx/98@2x.jpg","twitter_title":"Lynx Roundup, February 1st","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://towardsdatascience.com/advanced-keras-constructing-complex-custom-losses-and-metrics-c07ca130a618\n\nhttps://boingboing.net/2019/01/11/start-with-a-hypothesis.html\n\nhttps://towardsdatascience.com/the-cold-start-problem-how-to-build-your-machine-learning-portfolio-6718b4ae83e9\n\nhttps://www.jgoertler.com/visual-exploration-gaussian-processes/\n\nhttps://read.acloud.guru/save-time-and-money-with-aws-lambda-using-asynchronous-programming-3548ea65f751\n\nhttps://arxiv.org/abs/1811.12808\n\nhttps://gdconf.com/news/nearly-50-devs-support-unionization-new-gdc-state-industry-report","html":"<p></p><p><a href=\"https://towardsdatascience.com/advanced-keras-constructing-complex-custom-losses-and-metrics-c07ca130a618\">https://towardsdatascience.com/advanced-keras-constructing-complex-custom-losses-and-metrics-c07ca130a618</a></p><p><a href=\"https://boingboing.net/2019/01/11/start-with-a-hypothesis.html\">https://boingboing.net/2019/01/11/start-with-a-hypothesis.html</a></p><p><a href=\"https://towardsdatascience.com/the-cold-start-problem-how-to-build-your-machine-learning-portfolio-6718b4ae83e9\">https://towardsdatascience.com/the-cold-start-problem-how-to-build-your-machine-learning-portfolio-6718b4ae83e9</a></p><p><a href=\"https://www.jgoertler.com/visual-exploration-gaussian-processes/\">https://www.jgoertler.com/visual-exploration-gaussian-processes/</a></p><p><a href=\"https://read.acloud.guru/save-time-and-money-with-aws-lambda-using-asynchronous-programming-3548ea65f751\">https://read.acloud.guru/save-time-and-money-with-aws-lambda-using-asynchronous-programming-3548ea65f751</a></p><p><a href=\"https://arxiv.org/abs/1811.12808\">https://arxiv.org/abs/1811.12808</a></p><p><a href=\"https://gdconf.com/news/nearly-50-devs-support-unionization-new-gdc-state-industry-report\">https://gdconf.com/news/nearly-50-devs-support-unionization-new-gdc-state-industry-report</a></p>","url":"https://hackersandslackers.com/lynx-roundup-february-1st/","uuid":"2e969a52-609b-409c-9750-e2fbdc5b2307","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5c4befd7fd307f72b350ae0b"}},{"node":{"id":"Ghost__Post__5c4beeccfd307f72b350ae06","title":"Lynx Roundup, January 31st","slug":"lynx-roundup-january-31st","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/96@2x.jpg","excerpt":"Training med students with a virtual cadaver!  Analyzing steel microstructure with Computer Vision!  A tool for annotating text for NLP datasets!","custom_excerpt":"Training med students with a virtual cadaver!  Analyzing steel microstructure with Computer Vision!  A tool for annotating text for NLP datasets!","created_at_pretty":"26 January, 2019","published_at_pretty":"31 January, 2019","updated_at_pretty":"31 January, 2019","created_at":"2019-01-26T00:23:24.000-05:00","published_at":"2019-01-31T07:00:00.000-05:00","updated_at":"2019-01-31T07:00:00.000-05:00","meta_title":"Lynx Roundup, January 31st | Hackers and Slackers","meta_description":"Training med students with a virtual cadaver!  Analyzing steel microstructure with Computer Vision!  A tool for annotating text for NLP datasets!","og_description":"Training med students with a virtual cadaver!  Analyzing steel microstructure with Computer Vision!  A tool for annotating text for NLP datasets!","og_image":"https://hackersandslackers.com/content/images/lynx/96@2x.jpg","og_title":"Lynx Roundup, January 31st","twitter_description":"Training med students with a virtual cadaver!  Analyzing steel microstructure with Computer Vision!  A tool for annotating text for NLP datasets!","twitter_image":"https://hackersandslackers.com/content/images/lynx/96@2x.jpg","twitter_title":"Lynx Roundup, January 31st","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"http://www.technoblogy.com/show\n\nhttps://www.cuanschutztoday.org/virtual-human-a-living-cadaver-pushes-boundaries-of-anatomical-science/\n\nhttps://www.researchgate.net/publication/317711703_Advanced_Steel_Microstructural_Classification_by_Deep_Learning_Methods\n\nhttp://nlp.seas.harvard.edu/NamedTensor\n\nhttps://github.com/chakki-works/doccano\n\nhttps://github.com/quantumlib/Cirq\n\nhttps://santafe.edu/news-center/news/these-9-measures-reveal-how-forests-are-controlled-climate","html":"<p></p><p><a href=\"http://www.technoblogy.com/show\">http://www.technoblogy.com/show</a></p><p><a href=\"https://www.cuanschutztoday.org/virtual-human-a-living-cadaver-pushes-boundaries-of-anatomical-science/\">https://www.cuanschutztoday.org/virtual-human-a-living-cadaver-pushes-boundaries-of-anatomical-science/</a></p><p><a href=\"https://www.researchgate.net/publication/317711703_Advanced_Steel_Microstructural_Classification_by_Deep_Learning_Methods\">https://www.researchgate.net/publication/317711703_Advanced_Steel_Microstructural_Classification_by_Deep_Learning_Methods</a></p><p><a href=\"http://nlp.seas.harvard.edu/NamedTensor\">http://nlp.seas.harvard.edu/NamedTensor</a></p><p><a href=\"https://github.com/chakki-works/doccano\">https://github.com/chakki-works/doccano</a></p><p><a href=\"https://github.com/quantumlib/Cirq\">https://github.com/quantumlib/Cirq</a></p><p><a href=\"https://santafe.edu/news-center/news/these-9-measures-reveal-how-forests-are-controlled-climate\">https://santafe.edu/news-center/news/these-9-measures-reveal-how-forests-are-controlled-climate</a></p>","url":"https://hackersandslackers.com/lynx-roundup-january-31st/","uuid":"e4d71628-4003-4d4d-a5a8-a877531e3b43","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5c4beeccfd307f72b350ae06"}},{"node":{"id":"Ghost__Post__5c4bee67fd307f72b350ae01","title":"Lynx Roundup, January 30th","slug":"lynx-roundup-january-30th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/95-1@2x.jpg","excerpt":"Data cleaning!  Realtime SQL Queries with Kafka!  Good PySpark code snippets!","custom_excerpt":"Data cleaning!  Realtime SQL Queries with Kafka!  Good PySpark code snippets!","created_at_pretty":"26 January, 2019","published_at_pretty":"30 January, 2019","updated_at_pretty":"04 February, 2019","created_at":"2019-01-26T00:21:43.000-05:00","published_at":"2019-01-30T07:00:00.000-05:00","updated_at":"2019-02-04T10:11:55.000-05:00","meta_title":"Lynx Roundup, January 30th | Hackers and Slackers","meta_description":"Data cleaning!  Realtime SQL Queries with Kafka!  Good PySpark code snippets!","og_description":"Data cleaning!  Realtime SQL Queries with Kafka!  Good PySpark code snippets!","og_image":"https://hackersandslackers.com/content/images/lynx/95-1@2x.jpg","og_title":"Lynx Roundup, January 30th","twitter_description":"Data cleaning!  Realtime SQL Queries with Kafka!  Good PySpark code snippets!","twitter_image":"https://hackersandslackers.com/content/images/lynx/95-1@2x.jpg","twitter_title":"Lynx Roundup, January 30th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://towardsdatascience.com/the-simple-yet-practical-data-cleaning-codes-ad27c4ce0a38\n\nhttps://rockset.com/blog/real-time-analytics-using-sql-on-streaming-data-kafka-rockset/\n\nhttps://github.com/justusschock/delira\n\nhttp://www.alpha-epsilon.de/cca175/2017/09/13/filter-aggregate-join-rank-and-sort-datasets-spark-python/\n\nhttps://medium.com/@dimitritheoharatos/a-primer-on-a-b-testing-part-1-the-central-limit-theorem-fdd01154e86c\n\nhttps://www.cbronline.com/news/homomorphic-encryption-microsoft\n\nhttps://www.bloomberg.com/news/articles/2019-01-24/google-urged-the-u-s-to-limit-protection-for-activist-workers","html":"<p></p><p><a href=\"https://towardsdatascience.com/the-simple-yet-practical-data-cleaning-codes-ad27c4ce0a38\">https://towardsdatascience.com/the-simple-yet-practical-data-cleaning-codes-ad27c4ce0a38</a></p><p><a href=\"https://rockset.com/blog/real-time-analytics-using-sql-on-streaming-data-kafka-rockset/\">https://rockset.com/blog/real-time-analytics-using-sql-on-streaming-data-kafka-rockset/</a></p><p><a href=\"https://github.com/justusschock/delira\">https://github.com/justusschock/delira</a></p><p><a href=\"http://www.alpha-epsilon.de/cca175/2017/09/13/filter-aggregate-join-rank-and-sort-datasets-spark-python/\">http://www.alpha-epsilon.de/cca175/2017/09/13/filter-aggregate-join-rank-and-sort-datasets-spark-python/</a></p><p><a href=\"https://medium.com/@dimitritheoharatos/a-primer-on-a-b-testing-part-1-the-central-limit-theorem-fdd01154e86c\">https://medium.com/@dimitritheoharatos/a-primer-on-a-b-testing-part-1-the-central-limit-theorem-fdd01154e86c</a></p><p><a href=\"https://www.cbronline.com/news/homomorphic-encryption-microsoft\">https://www.cbronline.com/news/homomorphic-encryption-microsoft</a></p><p><a href=\"https://www.bloomberg.com/news/articles/2019-01-24/google-urged-the-u-s-to-limit-protection-for-activist-workers\">https://www.bloomberg.com/news/articles/2019-01-24/google-urged-the-u-s-to-limit-protection-for-activist-workers</a></p>","url":"https://hackersandslackers.com/lynx-roundup-january-30th/","uuid":"3e05dbcc-b76c-44a7-b0ba-9d3192719564","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5c4bee67fd307f72b350ae01"}},{"node":{"id":"Ghost__Post__5c4e57144b23df2da7332b80","title":"Downcast Numerical Data Types with Pandas","slug":"downcast-numerical-columns-python-pandas","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/01/codesnippetdatatypes@2x.jpg","excerpt":"Using an Example Where We Downcast Numerical Columns.","custom_excerpt":"Using an Example Where We Downcast Numerical Columns.","created_at_pretty":"28 January, 2019","published_at_pretty":"28 January, 2019","updated_at_pretty":"14 February, 2019","created_at":"2019-01-27T20:12:52.000-05:00","published_at":"2019-01-28T07:30:00.000-05:00","updated_at":"2019-02-13T22:50:18.000-05:00","meta_title":"Using Pandas' Assign Function on Multiple Columns | Hackers and Slackers","meta_description":"Using Pandas' Assign function on multiple columns via an example: downcasting numerical columns.","og_description":"Using Pandas' Assign by example: downcasting numerical columns.","og_image":"https://hackersandslackers.com/content/images/2019/01/codesnippetdatatypes@2x.jpg","og_title":"Code Snippet Corner: Using Pandas' Assign Function on Multiple Columns","twitter_description":"Using Pandas' Assign by example: downcasting numerical columns.","twitter_image":"https://hackersandslackers.com/content/images/2019/01/codesnippetdatatypes@2x.jpg","twitter_title":"Code Snippet Corner: Using Pandas' Assign Function on Multiple Columns","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Pandas","slug":"pandas","description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/pandasmerge.jpg","meta_description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","meta_title":"Pythons and Pandas | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Pandas","slug":"pandas","description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","feature_image":"https://res-3.cloudinary.com/hackers-and-slackers/image/upload/f_auto,q_auto/v1/images/pandasmerge.jpg","meta_description":"Analyze data with the Pandas data analysis library for Python. Start from the basics or see real-life examples of pros using Pandas to solve problems.","meta_title":"Pythons and Pandas | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Data Engineering","slug":"dataengineering","description":"The systematic collection and transformation of data via the creation of tools and pipelines.","feature_image":null,"meta_description":null,"meta_title":"Data Engineering | Hackers and Slackers","visibility":"public"},{"name":"#Code Snippet Corner","slug":"code-snippet-corner","description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","feature_image":"https://hackers.nyc3.cdn.digitaloceanspaces.com/posts/2019/02/codecornerseries_o_o.jpg","meta_description":"Your weekly dose of Python tidbits and Jupyter notebooks to get you feeling saucy.","meta_title":"Python Code Snippet Corner","visibility":"internal"}],"plaintext":"Recently, I had to find a way to reduce the memory footprint of a Pandas\nDataFrame in order to actually do operations on it.  Here's a trick that came in\nhandy!\n\nBy default, if you read a DataFrame from a file, it'll cast all the numerical\ncolumns as the float64  type.  This is in keeping with the philosophy behind\nPandas and NumPy - by using strict types (instead of normal Python \"duck\ntyping\"), you can do things a lot faster.  The float64  is the most flexible\nnumerical type - it can handle fractions, as well as turning missing values into\na NaN.  This will let us read it into memory, and then start messing with it.\n The downside is that it consumes a lot of memory.\n\nNow, let's say we want to save memory by manually downcasting our columns into\nthe smallest type that can handle its values?  And let's ALSO say that we want\nto be really, really lazy and don't want to look at a bunch of numbers by hand.\n And let's say we wanna do this via Method Chaining, because of all the\nadvantages outlined here: https://tomaugspurger.github.io/method-chaining\n\nLet's introduce our example DataFrame.  We'll convert all the values to floats\nmanually because that's what the default is when we read from a file.\n\ndf = pd.DataFrame({\n    \"stay_float\": [0.5, 3.7, 7.5],\n    \"to_int\": [-5, 7, 5],\n    \"to_uint\": [1, 100, 200]}).astype(float)\n\n\nFirst, let's introduce the workhorse of this exercise - Pandas's to_numeric \nfunction, and its handy optional argument, downcast.  This will take a numerical\ntype - float, integer  (not int), or unsigned  - and then downcast it to the\nsmallest version available.\n\nNext, let's make a function that checks to see if a column can be downcast from\na float to an integer.\n\ndef float_to_int(ser):\n    try:\n        int_ser = ser.astype(int)\n        if (ser == int_ser).all():\n            return int_ser\n        else:\n            return ser\n    except ValueError:\n        return ser\n\nWe're using the try/except pattern here because if we try to make a column with \nNaN  values into an integer column, it'll throw an error.  If it'd otherwise be\na good candidate for turning into an integer, we should figure a value to impute\nfor those missing values - but that'll be different for every column.  Sometimes\nit'd make sense to make it 0, other times the mean or median of the column, or\nsomething else entirely.\n\nI'd also like to direct your attention to Line 4, which has a very useful Pandas\npattern - if (ser == int_ser).all().  When you do operations on Pandas columns\nlike Equals or Greater Than, you get a new column where the operation was\napplied element-by-element.  If you're trying to set up a conditional, the\ninterpreter doesn't know what to do with an array containing [True, False, True] \n - you have to boil it down to a single value.  So, if you wan to check if two\ncolumns are completely equal, you have to call the .all()  method (which has a\nuseful sibling, any()) to make a conditional that can actually be used to\ncontrol execution.\n\nNext, let's make a function that lets us apply a transformation to multiple\ncolumns based on a condition.  The assign  method is pretty awesome, and it'd be\nfun to not have to leave it (or, if we do, to at least replace it with a\nfunction we can pipe as part of a chain of transformations to the DataFrame as a\nwhole).\n\ndef multi_assign(df, transform_fn, condition):\n    df_to_use = df.copy()\n    \n    return (df_to_use\n        .assign(\n            **{col: transform_fn(df_to_use[col])\n               for col in condition(df_to_use)})\n           )\n\n\nassign  lets us do multiple assignments, so long as we make a dictionary of\ncolumn names and target values and then unpack it.  Really, it'd actually be\neasier to skip the function and go directly to using this syntax, except that\nI'm not aware of a method of accessing a filterable list of the DF's columns\nwhile still \"in\" the chain.  I think future versions of Pandas' syntax will\ninclude this, as I've read they want to support more Method Chaining.\n Personally, I find the reduction in Cognitive Load is worth it, with having a\nlot of little modular lego-piece transformations chained together.\n\nIt also works as a nice foundation for other little helper functions.  So,\nhere's one to turn as many float columns to integers as we can.\n\ndef all_float_to_int(df):\n    df_to_use = df.copy()\n    transform_fn = float_to_int\n    condition = lambda x: list(x\n                    .select_dtypes(include=[\"float\"])\n                    .columns)    \n    \n    return multi_assign(df_to_use, transform_fn, condition)\n\n\nSee the pattern in action!  We decide on a transformation function, we decide on\nwhat conditions we want to apply all these transformations (we could have a\nhundred columns, and who wants to make a note of all that?), and then we pass it\nto the multi-assign  function.\n\n(df\n     .pipe(all_float_to_int)).dtypes\n\n\nstay_float    float64\nto_int          int64\nto_uint         int64\ndtype: object\n\n\nCool!  But we didn't actually decrease the size of our DataFrame - 64 bytes of\ninteger takes up as many bytes as 64 bytes of float, just like how a hundred\npounds of feathers weighs as much as a hundred pounds of bricks.  What we did do\nis make it easier to downcast those columns later.\n\nNext, let's make a function that takes a subset of the columns, and tries to\ndowncast it to the smallest version that it can.  We've got fairly small values\nhere, so it should get some work done.\n\ndef downcast_all(df, target_type, inital_type=None):\n    #Gotta specify floats, unsigned, or integer\n    #If integer, gotta be 'integer', not 'int'\n    #Unsigned should look for Ints\n    if inital_type is None:\n        inital_type = target_type\n    \n    df_to_use = df.copy()\n    \n    transform_fn = lambda x: pd.to_numeric(x, \n                                downcast=target_type)\n    \n    condition = lambda x: list(x\n                    .select_dtypes(include=[inital_type])\n                    .columns) \n    \n    return multi_assign(df_to_use, transform_fn, condition)\n\n\nSame basic pattern as before!  But now we have two arguments - one is the \ntarget_type, which tells us what types to try to downcast to.  By default, this\nwill be the same as the initial_type, with one exception that we'll grab in a\nsecond!\n\n(df\n     .pipe(all_float_to_int)\n     .pipe(downcast_all, \"float\")\n     .pipe(downcast_all, \"integer\")\n).dtypes\n\n\nstay_float    float32\nto_int           int8\nto_uint         int16\ndtype: object\n\n\nAlright, now we're getting somewhere!  Wonder if we can do even better, though?\n That last column has a conspicuous name!  And it has no values lower than 0 -\nmaybe we could save space if we store it as an unsigned integer!  Let's add a\npipe to our chain that'll try to downcast certain integers into unsigneds...\n\n(df\n     .pipe(all_float_to_int)\n     .pipe(downcast_all, \"float\")\n     .pipe(downcast_all, \"integer\")\n     .pipe(downcast_all,  \n           target_type = \"unsigned\", \n           inital_type = \"integer\")\n).dtypes\n\n\nstay_float    float32\nto_int           int8\nto_uint         uint8\ndtype: objec\n\n\nWhat do ya know, we can!\n\nLet's see how much memory we save by doing this.\n\ndf.info(memory_usage='deep')\n\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 3 entries, 0 to 2\nData columns (total 3 columns):\nstay_float    3 non-null float64\nto_int        3 non-null float64\nto_uint       3 non-null float64\ndtypes: float64(3)\nmemory usage: 152.0 bytes\n\n\nvs\n\n(df\n     .pipe(all_float_to_int)\n     .pipe(downcast_all, \"float\")\n     .pipe(downcast_all, \"integer\")\n     .pipe(downcast_all,  \n           target_type = \"unsigned\", \n           inital_type = \"integer\")\n).info(memory_usage='deep')\n\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 3 entries, 0 to 2\nData columns (total 3 columns):\nstay_float    3 non-null float32\nto_int        3 non-null int8\nto_uint       3 non-null uint8\ndtypes: float32(1), int8(1), uint8(1)\nmemory usage: 98.0 bytes\n\n\n152 down to 98 - we reduced it by more than 1/3rd!","html":"<p>Recently, I had to find a way to reduce the memory footprint of a Pandas DataFrame in order to actually do operations on it.  Here's a trick that came in handy!</p><p>By default, if you read a DataFrame from a file, it'll cast all the numerical columns as the <code>float64</code> type.  This is in keeping with the philosophy behind Pandas and NumPy - by using strict types (instead of normal Python \"duck typing\"), you can do things a lot faster.  The <code>float64</code> is the most flexible numerical type - it can handle fractions, as well as turning missing values into a <code>NaN</code>.  This will let us read it into memory, and then start messing with it.  The downside is that it consumes a lot of memory.</p><p>Now, let's say we want to save memory by manually downcasting our columns into the smallest type that can handle its values?  And let's ALSO say that we want to be really, really lazy and don't want to look at a bunch of numbers by hand.  And let's say we wanna do this via Method Chaining, because of all the advantages outlined here: <a href=\"https://tomaugspurger.github.io/method-chaining\">https://tomaugspurger.github.io/method-chaining</a></p><p>Let's introduce our example DataFrame.  We'll convert all the values to floats manually because that's what the default is when we read from a file.</p><pre><code class=\"language-python\">df = pd.DataFrame({\n    &quot;stay_float&quot;: [0.5, 3.7, 7.5],\n    &quot;to_int&quot;: [-5, 7, 5],\n    &quot;to_uint&quot;: [1, 100, 200]}).astype(float)\n</code></pre>\n<p>First, let's introduce the workhorse of this exercise - Pandas's <code>to_numeric</code> function, and its handy optional argument, <code>downcast</code>.  This will take a numerical type - <code>float</code>, <code>integer</code> (not <code>int</code>), or <code>unsigned</code> - and then downcast it to the smallest version available.</p><p>Next, let's make a function that checks to see if a column can be downcast from a float to an integer.</p><pre><code>def float_to_int(ser):\n    try:\n        int_ser = ser.astype(int)\n        if (ser == int_ser).all():\n            return int_ser\n        else:\n            return ser\n    except ValueError:\n        return ser</code></pre><p>We're using the try/except pattern here because if we try to make a column with <code>NaN</code> values into an integer column, it'll throw an error.  If it'd otherwise be a good candidate for turning into an integer, we should figure a value to impute for those missing values - but that'll be different for every column.  Sometimes it'd make sense to make it 0, other times the mean or median of the column, or something else entirely.</p><p>I'd also like to direct your attention to Line 4, which has a very useful Pandas pattern - <code>if (ser == int_ser).all()</code>.  When you do operations on Pandas columns like Equals or Greater Than, you get a new column where the operation was applied element-by-element.  If you're trying to set up a conditional, the interpreter doesn't know what to do with an array containing <code>[True, False, True]</code> - you have to boil it down to a single value.  So, if you wan to check if two columns are completely equal, you have to call the <code>.all()</code> method (which has a useful sibling, <code>any()</code>) to make a conditional that can actually be used to control execution.</p><p>Next, let's make a function that lets us apply a transformation to multiple columns based on a condition.  The <code>assign</code> method is pretty awesome, and it'd be fun to not have to leave it (or, if we do, to at least replace it with a function we can pipe as part of a chain of transformations to the DataFrame as a whole).</p><pre><code class=\"language-python\">def multi_assign(df, transform_fn, condition):\n    df_to_use = df.copy()\n    \n    return (df_to_use\n        .assign(\n            **{col: transform_fn(df_to_use[col])\n               for col in condition(df_to_use)})\n           )\n</code></pre>\n<p><code>assign</code> lets us do multiple assignments, so long as we make a dictionary of column names and target values and then unpack it.  Really, it'd actually be easier to skip the function and go directly to using this syntax, except that I'm not aware of a method of accessing a filterable list of the DF's columns while still \"in\" the chain.  I think future versions of Pandas' syntax will include this, as I've read they want to support more Method Chaining.  Personally, I find the reduction in Cognitive Load is worth it, with having a lot of little modular lego-piece transformations chained together.  </p><p>It also works as a nice foundation for other little helper functions.  So, here's one to turn as many float columns to integers as we can.</p><pre><code class=\"language-python\">def all_float_to_int(df):\n    df_to_use = df.copy()\n    transform_fn = float_to_int\n    condition = lambda x: list(x\n                    .select_dtypes(include=[&quot;float&quot;])\n                    .columns)    \n    \n    return multi_assign(df_to_use, transform_fn, condition)\n</code></pre>\n<p>See the pattern in action!  We decide on a transformation function, we decide on what conditions we want to apply all these transformations (we could have a hundred columns, and who wants to make a note of all that?), and then we pass it to the <code>multi-assign</code> function.  </p><pre><code class=\"language-python\">(df\n     .pipe(all_float_to_int)).dtypes\n</code></pre>\n<pre><code class=\"language-bash\">stay_float    float64\nto_int          int64\nto_uint         int64\ndtype: object\n</code></pre>\n<p>Cool!  But we didn't actually decrease the size of our DataFrame - 64 bytes of integer takes up as many bytes as 64 bytes of float, just like how a hundred pounds of feathers weighs as much as a hundred pounds of bricks.  What we did do is make it easier to downcast those columns later.</p><p>Next, let's make a function that takes a subset of the columns, and tries to downcast it to the smallest version that it can.  We've got fairly small values here, so it should get some work done.</p><pre><code class=\"language-python\">def downcast_all(df, target_type, inital_type=None):\n    #Gotta specify floats, unsigned, or integer\n    #If integer, gotta be 'integer', not 'int'\n    #Unsigned should look for Ints\n    if inital_type is None:\n        inital_type = target_type\n    \n    df_to_use = df.copy()\n    \n    transform_fn = lambda x: pd.to_numeric(x, \n                                downcast=target_type)\n    \n    condition = lambda x: list(x\n                    .select_dtypes(include=[inital_type])\n                    .columns) \n    \n    return multi_assign(df_to_use, transform_fn, condition)\n</code></pre>\n<p>Same basic pattern as before!  But now we have two arguments - one is the <code>target_type</code>, which tells us what types to try to downcast to.  By default, this will be the same as the <code>initial_type</code>, with one exception that we'll grab in a second!</p><pre><code class=\"language-python\">(df\n     .pipe(all_float_to_int)\n     .pipe(downcast_all, &quot;float&quot;)\n     .pipe(downcast_all, &quot;integer&quot;)\n).dtypes\n</code></pre>\n<pre><code class=\"language-bash\">stay_float    float32\nto_int           int8\nto_uint         int16\ndtype: object\n</code></pre>\n<p>Alright, now we're getting somewhere!  Wonder if we can do even better, though?  That last column has a conspicuous name!  And it has no values lower than 0 - maybe we could save space if we store it as an unsigned integer!  Let's add a pipe to our chain that'll try to downcast certain integers into unsigneds...</p><pre><code class=\"language-python\">(df\n     .pipe(all_float_to_int)\n     .pipe(downcast_all, &quot;float&quot;)\n     .pipe(downcast_all, &quot;integer&quot;)\n     .pipe(downcast_all,  \n           target_type = &quot;unsigned&quot;, \n           inital_type = &quot;integer&quot;)\n).dtypes\n</code></pre>\n<pre><code class=\"language-bash\">stay_float    float32\nto_int           int8\nto_uint         uint8\ndtype: objec\n</code></pre>\n<p>What do ya know, we can!</p><p>Let's see how much memory we save by doing this.</p><pre><code class=\"language-python\">df.info(memory_usage='deep')\n</code></pre>\n<pre><code class=\"language-bash\">&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 3 entries, 0 to 2\nData columns (total 3 columns):\nstay_float    3 non-null float64\nto_int        3 non-null float64\nto_uint       3 non-null float64\ndtypes: float64(3)\nmemory usage: 152.0 bytes\n</code></pre>\n<p>vs</p><pre><code class=\"language-python\">(df\n     .pipe(all_float_to_int)\n     .pipe(downcast_all, &quot;float&quot;)\n     .pipe(downcast_all, &quot;integer&quot;)\n     .pipe(downcast_all,  \n           target_type = &quot;unsigned&quot;, \n           inital_type = &quot;integer&quot;)\n).info(memory_usage='deep')\n</code></pre>\n<pre><code class=\"language-bash\">&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 3 entries, 0 to 2\nData columns (total 3 columns):\nstay_float    3 non-null float32\nto_int        3 non-null int8\nto_uint       3 non-null uint8\ndtypes: float32(1), int8(1), uint8(1)\nmemory usage: 98.0 bytes\n</code></pre>\n<p>152 down to 98 - we reduced it by more than 1/3rd!</p>","url":"https://hackersandslackers.com/downcast-numerical-columns-python-pandas/","uuid":"58bbb902-99bb-404d-8a3c-232d56b6e776","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5c4e57144b23df2da7332b80"}},{"node":{"id":"Ghost__Post__5c4bec7cfd307f72b350adf7","title":"Lynx Roundup, January 29th","slug":"lynx-roundup-january-29th","featured":false,"feature_image":"https://hackersandslackers.com/content/images/lynx/93@2x.jpg","excerpt":"Generating textbooks from wikipedia!  SQL Queries on JSON files!  Data Science at Fortnite!","custom_excerpt":"Generating textbooks from wikipedia!  SQL Queries on JSON files!  Data Science at Fortnite!","created_at_pretty":"26 January, 2019","published_at_pretty":"28 January, 2019","updated_at_pretty":"28 January, 2019","created_at":"2019-01-26T00:13:32.000-05:00","published_at":"2019-01-28T07:00:00.000-05:00","updated_at":"2019-01-28T07:00:00.000-05:00","meta_title":"Lynx Roundup, January 29th | Hackers and Slackers","meta_description":"Generating textbooks from wikipedia!  SQL Queries on JSON files!  Data Science at Fortnite!","og_description":"Generating textbooks from wikipedia!  SQL Queries on JSON files!  Data Science at Fortnite!","og_image":"https://hackersandslackers.com/content/images/lynx/93@2x.jpg","og_title":"Lynx Roundup, January 29th","twitter_description":"Generating textbooks from wikipedia!  SQL Queries on JSON files!  Data Science at Fortnite!","twitter_image":"https://hackersandslackers.com/content/images/lynx/93@2x.jpg","twitter_title":"Lynx Roundup, January 29th","authors":[{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null}],"primary_author":{"name":"Matthew Alhonte","slug":"matt","bio":"Super villain in somebody's action hero movie. Experienced a radioactive freak accident at a young age, which rendered him part-snake and strangely adept at Python.\n\n","profile_image":"https://hackersandslackers.com/content/images/2019/03/matt.jpg","twitter":"@MattAlhonte","facebook":null,"website":null},"primary_tag":{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Roundup","slug":"roundup","description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","feature_image":null,"meta_description":"Subscribe to our daily roundups of top data science news articles, slimmed down to only the good stuff.","meta_title":"Lynx Roundup | Hackers and Slackers","visibility":"public"}],"plaintext":"https://twitter.com/uxresearch/status/1079148047257395200\n\nhttps://twitter.com/kellabyte/status/1082338931503378432\n\nhttps://www.technologyreview.com/s/612726/this-algorithm-browses-wikipedia-to-auto-generate-textbooks/\n\nhttps://www.nextplatform.com/2019/01/15/spanning-the-database-world-with-google/\n\nhttps://rockset.com/blog/how-to-do-data-science-using-sql-on-raw-json/\n\nhttps://www.quora.com/What-textbooks-had-the-biggest-impact-on-you-as-a-machine-learning-researcher\n\nhttps://www.zdnet.com/article/how-fortnite-approaches-analytics-cloud-to-analyze-petabytes-of-game-data/","html":"<p></p><p><a href=\"https://twitter.com/uxresearch/status/1079148047257395200\">https://twitter.com/uxresearch/status/1079148047257395200</a></p><p><a href=\"https://twitter.com/kellabyte/status/1082338931503378432\">https://twitter.com/kellabyte/status/1082338931503378432</a></p><p><a href=\"https://www.technologyreview.com/s/612726/this-algorithm-browses-wikipedia-to-auto-generate-textbooks/\">https://www.technologyreview.com/s/612726/this-algorithm-browses-wikipedia-to-auto-generate-textbooks/</a></p><p><a href=\"https://www.nextplatform.com/2019/01/15/spanning-the-database-world-with-google/\">https://www.nextplatform.com/2019/01/15/spanning-the-database-world-with-google/</a></p><p><a href=\"https://rockset.com/blog/how-to-do-data-science-using-sql-on-raw-json/\">https://rockset.com/blog/how-to-do-data-science-using-sql-on-raw-json/</a></p><p><a href=\"https://www.quora.com/What-textbooks-had-the-biggest-impact-on-you-as-a-machine-learning-researcher\">https://www.quora.com/What-textbooks-had-the-biggest-impact-on-you-as-a-machine-learning-researcher</a></p><p><a href=\"https://www.zdnet.com/article/how-fortnite-approaches-analytics-cloud-to-analyze-petabytes-of-game-data/\">https://www.zdnet.com/article/how-fortnite-approaches-analytics-cloud-to-analyze-petabytes-of-game-data/</a></p>","url":"https://hackersandslackers.com/lynx-roundup-january-29th/","uuid":"30726bfd-300a-4f44-8b50-a1c3c2c47351","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5c4bec7cfd307f72b350adf7"}}]}},"pageContext":{"slug":"matt","limit":12,"skip":48,"numberOfPages":24,"humanPageNumber":5,"prevPageNumber":4,"nextPageNumber":6,"previousPagePath":"/author/matt/page/4/","nextPagePath":"/author/matt/page/6/"}}