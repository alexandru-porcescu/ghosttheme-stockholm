{"data":{"ghostPost":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673635","title":"Installing Django CMS on Ubuntu","slug":"installing-django-cms","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/djangocms-2.jpg","excerpt":"How to install DjangoCMS: the largest of three major CMS products for Django.","custom_excerpt":"How to install DjangoCMS: the largest of three major CMS products for Django.","created_at_pretty":"19 November, 2017","published_at_pretty":"19 November, 2017","updated_at_pretty":"28 March, 2019","created_at":"2017-11-19T18:38:50.000-05:00","published_at":"2017-11-19T18:50:29.000-05:00","updated_at":"2019-03-28T09:28:54.000-04:00","meta_title":"Installing Django CMS on Ubuntu | Hackers and Slackers","meta_description":"Get the play-by-play on how to install DjangoCMS: the largest of three major CMS products for Python's Django framework.","og_description":"Get the play-by-play on how to install DjangoCMS: the largest of three major CMS products for Python's Django framework.","og_image":"https://hackersandslackers.com/content/images/2019/03/djangocms-2.jpg","og_title":"Installing Django CMS on Ubuntu","twitter_description":"Get the play-by-play on how to install DjangoCMS: the largest of three major CMS products for Python's Django framework.","twitter_image":"https://hackersandslackers.com/content/images/2019/03/djangocms-1.jpg","twitter_title":"Installing Django CMS on Ubuntu","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"},{"name":"#Getting into Django","slug":"starting-django","description":"Getting started with Django: the original daddy of Python frameworks.","feature_image":"https://hackersandslackers.com/content/images/2019/03/django2.jpg","meta_description":"Getting started with Django: the original daddy of Python frameworks.","meta_title":"Setting up Django","visibility":"internal"}],"plaintext":"So you've selected Python as your language of choice for building a massive web\napp. Congratulations! While there are some that will point to Python's\nrelatively slow execution at runtime, you're brave enough to realize that saving\nchunks of your time is more important to the success of your project than\nbuilding your app in a marginally faster language.\n\n  There are a few options when it comes to picking an out-of-the-box CMS with\nDjango, but perhaps none are as popular as Django CMS\n[https://www.django-cms.org/en/].  DjangoCMS  is the biggest of the \"big three\"\nCMS choices for Django, with Mezzanine [http://mezzanine.jupo.org/]  and Wagtail\n[https://wagtail.io/]  following close behind (I personally like Wagtail, if I'm\ngonna be real here).\n\nAs it stands, there doesn't seem to be an existing  guide which walks through\nthe complete  installation of Django  + Django CMS. While is information exists\nin fragments, newcomers to Python could have trouble piecing much of this\ninformation together out of the gate. This guide hopes to serve as a reduction\nof friction to Django newcomers, thus ensuring Pythonic world domination.\n\nOur Stack\nTo get this party started, our VPS is going to run the following stack:\n\n * Ubuntu\n * Python 3\n * Virtualenv\n * PostgreSQL\n * Django\n * Django CMS\n\nUpdate All Dependencies\nFirst, we'll prep our VPS with all the necessary dependencies:\n\n$ apt-get update\n$ apt-get upgrade -y\n$ apt-get install python3 python3-pip python-dev libpq-dev postgresql postgresql-contrib\n\n\nCreate and Activate a Virtual Environment\nVirtualenv is included with Python3, so no installation needed here.\n\n$ virtualenv env\n$ source env/bin/activate\n\n\nInstall Django\nFind out what the latest distribution is by going here\n[https://www.djangoproject.com/download/].\n\n$ pip3 install Django==2.1.7\n\n\nInstall Django CMS\n$ pip3 install django-cms\n\n\nStart Project\nCreate a Django project in your desired directory.\n\n$ cd /home\n$ django-admin.py startproject yourproject\n\n\nUpdate Settings.py File\nWe'll need to update settings.py  with a few things.\n\n$ cd yourproject/yourproject\n$ vim settings.py\n\n\nThe resulting changes to settings.py  are shown in the block below. These\nchanges include:\n\n * Adding the first 4 lines in INSTALLED_APPS. These apps are specific to Django\n   CMS.\n * Adding the LANGUAGES  block.\n * Update the DATABASES  block with your preferred database. We'll set up the\n   corresponding database and database user later.\n * Add SITE_ID.\n\nINSTALLED_APPS = [\n    'django.contrib.sites',\n    'cms',\n    'menus',\n    'treebeard',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n\nLANGUAGES = [\n    ('en-us', 'English')\n]\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'yourdb',\n        'USER': 'youruser',\n        'PASSWORD': 'yourpass123',\n        'HOST': '127.0.0.1',\n        'PORT': '5432',\n    }\n}\n\nSITE_ID = 1\n\n\nSetting up PostgreSQL\nIn our case, we'll be using Postgres as our database. We already installed\nPostgreSQL earlier; the only thing left to install is Python's psycopg2  library\nfor connecting to PostgreSQL databases:\n\n$ pip3 install psycopg2\n\n\nActivate the psql shell as the Postgres user:\n\n$ su - postgres\n$ psql\n\n\nCreate the Database and Database User\nCreate a database with a user, matching the information you entered in \nsettings.py  earlier:\n\nCREATE DATABASE yourdb;\nCREATE USER youruser WITH PASSWORD 'yourpass123';\nALTER ROLE youruser SET client_encoding TO 'utf8';\nALTER ROLE youruser SET default_transaction_isolation TO 'read committed';\nALTER ROLE youruser SET timezone TO 'EST';\nGRANT ALL PRIVILEGES ON DATABASE yourdb TO youruser;\n\n\nExit the PostgreSQL user.\n\n\\q\nexit\n\n\nMigrate the Database Changes\nStart the migration.\n\n$ python3 manage.py migrate\n\n\nCreate a Superuser\nCreate a user for the CMS.\n\n$ python3 manage.py createsuperuser\n\n\nValidation \nMake sure everything is ok.\n\n$ python3 manage.py cms check\n\n\nAt this point, you might notice a few errors related to sekizai. We'll need to\nupdate a few more things.\n\nUpdate Settings.py Again\nWe'll need to update settings.py  with a few things.\n\nAdd 'sekizai' to INSTALLED_APPS.\n\nINSTALLED_APPS = [\n    'django.contrib.sites',\n    'cms',\n    'menus',\n    'treebeard',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'sekizai',\n]\n\n\nAdd an additional 5 lines to MIDDLEWARE:\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'django.middleware.locale.LocaleMiddleware',\n    'cms.middleware.user.CurrentUserMiddleware',\n    'cms.middleware.page.CurrentPageMiddleware',\n    'cms.middleware.toolbar.ToolbarMiddleware',\n    'cms.middleware.language.LanguageCookieMiddleware',\n]\n\n\nAdd 'sekizai.context_processors.sekizai',  and \n'django.template.context_processors.i18n',  to TEMPLATES:\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n                'sekizai.context_processors.sekizai',\n                'cms.context_processors.cms_settings',\n                'django.template.context_processors.i18n',\n           ],\n       },\n    },\n]\n\n\nFinally, add your box's IP address to ALLOWED_HOSTS:\n\nALLOWED_HOSTS = [\n    '000.000.00.00',\n]\n\n\nUpdate urls.py\nUpdate urls.py  to look like the following:\n\nfrom django.conf.urls import url, include\nfrom django.contrib import admin\n\nurlpatterns = [\n    url(r'^admin/', admin.site.urls),\n    url(r'^', include('cms.urls')),\n]\n\n\nGive it a Go\nEverything should be good! Start the app on port 8000 by entering the following:\n\n$ python3 manage.py runserver 0.0.0.0:8000\n\n\nThe app should now be accessible at your box's IP address.","html":"<p>So you've selected Python as your language of choice for building a massive web app. Congratulations! While there are some that will point to Python's relatively slow execution at runtime, you're brave enough to realize that saving chunks of your time is more important to the success of your project than building your app in a marginally faster language.</p><p> There are a few options when it comes to picking an out-of-the-box CMS with Django, but perhaps none are as popular as <a href=\"https://www.django-cms.org/en/\"><em>Django CMS</em></a><em>.</em> <strong>DjangoCMS</strong> is the biggest of the \"big three\" CMS choices for Django, with <a href=\"http://mezzanine.jupo.org/\">Mezzanine</a> and <a href=\"https://wagtail.io/\">Wagtail</a> following close behind (I personally like Wagtail, if I'm gonna be real here).</p><p>As it stands, there doesn't seem to be an existing  guide which walks through the <em>complete</em> installation of <strong>Django</strong> + <strong>Django CMS</strong>. While is information exists in fragments, newcomers to Python could have trouble piecing much of this information together out of the gate. This guide hopes to serve as a reduction of friction to Django newcomers, thus ensuring Pythonic world domination.</p><h2 id=\"our-stack\">Our Stack</h2><p>To get this party started, our VPS is going to run the following stack:</p><ul><li>Ubuntu</li><li>Python 3</li><li>Virtualenv</li><li>PostgreSQL</li><li>Django</li><li>Django CMS</li></ul><h2 id=\"update-all-dependencies\">Update All Dependencies</h2><p>First, we'll prep our VPS with all the necessary dependencies:</p><!--kg-card-begin: code--><pre><code>$ apt-get update\n$ apt-get upgrade -y\n$ apt-get install python3 python3-pip python-dev libpq-dev postgresql postgresql-contrib\n</code></pre><!--kg-card-end: code--><h2 id=\"create-and-activate-a-virtual-environment\">Create and Activate a Virtual Environment</h2><p>Virtualenv is included with Python3, so no installation needed here.</p><!--kg-card-begin: code--><pre><code>$ virtualenv env\n$ source env/bin/activate\n</code></pre><!--kg-card-end: code--><h2 id=\"install-django\">Install Django</h2><p>Find out what the latest distribution is by going <a href=\"https://www.djangoproject.com/download/\">here</a>.</p><!--kg-card-begin: code--><pre><code>$ pip3 install Django==2.1.7\n</code></pre><!--kg-card-end: code--><h3 id=\"install-django-cms\">Install Django CMS</h3><!--kg-card-begin: code--><pre><code>$ pip3 install django-cms\n</code></pre><!--kg-card-end: code--><h2 id=\"start-project\">Start Project</h2><p>Create a Django project in your desired directory.</p><!--kg-card-begin: code--><pre><code>$ cd /home\n$ django-admin.py startproject yourproject\n</code></pre><!--kg-card-end: code--><h2 id=\"update-settings-py-file\">Update Settings.py File</h2><p>We'll need to update <code>settings.py</code> with a few things.</p><!--kg-card-begin: code--><pre><code>$ cd yourproject/yourproject\n$ vim settings.py\n</code></pre><!--kg-card-end: code--><p>The resulting changes to <code>settings.py</code> are shown in the block below. These changes include:</p><ul><li>Adding the first 4 lines in <strong>INSTALLED_APPS</strong>. These apps are specific to Django CMS.</li><li>Adding the <strong>LANGUAGES</strong> block.</li><li>Update the <strong>DATABASES</strong> block with your preferred database. We'll set up the corresponding database and database user later.</li><li>Add <strong>SITE_ID</strong>.</li></ul><!--kg-card-begin: code--><pre><code>INSTALLED_APPS = [\n    'django.contrib.sites',\n    'cms',\n    'menus',\n    'treebeard',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n\nLANGUAGES = [\n    ('en-us', 'English')\n]\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'yourdb',\n        'USER': 'youruser',\n        'PASSWORD': 'yourpass123',\n        'HOST': '127.0.0.1',\n        'PORT': '5432',\n    }\n}\n\nSITE_ID = 1\n</code></pre><!--kg-card-end: code--><h2 id=\"setting-up-postgresql\">Setting up PostgreSQL</h2><p>In our case, we'll be using Postgres as our database. We already installed PostgreSQL earlier; the only thing left to install is Python's <strong>psycopg2</strong> library for connecting to PostgreSQL databases:</p><!--kg-card-begin: code--><pre><code>$ pip3 install psycopg2\n</code></pre><!--kg-card-end: code--><p>Activate the psql shell as the Postgres user:</p><!--kg-card-begin: code--><pre><code>$ su - postgres\n$ psql\n</code></pre><!--kg-card-end: code--><h3 id=\"create-the-database-and-database-user\">Create the Database and Database User</h3><p>Create a database with a user, matching the information you entered in <code>settings.py</code> earlier:</p><!--kg-card-begin: code--><pre><code>CREATE DATABASE yourdb;\nCREATE USER youruser WITH PASSWORD 'yourpass123';\nALTER ROLE youruser SET client_encoding TO 'utf8';\nALTER ROLE youruser SET default_transaction_isolation TO 'read committed';\nALTER ROLE youruser SET timezone TO 'EST';\nGRANT ALL PRIVILEGES ON DATABASE yourdb TO youruser;\n</code></pre><!--kg-card-end: code--><p>Exit the PostgreSQL user.</p><!--kg-card-begin: code--><pre><code>\\q\nexit\n</code></pre><!--kg-card-end: code--><h3 id=\"migrate-the-database-changes\">Migrate the Database Changes</h3><p>Start the migration.</p><!--kg-card-begin: code--><pre><code>$ python3 manage.py migrate\n</code></pre><!--kg-card-end: code--><h3 id=\"create-a-superuser\">Create a Superuser</h3><p>Create a user for the CMS.</p><!--kg-card-begin: code--><pre><code>$ python3 manage.py createsuperuser\n</code></pre><!--kg-card-end: code--><h3 id=\"validation\">Validation </h3><p>Make sure everything is ok.</p><!--kg-card-begin: code--><pre><code>$ python3 manage.py cms check\n</code></pre><!--kg-card-end: code--><p>At this point, you might notice a few errors related to <em>sekizai</em>. We'll need to update a few more things.</p><h2 id=\"update-settings-py-again\">Update Settings.py Again</h2><p>We'll need to update <code>settings.py</code> with a few things.</p><p>Add 'sekizai' to <strong>INSTALLED_APPS</strong>.</p><!--kg-card-begin: code--><pre><code>INSTALLED_APPS = [\n    'django.contrib.sites',\n    'cms',\n    'menus',\n    'treebeard',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'sekizai',\n]\n</code></pre><!--kg-card-end: code--><p>Add an additional 5 lines to <strong>MIDDLEWARE</strong>:</p><!--kg-card-begin: code--><pre><code>MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'django.middleware.locale.LocaleMiddleware',\n    'cms.middleware.user.CurrentUserMiddleware',\n    'cms.middleware.page.CurrentPageMiddleware',\n    'cms.middleware.toolbar.ToolbarMiddleware',\n    'cms.middleware.language.LanguageCookieMiddleware',\n]\n</code></pre><!--kg-card-end: code--><p>Add <code>'sekizai.context_processors.sekizai',</code> and <code>'django.template.context_processors.i18n',</code> to <strong>TEMPLATES</strong>:</p><!--kg-card-begin: code--><pre><code>TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n                'sekizai.context_processors.sekizai',\n                'cms.context_processors.cms_settings',\n                'django.template.context_processors.i18n',\n           ],\n       },\n    },\n]\n</code></pre><!--kg-card-end: code--><p>Finally, add your box's IP address to <strong>ALLOWED_HOSTS</strong>:</p><!--kg-card-begin: code--><pre><code>ALLOWED_HOSTS = [\n    '000.000.00.00',\n]\n</code></pre><!--kg-card-end: code--><h2 id=\"update-urls-py\">Update urls.py</h2><p>Update <strong>urls.py</strong> to look like the following:</p><!--kg-card-begin: code--><pre><code>from django.conf.urls import url, include\nfrom django.contrib import admin\n\nurlpatterns = [\n    url(r'^admin/', admin.site.urls),\n    url(r'^', include('cms.urls')),\n]\n</code></pre><!--kg-card-end: code--><h2 id=\"give-it-a-go\">Give it a Go</h2><p>Everything should be good! Start the app on port 8000 by entering the following:</p><!--kg-card-begin: code--><pre><code>$ python3 manage.py runserver 0.0.0.0:8000\n</code></pre><!--kg-card-end: code--><p>The app should now be accessible at your box's IP address.</p>","url":"https://hackersandslackers.com/installing-django-cms/","uuid":"802f191e-c459-4bdc-86cc-088d3727a324","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5a12160a2a6bec285f845812"}},"pageContext":{"slug":"installing-django-cms"}}