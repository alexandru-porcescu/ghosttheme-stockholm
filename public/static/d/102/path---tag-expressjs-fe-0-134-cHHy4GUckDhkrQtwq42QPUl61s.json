{"data":{"ghostTag":{"slug":"expressjs","name":"ExpressJS","visibility":"public","feature_image":null,"description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch as a simplistic Express app can evolve into a beautiful monstrosity.","meta_title":"ExpressJS Framework | Hackers and Slackers","meta_description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch a simplistic Express app can evolve into a beautiful monstrosity."},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867368d","title":"Upgrading to Gulp 4.0.0","slug":"upgrading-to-gulp-4","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/06/gulp2@2x.jpg","excerpt":"Upgrading to Gulp 4 and tackling the breaking changes that come with it.","custom_excerpt":"Upgrading to Gulp 4 and tackling the breaking changes that come with it.","created_at_pretty":"27 June, 2018","published_at_pretty":"28 June, 2018","updated_at_pretty":"10 April, 2019","created_at":"2018-06-27T11:06:39.000-04:00","published_at":"2018-06-28T07:30:00.000-04:00","updated_at":"2019-04-09T21:11:52.000-04:00","meta_title":"Upgrading to Gulp 4.0.0 | Hackers and Slackers","meta_description":"Upgrading to Gulp 4 and tackling the breaking changes that come with it.","og_description":"Upgrading to Gulp 4 and tackling the breaking changes that come with it.","og_image":"https://hackersandslackers.com/content/images/2018/06/gulp2@2x.jpg","og_title":"Upgrading to Gulp 4.0.0","twitter_description":"Upgrading to Gulp 4 and tackling the breaking changes that come with it.","twitter_image":"https://hackersandslackers.com/content/images/2018/06/gulp2@2x.jpg","twitter_title":"Upgrading to Gulp 4.0.0","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},"tags":[{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},{"name":"Frontend","slug":"frontend","description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","feature_image":null,"meta_description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","meta_title":"Frontend Development | Hackers and Slackers","visibility":"public"},{"name":"ExpressJS","slug":"expressjs","description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch as a simplistic Express app can evolve into a beautiful monstrosity.","feature_image":null,"meta_description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch a simplistic Express app can evolve into a beautiful monstrosity.","meta_title":"ExpressJS Framework | Hackers and Slackers","visibility":"public"},{"name":"JavaScript","slug":"javascript","description":"JavaScript covering both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","feature_image":null,"meta_description":"JavaScript topics, both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","meta_title":"Javascript Tutorials | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"}],"plaintext":"Back in the day we touched on some of the wonderful upsides of implementing Gulp\n[https://hackersandslackers.com/using-gulp-to-make-frontend-tolerable/]  into\nyour workflow. If you have been following along and happened to install the\nlatest version of Gulp, you may has noticed something horrible happen: nothing\nworked. I probably should’ve mentioned that the latest major update to Gulp,\nGulp 4, is actually a breaking update. That's my bad.\n\nStrangely, documentation around upgrading from Gulp 3.X to Gulp 4 seems to be\nlagging way behind this release, with the closest thing to official\ndocumentation being some article a guy posted on Medium a while back.\nInteresting strategy, Gulp team.\n\nWhat's the Big Deal?\nThere are a couple architectural differences with Gulp 4, for the better.\nPreviously Gulp would allows us to hold off on executing tasks until dependent\ntask were completed. If task C were dependent on the completion of tasks both A\nand B, we would represent this as such:\n\ngulp.task('default', ['A', 'B'], function() {etc});\n\ngulp.task('A', ['C'], function() {etc});\ngulp.task('B', ['C'], function() {etc});\n\ngulp.task('C', function() {etc});\n\n\nWhile this was an effective way of handling such a workflow, Gulp has made the\nprocess a bit cleaner and easier to digest with the additions of gulp.parallel \nand gulp.series.\n\nParallel  denotes tasks which should be executed in parallel, aka the same time.\n\nSeries  defines a linear order of how tasks should be executed. Parallels can\nexist inside of series, effectively resulting in a fork of tasks before moving\nto the next task in the series:\n\ngulp.task('A', function() {etc});\ngulp.task('B', function() {etc});\n\ngulp.task('C', function() {etc});\n\ngulp.task('default', gulp.series('C', gulp.parallel('A', 'B'), function() {etc}));\n\n\nIn this case, Task C forks into Tasks A and B before converging on their merry\nway to the rest of the series.\n\nQuick Install\nTo get your hands on this, first uninstall your current versions of Gulp and\nGulp CLI:\n\nnpm uninstall gulp --save-dev\nnpm uninstall gulp -g\n\n\nThen we can go ahead and reinstall Gulp as normal. Feel free to force the\nversion:\n\nnpm install gulp-cli -g\nnpm install gulp@4.0.0 -D\n\n\nExample Gulp File\nEnough with all the jargon, we both know what you came here for. let me just\npost what I see to be the bare minimum Gulpfile for your copy and pasting\npleasure:\n\nvar gulp \t= require('gulp'),\n  \tless \t= require('gulp-less'),\n  \tconcat \t= require('gulp-concat'),\n  \tuglify \t= require('gulp-uglify'),\n  \trename \t= require('gulp-rename'),\n    handlebars = require('gulp-handlebars'),\n    declare = require('gulp-declare'),\n    cleanCSS = require('gulp-clean-css');\n\nvar paths = {\n  styles: {\n    src: 'src/less/*.less',\n    dest: 'assets/css'\n  },\n  scripts: {\n    src: 'src/js/*.js',\n    dest: 'assets/js'\n  },\n  html: {\n    src: 'views/*.hbs',\n    dest: 'assets/'\n  }\n};\n\nfunction styles() {\n  return gulp\n  \t.src(paths.styles.src, {\n      sourcemaps: true\n    })\n\t.pipe(less())\n\t.pipe(rename({\n\t  basename: 'main',\n\t  suffix: '.min'\n\t}))\n.pipe(cleanCSS({debug: true}))\n.pipe(concat('main.min.css'))\n.pipe(gulp.dest(paths.styles.dest));\n}\n\nfunction scripts() {\n  return gulp\n\t.src(paths.scripts.src, {\n\t\tsourcemaps: true\n\t})\n\t.pipe(uglify())\n\t.pipe(concat('main.min.js'))\n\t.pipe(gulp.dest(paths.scripts.dest));\n}\n\nfunction templates(){\n  gulp.src('views/*.hbs')\n    .pipe(handlebars())\n    //.pipe(wrap('Handlebars.template(<%= contents %>)'))\n    .pipe(declare({\n      namespace: 'MyApp.templates',\n      noRedeclare: true, // Avoid duplicate declarations\n    }))\n    .pipe(concat('templates.js'))\n    .pipe(gulp.dest('assets/js/'));\n}\n\nfunction watch() {\n  gulp.watch(paths.scripts.src, scripts);\n  gulp.watch(paths.styles.src, styles);\n}\n\nvar build = gulp.parallel(styles, scripts, templates, watch);\n\ngulp.task(build);\ngulp.task('default', build);\n\n\nNothing crazy here: just the typical concat and minification of source files.\n\nHopefully this helps somebody wondering why their latest Gulp installation broke\ntheir Gulpfile. Perhaps next time we'll dig down deep into the shadows of Gulp\nplugins to reveal secret elite legendary Gulp hacks for 1337 hax0rs only. Or\nnot, we could do whatever honestly.","html":"<p>Back in the day we touched on some of the wonderful upsides of <a href=\"https://hackersandslackers.com/using-gulp-to-make-frontend-tolerable/\">implementing Gulp</a> into your workflow. If you have been following along and happened to install the latest version of Gulp, you may has noticed something horrible happen: <em>nothing worked</em>. I probably should’ve mentioned that the latest major update to Gulp, Gulp 4, is actually a breaking update. That's my bad.</p><p>Strangely, documentation around upgrading from Gulp 3.X to Gulp 4 seems to be lagging way behind this release, with the closest thing to official documentation being some article a guy posted on Medium a while back. Interesting strategy, Gulp team.</p><h2 id=\"what-s-the-big-deal\">What's the Big Deal?</h2><p>There are a couple architectural differences with Gulp 4, for the better. Previously Gulp would allows us to hold off on executing tasks until dependent task were completed. If task C were dependent on the completion of tasks both A and B, we would represent this as such:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">gulp.task('default', ['A', 'B'], function() {etc});\n\ngulp.task('A', ['C'], function() {etc});\ngulp.task('B', ['C'], function() {etc});\n\ngulp.task('C', function() {etc});\n</code></pre>\n<!--kg-card-end: markdown--><p>While this was an effective way of handling such a workflow, Gulp has made the process a bit cleaner and easier to digest with the additions of <strong>gulp.parallel</strong> and <strong>gulp.series</strong>.</p><p><strong>Parallel</strong> denotes tasks which should be executed in parallel, aka the same time.</p><p><strong>Series</strong> defines a linear order of how tasks should be executed. Parallels can exist inside of series, effectively resulting in a fork of tasks before moving to the next task in the series:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">gulp.task('A', function() {etc});\ngulp.task('B', function() {etc});\n\ngulp.task('C', function() {etc});\n\ngulp.task('default', gulp.series('C', gulp.parallel('A', 'B'), function() {etc}));\n</code></pre>\n<!--kg-card-end: markdown--><p>In this case, Task C forks into Tasks A and B before converging on their merry way to the rest of the series.</p><h2 id=\"quick-install\">Quick Install</h2><p>To get your hands on this, first uninstall your current versions of Gulp and Gulp CLI:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">npm uninstall gulp --save-dev\nnpm uninstall gulp -g\n</code></pre>\n<!--kg-card-end: markdown--><p>Then we can go ahead and reinstall Gulp as normal. Feel free to force the version:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">npm install gulp-cli -g\nnpm install gulp@4.0.0 -D\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"example-gulp-file\">Example Gulp File</h2><p>Enough with all the jargon, we both know what you came here for. let me just post what I see to be the bare minimum Gulpfile for your copy and pasting pleasure:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">var gulp \t= require('gulp'),\n  \tless \t= require('gulp-less'),\n  \tconcat \t= require('gulp-concat'),\n  \tuglify \t= require('gulp-uglify'),\n  \trename \t= require('gulp-rename'),\n    handlebars = require('gulp-handlebars'),\n    declare = require('gulp-declare'),\n    cleanCSS = require('gulp-clean-css');\n\nvar paths = {\n  styles: {\n    src: 'src/less/*.less',\n    dest: 'assets/css'\n  },\n  scripts: {\n    src: 'src/js/*.js',\n    dest: 'assets/js'\n  },\n  html: {\n    src: 'views/*.hbs',\n    dest: 'assets/'\n  }\n};\n\nfunction styles() {\n  return gulp\n  \t.src(paths.styles.src, {\n      sourcemaps: true\n    })\n\t.pipe(less())\n\t.pipe(rename({\n\t  basename: 'main',\n\t  suffix: '.min'\n\t}))\n.pipe(cleanCSS({debug: true}))\n.pipe(concat('main.min.css'))\n.pipe(gulp.dest(paths.styles.dest));\n}\n\nfunction scripts() {\n  return gulp\n\t.src(paths.scripts.src, {\n\t\tsourcemaps: true\n\t})\n\t.pipe(uglify())\n\t.pipe(concat('main.min.js'))\n\t.pipe(gulp.dest(paths.scripts.dest));\n}\n\nfunction templates(){\n  gulp.src('views/*.hbs')\n    .pipe(handlebars())\n    //.pipe(wrap('Handlebars.template(&lt;%= contents %&gt;)'))\n    .pipe(declare({\n      namespace: 'MyApp.templates',\n      noRedeclare: true, // Avoid duplicate declarations\n    }))\n    .pipe(concat('templates.js'))\n    .pipe(gulp.dest('assets/js/'));\n}\n\nfunction watch() {\n  gulp.watch(paths.scripts.src, scripts);\n  gulp.watch(paths.styles.src, styles);\n}\n\nvar build = gulp.parallel(styles, scripts, templates, watch);\n\ngulp.task(build);\ngulp.task('default', build);\n</code></pre>\n<!--kg-card-end: markdown--><p>Nothing crazy here: just the typical concat and minification of source files.</p><p>Hopefully this helps somebody wondering why their latest Gulp installation broke their Gulpfile. Perhaps next time we'll dig down deep into the shadows of Gulp plugins to reveal secret elite legendary Gulp hacks for 1337 hax0rs only. Or not, we could do whatever honestly.</p>","url":"https://hackersandslackers.com/upgrading-to-gulp-4/","uuid":"deb7ac06-d159-4c66-8d8a-11442ffbb395","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b33a7ff1e2df4575e4c101c"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb867368c","title":"Building Page Templates in ExpressJS With Handlebars","slug":"handlebars-templating-in-expressjs","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/handlebars.jpg","excerpt":"Building views in NodeJS by incorporating layouts, partials, and everything in between.","custom_excerpt":"Building views in NodeJS by incorporating layouts, partials, and everything in between.","created_at_pretty":"25 June, 2018","published_at_pretty":"26 June, 2018","updated_at_pretty":"05 March, 2019","created_at":"2018-06-25T16:39:57.000-04:00","published_at":"2018-06-26T18:52:57.000-04:00","updated_at":"2019-03-04T21:54:13.000-05:00","meta_title":"Handlebars Templating in ExpressJS | Hackers and Slackers","meta_description":"Building views in NodeJS by incorporating layouts, partials, and everything in between.","og_description":"Building views in NodeJS by incorporating layouts, partials, and everything in between.","og_image":"https://hackersandslackers.com/content/images/2019/03/handlebars.jpg","og_title":"Handlebars Templating in ExpressJS","twitter_description":"Building views in NodeJS by incorporating layouts, partials, and everything in between.","twitter_image":"https://hackersandslackers.com/content/images/2019/03/handlebars.jpg","twitter_title":"Handlebars Templating in ExpressJS","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},"tags":[{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},{"name":"Frontend","slug":"frontend","description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","feature_image":null,"meta_description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","meta_title":"Frontend Development | Hackers and Slackers","visibility":"public"},{"name":"ExpressJS","slug":"expressjs","description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch as a simplistic Express app can evolve into a beautiful monstrosity.","feature_image":null,"meta_description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch a simplistic Express app can evolve into a beautiful monstrosity.","meta_title":"ExpressJS Framework | Hackers and Slackers","visibility":"public"},{"name":"JavaScript","slug":"javascript","description":"JavaScript covering both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","feature_image":null,"meta_description":"JavaScript topics, both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","meta_title":"Javascript Tutorials | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"}],"plaintext":"Writing HTML sucks, thus we should do everything to minimize the time we spend\nwriting it as much as possible.  Thus, we have Handlebars\n[https://handlebarsjs.com/]: a lightweight templating system for Node.\nHandlebars allows us to avoid repetitive code by compiling the final DOM\nstructure of our site via logic, typically compiled by task runners such as\nGrunt or Gulp.\n\nIf you're involved in any sort of Node development, you're probably already\nfamiliar with Handlebars to a degree. I thought I was, but it isn't until we\nneed to start a new project from scratch that we realize that we totally forgot\nthe configuration process we took last time. That's why I'm here.\n\nLet's have a quick refresher on the parts that make up Handlebars\n\n * Layouts  are the most ambiguous high-level layer; these are commonly used to\n   set underlying page metadata as well as general layout (for lack of a better\n   term).\n * Pages  are templates which equate to one type  of page. For example, the\n   'post' page on this site is unique from, say, the homepage. Because all posts\n   share elements with one another, hundreds of posts share this same template.\n * Partials  are snippets which can be shared between pages, such as navigation.\n * A Context  is content which is passed to templates and result in being the\n   page's content\n * Helpers  are the closest we get to logic in Handlebars: these allow us to\n   display or omit content based on conditionals such as if  statements. For\n   example: showing an author's avatar only if they have uploaded an image.\n\nProject Setup\nWe're going to use the Express /views  folder to contain all of our handlebars\ngoodness. Our project should look something like this:\n\nmyapp\n├── bin\n├── build\n├── routes\n├── src\n├── views\n│   ├── layouts/\n│   ├── partials/\n│   └── error.hbs\n│   └── index.hbs\n│   └── login.hbs\n│   └── etc\n└── README.md\n└── app.js\n└── package.json\n\n\nIt's important to distinguish that we've separated our views folder into three\nclassifications for layouts, partials, and pages, where pages occupy the root \n/views  directory. It's important to keep this distinction as our structure\naffects how we serve up these templates.\n\nConfigure that Ish\nInstall handlebars:\n\nnpm install handlebars --save\n\n\nCrack open your app.js  file or whatever it is you call that thing. Require\nhandlebars:\n\nvar hbs = require( 'express-handlebars');\n\n\nNext we'll configure Express to use Handlebars as the view engine, and tell\nExpress where to find these files:\n\n// view engine setup\napp.set('view engine', 'hbs');\n\napp.engine( 'hbs', hbs( {\n  extname: 'hbs',\n  defaultView: 'default',\n  layoutsDir: __dirname + '/views/pages/',\n  partialsDir: __dirname + '/views/partials/'\n}));\n\n\nExpress assumes by default that we're storing our views in the '/views' folder,\nwhich we are. We take this a step further by specifying which subfolders our \npartials  and layouts  are in above. We can save pages  directly in /views.\n\nNotice that we're also setting a default layout. We can override this in our\nroutes if needed, but setting a default layout is useful for loading pages in an\nhtml wrapper container page metadata.\n\nKicks on Route 66\nLet's create our first route in routes/index.js. We're going to load a view\ncalled home  into a layout called default:\n\nvar express = require('express');\nvar router = express.Router();\n\nrouter.get('/', function(req, res, next) {\n  res.render('home', {layout: 'default', template: 'home-template'});\n});\n\n\nThis will render views/home.hbs  into views/layouts/default.hbs, provided are\nviews are set up correctly. We also pass a custom value template  which is\nuser-defined; more on that below.\n\nBasic Usage\nLet's finally take a look at our actual Handlebars views. Here's default.hbs:\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <title>Best Website</title>\n  <meta name=\"HandheldFriendly\" content=\"True\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, viewport-fit=cover\" />\n  <link rel=\"stylesheet\" href=\"/css/main.min.css\">\n</head>\n<body class=\"{{template}}\">\n  <div class=\"container\">\n\t  {{{body}}}\n  </div>\n  {{> footer}}\n</body>\n</html>\n\n\nWe have three values here: {{template}}  and {{{body}}}, and {{> footer}}.\n\n{{template}}  is a value with double brackets, thus is expecting linear data. We\npassed template  in our route: this sets the body class to equal home-template \non the chance that we'll want to apply page-specific styles or logic in the\nfuture.\n\n{{{body}}}  is rocking the triple brackets, and is reserved specifically to\nserve this purpose: loading templates into other templates.\n\nLastly we have {{> footer}}. This will load a partial named footer  from \nviews/partials/footer.hbs, provided that we create it. The difference between\nhow {{{body}}}  and {{> footer}}  are being loaded have to do with a general\nworkflow philosophy; pages are the main event and thus are loaded into layouts\nby their command. Partials can be called by pages at will whenever we please.\n\nThere's obviously a lot more to Handlebars- the fun doesn't truly begin until we\npull dynamic values from databases or wherever. We'll get there.","html":"<p>Writing HTML sucks, thus we should do everything to minimize the time we spend writing it as much as possible.  Thus, we have <a href=\"https://handlebarsjs.com/\">Handlebars</a>: a lightweight templating system for Node. Handlebars allows us to avoid repetitive code by compiling the final DOM structure of our site via logic, typically compiled by task runners such as Grunt or Gulp.</p><p>If you're involved in any sort of Node development, you're probably already familiar with Handlebars to a degree. I thought I was, but it isn't until we need to start a new project from scratch that we realize that we totally forgot the configuration process we took last time. That's why I'm here.</p><p>Let's have a quick refresher on the parts that make up Handlebars</p><ul><li><strong>Layouts</strong> are the most ambiguous high-level layer; these are commonly used to set underlying page metadata as well as general layout (for lack of a better term).</li><li><strong>Pages</strong> are templates which equate to one <em>type</em> of page. For example, the 'post' page on this site is unique from, say, the homepage. Because all posts share elements with one another, hundreds of posts share this same template.</li><li><strong>Partials</strong> are snippets which can be shared between pages, such as navigation.</li><li>A <strong>Context</strong> is content which is passed to templates and result in being the page's content</li><li><strong>Helpers</strong> are the closest we get to logic in Handlebars: these allow us to display or omit content based on conditionals such as <em>if</em> statements. For example: showing an author's avatar only if they have uploaded an image.</li></ul><h2 id=\"project-setup\">Project Setup</h2><p>We're going to use the Express <em>/views</em> folder to contain all of our handlebars goodness. Our project should look something like this:</p><pre><code class=\"language-bash\">myapp\n├── bin\n├── build\n├── routes\n├── src\n├── views\n│   ├── layouts/\n│   ├── partials/\n│   └── error.hbs\n│   └── index.hbs\n│   └── login.hbs\n│   └── etc\n└── README.md\n└── app.js\n└── package.json\n</code></pre>\n<p>It's important to distinguish that we've separated our views folder into three classifications for <strong>layouts</strong>, <strong>partials</strong>, and <strong>pages</strong>, where pages occupy the root <code>/views</code> directory. It's important to keep this distinction as our structure affects how we serve up these templates.</p><h2 id=\"configure-that-ish\">Configure that Ish</h2><p>Install handlebars:</p><pre><code class=\"language-bash\">npm install handlebars --save\n</code></pre>\n<p>Crack open your <code>app.js</code> file or whatever it is you call that thing. Require handlebars:</p><pre><code class=\"language-javascript\">var hbs = require( 'express-handlebars');\n</code></pre>\n<p>Next we'll configure Express to use Handlebars as the view engine, and tell Express where to find these files:</p><pre><code class=\"language-javascript\">// view engine setup\napp.set('view engine', 'hbs');\n\napp.engine( 'hbs', hbs( {\n  extname: 'hbs',\n  defaultView: 'default',\n  layoutsDir: __dirname + '/views/pages/',\n  partialsDir: __dirname + '/views/partials/'\n}));\n</code></pre>\n<p>Express assumes by default that we're storing our views in the '/views' folder, which we are. We take this a step further by specifying which subfolders our <strong>partials</strong> and <strong>layouts</strong> are in above. We can save <strong>pages</strong> directly in <code>/views</code>.</p><p>Notice that we're also setting a default layout. We can override this in our routes if needed, but setting a default layout is useful for loading pages in an html wrapper container page metadata.</p><h2 id=\"kicks-on-route-66\">Kicks on Route 66</h2><p>Let's create our first route in <code>routes/index.js</code>. We're going to load a view called <em>home</em> into a layout called <em>default</em>:</p><pre><code class=\"language-javascript\">var express = require('express');\nvar router = express.Router();\n\nrouter.get('/', function(req, res, next) {\n  res.render('home', {layout: 'default', template: 'home-template'});\n});\n</code></pre>\n<p>This will render <code>views/home.hbs</code> into <code>views/layouts/default.hbs</code>, provided are views are set up correctly. We also pass a custom value <strong>template</strong> which is user-defined; more on that below.</p><h2 id=\"basic-usage\">Basic Usage</h2><p>Let's finally take a look at our actual Handlebars views. Here's <strong>default.hbs</strong>:</p><pre><code class=\"language-handlebars\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset=&quot;utf-8&quot; /&gt;\n  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;\n  &lt;title&gt;Best Website&lt;/title&gt;\n  &lt;meta name=&quot;HandheldFriendly&quot; content=&quot;True&quot; /&gt;\n  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, viewport-fit=cover&quot; /&gt;\n  &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/main.min.css&quot;&gt;\n&lt;/head&gt;\n&lt;body class=&quot;{{template}}&quot;&gt;\n  &lt;div class=&quot;container&quot;&gt;\n\t  {{{body}}}\n  &lt;/div&gt;\n  {{&gt; footer}}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>We have three values here: <strong>{{template}}</strong> and <strong>{{{body}}}</strong>, and <strong>{{&gt; footer}}</strong>.</p><p><strong>{{template}}</strong> is a value with double brackets, thus is expecting linear data. We passed <em>template</em> in our route: this sets the body class to equal <em>home-template</em> on the chance that we'll want to apply page-specific styles or logic in the future.</p><p><strong>{{{body}}}</strong> is rocking the triple brackets, and is reserved specifically to serve this purpose: loading templates into other templates.</p><p>Lastly we have <strong>{{&gt; footer}}</strong>. This will load a partial named <em>footer</em> from <code>views/partials/footer.hbs</code>, provided that we create it. The difference between how <code>{{{body}}}</code> and <code>{{&gt; footer}}</code> are being loaded have to do with a general workflow philosophy; pages are the main event and thus are loaded into layouts by their command. Partials can be called by pages at will whenever we please.</p><p>There's obviously a lot more to Handlebars- the fun doesn't truly begin until we pull dynamic values from databases or wherever. We'll get there.</p>","url":"https://hackersandslackers.com/handlebars-templating-in-expressjs/","uuid":"9258a456-aee9-4d91-a36b-b1db735270b7","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b31531d04c0af72fa9a7681"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673683","title":"Read and Write to S3 Buckets via NodeJS","slug":"accessing-private-s3-objects-with-node","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2018/06/nodes3@2x.jpg","excerpt":"Node’s most popular package interacting with the most popular file store on the world’s most popular cloud.","custom_excerpt":"Node’s most popular package interacting with the most popular file store on the world’s most popular cloud.","created_at_pretty":"21 June, 2018","published_at_pretty":"22 June, 2018","updated_at_pretty":"28 March, 2019","created_at":"2018-06-21T19:26:44.000-04:00","published_at":"2018-06-22T07:30:00.000-04:00","updated_at":"2019-03-28T05:25:16.000-04:00","meta_title":"Accessing Private S3 Objects with Node | Hackers and Slackers","meta_description":"Node’s most popular package interacting with the most popular file store on the world’s most popular cloud.","og_description":"Node’s most popular package interacting with the most popular file store on the world’s most popular cloud.","og_image":"https://hackersandslackers.com/content/images/2018/06/nodes3@2x.jpg","og_title":"Accessing Private S3 Objects with Node","twitter_description":"Node’s most popular package interacting with the most popular file store on the world’s most popular cloud.","twitter_image":"https://hackersandslackers.com/content/images/2018/06/nodes3@2x.jpg","twitter_title":"Accessing Private S3 Objects with Node","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},"tags":[{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},{"name":"AWS","slug":"aws","description":"Monolithic cloud architecture via microservices. Become familiar with AWS products, account administration, security practices, and tips to make it all easier.","feature_image":null,"meta_description":"Become familiar with AWS services, account administration, security practices, and tips to make it all easier.","meta_title":"Learn AWS | Hackers and Slackers","visibility":"public"},{"name":"ExpressJS","slug":"expressjs","description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch as a simplistic Express app can evolve into a beautiful monstrosity.","feature_image":null,"meta_description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch a simplistic Express app can evolve into a beautiful monstrosity.","meta_title":"ExpressJS Framework | Hackers and Slackers","visibility":"public"},{"name":"JavaScript","slug":"javascript","description":"JavaScript covering both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","feature_image":null,"meta_description":"JavaScript topics, both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","meta_title":"Javascript Tutorials | Hackers and Slackers","visibility":"public"}],"plaintext":"We here at H+S are dedicated to one simple cause: creating posts about oddly\nspecific programming scenarios. Somewhere in the world as sad soul is looking to\nprogrammatically access files from an S3 server while keeping their bucket\nprivate. To that person: we heard you.\n\nThere are plenty of reasons you'd want to access files in S3. For example, let's\nsay you read that post\n[https://hackersandslackers.com/using-pandas-with-aws-lambda/]  about using\nPandas in a Lambda function. Since you're already familiar with PyMySQL\n[https://hackersandslackers.com/using-pymysql/], you may hypothetically be in a\nposition to export data from a DB query to a CSV saved in S3. I bet you can\nguess what I've been doing lately.\n\nConfigure the AWS CLI on your VPS\nThe easiest and safest way to interact with other AWS services on your EC2\ninstance (or VPS of choice) is via the AWS CLI. This is easily installed as a\nglobal Python3 library:\n\n$ pip3 install awscli\n\n\nWith the CLI installed we'll be able to do something truly magical: set our AWS\nconfiguration globally. This means that any time we use interact with a\nmicroservice  (such as S3), the boto3  library will always look to the files\nstored in ~/.aws/  for our keys and secrets, without us specifying.  This\ncritical from a security perspective as it removes all  mentions of credentials\nfrom our codebase: including the location of said secrets.\n\nUse $ aws configure  to kickstart the process:\n\n$ aws configure\n$ AWS Access Key ID [None]: YOURACCESSKEY\n$ AWS Secret Access Key [None]: YOURSECRETKEY\n$ Default region name [None]: us-east-2\n$ Default output format [None]: json\n\n\nThis creates a couple config files for us. If we never need to modify these\nfiles, they can be found here:\n\n$ vim ~/.aws/credentials\n$ vim ~/.aws/config\n\n\nNode Time\nWe'll assume you have an app set up with some basic routing, such as the\nbarebones ExpressJS set up.\n\nIn your app we'll need to add 2 dependencies:\n\n$ npm install --save aws-sdk\n$ npm install --save aws-config\n\n\nNow we'll create a route.\n\nvar awsConfig = require('aws-config');\nvar AWS = require('aws-sdk');\n\nrouter.get('/export', function(req, res, next) {\n    var file = 'df.csv';\n    console.log('Trying to download file', fileKey);\n\n    var s3 = new AWS.S3({});\n\n    var options = {\n        Bucket: 'your-bucket-name',\n        Key: file,\n    };\n\n    s3.getObject(options, function(err, data) {\n      res.attachment(file);\n      res.send(data.Body);\n  });\n});\n\n\nNotice the empty curly brackets in new AWS.S3({}). If we had decided to\nbarbarically hardcode our credentials into our source code, normally those\nvalues would live between those brackets as an object. When the brackets are\nempty, the AWS library automagically knows to look to our AWS credentials file\nfor our access and secret keys. \n\nThis is how you'd do things the wrong way, just in case you wanted to be\nentertained:\n\nvar s3 = new AWS.S3({\n    'AccessKeyID': 'YOURACCESSKEY', \n    'SecretAccessKey': 'YOURSECRETACCESSKEY', \n    'Region': 'YOUR REGION'\n});\n\n\nYeah, that totally won't get committed somewhere by accident. Shake-my-head fam.\n\nThat's pretty much it: this route will prompt a download of the target file upon\nhitting the route. As much as I'm sure we'd all love to sit here and go through\nmore complicated use cases, let's just avoid Callback Hell altogether and enjoy\nthe rest of our day.\n\nHell will have to wait until next time.","html":"<p>We here at H+S are dedicated to one simple cause: creating posts about oddly specific programming scenarios. Somewhere in the world as sad soul is looking to programmatically access files from an S3 server while keeping their bucket private. To that person: we heard you.</p><p>There are plenty of reasons you'd want to access files in S3. For example, let's say you read <a href=\"https://hackersandslackers.com/using-pandas-with-aws-lambda/\">that post</a> about using Pandas in a Lambda function. Since you're already familiar with <a href=\"https://hackersandslackers.com/using-pymysql/\">PyMySQL</a>, you may hypothetically be in a position to export data from a DB query to a CSV saved in S3. I bet you can guess what I've been doing lately.</p><h2 id=\"configure-the-aws-cli-on-your-vps\">Configure the AWS CLI on your VPS</h2><p>The easiest and safest way to interact with other AWS services on your EC2 instance (or VPS of choice) is via the AWS CLI. This is easily installed as a global Python3 library:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ pip3 install awscli\n</code></pre>\n<!--kg-card-end: markdown--><p>With the CLI installed we'll be able to do something truly magical: set our AWS configuration globally. This means that any time we use interact with a microservice  (such as S3), the <strong>boto3</strong> library will always look to the files stored in <code>~/.aws/</code> for our keys and secrets, without us specifying.  This critical from a security perspective as it removes <em>all</em> mentions of credentials from our codebase: including the location of said secrets.</p><p>Use <code>$ aws configure</code> to kickstart the process:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ aws configure\n$ AWS Access Key ID [None]: YOURACCESSKEY\n$ AWS Secret Access Key [None]: YOURSECRETKEY\n$ Default region name [None]: us-east-2\n$ Default output format [None]: json\n</code></pre>\n<!--kg-card-end: markdown--><p>This creates a couple config files for us. If we never need to modify these files, they can be found here:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ vim ~/.aws/credentials\n$ vim ~/.aws/config\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"node-time\">Node Time</h2><p>We'll assume you have an app set up with some basic routing, such as the barebones ExpressJS set up.</p><p>In your app we'll need to add 2 dependencies:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ npm install --save aws-sdk\n$ npm install --save aws-config\n</code></pre>\n<!--kg-card-end: markdown--><p>Now we'll create a route.</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">var awsConfig = require('aws-config');\nvar AWS = require('aws-sdk');\n\nrouter.get('/export', function(req, res, next) {\n    var file = 'df.csv';\n    console.log('Trying to download file', fileKey);\n\n    var s3 = new AWS.S3({});\n\n    var options = {\n        Bucket: 'your-bucket-name',\n        Key: file,\n    };\n\n    s3.getObject(options, function(err, data) {\n      res.attachment(file);\n      res.send(data.Body);\n  });\n});\n</code></pre>\n<!--kg-card-end: markdown--><p>Notice the empty curly brackets in <code>new AWS.S3({})</code>. If we had decided to barbarically hardcode our credentials into our source code, normally those values would live between those brackets as an object. When the brackets are empty, the AWS library automagically knows to look to our AWS credentials file for our access and secret keys. </p><p>This is how you'd do things the <strong><em>wrong </em></strong>way, just in case you wanted to be entertained:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">var s3 = new AWS.S3({\n    'AccessKeyID': 'YOURACCESSKEY', \n    'SecretAccessKey': 'YOURSECRETACCESSKEY', \n    'Region': 'YOUR REGION'\n});\n</code></pre>\n<!--kg-card-end: markdown--><p>Yeah, that totally won't get committed somewhere by accident. Shake-my-head fam.</p><p>That's pretty much it: this route will prompt a download of the target file upon hitting the route. As much as I'm sure we'd all love to sit here and go through more complicated use cases, let's just avoid Callback Hell altogether and enjoy the rest of our day.</p><p>Hell will have to wait until next time.</p>","url":"https://hackersandslackers.com/accessing-private-s3-objects-with-node/","uuid":"210f5e64-7599-43d0-a148-d68373a9d3c4","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b2c34345f0bc81011d7cfc6"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673660","title":"Using Gulp: Tasks to Make Frontend Tolerable","slug":"using-gulp-to-make-frontend-tolerable","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/03/gulp-1.jpg","excerpt":"Optimize your frontend code with Gulp: the task runner to make you production-ready.","custom_excerpt":"Optimize your frontend code with Gulp: the task runner to make you production-ready.","created_at_pretty":"30 May, 2018","published_at_pretty":"30 May, 2018","updated_at_pretty":"28 March, 2019","created_at":"2018-05-29T23:28:01.000-04:00","published_at":"2018-05-30T12:40:20.000-04:00","updated_at":"2019-03-28T05:58:57.000-04:00","meta_title":"Using Gulp to Make Frontend Tolerable | Hackers and Slackers","meta_description":"Automate tasks for production deployment such as compiling your CSS and JS","og_description":"Optimize your frontend code with Gulp: the task runner to make you production-ready.","og_image":"https://hackersandslackers.com/content/images/2019/03/gulp-1.jpg","og_title":"Using Gulp to Make Frontend Tolerable","twitter_description":"Automate the lame stuff","twitter_image":"https://hackersandslackers.com/content/images/2019/03/gulp-1.jpg","twitter_title":"Using Gulp to Make Frontend Tolerable","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},"tags":[{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},{"name":"ExpressJS","slug":"expressjs","description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch as a simplistic Express app can evolve into a beautiful monstrosity.","feature_image":null,"meta_description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch a simplistic Express app can evolve into a beautiful monstrosity.","meta_title":"ExpressJS Framework | Hackers and Slackers","visibility":"public"},{"name":"Frontend","slug":"frontend","description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","feature_image":null,"meta_description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","meta_title":"Frontend Development | Hackers and Slackers","visibility":"public"},{"name":"JavaScript","slug":"javascript","description":"JavaScript covering both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","feature_image":null,"meta_description":"JavaScript topics, both Frontend and NodeJS. Build bundles with Webpack or Parcel, create task runners, or endure our criticism of the JavaScript ecosystem.","meta_title":"Javascript Tutorials | Hackers and Slackers","visibility":"public"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"}],"plaintext":"NOTE:  This tutorial was written for Gulp versions <4.0.0. Check out this post\n[https://hackersandslackers.com/upgrading-to-gulp-4/]  for Gulp >4.0.0\n\n\n--------------------------------------------------------------------------------\n\nPerhaps the whole obligatory-Gulp-tutorial on [Some Coding Blog] thing has\nbecome a bit cliché at this point. Haters may do as they will, but I 'll take\nany opportunity to jam as many SEO keywords I can get at this point. You know\nthe ones: Gulp, ExpressJS, NodeJS, or perhaps even React Vue frontend Ubuntu\nframework API social cloud data entrepreneur community. \n\nRegardless, we all need our own copy+paste references from time-to-time, or even\nworse: when we copy/paste our gulpfile.js from project to project and forget\nwhat they actually do. I won't tell anybody.\n\nQuick 101\nNodeJS developers use Gulp to automate necessary processes before moving their\nfrontend code to production. This includes minifying files to make them run\nfaster, and to also make them unreadable to people who would otherwise make fun\nof your mediocre Javascript which you were forced to crank out on a short\ntimeline.\n\nGeneral Workflow\nLet's say you're running a basic Express app. As opposed to developing and\nstoring files in a directory such as /public, Gulp enables us to develop in one\ndirectory, and compile to another. That means we can keep our horrible\nuncompressed and uncompiled  source in a folder such as /src, and output them to\na directory such as /dist, which would be our public-facing output. An Express\nfile structure utilizing this would look something like this:\n\n  |- src/\n      |- js/ \n      |- scss/\n  |- dist/\n      |- js/ \n      |- css/\n      |- img/\n      |- fonts/\n  |- views\n      |- index.hbs\n  |- routes\n      |- index.js\n  |- gulpfile.js\n  |- node_modules/\n  |- package.json\n  |- app.js\n\n\nInstallation\nFirst install the gulp CLI:\n\nnpm install --global gulp-cli\n\n\nNext, enter your project folder and install gulp while saving it as  a project\ndependency.\n\nnpm install --save gulp\n\n\nHow it Works\nGulp doesn't do much on its own; the true magic lies within its vast library of\nplugins. Each individual plugin typically covers a simple task, such as\ncompiling LESS or SASS files, or minifying client-side JavaScript and CSS. The\nlimited scope of plugins entails a bit of setup in our gulpfile to chain said\ntasks together, but it also makes Gulp highly customizable to cater to your\nspecific needs.\n\nThe Gulpfile\nGulp works by invoking a file called gulpfile.js in your main directory, which\nyou'll need to create and set up yourself (sorry). The file is divided into two\nmain parts: requiring (importing) plugins, and defining which tasks to run when\ngulp is invoked. A basic worthless gulpfile might look something like:\n\nvar gulp = require('gulp');\n\ngulp.task('default', function () {\n  console.log('Sup World!');\n});\n\n\nTo make this file useful, we'll need to install more plugins and set up tasks\nfor them.\n\nEssential Plugins\nLet's look at what each one does. Keep in mind there are thousands of Gulp\nplugins, so let's just touch on the big hitters here.\n\nKeep in mind to install any of these plugins, you'll simply need to run the npm\ninstallation in your project directory:\n\nnpm install --save [plugin name]\n\n\ngulp-uglify\nMinifies Javascript or CSS files, and outputs the result into the directory of\nyour choice. This plugin can be reused across filetypes, as we'll demonstrate in\na moment.\n\ngulp-concat\nCombines minified files into a single file. This is essential for browser\nperformance as it reduces the number of http requests being made every time your\npage loads.\n\ngulp-rename\nRenames files (such as those produced by gulp-concat).\n\ngulp-sass / gulp-less\nCompiles your Sass or Less files into CSS and outputs to the directory of your\nchoice.\n\ngulp-minify-css\nMinifies CSS, as you might imagine. This can chained to gulp-sass or gulp-less\nto minify the CSS files those tasks produce.\n\ngulp-autoprefixer\nThank god for this. Autoprefixer finds CSS styles and adds the browser-specific\nequivalents to your CSS, so you don't need to write the same style 10 times for\nevery horrible browser in existence. This means you can write styles such as:\n\nbackground: linear-gradient(to bottom, white, black);\n\n\nAnd have them output as:\n\nbackground: -webkit-gradient(linear, left top, left bottom, from(white), to(black));\nbackground: -webkit-linear-gradient(top, white, black);\nbackground: -o-linear-gradient(top, white, black);\nbackground: linear-gradient(to bottom, white, black);\n\n\ngulp-watch\nAllows Gulp to listen for changes being made to source files, so that it may\nfire an event upon file change, such as:\n\ngulp-livereload\nCompiles the changes made in directories being watched via gulp-watch\nautomatically while you work.\n\nNext Level Pro Shit\nWhile these plugins aren't 'essential', they are really cool and helpful.\n\ngulp-sourcemaps\nAn obnoxious side effect of minifying and concating your files is when it comes\ntime to debug errors on the frontend. Errors occurring at \"line 235\" are pretty\nuseless considering your error codes are referring to the compiled files,\nwithout granting a hint as to where the problematic code may have come from in\nthe first place. gulp-sourcemaps resolves this by adding commenting paths to\nwhich source files your code originated from.\n\ngulp-browser-sync\nBy leveraging BrowserSync [https://browsersync.io/], this plugin immediately\nrefreshes an open browser which links to files just changed by gulp. This means\nyou can code, compile, and see the results in real time. This takes a bit extra\neffort to set up, so be sure to check their documentation\n[https://browsersync.io/docs].\n\ngulp-load-plugins\nNormally when creating our gulpfile, we need to start off by requiring our\nplugins via something like this:\n\nvar gulp = require('gulp'),\n    del = require('del'),\n    concat = require('gulp-concat'),\n    rename = require('gulp-rename'),\n    uglify = require('gulp-uglify'),\n    sass = require('gulp-sass'),\n    watch = require('gulp-watch'),\n    livereload = require('gulp-livereload'),\n    minifyCss = require('gulp-minify-css'),\n    autoprefixer = require('gulp-autoprefixer');\n\n\ngulp-load-plugins  instead checks your package.json for any Gulp plugins and\nimmediately requires them, thus saving you a few precious minutes. The output\ninstead looks like:\n\nvar $ = require('gulp-load-plugins')();\n\n\nBuilding The Gulpfile\nNow that we have all these dope plugins, we can finally build our gulpfile.\nHere's an example (without using gulp-load-plugins  for now):\n\nvar gulp = require('gulp'),\n    del = require('del'),\n    concat = require('gulp-concat'),\n    rename = require('gulp-rename'),\n    uglify = require('gulp-uglify'),\n    sass = require('gulp-sass'),\n    watch = require('gulp-watch'),\n    livereload = require('gulp-livereload'),\n    minifyCss = require('gulp-minify-css'),\n    autoprefixer = require('gulp-autoprefixer');\n\ngulp.task('styles', function() {\n    return gulp.src('src/sass/*.scss')\n        .pipe(sass({outputStyle: 'expanded', unix_newlines: true, linefeed: \"lf\"}).on('error', sass.logError))\n        .pipe(autoprefixer())\n        .pipe(minifyCss({\n            keepSpecialComments: 1\n        }))\n        .pipe(rename(\"theme.min.css\"))\n        .pipe(gulp.dest('./assets/css/'));\n});\n\n\ngulp.task('scripts', function() {\n    return gulp.src(['src/js/plugin/*.js', 'src/js/base.js'])\n        .pipe(uglify())\n        .pipe(concat('theme.min.js'))\n        .pipe(gulp.dest('assets/js'));\n});\n\n\ngulp.task('ghost_config', ['scripts'], function() {\n    return gulp.src(['src/js/config.js', 'assets/js/theme.min.js'])\n        .pipe(concat('theme.min.js'))\n        .pipe(gulp.dest('assets/js'));\n});\n\n\ngulp.task('default', function() {\n    gulp.start('styles', 'scripts', 'ghost_config', 'watch');\n});\n\n\ngulp.task('watch', function() {\n    gulp.watch('src/sass/*.scss', ['styles']);\n    gulp.watch('src/js/*.js', ['scripts', 'ghost_config']);\n    livereload.listen();\n    gulp.watch(['*']).on('change', livereload.changed);\n});\n\n\n\nJust by looking at the file itself, you may be able to dissect what's happening.\nAfter we require our plugins, we define our tasks,  which are essentially\nindividual jobs consisting of one or more gulp plugins depending on how you've\nchained them.\n\nHere's the general terminology to help clear things up:\n\n * gulp.task: Defines a task consisting of one of more plugin actions.\n * gulp.src:  Specifies the folder containing source files.\n * gulp.dest: Defines the folder to output compiled files to.\n * pipe(): Allows multiple events to be chained together in a single task.\n\nWrapping up\nOnce your file is ready to go, simply run the grunt  command in your project\ndirectory. You should see Gulp output the status of each task you've set, as\nwell as any errors which may have occurred.\n\nIn short, just use Gulp. The scientific community has come to a consensus that\nGulp is objectively superior to its counterpart, Grunt. Ask Matt, he's a\nscientist.\n\nPeace fam!","html":"<p><em><strong>NOTE</strong>:  This tutorial was written for Gulp versions &lt;4.0.0. Check out <a href=\"https://hackersandslackers.com/upgrading-to-gulp-4/\">this post</a> for Gulp &gt;4.0.0</em></p><!--kg-card-begin: hr--><hr><!--kg-card-end: hr--><p>Perhaps the whole obligatory-Gulp-tutorial on [Some Coding Blog] thing has become a bit cliché at this point. Haters may do as they will, but I 'll take any opportunity to jam as many SEO keywords I can get at this point. You know the ones: Gulp, ExpressJS, NodeJS, or perhaps even React Vue frontend Ubuntu framework API social cloud data entrepreneur community. </p><p>Regardless, we all need our own copy+paste references from time-to-time, or even worse: when we copy/paste our gulpfile.js from project to project and forget what they actually do. I won't tell anybody.</p><h2 id=\"quick-101\">Quick 101</h2><p>NodeJS developers use Gulp to automate necessary processes before moving their frontend code to production. This includes minifying files to make them run faster, and to also make them unreadable to people who would otherwise make fun of your mediocre Javascript which you were forced to crank out on a short timeline.</p><h3 id=\"general-workflow\">General Workflow</h3><p>Let's say you're running a basic Express app. As opposed to developing and storing files in a directory such as /public, Gulp enables us to develop in one directory, and compile to another. That means we can keep our horrible uncompressed and uncompiled  source in a folder such as /src, and output them to a directory such as /dist, which would be our public-facing output. An Express file structure utilizing this would look something like this:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">  |- src/\n      |- js/ \n      |- scss/\n  |- dist/\n      |- js/ \n      |- css/\n      |- img/\n      |- fonts/\n  |- views\n      |- index.hbs\n  |- routes\n      |- index.js\n  |- gulpfile.js\n  |- node_modules/\n  |- package.json\n  |- app.js\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"installation\">Installation</h3><p>First install the gulp CLI:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">npm install --global gulp-cli\n</code></pre>\n<!--kg-card-end: markdown--><p>Next, enter your project folder and install gulp while saving it as  a project dependency.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">npm install --save gulp\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"how-it-works\">How it Works</h2><p>Gulp doesn't do much on its own; the true magic lies within its vast library of plugins. Each individual plugin typically covers a simple task, such as compiling LESS or SASS files, or minifying client-side JavaScript and CSS. The limited scope of plugins entails a bit of setup in our gulpfile to chain said tasks together, but it also makes Gulp highly customizable to cater to your specific needs.</p><h3 id=\"the-gulpfile\">The Gulpfile</h3><p>Gulp works by invoking a file called gulpfile.js in your main directory, which you'll need to create and set up yourself (sorry). The file is divided into two main parts: requiring (importing) plugins, and defining which tasks to run when gulp is invoked. A basic worthless gulpfile might look something like:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">var gulp = require('gulp');\n\ngulp.task('default', function () {\n  console.log('Sup World!');\n});\n</code></pre>\n<!--kg-card-end: markdown--><p>To make this file useful, we'll need to install more plugins and set up tasks for them.</p><h2 id=\"essential-plugins\">Essential Plugins</h2><p>Let's look at what each one does. Keep in mind there are thousands of Gulp plugins, so let's just touch on the big hitters here.</p><p>Keep in mind to install any of these plugins, you'll simply need to run the npm installation in your project directory:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">npm install --save [plugin name]\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"gulp-uglify\">gulp-uglify</h3><p>Minifies Javascript or CSS files, and outputs the result into the directory of your choice. This plugin can be reused across filetypes, as we'll demonstrate in a moment.</p><h3 id=\"gulp-concat\">gulp-concat</h3><p>Combines minified files into a single file. This is essential for browser performance as it reduces the number of http requests being made every time your page loads.</p><h3 id=\"gulp-rename\">gulp-rename</h3><p>Renames files (such as those produced by gulp-concat).</p><h3 id=\"gulp-sass-gulp-less\">gulp-sass / gulp-less</h3><p>Compiles your Sass or Less files into CSS and outputs to the directory of your choice.</p><h3 id=\"gulp-minify-css\">gulp-minify-css</h3><p>Minifies CSS, as you might imagine. This can chained to gulp-sass or gulp-less to minify the CSS files those tasks produce.</p><h3 id=\"gulp-autoprefixer\">gulp-autoprefixer</h3><p>Thank god for this. Autoprefixer finds CSS styles and adds the browser-specific equivalents to your CSS, so you don't need to write the same style 10 times for every horrible browser in existence. This means you can write styles such as:</p><!--kg-card-begin: markdown--><pre><code class=\"language-css\">background: linear-gradient(to bottom, white, black);\n</code></pre>\n<!--kg-card-end: markdown--><p>And have them output as:</p><!--kg-card-begin: markdown--><pre><code class=\"language-css\">background: -webkit-gradient(linear, left top, left bottom, from(white), to(black));\nbackground: -webkit-linear-gradient(top, white, black);\nbackground: -o-linear-gradient(top, white, black);\nbackground: linear-gradient(to bottom, white, black);\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"gulp-watch\">gulp-watch</h3><p>Allows Gulp to listen for changes being made to source files, so that it may fire an event upon file change, such as:</p><h3 id=\"gulp-livereload\">gulp-livereload</h3><p>Compiles the changes made in directories being watched via gulp-watch automatically while you work.</p><h2 id=\"next-level-pro-shit\">Next Level Pro Shit</h2><p>While these plugins aren't 'essential', they are really cool and helpful.</p><h3 id=\"gulp-sourcemaps\">gulp-sourcemaps</h3><p>An obnoxious side effect of minifying and concating your files is when it comes time to debug errors on the frontend. Errors occurring at \"line 235\" are pretty useless considering your error codes are referring to the compiled files, without granting a hint as to where the problematic code may have come from in the first place. gulp-sourcemaps resolves this by adding commenting paths to which source files your code originated from.</p><h3 id=\"gulp-browser-sync\">gulp-browser-sync</h3><p>By leveraging <a href=\"https://browsersync.io/\">BrowserSync</a>, this plugin immediately refreshes an open browser which links to files just changed by gulp. This means you can code, compile, and see the results in real time. This takes a bit extra effort to set up, so be sure to check their <a href=\"https://browsersync.io/docs\">documentation</a>.</p><h3 id=\"gulp-load-plugins\">gulp-load-plugins</h3><p>Normally when creating our gulpfile, we need to start off by requiring our plugins via something like this:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">var gulp = require('gulp'),\n    del = require('del'),\n    concat = require('gulp-concat'),\n    rename = require('gulp-rename'),\n    uglify = require('gulp-uglify'),\n    sass = require('gulp-sass'),\n    watch = require('gulp-watch'),\n    livereload = require('gulp-livereload'),\n    minifyCss = require('gulp-minify-css'),\n    autoprefixer = require('gulp-autoprefixer');\n</code></pre>\n<!--kg-card-end: markdown--><p><strong>gulp-load-plugins</strong> instead checks your package.json for any Gulp plugins and immediately requires them, thus saving you a few precious minutes. The output instead looks like:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">var $ = require('gulp-load-plugins')();\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"building-the-gulpfile\">Building The Gulpfile</h2><p>Now that we have all these dope plugins, we can finally build our gulpfile. Here's an example (without using <strong>gulp-load-plugins</strong> for now):</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">var gulp = require('gulp'),\n    del = require('del'),\n    concat = require('gulp-concat'),\n    rename = require('gulp-rename'),\n    uglify = require('gulp-uglify'),\n    sass = require('gulp-sass'),\n    watch = require('gulp-watch'),\n    livereload = require('gulp-livereload'),\n    minifyCss = require('gulp-minify-css'),\n    autoprefixer = require('gulp-autoprefixer');\n\ngulp.task('styles', function() {\n    return gulp.src('src/sass/*.scss')\n        .pipe(sass({outputStyle: 'expanded', unix_newlines: true, linefeed: &quot;lf&quot;}).on('error', sass.logError))\n        .pipe(autoprefixer())\n        .pipe(minifyCss({\n            keepSpecialComments: 1\n        }))\n        .pipe(rename(&quot;theme.min.css&quot;))\n        .pipe(gulp.dest('./assets/css/'));\n});\n\n\ngulp.task('scripts', function() {\n    return gulp.src(['src/js/plugin/*.js', 'src/js/base.js'])\n        .pipe(uglify())\n        .pipe(concat('theme.min.js'))\n        .pipe(gulp.dest('assets/js'));\n});\n\n\ngulp.task('ghost_config', ['scripts'], function() {\n    return gulp.src(['src/js/config.js', 'assets/js/theme.min.js'])\n        .pipe(concat('theme.min.js'))\n        .pipe(gulp.dest('assets/js'));\n});\n\n\ngulp.task('default', function() {\n    gulp.start('styles', 'scripts', 'ghost_config', 'watch');\n});\n\n\ngulp.task('watch', function() {\n    gulp.watch('src/sass/*.scss', ['styles']);\n    gulp.watch('src/js/*.js', ['scripts', 'ghost_config']);\n    livereload.listen();\n    gulp.watch(['*']).on('change', livereload.changed);\n});\n\n</code></pre>\n<!--kg-card-end: markdown--><p>Just by looking at the file itself, you may be able to dissect what's happening. After we require our plugins, we define our <em>tasks,</em> which are essentially individual jobs consisting of one or more gulp plugins depending on how you've chained them.</p><p>Here's the general terminology to help clear things up:</p><ul><li><strong>gulp.task</strong>: Defines a task consisting of one of more plugin actions.</li><li><strong>gulp.src</strong>:  Specifies the folder containing source files.</li><li><strong>gulp.dest</strong>: Defines the folder to output compiled files to.</li><li><strong>pipe()</strong>: Allows multiple events to be chained together in a single task.</li></ul><h2 id=\"wrapping-up\">Wrapping up</h2><p>Once your file is ready to go, simply run the <strong>grunt</strong> command in your project directory. You should see Gulp output the status of each task you've set, as well as any errors which may have occurred.</p><p>In short, just use Gulp. The scientific community has come to a consensus that Gulp is objectively superior to its counterpart, Grunt. Ask Matt, he's a scientist.</p><p>Peace fam!</p>","url":"https://hackersandslackers.com/using-gulp-to-make-frontend-tolerable/","uuid":"f0ec0903-cd67-4663-b872-9ecdf9ffc557","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5b0e1a41e88ecf2fbeb3f5fa"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673652","title":"Build Custom Widgets For Your Ghost Blog","slug":"build-custom-widgets-for-your-ghost-blog","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/04/ghost-1.jpg","excerpt":"Get started customizing your themes with simple widgets.","custom_excerpt":"Get started customizing your themes with simple widgets.","created_at_pretty":"15 May, 2018","published_at_pretty":"15 May, 2018","updated_at_pretty":"10 April, 2019","created_at":"2018-05-15T18:53:29.000-04:00","published_at":"2018-05-15T19:27:56.000-04:00","updated_at":"2019-04-09T20:47:59.000-04:00","meta_title":"Build Custom Widgets For Your Ghost Blog | Hackers and Slackers","meta_description":"Learn to build custom widgets for your Ghost blog with Handlebars. Easily implement common widgets such as recent posts, related posts, contributors, etc.","og_description":"Learn to build custom widgets for your Ghost blog with Handlebars. Easily implement common widgets such as recent posts, related posts, contributors, etc.","og_image":"https://hackersandslackers.com/content/images/2019/04/ghost-1-2.jpg","og_title":"Build Custom Widgets For Your Ghost Blog","twitter_description":"Learn to build custom widgets for your Ghost blog with Handlebars. Easily implement common widgets such as recent posts, related posts, contributors, etc.","twitter_image":"https://hackersandslackers.com/content/images/2019/04/ghost-1-1.jpg","twitter_title":"Build Custom Widgets For Your Ghost Blog","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"ExpressJS","slug":"expressjs","description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch as a simplistic Express app can evolve into a beautiful monstrosity.","feature_image":null,"meta_description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch a simplistic Express app can evolve into a beautiful monstrosity.","meta_title":"ExpressJS Framework | Hackers and Slackers","visibility":"public"},"tags":[{"name":"ExpressJS","slug":"expressjs","description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch as a simplistic Express app can evolve into a beautiful monstrosity.","feature_image":null,"meta_description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch a simplistic Express app can evolve into a beautiful monstrosity.","meta_title":"ExpressJS Framework | Hackers and Slackers","visibility":"public"},{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},{"name":"Frontend","slug":"frontend","description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","feature_image":null,"meta_description":"Frontend Javascript Logic typically assisted by Babel and Webpack. Primarily focused on fundamentals, as opposed to bandwagon frameworks.","meta_title":"Frontend Development | Hackers and Slackers","visibility":"public"}],"plaintext":"Here at H+S headquarters, we're pretty into the Ghost blogging platform. It's a\nlot like Wordpress, except without everything that sucks about Wordpress. It's a\nNode app, isn't bloated with widgets, is more secure, smarter, prettier, and so\non. If you're a dev looking to get a quick clean CMS running, Ghost is pretty\nmuch a no-brainer.\n\nWhile the platform has been around for a while, the community is still in its\ninfancy as humanity lags behind the curve, with 80% of all sites victim of\nhacking being Wordpress-based. As such, we consider it our duty to share\nknowledge where possible to expedite the growth of independent blogging.\n\nThis is no means a \"getting started with Ghost\" post - Ghost's own documentation\ncovers that quite well. Instead, we'd like to share the source for some of the\nwidgets we've developed over the years to help your theme along.\n\nBasics of Ghost Theme Development\nThere are actually two stacks we should be conscious of when building Ghost\nthemes: the core Ghost stack, and our theme's stack (yes, they are different... \nkind of).\n\nGhost is built on the following core stack:\n\n * NodeJS\n * ExpressJS\n * Handlebars\n * Grunt\n\nCommon to both Ghost's core stack and a Ghost theme stack is Handlebars. \nHandlebars is a templating system which adds logic to otherwise-static HTML\npages. If you're not quite familiar with Handlebars, check out our quick\ntutorial [https://hackersandslackers.com/handlebars-templating-in-expressjs/] \non how to get the gist of things As long as you're familiar with Express and\nHandlebars, you'll be good to go. You could very well\n\nEverything we're doing today happens at the theme  level, which is your\npresentation layer that can be swapped at any given time. Running on your own\ninstallation, the path should look something like:\n\n/var/www/ghost/content/themes/myTheme/\n\n\nThis is where our development will be taking place.\n\nThe Widgets\nA \"widget\" is simply a Handlebars partial saved in your theme. Unlike your\ntraditional monolithic Blog CMS (such as Wordpress), Ghost's widgets must be\nadded to your theme programmatically (I would argue that this is not a bad\nthing).\n\n1. Recent Posts Widget\nThis is a fairly common widget which displays X number of posts ranked by most\nrecent.\n\n<!-- start widget -->\n{{#get \"posts\" limit=\"3\" filter=\"primary_tag:-#hidden\"}}\n  <div class=\"widget\">\n    <h4 class=\"title\">Recent</h4>\n    <div class=\"content recent-post\">\n      {{#foreach posts}}\n        <div class=\"recent-single-post\">\n          <a href=\"{{url}}\" class=\"post-title\">{{title}}</a>\n          <div class=\"date\">{{date format=\"MMMM DD, YYYY\"}}</div>\n        </div>\n      {{/foreach}}\n    </div>\n  </div>\n{{/get}}\n<!-- end widget -->\n\n\n{{#get}}  will fetch posts, tags, or users within the given specifications. The\ntag does nothing on it's own; it simply allows us to work within the context of\ngetting these items, such as how we use {{#foreach posts}}  afterwards.\n\nThe filter  is actually quite powerful, and perhaps a bit under-documented. In\nthis case we're only fetching posts who have a visible main tag: you might want\nto do something like this if you sometimes use 'posts' to make announcements.\n\n{{#foreach posts}}  loops through our 3 posts and will create the result DOM\nstructure the number of times it loops.\n\n2. Related Posts Widget\nSimilar to the above, but only returns posts which share the same main tag:\n\n<!-- start widget -->\n<div class=\"widget\">\n  <h4 class=\"title\">Related</h4>\n  <div class=\"content recent-post\">\n    {{#get \"posts\" limit=\"3\" filter=\"id:-{{id}}+tag:{{primary_tag.slug}}\"}}\n      {{#foreach posts}}\n        <div class=\"recent-single-post\">\n          <a href=\"{{url}}\" class=\"post-title\">{{title}}</a>\n          <div class=\"date\">{{date format=\"MMMM DD\"}}</div>\n        </div>\n      {{/foreach}}\n    {{/get}}\n  </div>\n</div>\n<!-- end widget -->\n\n\n3. Authors Widget\nA surprisingly uncommon widget, we've actually yet to see this on another blog\nyet. This will list all contributors to your blog with their avatar, and link\nback to their author page:\n\n<!-- start widget -->\n<div class=\"widget contributors\">\n  <h3 class=\"title\">Contributors</h3>\n  <div class=\"recent-post\">\n    {{#get \"users\"}}\n      {{#foreach users}}\n        <div class=\"single-author {{slug}}\">\n          {{#unless profile_image}}\n            <a href=\"{{url}}\"><i class=\"fas fa-user\" style=\"width:18px; height:18px; display:inline-block; margin-right:10px;\"></i></a>\n          {{/unless}}\n          {{#if profile_image}}\n            <a href=\"{{url}}\"><img src=\"{{img_url profile_image}}\" alt=\"Author image\" class=\"avi\"></a>\n          {{/if}}\n          <div class=\"info\">\n            <a href=\"{{url}}\" class=\"single-author-name\">{{name}}</a>\n            <span class=\"role\"></span>\n          </div>\n        </div>\n      {{/foreach}}\n    {{/get}}\n  </div>\n</div>\n<!-- end widget -->\n\n\n4. About the Current Author Widget\nThis widget only exists within the context of pages/posts which have an explicit\nauthor. Also supports the use case of multiple authors.\n\n<!-- start about the author -->\n{{#foreach authors}}\n  <div class=\"about-author clearfix widget\">\n    <h4 class=\"title\">Author</h4>\n    {{#if profile_image}}\n      <a href=\"{{url}}\"><img src=\"{{profile_image}}\" alt=\"Author image\" class=\"avatar pull-left\"></a>\n    {{else}}\n      <a href=\"{{url}}\"><img src=\"{{asset \"images/default-user-image.jpg\"}}\" alt=\"Author image\" class=\"avatar pull-left\"></a>\n    {{/if}}\n    <div class=\"details\">\n      <div class=\"author\">\n        {{!--{{t \"About\"}}--}}<a href=\"{{url}}\">{{name}}</a>\n      </div>\n      <div class=\"meta-info\">\n        {{!--<span class=\"post-count\"><i class=\"fal fa-pencil\"></i><a href=\"{{url}}\">{{plural count.posts empty=(t \"0 Post\") singular=(t \"% Post\") plural=(t \"% Posts\")}}</a></span>--}}\n        {{#if location}}\n          <span class=\"location\"><i class=\"fal fa-home\"></i>{{location}}</span>\n        {{/if}}\n        {{#if website}}\n          <span class=\"website\"><a href=\"{{website}}\" targer=\"_BLANK\"><i class=\"fal fa-globe\"></i>{{t \"Website\"}}</a></span>\n        {{/if}}\n        {{#if twitter}}\n          <span class=\"twitter\"><a href=\"{{twitter_url}}\"><i class=\"fab fa-twitter\"></i>{{twitter}}</a></span>\n        {{/if}}\n        {{#if facebook}}\n          <span class=\"facebook\"><a href=\"{{facebook_url}}\"><i class=\"fab fa-facebook\"></i></a></span>\n        {{/if}}\n      </div>\n    </div>\n    {{#if bio}}\n      <div class=\"bio\">\n        {{{bio}}}\n      </div>\n    {{/if}}\n  </div>\n{{/foreach}}\n<!-- end about the author -->\n\n\n5. About all the Authors Widget\nA combination of the above two, this widget displays a blurb and information\nabout all authors who contribute to your publication.\n\n{{#get \"users\" limit=\"all\" include=\"count.posts\" order=\"count.posts desc\" }}\n  {{#foreach users}}\n    <div class=\"about-author clearfix\" style=\"background: url({{cover_img}}) center center; background-color: rgba(255, 255, 255, 0.9); background-blend-mode: overlay;\">\n      {{#if profile_image}}\n        <a href=\"{{url}}\"><img src=\"{{profile_image}}\" alt=\"Author image\" class=\"avatar pull-left\"></a>\n      {{else}}\n        <a href=\"{{url}}\"><img src=\"{{asset \"images/default-user-image.jpg\"}}\" alt=\"Author image\" class=\"avatar pull-left\"></a>\n      {{/if}}\n      <div class=\"details\">\n        <div class=\"author\">\n          <a href=\"{{url}}\">{{name}}</a>\n        </div>\n        <div class=\"meta-info\">\n          <span class=\"post-count\"><i class=\"fal fa-pencil\"></i><a href=\"{{url}}\">{{plural count.posts empty=(t \"0 Post\") singular=(t \"% Post\") plural=(t \"% Posts\")}}</a></span>\n          {{#if location}}\n            <span class=\"location\"><i class=\"fal fa-home\"></i>{{location}}</span>\n          {{/if}}\n          {{#if website}}\n            <span class=\"website\"><i class=\"fal fa-globe\"></i><a href=\"{{website}}\" targer=\"_BLANK\">{{website}}</a></span>\n          {{/if}}\n          {{#if twitter}}\n            <span class=\"twitter\"><i class=\"fab fa-twitter\"></i><a href=\"{{twitter_url}}\">{{twitter}}</a></span>\n          {{/if}}\n          {{#if facebook}}\n            <span class=\"facebook\"><a href=\"{{facebook_url}}\"><i class=\"fab fa-facebook\"></i></a></span>\n          {{/if}}\n        </div>\n      </div>\n      {{#if bio}}\n        <p class=\"bio\">\n          {{{bio}}}\n        </p>\n      {{/if}}\n    </div>\n  {{/foreach}}\n{{/get}}\n\n\nObviously you can customize your widgets as you see fit to include or exclude\nthe information you're looking for. Hopefully these snippets serve as a useful\nreference for some common use cases to help your blog be as baller as possible.","html":"<p>Here at H+S headquarters, we're pretty into the Ghost blogging platform. It's a lot like Wordpress, except without everything that sucks about Wordpress. It's a Node app, isn't bloated with widgets, is more secure, smarter, prettier, and so on. If you're a dev looking to get a quick clean CMS running, Ghost is pretty much a no-brainer.</p><p>While the platform has been around for a while, the community is still in its infancy as humanity lags behind the curve, with 80% of all sites victim of hacking being Wordpress-based. As such, we consider it our duty to share knowledge where possible to expedite the growth of independent blogging.</p><p>This is no means a \"getting started with Ghost\" post - Ghost's own documentation covers that quite well. Instead, we'd like to share the source for some of the widgets we've developed over the years to help your theme along.</p><h2 id=\"basics-of-ghost-theme-development\">Basics of Ghost Theme Development</h2><p>There are actually two stacks we should be conscious of when building Ghost themes: the core Ghost stack, and our theme's stack (yes, they are different... <em>kind of</em>).</p><p>Ghost is built on the following core stack:</p><ul><li>NodeJS</li><li>ExpressJS</li><li>Handlebars</li><li>Grunt</li></ul><p>Common to both Ghost's core stack and a Ghost theme stack is <strong>Handlebars. </strong>Handlebars is a templating system which adds logic to otherwise-static HTML pages. If you're not quite familiar with Handlebars, check out our <a href=\"https://hackersandslackers.com/handlebars-templating-in-expressjs/\">quick tutorial</a> on how to get the gist of things As long as you're familiar with Express and Handlebars, you'll be good to go. You could very well</p><p>Everything we're doing today happens at the <em>theme</em> level, which is your presentation layer that can be swapped at any given time. Running on your own installation, the path should look something like:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">/var/www/ghost/content/themes/myTheme/\n</code></pre>\n<!--kg-card-end: markdown--><p>This is where our development will be taking place.</p><h2 id=\"the-widgets\">The Widgets</h2><p>A \"widget\" is simply a Handlebars partial saved in your theme. Unlike your traditional monolithic Blog CMS (such as Wordpress), Ghost's widgets must be added to your theme programmatically (I would argue that this is not a bad thing).</p><h3 id=\"1-recent-posts-widget\">1. Recent Posts Widget</h3><p>This is a fairly common widget which displays X number of posts ranked by most recent.</p><!--kg-card-begin: markdown--><pre><code class=\"language-handlebars\">&lt;!-- start widget --&gt;\n{{#get &quot;posts&quot; limit=&quot;3&quot; filter=&quot;primary_tag:-#hidden&quot;}}\n  &lt;div class=&quot;widget&quot;&gt;\n    &lt;h4 class=&quot;title&quot;&gt;Recent&lt;/h4&gt;\n    &lt;div class=&quot;content recent-post&quot;&gt;\n      {{#foreach posts}}\n        &lt;div class=&quot;recent-single-post&quot;&gt;\n          &lt;a href=&quot;{{url}}&quot; class=&quot;post-title&quot;&gt;{{title}}&lt;/a&gt;\n          &lt;div class=&quot;date&quot;&gt;{{date format=&quot;MMMM DD, YYYY&quot;}}&lt;/div&gt;\n        &lt;/div&gt;\n      {{/foreach}}\n    &lt;/div&gt;\n  &lt;/div&gt;\n{{/get}}\n&lt;!-- end widget --&gt;\n</code></pre>\n<!--kg-card-end: markdown--><p><code>{{#get}}</code> will fetch posts, tags, or users within the given specifications. The tag does nothing on it's own; it simply allows us to work within the context of getting these items, such as how we use <code>{{#foreach posts}}</code> afterwards.</p><p>The <em>filter</em> is actually quite powerful, and perhaps a bit under-documented. In this case we're only fetching posts who have a visible main tag: you might want to do something like this if you sometimes use 'posts' to make announcements.</p><p><code>{{#foreach posts}}</code> loops through our 3 posts and will create the result DOM structure the number of times it loops.</p><h3 id=\"2-related-posts-widget\">2. Related Posts Widget</h3><p>Similar to the above, but only returns posts which share the same main tag:</p><!--kg-card-begin: markdown--><pre><code class=\"language-handlebars\">&lt;!-- start widget --&gt;\n&lt;div class=&quot;widget&quot;&gt;\n  &lt;h4 class=&quot;title&quot;&gt;Related&lt;/h4&gt;\n  &lt;div class=&quot;content recent-post&quot;&gt;\n    {{#get &quot;posts&quot; limit=&quot;3&quot; filter=&quot;id:-{{id}}+tag:{{primary_tag.slug}}&quot;}}\n      {{#foreach posts}}\n        &lt;div class=&quot;recent-single-post&quot;&gt;\n          &lt;a href=&quot;{{url}}&quot; class=&quot;post-title&quot;&gt;{{title}}&lt;/a&gt;\n          &lt;div class=&quot;date&quot;&gt;{{date format=&quot;MMMM DD&quot;}}&lt;/div&gt;\n        &lt;/div&gt;\n      {{/foreach}}\n    {{/get}}\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;!-- end widget --&gt;\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"3-authors-widget\">3. Authors Widget</h3><p>A surprisingly uncommon widget, we've actually yet to see this on another blog yet. This will list all contributors to your blog with their avatar, and link back to their author page:</p><!--kg-card-begin: markdown--><pre><code class=\"language-handlebars\">&lt;!-- start widget --&gt;\n&lt;div class=&quot;widget contributors&quot;&gt;\n  &lt;h3 class=&quot;title&quot;&gt;Contributors&lt;/h3&gt;\n  &lt;div class=&quot;recent-post&quot;&gt;\n    {{#get &quot;users&quot;}}\n      {{#foreach users}}\n        &lt;div class=&quot;single-author {{slug}}&quot;&gt;\n          {{#unless profile_image}}\n            &lt;a href=&quot;{{url}}&quot;&gt;&lt;i class=&quot;fas fa-user&quot; style=&quot;width:18px; height:18px; display:inline-block; margin-right:10px;&quot;&gt;&lt;/i&gt;&lt;/a&gt;\n          {{/unless}}\n          {{#if profile_image}}\n            &lt;a href=&quot;{{url}}&quot;&gt;&lt;img src=&quot;{{img_url profile_image}}&quot; alt=&quot;Author image&quot; class=&quot;avi&quot;&gt;&lt;/a&gt;\n          {{/if}}\n          &lt;div class=&quot;info&quot;&gt;\n            &lt;a href=&quot;{{url}}&quot; class=&quot;single-author-name&quot;&gt;{{name}}&lt;/a&gt;\n            &lt;span class=&quot;role&quot;&gt;&lt;/span&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      {{/foreach}}\n    {{/get}}\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;!-- end widget --&gt;\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"4-about-the-current-author-widget\">4. About the Current Author Widget</h3><p>This widget only exists within the context of pages/posts which have an explicit author. Also supports the use case of multiple authors.</p><!--kg-card-begin: markdown--><pre><code class=\"language-handlebars\">&lt;!-- start about the author --&gt;\n{{#foreach authors}}\n  &lt;div class=&quot;about-author clearfix widget&quot;&gt;\n    &lt;h4 class=&quot;title&quot;&gt;Author&lt;/h4&gt;\n    {{#if profile_image}}\n      &lt;a href=&quot;{{url}}&quot;&gt;&lt;img src=&quot;{{profile_image}}&quot; alt=&quot;Author image&quot; class=&quot;avatar pull-left&quot;&gt;&lt;/a&gt;\n    {{else}}\n      &lt;a href=&quot;{{url}}&quot;&gt;&lt;img src=&quot;{{asset &quot;images/default-user-image.jpg&quot;}}&quot; alt=&quot;Author image&quot; class=&quot;avatar pull-left&quot;&gt;&lt;/a&gt;\n    {{/if}}\n    &lt;div class=&quot;details&quot;&gt;\n      &lt;div class=&quot;author&quot;&gt;\n        {{!--{{t &quot;About&quot;}}--}}&lt;a href=&quot;{{url}}&quot;&gt;{{name}}&lt;/a&gt;\n      &lt;/div&gt;\n      &lt;div class=&quot;meta-info&quot;&gt;\n        {{!--&lt;span class=&quot;post-count&quot;&gt;&lt;i class=&quot;fal fa-pencil&quot;&gt;&lt;/i&gt;&lt;a href=&quot;{{url}}&quot;&gt;{{plural count.posts empty=(t &quot;0 Post&quot;) singular=(t &quot;% Post&quot;) plural=(t &quot;% Posts&quot;)}}&lt;/a&gt;&lt;/span&gt;--}}\n        {{#if location}}\n          &lt;span class=&quot;location&quot;&gt;&lt;i class=&quot;fal fa-home&quot;&gt;&lt;/i&gt;{{location}}&lt;/span&gt;\n        {{/if}}\n        {{#if website}}\n          &lt;span class=&quot;website&quot;&gt;&lt;a href=&quot;{{website}}&quot; targer=&quot;_BLANK&quot;&gt;&lt;i class=&quot;fal fa-globe&quot;&gt;&lt;/i&gt;{{t &quot;Website&quot;}}&lt;/a&gt;&lt;/span&gt;\n        {{/if}}\n        {{#if twitter}}\n          &lt;span class=&quot;twitter&quot;&gt;&lt;a href=&quot;{{twitter_url}}&quot;&gt;&lt;i class=&quot;fab fa-twitter&quot;&gt;&lt;/i&gt;{{twitter}}&lt;/a&gt;&lt;/span&gt;\n        {{/if}}\n        {{#if facebook}}\n          &lt;span class=&quot;facebook&quot;&gt;&lt;a href=&quot;{{facebook_url}}&quot;&gt;&lt;i class=&quot;fab fa-facebook&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;\n        {{/if}}\n      &lt;/div&gt;\n    &lt;/div&gt;\n    {{#if bio}}\n      &lt;div class=&quot;bio&quot;&gt;\n        {{{bio}}}\n      &lt;/div&gt;\n    {{/if}}\n  &lt;/div&gt;\n{{/foreach}}\n&lt;!-- end about the author --&gt;\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"5-about-all-the-authors-widget\">5. About all the Authors Widget</h3><p>A combination of the above two, this widget displays a blurb and information about all authors who contribute to your publication.</p><!--kg-card-begin: markdown--><pre><code class=\"language-handlebars\">{{#get &quot;users&quot; limit=&quot;all&quot; include=&quot;count.posts&quot; order=&quot;count.posts desc&quot; }}\n  {{#foreach users}}\n    &lt;div class=&quot;about-author clearfix&quot; style=&quot;background: url({{cover_img}}) center center; background-color: rgba(255, 255, 255, 0.9); background-blend-mode: overlay;&quot;&gt;\n      {{#if profile_image}}\n        &lt;a href=&quot;{{url}}&quot;&gt;&lt;img src=&quot;{{profile_image}}&quot; alt=&quot;Author image&quot; class=&quot;avatar pull-left&quot;&gt;&lt;/a&gt;\n      {{else}}\n        &lt;a href=&quot;{{url}}&quot;&gt;&lt;img src=&quot;{{asset &quot;images/default-user-image.jpg&quot;}}&quot; alt=&quot;Author image&quot; class=&quot;avatar pull-left&quot;&gt;&lt;/a&gt;\n      {{/if}}\n      &lt;div class=&quot;details&quot;&gt;\n        &lt;div class=&quot;author&quot;&gt;\n          &lt;a href=&quot;{{url}}&quot;&gt;{{name}}&lt;/a&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;meta-info&quot;&gt;\n          &lt;span class=&quot;post-count&quot;&gt;&lt;i class=&quot;fal fa-pencil&quot;&gt;&lt;/i&gt;&lt;a href=&quot;{{url}}&quot;&gt;{{plural count.posts empty=(t &quot;0 Post&quot;) singular=(t &quot;% Post&quot;) plural=(t &quot;% Posts&quot;)}}&lt;/a&gt;&lt;/span&gt;\n          {{#if location}}\n            &lt;span class=&quot;location&quot;&gt;&lt;i class=&quot;fal fa-home&quot;&gt;&lt;/i&gt;{{location}}&lt;/span&gt;\n          {{/if}}\n          {{#if website}}\n            &lt;span class=&quot;website&quot;&gt;&lt;i class=&quot;fal fa-globe&quot;&gt;&lt;/i&gt;&lt;a href=&quot;{{website}}&quot; targer=&quot;_BLANK&quot;&gt;{{website}}&lt;/a&gt;&lt;/span&gt;\n          {{/if}}\n          {{#if twitter}}\n            &lt;span class=&quot;twitter&quot;&gt;&lt;i class=&quot;fab fa-twitter&quot;&gt;&lt;/i&gt;&lt;a href=&quot;{{twitter_url}}&quot;&gt;{{twitter}}&lt;/a&gt;&lt;/span&gt;\n          {{/if}}\n          {{#if facebook}}\n            &lt;span class=&quot;facebook&quot;&gt;&lt;a href=&quot;{{facebook_url}}&quot;&gt;&lt;i class=&quot;fab fa-facebook&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;\n          {{/if}}\n        &lt;/div&gt;\n      &lt;/div&gt;\n      {{#if bio}}\n        &lt;p class=&quot;bio&quot;&gt;\n          {{{bio}}}\n        &lt;/p&gt;\n      {{/if}}\n    &lt;/div&gt;\n  {{/foreach}}\n{{/get}}\n</code></pre>\n<!--kg-card-end: markdown--><p>Obviously you can customize your widgets as you see fit to include or exclude the information you're looking for. Hopefully these snippets serve as a useful reference for some common use cases to help your blog be as baller as possible.</p>","url":"https://hackersandslackers.com/build-custom-widgets-for-your-ghost-blog/","uuid":"a1d550bc-034d-4c2c-85f0-ff434f400d8c","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5afb64e93d0bf921d8b8804f"}},{"node":{"id":"Ghost__Post__5c12d7bfe875ad7bb8673634","title":"Starting an ExpressJS App","slug":"create-an-expressjs-app","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2017/11/expressjs@2x.jpg","excerpt":"Installation guide for ExpressJS with popular customization options.","custom_excerpt":"Installation guide for ExpressJS with popular customization options.","created_at_pretty":"18 November, 2017","published_at_pretty":"18 November, 2017","updated_at_pretty":"07 March, 2019","created_at":"2017-11-18T08:44:44.000-05:00","published_at":"2017-11-18T08:54:54.000-05:00","updated_at":"2019-03-07T01:39:46.000-05:00","meta_title":"Starting an ExpressJS App | Hackers and Slackers","meta_description":"Installation guide for ExpressJS with popular customization options","og_description":"Installation guide for ExpressJS with popular customization options","og_image":"https://hackersandslackers.com/content/images/2017/11/expressjs@2x.jpg","og_title":"Starting an ExpressJS App","twitter_description":"Installation guide for ExpressJS with popular customization options","twitter_image":"https://hackersandslackers.com/content/images/2017/11/expressjs@2x.jpg","twitter_title":"Starting an ExpressJS App","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},"tags":[{"name":"NodeJS","slug":"nodejs","description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","feature_image":null,"meta_description":"All things related to backend JavaScript. Learn frameworks or take our word for selecting the right NPM packages.","meta_title":"NodeJS | Hackers and Slackers","visibility":"public"},{"name":"ExpressJS","slug":"expressjs","description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch as a simplistic Express app can evolve into a beautiful monstrosity.","feature_image":null,"meta_description":"A safespace for NodeJS newbies to learn Javascript’s most popular backend framework. Watch a simplistic Express app can evolve into a beautiful monstrosity.","meta_title":"ExpressJS Framework | Hackers and Slackers","visibility":"public"}],"plaintext":"Over the past few months I've found myself spinning up tons of new servers and\nwalking through the process of pushing express apps live.\n\nBecause this process always comes at unexpected times, I've never bothered\ndocumenting the steps it takes to get a blank box running express. Surprisingly\nit seems as though few have bothered to walk through every step involved in a\nsingle place, and most express tutorials contain outdated information which\nlikely leads to headaches for newcomers.\n\nI'll be walking through an ExpressJS setup with the tech I always opt for.\n\nStack\n * NodeJS\n * NPM\n * Nginx\n * Express\n * Express-Generator\n * Sass\n * Handlebars\n * PM2\n * Grunt\n\nInstallation\nPrep your server by installing the latest updates:\n\n$ apt-get update\n$ apt-get upgrade -y\n\n\nNodeJS\nOf the things we'll be installing prior to development, NodeJS is the trickiest.\nUnlike other packages, we cannot simply use Ubuntu's apt-get install  command\nfor Node. NodeJS for Linux distributions is best installed via NodeSource, which\nis handled as such:\n\n$ apt update\n$ apt upgrade -y\n$ curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -\n$ sudo apt-get install -y nodejs\n$ sudo apt-get install gcc g++ make\n$ sudo npm install -g npm@latest\n\n\nNote that this also hooks us up with the latest version of NPM, so we're all\ngood on that front.\n\nNginx\nLet's install Nginx before we forget. We'll come back to Nginx later to set up\nthe config.\n\napt-get install nginx\n\n\nExpress\nWe'll install express globally. This way we can support multiple apps running\nexpress, as well as use an express generator to easily create more projects down\nthe line.\n\nnpm install -g express\n\n\nExpress generator\nInstall express generator globally. Express generator is the easiest way to set\nup a new express app with the standard structure preconfigured.\n\nnpm install -g express-generator\n\n\nCreate an App\nNow we get to the fun stuff.\n\n$ cd  to the directory you'll be using to contain your apps, such as /home  or \n/var/www. When we use express-generator  in this directory, we'll be\ninitializing a new express project will most of the common boilerplate setup\npreconfigured.\n\nThis will create your Express app inside /home/myapp:\n\ncd /home\n\nexpress --view=hbs --css=less myapp\n\n\nExpress-generator prompts you to pass arguments to automatically configure your\nproject for you. We're able to specify which CSS preprocessor and templating\nsystem we prefer this way. I'm going to create a project using Handlebars and\nSass as my weapons of choice.\n\nThese are the options that come with express-generator in case you'd like to\ncustomize your installation:\n\n$ express -h\n\n  Usage: express [options] [dir]\n\n  Options:\n\n    -h, --help          output usage information\n        --version       output the version number\n    -e, --ejs           add ejs engine support\n        --hbs           add handlebars engine support\n        --pug           add pug engine support\n    -H, --hogan         add hogan.js engine support\n    -v, --view <engine> add view <engine> support (ejs|hbs|hjs|jade|pug|twig|vash) (defaults to jade)\n    -c, --css <engine>  add stylesheet <engine> support (less|stylus|compass|sass) (defaults to plain css)\n        --git           add .gitignore\n    -f, --force         force on non-empty directory\n\n\nWarning: common bug ahead\nIf your life sucks, running express generator may have given you this error:\n\n/usr/bin/env: ‘node’: No such file or directory\n\n\nThis is an issue with Debian distributions of linux which treat 'node' and\n'nodejs' as separate filepaths. To alleviate this, create the following symbolic\nlink:\n\nln -s /usr/bin/nodejs /usr/bin/node\n\n\nStart App\nInside your project directory run npm install  to install all dependancies for\nyour project. This will look at the package.json  file that express-generator\ncreated and will install the corresponding node modules.\n\ncd myapp\n\nnpm install\n\n\nHere's the result:\n\n.\n├── app.js\n├── bin\n│   └── www\n├── package.json\n├── public\n│   ├── images\n│   ├── javascripts\n│   └── stylesheets\n│       └── style.css\n├── routes\n│   ├── index.js\n│   └── users.js\n└── views\n    ├── error.pug\n    ├── index.pug\n    └── layout.pug\n\n7 directories, 9 files\n\n\nSet up Nginx Config\nBefore creating your Nginx config, it is best to verify which port express will\nbe running on. In most recent versions of express, this can be found in the www\nfile. The path to this looks like myapp/bin/www.\n\nCheck out that file and see what the value is for var port.\n\nvim bin/www\n\n\nYou should see something like this:\n\nvar port = normalizePort(process.env.PORT || '3000');\n\n\nThus, the port is 3000. Remember this.\n\nPreviously this information was stored in Express's app.js  file.\n\nNow, create a Nginx config in sites-available:\n\nvim /etc/nginx/sites-available/myapp\n\n\nFor a basic reverse proxy server configuration, use the configuration below.\n\nBe sure to replace the port with the port you found earlier.\n\nserver {\n    listen 80;\n\n    server_name example.com www.example.com;\n\n    location / {\n        proxy_pass http://127.0.0.1:3000; #Replace port here\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n\n    location ~ /.well-known {\n        allow all;\n    }\n\n    client_max_body_size 50m;\n}\n\n\nSave this out. Now create a symbolic link to have this appear in sites enabled,\nand restart Nginx.\n\nln -s /etc/nginx/sites-available/myapp /etc/nginx/sites-enabled/myapp \n\nservice nginx restart\n\n\nRun your app\nNow your web server is pointing to the correct place, but your app isn't\nactually running. To keep your app running continuously, we'll use PM2.\n\nInstall pm2 globally:\n\nnpm install pm2 -g\n\n\nGo to your app's directory, and start your app using PM2:\n\ncd /home/myapp\n\npm2 start bin/www\n\n\nIf successful, PM2 should then list your app as running.\n\nYou can run as many express apps on one server as you like:\n\n┌──────────┬────┬──────┬───────┬────────┬─────────┬────────┬─────┬───────────┬──────┬──────────┐\n│ App name │ id │ mode │ pid   │ status │ restart │ uptime │ cpu │ mem       │ user │ watching │\n├──────────┼────┼──────┼───────┼────────┼─────────┼────────┼─────┼───────────┼──────┼──────────┤\n│ www      │ 0  │ fork │ 8953  │ online │ 79      │ 35h    │ 0%  │ 44.6 MB   │ root │ disabled │\n│ www      │ 1  │ fork │ 18195 │ online │ 0       │ 3D     │ 0%  │ 22.3 MB   │ root │ disabled │\n│ www      │ 2  │ fork │ 19990 │ online │ 0       │ 33h    │ 0%  │ 49.2 MB   │ root │ disabled │\n└──────────┴────┴──────┴───────┴────────┴─────────┴────────┴─────┴───────────┴──────┴──────────┘\n\n\nYour app should now be accessible via your domain.\n\nFinal items\nYour app is up and running, but you're not in the clear yet. To have things\nfully configured, you'll need to set up grunt or gulp to compress your source\nfor production.\n\nConfiguring gulp files is a tutorial in its own right. Otherwise, you're good to\ngo to serve static files directly out of the /public  folder.","html":"<p>Over the past few months I've found myself spinning up tons of new servers and walking through the process of pushing express apps live.</p><p>Because this process always comes at unexpected times, I've never bothered documenting the steps it takes to get a blank box running express. Surprisingly it seems as though few have bothered to walk through every step involved in a single place, and most express tutorials contain outdated information which likely leads to headaches for newcomers.</p><p>I'll be walking through an ExpressJS setup with the tech I always opt for.</p><h2 id=\"stack\">Stack</h2><ul><li>NodeJS</li><li>NPM</li><li>Nginx</li><li>Express</li><li>Express-Generator</li><li>Sass</li><li>Handlebars</li><li>PM2</li><li>Grunt</li></ul><h2 id=\"installation\">Installation</h2><p>Prep your server by installing the latest updates:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">$ apt-get update\n$ apt-get upgrade -y\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"nodejs\">NodeJS</h3><p>Of the things we'll be installing prior to development, NodeJS is the trickiest. Unlike other packages, we cannot simply use Ubuntu's <code>apt-get install</code> command for Node. NodeJS for Linux distributions is best installed via NodeSource, which is handled as such:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">$ apt update\n$ apt upgrade -y\n$ curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -\n$ sudo apt-get install -y nodejs\n$ sudo apt-get install gcc g++ make\n$ sudo npm install -g npm@latest\n</code></pre>\n<!--kg-card-end: markdown--><p>Note that this also hooks us up with the latest version of NPM, so we're all good on that front.</p><h3 id=\"nginx\">Nginx</h3><p>Let's install Nginx before we forget. We'll come back to Nginx later to set up the config.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">apt-get install nginx\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"express\">Express</h3><p>We'll install express globally. This way we can support multiple apps running express, as well as use an express generator to easily create more projects down the line.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">npm install -g express\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"express-generator\">Express generator</h3><p>Install express generator globally. Express generator is the easiest way to set up a new express app with the standard structure preconfigured.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">npm install -g express-generator\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"create-an-app\">Create an App</h2><p>Now we get to the fun stuff.</p><p><code>$ cd</code> to the directory you'll be using to contain your apps, such as <code>/home</code> or <code>/var/www</code>. When we use <code>express-generator</code> in this directory, we'll be initializing a new express project will most of the common boilerplate setup preconfigured.</p><p>This will create your Express app inside <code>/home/myapp</code>:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">cd /home\n\nexpress --view=hbs --css=less myapp\n</code></pre>\n<!--kg-card-end: markdown--><p>Express-generator prompts you to pass arguments to automatically configure your project for you. We're able to specify which CSS preprocessor and templating system we prefer this way. I'm going to create a project using Handlebars and Sass as my weapons of choice.</p><p>These are the options that come with express-generator in case you'd like to customize your installation:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ express -h\n\n  Usage: express [options] [dir]\n\n  Options:\n\n    -h, --help          output usage information\n        --version       output the version number\n    -e, --ejs           add ejs engine support\n        --hbs           add handlebars engine support\n        --pug           add pug engine support\n    -H, --hogan         add hogan.js engine support\n    -v, --view &lt;engine&gt; add view &lt;engine&gt; support (ejs|hbs|hjs|jade|pug|twig|vash) (defaults to jade)\n    -c, --css &lt;engine&gt;  add stylesheet &lt;engine&gt; support (less|stylus|compass|sass) (defaults to plain css)\n        --git           add .gitignore\n    -f, --force         force on non-empty directory\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"warning-common-bug-ahead\">Warning: common bug ahead</h2><p>If your life sucks, running express generator may have given you this error:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">/usr/bin/env: ‘node’: No such file or directory\n</code></pre>\n<!--kg-card-end: markdown--><p>This is an issue with Debian distributions of linux which treat 'node' and 'nodejs' as separate filepaths. To alleviate this, create the following symbolic link:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">ln -s /usr/bin/nodejs /usr/bin/node\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"start-app\">Start App</h2><p>Inside your project directory run <strong>npm install</strong> to install all dependancies for your project. This will look at the <code>package.json</code> file that express-generator created and will install the corresponding node modules.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">cd myapp\n\nnpm install\n</code></pre>\n<!--kg-card-end: markdown--><p>Here's the result:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">.\n├── app.js\n├── bin\n│   └── www\n├── package.json\n├── public\n│   ├── images\n│   ├── javascripts\n│   └── stylesheets\n│       └── style.css\n├── routes\n│   ├── index.js\n│   └── users.js\n└── views\n    ├── error.pug\n    ├── index.pug\n    └── layout.pug\n\n7 directories, 9 files\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"set-up-nginx-config\">Set up Nginx Config</h2><p>Before creating your Nginx config, it is best to verify which port express will be running on. In most recent versions of express, this can be found in the www file. The path to this looks like myapp/bin/www.</p><p>Check out that file and see what the value is for var port.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">vim bin/www\n</code></pre>\n<!--kg-card-end: markdown--><p>You should see something like this:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">var port = normalizePort(process.env.PORT || '3000');\n</code></pre>\n<!--kg-card-end: markdown--><p>Thus, the port is 3000. Remember this.</p><p>Previously this information was stored in Express's <code>app.js</code> file.</p><p>Now, create a Nginx config in sites-available:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">vim /etc/nginx/sites-available/myapp\n</code></pre>\n<!--kg-card-end: markdown--><p>For a basic reverse proxy server configuration, use the configuration below.</p><p>Be sure to replace the port with the port you found earlier.</p><!--kg-card-begin: markdown--><pre><code class=\"language-nginx\">server {\n    listen 80;\n\n    server_name example.com www.example.com;\n\n    location / {\n        proxy_pass http://127.0.0.1:3000; #Replace port here\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n\n    location ~ /.well-known {\n        allow all;\n    }\n\n    client_max_body_size 50m;\n}\n</code></pre>\n<!--kg-card-end: markdown--><p>Save this out. Now create a symbolic link to have this appear in sites enabled, and restart Nginx.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">ln -s /etc/nginx/sites-available/myapp /etc/nginx/sites-enabled/myapp \n\nservice nginx restart\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"run-your-app\">Run your app</h2><p>Now your web server is pointing to the correct place, but your app isn't actually running. To keep your app running continuously, we'll use PM2.</p><p>Install pm2 globally:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">npm install pm2 -g\n</code></pre>\n<!--kg-card-end: markdown--><p>Go to your app's directory, and start your app using PM2:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">cd /home/myapp\n\npm2 start bin/www\n</code></pre>\n<!--kg-card-end: markdown--><p>If successful, PM2 should then list your app as running.</p><p>You can run as many express apps on one server as you like:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">┌──────────┬────┬──────┬───────┬────────┬─────────┬────────┬─────┬───────────┬──────┬──────────┐\n│ App name │ id │ mode │ pid   │ status │ restart │ uptime │ cpu │ mem       │ user │ watching │\n├──────────┼────┼──────┼───────┼────────┼─────────┼────────┼─────┼───────────┼──────┼──────────┤\n│ www      │ 0  │ fork │ 8953  │ online │ 79      │ 35h    │ 0%  │ 44.6 MB   │ root │ disabled │\n│ www      │ 1  │ fork │ 18195 │ online │ 0       │ 3D     │ 0%  │ 22.3 MB   │ root │ disabled │\n│ www      │ 2  │ fork │ 19990 │ online │ 0       │ 33h    │ 0%  │ 49.2 MB   │ root │ disabled │\n└──────────┴────┴──────┴───────┴────────┴─────────┴────────┴─────┴───────────┴──────┴──────────┘\n</code></pre>\n<!--kg-card-end: markdown--><p>Your app should now be accessible via your domain.</p><h2 id=\"final-items\">Final items</h2><p>Your app is up and running, but you're not in the clear yet. To have things fully configured, you'll need to set up grunt or gulp to compress your source for production.</p><p>Configuring gulp files is a tutorial in its own right. Otherwise, you're good to go to serve static files directly out of the <code>/public</code> folder.</p>","url":"https://hackersandslackers.com/create-an-expressjs-app/","uuid":"048b6212-5dbf-429c-b86d-d3fc65238e06","page":false,"codeinjection_foot":null,"codeinjection_head":null,"comment_id":"5a10394c3858167c7082486e"}}]}},"pageContext":{"slug":"expressjs","limit":12,"skip":0,"numberOfPages":1,"humanPageNumber":1,"prevPageNumber":null,"nextPageNumber":null,"previousPagePath":null,"nextPagePath":null}}