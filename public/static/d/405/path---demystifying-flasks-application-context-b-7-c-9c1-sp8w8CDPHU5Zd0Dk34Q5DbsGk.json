{"data":{"ghostPost":{"id":"Ghost__Post__5c192cdba632c8240cad3869","title":"Globally Accessible Variables in Flask: Demystifying the 'Application Context'","slug":"demystifying-flasks-application-context","featured":false,"feature_image":"https://hackersandslackers.com/content/images/2019/04/flask_factory-2.jpg","excerpt":"Breaking down the nuances of the ‘app context’ in Flask's Application Factory.","custom_excerpt":"Breaking down the nuances of the ‘app context’ in Flask's Application Factory.","created_at_pretty":"18 December, 2018","published_at_pretty":"19 December, 2018","updated_at_pretty":"10 April, 2019","created_at":"2018-12-18T12:22:35.000-05:00","published_at":"2018-12-19T08:00:00.000-05:00","updated_at":"2019-04-09T23:49:27.000-04:00","meta_title":"Demystifying Flask's Application Context | Hackers and Slackers","meta_description":"A guide breaking down the cryptic nuances of Flask's 'Application Context.' Putting an end to \"RuntimeError: working outside of application context\".","og_description":"A guide breaking down the cryptic nuances of Flask's 'Application Context.' Putting an end to \"RuntimeError: working outside of application context\".","og_image":"https://hackersandslackers.com/content/images/2019/04/flask_factory-2-2.jpg","og_title":"Demystifying Flask's Application Context","twitter_description":"A guide breaking down the cryptic nuances of Flask's 'Application Context.' Putting an end to \"RuntimeError: working outside of application context\".","twitter_image":"https://hackersandslackers.com/content/images/2019/04/flask_factory-2-1.jpg","twitter_title":"Demystifying Flask's Application Context","authors":[{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"}],"primary_author":{"name":"Todd Birchard","slug":"todd","bio":"Product manager turned engineer with an ongoing identity crisis. Breaks everything before learning best practices. Completely normal and emotionally stable.","profile_image":"https://hackersandslackers.com/content/images/2019/03/todd3.jpg","twitter":"@ToddRBirchard","facebook":null,"website":"https://toddbirchard.com"},"primary_tag":{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},"tags":[{"name":"Flask","slug":"flask","description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","feature_image":"https://res.cloudinary.com/hackers-and-slackers/image/upload/q_auto:good/v1/images/flaskroutes-2-1_o.jpg","meta_description":"All things Flask ranging from core framework to all conceivable libraries. Tips on how to utilize Flask’s flexibility to create expressive applications.","meta_title":"Building Python Apps in Flask | Hackers and Slackers","visibility":"public"},{"name":"Python","slug":"python","description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold.","feature_image":null,"meta_description":"Let us feed your endless Python addiction! Regardless of where you stand as a Pythonista, our team of pros are constantly teaching and sharing pythonic gold","meta_title":"Python Tricks, Hacks, and Snippets | Hackers and Slackers","visibility":"public"},{"name":"#Building Flask Apps","slug":"building-flask-apps","description":"Python’s fast-growing and flexible microframework. Can handle apps as simple as API endpoints, to monoliths remininiscent of Django.","feature_image":"https://hackersandslackers.com/content/images/2019/03/flask-gettingstarted.jpg","meta_description":"Python’s fastest growing, most flexible, and perhaps most Pythonic framework.","meta_title":"Building Flask Apps","visibility":"internal"},{"name":"Software Development","slug":"software-development","description":"General software development principals and tools. Receive insights applicable to building any application.","feature_image":null,"meta_description":"General software development principals and tools. Receive insights applicable to building any application.","meta_title":"Software Development | Hackers and Slackers","visibility":"public"}],"plaintext":"A 'skill' that's always fascinated me is just how long some engineers can make\nit in their career while carrying glaringly obvious gaps in their knowledge of\nthe systems they use every day. To my surprise, I've turned corners where I\nmyself have been that engineer all along, and there's perhaps no better example\nof this then the time I've spent with Flask.\n\nWARNING! Highly opinionated statement incoming: Flask is everything a framework\nshould be. That is to say, it isn't really  a framework a fully-fledged\nframework at all. Sure, the term microframework might seem like a cute PR term,\nbut that doesn't negate the fact that there's something about Flask that's\ndifferent. When I write apps in Flask,  I feel as though I'm writing apps in \nPython.  On the other hand, when I write apps in Django,  I feel like I'm just\nwriting apps in Django.  A disciplined programmer might feel that overly\nstructured frameworks damper creativity and they're probably right: these are\nthe backbones of businesses, thus it makes sense to keep people from deviating\nfrom the norm. \n\nThe upside of Flask is also its downside: there's nearly an infinite number of\nways to solve a single problem. Every Stackoverflow regular has their own\npreference, and sometimes, just none of them seem... right. The problem is\ncompounded by some of the phrasing coming from Flask's documentation itself.\nFlask touts the importance of structuring apps with factories and Blueprints,\nwhile simultaneously expressing the power behind the application context.  What\nyou'll notice over time is that in Flask's own examples, these two 'very\nimportant things' never both appear at the same time: that's because they're\nsimply incompatible with one another.  This is a highly understated\ncontradiction of philosophies.\n\nCommunication Breakdown?\nHere's Flask's take on Application factories\n[http://flask.pocoo.org/docs/1.0/patterns/appfactories/]:\n\n> If you are already using packages and blueprints for your application (Modular\nApplications with Blueprints) there are a couple of really nice ways to further\nimprove the experience. A common pattern is creating the application object when\nthe blueprint is imported.\n\n\nAnd here's their description of the Application context\n[http://flask.pocoo.org/docs/1.0/appcontext/]:\n\n> The application context keeps track of the application-level data during a\nrequest, CLI command, or other activity. Rather than passing the application\naround to each function, the current_app and g proxies are accessed instead.\n\n\nConsidering g  is intended to stand for \"global\" it seems safe from the previous\nstatements that setting attributes of g  can be accessed globally within an\napplication... but they can't. This is where we backpedal and get into messy\nterritory:\n\n> However, importing the app instance within the modules in your project is prone\nto circular import issues. When using the app factory pattern or writing\nreusable blueprints or extensions there won’t be an app instance to import at\nall.\n\nFlask solves this issue with the application context. Rather than referring to\nan app directly, you use the the current_app  proxy, which points to the\napplication handling the current activity.\n\n\nOkay, fine. So if I instantiate an application factory with app.app_context(): \n(which is the only sensible way to create a factory at all)  I should be able to\nregister blueprints within that context, and reference the app context, correct?\n\nI could be crazy but this never seems to work  within blueprints. Whether they\nexist as peer modules or submodules, the words 'from application import\ncurrent_app as app' always seems to result in the same \"missing application\ncontext\" error. Conveniently it seems, all working examples of the application\ncontext seem to be when the Flask developers opt to serve single-file app\nexamples. This stranger from Stackoverflow\n[https://stackoverflow.com/questions/50233118/access-to-flask-global-variables-in-blueprint-apps] \n clears things up a bit:\n\n> This happens because the data are lost when the context (with app.app_context())\nends (doc).\nInside the context, everything is ok :\n\nfrom flask import Flask, g\napp = Flask(__name__)\nwith app.app_context():\n   g.my_db = 'database ok'\n   print(g.my_db)\n\nthis prints 'database ok'\n\n\nBut outside, you cannot access the attribute:\n\nfrom flask import Flask, g\napp = Flask(__name__)\nwith app.app_context():\n   g.my_db = 'database ok'\n\nprint(g.my_db)\n\n\nthis throws RuntimeError: Working outside of application context\n\neven if you create a new context:\n\nfrom flask import Flask, g\napp = Flask(__name__)\nwith app.app_context():\n   g.my_db = 'database ok'\n\nwith app.app_context():\n   print(g.my_db)\n\n\nthis throws AttributeError: '_AppCtxGlobals' object has no attribute 'my_db'\n\n\nAlas, here I am. Doomed writing posts to fill in the blanks of documentation\nleft behind by others. \n\nFlask Sessions: The REAL Slim Shady\nFlask-Session  is the MVP when it comes sharing temporary information across\nmodularized parts of our program. In fact, it's a bit odd this isn't encouraged\nmore-so than g. But whatever. We're here to heal.\n\nSessions  can handled in a number of different ways besides cookies. Take a look\nat the choices we have for storing session-based values in an instance of Flask:\n\nSESSION_TYPE\n Specifies which type of session interface to\nuse. Built-in session types:\n\n * null: NullSessionInterface (default)\n * redis: RedisSessionInterface\n * memcached: MemcachedSessionInterface\n * filesystem: FileSystemSessionInterface\n * mongodb: MongoDBSessionInterface\n * sqlalchemy: SqlAlchemySessionInterface\n\nSESSION_PERMANENT\n Whether use permanent session or not, default\nto be True\n SESSION_USE_SIGNER\n Whether sign the session cookie sid or not,\nif set to True, you have to set\n flask.Flask.secret_key\n[http://flask.pocoo.org/docs/api/#flask.Flask.secret_key], default to be\n False\n SESSION_KEY_PREFIX\n A prefix that is added before all session keys.\nThis makes it possible to use the same backend\nstorage server for different apps, default\n“session:”\n SESSION_REDIS\n A redis.Redis  instance, default connect to\n 127.0.0.1:6379\n SESSION_MEMCACHED\n A memcache.Client  instance, default connect\nto 127.0.0.1:11211\n SESSION_FILE_DIR\n The directory where session files are stored.\nDefault to use flask_session  directory under\ncurrent working directory.\n SESSION_FILE_THRESHOLD\n The maximum number of items the session stores\nbefore it starts deleting some, default 500\n SESSION_FILE_MODE\n The file mode wanted for the session files,\ndefault 0600\n SESSION_MONGODB\n A pymongo.MongoClient  instance, default\nconnect to 127.0.0.1:27017\n SESSION_MONGODB_DB\n The MongoDB database you want to use, default\n“flask_session”\n SESSION_MONGODB_COLLECT\n The MongoDB collection you want to use, default\n“sessions”\n SESSION_SQLALCHEMY\n A flask.ext.sqlalchemy.SQLAlchemy  instance\nwhose database connection URI is configured\nusing the SQLALCHEMY_DATABASE_URI  parameter\n SESSION_SQLALCHEMY_TABLE\n The name of the SQL table you want to use,\ndefault “sessions”\n Using Redis For Cached Session Information\nFor the sake of trying something different, I've opted to pick up a tiny Redis\ninstance from redislabs [https://redislabs.com/]. I can't help myself but\nwasting money on new services to play with; after all, check out how cool this\nlittle red box looks:\n\nRedis Enterprise: A Unique Primary Database\nPerfomance at Scale\n * 50M ops/sec,\n    Symmetric shared–nothing architecture ensures no performance overheads while\n   scaling, auto-sharding and re-balancing\n    Enhanced connection management, pipeline execution and request scheduling\n    \n\nBuilt-in high performance search\n * High performance, real-time indexing with items available for search within\n   1ms\n * Predictable high performance querying while maintaining concurrent loads of\n   indexing and querying\n * Highly scalable across multiple nodes to billions of items per second \n\nFailsafe high availability\n * Cross-rack/zone/datacenter/geo replication\n * Instant auto-failover in single digit second\n * Zero impact on throughput and latency during cluster operations such as\n   scaling, upgrades, re-sharding and rebalancing\n * Out-of-the box support for backup, restore and DR\n\nActive-active geo distribution\n * Reads/Writes in multiple geo regions to the same dataset\n * Local latencies, global availability\n * Built-in conflict resolution for simple and complex data types\n * Based on revolutionary CRDT academic research\n\nBuilt-in persistence\n * Enhanced storage engine for parallel access to any persistent storage\n * Multiple options for enhanced data persistence\n * Reliable persistence configurations on both master and slave shards with zero\n   performance impact\n\nMulti-model\n * Graph, JSON, Machine Learning and Bloom filter modules set industry standards\n   for high performance\n * Multi-shard coordination\n * Extensibility with custom modules\n\nIntelligent tiered access to memory\n * Up to 80% lower infrastructure costs by running Redis on Flash\n * Automatic management of data tiering between RAM & Flash with no code changes\n * Supports all new persistent memory technologies\n\nFlexible deployment options\n * Hybrid clusters can span on-prem infrastructure and multiple clouds\n * Most efficient use of resources with maximized core usage, multi-tenancy,\n   re-sharding and re-balancing to avoid noisy neighbors in every environment\n\nPerfomance at Scale\n Built-in persistence\n Failsafe high availability\n Active-active geo distribution\n Built-in high performance search\n Multi-model\n Intelligent tiered access to memory\n \n(RAM and Flash)\n Flexible deployment options\n \n(cloud, on-prem, hybrid)\n Fast\nPerformance at scale\n Built-in high performance search\n Reliable\nBuilt-in persistence\n Failsafe high availability\n Active-active geo distribution\n Flexible\nMulti-model\n Flexible deployment options (cloud, hybrid, on-prem)\n Intelligent tiered access to memory (ram and flash)\n (Why am I not getting paid for this? Why did I take the time to even make that\nmodule?)Redis  is NoSQL datastore written in C intended to temporarily hold data in\nmemory for users as they blaze mindlessly through your site. Other use cases\ninclude serving as the foundation for real-time chat apps via the\npublish/subscribe messaging paradigm; popular amongst stupid chat or dating apps\nslowly destroying our abilities as human beings to interact face-to-face.\nPowerful stuff.\n\nStructuring init.py Correctly\nConsider this to be the guide to Flask Application factories I wish I had months\nago. A healthy application factory should:\n\n * Derive all app configuration values from a class or environment variables.\n * Allow Database interactions to occur at any point within the app.\n * Pass values globally outside of the application context.\n\nThis does all of those things:\n\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_session import Session\nfrom flask_redis import FlaskRedis\n\n# Globally accessible libraries\ndb = SQLAlchemy()\nr = FlaskRedis()\n\n\ndef create_app():\n    \"\"\"Initialize the core application.\"\"\"\n    app = Flask(__name__, instance_relative_config=False)\n    app.config.from_object('config.Config')\n\n    with app.app_context():\n        # Set global session variables\n        r.set('endpoint', str(app.config['ENDPOINT']).encode('utf-8'))\n        r.set('post_query', str(app.config['POST_QUERY']).encode('utf-8'))\n        \n        # Initialize Global Libraries\n        redis_store.init_app(app)\n        db.init_app(app)\n\n        # Include our Routes\n        from . import routes\n\n        return app\n\n\nThe order of operations here is critical.\n\nBefore we do anything related to the app itself, we create instances of \nflask_sqlalchemy  and flask_redis. This will be initialized with our app once we\nactually have one created.\n\nThe first two lines of create_app()  should be no surprise: we're just creating\nour Flask app, and stating that it should be configured using a class called \nConfig  in a file named config.py.\n\napp = Flask(__name__, instance_relative_config=False)\napp.config.from_object('config.Config')\n\n\nMoving down the function comes the moment of truth: creating the app context. \nWhat happens in the app context stays in the app context... except for our sick\nnew Redis setup. By using the Redis .set()  method, we can assign key/value\npairs  for Redis hang on to, such as values from our app config which might be\nneeded elsewhere in our app: r.set('endpoint',\nstr(app.config['ENDPOINT']).encode('utf-8')).\n\nRedis stores information as bytes by default, thus attempting to pass values\nsuch as strings will result in the infamous `b'leading letter b'` phenomenon. Be\nsure to encode your values as utf-8 when using set(), and decode when using\nget().Making Redis Globally Available\nThe next part is important: we need to 'initialize' the services we want to use\nglobally (such as database access or Redis) by using init_app(). This must \nhappen inside the application context, with the parameter being app. This is our\nway of achieving singularity into inter-dimensional travel, thus breaking out of\nthe dreaded application context long after it dies.\n\nLet's Access Some Variables, Baby\nThe moment of truth: will this actually work? Or am I actually a filthy liar\nflooding the internet with more uselessly outdated Flask advice? Let's see:\n\n# routes.py\n\nfrom flask import current_app as app\nfrom flask import make_response\nimport json\nfrom . import models\nfrom . import r\n\nheaders = { 'Access-Control-Allow-Headers': 'Content-Type' }\n\n\n@app.route('/', methods=['GET', 'POST'])\ndef entry():\n    readers = models.Readers.query.filter_by(username='john').all()\n    print(readers)\n    print(r.get('uri').decode('utf-8'))\n    return make_response(str('readers'), 200, headers)\n\n\nEureka! This worthless entry-point prints two things: the value we assigned to\nour Redis block, and all records in our database of people named John:\n\n>> [<User john>]\n>> https://us1-hackersandslackers-543.cloudfunctions.net/link-endpoint?url=\n\n\nAs simple and stupid as it seems, developing an app to this point while\nunderstanding why it works  is a victory for any developer. I complain about\nthis nearly every post, but the fact of the matter is that the heroes who build\nmuch of today's technologies commonly fail to explain their own art in\nunderstandable terms. It's an understandable phenomenon resulting from isolated\nspurts of genius, perhaps, but it damages the growth of companies and humanity\nalike.\n\nSo I guess this is my calling: writing documentation for other people's\naccomplishments. \"Marginally less confusing than 4 open Stackoverflow tabs.\" \nThat's what I hope to have engraved on my gravestone.\n\nMerry Christmas.","html":"<p>A 'skill' that's always fascinated me is just how long some engineers can make it in their career while carrying glaringly obvious gaps in their knowledge of the systems they use every day. To my surprise, I've turned corners where I myself have been that engineer all along, and there's perhaps no better example of this then the time I've spent with Flask.</p><p><strong>WARNING! Highly opinionated statement incoming</strong>: Flask is everything a framework should be. That is to say, it <em>isn't really</em> a framework a fully-fledged framework at all. Sure, the term <em>microframework </em>might seem like a cute PR term, but that doesn't negate the fact that there's something about Flask that's different. When I write apps in <strong>Flask,</strong> I feel as though I'm writing apps in <strong>Python.</strong> On the other hand, when I write apps in <strong>Django,</strong> I feel like I'm just writing apps in <strong>Django.</strong> A disciplined programmer might feel that overly structured frameworks damper creativity and they're probably right: these are the backbones of businesses, thus it makes sense to keep people from deviating from the norm. </p><p>The upside of Flask is also its downside: there's nearly an infinite number of ways to solve a single problem. Every Stackoverflow regular has their own preference, and sometimes, just none of them seem... <em>right. </em>The problem is compounded by some of the phrasing coming from Flask's documentation itself. Flask touts the importance of structuring apps with factories and Blueprints, while simultaneously expressing the power behind the <strong><em>application context.</em></strong> What you'll notice over time is that in Flask's own examples, these two 'very important things' never both appear at the same time: that's because they're simply <em>incompatible with one another.</em> This is a highly understated contradiction of philosophies.</p><h2 id=\"communication-breakdown\">Communication Breakdown?</h2><p>Here's <a href=\"http://flask.pocoo.org/docs/1.0/patterns/appfactories/\">Flask's take on Application factories</a>:</p><blockquote>\n<p>If you are already using packages and blueprints for your application (Modular Applications with Blueprints) there are a couple of really nice ways to further improve the experience. A common pattern is creating the application object when the blueprint is imported.</p>\n</blockquote>\n<p>And here's their <a href=\"http://flask.pocoo.org/docs/1.0/appcontext/\">description of the Application context</a>:</p><blockquote>\n<p>The application context keeps track of the application-level data during a request, CLI command, or other activity. Rather than passing the application around to each function, the current_app and g proxies are accessed instead.</p>\n</blockquote>\n<p>Considering <code>g</code> is intended to stand for \"global\" it seems safe from the previous statements that setting attributes of <code>g</code> can be accessed globally within an application... but they can't. This is where we backpedal and get into messy territory:</p><blockquote>\n<p>However, importing the app instance within the modules in your project is prone to circular import issues. When using the app factory pattern or writing reusable blueprints or extensions there won’t be an app instance to import at all.</p>\n<p>Flask solves this issue with the application context. Rather than referring to an app directly, you use the the <strong>current_app</strong> proxy, which points to the application handling the current activity.</p>\n</blockquote>\n<p>Okay, fine. So if I instantiate an application factory with <code>app.app_context():</code> (which is the only sensible way to create a factory at all)  I should be able to register blueprints within that context, and reference the app context, correct?</p><p>I could be crazy but this <em>never seems to work</em> within blueprints. Whether they exist as peer modules or submodules, the words 'from application import current_app as app' always seems to result in the same \"missing application context\" error. Conveniently it seems, all working examples of the application context seem to be when the Flask developers opt to serve single-file app examples. This <a href=\"https://stackoverflow.com/questions/50233118/access-to-flask-global-variables-in-blueprint-apps\">stranger from Stackoverflow</a> clears things up a bit:</p><blockquote>\n<p>This happens because the data are lost when the context (with app.app_context()) ends (doc).<br>\nInside the context, everything is ok :</p>\n<pre><code class=\"language-python\">from flask import Flask, g\napp = Flask(__name__)\nwith app.app_context():\n   g.my_db = 'database ok'\n   print(g.my_db)\n\nthis prints 'database ok'\n</code></pre>\n<p>But outside, you cannot access the attribute:</p>\n<pre><code class=\"language-python\">from flask import Flask, g\napp = Flask(__name__)\nwith app.app_context():\n   g.my_db = 'database ok'\n\nprint(g.my_db)\n</code></pre>\n<p>this throws RuntimeError: Working outside of application context</p>\n<p>even if you create a new context:</p>\n<pre><code class=\"language-python\">from flask import Flask, g\napp = Flask(__name__)\nwith app.app_context():\n   g.my_db = 'database ok'\n\nwith app.app_context():\n   print(g.my_db)\n</code></pre>\n<p>this throws AttributeError: '_AppCtxGlobals' object has no attribute 'my_db'</p>\n</blockquote>\n<p>Alas, here I am. Doomed writing posts to fill in the blanks of documentation left behind by others. </p><h2 id=\"flask-sessions-the-real-slim-shady\">Flask Sessions: The REAL Slim Shady</h2><p><code>Flask-Session</code> is the MVP when it comes sharing temporary information across modularized parts of our program. In fact, it's a bit odd this isn't encouraged more-so than <code>g</code>. But whatever. We're here to heal.</p><p><strong>Sessions</strong> can handled in a number of different ways besides cookies. Take a look at the choices we have for storing session-based values in an instance of Flask:</p><style>\n    tr td:first-child{\n    text-align: left;\n    text-align: top;\n    }\n    \n    tr td:first-child {\n    text-align: left;\n    text-align: top;\n    font-weight: 500;\n    background: #646c82 !important;\n    color: white;\n    border-bottom: 1px solid #747d92;\n    max-width: 70px;\n}\n    \n    table td {\n        font-size:.9em;\n    }\n    \n    td {\n       text-align: left;\n        font-size:.9em;\n        \n    }\n   \n    \n    tr td:nth-of-type(2){\n        font-weight: 100;\n            padding: 20px;\n    }\n    @media (max-width: 800px) {\n        \n        tr td {\n    \t\tpadding: 10px 0;\n        }\n        \n        tbody {\n            margin-left: 0 !important;\n        }\n        \n      tr td:first-child {\n       width: 100%;\n       white-space: nowrap;\n    padding: 10px 0 !important;\n    text-overflow: ellipsis;\n          max-width: none;\n    }\n        \n        tr:first-child td{\n       \t    min-width: 300px;\n            max-width: -webkit-fill-available !important;\n        }\n        \n        th {\n            \n        }\n        \n        tr {\n            padding: 0px !important;\n            overflow-x: hidden;\n        }\n        \n        td {\n            line-height:1.5;\n        }\n        \n        td:nth-of-type(2) {\n            width: 100%;\n            padding: 20px !important;\n        }\n        \n        tr td:nth-of-type(2){\n        font-weight: 100;\n        padding: 15px !important;\n    \t}\n    }\n    \n        \n</style>\n\n<div class=\"tableContainer\">\n  <table>\n  <tbody valign=\"top\">\n    <tr class=\"row-odd\">\n      <td><span class=\"pre\">SESSION_TYPE</span></td>\n      <td>\n        <p class=\"first\">Specifies which type of session interface to\n          use. Built-in session types:</p>\n        <ul class=\"last simple\">\n          <li><strong>null</strong>: NullSessionInterface (default)</li>\n          <li><strong>redis</strong>: RedisSessionInterface</li>\n          <li><strong>memcached</strong>: MemcachedSessionInterface</li>\n          <li><strong>filesystem</strong>: FileSystemSessionInterface</li>\n          <li><strong>mongodb</strong>: MongoDBSessionInterface</li>\n          <li><strong>sqlalchemy</strong>: SqlAlchemySessionInterface</li>\n        </ul>\n      </td>\n    </tr>\n    <tr class=\"row-even\">\n      <td><span class=\"pre\">SESSION_PERMANENT</span></td>\n      <td>Whether use permanent session or not, default\n        to be <span class=\"pre\">True</span></td>\n    </tr>\n    <tr class=\"row-odd\">\n      <td><span class=\"pre\">SESSION_USE_SIGNER</span></td>\n      <td>Whether sign the session cookie sid or not,\n        if set to <span class=\"pre\">True</span>, you have to set\n        <a class=\"reference external\" href=\"http://flask.pocoo.org/docs/api/#flask.Flask.secret_key\" title=\"(in Flask v0.12-dev)\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">flask.Flask.secret_key</span></tt></a>, default to be\n        <span class=\"pre\">False</span></td>\n    </tr>\n    <tr class=\"row-even\">\n      <td><span class=\"pre\">SESSION_KEY_PREFIX</span></td>\n      <td>A prefix that is added before all session keys.\n        This makes it possible to use the same backend\n        storage server for different apps, default\n        “session:”</td>\n    </tr>\n    <tr class=\"row-odd\">\n      <td><span class=\"pre\">SESSION_REDIS</span></td>\n      <td>A <span class=\"pre\">redis.Redis</span> instance, default connect to\n        <span class=\"pre\">127.0.0.1:6379</span></td>\n    </tr>\n    <tr class=\"row-even\">\n      <td><span class=\"pre\">SESSION_MEMCACHED</span></td>\n      <td>A <span class=\"pre\">memcache.Client</span> instance, default connect\n        to <span class=\"pre\">127.0.0.1:11211</span></td>\n    </tr>\n    <tr class=\"row-odd\">\n      <td><span class=\"pre\">SESSION_FILE_DIR</span></td>\n      <td>The directory where session files are stored.\n        Default to use <cite>flask_session</cite> directory under\n        current working directory.</td>\n    </tr>\n    <tr class=\"row-even\">\n      <td><span class=\"pre\">SESSION_FILE_THRESHOLD</span></td>\n      <td>The maximum number of items the session stores\n        before it starts deleting some, default 500</td>\n    </tr>\n    <tr class=\"row-odd\">\n      <td><span class=\"pre\">SESSION_FILE_MODE</span></td>\n      <td>The file mode wanted for the session files,\n        default 0600</td>\n    </tr>\n    <tr class=\"row-even\">\n      <td><span class=\"pre\">SESSION_MONGODB</span></td>\n      <td>A <span class=\"pre\">pymongo.MongoClient</span> instance, default\n        connect to <span class=\"pre\">127.0.0.1:27017</span></td>\n    </tr>\n    <tr class=\"row-odd\">\n      <td><span class=\"pre\">SESSION_MONGODB_DB</span></td>\n      <td>The MongoDB database you want to use, default\n        “flask_session”</td>\n    </tr>\n    <tr class=\"row-even\">\n      <td><span class=\"pre\">SESSION_MONGODB_COLLECT</span></td>\n      <td>The MongoDB collection you want to use, default\n        “sessions”</td>\n    </tr>\n    <tr class=\"row-odd\">\n      <td><span class=\"pre\">SESSION_SQLALCHEMY</span></td>\n      <td>A <span class=\"pre\">flask.ext.sqlalchemy.SQLAlchemy</span> instance\n        whose database connection URI is configured\n        using the <span class=\"pre\">SQLALCHEMY_DATABASE_URI</span> parameter</td>\n    </tr>\n    <tr class=\"row-even\">\n      <td><span class=\"pre\">SESSION_SQLALCHEMY_TABLE</span></td>\n      <td>The name of the SQL table you want to use,\n        default “sessions”</td>\n    </tr>\n  </tbody>\n    </table>\n</div>\n<h3 id=\"using-redis-for-cached-session-information\">Using Redis For Cached Session Information</h3><p>For the sake of trying something different, I've opted to pick up a tiny Redis instance from <a href=\"https://redislabs.com/\"><strong>redislabs</strong></a>. I can't help myself but wasting money on new services to play with; after all, check out how cool this little red box looks:</p>\n<!-- Strengths -->\n<div id=\"unique\">\n  <!-- Headline -->\n  <h2>Redis Enterprise: A Unique Primary Database</h2>\n  <div class=\"item-scale item hidden\">\n    <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/ico-front-performance-reverse.svg\">\n    <h3>Perfomance at Scale</h3>\n    <ul>\n      <li>50M ops/sec,\n        <1ms 26=\"\" latency,=\"\" with=\"\" only=\"\" cloud=\"\" instances<=\"\" li=\"\"> <li>Symmetric shared–nothing architecture ensures no performance overheads while scaling, auto-sharding and re-balancing</li>\n      <li>Enhanced connection management, pipeline execution and request scheduling</li>\n    </1ms></li></ul>\n  </div>\n  <div class=\"item-search item hidden\">\n    <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/ico-front-search-reverse.svg\">\n    <h3>Built-in high performance search</h3>\n    <ul>\n      <li>High performance, real-time indexing with items available for search within 1ms</li>\n      <li>Predictable high performance querying while maintaining concurrent loads of indexing and querying</li>\n      <li>Highly scalable across multiple nodes to billions of items per second </li>\n    </ul>\n  </div>\n  <div class=\"item-fail item hidden\">\n    <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/ico-front-fail-reverse.svg\" class=\"popup-image\">\n    <h3>Failsafe high availability</h3>\n    <ul>\n      <li>Cross-rack/zone/datacenter/geo replication</li>\n      <li>Instant auto-failover in single digit second</li>\n      <li>Zero impact on throughput and latency during cluster operations such as scaling, upgrades, re-sharding and rebalancing</li>\n      <li>Out-of-the box support for backup, restore and DR</li>\n    </ul>\n  </div>\n  <div class=\"item-geo item hidden\">\n    <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/ico-front-geo-reverse.svg\" class=\"popup-image\">\n    <h3>Active-active geo distribution</h3>\n    <ul>\n      <li>Reads/Writes in multiple geo regions to the same dataset</li>\n      <li>Local latencies, global availability</li>\n      <li>Built-in conflict resolution for simple and complex data types</li>\n      <li>Based on revolutionary CRDT academic research</li>\n    </ul>\n  </div>\n  <div class=\"item-persist item hidden\">\n    <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/ico-front-persist-reverse.svg\" class=\"popup-image\">\n    <h3>Built-in persistence</h3>\n    <ul>\n      <li>Enhanced storage engine for parallel access to any persistent storage</li>\n      <li>Multiple options for enhanced data persistence</li>\n      <li>Reliable persistence configurations on both master and slave shards with zero performance impact</li>\n    </ul>\n  </div>\n  <div class=\"item-multi item hidden\">\n    <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/ico-front-multi-reverse.svg\" class=\"popup-image\">\n    <h3>Multi-model</h3>\n    <ul>\n      <li>Graph, JSON, Machine Learning and Bloom filter modules set industry standards for high performance</li>\n      <li>Multi-shard coordination</li>\n      <li>Extensibility with custom modules</li>\n    </ul>\n  </div>\n  <div class=\"item-tiered item hidden\">\n    <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/ico-front-tiered-reverse.svg\" class=\"popup-image\">\n    <h3>Intelligent tiered access to memory</h3>\n    <ul>\n      <li>Up to 80% lower infrastructure costs by running Redis on Flash</li>\n      <li>Automatic management of data tiering between RAM &amp; Flash with no code changes</li>\n      <li>Supports all new persistent memory technologies</li>\n    </ul>\n  </div>\n  <div class=\"item-deploy item hidden\">\n    <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/ico-front-deploy-reverse.svg\" class=\"popup-image\">\n    <h3>Flexible deployment options</h3>\n    <ul>\n      <li>Hybrid clusters can span on-prem infrastructure and multiple clouds</li>\n      <li>Most efficient use of resources with maximized core usage, multi-tenancy, re-sharding and re-balancing to avoid noisy neighbors in every environment</li>\n    </ul>\n  </div>\n  <!-- Categories -->\n  <!-- Desktop Grid -->\n  <div class=\"strengths\">\n    <!-- Grid - Row -->\n\n    <div class=\"main-flex\">\n      <div class=\"columns medium-4 left parent\">\n        <div class=\"columns feature item-fast scale\">\n          <div class=\"img\">\n          </div>\n          <div class=\"text\">\n            Perfomance at Scale\n          </div>\n        </div>\n\n        <div class=\"columns feature item-durable persistence\">\n          <div class=\"img\">\n          </div>\n          <div class=\"text\">\n            Built-in persistence\n          </div>\n        </div>\n\n        <div class=\"columns feature item-durable failsafe\">\n          <div class=\"img\">\n          </div>\n          <div class=\"text\">\n            Failsafe high availability\n          </div>\n        </div>\n\n        <div class=\"columns feature item-durable geo\">\n          <div class=\"img\">\n          </div>\n          <div class=\"text\">\n            Active-active geo distribution\n          </div>\n        </div>\n\n      </div>\n      <div class=\"columns medium-4 center parent\">\n        <div class=\"redis red-strengths\">\n          <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/redis-e-logo.svg\" alt=\"Redis Labs\">\n        </div>\n      </div>\n      <div class=\"columns medium-4 right parent\">\n        <div class=\"columns feature right item-fast search\">\n          <div class=\"img\">\n          </div>\n          <div class=\"text\">\n            Built-in high performance search\n          </div>\n        </div>\n\n        <div class=\"columns feature item-flex multi\">\n          <div class=\"img\">\n          </div>\n          <div class=\"text\">\n            Multi-model\n          </div>\n        </div>\n\n        <div class=\"columns feature item-flex vert tiered\">\n          <div class=\"img\">\n          </div>\n          <div class=\"text\">\n            Intelligent tiered access to memory\n            <br>(RAM and Flash)\n          </div>\n        </div>\n\n        <div class=\"columns feature item-flex vert deploy\">\n          <div class=\"img\">\n          </div>\n          <div class=\"text\">\n            Flexible deployment options\n            <br>(cloud, on-prem, hybrid)\n          </div>\n        </div>\n\n\n      </div>\n\n    </div>\n\n    <!-- Grid - Redis Logo-->\n\n  </div>\n  <!-- End Desktop Grid -->\n\n\n\n  <div class=\"grid-container mobile-grid\">\n    <div class=\"redis-mobile red-strengths\">\n      <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/redis-e-logo.svg\" alt=\"Redis Labs\">\n    </div>\n    <!-- Column 1 -->\n    <div class=\"mobile-flex\">\n      <div class=\"columns small-12 medium-4\">\n        <h3>Fast</h3>\n        <div class=\"columns\">\n          <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/ico-front-performance.svg\">\n          <span class=\"text short\">\n            Performance at scale\n          </span>\n        </div>\n        <div class=\"columns\">\n          <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/ico-front-search.svg\">\n          <span class=\"text med\">\n            Built-in high performance search\n          </span>\n        </div>\n      </div>\n      <!-- End Column 1 -->\n      <!-- Column 2 -->\n      <div class=\"columns small-12 medium-4\">\n        <h3>Reliable</h3>\n        <div class=\"columns\">\n          <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/ico-front-persist.svg\">\n          <span class=\"text short\">\n            Built-in persistence\n          </span>\n        </div>\n        <div class=\"columns\">\n          <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/ico-front-fail.svg\">\n          <span class=\"text short med\">\n            Failsafe high availability\n          </span>\n        </div>\n        <div class=\"columns\">\n          <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/ico-front-geo.svg\">\n          <span class=\"text med\">\n            Active-active geo distribution\n          </span>\n        </div>\n      </div>\n      <!-- End Column 2 -->\n      <!-- Column 3 -->\n      <div class=\"columns small-12 medium-4\">\n        <h3>Flexible</h3>\n        <div class=\"columns\">\n          <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/ico-front-multi.svg\">\n          <span class=\"text short\">\n            Multi-model\n          </span>\n        </div>\n        <div class=\"columns\">\n          <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/ico-front-deploy.svg\">\n          <span class=\"text long\">\n            Flexible deployment options <span class=\"small\">(cloud, hybrid, on-prem)</span>\n          </span>\n        </div>\n        <div class=\"columns\">\n          <img src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/ico-front-tiered.svg\">\n          <span class=\"text long\">\n            Intelligent tiered access to memory <span class=\"small\">(ram and flash)</span>\n          </span>\n        </div>\n      </div>\n    </div>\n    <!-- End Column 3 -->\n  </div>\n</div>\n<span style=\"color: #969696;\n    text-align: center;\n    display: block;\n    font-weight: 100;\n    font-style: italic;\n    margin-bottom: 30px;\n    font-size: .9em;\">(Why am I not getting paid for this? Why did I take the time to even make that module?)</span><p><strong>Redis</strong> is NoSQL datastore written in C intended to temporarily hold data in memory for users as they blaze mindlessly through your site. Other use cases include serving as the foundation for real-time chat apps via the publish/subscribe messaging paradigm; popular amongst stupid chat or dating apps slowly destroying our abilities as human beings to interact face-to-face. Powerful stuff.</p><h2 id=\"structuring-init-py-correctly\">Structuring <strong>init</strong>.py Correctly</h2><p>Consider this to be the guide to Flask Application factories I wish I had months ago. A healthy application factory should:</p><ul><li>Derive all app configuration values from a class or environment variables.</li><li>Allow Database interactions to occur at any point within the app.</li><li>Pass values globally outside of the application context.</li></ul><p>This does all of those things:</p><pre><code class=\"language-python\">from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_session import Session\nfrom flask_redis import FlaskRedis\n\n# Globally accessible libraries\ndb = SQLAlchemy()\nr = FlaskRedis()\n\n\ndef create_app():\n    &quot;&quot;&quot;Initialize the core application.&quot;&quot;&quot;\n    app = Flask(__name__, instance_relative_config=False)\n    app.config.from_object('config.Config')\n\n    with app.app_context():\n        # Set global session variables\n        r.set('endpoint', str(app.config['ENDPOINT']).encode('utf-8'))\n        r.set('post_query', str(app.config['POST_QUERY']).encode('utf-8'))\n        \n        # Initialize Global Libraries\n        redis_store.init_app(app)\n        db.init_app(app)\n\n        # Include our Routes\n        from . import routes\n\n        return app\n</code></pre>\n<p>The order of operations here is critical.</p><p>Before we do anything related to the app itself, we create instances of <code>flask_sqlalchemy</code> and <code>flask_redis</code>. This will be initialized with our app once we actually have one created.</p><p>The first two lines of <code>create_app()</code> should be no surprise: we're just creating our Flask app, and stating that it should be configured using a class called <strong>Config</strong> in a file named <strong>config.py.</strong></p><pre><code class=\"language-python\">app = Flask(__name__, instance_relative_config=False)\napp.config.from_object('config.Config')\n</code></pre>\n<p>Moving down the function comes the moment of truth: <strong>creating the app context.</strong> What happens in the app context stays in the app context... except for our sick new Redis setup. By using the Redis <code>.set()</code> method, we can assign <em>key/value pairs</em> for Redis hang on to, such as values from our app config which might be needed elsewhere in our app: <code>r.set('endpoint', str(app.config['ENDPOINT']).encode('utf-8'))</code>.</p><div class=\"protip\">\n    Redis stores information as bytes by default, thus attempting to pass values such as strings will result in the infamous `b'leading letter b'` phenomenon. Be sure to encode your values as utf-8 when using set(), and decode when using get().\n</div><h3 id=\"making-redis-globally-available\">Making Redis Globally Available</h3><p>The next part is important: we need to 'initialize' the services we want to use globally (such as database access or Redis) by using <code>init_app()</code>. This <em>must </em>happen inside the application context, with the parameter being <code>app</code>. This is our way of achieving singularity into inter-dimensional travel, thus breaking out of the dreaded application context long after it dies.</p><h2 id=\"let-s-access-some-variables-baby\">Let's Access Some Variables, Baby</h2><p>The moment of truth: will this actually work? Or am I actually a filthy liar flooding the internet with more uselessly outdated Flask advice? Let's see:</p><pre><code class=\"language-python\"># routes.py\n\nfrom flask import current_app as app\nfrom flask import make_response\nimport json\nfrom . import models\nfrom . import r\n\nheaders = { 'Access-Control-Allow-Headers': 'Content-Type' }\n\n\n@app.route('/', methods=['GET', 'POST'])\ndef entry():\n    readers = models.Readers.query.filter_by(username='john').all()\n    print(readers)\n    print(r.get('uri').decode('utf-8'))\n    return make_response(str('readers'), 200, headers)\n</code></pre>\n<p>Eureka! This worthless entry-point prints two things: the value we assigned to our Redis block, and all records in our database of people named John:</p><pre><code class=\"language-bash\">&gt;&gt; [&lt;User john&gt;]\n&gt;&gt; https://us1-hackersandslackers-543.cloudfunctions.net/link-endpoint?url=\n</code></pre>\n<p>As simple and stupid as it seems, developing an app to this point <em>while understanding why it works</em> is a victory for any developer. I complain about this nearly every post, but the fact of the matter is that the heroes who build much of today's technologies commonly fail to explain their own art in understandable terms. It's an understandable phenomenon resulting from isolated spurts of genius, perhaps, but it damages the growth of companies and humanity alike.</p><p>So I guess this is my calling: writing documentation for other people's accomplishments. <strong>\"Marginally less confusing than 4 open Stackoverflow tabs.\"</strong> That's what I hope to have engraved on my gravestone.</p><p>Merry Christmas.</p>","url":"https://hackersandslackers.com/demystifying-flasks-application-context/","uuid":"ede882df-a696-43ef-a392-9430d98a961e","page":false,"codeinjection_foot":"<script type=\"text/javascript\" async=\"\" src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/autoNumeric.min.js\"></script>\n\n<script type=\"text/javascript\" async=\"\" src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/underscore-min.js\"></script>\n\n<script type=\"text/javascript\" async=\"\" src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/mustache.min.js\"></script>\n\n<script type=\"text/javascript\" async=\"\" src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/owl.js\"></script>\n\n<script type=\"text/javascript\" async=\"\" src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/jquery.counterup.min.js\"></script>\n\n\n<script type=\"text/javascript\" async=\"\" src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/foundation.js\"></script>\n<script type=\"text/javascript\" async=\"\" src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/docker.js\"></script>\n<script type=\"text/javascript\" async=\"\" src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/jquery.fancybox.pack.js\"></script>\n<script type=\"text/javascript\" async=\"\" src=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/scripts.js\"></script>","codeinjection_head":"<link rel=\"stylesheet\" href=\"https://hackers.nyc3.cdn.digitaloceanspaces.com/redis/redislast2.css\">","comment_id":"5c192cdba632c8240cad3869"}},"pageContext":{"slug":"demystifying-flasks-application-context"}}