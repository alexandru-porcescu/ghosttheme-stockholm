<ul class="menu">
	{{#foreach navigation}}
		<li class="nav-{{slug}}{{#if current}} nav-current{{/if}}" role="presentation"><a href="{{url absolute="true"}}">{{label}}</a></li>
	{{/foreach}}
	<li id="account">
		<img src="https://hackersandslackers.nyc3.cdn.digitaloceanspaces.com/user.png">
		<div class="accountback"></div>
	</li>
</ul>


<div class="menu-wrapper">
	<div class="dropdown-menu">
		<div id="login">
			<h4>Log in</h4>
			<form>
				<label for="login-email">Email:</label>
				<input type="text" class="form-control" id="login-email" aria-label="login-email" />
				<label for="login-password">Password:</label>
				<input type="password" class="form-control" id="login-password" aria-label="login-password" /></label>
				<button class="btn btn-success" onclick="handleLogin()">Log on</button>
			</form>
			<a href="/signup-post" class="secondarylink">Create an Account <i class="far fa-arrow-right"></i></a>
		</div>
		<div id="info">
			<div id="success"></div>
			<div id="error"></div>
		</div>
	</div>
</div>



<script>
	"use strict";
		$('#account').on('click', function(event) {
			event.preventDefault();
			return false;
		});

		$('.dropdown-menu .btn').on('click', function(event) {
			event.preventDefault();
			return false;
		});



	const {
		Stitch,
		UserPasswordAuthProviderClient,
		UserPasswordCredential
	} = stitch;

	const stitchClient = Stitch.initializeDefaultAppClient("hackers-uangn");
	const emailPasswordClient = stitchClient.auth.getProviderClient(UserPasswordAuthProviderClient.factory, "userpass");



	// Authenticate an application user based on the submitted information
	async function handleLogin() {
		const email = loginEmailEl.value;
		const password = loginPasswordEl.value;
		const credential = new UserPasswordCredential(email, password);

		try {
			await stitchClient.auth.loginWithCredential(credential);
			const user = stitchClient.auth.user;
			showLoggedInState();
			displaySuccess(`Logged in as: ${user.profile.data.email}`)

		} catch (e) {
			handleError(e)
		}
	}

	async function handleLogout() {
		await stitchClient.auth.logout();
		showControlPanel();
	}

	async function handleResendConfirmation() {
		const email = resendConfirmationEmailEl.value;
		await emailPasswordClient.resendConfirmationEmail(email);
		showControlPanel();
	}

	// DOM Element Variables
	const loginFormEl = document.getElementById("login");
	const loginEmailEl = document.getElementById("login-email");
	const loginPasswordEl = document.getElementById("login-password");
	const notificationEl = document.getElementById("info");
	const loggedInEl = document.getElementById("logged-in");
	const successEl = document.getElementById("success");
	const errorEl = document.getElementById("error");

	// Notification Functions
	function displayError(errorMessage) {
		clearNotifications();
		errorEl.innerText = errorMessage;
		$('#error').css('display', 'block');
		$('#info').css('display', 'block');
	}

	function displaySuccess(successMessage) {
		clearNotifications();
		$('#success').css('display', 'block');
		$('#info').css('display', 'block');
		successEl.innerText = successMessage
	}

	function clearNotifications() {
		[errorEl, successEl].forEach(el => el.innerText = "")
	}

	// Helper Functions
	function clearFields(fields) {
		fields.forEach(field => field.value = "")
	}

	function toggleHiddenElementById(id) {
		document.getElementById(id).classList.toggle("hidden");
	}

	// UI State Transitions
	function showRegistrationForm() {
		clearNotifications();
		resendConfirmationEl.hidden = true;
		controlPanelEl.hidden = true;
		registerFormEl.hidden = false;
		loggedInEl.hidden = true;
		postRegistrationEl.hidden = true;
	}

	function showLoginForm() {
		clearNotifications();
		resendConfirmationEl.hidden = true;
		controlPanelEl.hidden = true;
		loginFormEl.hidden = false;
		loggedInEl.hidden = true;
		postRegistrationEl.hidden = true;
	}

	function showControlPanel() {
		clearNotifications()
		resendConfirmationEl.hidden = true;
		controlPanelEl.hidden = false;
		loginFormEl.hidden = true;
		registerFormEl.hidden = true;
		loggedInEl.hidden = true;
		postRegistrationEl.hidden = true;
	}

	function showResendConfirmationForm() {
		clearNotifications()
		resendConfirmationEl.hidden = false;
		controlPanelEl.hidden = true;
		loginFormEl.hidden = true;
		registerFormEl.hidden = true;
		loggedInEl.hidden = true;
		postRegistrationEl.hidden = true;
	}

	function showLoggedInState() {
		clearFields([loginEmailEl, loginPasswordEl]);
		clearNotifications()
		resendConfirmationEl.hidden = true;
		controlPanelEl.hidden = true;
		loginFormEl.hidden = true;
		registerFormEl.hidden = true;
		loggedInEl.hidden = false;
		postRegistrationEl.hidden = true;
	}

	function showPostRegistrationState() {
		clearFields([registerEmailEl, registerPasswordEl]);
		resendConfirmationEl.hidden = true;
		controlPanelEl.hidden = true;
		loginFormEl.hidden = true;
		registerFormEl.hidden = true;
		loggedInEl.hidden = true;
		postRegistrationEl.hidden = false;
	}

	function setPostRegistrationState() {
		// Clear registration form inputs then hide the form
		clearFields([registerEmailEl, registerPasswordEl]);
		toggleHiddenElementById("create-a-user");
		return Promise.resolve()
	}

	function handleError(err) {
		console.error(err)
		const errType = err.message || "Error!"
		const msg = ({
			"invalid username/password": "Invalid username or password was entered. Please try again.",
			"name already in use": "An account already exists for that email."
		})[errType] || errType
		displayError(msg);
		$('#info').css('opacity', '1');
	}

	$('#account').on('click', function(event) {
		event.preventDefault();

		$('.accountback').animate({
			opacity: 1
		}, 500, 'swing');

		$('.menu-wrapper').animate({
			opacity: 1
		}, 500, 'swing');
		return false;
	});
</script>
